// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HMBANCKGBII.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:HMBANCKGBII)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HMBANCKGBII {
    // message oneof groups
    pub KFELKJLDKEH: ::std::option::Option<hmbanckgbii::KFELKJLDKEH>,
    // special fields
    // @@protoc_insertion_point(special_field:HMBANCKGBII.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HMBANCKGBII {
    fn default() -> &'a HMBANCKGBII {
        <HMBANCKGBII as ::protobuf::Message>::default_instance()
    }
}

impl HMBANCKGBII {
    pub fn new() -> HMBANCKGBII {
        ::std::default::Default::default()
    }

    // .GIEDCJDLEGE LKMLGOEEEKH = 8;

    pub fn LKMLGOEEEKH(&self) -> &super::GIEDCJDLEGE::GIEDCJDLEGE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(ref v)) => v,
            _ => <super::GIEDCJDLEGE::GIEDCJDLEGE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LKMLGOEEEKH(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LKMLGOEEEKH(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LKMLGOEEEKH(&mut self, v: super::GIEDCJDLEGE::GIEDCJDLEGE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LKMLGOEEEKH(&mut self) -> &mut super::GIEDCJDLEGE::GIEDCJDLEGE {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(super::GIEDCJDLEGE::GIEDCJDLEGE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LKMLGOEEEKH(&mut self) -> super::GIEDCJDLEGE::GIEDCJDLEGE {
        if self.has_LKMLGOEEEKH() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GIEDCJDLEGE::GIEDCJDLEGE::new()
        }
    }

    // .GIEDCJDLEGE COHNLGMIFBO = 3;

    pub fn COHNLGMIFBO(&self) -> &super::GIEDCJDLEGE::GIEDCJDLEGE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(ref v)) => v,
            _ => <super::GIEDCJDLEGE::GIEDCJDLEGE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_COHNLGMIFBO(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_COHNLGMIFBO(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_COHNLGMIFBO(&mut self, v: super::GIEDCJDLEGE::GIEDCJDLEGE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_COHNLGMIFBO(&mut self) -> &mut super::GIEDCJDLEGE::GIEDCJDLEGE {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(super::GIEDCJDLEGE::GIEDCJDLEGE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_COHNLGMIFBO(&mut self) -> super::GIEDCJDLEGE::GIEDCJDLEGE {
        if self.has_COHNLGMIFBO() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GIEDCJDLEGE::GIEDCJDLEGE::new()
        }
    }

    // .HPGAGBGJLID PMLOCBHIDDL = 4;

    pub fn PMLOCBHIDDL(&self) -> &super::HPGAGBGJLID::HPGAGBGJLID {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(ref v)) => v,
            _ => <super::HPGAGBGJLID::HPGAGBGJLID as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMLOCBHIDDL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_PMLOCBHIDDL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMLOCBHIDDL(&mut self, v: super::HPGAGBGJLID::HPGAGBGJLID) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMLOCBHIDDL(&mut self) -> &mut super::HPGAGBGJLID::HPGAGBGJLID {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(super::HPGAGBGJLID::HPGAGBGJLID::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMLOCBHIDDL(&mut self) -> super::HPGAGBGJLID::HPGAGBGJLID {
        if self.has_PMLOCBHIDDL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HPGAGBGJLID::HPGAGBGJLID::new()
        }
    }

    // .HPGAGBGJLID LEBMNLOAKHC = 1;

    pub fn LEBMNLOAKHC(&self) -> &super::HPGAGBGJLID::HPGAGBGJLID {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(ref v)) => v,
            _ => <super::HPGAGBGJLID::HPGAGBGJLID as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LEBMNLOAKHC(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LEBMNLOAKHC(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LEBMNLOAKHC(&mut self, v: super::HPGAGBGJLID::HPGAGBGJLID) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LEBMNLOAKHC(&mut self) -> &mut super::HPGAGBGJLID::HPGAGBGJLID {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(super::HPGAGBGJLID::HPGAGBGJLID::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LEBMNLOAKHC(&mut self) -> super::HPGAGBGJLID::HPGAGBGJLID {
        if self.has_LEBMNLOAKHC() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HPGAGBGJLID::HPGAGBGJLID::new()
        }
    }

    // .OFGBMCKNLDJ KBNLIGLJENN = 11;

    pub fn KBNLIGLJENN(&self) -> &super::OFGBMCKNLDJ::OFGBMCKNLDJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(ref v)) => v,
            _ => <super::OFGBMCKNLDJ::OFGBMCKNLDJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KBNLIGLJENN(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KBNLIGLJENN(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KBNLIGLJENN(&mut self, v: super::OFGBMCKNLDJ::OFGBMCKNLDJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KBNLIGLJENN(&mut self) -> &mut super::OFGBMCKNLDJ::OFGBMCKNLDJ {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(super::OFGBMCKNLDJ::OFGBMCKNLDJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KBNLIGLJENN(&mut self) -> super::OFGBMCKNLDJ::OFGBMCKNLDJ {
        if self.has_KBNLIGLJENN() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OFGBMCKNLDJ::OFGBMCKNLDJ::new()
        }
    }

    // .OFGBMCKNLDJ MMFBENAMBNE = 2;

    pub fn MMFBENAMBNE(&self) -> &super::OFGBMCKNLDJ::OFGBMCKNLDJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(ref v)) => v,
            _ => <super::OFGBMCKNLDJ::OFGBMCKNLDJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MMFBENAMBNE(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_MMFBENAMBNE(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MMFBENAMBNE(&mut self, v: super::OFGBMCKNLDJ::OFGBMCKNLDJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MMFBENAMBNE(&mut self) -> &mut super::OFGBMCKNLDJ::OFGBMCKNLDJ {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(super::OFGBMCKNLDJ::OFGBMCKNLDJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MMFBENAMBNE(&mut self) -> super::OFGBMCKNLDJ::OFGBMCKNLDJ {
        if self.has_MMFBENAMBNE() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OFGBMCKNLDJ::OFGBMCKNLDJ::new()
        }
    }

    // .EOAEGAEFPFH GNAIDHHJEBI = 9;

    pub fn GNAIDHHJEBI(&self) -> &super::EOAEGAEFPFH::EOAEGAEFPFH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(ref v)) => v,
            _ => <super::EOAEGAEFPFH::EOAEGAEFPFH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GNAIDHHJEBI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GNAIDHHJEBI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GNAIDHHJEBI(&mut self, v: super::EOAEGAEFPFH::EOAEGAEFPFH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GNAIDHHJEBI(&mut self) -> &mut super::EOAEGAEFPFH::EOAEGAEFPFH {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(super::EOAEGAEFPFH::EOAEGAEFPFH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GNAIDHHJEBI(&mut self) -> super::EOAEGAEFPFH::EOAEGAEFPFH {
        if self.has_GNAIDHHJEBI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EOAEGAEFPFH::EOAEGAEFPFH::new()
        }
    }

    // .EOAEGAEFPFH JBDHLHHFDGE = 10;

    pub fn JBDHLHHFDGE(&self) -> &super::EOAEGAEFPFH::EOAEGAEFPFH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(ref v)) => v,
            _ => <super::EOAEGAEFPFH::EOAEGAEFPFH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JBDHLHHFDGE(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JBDHLHHFDGE(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JBDHLHHFDGE(&mut self, v: super::EOAEGAEFPFH::EOAEGAEFPFH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JBDHLHHFDGE(&mut self) -> &mut super::EOAEGAEFPFH::EOAEGAEFPFH {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(super::EOAEGAEFPFH::EOAEGAEFPFH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JBDHLHHFDGE(&mut self) -> super::EOAEGAEFPFH::EOAEGAEFPFH {
        if self.has_JBDHLHHFDGE() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EOAEGAEFPFH::EOAEGAEFPFH::new()
        }
    }

    // .PPFCJHEKOLG JPLPLFCOOKD = 6;

    pub fn JPLPLFCOOKD(&self) -> &super::PPFCJHEKOLG::PPFCJHEKOLG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(ref v)) => v,
            _ => <super::PPFCJHEKOLG::PPFCJHEKOLG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JPLPLFCOOKD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JPLPLFCOOKD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JPLPLFCOOKD(&mut self, v: super::PPFCJHEKOLG::PPFCJHEKOLG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JPLPLFCOOKD(&mut self) -> &mut super::PPFCJHEKOLG::PPFCJHEKOLG {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(super::PPFCJHEKOLG::PPFCJHEKOLG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JPLPLFCOOKD(&mut self) -> super::PPFCJHEKOLG::PPFCJHEKOLG {
        if self.has_JPLPLFCOOKD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PPFCJHEKOLG::PPFCJHEKOLG::new()
        }
    }

    // .PPFCJHEKOLG MKOFOOCOKBK = 5;

    pub fn MKOFOOCOKBK(&self) -> &super::PPFCJHEKOLG::PPFCJHEKOLG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(ref v)) => v,
            _ => <super::PPFCJHEKOLG::PPFCJHEKOLG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MKOFOOCOKBK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_MKOFOOCOKBK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MKOFOOCOKBK(&mut self, v: super::PPFCJHEKOLG::PPFCJHEKOLG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MKOFOOCOKBK(&mut self) -> &mut super::PPFCJHEKOLG::PPFCJHEKOLG {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(super::PPFCJHEKOLG::PPFCJHEKOLG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MKOFOOCOKBK(&mut self) -> super::PPFCJHEKOLG::PPFCJHEKOLG {
        if self.has_MKOFOOCOKBK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PPFCJHEKOLG::PPFCJHEKOLG::new()
        }
    }

    // .PHFBDNNLINF OLMGNEOAHOP = 7;

    pub fn OLMGNEOAHOP(&self) -> &super::PHFBDNNLINF::PHFBDNNLINF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(ref v)) => v,
            _ => <super::PHFBDNNLINF::PHFBDNNLINF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OLMGNEOAHOP(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_OLMGNEOAHOP(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OLMGNEOAHOP(&mut self, v: super::PHFBDNNLINF::PHFBDNNLINF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OLMGNEOAHOP(&mut self) -> &mut super::PHFBDNNLINF::PHFBDNNLINF {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(super::PHFBDNNLINF::PHFBDNNLINF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OLMGNEOAHOP(&mut self) -> super::PHFBDNNLINF::PHFBDNNLINF {
        if self.has_OLMGNEOAHOP() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PHFBDNNLINF::PHFBDNNLINF::new()
        }
    }

    // .ADAFJFOJDEG GBFFGPHFMDP = 14;

    pub fn GBFFGPHFMDP(&self) -> &super::ADAFJFOJDEG::ADAFJFOJDEG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(ref v)) => v,
            _ => <super::ADAFJFOJDEG::ADAFJFOJDEG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GBFFGPHFMDP(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GBFFGPHFMDP(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GBFFGPHFMDP(&mut self, v: super::ADAFJFOJDEG::ADAFJFOJDEG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GBFFGPHFMDP(&mut self) -> &mut super::ADAFJFOJDEG::ADAFJFOJDEG {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(super::ADAFJFOJDEG::ADAFJFOJDEG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GBFFGPHFMDP(&mut self) -> super::ADAFJFOJDEG::ADAFJFOJDEG {
        if self.has_GBFFGPHFMDP() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ADAFJFOJDEG::ADAFJFOJDEG::new()
        }
    }

    // .ADAFJFOJDEG DMNMIFJHECL = 13;

    pub fn DMNMIFJHECL(&self) -> &super::ADAFJFOJDEG::ADAFJFOJDEG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(ref v)) => v,
            _ => <super::ADAFJFOJDEG::ADAFJFOJDEG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DMNMIFJHECL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DMNMIFJHECL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DMNMIFJHECL(&mut self, v: super::ADAFJFOJDEG::ADAFJFOJDEG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DMNMIFJHECL(&mut self) -> &mut super::ADAFJFOJDEG::ADAFJFOJDEG {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(super::ADAFJFOJDEG::ADAFJFOJDEG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DMNMIFJHECL(&mut self) -> super::ADAFJFOJDEG::ADAFJFOJDEG {
        if self.has_DMNMIFJHECL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ADAFJFOJDEG::ADAFJFOJDEG::new()
        }
    }

    // .PCODFCNKHJK IMFCDMIEOPL = 12;

    pub fn IMFCDMIEOPL(&self) -> &super::PCODFCNKHJK::PCODFCNKHJK {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(ref v)) => v,
            _ => <super::PCODFCNKHJK::PCODFCNKHJK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IMFCDMIEOPL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IMFCDMIEOPL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IMFCDMIEOPL(&mut self, v: super::PCODFCNKHJK::PCODFCNKHJK) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IMFCDMIEOPL(&mut self) -> &mut super::PCODFCNKHJK::PCODFCNKHJK {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(super::PCODFCNKHJK::PCODFCNKHJK::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IMFCDMIEOPL(&mut self) -> super::PCODFCNKHJK::PCODFCNKHJK {
        if self.has_IMFCDMIEOPL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PCODFCNKHJK::PCODFCNKHJK::new()
        }
    }

    // .OLBOPGJFFPM PCLLCBMHCBD = 15;

    pub fn PCLLCBMHCBD(&self) -> &super::OLBOPGJFFPM::OLBOPGJFFPM {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(ref v)) => v,
            _ => <super::OLBOPGJFFPM::OLBOPGJFFPM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PCLLCBMHCBD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_PCLLCBMHCBD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PCLLCBMHCBD(&mut self, v: super::OLBOPGJFFPM::OLBOPGJFFPM) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PCLLCBMHCBD(&mut self) -> &mut super::OLBOPGJFFPM::OLBOPGJFFPM {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(super::OLBOPGJFFPM::OLBOPGJFFPM::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PCLLCBMHCBD(&mut self) -> super::OLBOPGJFFPM::OLBOPGJFFPM {
        if self.has_PCLLCBMHCBD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OLBOPGJFFPM::OLBOPGJFFPM::new()
        }
    }

    // .HFOCNHOJLAH BIEDMJPAEBD = 40;

    pub fn BIEDMJPAEBD(&self) -> &super::HFOCNHOJLAH::HFOCNHOJLAH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(ref v)) => v,
            _ => <super::HFOCNHOJLAH::HFOCNHOJLAH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BIEDMJPAEBD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BIEDMJPAEBD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BIEDMJPAEBD(&mut self, v: super::HFOCNHOJLAH::HFOCNHOJLAH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BIEDMJPAEBD(&mut self) -> &mut super::HFOCNHOJLAH::HFOCNHOJLAH {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(super::HFOCNHOJLAH::HFOCNHOJLAH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BIEDMJPAEBD(&mut self) -> super::HFOCNHOJLAH::HFOCNHOJLAH {
        if self.has_BIEDMJPAEBD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HFOCNHOJLAH::HFOCNHOJLAH::new()
        }
    }

    // .PGNDIBBGIJN FOICFOGCGIA = 1882;

    pub fn FOICFOGCGIA(&self) -> &super::PGNDIBBGIJN::PGNDIBBGIJN {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(ref v)) => v,
            _ => <super::PGNDIBBGIJN::PGNDIBBGIJN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FOICFOGCGIA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_FOICFOGCGIA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FOICFOGCGIA(&mut self, v: super::PGNDIBBGIJN::PGNDIBBGIJN) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FOICFOGCGIA(&mut self) -> &mut super::PGNDIBBGIJN::PGNDIBBGIJN {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(super::PGNDIBBGIJN::PGNDIBBGIJN::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FOICFOGCGIA(&mut self) -> super::PGNDIBBGIJN::PGNDIBBGIJN {
        if self.has_FOICFOGCGIA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PGNDIBBGIJN::PGNDIBBGIJN::new()
        }
    }

    // .DJOEEGHMCFJ NCEIDLNKBBG = 649;

    pub fn NCEIDLNKBBG(&self) -> &super::DJOEEGHMCFJ::DJOEEGHMCFJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(ref v)) => v,
            _ => <super::DJOEEGHMCFJ::DJOEEGHMCFJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NCEIDLNKBBG(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NCEIDLNKBBG(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NCEIDLNKBBG(&mut self, v: super::DJOEEGHMCFJ::DJOEEGHMCFJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NCEIDLNKBBG(&mut self) -> &mut super::DJOEEGHMCFJ::DJOEEGHMCFJ {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(super::DJOEEGHMCFJ::DJOEEGHMCFJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NCEIDLNKBBG(&mut self) -> super::DJOEEGHMCFJ::DJOEEGHMCFJ {
        if self.has_NCEIDLNKBBG() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DJOEEGHMCFJ::DJOEEGHMCFJ::new()
        }
    }

    // .CBIKMFFDCGI KMMDPEJAKEC = 345;

    pub fn KMMDPEJAKEC(&self) -> &super::CBIKMFFDCGI::CBIKMFFDCGI {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(ref v)) => v,
            _ => <super::CBIKMFFDCGI::CBIKMFFDCGI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KMMDPEJAKEC(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KMMDPEJAKEC(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KMMDPEJAKEC(&mut self, v: super::CBIKMFFDCGI::CBIKMFFDCGI) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KMMDPEJAKEC(&mut self) -> &mut super::CBIKMFFDCGI::CBIKMFFDCGI {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(super::CBIKMFFDCGI::CBIKMFFDCGI::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KMMDPEJAKEC(&mut self) -> super::CBIKMFFDCGI::CBIKMFFDCGI {
        if self.has_KMMDPEJAKEC() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CBIKMFFDCGI::CBIKMFFDCGI::new()
        }
    }

    // .HPCAIMKJDIJ GPNLPNEEHDM = 28;

    pub fn GPNLPNEEHDM(&self) -> &super::HPCAIMKJDIJ::HPCAIMKJDIJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(ref v)) => v,
            _ => <super::HPCAIMKJDIJ::HPCAIMKJDIJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GPNLPNEEHDM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GPNLPNEEHDM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GPNLPNEEHDM(&mut self, v: super::HPCAIMKJDIJ::HPCAIMKJDIJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GPNLPNEEHDM(&mut self) -> &mut super::HPCAIMKJDIJ::HPCAIMKJDIJ {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(super::HPCAIMKJDIJ::HPCAIMKJDIJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GPNLPNEEHDM(&mut self) -> super::HPCAIMKJDIJ::HPCAIMKJDIJ {
        if self.has_GPNLPNEEHDM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HPCAIMKJDIJ::HPCAIMKJDIJ::new()
        }
    }

    // .HOHDMMNDKNJ CNEKLOKHAHL = 1259;

    pub fn CNEKLOKHAHL(&self) -> &super::HOHDMMNDKNJ::HOHDMMNDKNJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(ref v)) => v,
            _ => <super::HOHDMMNDKNJ::HOHDMMNDKNJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CNEKLOKHAHL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_CNEKLOKHAHL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CNEKLOKHAHL(&mut self, v: super::HOHDMMNDKNJ::HOHDMMNDKNJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CNEKLOKHAHL(&mut self) -> &mut super::HOHDMMNDKNJ::HOHDMMNDKNJ {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(super::HOHDMMNDKNJ::HOHDMMNDKNJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CNEKLOKHAHL(&mut self) -> super::HOHDMMNDKNJ::HOHDMMNDKNJ {
        if self.has_CNEKLOKHAHL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HOHDMMNDKNJ::HOHDMMNDKNJ::new()
        }
    }

    // .FHNGONEFBDE DMFJDAHPIID = 1848;

    pub fn DMFJDAHPIID(&self) -> &super::FHNGONEFBDE::FHNGONEFBDE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(ref v)) => v,
            _ => <super::FHNGONEFBDE::FHNGONEFBDE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DMFJDAHPIID(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DMFJDAHPIID(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DMFJDAHPIID(&mut self, v: super::FHNGONEFBDE::FHNGONEFBDE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DMFJDAHPIID(&mut self) -> &mut super::FHNGONEFBDE::FHNGONEFBDE {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(super::FHNGONEFBDE::FHNGONEFBDE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DMFJDAHPIID(&mut self) -> super::FHNGONEFBDE::FHNGONEFBDE {
        if self.has_DMFJDAHPIID() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FHNGONEFBDE::FHNGONEFBDE::new()
        }
    }

    // .PPFCJHEKOLG ILOEKHKEJAJ = 1811;

    pub fn ILOEKHKEJAJ(&self) -> &super::PPFCJHEKOLG::PPFCJHEKOLG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(ref v)) => v,
            _ => <super::PPFCJHEKOLG::PPFCJHEKOLG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ILOEKHKEJAJ(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_ILOEKHKEJAJ(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ILOEKHKEJAJ(&mut self, v: super::PPFCJHEKOLG::PPFCJHEKOLG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ILOEKHKEJAJ(&mut self) -> &mut super::PPFCJHEKOLG::PPFCJHEKOLG {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(super::PPFCJHEKOLG::PPFCJHEKOLG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ILOEKHKEJAJ(&mut self) -> super::PPFCJHEKOLG::PPFCJHEKOLG {
        if self.has_ILOEKHKEJAJ() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PPFCJHEKOLG::PPFCJHEKOLG::new()
        }
    }

    // .ILJJBGIFDPE LAEGJPILNND = 1034;

    pub fn LAEGJPILNND(&self) -> &super::ILJJBGIFDPE::ILJJBGIFDPE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(ref v)) => v,
            _ => <super::ILJJBGIFDPE::ILJJBGIFDPE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LAEGJPILNND(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LAEGJPILNND(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LAEGJPILNND(&mut self, v: super::ILJJBGIFDPE::ILJJBGIFDPE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LAEGJPILNND(&mut self) -> &mut super::ILJJBGIFDPE::ILJJBGIFDPE {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(super::ILJJBGIFDPE::ILJJBGIFDPE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LAEGJPILNND(&mut self) -> super::ILJJBGIFDPE::ILJJBGIFDPE {
        if self.has_LAEGJPILNND() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ILJJBGIFDPE::ILJJBGIFDPE::new()
        }
    }

    // .DEINADPEHKE LCDKLAHGKJI = 624;

    pub fn LCDKLAHGKJI(&self) -> &super::DEINADPEHKE::DEINADPEHKE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(ref v)) => v,
            _ => <super::DEINADPEHKE::DEINADPEHKE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LCDKLAHGKJI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LCDKLAHGKJI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LCDKLAHGKJI(&mut self, v: super::DEINADPEHKE::DEINADPEHKE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LCDKLAHGKJI(&mut self) -> &mut super::DEINADPEHKE::DEINADPEHKE {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(super::DEINADPEHKE::DEINADPEHKE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LCDKLAHGKJI(&mut self) -> super::DEINADPEHKE::DEINADPEHKE {
        if self.has_LCDKLAHGKJI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DEINADPEHKE::DEINADPEHKE::new()
        }
    }

    // .BKBILPDKOIL BCADDFDBFNA = 1744;

    pub fn BCADDFDBFNA(&self) -> &super::BKBILPDKOIL::BKBILPDKOIL {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(ref v)) => v,
            _ => <super::BKBILPDKOIL::BKBILPDKOIL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BCADDFDBFNA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BCADDFDBFNA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BCADDFDBFNA(&mut self, v: super::BKBILPDKOIL::BKBILPDKOIL) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BCADDFDBFNA(&mut self) -> &mut super::BKBILPDKOIL::BKBILPDKOIL {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(super::BKBILPDKOIL::BKBILPDKOIL::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BCADDFDBFNA(&mut self) -> super::BKBILPDKOIL::BKBILPDKOIL {
        if self.has_BCADDFDBFNA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BKBILPDKOIL::BKBILPDKOIL::new()
        }
    }

    // .EIKAIIDAEPP LIGLEFJMLHM = 50;

    pub fn LIGLEFJMLHM(&self) -> &super::EIKAIIDAEPP::EIKAIIDAEPP {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(ref v)) => v,
            _ => <super::EIKAIIDAEPP::EIKAIIDAEPP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LIGLEFJMLHM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LIGLEFJMLHM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LIGLEFJMLHM(&mut self, v: super::EIKAIIDAEPP::EIKAIIDAEPP) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LIGLEFJMLHM(&mut self) -> &mut super::EIKAIIDAEPP::EIKAIIDAEPP {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(super::EIKAIIDAEPP::EIKAIIDAEPP::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LIGLEFJMLHM(&mut self) -> super::EIKAIIDAEPP::EIKAIIDAEPP {
        if self.has_LIGLEFJMLHM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EIKAIIDAEPP::EIKAIIDAEPP::new()
        }
    }

    // .GJIPJNGNFEJ GBNCIDJNLPL = 312;

    pub fn GBNCIDJNLPL(&self) -> &super::GJIPJNGNFEJ::GJIPJNGNFEJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(ref v)) => v,
            _ => <super::GJIPJNGNFEJ::GJIPJNGNFEJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GBNCIDJNLPL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GBNCIDJNLPL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GBNCIDJNLPL(&mut self, v: super::GJIPJNGNFEJ::GJIPJNGNFEJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GBNCIDJNLPL(&mut self) -> &mut super::GJIPJNGNFEJ::GJIPJNGNFEJ {
        if let ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(super::GJIPJNGNFEJ::GJIPJNGNFEJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GBNCIDJNLPL(&mut self) -> super::GJIPJNGNFEJ::GJIPJNGNFEJ {
        if self.has_GBNCIDJNLPL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GJIPJNGNFEJ::GJIPJNGNFEJ::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(28);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GIEDCJDLEGE::GIEDCJDLEGE>(
            "LKMLGOEEEKH",
            HMBANCKGBII::has_LKMLGOEEEKH,
            HMBANCKGBII::LKMLGOEEEKH,
            HMBANCKGBII::mut_LKMLGOEEEKH,
            HMBANCKGBII::set_LKMLGOEEEKH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GIEDCJDLEGE::GIEDCJDLEGE>(
            "COHNLGMIFBO",
            HMBANCKGBII::has_COHNLGMIFBO,
            HMBANCKGBII::COHNLGMIFBO,
            HMBANCKGBII::mut_COHNLGMIFBO,
            HMBANCKGBII::set_COHNLGMIFBO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HPGAGBGJLID::HPGAGBGJLID>(
            "PMLOCBHIDDL",
            HMBANCKGBII::has_PMLOCBHIDDL,
            HMBANCKGBII::PMLOCBHIDDL,
            HMBANCKGBII::mut_PMLOCBHIDDL,
            HMBANCKGBII::set_PMLOCBHIDDL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HPGAGBGJLID::HPGAGBGJLID>(
            "LEBMNLOAKHC",
            HMBANCKGBII::has_LEBMNLOAKHC,
            HMBANCKGBII::LEBMNLOAKHC,
            HMBANCKGBII::mut_LEBMNLOAKHC,
            HMBANCKGBII::set_LEBMNLOAKHC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OFGBMCKNLDJ::OFGBMCKNLDJ>(
            "KBNLIGLJENN",
            HMBANCKGBII::has_KBNLIGLJENN,
            HMBANCKGBII::KBNLIGLJENN,
            HMBANCKGBII::mut_KBNLIGLJENN,
            HMBANCKGBII::set_KBNLIGLJENN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OFGBMCKNLDJ::OFGBMCKNLDJ>(
            "MMFBENAMBNE",
            HMBANCKGBII::has_MMFBENAMBNE,
            HMBANCKGBII::MMFBENAMBNE,
            HMBANCKGBII::mut_MMFBENAMBNE,
            HMBANCKGBII::set_MMFBENAMBNE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EOAEGAEFPFH::EOAEGAEFPFH>(
            "GNAIDHHJEBI",
            HMBANCKGBII::has_GNAIDHHJEBI,
            HMBANCKGBII::GNAIDHHJEBI,
            HMBANCKGBII::mut_GNAIDHHJEBI,
            HMBANCKGBII::set_GNAIDHHJEBI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EOAEGAEFPFH::EOAEGAEFPFH>(
            "JBDHLHHFDGE",
            HMBANCKGBII::has_JBDHLHHFDGE,
            HMBANCKGBII::JBDHLHHFDGE,
            HMBANCKGBII::mut_JBDHLHHFDGE,
            HMBANCKGBII::set_JBDHLHHFDGE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PPFCJHEKOLG::PPFCJHEKOLG>(
            "JPLPLFCOOKD",
            HMBANCKGBII::has_JPLPLFCOOKD,
            HMBANCKGBII::JPLPLFCOOKD,
            HMBANCKGBII::mut_JPLPLFCOOKD,
            HMBANCKGBII::set_JPLPLFCOOKD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PPFCJHEKOLG::PPFCJHEKOLG>(
            "MKOFOOCOKBK",
            HMBANCKGBII::has_MKOFOOCOKBK,
            HMBANCKGBII::MKOFOOCOKBK,
            HMBANCKGBII::mut_MKOFOOCOKBK,
            HMBANCKGBII::set_MKOFOOCOKBK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PHFBDNNLINF::PHFBDNNLINF>(
            "OLMGNEOAHOP",
            HMBANCKGBII::has_OLMGNEOAHOP,
            HMBANCKGBII::OLMGNEOAHOP,
            HMBANCKGBII::mut_OLMGNEOAHOP,
            HMBANCKGBII::set_OLMGNEOAHOP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ADAFJFOJDEG::ADAFJFOJDEG>(
            "GBFFGPHFMDP",
            HMBANCKGBII::has_GBFFGPHFMDP,
            HMBANCKGBII::GBFFGPHFMDP,
            HMBANCKGBII::mut_GBFFGPHFMDP,
            HMBANCKGBII::set_GBFFGPHFMDP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ADAFJFOJDEG::ADAFJFOJDEG>(
            "DMNMIFJHECL",
            HMBANCKGBII::has_DMNMIFJHECL,
            HMBANCKGBII::DMNMIFJHECL,
            HMBANCKGBII::mut_DMNMIFJHECL,
            HMBANCKGBII::set_DMNMIFJHECL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PCODFCNKHJK::PCODFCNKHJK>(
            "IMFCDMIEOPL",
            HMBANCKGBII::has_IMFCDMIEOPL,
            HMBANCKGBII::IMFCDMIEOPL,
            HMBANCKGBII::mut_IMFCDMIEOPL,
            HMBANCKGBII::set_IMFCDMIEOPL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OLBOPGJFFPM::OLBOPGJFFPM>(
            "PCLLCBMHCBD",
            HMBANCKGBII::has_PCLLCBMHCBD,
            HMBANCKGBII::PCLLCBMHCBD,
            HMBANCKGBII::mut_PCLLCBMHCBD,
            HMBANCKGBII::set_PCLLCBMHCBD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HFOCNHOJLAH::HFOCNHOJLAH>(
            "BIEDMJPAEBD",
            HMBANCKGBII::has_BIEDMJPAEBD,
            HMBANCKGBII::BIEDMJPAEBD,
            HMBANCKGBII::mut_BIEDMJPAEBD,
            HMBANCKGBII::set_BIEDMJPAEBD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PGNDIBBGIJN::PGNDIBBGIJN>(
            "FOICFOGCGIA",
            HMBANCKGBII::has_FOICFOGCGIA,
            HMBANCKGBII::FOICFOGCGIA,
            HMBANCKGBII::mut_FOICFOGCGIA,
            HMBANCKGBII::set_FOICFOGCGIA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DJOEEGHMCFJ::DJOEEGHMCFJ>(
            "NCEIDLNKBBG",
            HMBANCKGBII::has_NCEIDLNKBBG,
            HMBANCKGBII::NCEIDLNKBBG,
            HMBANCKGBII::mut_NCEIDLNKBBG,
            HMBANCKGBII::set_NCEIDLNKBBG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CBIKMFFDCGI::CBIKMFFDCGI>(
            "KMMDPEJAKEC",
            HMBANCKGBII::has_KMMDPEJAKEC,
            HMBANCKGBII::KMMDPEJAKEC,
            HMBANCKGBII::mut_KMMDPEJAKEC,
            HMBANCKGBII::set_KMMDPEJAKEC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HPCAIMKJDIJ::HPCAIMKJDIJ>(
            "GPNLPNEEHDM",
            HMBANCKGBII::has_GPNLPNEEHDM,
            HMBANCKGBII::GPNLPNEEHDM,
            HMBANCKGBII::mut_GPNLPNEEHDM,
            HMBANCKGBII::set_GPNLPNEEHDM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HOHDMMNDKNJ::HOHDMMNDKNJ>(
            "CNEKLOKHAHL",
            HMBANCKGBII::has_CNEKLOKHAHL,
            HMBANCKGBII::CNEKLOKHAHL,
            HMBANCKGBII::mut_CNEKLOKHAHL,
            HMBANCKGBII::set_CNEKLOKHAHL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FHNGONEFBDE::FHNGONEFBDE>(
            "DMFJDAHPIID",
            HMBANCKGBII::has_DMFJDAHPIID,
            HMBANCKGBII::DMFJDAHPIID,
            HMBANCKGBII::mut_DMFJDAHPIID,
            HMBANCKGBII::set_DMFJDAHPIID,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PPFCJHEKOLG::PPFCJHEKOLG>(
            "ILOEKHKEJAJ",
            HMBANCKGBII::has_ILOEKHKEJAJ,
            HMBANCKGBII::ILOEKHKEJAJ,
            HMBANCKGBII::mut_ILOEKHKEJAJ,
            HMBANCKGBII::set_ILOEKHKEJAJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ILJJBGIFDPE::ILJJBGIFDPE>(
            "LAEGJPILNND",
            HMBANCKGBII::has_LAEGJPILNND,
            HMBANCKGBII::LAEGJPILNND,
            HMBANCKGBII::mut_LAEGJPILNND,
            HMBANCKGBII::set_LAEGJPILNND,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DEINADPEHKE::DEINADPEHKE>(
            "LCDKLAHGKJI",
            HMBANCKGBII::has_LCDKLAHGKJI,
            HMBANCKGBII::LCDKLAHGKJI,
            HMBANCKGBII::mut_LCDKLAHGKJI,
            HMBANCKGBII::set_LCDKLAHGKJI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BKBILPDKOIL::BKBILPDKOIL>(
            "BCADDFDBFNA",
            HMBANCKGBII::has_BCADDFDBFNA,
            HMBANCKGBII::BCADDFDBFNA,
            HMBANCKGBII::mut_BCADDFDBFNA,
            HMBANCKGBII::set_BCADDFDBFNA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EIKAIIDAEPP::EIKAIIDAEPP>(
            "LIGLEFJMLHM",
            HMBANCKGBII::has_LIGLEFJMLHM,
            HMBANCKGBII::LIGLEFJMLHM,
            HMBANCKGBII::mut_LIGLEFJMLHM,
            HMBANCKGBII::set_LIGLEFJMLHM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GJIPJNGNFEJ::GJIPJNGNFEJ>(
            "GBNCIDJNLPL",
            HMBANCKGBII::has_GBNCIDJNLPL,
            HMBANCKGBII::GBNCIDJNLPL,
            HMBANCKGBII::mut_GBNCIDJNLPL,
            HMBANCKGBII::set_GBNCIDJNLPL,
        ));
        oneofs.push(hmbanckgbii::KFELKJLDKEH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HMBANCKGBII>(
            "HMBANCKGBII",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HMBANCKGBII {
    const NAME: &'static str = "HMBANCKGBII";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(is.read_message()?));
                },
                26 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(is.read_message()?));
                },
                34 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(is.read_message()?));
                },
                10 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(is.read_message()?));
                },
                90 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(is.read_message()?));
                },
                18 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(is.read_message()?));
                },
                74 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(is.read_message()?));
                },
                82 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(is.read_message()?));
                },
                50 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(is.read_message()?));
                },
                42 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(is.read_message()?));
                },
                58 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(is.read_message()?));
                },
                114 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(is.read_message()?));
                },
                106 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(is.read_message()?));
                },
                98 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(is.read_message()?));
                },
                122 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(is.read_message()?));
                },
                322 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(is.read_message()?));
                },
                15058 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(is.read_message()?));
                },
                5194 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(is.read_message()?));
                },
                2762 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(is.read_message()?));
                },
                226 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(is.read_message()?));
                },
                10074 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(is.read_message()?));
                },
                14786 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(is.read_message()?));
                },
                14490 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(is.read_message()?));
                },
                8274 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(is.read_message()?));
                },
                4994 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(is.read_message()?));
                },
                13954 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(is.read_message()?));
                },
                402 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(is.read_message()?));
                },
                2498 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &hmbanckgbii::KFELKJLDKEH::LKMLGOEEEKH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::COHNLGMIFBO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::PMLOCBHIDDL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::LEBMNLOAKHC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::KBNLIGLJENN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::MMFBENAMBNE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::GNAIDHHJEBI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::JBDHLHHFDGE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::JPLPLFCOOKD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::MKOFOOCOKBK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::OLMGNEOAHOP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::GBFFGPHFMDP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::DMNMIFJHECL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::IMFCDMIEOPL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::PCLLCBMHCBD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::BIEDMJPAEBD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(40, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::FOICFOGCGIA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1882, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::NCEIDLNKBBG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(649, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::KMMDPEJAKEC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(345, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::GPNLPNEEHDM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(28, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::CNEKLOKHAHL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1259, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::DMFJDAHPIID(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1848, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::ILOEKHKEJAJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1811, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::LAEGJPILNND(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1034, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::LCDKLAHGKJI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(624, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::BCADDFDBFNA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1744, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::LIGLEFJMLHM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(50, v, os)?;
                },
                &hmbanckgbii::KFELKJLDKEH::GBNCIDJNLPL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(312, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HMBANCKGBII {
        HMBANCKGBII::new()
    }

    fn clear(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HMBANCKGBII {
        static instance: HMBANCKGBII = HMBANCKGBII {
            KFELKJLDKEH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HMBANCKGBII {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HMBANCKGBII").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HMBANCKGBII {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HMBANCKGBII {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HMBANCKGBII`
pub mod hmbanckgbii {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:HMBANCKGBII.KFELKJLDKEH)
    pub enum KFELKJLDKEH {
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.LKMLGOEEEKH)
        LKMLGOEEEKH(super::super::GIEDCJDLEGE::GIEDCJDLEGE),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.COHNLGMIFBO)
        COHNLGMIFBO(super::super::GIEDCJDLEGE::GIEDCJDLEGE),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.PMLOCBHIDDL)
        PMLOCBHIDDL(super::super::HPGAGBGJLID::HPGAGBGJLID),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.LEBMNLOAKHC)
        LEBMNLOAKHC(super::super::HPGAGBGJLID::HPGAGBGJLID),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.KBNLIGLJENN)
        KBNLIGLJENN(super::super::OFGBMCKNLDJ::OFGBMCKNLDJ),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.MMFBENAMBNE)
        MMFBENAMBNE(super::super::OFGBMCKNLDJ::OFGBMCKNLDJ),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.GNAIDHHJEBI)
        GNAIDHHJEBI(super::super::EOAEGAEFPFH::EOAEGAEFPFH),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.JBDHLHHFDGE)
        JBDHLHHFDGE(super::super::EOAEGAEFPFH::EOAEGAEFPFH),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.JPLPLFCOOKD)
        JPLPLFCOOKD(super::super::PPFCJHEKOLG::PPFCJHEKOLG),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.MKOFOOCOKBK)
        MKOFOOCOKBK(super::super::PPFCJHEKOLG::PPFCJHEKOLG),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.OLMGNEOAHOP)
        OLMGNEOAHOP(super::super::PHFBDNNLINF::PHFBDNNLINF),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.GBFFGPHFMDP)
        GBFFGPHFMDP(super::super::ADAFJFOJDEG::ADAFJFOJDEG),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.DMNMIFJHECL)
        DMNMIFJHECL(super::super::ADAFJFOJDEG::ADAFJFOJDEG),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.IMFCDMIEOPL)
        IMFCDMIEOPL(super::super::PCODFCNKHJK::PCODFCNKHJK),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.PCLLCBMHCBD)
        PCLLCBMHCBD(super::super::OLBOPGJFFPM::OLBOPGJFFPM),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.BIEDMJPAEBD)
        BIEDMJPAEBD(super::super::HFOCNHOJLAH::HFOCNHOJLAH),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.FOICFOGCGIA)
        FOICFOGCGIA(super::super::PGNDIBBGIJN::PGNDIBBGIJN),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.NCEIDLNKBBG)
        NCEIDLNKBBG(super::super::DJOEEGHMCFJ::DJOEEGHMCFJ),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.KMMDPEJAKEC)
        KMMDPEJAKEC(super::super::CBIKMFFDCGI::CBIKMFFDCGI),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.GPNLPNEEHDM)
        GPNLPNEEHDM(super::super::HPCAIMKJDIJ::HPCAIMKJDIJ),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.CNEKLOKHAHL)
        CNEKLOKHAHL(super::super::HOHDMMNDKNJ::HOHDMMNDKNJ),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.DMFJDAHPIID)
        DMFJDAHPIID(super::super::FHNGONEFBDE::FHNGONEFBDE),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.ILOEKHKEJAJ)
        ILOEKHKEJAJ(super::super::PPFCJHEKOLG::PPFCJHEKOLG),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.LAEGJPILNND)
        LAEGJPILNND(super::super::ILJJBGIFDPE::ILJJBGIFDPE),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.LCDKLAHGKJI)
        LCDKLAHGKJI(super::super::DEINADPEHKE::DEINADPEHKE),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.BCADDFDBFNA)
        BCADDFDBFNA(super::super::BKBILPDKOIL::BKBILPDKOIL),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.LIGLEFJMLHM)
        LIGLEFJMLHM(super::super::EIKAIIDAEPP::EIKAIIDAEPP),
        // @@protoc_insertion_point(oneof_field:HMBANCKGBII.GBNCIDJNLPL)
        GBNCIDJNLPL(super::super::GJIPJNGNFEJ::GJIPJNGNFEJ),
    }

    impl ::protobuf::Oneof for KFELKJLDKEH {
    }

    impl ::protobuf::OneofFull for KFELKJLDKEH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::HMBANCKGBII as ::protobuf::MessageFull>::descriptor().oneof_by_name("KFELKJLDKEH").unwrap()).clone()
        }
    }

    impl KFELKJLDKEH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KFELKJLDKEH>("KFELKJLDKEH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HMBANCKGBII.proto\x1a\x11ADAFJFOJDEG.proto\x1a\x11BKBILPDKOIL.prot\
    o\x1a\x11CBIKMFFDCGI.proto\x1a\x11DEINADPEHKE.proto\x1a\x11DJOEEGHMCFJ.p\
    roto\x1a\x11EIKAIIDAEPP.proto\x1a\x11EOAEGAEFPFH.proto\x1a\x11FHNGONEFBD\
    E.proto\x1a\x11GIEDCJDLEGE.proto\x1a\x11GJIPJNGNFEJ.proto\x1a\x11HFOCNHO\
    JLAH.proto\x1a\x11HOHDMMNDKNJ.proto\x1a\x11HPCAIMKJDIJ.proto\x1a\x11HPGA\
    GBGJLID.proto\x1a\x11ILJJBGIFDPE.proto\x1a\x11OFGBMCKNLDJ.proto\x1a\x11O\
    LBOPGJFFPM.proto\x1a\x11PCODFCNKHJK.proto\x1a\x11PGNDIBBGIJN.proto\x1a\
    \x11PHFBDNNLINF.proto\x1a\x11PPFCJHEKOLG.proto\"\x9e\x0b\n\x0bHMBANCKGBI\
    I\x120\n\x0bLKMLGOEEEKH\x18\x08\x20\x01(\x0b2\x0c.GIEDCJDLEGEH\0R\x0bLKM\
    LGOEEEKH\x120\n\x0bCOHNLGMIFBO\x18\x03\x20\x01(\x0b2\x0c.GIEDCJDLEGEH\0R\
    \x0bCOHNLGMIFBO\x120\n\x0bPMLOCBHIDDL\x18\x04\x20\x01(\x0b2\x0c.HPGAGBGJ\
    LIDH\0R\x0bPMLOCBHIDDL\x120\n\x0bLEBMNLOAKHC\x18\x01\x20\x01(\x0b2\x0c.H\
    PGAGBGJLIDH\0R\x0bLEBMNLOAKHC\x120\n\x0bKBNLIGLJENN\x18\x0b\x20\x01(\x0b\
    2\x0c.OFGBMCKNLDJH\0R\x0bKBNLIGLJENN\x120\n\x0bMMFBENAMBNE\x18\x02\x20\
    \x01(\x0b2\x0c.OFGBMCKNLDJH\0R\x0bMMFBENAMBNE\x120\n\x0bGNAIDHHJEBI\x18\
    \t\x20\x01(\x0b2\x0c.EOAEGAEFPFHH\0R\x0bGNAIDHHJEBI\x120\n\x0bJBDHLHHFDG\
    E\x18\n\x20\x01(\x0b2\x0c.EOAEGAEFPFHH\0R\x0bJBDHLHHFDGE\x120\n\x0bJPLPL\
    FCOOKD\x18\x06\x20\x01(\x0b2\x0c.PPFCJHEKOLGH\0R\x0bJPLPLFCOOKD\x120\n\
    \x0bMKOFOOCOKBK\x18\x05\x20\x01(\x0b2\x0c.PPFCJHEKOLGH\0R\x0bMKOFOOCOKBK\
    \x120\n\x0bOLMGNEOAHOP\x18\x07\x20\x01(\x0b2\x0c.PHFBDNNLINFH\0R\x0bOLMG\
    NEOAHOP\x120\n\x0bGBFFGPHFMDP\x18\x0e\x20\x01(\x0b2\x0c.ADAFJFOJDEGH\0R\
    \x0bGBFFGPHFMDP\x120\n\x0bDMNMIFJHECL\x18\r\x20\x01(\x0b2\x0c.ADAFJFOJDE\
    GH\0R\x0bDMNMIFJHECL\x120\n\x0bIMFCDMIEOPL\x18\x0c\x20\x01(\x0b2\x0c.PCO\
    DFCNKHJKH\0R\x0bIMFCDMIEOPL\x120\n\x0bPCLLCBMHCBD\x18\x0f\x20\x01(\x0b2\
    \x0c.OLBOPGJFFPMH\0R\x0bPCLLCBMHCBD\x120\n\x0bBIEDMJPAEBD\x18(\x20\x01(\
    \x0b2\x0c.HFOCNHOJLAHH\0R\x0bBIEDMJPAEBD\x121\n\x0bFOICFOGCGIA\x18\xda\
    \x0e\x20\x01(\x0b2\x0c.PGNDIBBGIJNH\0R\x0bFOICFOGCGIA\x121\n\x0bNCEIDLNK\
    BBG\x18\x89\x05\x20\x01(\x0b2\x0c.DJOEEGHMCFJH\0R\x0bNCEIDLNKBBG\x121\n\
    \x0bKMMDPEJAKEC\x18\xd9\x02\x20\x01(\x0b2\x0c.CBIKMFFDCGIH\0R\x0bKMMDPEJ\
    AKEC\x120\n\x0bGPNLPNEEHDM\x18\x1c\x20\x01(\x0b2\x0c.HPCAIMKJDIJH\0R\x0b\
    GPNLPNEEHDM\x121\n\x0bCNEKLOKHAHL\x18\xeb\t\x20\x01(\x0b2\x0c.HOHDMMNDKN\
    JH\0R\x0bCNEKLOKHAHL\x121\n\x0bDMFJDAHPIID\x18\xb8\x0e\x20\x01(\x0b2\x0c\
    .FHNGONEFBDEH\0R\x0bDMFJDAHPIID\x121\n\x0bILOEKHKEJAJ\x18\x93\x0e\x20\
    \x01(\x0b2\x0c.PPFCJHEKOLGH\0R\x0bILOEKHKEJAJ\x121\n\x0bLAEGJPILNND\x18\
    \x8a\x08\x20\x01(\x0b2\x0c.ILJJBGIFDPEH\0R\x0bLAEGJPILNND\x121\n\x0bLCDK\
    LAHGKJI\x18\xf0\x04\x20\x01(\x0b2\x0c.DEINADPEHKEH\0R\x0bLCDKLAHGKJI\x12\
    1\n\x0bBCADDFDBFNA\x18\xd0\r\x20\x01(\x0b2\x0c.BKBILPDKOILH\0R\x0bBCADDF\
    DBFNA\x120\n\x0bLIGLEFJMLHM\x182\x20\x01(\x0b2\x0c.EIKAIIDAEPPH\0R\x0bLI\
    GLEFJMLHM\x121\n\x0bGBNCIDJNLPL\x18\xb8\x02\x20\x01(\x0b2\x0c.GJIPJNGNFE\
    JH\0R\x0bGBNCIDJNLPLB\r\n\x0bKFELKJLDKEHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(21);
            deps.push(super::ADAFJFOJDEG::file_descriptor().clone());
            deps.push(super::BKBILPDKOIL::file_descriptor().clone());
            deps.push(super::CBIKMFFDCGI::file_descriptor().clone());
            deps.push(super::DEINADPEHKE::file_descriptor().clone());
            deps.push(super::DJOEEGHMCFJ::file_descriptor().clone());
            deps.push(super::EIKAIIDAEPP::file_descriptor().clone());
            deps.push(super::EOAEGAEFPFH::file_descriptor().clone());
            deps.push(super::FHNGONEFBDE::file_descriptor().clone());
            deps.push(super::GIEDCJDLEGE::file_descriptor().clone());
            deps.push(super::GJIPJNGNFEJ::file_descriptor().clone());
            deps.push(super::HFOCNHOJLAH::file_descriptor().clone());
            deps.push(super::HOHDMMNDKNJ::file_descriptor().clone());
            deps.push(super::HPCAIMKJDIJ::file_descriptor().clone());
            deps.push(super::HPGAGBGJLID::file_descriptor().clone());
            deps.push(super::ILJJBGIFDPE::file_descriptor().clone());
            deps.push(super::OFGBMCKNLDJ::file_descriptor().clone());
            deps.push(super::OLBOPGJFFPM::file_descriptor().clone());
            deps.push(super::PCODFCNKHJK::file_descriptor().clone());
            deps.push(super::PGNDIBBGIJN::file_descriptor().clone());
            deps.push(super::PHFBDNNLINF::file_descriptor().clone());
            deps.push(super::PPFCJHEKOLG::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HMBANCKGBII::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
