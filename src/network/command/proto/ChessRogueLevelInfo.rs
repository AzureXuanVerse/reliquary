// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChessRogueLevelInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ChessRogueLevelInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChessRogueLevelInfo {
    // message fields
    // @@protoc_insertion_point(field:ChessRogueLevelInfo.OCDNMHNNKGM)
    pub OCDNMHNNKGM: i32,
    // @@protoc_insertion_point(field:ChessRogueLevelInfo.area_info)
    pub area_info: ::protobuf::MessageField<super::ChessRogueAreaInfo::ChessRogueAreaInfo>,
    // @@protoc_insertion_point(field:ChessRogueLevelInfo.action_point)
    pub action_point: i32,
    // @@protoc_insertion_point(field:ChessRogueLevelInfo.layer_id)
    pub layer_id: u32,
    // @@protoc_insertion_point(field:ChessRogueLevelInfo.area_id_list)
    pub area_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueLevelInfo.id)
    pub id: u32,
    // @@protoc_insertion_point(field:ChessRogueLevelInfo.level_status)
    pub level_status: u32,
    // @@protoc_insertion_point(field:ChessRogueLevelInfo.MHOIJAFGECP)
    pub MHOIJAFGECP: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ChessRogueLevelInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChessRogueLevelInfo {
    fn default() -> &'a ChessRogueLevelInfo {
        <ChessRogueLevelInfo as ::protobuf::Message>::default_instance()
    }
}

impl ChessRogueLevelInfo {
    pub fn new() -> ChessRogueLevelInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OCDNMHNNKGM",
            |m: &ChessRogueLevelInfo| { &m.OCDNMHNNKGM },
            |m: &mut ChessRogueLevelInfo| { &mut m.OCDNMHNNKGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ChessRogueAreaInfo::ChessRogueAreaInfo>(
            "area_info",
            |m: &ChessRogueLevelInfo| { &m.area_info },
            |m: &mut ChessRogueLevelInfo| { &mut m.area_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action_point",
            |m: &ChessRogueLevelInfo| { &m.action_point },
            |m: &mut ChessRogueLevelInfo| { &mut m.action_point },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layer_id",
            |m: &ChessRogueLevelInfo| { &m.layer_id },
            |m: &mut ChessRogueLevelInfo| { &mut m.layer_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "area_id_list",
            |m: &ChessRogueLevelInfo| { &m.area_id_list },
            |m: &mut ChessRogueLevelInfo| { &mut m.area_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ChessRogueLevelInfo| { &m.id },
            |m: &mut ChessRogueLevelInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level_status",
            |m: &ChessRogueLevelInfo| { &m.level_status },
            |m: &mut ChessRogueLevelInfo| { &mut m.level_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MHOIJAFGECP",
            |m: &ChessRogueLevelInfo| { &m.MHOIJAFGECP },
            |m: &mut ChessRogueLevelInfo| { &mut m.MHOIJAFGECP },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChessRogueLevelInfo>(
            "ChessRogueLevelInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChessRogueLevelInfo {
    const NAME: &'static str = "ChessRogueLevelInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                80 => {
                    self.OCDNMHNNKGM = is.read_int32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.area_info)?;
                },
                112 => {
                    self.action_point = is.read_int32()?;
                },
                88 => {
                    self.layer_id = is.read_uint32()?;
                },
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.area_id_list)?;
                },
                8 => {
                    self.area_id_list.push(is.read_uint32()?);
                },
                24 => {
                    self.id = is.read_uint32()?;
                },
                56 => {
                    self.level_status = is.read_uint32()?;
                },
                72 => {
                    self.MHOIJAFGECP = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OCDNMHNNKGM != 0 {
            my_size += ::protobuf::rt::int32_size(10, self.OCDNMHNNKGM);
        }
        if let Some(v) = self.area_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.action_point != 0 {
            my_size += ::protobuf::rt::int32_size(14, self.action_point);
        }
        if self.layer_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.layer_id);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(1, &self.area_id_list);
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.id);
        }
        if self.level_status != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.level_status);
        }
        if self.MHOIJAFGECP != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.MHOIJAFGECP);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OCDNMHNNKGM != 0 {
            os.write_int32(10, self.OCDNMHNNKGM)?;
        }
        if let Some(v) = self.area_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.action_point != 0 {
            os.write_int32(14, self.action_point)?;
        }
        if self.layer_id != 0 {
            os.write_uint32(11, self.layer_id)?;
        }
        os.write_repeated_packed_uint32(1, &self.area_id_list)?;
        if self.id != 0 {
            os.write_uint32(3, self.id)?;
        }
        if self.level_status != 0 {
            os.write_uint32(7, self.level_status)?;
        }
        if self.MHOIJAFGECP != 0 {
            os.write_uint32(9, self.MHOIJAFGECP)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChessRogueLevelInfo {
        ChessRogueLevelInfo::new()
    }

    fn clear(&mut self) {
        self.OCDNMHNNKGM = 0;
        self.area_info.clear();
        self.action_point = 0;
        self.layer_id = 0;
        self.area_id_list.clear();
        self.id = 0;
        self.level_status = 0;
        self.MHOIJAFGECP = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChessRogueLevelInfo {
        static instance: ChessRogueLevelInfo = ChessRogueLevelInfo {
            OCDNMHNNKGM: 0,
            area_info: ::protobuf::MessageField::none(),
            action_point: 0,
            layer_id: 0,
            area_id_list: ::std::vec::Vec::new(),
            id: 0,
            level_status: 0,
            MHOIJAFGECP: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChessRogueLevelInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChessRogueLevelInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChessRogueLevelInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChessRogueLevelInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19ChessRogueLevelInfo.proto\x1a\x18ChessRogueAreaInfo.proto\"\x9e\
    \x02\n\x13ChessRogueLevelInfo\x12\x20\n\x0bOCDNMHNNKGM\x18\n\x20\x01(\
    \x05R\x0bOCDNMHNNKGM\x120\n\tarea_info\x18\x04\x20\x01(\x0b2\x13.ChessRo\
    gueAreaInfoR\x08areaInfo\x12!\n\x0caction_point\x18\x0e\x20\x01(\x05R\
    \x0bactionPoint\x12\x19\n\x08layer_id\x18\x0b\x20\x01(\rR\x07layerId\x12\
    \x20\n\x0carea_id_list\x18\x01\x20\x03(\rR\nareaIdList\x12\x0e\n\x02id\
    \x18\x03\x20\x01(\rR\x02id\x12!\n\x0clevel_status\x18\x07\x20\x01(\rR\
    \x0blevelStatus\x12\x20\n\x0bMHOIJAFGECP\x18\t\x20\x01(\rR\x0bMHOIJAFGEC\
    Pb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ChessRogueAreaInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChessRogueLevelInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
