// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FOOPINGAFEG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:FOOPINGAFEG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FOOPINGAFEG {
    // message fields
    // @@protoc_insertion_point(field:FOOPINGAFEG.monster_battle_type)
    pub monster_battle_type: u32,
    // @@protoc_insertion_point(field:FOOPINGAFEG.DBADLNFOPAO)
    pub DBADLNFOPAO: u64,
    // @@protoc_insertion_point(field:FOOPINGAFEG.level_id)
    pub level_id: u32,
    // @@protoc_insertion_point(field:FOOPINGAFEG.NLIBKABFGCC)
    pub NLIBKABFGCC: u32,
    // @@protoc_insertion_point(field:FOOPINGAFEG.IGHLABGGIJE)
    pub IGHLABGGIJE: u32,
    // @@protoc_insertion_point(field:FOOPINGAFEG.LPDBPKKADGG)
    pub LPDBPKKADGG: u32,
    // @@protoc_insertion_point(field:FOOPINGAFEG.HGBBKGNEPFB)
    pub HGBBKGNEPFB: bool,
    // @@protoc_insertion_point(field:FOOPINGAFEG.FEOPFHOLKBM)
    pub FEOPFHOLKBM: ::std::vec::Vec<super::HCJJOOFKCJH::HCJJOOFKCJH>,
    // @@protoc_insertion_point(field:FOOPINGAFEG.rank)
    pub rank: u32,
    // @@protoc_insertion_point(field:FOOPINGAFEG.CNDCKAKKMCG)
    pub CNDCKAKKMCG: ::std::vec::Vec<super::HCJJOOFKCJH::HCJJOOFKCJH>,
    // @@protoc_insertion_point(field:FOOPINGAFEG.JBLMGNPMADM)
    pub JBLMGNPMADM: u32,
    // @@protoc_insertion_point(field:FOOPINGAFEG.skill_info)
    pub skill_info: ::std::vec::Vec<super::CCCNHOECCMD::CCCNHOECCMD>,
    // @@protoc_insertion_point(field:FOOPINGAFEG.KBGAJGEOMGL)
    pub KBGAJGEOMGL: ::std::vec::Vec<super::NOOBBIHJKMA::NOOBBIHJKMA>,
    // @@protoc_insertion_point(field:FOOPINGAFEG.LELHCFOEOCO)
    pub LELHCFOEOCO: ::std::vec::Vec<super::HCJJOOFKCJH::HCJJOOFKCJH>,
    // @@protoc_insertion_point(field:FOOPINGAFEG.IMJEKFDHING)
    pub IMJEKFDHING: ::std::vec::Vec<super::HCJJOOFKCJH::HCJJOOFKCJH>,
    // @@protoc_insertion_point(field:FOOPINGAFEG.DJNMHMPKKKB)
    pub DJNMHMPKKKB: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FOOPINGAFEG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FOOPINGAFEG {
    fn default() -> &'a FOOPINGAFEG {
        <FOOPINGAFEG as ::protobuf::Message>::default_instance()
    }
}

impl FOOPINGAFEG {
    pub fn new() -> FOOPINGAFEG {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_battle_type",
            |m: &FOOPINGAFEG| { &m.monster_battle_type },
            |m: &mut FOOPINGAFEG| { &mut m.monster_battle_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBADLNFOPAO",
            |m: &FOOPINGAFEG| { &m.DBADLNFOPAO },
            |m: &mut FOOPINGAFEG| { &mut m.DBADLNFOPAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level_id",
            |m: &FOOPINGAFEG| { &m.level_id },
            |m: &mut FOOPINGAFEG| { &mut m.level_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NLIBKABFGCC",
            |m: &FOOPINGAFEG| { &m.NLIBKABFGCC },
            |m: &mut FOOPINGAFEG| { &mut m.NLIBKABFGCC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IGHLABGGIJE",
            |m: &FOOPINGAFEG| { &m.IGHLABGGIJE },
            |m: &mut FOOPINGAFEG| { &mut m.IGHLABGGIJE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LPDBPKKADGG",
            |m: &FOOPINGAFEG| { &m.LPDBPKKADGG },
            |m: &mut FOOPINGAFEG| { &mut m.LPDBPKKADGG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HGBBKGNEPFB",
            |m: &FOOPINGAFEG| { &m.HGBBKGNEPFB },
            |m: &mut FOOPINGAFEG| { &mut m.HGBBKGNEPFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FEOPFHOLKBM",
            |m: &FOOPINGAFEG| { &m.FEOPFHOLKBM },
            |m: &mut FOOPINGAFEG| { &mut m.FEOPFHOLKBM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rank",
            |m: &FOOPINGAFEG| { &m.rank },
            |m: &mut FOOPINGAFEG| { &mut m.rank },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CNDCKAKKMCG",
            |m: &FOOPINGAFEG| { &m.CNDCKAKKMCG },
            |m: &mut FOOPINGAFEG| { &mut m.CNDCKAKKMCG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JBLMGNPMADM",
            |m: &FOOPINGAFEG| { &m.JBLMGNPMADM },
            |m: &mut FOOPINGAFEG| { &mut m.JBLMGNPMADM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "skill_info",
            |m: &FOOPINGAFEG| { &m.skill_info },
            |m: &mut FOOPINGAFEG| { &mut m.skill_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KBGAJGEOMGL",
            |m: &FOOPINGAFEG| { &m.KBGAJGEOMGL },
            |m: &mut FOOPINGAFEG| { &mut m.KBGAJGEOMGL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LELHCFOEOCO",
            |m: &FOOPINGAFEG| { &m.LELHCFOEOCO },
            |m: &mut FOOPINGAFEG| { &mut m.LELHCFOEOCO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IMJEKFDHING",
            |m: &FOOPINGAFEG| { &m.IMJEKFDHING },
            |m: &mut FOOPINGAFEG| { &mut m.IMJEKFDHING },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DJNMHMPKKKB",
            |m: &FOOPINGAFEG| { &m.DJNMHMPKKKB },
            |m: &mut FOOPINGAFEG| { &mut m.DJNMHMPKKKB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FOOPINGAFEG>(
            "FOOPINGAFEG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FOOPINGAFEG {
    const NAME: &'static str = "FOOPINGAFEG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.monster_battle_type = is.read_uint32()?;
                },
                16 => {
                    self.DBADLNFOPAO = is.read_uint64()?;
                },
                24 => {
                    self.level_id = is.read_uint32()?;
                },
                32 => {
                    self.NLIBKABFGCC = is.read_uint32()?;
                },
                40 => {
                    self.IGHLABGGIJE = is.read_uint32()?;
                },
                48 => {
                    self.LPDBPKKADGG = is.read_uint32()?;
                },
                56 => {
                    self.HGBBKGNEPFB = is.read_bool()?;
                },
                66 => {
                    self.FEOPFHOLKBM.push(is.read_message()?);
                },
                72 => {
                    self.rank = is.read_uint32()?;
                },
                82 => {
                    self.CNDCKAKKMCG.push(is.read_message()?);
                },
                88 => {
                    self.JBLMGNPMADM = is.read_uint32()?;
                },
                98 => {
                    self.skill_info.push(is.read_message()?);
                },
                106 => {
                    self.KBGAJGEOMGL.push(is.read_message()?);
                },
                114 => {
                    self.LELHCFOEOCO.push(is.read_message()?);
                },
                122 => {
                    self.IMJEKFDHING.push(is.read_message()?);
                },
                128 => {
                    self.DJNMHMPKKKB = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.monster_battle_type != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.monster_battle_type);
        }
        if self.DBADLNFOPAO != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.DBADLNFOPAO);
        }
        if self.level_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.level_id);
        }
        if self.NLIBKABFGCC != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.NLIBKABFGCC);
        }
        if self.IGHLABGGIJE != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.IGHLABGGIJE);
        }
        if self.LPDBPKKADGG != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.LPDBPKKADGG);
        }
        if self.HGBBKGNEPFB != false {
            my_size += 1 + 1;
        }
        for value in &self.FEOPFHOLKBM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.rank != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.rank);
        }
        for value in &self.CNDCKAKKMCG {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.JBLMGNPMADM != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.JBLMGNPMADM);
        }
        for value in &self.skill_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.KBGAJGEOMGL {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.LELHCFOEOCO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.IMJEKFDHING {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.DJNMHMPKKKB != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.DJNMHMPKKKB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.monster_battle_type != 0 {
            os.write_uint32(1, self.monster_battle_type)?;
        }
        if self.DBADLNFOPAO != 0 {
            os.write_uint64(2, self.DBADLNFOPAO)?;
        }
        if self.level_id != 0 {
            os.write_uint32(3, self.level_id)?;
        }
        if self.NLIBKABFGCC != 0 {
            os.write_uint32(4, self.NLIBKABFGCC)?;
        }
        if self.IGHLABGGIJE != 0 {
            os.write_uint32(5, self.IGHLABGGIJE)?;
        }
        if self.LPDBPKKADGG != 0 {
            os.write_uint32(6, self.LPDBPKKADGG)?;
        }
        if self.HGBBKGNEPFB != false {
            os.write_bool(7, self.HGBBKGNEPFB)?;
        }
        for v in &self.FEOPFHOLKBM {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.rank != 0 {
            os.write_uint32(9, self.rank)?;
        }
        for v in &self.CNDCKAKKMCG {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        if self.JBLMGNPMADM != 0 {
            os.write_uint32(11, self.JBLMGNPMADM)?;
        }
        for v in &self.skill_info {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.KBGAJGEOMGL {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        for v in &self.LELHCFOEOCO {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        for v in &self.IMJEKFDHING {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if self.DJNMHMPKKKB != 0 {
            os.write_uint32(16, self.DJNMHMPKKKB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FOOPINGAFEG {
        FOOPINGAFEG::new()
    }

    fn clear(&mut self) {
        self.monster_battle_type = 0;
        self.DBADLNFOPAO = 0;
        self.level_id = 0;
        self.NLIBKABFGCC = 0;
        self.IGHLABGGIJE = 0;
        self.LPDBPKKADGG = 0;
        self.HGBBKGNEPFB = false;
        self.FEOPFHOLKBM.clear();
        self.rank = 0;
        self.CNDCKAKKMCG.clear();
        self.JBLMGNPMADM = 0;
        self.skill_info.clear();
        self.KBGAJGEOMGL.clear();
        self.LELHCFOEOCO.clear();
        self.IMJEKFDHING.clear();
        self.DJNMHMPKKKB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FOOPINGAFEG {
        static instance: FOOPINGAFEG = FOOPINGAFEG {
            monster_battle_type: 0,
            DBADLNFOPAO: 0,
            level_id: 0,
            NLIBKABFGCC: 0,
            IGHLABGGIJE: 0,
            LPDBPKKADGG: 0,
            HGBBKGNEPFB: false,
            FEOPFHOLKBM: ::std::vec::Vec::new(),
            rank: 0,
            CNDCKAKKMCG: ::std::vec::Vec::new(),
            JBLMGNPMADM: 0,
            skill_info: ::std::vec::Vec::new(),
            KBGAJGEOMGL: ::std::vec::Vec::new(),
            LELHCFOEOCO: ::std::vec::Vec::new(),
            IMJEKFDHING: ::std::vec::Vec::new(),
            DJNMHMPKKKB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FOOPINGAFEG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FOOPINGAFEG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FOOPINGAFEG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FOOPINGAFEG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FOOPINGAFEG.proto\x1a\x11CCCNHOECCMD.proto\x1a\x11HCJJOOFKCJH.prot\
    o\x1a\x11NOOBBIHJKMA.proto\"\xf7\x04\n\x0bFOOPINGAFEG\x12.\n\x13monster_\
    battle_type\x18\x01\x20\x01(\rR\x11monsterBattleType\x12\x20\n\x0bDBADLN\
    FOPAO\x18\x02\x20\x01(\x04R\x0bDBADLNFOPAO\x12\x19\n\x08level_id\x18\x03\
    \x20\x01(\rR\x07levelId\x12\x20\n\x0bNLIBKABFGCC\x18\x04\x20\x01(\rR\x0b\
    NLIBKABFGCC\x12\x20\n\x0bIGHLABGGIJE\x18\x05\x20\x01(\rR\x0bIGHLABGGIJE\
    \x12\x20\n\x0bLPDBPKKADGG\x18\x06\x20\x01(\rR\x0bLPDBPKKADGG\x12\x20\n\
    \x0bHGBBKGNEPFB\x18\x07\x20\x01(\x08R\x0bHGBBKGNEPFB\x12.\n\x0bFEOPFHOLK\
    BM\x18\x08\x20\x03(\x0b2\x0c.HCJJOOFKCJHR\x0bFEOPFHOLKBM\x12\x12\n\x04ra\
    nk\x18\t\x20\x01(\rR\x04rank\x12.\n\x0bCNDCKAKKMCG\x18\n\x20\x03(\x0b2\
    \x0c.HCJJOOFKCJHR\x0bCNDCKAKKMCG\x12\x20\n\x0bJBLMGNPMADM\x18\x0b\x20\
    \x01(\rR\x0bJBLMGNPMADM\x12+\n\nskill_info\x18\x0c\x20\x03(\x0b2\x0c.CCC\
    NHOECCMDR\tskillInfo\x12.\n\x0bKBGAJGEOMGL\x18\r\x20\x03(\x0b2\x0c.NOOBB\
    IHJKMAR\x0bKBGAJGEOMGL\x12.\n\x0bLELHCFOEOCO\x18\x0e\x20\x03(\x0b2\x0c.H\
    CJJOOFKCJHR\x0bLELHCFOEOCO\x12.\n\x0bIMJEKFDHING\x18\x0f\x20\x03(\x0b2\
    \x0c.HCJJOOFKCJHR\x0bIMJEKFDHING\x12\x20\n\x0bDJNMHMPKKKB\x18\x10\x20\
    \x01(\rR\x0bDJNMHMPKKKBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::CCCNHOECCMD::file_descriptor().clone());
            deps.push(super::HCJJOOFKCJH::file_descriptor().clone());
            deps.push(super::NOOBBIHJKMA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FOOPINGAFEG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
