// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `KCLGBMFEHBE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:KCLGBMFEHBE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KCLGBMFEHBE {
    // message fields
    // @@protoc_insertion_point(field:KCLGBMFEHBE.BAMEDJDAOMC)
    pub BAMEDJDAOMC: u32,
    // @@protoc_insertion_point(field:KCLGBMFEHBE.avatar_id)
    pub avatar_id: u32,
    // @@protoc_insertion_point(field:KCLGBMFEHBE.EMPLJNHEPHC)
    pub EMPLJNHEPHC: bool,
    // @@protoc_insertion_point(field:KCLGBMFEHBE.CBLAMACCEPB)
    pub CBLAMACCEPB: u32,
    // @@protoc_insertion_point(field:KCLGBMFEHBE.KDGCCOMKIPO)
    pub KDGCCOMKIPO: f64,
    // @@protoc_insertion_point(field:KCLGBMFEHBE.NKBMEBELLFJ)
    pub NKBMEBELLFJ: u32,
    // @@protoc_insertion_point(field:KCLGBMFEHBE.NFKMDDNPGBJ)
    pub NFKMDDNPGBJ: u32,
    // @@protoc_insertion_point(field:KCLGBMFEHBE.DCABNHJMMJG)
    pub DCABNHJMMJG: bool,
    // @@protoc_insertion_point(field:KCLGBMFEHBE.BPOCKMFJMEK)
    pub BPOCKMFJMEK: u32,
    // special fields
    // @@protoc_insertion_point(special_field:KCLGBMFEHBE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KCLGBMFEHBE {
    fn default() -> &'a KCLGBMFEHBE {
        <KCLGBMFEHBE as ::protobuf::Message>::default_instance()
    }
}

impl KCLGBMFEHBE {
    pub fn new() -> KCLGBMFEHBE {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BAMEDJDAOMC",
            |m: &KCLGBMFEHBE| { &m.BAMEDJDAOMC },
            |m: &mut KCLGBMFEHBE| { &mut m.BAMEDJDAOMC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_id",
            |m: &KCLGBMFEHBE| { &m.avatar_id },
            |m: &mut KCLGBMFEHBE| { &mut m.avatar_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EMPLJNHEPHC",
            |m: &KCLGBMFEHBE| { &m.EMPLJNHEPHC },
            |m: &mut KCLGBMFEHBE| { &mut m.EMPLJNHEPHC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CBLAMACCEPB",
            |m: &KCLGBMFEHBE| { &m.CBLAMACCEPB },
            |m: &mut KCLGBMFEHBE| { &mut m.CBLAMACCEPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KDGCCOMKIPO",
            |m: &KCLGBMFEHBE| { &m.KDGCCOMKIPO },
            |m: &mut KCLGBMFEHBE| { &mut m.KDGCCOMKIPO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NKBMEBELLFJ",
            |m: &KCLGBMFEHBE| { &m.NKBMEBELLFJ },
            |m: &mut KCLGBMFEHBE| { &mut m.NKBMEBELLFJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NFKMDDNPGBJ",
            |m: &KCLGBMFEHBE| { &m.NFKMDDNPGBJ },
            |m: &mut KCLGBMFEHBE| { &mut m.NFKMDDNPGBJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DCABNHJMMJG",
            |m: &KCLGBMFEHBE| { &m.DCABNHJMMJG },
            |m: &mut KCLGBMFEHBE| { &mut m.DCABNHJMMJG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BPOCKMFJMEK",
            |m: &KCLGBMFEHBE| { &m.BPOCKMFJMEK },
            |m: &mut KCLGBMFEHBE| { &mut m.BPOCKMFJMEK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KCLGBMFEHBE>(
            "KCLGBMFEHBE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KCLGBMFEHBE {
    const NAME: &'static str = "KCLGBMFEHBE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                80 => {
                    self.BAMEDJDAOMC = is.read_uint32()?;
                },
                120 => {
                    self.avatar_id = is.read_uint32()?;
                },
                56 => {
                    self.EMPLJNHEPHC = is.read_bool()?;
                },
                112 => {
                    self.CBLAMACCEPB = is.read_uint32()?;
                },
                89 => {
                    self.KDGCCOMKIPO = is.read_double()?;
                },
                72 => {
                    self.NKBMEBELLFJ = is.read_uint32()?;
                },
                32 => {
                    self.NFKMDDNPGBJ = is.read_uint32()?;
                },
                96 => {
                    self.DCABNHJMMJG = is.read_bool()?;
                },
                24 => {
                    self.BPOCKMFJMEK = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.BAMEDJDAOMC != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.BAMEDJDAOMC);
        }
        if self.avatar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.avatar_id);
        }
        if self.EMPLJNHEPHC != false {
            my_size += 1 + 1;
        }
        if self.CBLAMACCEPB != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.CBLAMACCEPB);
        }
        if self.KDGCCOMKIPO != 0. {
            my_size += 1 + 8;
        }
        if self.NKBMEBELLFJ != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.NKBMEBELLFJ);
        }
        if self.NFKMDDNPGBJ != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.NFKMDDNPGBJ);
        }
        if self.DCABNHJMMJG != false {
            my_size += 1 + 1;
        }
        if self.BPOCKMFJMEK != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.BPOCKMFJMEK);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.BAMEDJDAOMC != 0 {
            os.write_uint32(10, self.BAMEDJDAOMC)?;
        }
        if self.avatar_id != 0 {
            os.write_uint32(15, self.avatar_id)?;
        }
        if self.EMPLJNHEPHC != false {
            os.write_bool(7, self.EMPLJNHEPHC)?;
        }
        if self.CBLAMACCEPB != 0 {
            os.write_uint32(14, self.CBLAMACCEPB)?;
        }
        if self.KDGCCOMKIPO != 0. {
            os.write_double(11, self.KDGCCOMKIPO)?;
        }
        if self.NKBMEBELLFJ != 0 {
            os.write_uint32(9, self.NKBMEBELLFJ)?;
        }
        if self.NFKMDDNPGBJ != 0 {
            os.write_uint32(4, self.NFKMDDNPGBJ)?;
        }
        if self.DCABNHJMMJG != false {
            os.write_bool(12, self.DCABNHJMMJG)?;
        }
        if self.BPOCKMFJMEK != 0 {
            os.write_uint32(3, self.BPOCKMFJMEK)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KCLGBMFEHBE {
        KCLGBMFEHBE::new()
    }

    fn clear(&mut self) {
        self.BAMEDJDAOMC = 0;
        self.avatar_id = 0;
        self.EMPLJNHEPHC = false;
        self.CBLAMACCEPB = 0;
        self.KDGCCOMKIPO = 0.;
        self.NKBMEBELLFJ = 0;
        self.NFKMDDNPGBJ = 0;
        self.DCABNHJMMJG = false;
        self.BPOCKMFJMEK = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KCLGBMFEHBE {
        static instance: KCLGBMFEHBE = KCLGBMFEHBE {
            BAMEDJDAOMC: 0,
            avatar_id: 0,
            EMPLJNHEPHC: false,
            CBLAMACCEPB: 0,
            KDGCCOMKIPO: 0.,
            NKBMEBELLFJ: 0,
            NFKMDDNPGBJ: 0,
            DCABNHJMMJG: false,
            BPOCKMFJMEK: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KCLGBMFEHBE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KCLGBMFEHBE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KCLGBMFEHBE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KCLGBMFEHBE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11KCLGBMFEHBE.proto\"\xba\x02\n\x0bKCLGBMFEHBE\x12\x20\n\x0bBAMEDJDA\
    OMC\x18\n\x20\x01(\rR\x0bBAMEDJDAOMC\x12\x1b\n\tavatar_id\x18\x0f\x20\
    \x01(\rR\x08avatarId\x12\x20\n\x0bEMPLJNHEPHC\x18\x07\x20\x01(\x08R\x0bE\
    MPLJNHEPHC\x12\x20\n\x0bCBLAMACCEPB\x18\x0e\x20\x01(\rR\x0bCBLAMACCEPB\
    \x12\x20\n\x0bKDGCCOMKIPO\x18\x0b\x20\x01(\x01R\x0bKDGCCOMKIPO\x12\x20\n\
    \x0bNKBMEBELLFJ\x18\t\x20\x01(\rR\x0bNKBMEBELLFJ\x12\x20\n\x0bNFKMDDNPGB\
    J\x18\x04\x20\x01(\rR\x0bNFKMDDNPGBJ\x12\x20\n\x0bDCABNHJMMJG\x18\x0c\
    \x20\x01(\x08R\x0bDCABNHJMMJG\x12\x20\n\x0bBPOCKMFJMEK\x18\x03\x20\x01(\
    \rR\x0bBPOCKMFJMEKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(KCLGBMFEHBE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
