// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FCIHIJLOMGA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:FCIHIJLOMGA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FCIHIJLOMGA {
    // message fields
    // @@protoc_insertion_point(field:FCIHIJLOMGA.NAALCBMBPGC)
    pub NAALCBMBPGC: u32,
    // @@protoc_insertion_point(field:FCIHIJLOMGA.avatar_list)
    pub avatar_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FCIHIJLOMGA.LLFOFPNDAFG)
    pub LLFOFPNDAFG: u32,
    // @@protoc_insertion_point(field:FCIHIJLOMGA.HJMGLEMJHKG)
    pub HJMGLEMJHKG: u32,
    // @@protoc_insertion_point(field:FCIHIJLOMGA.MDLACHDKMPH)
    pub MDLACHDKMPH: ::std::vec::Vec<super::IJKJJDHLKLB::IJKJJDHLKLB>,
    // @@protoc_insertion_point(field:FCIHIJLOMGA.challenge_id)
    pub challenge_id: u32,
    // @@protoc_insertion_point(field:FCIHIJLOMGA.HLIBIJFHHPG)
    pub HLIBIJFHHPG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FCIHIJLOMGA.CPGOIPICPJF)
    pub CPGOIPICPJF: u32,
    // @@protoc_insertion_point(field:FCIHIJLOMGA.APLKNJEGBKF)
    pub APLKNJEGBKF: bool,
    // @@protoc_insertion_point(field:FCIHIJLOMGA.HNPEAPPMGAA)
    pub HNPEAPPMGAA: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FCIHIJLOMGA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FCIHIJLOMGA {
    fn default() -> &'a FCIHIJLOMGA {
        <FCIHIJLOMGA as ::protobuf::Message>::default_instance()
    }
}

impl FCIHIJLOMGA {
    pub fn new() -> FCIHIJLOMGA {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NAALCBMBPGC",
            |m: &FCIHIJLOMGA| { &m.NAALCBMBPGC },
            |m: &mut FCIHIJLOMGA| { &mut m.NAALCBMBPGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &FCIHIJLOMGA| { &m.avatar_list },
            |m: &mut FCIHIJLOMGA| { &mut m.avatar_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LLFOFPNDAFG",
            |m: &FCIHIJLOMGA| { &m.LLFOFPNDAFG },
            |m: &mut FCIHIJLOMGA| { &mut m.LLFOFPNDAFG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HJMGLEMJHKG",
            |m: &FCIHIJLOMGA| { &m.HJMGLEMJHKG },
            |m: &mut FCIHIJLOMGA| { &mut m.HJMGLEMJHKG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MDLACHDKMPH",
            |m: &FCIHIJLOMGA| { &m.MDLACHDKMPH },
            |m: &mut FCIHIJLOMGA| { &mut m.MDLACHDKMPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "challenge_id",
            |m: &FCIHIJLOMGA| { &m.challenge_id },
            |m: &mut FCIHIJLOMGA| { &mut m.challenge_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HLIBIJFHHPG",
            |m: &FCIHIJLOMGA| { &m.HLIBIJFHHPG },
            |m: &mut FCIHIJLOMGA| { &mut m.HLIBIJFHHPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPGOIPICPJF",
            |m: &FCIHIJLOMGA| { &m.CPGOIPICPJF },
            |m: &mut FCIHIJLOMGA| { &mut m.CPGOIPICPJF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "APLKNJEGBKF",
            |m: &FCIHIJLOMGA| { &m.APLKNJEGBKF },
            |m: &mut FCIHIJLOMGA| { &mut m.APLKNJEGBKF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HNPEAPPMGAA",
            |m: &FCIHIJLOMGA| { &m.HNPEAPPMGAA },
            |m: &mut FCIHIJLOMGA| { &mut m.HNPEAPPMGAA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FCIHIJLOMGA>(
            "FCIHIJLOMGA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FCIHIJLOMGA {
    const NAME: &'static str = "FCIHIJLOMGA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.NAALCBMBPGC = is.read_uint32()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.avatar_list)?;
                },
                24 => {
                    self.avatar_list.push(is.read_uint32()?);
                },
                104 => {
                    self.LLFOFPNDAFG = is.read_uint32()?;
                },
                40 => {
                    self.HJMGLEMJHKG = is.read_uint32()?;
                },
                34 => {
                    self.MDLACHDKMPH.push(is.read_message()?);
                },
                80 => {
                    self.challenge_id = is.read_uint32()?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.HLIBIJFHHPG)?;
                },
                56 => {
                    self.HLIBIJFHHPG.push(is.read_uint32()?);
                },
                96 => {
                    self.CPGOIPICPJF = is.read_uint32()?;
                },
                16 => {
                    self.APLKNJEGBKF = is.read_bool()?;
                },
                48 => {
                    self.HNPEAPPMGAA = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.NAALCBMBPGC != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.NAALCBMBPGC);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(3, &self.avatar_list);
        if self.LLFOFPNDAFG != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.LLFOFPNDAFG);
        }
        if self.HJMGLEMJHKG != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.HJMGLEMJHKG);
        }
        for value in &self.MDLACHDKMPH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.challenge_id != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.challenge_id);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(7, &self.HLIBIJFHHPG);
        if self.CPGOIPICPJF != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.CPGOIPICPJF);
        }
        if self.APLKNJEGBKF != false {
            my_size += 1 + 1;
        }
        if self.HNPEAPPMGAA != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.HNPEAPPMGAA);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.NAALCBMBPGC != 0 {
            os.write_uint32(11, self.NAALCBMBPGC)?;
        }
        os.write_repeated_packed_uint32(3, &self.avatar_list)?;
        if self.LLFOFPNDAFG != 0 {
            os.write_uint32(13, self.LLFOFPNDAFG)?;
        }
        if self.HJMGLEMJHKG != 0 {
            os.write_uint32(5, self.HJMGLEMJHKG)?;
        }
        for v in &self.MDLACHDKMPH {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.challenge_id != 0 {
            os.write_uint32(10, self.challenge_id)?;
        }
        os.write_repeated_packed_uint32(7, &self.HLIBIJFHHPG)?;
        if self.CPGOIPICPJF != 0 {
            os.write_uint32(12, self.CPGOIPICPJF)?;
        }
        if self.APLKNJEGBKF != false {
            os.write_bool(2, self.APLKNJEGBKF)?;
        }
        if self.HNPEAPPMGAA != 0 {
            os.write_uint32(6, self.HNPEAPPMGAA)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FCIHIJLOMGA {
        FCIHIJLOMGA::new()
    }

    fn clear(&mut self) {
        self.NAALCBMBPGC = 0;
        self.avatar_list.clear();
        self.LLFOFPNDAFG = 0;
        self.HJMGLEMJHKG = 0;
        self.MDLACHDKMPH.clear();
        self.challenge_id = 0;
        self.HLIBIJFHHPG.clear();
        self.CPGOIPICPJF = 0;
        self.APLKNJEGBKF = false;
        self.HNPEAPPMGAA = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FCIHIJLOMGA {
        static instance: FCIHIJLOMGA = FCIHIJLOMGA {
            NAALCBMBPGC: 0,
            avatar_list: ::std::vec::Vec::new(),
            LLFOFPNDAFG: 0,
            HJMGLEMJHKG: 0,
            MDLACHDKMPH: ::std::vec::Vec::new(),
            challenge_id: 0,
            HLIBIJFHHPG: ::std::vec::Vec::new(),
            CPGOIPICPJF: 0,
            APLKNJEGBKF: false,
            HNPEAPPMGAA: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FCIHIJLOMGA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FCIHIJLOMGA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FCIHIJLOMGA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FCIHIJLOMGA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FCIHIJLOMGA.proto\x1a\x11IJKJJDHLKLB.proto\"\xef\x02\n\x0bFCIHIJLO\
    MGA\x12\x20\n\x0bNAALCBMBPGC\x18\x0b\x20\x01(\rR\x0bNAALCBMBPGC\x12\x1f\
    \n\x0bavatar_list\x18\x03\x20\x03(\rR\navatarList\x12\x20\n\x0bLLFOFPNDA\
    FG\x18\r\x20\x01(\rR\x0bLLFOFPNDAFG\x12\x20\n\x0bHJMGLEMJHKG\x18\x05\x20\
    \x01(\rR\x0bHJMGLEMJHKG\x12.\n\x0bMDLACHDKMPH\x18\x04\x20\x03(\x0b2\x0c.\
    IJKJJDHLKLBR\x0bMDLACHDKMPH\x12!\n\x0cchallenge_id\x18\n\x20\x01(\rR\x0b\
    challengeId\x12\x20\n\x0bHLIBIJFHHPG\x18\x07\x20\x03(\rR\x0bHLIBIJFHHPG\
    \x12\x20\n\x0bCPGOIPICPJF\x18\x0c\x20\x01(\rR\x0bCPGOIPICPJF\x12\x20\n\
    \x0bAPLKNJEGBKF\x18\x02\x20\x01(\x08R\x0bAPLKNJEGBKF\x12\x20\n\x0bHNPEAP\
    PMGAA\x18\x06\x20\x01(\rR\x0bHNPEAPPMGAAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::IJKJJDHLKLB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FCIHIJLOMGA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
