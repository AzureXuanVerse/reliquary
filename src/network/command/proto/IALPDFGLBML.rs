// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `IALPDFGLBML.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:IALPDFGLBML)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IALPDFGLBML {
    // message fields
    // @@protoc_insertion_point(field:IALPDFGLBML.version)
    pub version: u32,
    // @@protoc_insertion_point(field:IALPDFGLBML.logic_random_seed)
    pub logic_random_seed: u32,
    // @@protoc_insertion_point(field:IALPDFGLBML.stage_id)
    pub stage_id: u32,
    // @@protoc_insertion_point(field:IALPDFGLBML.lineup)
    pub lineup: ::protobuf::MessageField<super::DBDGPCBJEHG::DBDGPCBJEHG>,
    // @@protoc_insertion_point(field:IALPDFGLBML.op_list)
    pub op_list: ::std::vec::Vec<super::BattleOp::BattleOp>,
    // @@protoc_insertion_point(field:IALPDFGLBML.turn_snapshot_hash)
    pub turn_snapshot_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:IALPDFGLBML.JONBHAEOFLI)
    pub JONBHAEOFLI: u32,
    // @@protoc_insertion_point(field:IALPDFGLBML.DJILKABPECA)
    pub DJILKABPECA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:IALPDFGLBML.HDOFEBPLNMM)
    pub HDOFEBPLNMM: bool,
    // @@protoc_insertion_point(field:IALPDFGLBML.GPHAPAEHJFH)
    pub GPHAPAEHJFH: ::protobuf::EnumOrUnknown<super::CHEHBBADKBG::CHEHBBADKBG>,
    // @@protoc_insertion_point(field:IALPDFGLBML.BLPFEAANHDI)
    pub BLPFEAANHDI: ::protobuf::EnumOrUnknown<super::BattleModuleType::BattleModuleType>,
    // @@protoc_insertion_point(field:IALPDFGLBML.event_battle_info_list)
    pub event_battle_info_list: ::std::vec::Vec<super::BattleEventBattleInfo::BattleEventBattleInfo>,
    // @@protoc_insertion_point(field:IALPDFGLBML.LGDPIHJIICI)
    pub LGDPIHJIICI: u32,
    // @@protoc_insertion_point(field:IALPDFGLBML.FGPMJANHEPD)
    pub FGPMJANHEPD: ::protobuf::MessageField<super::JEAFNKHFPFB::JEAFNKHFPFB>,
    // @@protoc_insertion_point(field:IALPDFGLBML.BBBHDKGHAOF)
    pub BBBHDKGHAOF: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:IALPDFGLBML.HPADEEDKKNE)
    pub HPADEEDKKNE: u32,
    // @@protoc_insertion_point(field:IALPDFGLBML.DDOGJOKECCL)
    pub DDOGJOKECCL: u32,
    // @@protoc_insertion_point(field:IALPDFGLBML.GMPCFGEDHKI)
    pub GMPCFGEDHKI: ::protobuf::MessageField<super::PNDFMBJFGIM::PNDFMBJFGIM>,
    // @@protoc_insertion_point(field:IALPDFGLBML.BNMIIAHADJH)
    pub BNMIIAHADJH: ::protobuf::MessageField<super::MIAIDAILDKM::MIAIDAILDKM>,
    // special fields
    // @@protoc_insertion_point(special_field:IALPDFGLBML.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IALPDFGLBML {
    fn default() -> &'a IALPDFGLBML {
        <IALPDFGLBML as ::protobuf::Message>::default_instance()
    }
}

impl IALPDFGLBML {
    pub fn new() -> IALPDFGLBML {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(19);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &IALPDFGLBML| { &m.version },
            |m: &mut IALPDFGLBML| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "logic_random_seed",
            |m: &IALPDFGLBML| { &m.logic_random_seed },
            |m: &mut IALPDFGLBML| { &mut m.logic_random_seed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stage_id",
            |m: &IALPDFGLBML| { &m.stage_id },
            |m: &mut IALPDFGLBML| { &mut m.stage_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DBDGPCBJEHG::DBDGPCBJEHG>(
            "lineup",
            |m: &IALPDFGLBML| { &m.lineup },
            |m: &mut IALPDFGLBML| { &mut m.lineup },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "op_list",
            |m: &IALPDFGLBML| { &m.op_list },
            |m: &mut IALPDFGLBML| { &mut m.op_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "turn_snapshot_hash",
            |m: &IALPDFGLBML| { &m.turn_snapshot_hash },
            |m: &mut IALPDFGLBML| { &mut m.turn_snapshot_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JONBHAEOFLI",
            |m: &IALPDFGLBML| { &m.JONBHAEOFLI },
            |m: &mut IALPDFGLBML| { &mut m.JONBHAEOFLI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DJILKABPECA",
            |m: &IALPDFGLBML| { &m.DJILKABPECA },
            |m: &mut IALPDFGLBML| { &mut m.DJILKABPECA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HDOFEBPLNMM",
            |m: &IALPDFGLBML| { &m.HDOFEBPLNMM },
            |m: &mut IALPDFGLBML| { &mut m.HDOFEBPLNMM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GPHAPAEHJFH",
            |m: &IALPDFGLBML| { &m.GPHAPAEHJFH },
            |m: &mut IALPDFGLBML| { &mut m.GPHAPAEHJFH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BLPFEAANHDI",
            |m: &IALPDFGLBML| { &m.BLPFEAANHDI },
            |m: &mut IALPDFGLBML| { &mut m.BLPFEAANHDI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "event_battle_info_list",
            |m: &IALPDFGLBML| { &m.event_battle_info_list },
            |m: &mut IALPDFGLBML| { &mut m.event_battle_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LGDPIHJIICI",
            |m: &IALPDFGLBML| { &m.LGDPIHJIICI },
            |m: &mut IALPDFGLBML| { &mut m.LGDPIHJIICI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JEAFNKHFPFB::JEAFNKHFPFB>(
            "FGPMJANHEPD",
            |m: &IALPDFGLBML| { &m.FGPMJANHEPD },
            |m: &mut IALPDFGLBML| { &mut m.FGPMJANHEPD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BBBHDKGHAOF",
            |m: &IALPDFGLBML| { &m.BBBHDKGHAOF },
            |m: &mut IALPDFGLBML| { &mut m.BBBHDKGHAOF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HPADEEDKKNE",
            |m: &IALPDFGLBML| { &m.HPADEEDKKNE },
            |m: &mut IALPDFGLBML| { &mut m.HPADEEDKKNE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DDOGJOKECCL",
            |m: &IALPDFGLBML| { &m.DDOGJOKECCL },
            |m: &mut IALPDFGLBML| { &mut m.DDOGJOKECCL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PNDFMBJFGIM::PNDFMBJFGIM>(
            "GMPCFGEDHKI",
            |m: &IALPDFGLBML| { &m.GMPCFGEDHKI },
            |m: &mut IALPDFGLBML| { &mut m.GMPCFGEDHKI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MIAIDAILDKM::MIAIDAILDKM>(
            "BNMIIAHADJH",
            |m: &IALPDFGLBML| { &m.BNMIIAHADJH },
            |m: &mut IALPDFGLBML| { &mut m.BNMIIAHADJH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IALPDFGLBML>(
            "IALPDFGLBML",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IALPDFGLBML {
    const NAME: &'static str = "IALPDFGLBML";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint32()?;
                },
                16 => {
                    self.logic_random_seed = is.read_uint32()?;
                },
                24 => {
                    self.stage_id = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lineup)?;
                },
                42 => {
                    self.op_list.push(is.read_message()?);
                },
                50 => {
                    self.turn_snapshot_hash = is.read_bytes()?;
                },
                56 => {
                    self.JONBHAEOFLI = is.read_uint32()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.DJILKABPECA)?;
                },
                64 => {
                    self.DJILKABPECA.push(is.read_uint32()?);
                },
                72 => {
                    self.HDOFEBPLNMM = is.read_bool()?;
                },
                80 => {
                    self.GPHAPAEHJFH = is.read_enum_or_unknown()?;
                },
                88 => {
                    self.BLPFEAANHDI = is.read_enum_or_unknown()?;
                },
                98 => {
                    self.event_battle_info_list.push(is.read_message()?);
                },
                112 => {
                    self.LGDPIHJIICI = is.read_uint32()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FGPMJANHEPD)?;
                },
                130 => {
                    self.BBBHDKGHAOF = is.read_bytes()?;
                },
                136 => {
                    self.HPADEEDKKNE = is.read_uint32()?;
                },
                144 => {
                    self.DDOGJOKECCL = is.read_uint32()?;
                },
                154 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GMPCFGEDHKI)?;
                },
                802 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BNMIIAHADJH)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.version);
        }
        if self.logic_random_seed != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.logic_random_seed);
        }
        if self.stage_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.stage_id);
        }
        if let Some(v) = self.lineup.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.op_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.turn_snapshot_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.turn_snapshot_hash);
        }
        if self.JONBHAEOFLI != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.JONBHAEOFLI);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(8, &self.DJILKABPECA);
        if self.HDOFEBPLNMM != false {
            my_size += 1 + 1;
        }
        if self.GPHAPAEHJFH != ::protobuf::EnumOrUnknown::new(super::CHEHBBADKBG::CHEHBBADKBG::BATTLE_CHECK_STRATEGY_IDENTICAL) {
            my_size += ::protobuf::rt::int32_size(10, self.GPHAPAEHJFH.value());
        }
        if self.BLPFEAANHDI != ::protobuf::EnumOrUnknown::new(super::BattleModuleType::BattleModuleType::BATTLE_MODULE_MAZE) {
            my_size += ::protobuf::rt::int32_size(11, self.BLPFEAANHDI.value());
        }
        for value in &self.event_battle_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.LGDPIHJIICI != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.LGDPIHJIICI);
        }
        if let Some(v) = self.FGPMJANHEPD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.BBBHDKGHAOF.is_empty() {
            my_size += ::protobuf::rt::bytes_size(16, &self.BBBHDKGHAOF);
        }
        if self.HPADEEDKKNE != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.HPADEEDKKNE);
        }
        if self.DDOGJOKECCL != 0 {
            my_size += ::protobuf::rt::uint32_size(18, self.DDOGJOKECCL);
        }
        if let Some(v) = self.GMPCFGEDHKI.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.BNMIIAHADJH.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.logic_random_seed != 0 {
            os.write_uint32(2, self.logic_random_seed)?;
        }
        if self.stage_id != 0 {
            os.write_uint32(3, self.stage_id)?;
        }
        if let Some(v) = self.lineup.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.op_list {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if !self.turn_snapshot_hash.is_empty() {
            os.write_bytes(6, &self.turn_snapshot_hash)?;
        }
        if self.JONBHAEOFLI != 0 {
            os.write_uint32(7, self.JONBHAEOFLI)?;
        }
        os.write_repeated_packed_uint32(8, &self.DJILKABPECA)?;
        if self.HDOFEBPLNMM != false {
            os.write_bool(9, self.HDOFEBPLNMM)?;
        }
        if self.GPHAPAEHJFH != ::protobuf::EnumOrUnknown::new(super::CHEHBBADKBG::CHEHBBADKBG::BATTLE_CHECK_STRATEGY_IDENTICAL) {
            os.write_enum(10, ::protobuf::EnumOrUnknown::value(&self.GPHAPAEHJFH))?;
        }
        if self.BLPFEAANHDI != ::protobuf::EnumOrUnknown::new(super::BattleModuleType::BattleModuleType::BATTLE_MODULE_MAZE) {
            os.write_enum(11, ::protobuf::EnumOrUnknown::value(&self.BLPFEAANHDI))?;
        }
        for v in &self.event_battle_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if self.LGDPIHJIICI != 0 {
            os.write_uint32(14, self.LGDPIHJIICI)?;
        }
        if let Some(v) = self.FGPMJANHEPD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if !self.BBBHDKGHAOF.is_empty() {
            os.write_bytes(16, &self.BBBHDKGHAOF)?;
        }
        if self.HPADEEDKKNE != 0 {
            os.write_uint32(17, self.HPADEEDKKNE)?;
        }
        if self.DDOGJOKECCL != 0 {
            os.write_uint32(18, self.DDOGJOKECCL)?;
        }
        if let Some(v) = self.GMPCFGEDHKI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
        }
        if let Some(v) = self.BNMIIAHADJH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IALPDFGLBML {
        IALPDFGLBML::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.logic_random_seed = 0;
        self.stage_id = 0;
        self.lineup.clear();
        self.op_list.clear();
        self.turn_snapshot_hash.clear();
        self.JONBHAEOFLI = 0;
        self.DJILKABPECA.clear();
        self.HDOFEBPLNMM = false;
        self.GPHAPAEHJFH = ::protobuf::EnumOrUnknown::new(super::CHEHBBADKBG::CHEHBBADKBG::BATTLE_CHECK_STRATEGY_IDENTICAL);
        self.BLPFEAANHDI = ::protobuf::EnumOrUnknown::new(super::BattleModuleType::BattleModuleType::BATTLE_MODULE_MAZE);
        self.event_battle_info_list.clear();
        self.LGDPIHJIICI = 0;
        self.FGPMJANHEPD.clear();
        self.BBBHDKGHAOF.clear();
        self.HPADEEDKKNE = 0;
        self.DDOGJOKECCL = 0;
        self.GMPCFGEDHKI.clear();
        self.BNMIIAHADJH.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IALPDFGLBML {
        static instance: IALPDFGLBML = IALPDFGLBML {
            version: 0,
            logic_random_seed: 0,
            stage_id: 0,
            lineup: ::protobuf::MessageField::none(),
            op_list: ::std::vec::Vec::new(),
            turn_snapshot_hash: ::std::vec::Vec::new(),
            JONBHAEOFLI: 0,
            DJILKABPECA: ::std::vec::Vec::new(),
            HDOFEBPLNMM: false,
            GPHAPAEHJFH: ::protobuf::EnumOrUnknown::from_i32(0),
            BLPFEAANHDI: ::protobuf::EnumOrUnknown::from_i32(0),
            event_battle_info_list: ::std::vec::Vec::new(),
            LGDPIHJIICI: 0,
            FGPMJANHEPD: ::protobuf::MessageField::none(),
            BBBHDKGHAOF: ::std::vec::Vec::new(),
            HPADEEDKKNE: 0,
            DDOGJOKECCL: 0,
            GMPCFGEDHKI: ::protobuf::MessageField::none(),
            BNMIIAHADJH: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IALPDFGLBML {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IALPDFGLBML").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IALPDFGLBML {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IALPDFGLBML {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11IALPDFGLBML.proto\x1a\x1bBattleEventBattleInfo.proto\x1a\x16Battle\
    ModuleType.proto\x1a\x0eBattleOp.proto\x1a\x11CHEHBBADKBG.proto\x1a\x11D\
    BDGPCBJEHG.proto\x1a\x11JEAFNKHFPFB.proto\x1a\x11MIAIDAILDKM.proto\x1a\
    \x11PNDFMBJFGIM.proto\"\x96\x06\n\x0bIALPDFGLBML\x12\x18\n\x07version\
    \x18\x01\x20\x01(\rR\x07version\x12*\n\x11logic_random_seed\x18\x02\x20\
    \x01(\rR\x0flogicRandomSeed\x12\x19\n\x08stage_id\x18\x03\x20\x01(\rR\
    \x07stageId\x12$\n\x06lineup\x18\x04\x20\x01(\x0b2\x0c.DBDGPCBJEHGR\x06l\
    ineup\x12\"\n\x07op_list\x18\x05\x20\x03(\x0b2\t.BattleOpR\x06opList\x12\
    ,\n\x12turn_snapshot_hash\x18\x06\x20\x01(\x0cR\x10turnSnapshotHash\x12\
    \x20\n\x0bJONBHAEOFLI\x18\x07\x20\x01(\rR\x0bJONBHAEOFLI\x12\x20\n\x0bDJ\
    ILKABPECA\x18\x08\x20\x03(\rR\x0bDJILKABPECA\x12\x20\n\x0bHDOFEBPLNMM\
    \x18\t\x20\x01(\x08R\x0bHDOFEBPLNMM\x12.\n\x0bGPHAPAEHJFH\x18\n\x20\x01(\
    \x0e2\x0c.CHEHBBADKBGR\x0bGPHAPAEHJFH\x123\n\x0bBLPFEAANHDI\x18\x0b\x20\
    \x01(\x0e2\x11.BattleModuleTypeR\x0bBLPFEAANHDI\x12K\n\x16event_battle_i\
    nfo_list\x18\x0c\x20\x03(\x0b2\x16.BattleEventBattleInfoR\x13eventBattle\
    InfoList\x12\x20\n\x0bLGDPIHJIICI\x18\x0e\x20\x01(\rR\x0bLGDPIHJIICI\x12\
    .\n\x0bFGPMJANHEPD\x18\x0f\x20\x01(\x0b2\x0c.JEAFNKHFPFBR\x0bFGPMJANHEPD\
    \x12\x20\n\x0bBBBHDKGHAOF\x18\x10\x20\x01(\x0cR\x0bBBBHDKGHAOF\x12\x20\n\
    \x0bHPADEEDKKNE\x18\x11\x20\x01(\rR\x0bHPADEEDKKNE\x12\x20\n\x0bDDOGJOKE\
    CCL\x18\x12\x20\x01(\rR\x0bDDOGJOKECCL\x12.\n\x0bGMPCFGEDHKI\x18\x13\x20\
    \x01(\x0b2\x0c.PNDFMBJFGIMR\x0bGMPCFGEDHKI\x12.\n\x0bBNMIIAHADJH\x18d\
    \x20\x01(\x0b2\x0c.MIAIDAILDKMR\x0bBNMIIAHADJHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::BattleEventBattleInfo::file_descriptor().clone());
            deps.push(super::BattleModuleType::file_descriptor().clone());
            deps.push(super::BattleOp::file_descriptor().clone());
            deps.push(super::CHEHBBADKBG::file_descriptor().clone());
            deps.push(super::DBDGPCBJEHG::file_descriptor().clone());
            deps.push(super::JEAFNKHFPFB::file_descriptor().clone());
            deps.push(super::MIAIDAILDKM::file_descriptor().clone());
            deps.push(super::PNDFMBJFGIM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(IALPDFGLBML::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
