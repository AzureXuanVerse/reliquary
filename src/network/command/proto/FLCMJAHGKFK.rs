// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FLCMJAHGKFK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:FLCMJAHGKFK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FLCMJAHGKFK {
    // message fields
    // @@protoc_insertion_point(field:FLCMJAHGKFK.GMALCPNOHBF)
    pub GMALCPNOHBF: ::std::string::String,
    // @@protoc_insertion_point(field:FLCMJAHGKFK.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:FLCMJAHGKFK.platform)
    pub platform: ::protobuf::EnumOrUnknown<super::PlatformType::PlatformType>,
    // @@protoc_insertion_point(field:FLCMJAHGKFK.level)
    pub level: u32,
    // @@protoc_insertion_point(field:FLCMJAHGKFK.NPPPHGFENPH)
    pub NPPPHGFENPH: u32,
    // @@protoc_insertion_point(field:FLCMJAHGKFK.INNANICLCAE)
    pub INNANICLCAE: u32,
    // @@protoc_insertion_point(field:FLCMJAHGKFK.remark_name)
    pub remark_name: ::std::string::String,
    // @@protoc_insertion_point(field:FLCMJAHGKFK.nickname)
    pub nickname: ::std::string::String,
    // @@protoc_insertion_point(field:FLCMJAHGKFK.head_icon)
    pub head_icon: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FLCMJAHGKFK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FLCMJAHGKFK {
    fn default() -> &'a FLCMJAHGKFK {
        <FLCMJAHGKFK as ::protobuf::Message>::default_instance()
    }
}

impl FLCMJAHGKFK {
    pub fn new() -> FLCMJAHGKFK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GMALCPNOHBF",
            |m: &FLCMJAHGKFK| { &m.GMALCPNOHBF },
            |m: &mut FLCMJAHGKFK| { &mut m.GMALCPNOHBF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &FLCMJAHGKFK| { &m.uid },
            |m: &mut FLCMJAHGKFK| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform",
            |m: &FLCMJAHGKFK| { &m.platform },
            |m: &mut FLCMJAHGKFK| { &mut m.platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &FLCMJAHGKFK| { &m.level },
            |m: &mut FLCMJAHGKFK| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NPPPHGFENPH",
            |m: &FLCMJAHGKFK| { &m.NPPPHGFENPH },
            |m: &mut FLCMJAHGKFK| { &mut m.NPPPHGFENPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "INNANICLCAE",
            |m: &FLCMJAHGKFK| { &m.INNANICLCAE },
            |m: &mut FLCMJAHGKFK| { &mut m.INNANICLCAE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remark_name",
            |m: &FLCMJAHGKFK| { &m.remark_name },
            |m: &mut FLCMJAHGKFK| { &mut m.remark_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nickname",
            |m: &FLCMJAHGKFK| { &m.nickname },
            |m: &mut FLCMJAHGKFK| { &mut m.nickname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "head_icon",
            |m: &FLCMJAHGKFK| { &m.head_icon },
            |m: &mut FLCMJAHGKFK| { &mut m.head_icon },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FLCMJAHGKFK>(
            "FLCMJAHGKFK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FLCMJAHGKFK {
    const NAME: &'static str = "FLCMJAHGKFK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    self.GMALCPNOHBF = is.read_string()?;
                },
                48 => {
                    self.uid = is.read_uint32()?;
                },
                96 => {
                    self.platform = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.level = is.read_uint32()?;
                },
                120 => {
                    self.NPPPHGFENPH = is.read_uint32()?;
                },
                104 => {
                    self.INNANICLCAE = is.read_uint32()?;
                },
                90 => {
                    self.remark_name = is.read_string()?;
                },
                82 => {
                    self.nickname = is.read_string()?;
                },
                32 => {
                    self.head_icon = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.GMALCPNOHBF.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.GMALCPNOHBF);
        }
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.uid);
        }
        if self.platform != ::protobuf::EnumOrUnknown::new(super::PlatformType::PlatformType::EDITOR) {
            my_size += ::protobuf::rt::int32_size(12, self.platform.value());
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.level);
        }
        if self.NPPPHGFENPH != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.NPPPHGFENPH);
        }
        if self.INNANICLCAE != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.INNANICLCAE);
        }
        if !self.remark_name.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.remark_name);
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.nickname);
        }
        if self.head_icon != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.head_icon);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.GMALCPNOHBF.is_empty() {
            os.write_string(8, &self.GMALCPNOHBF)?;
        }
        if self.uid != 0 {
            os.write_uint32(6, self.uid)?;
        }
        if self.platform != ::protobuf::EnumOrUnknown::new(super::PlatformType::PlatformType::EDITOR) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.platform))?;
        }
        if self.level != 0 {
            os.write_uint32(3, self.level)?;
        }
        if self.NPPPHGFENPH != 0 {
            os.write_uint32(15, self.NPPPHGFENPH)?;
        }
        if self.INNANICLCAE != 0 {
            os.write_uint32(13, self.INNANICLCAE)?;
        }
        if !self.remark_name.is_empty() {
            os.write_string(11, &self.remark_name)?;
        }
        if !self.nickname.is_empty() {
            os.write_string(10, &self.nickname)?;
        }
        if self.head_icon != 0 {
            os.write_uint32(4, self.head_icon)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FLCMJAHGKFK {
        FLCMJAHGKFK::new()
    }

    fn clear(&mut self) {
        self.GMALCPNOHBF.clear();
        self.uid = 0;
        self.platform = ::protobuf::EnumOrUnknown::new(super::PlatformType::PlatformType::EDITOR);
        self.level = 0;
        self.NPPPHGFENPH = 0;
        self.INNANICLCAE = 0;
        self.remark_name.clear();
        self.nickname.clear();
        self.head_icon = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FLCMJAHGKFK {
        static instance: FLCMJAHGKFK = FLCMJAHGKFK {
            GMALCPNOHBF: ::std::string::String::new(),
            uid: 0,
            platform: ::protobuf::EnumOrUnknown::from_i32(0),
            level: 0,
            NPPPHGFENPH: 0,
            INNANICLCAE: 0,
            remark_name: ::std::string::String::new(),
            nickname: ::std::string::String::new(),
            head_icon: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FLCMJAHGKFK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FLCMJAHGKFK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FLCMJAHGKFK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FLCMJAHGKFK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FLCMJAHGKFK.proto\x1a\x12PlatformType.proto\"\xa0\x02\n\x0bFLCMJAH\
    GKFK\x12\x20\n\x0bGMALCPNOHBF\x18\x08\x20\x01(\tR\x0bGMALCPNOHBF\x12\x10\
    \n\x03uid\x18\x06\x20\x01(\rR\x03uid\x12)\n\x08platform\x18\x0c\x20\x01(\
    \x0e2\r.PlatformTypeR\x08platform\x12\x14\n\x05level\x18\x03\x20\x01(\rR\
    \x05level\x12\x20\n\x0bNPPPHGFENPH\x18\x0f\x20\x01(\rR\x0bNPPPHGFENPH\
    \x12\x20\n\x0bINNANICLCAE\x18\r\x20\x01(\rR\x0bINNANICLCAE\x12\x1f\n\x0b\
    remark_name\x18\x0b\x20\x01(\tR\nremarkName\x12\x1a\n\x08nickname\x18\n\
    \x20\x01(\tR\x08nickname\x12\x1b\n\thead_icon\x18\x04\x20\x01(\rR\x08hea\
    dIconb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::PlatformType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FLCMJAHGKFK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
