// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `WorkbenchFuncInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:WorkbenchFuncInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WorkbenchFuncInfo {
    // message oneof groups
    pub PNECCABBLHB: ::std::option::Option<workbench_func_info::PNECCABBLHB>,
    // special fields
    // @@protoc_insertion_point(special_field:WorkbenchFuncInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WorkbenchFuncInfo {
    fn default() -> &'a WorkbenchFuncInfo {
        <WorkbenchFuncInfo as ::protobuf::Message>::default_instance()
    }
}

impl WorkbenchFuncInfo {
    pub fn new() -> WorkbenchFuncInfo {
        ::std::default::Default::default()
    }

    // .WorkbenchReforgeBuffFuncInfo reforge_buff_func = 3;

    pub fn reforge_buff_func(&self) -> &super::WorkbenchReforgeBuffFuncInfo::WorkbenchReforgeBuffFuncInfo {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(ref v)) => v,
            _ => <super::WorkbenchReforgeBuffFuncInfo::WorkbenchReforgeBuffFuncInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reforge_buff_func(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_reforge_buff_func(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reforge_buff_func(&mut self, v: super::WorkbenchReforgeBuffFuncInfo::WorkbenchReforgeBuffFuncInfo) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reforge_buff_func(&mut self) -> &mut super::WorkbenchReforgeBuffFuncInfo::WorkbenchReforgeBuffFuncInfo {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(super::WorkbenchReforgeBuffFuncInfo::WorkbenchReforgeBuffFuncInfo::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reforge_buff_func(&mut self) -> super::WorkbenchReforgeBuffFuncInfo::WorkbenchReforgeBuffFuncInfo {
        if self.has_reforge_buff_func() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchReforgeBuffFuncInfo::WorkbenchReforgeBuffFuncInfo::new()
        }
    }

    // .WorkbenchReforgeFormulaFuncInfo reforge_formula_func = 1;

    pub fn reforge_formula_func(&self) -> &super::WorkbenchReforgeFormulaFuncInfo::WorkbenchReforgeFormulaFuncInfo {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(ref v)) => v,
            _ => <super::WorkbenchReforgeFormulaFuncInfo::WorkbenchReforgeFormulaFuncInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reforge_formula_func(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_reforge_formula_func(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reforge_formula_func(&mut self, v: super::WorkbenchReforgeFormulaFuncInfo::WorkbenchReforgeFormulaFuncInfo) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reforge_formula_func(&mut self) -> &mut super::WorkbenchReforgeFormulaFuncInfo::WorkbenchReforgeFormulaFuncInfo {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(super::WorkbenchReforgeFormulaFuncInfo::WorkbenchReforgeFormulaFuncInfo::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reforge_formula_func(&mut self) -> super::WorkbenchReforgeFormulaFuncInfo::WorkbenchReforgeFormulaFuncInfo {
        if self.has_reforge_formula_func() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchReforgeFormulaFuncInfo::WorkbenchReforgeFormulaFuncInfo::new()
        }
    }

    // .WorkbenchEnhanceBuffFuncInfo enhance_buff_func = 15;

    pub fn enhance_buff_func(&self) -> &super::WorkbenchEnhanceBuffFuncInfo::WorkbenchEnhanceBuffFuncInfo {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(ref v)) => v,
            _ => <super::WorkbenchEnhanceBuffFuncInfo::WorkbenchEnhanceBuffFuncInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_enhance_buff_func(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_enhance_buff_func(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enhance_buff_func(&mut self, v: super::WorkbenchEnhanceBuffFuncInfo::WorkbenchEnhanceBuffFuncInfo) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_enhance_buff_func(&mut self) -> &mut super::WorkbenchEnhanceBuffFuncInfo::WorkbenchEnhanceBuffFuncInfo {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(super::WorkbenchEnhanceBuffFuncInfo::WorkbenchEnhanceBuffFuncInfo::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_enhance_buff_func(&mut self) -> super::WorkbenchEnhanceBuffFuncInfo::WorkbenchEnhanceBuffFuncInfo {
        if self.has_enhance_buff_func() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchEnhanceBuffFuncInfo::WorkbenchEnhanceBuffFuncInfo::new()
        }
    }

    // .WorkbenchComposeMiracleFunc compose_miracle_func = 8;

    pub fn compose_miracle_func(&self) -> &super::WorkbenchComposeMiracleFunc::WorkbenchComposeMiracleFunc {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(ref v)) => v,
            _ => <super::WorkbenchComposeMiracleFunc::WorkbenchComposeMiracleFunc as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_compose_miracle_func(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_compose_miracle_func(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_compose_miracle_func(&mut self, v: super::WorkbenchComposeMiracleFunc::WorkbenchComposeMiracleFunc) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_compose_miracle_func(&mut self) -> &mut super::WorkbenchComposeMiracleFunc::WorkbenchComposeMiracleFunc {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(super::WorkbenchComposeMiracleFunc::WorkbenchComposeMiracleFunc::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_compose_miracle_func(&mut self) -> super::WorkbenchComposeMiracleFunc::WorkbenchComposeMiracleFunc {
        if self.has_compose_miracle_func() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchComposeMiracleFunc::WorkbenchComposeMiracleFunc::new()
        }
    }

    // .WorkbenchReforgeHexAvatarFunc reforge_hex_avatar_func = 11;

    pub fn reforge_hex_avatar_func(&self) -> &super::WorkbenchReforgeHexAvatarFunc::WorkbenchReforgeHexAvatarFunc {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(ref v)) => v,
            _ => <super::WorkbenchReforgeHexAvatarFunc::WorkbenchReforgeHexAvatarFunc as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reforge_hex_avatar_func(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_reforge_hex_avatar_func(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reforge_hex_avatar_func(&mut self, v: super::WorkbenchReforgeHexAvatarFunc::WorkbenchReforgeHexAvatarFunc) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reforge_hex_avatar_func(&mut self) -> &mut super::WorkbenchReforgeHexAvatarFunc::WorkbenchReforgeHexAvatarFunc {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(super::WorkbenchReforgeHexAvatarFunc::WorkbenchReforgeHexAvatarFunc::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reforge_hex_avatar_func(&mut self) -> super::WorkbenchReforgeHexAvatarFunc::WorkbenchReforgeHexAvatarFunc {
        if self.has_reforge_hex_avatar_func() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchReforgeHexAvatarFunc::WorkbenchReforgeHexAvatarFunc::new()
        }
    }

    // .KHCBGNLNPEL magic_item = 13;

    pub fn magic_item(&self) -> &super::KHCBGNLNPEL::KHCBGNLNPEL {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::MagicItem(ref v)) => v,
            _ => <super::KHCBGNLNPEL::KHCBGNLNPEL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_magic_item(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_magic_item(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::MagicItem(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_magic_item(&mut self, v: super::KHCBGNLNPEL::KHCBGNLNPEL) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::MagicItem(v))
    }

    // Mutable pointer to the field.
    pub fn mut_magic_item(&mut self) -> &mut super::KHCBGNLNPEL::KHCBGNLNPEL {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::MagicItem(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::MagicItem(super::KHCBGNLNPEL::KHCBGNLNPEL::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::MagicItem(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_magic_item(&mut self) -> super::KHCBGNLNPEL::KHCBGNLNPEL {
        if self.has_magic_item() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::MagicItem(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KHCBGNLNPEL::KHCBGNLNPEL::new()
        }
    }

    // .KMHIBNGAFEO game_magic_unit = 4;

    pub fn game_magic_unit(&self) -> &super::KMHIBNGAFEO::KMHIBNGAFEO {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::GameMagicUnit(ref v)) => v,
            _ => <super::KMHIBNGAFEO::KMHIBNGAFEO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_game_magic_unit(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_game_magic_unit(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::GameMagicUnit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_game_magic_unit(&mut self, v: super::KMHIBNGAFEO::KMHIBNGAFEO) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::GameMagicUnit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_game_magic_unit(&mut self) -> &mut super::KMHIBNGAFEO::KMHIBNGAFEO {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::GameMagicUnit(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::GameMagicUnit(super::KMHIBNGAFEO::KMHIBNGAFEO::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::GameMagicUnit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_game_magic_unit(&mut self) -> super::KMHIBNGAFEO::KMHIBNGAFEO {
        if self.has_game_magic_unit() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::GameMagicUnit(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KMHIBNGAFEO::KMHIBNGAFEO::new()
        }
    }

    // .DMKPFGEBILH CEAJNLIOFHF = 5;

    pub fn CEAJNLIOFHF(&self) -> &super::DMKPFGEBILH::DMKPFGEBILH {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(ref v)) => v,
            _ => <super::DMKPFGEBILH::DMKPFGEBILH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CEAJNLIOFHF(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_CEAJNLIOFHF(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CEAJNLIOFHF(&mut self, v: super::DMKPFGEBILH::DMKPFGEBILH) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CEAJNLIOFHF(&mut self) -> &mut super::DMKPFGEBILH::DMKPFGEBILH {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(super::DMKPFGEBILH::DMKPFGEBILH::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CEAJNLIOFHF(&mut self) -> super::DMKPFGEBILH::DMKPFGEBILH {
        if self.has_CEAJNLIOFHF() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DMKPFGEBILH::DMKPFGEBILH::new()
        }
    }

    // .LFGGPNGKBCH PGPAAPOPDOC = 7;

    pub fn PGPAAPOPDOC(&self) -> &super::LFGGPNGKBCH::LFGGPNGKBCH {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(ref v)) => v,
            _ => <super::LFGGPNGKBCH::LFGGPNGKBCH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PGPAAPOPDOC(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_PGPAAPOPDOC(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PGPAAPOPDOC(&mut self, v: super::LFGGPNGKBCH::LFGGPNGKBCH) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PGPAAPOPDOC(&mut self) -> &mut super::LFGGPNGKBCH::LFGGPNGKBCH {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(super::LFGGPNGKBCH::LFGGPNGKBCH::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PGPAAPOPDOC(&mut self) -> super::LFGGPNGKBCH::LFGGPNGKBCH {
        if self.has_PGPAAPOPDOC() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LFGGPNGKBCH::LFGGPNGKBCH::new()
        }
    }

    // .DHMFCIDJBFD PMKEHGBPCNG = 9;

    pub fn PMKEHGBPCNG(&self) -> &super::DHMFCIDJBFD::DHMFCIDJBFD {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(ref v)) => v,
            _ => <super::DHMFCIDJBFD::DHMFCIDJBFD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMKEHGBPCNG(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_PMKEHGBPCNG(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMKEHGBPCNG(&mut self, v: super::DHMFCIDJBFD::DHMFCIDJBFD) {
        self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMKEHGBPCNG(&mut self) -> &mut super::DHMFCIDJBFD::DHMFCIDJBFD {
        if let ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(super::DHMFCIDJBFD::DHMFCIDJBFD::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMKEHGBPCNG(&mut self) -> super::DHMFCIDJBFD::DHMFCIDJBFD {
        if self.has_PMKEHGBPCNG() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DHMFCIDJBFD::DHMFCIDJBFD::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchReforgeBuffFuncInfo::WorkbenchReforgeBuffFuncInfo>(
            "reforge_buff_func",
            WorkbenchFuncInfo::has_reforge_buff_func,
            WorkbenchFuncInfo::reforge_buff_func,
            WorkbenchFuncInfo::mut_reforge_buff_func,
            WorkbenchFuncInfo::set_reforge_buff_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchReforgeFormulaFuncInfo::WorkbenchReforgeFormulaFuncInfo>(
            "reforge_formula_func",
            WorkbenchFuncInfo::has_reforge_formula_func,
            WorkbenchFuncInfo::reforge_formula_func,
            WorkbenchFuncInfo::mut_reforge_formula_func,
            WorkbenchFuncInfo::set_reforge_formula_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchEnhanceBuffFuncInfo::WorkbenchEnhanceBuffFuncInfo>(
            "enhance_buff_func",
            WorkbenchFuncInfo::has_enhance_buff_func,
            WorkbenchFuncInfo::enhance_buff_func,
            WorkbenchFuncInfo::mut_enhance_buff_func,
            WorkbenchFuncInfo::set_enhance_buff_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchComposeMiracleFunc::WorkbenchComposeMiracleFunc>(
            "compose_miracle_func",
            WorkbenchFuncInfo::has_compose_miracle_func,
            WorkbenchFuncInfo::compose_miracle_func,
            WorkbenchFuncInfo::mut_compose_miracle_func,
            WorkbenchFuncInfo::set_compose_miracle_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchReforgeHexAvatarFunc::WorkbenchReforgeHexAvatarFunc>(
            "reforge_hex_avatar_func",
            WorkbenchFuncInfo::has_reforge_hex_avatar_func,
            WorkbenchFuncInfo::reforge_hex_avatar_func,
            WorkbenchFuncInfo::mut_reforge_hex_avatar_func,
            WorkbenchFuncInfo::set_reforge_hex_avatar_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KHCBGNLNPEL::KHCBGNLNPEL>(
            "magic_item",
            WorkbenchFuncInfo::has_magic_item,
            WorkbenchFuncInfo::magic_item,
            WorkbenchFuncInfo::mut_magic_item,
            WorkbenchFuncInfo::set_magic_item,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KMHIBNGAFEO::KMHIBNGAFEO>(
            "game_magic_unit",
            WorkbenchFuncInfo::has_game_magic_unit,
            WorkbenchFuncInfo::game_magic_unit,
            WorkbenchFuncInfo::mut_game_magic_unit,
            WorkbenchFuncInfo::set_game_magic_unit,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DMKPFGEBILH::DMKPFGEBILH>(
            "CEAJNLIOFHF",
            WorkbenchFuncInfo::has_CEAJNLIOFHF,
            WorkbenchFuncInfo::CEAJNLIOFHF,
            WorkbenchFuncInfo::mut_CEAJNLIOFHF,
            WorkbenchFuncInfo::set_CEAJNLIOFHF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LFGGPNGKBCH::LFGGPNGKBCH>(
            "PGPAAPOPDOC",
            WorkbenchFuncInfo::has_PGPAAPOPDOC,
            WorkbenchFuncInfo::PGPAAPOPDOC,
            WorkbenchFuncInfo::mut_PGPAAPOPDOC,
            WorkbenchFuncInfo::set_PGPAAPOPDOC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DHMFCIDJBFD::DHMFCIDJBFD>(
            "PMKEHGBPCNG",
            WorkbenchFuncInfo::has_PMKEHGBPCNG,
            WorkbenchFuncInfo::PMKEHGBPCNG,
            WorkbenchFuncInfo::mut_PMKEHGBPCNG,
            WorkbenchFuncInfo::set_PMKEHGBPCNG,
        ));
        oneofs.push(workbench_func_info::PNECCABBLHB::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WorkbenchFuncInfo>(
            "WorkbenchFuncInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WorkbenchFuncInfo {
    const NAME: &'static str = "WorkbenchFuncInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(is.read_message()?));
                },
                10 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(is.read_message()?));
                },
                122 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(is.read_message()?));
                },
                66 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(is.read_message()?));
                },
                90 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(is.read_message()?));
                },
                106 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::MagicItem(is.read_message()?));
                },
                34 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::GameMagicUnit(is.read_message()?));
                },
                42 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(is.read_message()?));
                },
                58 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(is.read_message()?));
                },
                74 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.PNECCABBLHB {
            match v {
                &workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &workbench_func_info::PNECCABBLHB::MagicItem(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &workbench_func_info::PNECCABBLHB::GameMagicUnit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.PNECCABBLHB {
            match v {
                &workbench_func_info::PNECCABBLHB::ReforgeBuffFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &workbench_func_info::PNECCABBLHB::ReforgeFormulaFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &workbench_func_info::PNECCABBLHB::EnhanceBuffFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &workbench_func_info::PNECCABBLHB::ComposeMiracleFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &workbench_func_info::PNECCABBLHB::ReforgeHexAvatarFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &workbench_func_info::PNECCABBLHB::MagicItem(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &workbench_func_info::PNECCABBLHB::GameMagicUnit(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &workbench_func_info::PNECCABBLHB::CEAJNLIOFHF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &workbench_func_info::PNECCABBLHB::PGPAAPOPDOC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &workbench_func_info::PNECCABBLHB::PMKEHGBPCNG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WorkbenchFuncInfo {
        WorkbenchFuncInfo::new()
    }

    fn clear(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WorkbenchFuncInfo {
        static instance: WorkbenchFuncInfo = WorkbenchFuncInfo {
            PNECCABBLHB: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WorkbenchFuncInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WorkbenchFuncInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WorkbenchFuncInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkbenchFuncInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `WorkbenchFuncInfo`
pub mod workbench_func_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:WorkbenchFuncInfo.PNECCABBLHB)
    pub enum PNECCABBLHB {
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.reforge_buff_func)
        ReforgeBuffFunc(super::super::WorkbenchReforgeBuffFuncInfo::WorkbenchReforgeBuffFuncInfo),
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.reforge_formula_func)
        ReforgeFormulaFunc(super::super::WorkbenchReforgeFormulaFuncInfo::WorkbenchReforgeFormulaFuncInfo),
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.enhance_buff_func)
        EnhanceBuffFunc(super::super::WorkbenchEnhanceBuffFuncInfo::WorkbenchEnhanceBuffFuncInfo),
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.compose_miracle_func)
        ComposeMiracleFunc(super::super::WorkbenchComposeMiracleFunc::WorkbenchComposeMiracleFunc),
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.reforge_hex_avatar_func)
        ReforgeHexAvatarFunc(super::super::WorkbenchReforgeHexAvatarFunc::WorkbenchReforgeHexAvatarFunc),
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.magic_item)
        MagicItem(super::super::KHCBGNLNPEL::KHCBGNLNPEL),
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.game_magic_unit)
        GameMagicUnit(super::super::KMHIBNGAFEO::KMHIBNGAFEO),
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.CEAJNLIOFHF)
        CEAJNLIOFHF(super::super::DMKPFGEBILH::DMKPFGEBILH),
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.PGPAAPOPDOC)
        PGPAAPOPDOC(super::super::LFGGPNGKBCH::LFGGPNGKBCH),
        // @@protoc_insertion_point(oneof_field:WorkbenchFuncInfo.PMKEHGBPCNG)
        PMKEHGBPCNG(super::super::DHMFCIDJBFD::DHMFCIDJBFD),
    }

    impl ::protobuf::Oneof for PNECCABBLHB {
    }

    impl ::protobuf::OneofFull for PNECCABBLHB {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::WorkbenchFuncInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("PNECCABBLHB").unwrap()).clone()
        }
    }

    impl PNECCABBLHB {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<PNECCABBLHB>("PNECCABBLHB")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17WorkbenchFuncInfo.proto\x1a\x11DHMFCIDJBFD.proto\x1a\x11DMKPFGEBIL\
    H.proto\x1a\x11KHCBGNLNPEL.proto\x1a\x11KMHIBNGAFEO.proto\x1a\x11LFGGPNG\
    KBCH.proto\x1a!WorkbenchComposeMiracleFunc.proto\x1a\"WorkbenchEnhanceBu\
    ffFuncInfo.proto\x1a\"WorkbenchReforgeBuffFuncInfo.proto\x1a%WorkbenchRe\
    forgeFormulaFuncInfo.proto\x1a#WorkbenchReforgeHexAvatarFunc.proto\"\xba\
    \x05\n\x11WorkbenchFuncInfo\x12K\n\x11reforge_buff_func\x18\x03\x20\x01(\
    \x0b2\x1d.WorkbenchReforgeBuffFuncInfoH\0R\x0freforgeBuffFunc\x12T\n\x14\
    reforge_formula_func\x18\x01\x20\x01(\x0b2\x20.WorkbenchReforgeFormulaFu\
    ncInfoH\0R\x12reforgeFormulaFunc\x12K\n\x11enhance_buff_func\x18\x0f\x20\
    \x01(\x0b2\x1d.WorkbenchEnhanceBuffFuncInfoH\0R\x0fenhanceBuffFunc\x12P\
    \n\x14compose_miracle_func\x18\x08\x20\x01(\x0b2\x1c.WorkbenchComposeMir\
    acleFuncH\0R\x12composeMiracleFunc\x12W\n\x17reforge_hex_avatar_func\x18\
    \x0b\x20\x01(\x0b2\x1e.WorkbenchReforgeHexAvatarFuncH\0R\x14reforgeHexAv\
    atarFunc\x12-\n\nmagic_item\x18\r\x20\x01(\x0b2\x0c.KHCBGNLNPELH\0R\tmag\
    icItem\x126\n\x0fgame_magic_unit\x18\x04\x20\x01(\x0b2\x0c.KMHIBNGAFEOH\
    \0R\rgameMagicUnit\x120\n\x0bCEAJNLIOFHF\x18\x05\x20\x01(\x0b2\x0c.DMKPF\
    GEBILHH\0R\x0bCEAJNLIOFHF\x120\n\x0bPGPAAPOPDOC\x18\x07\x20\x01(\x0b2\
    \x0c.LFGGPNGKBCHH\0R\x0bPGPAAPOPDOC\x120\n\x0bPMKEHGBPCNG\x18\t\x20\x01(\
    \x0b2\x0c.DHMFCIDJBFDH\0R\x0bPMKEHGBPCNGB\r\n\x0bPNECCABBLHBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::DHMFCIDJBFD::file_descriptor().clone());
            deps.push(super::DMKPFGEBILH::file_descriptor().clone());
            deps.push(super::KHCBGNLNPEL::file_descriptor().clone());
            deps.push(super::KMHIBNGAFEO::file_descriptor().clone());
            deps.push(super::LFGGPNGKBCH::file_descriptor().clone());
            deps.push(super::WorkbenchComposeMiracleFunc::file_descriptor().clone());
            deps.push(super::WorkbenchEnhanceBuffFuncInfo::file_descriptor().clone());
            deps.push(super::WorkbenchReforgeBuffFuncInfo::file_descriptor().clone());
            deps.push(super::WorkbenchReforgeFormulaFuncInfo::file_descriptor().clone());
            deps.push(super::WorkbenchReforgeHexAvatarFunc::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(WorkbenchFuncInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
