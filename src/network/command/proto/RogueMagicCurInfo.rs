// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueMagicCurInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueMagicCurInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueMagicCurInfo {
    // message fields
    // @@protoc_insertion_point(field:RogueMagicCurInfo.lineup)
    pub lineup: ::protobuf::MessageField<super::RogueTournLineupInfo::RogueTournLineupInfo>,
    // @@protoc_insertion_point(field:RogueMagicCurInfo.miracle_info)
    pub miracle_info: ::protobuf::MessageField<super::ChessRogueMiracleInfo::ChessRogueMiracleInfo>,
    // @@protoc_insertion_point(field:RogueMagicCurInfo.item_value)
    pub item_value: ::protobuf::MessageField<super::RogueGameItemValue::RogueGameItemValue>,
    // @@protoc_insertion_point(field:RogueMagicCurInfo.CACGEKAANKL)
    pub CACGEKAANKL: ::protobuf::MessageField<super::KLOHNFGBNPH::KLOHNFGBNPH>,
    // @@protoc_insertion_point(field:RogueMagicCurInfo.game_difficulty_info)
    pub game_difficulty_info: ::protobuf::MessageField<super::RogueMagicGameDifficultyInfo::RogueMagicGameDifficultyInfo>,
    // @@protoc_insertion_point(field:RogueMagicCurInfo.level)
    pub level: ::protobuf::MessageField<super::RogueMagicGameLevelInfo::RogueMagicGameLevelInfo>,
    // @@protoc_insertion_point(field:RogueMagicCurInfo.basic_info)
    pub basic_info: ::protobuf::MessageField<super::RogueTournCurAreaInfo::RogueTournCurAreaInfo>,
    // @@protoc_insertion_point(field:RogueMagicCurInfo.magic_item)
    pub magic_item: ::protobuf::MessageField<super::RogueMagicGameItemInfo::RogueMagicGameItemInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueMagicCurInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueMagicCurInfo {
    fn default() -> &'a RogueMagicCurInfo {
        <RogueMagicCurInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueMagicCurInfo {
    pub fn new() -> RogueMagicCurInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueTournLineupInfo::RogueTournLineupInfo>(
            "lineup",
            |m: &RogueMagicCurInfo| { &m.lineup },
            |m: &mut RogueMagicCurInfo| { &mut m.lineup },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ChessRogueMiracleInfo::ChessRogueMiracleInfo>(
            "miracle_info",
            |m: &RogueMagicCurInfo| { &m.miracle_info },
            |m: &mut RogueMagicCurInfo| { &mut m.miracle_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueGameItemValue::RogueGameItemValue>(
            "item_value",
            |m: &RogueMagicCurInfo| { &m.item_value },
            |m: &mut RogueMagicCurInfo| { &mut m.item_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KLOHNFGBNPH::KLOHNFGBNPH>(
            "CACGEKAANKL",
            |m: &RogueMagicCurInfo| { &m.CACGEKAANKL },
            |m: &mut RogueMagicCurInfo| { &mut m.CACGEKAANKL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueMagicGameDifficultyInfo::RogueMagicGameDifficultyInfo>(
            "game_difficulty_info",
            |m: &RogueMagicCurInfo| { &m.game_difficulty_info },
            |m: &mut RogueMagicCurInfo| { &mut m.game_difficulty_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueMagicGameLevelInfo::RogueMagicGameLevelInfo>(
            "level",
            |m: &RogueMagicCurInfo| { &m.level },
            |m: &mut RogueMagicCurInfo| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueTournCurAreaInfo::RogueTournCurAreaInfo>(
            "basic_info",
            |m: &RogueMagicCurInfo| { &m.basic_info },
            |m: &mut RogueMagicCurInfo| { &mut m.basic_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueMagicGameItemInfo::RogueMagicGameItemInfo>(
            "magic_item",
            |m: &RogueMagicCurInfo| { &m.magic_item },
            |m: &mut RogueMagicCurInfo| { &mut m.magic_item },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueMagicCurInfo>(
            "RogueMagicCurInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueMagicCurInfo {
    const NAME: &'static str = "RogueMagicCurInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lineup)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.miracle_info)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.item_value)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CACGEKAANKL)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.game_difficulty_info)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.level)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.basic_info)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.magic_item)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.lineup.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.miracle_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.item_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CACGEKAANKL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.game_difficulty_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.level.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.basic_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.magic_item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.lineup.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.miracle_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.item_value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.CACGEKAANKL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.game_difficulty_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.level.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.basic_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.magic_item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueMagicCurInfo {
        RogueMagicCurInfo::new()
    }

    fn clear(&mut self) {
        self.lineup.clear();
        self.miracle_info.clear();
        self.item_value.clear();
        self.CACGEKAANKL.clear();
        self.game_difficulty_info.clear();
        self.level.clear();
        self.basic_info.clear();
        self.magic_item.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueMagicCurInfo {
        static instance: RogueMagicCurInfo = RogueMagicCurInfo {
            lineup: ::protobuf::MessageField::none(),
            miracle_info: ::protobuf::MessageField::none(),
            item_value: ::protobuf::MessageField::none(),
            CACGEKAANKL: ::protobuf::MessageField::none(),
            game_difficulty_info: ::protobuf::MessageField::none(),
            level: ::protobuf::MessageField::none(),
            basic_info: ::protobuf::MessageField::none(),
            magic_item: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueMagicCurInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueMagicCurInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueMagicCurInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueMagicCurInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17RogueMagicCurInfo.proto\x1a\x1bChessRogueMiracleInfo.proto\x1a\x11\
    KLOHNFGBNPH.proto\x1a\x18RogueGameItemValue.proto\x1a\"RogueMagicGameDif\
    ficultyInfo.proto\x1a\x1cRogueMagicGameItemInfo.proto\x1a\x1dRogueMagicG\
    ameLevelInfo.proto\x1a\x1bRogueTournCurAreaInfo.proto\x1a\x1aRogueTournL\
    ineupInfo.proto\"\xd1\x03\n\x11RogueMagicCurInfo\x12-\n\x06lineup\x18\
    \x06\x20\x01(\x0b2\x15.RogueTournLineupInfoR\x06lineup\x129\n\x0cmiracle\
    _info\x18\x07\x20\x01(\x0b2\x16.ChessRogueMiracleInfoR\x0bmiracleInfo\
    \x122\n\nitem_value\x18\x0b\x20\x01(\x0b2\x13.RogueGameItemValueR\titemV\
    alue\x12.\n\x0bCACGEKAANKL\x18\x08\x20\x01(\x0b2\x0c.KLOHNFGBNPHR\x0bCAC\
    GEKAANKL\x12O\n\x14game_difficulty_info\x18\x04\x20\x01(\x0b2\x1d.RogueM\
    agicGameDifficultyInfoR\x12gameDifficultyInfo\x12.\n\x05level\x18\x02\
    \x20\x01(\x0b2\x18.RogueMagicGameLevelInfoR\x05level\x125\n\nbasic_info\
    \x18\x01\x20\x01(\x0b2\x16.RogueTournCurAreaInfoR\tbasicInfo\x126\n\nmag\
    ic_item\x18\t\x20\x01(\x0b2\x17.RogueMagicGameItemInfoR\tmagicItemb\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::ChessRogueMiracleInfo::file_descriptor().clone());
            deps.push(super::KLOHNFGBNPH::file_descriptor().clone());
            deps.push(super::RogueGameItemValue::file_descriptor().clone());
            deps.push(super::RogueMagicGameDifficultyInfo::file_descriptor().clone());
            deps.push(super::RogueMagicGameItemInfo::file_descriptor().clone());
            deps.push(super::RogueMagicGameLevelInfo::file_descriptor().clone());
            deps.push(super::RogueTournCurAreaInfo::file_descriptor().clone());
            deps.push(super::RogueTournLineupInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueMagicCurInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
