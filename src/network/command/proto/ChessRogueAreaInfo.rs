// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChessRogueAreaInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ChessRogueAreaInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChessRogueAreaInfo {
    // message fields
    // @@protoc_insertion_point(field:ChessRogueAreaInfo.allow_select_cell_id_list)
    pub allow_select_cell_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueAreaInfo.history_cell)
    pub history_cell: ::std::vec::Vec<super::ChessRogueHistoryCellInfo::ChessRogueHistoryCellInfo>,
    // @@protoc_insertion_point(field:ChessRogueAreaInfo.cell)
    pub cell: ::protobuf::MessageField<super::CellInfo::CellInfo>,
    // @@protoc_insertion_point(field:ChessRogueAreaInfo.CFEKAOLKHJG)
    pub CFEKAOLKHJG: ::protobuf::MessageField<super::KKCKGEOJFKE::KKCKGEOJFKE>,
    // @@protoc_insertion_point(field:ChessRogueAreaInfo.cur_board_id)
    pub cur_board_id: u32,
    // @@protoc_insertion_point(field:ChessRogueAreaInfo.cur_id)
    pub cur_id: u32,
    // @@protoc_insertion_point(field:ChessRogueAreaInfo.CCGHBBBOLMH)
    pub CCGHBBBOLMH: ::protobuf::EnumOrUnknown<super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:ChessRogueAreaInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChessRogueAreaInfo {
    fn default() -> &'a ChessRogueAreaInfo {
        <ChessRogueAreaInfo as ::protobuf::Message>::default_instance()
    }
}

impl ChessRogueAreaInfo {
    pub fn new() -> ChessRogueAreaInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allow_select_cell_id_list",
            |m: &ChessRogueAreaInfo| { &m.allow_select_cell_id_list },
            |m: &mut ChessRogueAreaInfo| { &mut m.allow_select_cell_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "history_cell",
            |m: &ChessRogueAreaInfo| { &m.history_cell },
            |m: &mut ChessRogueAreaInfo| { &mut m.history_cell },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CellInfo::CellInfo>(
            "cell",
            |m: &ChessRogueAreaInfo| { &m.cell },
            |m: &mut ChessRogueAreaInfo| { &mut m.cell },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KKCKGEOJFKE::KKCKGEOJFKE>(
            "CFEKAOLKHJG",
            |m: &ChessRogueAreaInfo| { &m.CFEKAOLKHJG },
            |m: &mut ChessRogueAreaInfo| { &mut m.CFEKAOLKHJG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_board_id",
            |m: &ChessRogueAreaInfo| { &m.cur_board_id },
            |m: &mut ChessRogueAreaInfo| { &mut m.cur_board_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_id",
            |m: &ChessRogueAreaInfo| { &m.cur_id },
            |m: &mut ChessRogueAreaInfo| { &mut m.cur_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CCGHBBBOLMH",
            |m: &ChessRogueAreaInfo| { &m.CCGHBBBOLMH },
            |m: &mut ChessRogueAreaInfo| { &mut m.CCGHBBBOLMH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChessRogueAreaInfo>(
            "ChessRogueAreaInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChessRogueAreaInfo {
    const NAME: &'static str = "ChessRogueAreaInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.allow_select_cell_id_list)?;
                },
                40 => {
                    self.allow_select_cell_id_list.push(is.read_uint32()?);
                },
                18 => {
                    self.history_cell.push(is.read_message()?);
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cell)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CFEKAOLKHJG)?;
                },
                64 => {
                    self.cur_board_id = is.read_uint32()?;
                },
                32 => {
                    self.cur_id = is.read_uint32()?;
                },
                104 => {
                    self.CCGHBBBOLMH = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(5, &self.allow_select_cell_id_list);
        for value in &self.history_cell {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.cell.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CFEKAOLKHJG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.cur_board_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.cur_board_id);
        }
        if self.cur_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.cur_id);
        }
        if self.CCGHBBBOLMH != ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE) {
            my_size += ::protobuf::rt::int32_size(13, self.CCGHBBBOLMH.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(5, &self.allow_select_cell_id_list)?;
        for v in &self.history_cell {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.cell.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.CFEKAOLKHJG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if self.cur_board_id != 0 {
            os.write_uint32(8, self.cur_board_id)?;
        }
        if self.cur_id != 0 {
            os.write_uint32(4, self.cur_id)?;
        }
        if self.CCGHBBBOLMH != ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE) {
            os.write_enum(13, ::protobuf::EnumOrUnknown::value(&self.CCGHBBBOLMH))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChessRogueAreaInfo {
        ChessRogueAreaInfo::new()
    }

    fn clear(&mut self) {
        self.allow_select_cell_id_list.clear();
        self.history_cell.clear();
        self.cell.clear();
        self.CFEKAOLKHJG.clear();
        self.cur_board_id = 0;
        self.cur_id = 0;
        self.CCGHBBBOLMH = ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChessRogueAreaInfo {
        static instance: ChessRogueAreaInfo = ChessRogueAreaInfo {
            allow_select_cell_id_list: ::std::vec::Vec::new(),
            history_cell: ::std::vec::Vec::new(),
            cell: ::protobuf::MessageField::none(),
            CFEKAOLKHJG: ::protobuf::MessageField::none(),
            cur_board_id: 0,
            cur_id: 0,
            CCGHBBBOLMH: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChessRogueAreaInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChessRogueAreaInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChessRogueAreaInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChessRogueAreaInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18ChessRogueAreaInfo.proto\x1a\x0eCellInfo.proto\x1a\x1fChessRogueBo\
    ardCellStatus.proto\x1a\x1fChessRogueHistoryCellInfo.proto\x1a\x11KKCKGE\
    OJFKE.proto\"\xd3\x02\n\x12ChessRogueAreaInfo\x128\n\x19allow_select_cel\
    l_id_list\x18\x05\x20\x03(\rR\x15allowSelectCellIdList\x12=\n\x0chistory\
    _cell\x18\x02\x20\x03(\x0b2\x1a.ChessRogueHistoryCellInfoR\x0bhistoryCel\
    l\x12\x1d\n\x04cell\x18\x01\x20\x01(\x0b2\t.CellInfoR\x04cell\x12.\n\x0b\
    CFEKAOLKHJG\x18\x0e\x20\x01(\x0b2\x0c.KKCKGEOJFKER\x0bCFEKAOLKHJG\x12\
    \x20\n\x0ccur_board_id\x18\x08\x20\x01(\rR\ncurBoardId\x12\x15\n\x06cur_\
    id\x18\x04\x20\x01(\rR\x05curId\x12<\n\x0bCCGHBBBOLMH\x18\r\x20\x01(\x0e\
    2\x1a.ChessRogueBoardCellStatusR\x0bCCGHBBBOLMHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::CellInfo::file_descriptor().clone());
            deps.push(super::ChessRogueBoardCellStatus::file_descriptor().clone());
            deps.push(super::ChessRogueHistoryCellInfo::file_descriptor().clone());
            deps.push(super::KKCKGEOJFKE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChessRogueAreaInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
