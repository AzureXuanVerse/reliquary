// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueMagicGameScepterInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueMagicGameScepterInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueMagicGameScepterInfo {
    // message fields
    // @@protoc_insertion_point(field:RogueMagicGameScepterInfo.EEPOJGNFLPA)
    pub EEPOJGNFLPA: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:RogueMagicGameScepterInfo.locked_magic_unit_list)
    pub locked_magic_unit_list: ::std::vec::Vec<super::RogueMagicGameUnit::RogueMagicGameUnit>,
    // @@protoc_insertion_point(field:RogueMagicGameScepterInfo.modifier_content)
    pub modifier_content: ::protobuf::MessageField<super::RogueMagicScepter::RogueMagicScepter>,
    // @@protoc_insertion_point(field:RogueMagicGameScepterInfo.scepter_dress_info)
    pub scepter_dress_info: ::std::vec::Vec<super::RogueMagicScepterDressInfo::RogueMagicScepterDressInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueMagicGameScepterInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueMagicGameScepterInfo {
    fn default() -> &'a RogueMagicGameScepterInfo {
        <RogueMagicGameScepterInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueMagicGameScepterInfo {
    pub fn new() -> RogueMagicGameScepterInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "EEPOJGNFLPA",
            |m: &RogueMagicGameScepterInfo| { &m.EEPOJGNFLPA },
            |m: &mut RogueMagicGameScepterInfo| { &mut m.EEPOJGNFLPA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "locked_magic_unit_list",
            |m: &RogueMagicGameScepterInfo| { &m.locked_magic_unit_list },
            |m: &mut RogueMagicGameScepterInfo| { &mut m.locked_magic_unit_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueMagicScepter::RogueMagicScepter>(
            "modifier_content",
            |m: &RogueMagicGameScepterInfo| { &m.modifier_content },
            |m: &mut RogueMagicGameScepterInfo| { &mut m.modifier_content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "scepter_dress_info",
            |m: &RogueMagicGameScepterInfo| { &m.scepter_dress_info },
            |m: &mut RogueMagicGameScepterInfo| { &mut m.scepter_dress_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueMagicGameScepterInfo>(
            "RogueMagicGameScepterInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueMagicGameScepterInfo {
    const NAME: &'static str = "RogueMagicGameScepterInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.EEPOJGNFLPA.insert(key, value);
                },
                58 => {
                    self.locked_magic_unit_list.push(is.read_message()?);
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.modifier_content)?;
                },
                34 => {
                    self.scepter_dress_info.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.EEPOJGNFLPA {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.locked_magic_unit_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.modifier_content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.scepter_dress_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.EEPOJGNFLPA {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        for v in &self.locked_magic_unit_list {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.modifier_content.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.scepter_dress_info {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueMagicGameScepterInfo {
        RogueMagicGameScepterInfo::new()
    }

    fn clear(&mut self) {
        self.EEPOJGNFLPA.clear();
        self.locked_magic_unit_list.clear();
        self.modifier_content.clear();
        self.scepter_dress_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueMagicGameScepterInfo {
        static instance: ::protobuf::rt::Lazy<RogueMagicGameScepterInfo> = ::protobuf::rt::Lazy::new();
        instance.get(RogueMagicGameScepterInfo::new)
    }
}

impl ::protobuf::MessageFull for RogueMagicGameScepterInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueMagicGameScepterInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueMagicGameScepterInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueMagicGameScepterInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fRogueMagicGameScepterInfo.proto\x1a\x18RogueMagicGameUnit.proto\
    \x1a\x17RogueMagicScepter.proto\x1a\x20RogueMagicScepterDressInfo.proto\
    \"\xfe\x02\n\x19RogueMagicGameScepterInfo\x12M\n\x0bEEPOJGNFLPA\x18\x02\
    \x20\x03(\x0b2+.RogueMagicGameScepterInfo.EEPOJGNFLPAEntryR\x0bEEPOJGNFL\
    PA\x12H\n\x16locked_magic_unit_list\x18\x07\x20\x03(\x0b2\x13.RogueMagic\
    GameUnitR\x13lockedMagicUnitList\x12=\n\x10modifier_content\x18\x01\x20\
    \x01(\x0b2\x12.RogueMagicScepterR\x0fmodifierContent\x12I\n\x12scepter_d\
    ress_info\x18\x04\x20\x03(\x0b2\x1b.RogueMagicScepterDressInfoR\x10scept\
    erDressInfo\x1a>\n\x10EEPOJGNFLPAEntry\x12\x10\n\x03key\x18\x01\x20\x01(\
    \rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::RogueMagicGameUnit::file_descriptor().clone());
            deps.push(super::RogueMagicScepter::file_descriptor().clone());
            deps.push(super::RogueMagicScepterDressInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueMagicGameScepterInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
