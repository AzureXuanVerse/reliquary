// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MonsterBattleInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:MonsterBattleInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MonsterBattleInfo {
    // message fields
    // @@protoc_insertion_point(field:MonsterBattleInfo.entity_id)
    pub entity_id: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.monster_id)
    pub monster_id: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.OAKILFGDACJ)
    pub OAKILFGDACJ: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.BFPAOANBJON)
    pub BFPAOANBJON: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.NKCMCMHAFAF)
    pub NKCMCMHAFAF: ::protobuf::MessageField<super::MonsterProperty::MonsterProperty>,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_turns)
    pub total_turns: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_damage)
    pub total_damage: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_heal)
    pub total_heal: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_damage_taken)
    pub total_damage_taken: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.AKGFCPFAOLP)
    pub AKGFCPFAOLP: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_hp_recover)
    pub total_hp_recover: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.stage_id)
    pub stage_id: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.battle_id)
    pub battle_id: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.JBCDLFJJJDG)
    pub JBCDLFJJJDG: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.attack_type_damage)
    pub attack_type_damage: ::std::vec::Vec<super::AttackDamageProperty::AttackDamageProperty>,
    // @@protoc_insertion_point(field:MonsterBattleInfo.skill_times)
    pub skill_times: ::std::vec::Vec<super::SkillUseProperty::SkillUseProperty>,
    // @@protoc_insertion_point(field:MonsterBattleInfo.stage_type)
    pub stage_type: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.ACOFIPPJKBI)
    pub ACOFIPPJKBI: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.delay_cumulate)
    pub delay_cumulate: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.FIEDKNKIEBH)
    pub FIEDKNKIEBH: ::protobuf::EnumOrUnknown<super::DeathSource::DeathSource>,
    // @@protoc_insertion_point(field:MonsterBattleInfo.wave)
    pub wave: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.JHAOGJJDBHL)
    pub JHAOGJJDBHL: i32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.phase)
    pub phase: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.DCMOHECBOLK)
    pub DCMOHECBOLK: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.JEDAHLGBIEM)
    pub JEDAHLGBIEM: ::protobuf::EnumOrUnknown<super::BattleTag::BattleTag>,
    // @@protoc_insertion_point(field:MonsterBattleInfo.skill_info)
    pub skill_info: ::std::vec::Vec<super::GAAGEHABINM::GAAGEHABINM>,
    // @@protoc_insertion_point(field:MonsterBattleInfo.LANFCLOLBOF)
    pub LANFCLOLBOF: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.KFGJBILJGDP)
    pub KFGJBILJGDP: ::std::vec::Vec<super::MonsterPhaseStt::MonsterPhaseStt>,
    // @@protoc_insertion_point(field:MonsterBattleInfo.FPKONIKLICA)
    pub FPKONIKLICA: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.JEEMGAEIFAE)
    pub JEEMGAEIFAE: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.HBOFDAJJJME)
    pub HBOFDAJJJME: ::protobuf::EnumOrUnknown<super::HEMBNDJAFDA::HEMBNDJAFDA>,
    // special fields
    // @@protoc_insertion_point(special_field:MonsterBattleInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MonsterBattleInfo {
    fn default() -> &'a MonsterBattleInfo {
        <MonsterBattleInfo as ::protobuf::Message>::default_instance()
    }
}

impl MonsterBattleInfo {
    pub fn new() -> MonsterBattleInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(31);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &MonsterBattleInfo| { &m.entity_id },
            |m: &mut MonsterBattleInfo| { &mut m.entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_id",
            |m: &MonsterBattleInfo| { &m.monster_id },
            |m: &mut MonsterBattleInfo| { &mut m.monster_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OAKILFGDACJ",
            |m: &MonsterBattleInfo| { &m.OAKILFGDACJ },
            |m: &mut MonsterBattleInfo| { &mut m.OAKILFGDACJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BFPAOANBJON",
            |m: &MonsterBattleInfo| { &m.BFPAOANBJON },
            |m: &mut MonsterBattleInfo| { &mut m.BFPAOANBJON },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MonsterProperty::MonsterProperty>(
            "NKCMCMHAFAF",
            |m: &MonsterBattleInfo| { &m.NKCMCMHAFAF },
            |m: &mut MonsterBattleInfo| { &mut m.NKCMCMHAFAF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_turns",
            |m: &MonsterBattleInfo| { &m.total_turns },
            |m: &mut MonsterBattleInfo| { &mut m.total_turns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_damage",
            |m: &MonsterBattleInfo| { &m.total_damage },
            |m: &mut MonsterBattleInfo| { &mut m.total_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_heal",
            |m: &MonsterBattleInfo| { &m.total_heal },
            |m: &mut MonsterBattleInfo| { &mut m.total_heal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_damage_taken",
            |m: &MonsterBattleInfo| { &m.total_damage_taken },
            |m: &mut MonsterBattleInfo| { &mut m.total_damage_taken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AKGFCPFAOLP",
            |m: &MonsterBattleInfo| { &m.AKGFCPFAOLP },
            |m: &mut MonsterBattleInfo| { &mut m.AKGFCPFAOLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_hp_recover",
            |m: &MonsterBattleInfo| { &m.total_hp_recover },
            |m: &mut MonsterBattleInfo| { &mut m.total_hp_recover },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stage_id",
            |m: &MonsterBattleInfo| { &m.stage_id },
            |m: &mut MonsterBattleInfo| { &mut m.stage_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "battle_id",
            |m: &MonsterBattleInfo| { &m.battle_id },
            |m: &mut MonsterBattleInfo| { &mut m.battle_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JBCDLFJJJDG",
            |m: &MonsterBattleInfo| { &m.JBCDLFJJJDG },
            |m: &mut MonsterBattleInfo| { &mut m.JBCDLFJJJDG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attack_type_damage",
            |m: &MonsterBattleInfo| { &m.attack_type_damage },
            |m: &mut MonsterBattleInfo| { &mut m.attack_type_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "skill_times",
            |m: &MonsterBattleInfo| { &m.skill_times },
            |m: &mut MonsterBattleInfo| { &mut m.skill_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stage_type",
            |m: &MonsterBattleInfo| { &m.stage_type },
            |m: &mut MonsterBattleInfo| { &mut m.stage_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACOFIPPJKBI",
            |m: &MonsterBattleInfo| { &m.ACOFIPPJKBI },
            |m: &mut MonsterBattleInfo| { &mut m.ACOFIPPJKBI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delay_cumulate",
            |m: &MonsterBattleInfo| { &m.delay_cumulate },
            |m: &mut MonsterBattleInfo| { &mut m.delay_cumulate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FIEDKNKIEBH",
            |m: &MonsterBattleInfo| { &m.FIEDKNKIEBH },
            |m: &mut MonsterBattleInfo| { &mut m.FIEDKNKIEBH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wave",
            |m: &MonsterBattleInfo| { &m.wave },
            |m: &mut MonsterBattleInfo| { &mut m.wave },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JHAOGJJDBHL",
            |m: &MonsterBattleInfo| { &m.JHAOGJJDBHL },
            |m: &mut MonsterBattleInfo| { &mut m.JHAOGJJDBHL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "phase",
            |m: &MonsterBattleInfo| { &m.phase },
            |m: &mut MonsterBattleInfo| { &mut m.phase },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DCMOHECBOLK",
            |m: &MonsterBattleInfo| { &m.DCMOHECBOLK },
            |m: &mut MonsterBattleInfo| { &mut m.DCMOHECBOLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JEDAHLGBIEM",
            |m: &MonsterBattleInfo| { &m.JEDAHLGBIEM },
            |m: &mut MonsterBattleInfo| { &mut m.JEDAHLGBIEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "skill_info",
            |m: &MonsterBattleInfo| { &m.skill_info },
            |m: &mut MonsterBattleInfo| { &mut m.skill_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LANFCLOLBOF",
            |m: &MonsterBattleInfo| { &m.LANFCLOLBOF },
            |m: &mut MonsterBattleInfo| { &mut m.LANFCLOLBOF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KFGJBILJGDP",
            |m: &MonsterBattleInfo| { &m.KFGJBILJGDP },
            |m: &mut MonsterBattleInfo| { &mut m.KFGJBILJGDP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FPKONIKLICA",
            |m: &MonsterBattleInfo| { &m.FPKONIKLICA },
            |m: &mut MonsterBattleInfo| { &mut m.FPKONIKLICA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JEEMGAEIFAE",
            |m: &MonsterBattleInfo| { &m.JEEMGAEIFAE },
            |m: &mut MonsterBattleInfo| { &mut m.JEEMGAEIFAE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HBOFDAJJJME",
            |m: &MonsterBattleInfo| { &m.HBOFDAJJJME },
            |m: &mut MonsterBattleInfo| { &mut m.HBOFDAJJJME },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MonsterBattleInfo>(
            "MonsterBattleInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MonsterBattleInfo {
    const NAME: &'static str = "MonsterBattleInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.entity_id = is.read_uint32()?;
                },
                16 => {
                    self.monster_id = is.read_uint32()?;
                },
                24 => {
                    self.OAKILFGDACJ = is.read_uint32()?;
                },
                32 => {
                    self.BFPAOANBJON = is.read_uint32()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NKCMCMHAFAF)?;
                },
                48 => {
                    self.total_turns = is.read_uint32()?;
                },
                57 => {
                    self.total_damage = is.read_double()?;
                },
                65 => {
                    self.total_heal = is.read_double()?;
                },
                73 => {
                    self.total_damage_taken = is.read_double()?;
                },
                81 => {
                    self.AKGFCPFAOLP = is.read_double()?;
                },
                89 => {
                    self.total_hp_recover = is.read_double()?;
                },
                96 => {
                    self.stage_id = is.read_uint32()?;
                },
                104 => {
                    self.battle_id = is.read_uint32()?;
                },
                112 => {
                    self.JBCDLFJJJDG = is.read_uint32()?;
                },
                122 => {
                    self.attack_type_damage.push(is.read_message()?);
                },
                130 => {
                    self.skill_times.push(is.read_message()?);
                },
                136 => {
                    self.stage_type = is.read_uint32()?;
                },
                145 => {
                    self.ACOFIPPJKBI = is.read_double()?;
                },
                153 => {
                    self.delay_cumulate = is.read_double()?;
                },
                160 => {
                    self.FIEDKNKIEBH = is.read_enum_or_unknown()?;
                },
                168 => {
                    self.wave = is.read_uint32()?;
                },
                176 => {
                    self.JHAOGJJDBHL = is.read_int32()?;
                },
                184 => {
                    self.phase = is.read_uint32()?;
                },
                192 => {
                    self.DCMOHECBOLK = is.read_uint32()?;
                },
                200 => {
                    self.JEDAHLGBIEM = is.read_enum_or_unknown()?;
                },
                210 => {
                    self.skill_info.push(is.read_message()?);
                },
                216 => {
                    self.LANFCLOLBOF = is.read_uint32()?;
                },
                226 => {
                    self.KFGJBILJGDP.push(is.read_message()?);
                },
                232 => {
                    self.FPKONIKLICA = is.read_uint32()?;
                },
                240 => {
                    self.JEEMGAEIFAE = is.read_uint32()?;
                },
                248 => {
                    self.HBOFDAJJJME = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.entity_id);
        }
        if self.monster_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.monster_id);
        }
        if self.OAKILFGDACJ != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.OAKILFGDACJ);
        }
        if self.BFPAOANBJON != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.BFPAOANBJON);
        }
        if let Some(v) = self.NKCMCMHAFAF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.total_turns != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.total_turns);
        }
        if self.total_damage != 0. {
            my_size += 1 + 8;
        }
        if self.total_heal != 0. {
            my_size += 1 + 8;
        }
        if self.total_damage_taken != 0. {
            my_size += 1 + 8;
        }
        if self.AKGFCPFAOLP != 0. {
            my_size += 1 + 8;
        }
        if self.total_hp_recover != 0. {
            my_size += 1 + 8;
        }
        if self.stage_id != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.stage_id);
        }
        if self.battle_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.battle_id);
        }
        if self.JBCDLFJJJDG != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.JBCDLFJJJDG);
        }
        for value in &self.attack_type_damage {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.skill_times {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.stage_type != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.stage_type);
        }
        if self.ACOFIPPJKBI != 0. {
            my_size += 2 + 8;
        }
        if self.delay_cumulate != 0. {
            my_size += 2 + 8;
        }
        if self.FIEDKNKIEBH != ::protobuf::EnumOrUnknown::new(super::DeathSource::DeathSource::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(20, self.FIEDKNKIEBH.value());
        }
        if self.wave != 0 {
            my_size += ::protobuf::rt::uint32_size(21, self.wave);
        }
        if self.JHAOGJJDBHL != 0 {
            my_size += ::protobuf::rt::int32_size(22, self.JHAOGJJDBHL);
        }
        if self.phase != 0 {
            my_size += ::protobuf::rt::uint32_size(23, self.phase);
        }
        if self.DCMOHECBOLK != 0 {
            my_size += ::protobuf::rt::uint32_size(24, self.DCMOHECBOLK);
        }
        if self.JEDAHLGBIEM != ::protobuf::EnumOrUnknown::new(super::BattleTag::BattleTag::TAG_NONE) {
            my_size += ::protobuf::rt::int32_size(25, self.JEDAHLGBIEM.value());
        }
        for value in &self.skill_info {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.LANFCLOLBOF != 0 {
            my_size += ::protobuf::rt::uint32_size(27, self.LANFCLOLBOF);
        }
        for value in &self.KFGJBILJGDP {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.FPKONIKLICA != 0 {
            my_size += ::protobuf::rt::uint32_size(29, self.FPKONIKLICA);
        }
        if self.JEEMGAEIFAE != 0 {
            my_size += ::protobuf::rt::uint32_size(30, self.JEEMGAEIFAE);
        }
        if self.HBOFDAJJJME != ::protobuf::EnumOrUnknown::new(super::HEMBNDJAFDA::HEMBNDJAFDA::NORMAL_CREATE) {
            my_size += ::protobuf::rt::int32_size(31, self.HBOFDAJJJME.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.entity_id != 0 {
            os.write_uint32(1, self.entity_id)?;
        }
        if self.monster_id != 0 {
            os.write_uint32(2, self.monster_id)?;
        }
        if self.OAKILFGDACJ != 0 {
            os.write_uint32(3, self.OAKILFGDACJ)?;
        }
        if self.BFPAOANBJON != 0 {
            os.write_uint32(4, self.BFPAOANBJON)?;
        }
        if let Some(v) = self.NKCMCMHAFAF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.total_turns != 0 {
            os.write_uint32(6, self.total_turns)?;
        }
        if self.total_damage != 0. {
            os.write_double(7, self.total_damage)?;
        }
        if self.total_heal != 0. {
            os.write_double(8, self.total_heal)?;
        }
        if self.total_damage_taken != 0. {
            os.write_double(9, self.total_damage_taken)?;
        }
        if self.AKGFCPFAOLP != 0. {
            os.write_double(10, self.AKGFCPFAOLP)?;
        }
        if self.total_hp_recover != 0. {
            os.write_double(11, self.total_hp_recover)?;
        }
        if self.stage_id != 0 {
            os.write_uint32(12, self.stage_id)?;
        }
        if self.battle_id != 0 {
            os.write_uint32(13, self.battle_id)?;
        }
        if self.JBCDLFJJJDG != 0 {
            os.write_uint32(14, self.JBCDLFJJJDG)?;
        }
        for v in &self.attack_type_damage {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        for v in &self.skill_times {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        };
        if self.stage_type != 0 {
            os.write_uint32(17, self.stage_type)?;
        }
        if self.ACOFIPPJKBI != 0. {
            os.write_double(18, self.ACOFIPPJKBI)?;
        }
        if self.delay_cumulate != 0. {
            os.write_double(19, self.delay_cumulate)?;
        }
        if self.FIEDKNKIEBH != ::protobuf::EnumOrUnknown::new(super::DeathSource::DeathSource::UNKNOWN) {
            os.write_enum(20, ::protobuf::EnumOrUnknown::value(&self.FIEDKNKIEBH))?;
        }
        if self.wave != 0 {
            os.write_uint32(21, self.wave)?;
        }
        if self.JHAOGJJDBHL != 0 {
            os.write_int32(22, self.JHAOGJJDBHL)?;
        }
        if self.phase != 0 {
            os.write_uint32(23, self.phase)?;
        }
        if self.DCMOHECBOLK != 0 {
            os.write_uint32(24, self.DCMOHECBOLK)?;
        }
        if self.JEDAHLGBIEM != ::protobuf::EnumOrUnknown::new(super::BattleTag::BattleTag::TAG_NONE) {
            os.write_enum(25, ::protobuf::EnumOrUnknown::value(&self.JEDAHLGBIEM))?;
        }
        for v in &self.skill_info {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        };
        if self.LANFCLOLBOF != 0 {
            os.write_uint32(27, self.LANFCLOLBOF)?;
        }
        for v in &self.KFGJBILJGDP {
            ::protobuf::rt::write_message_field_with_cached_size(28, v, os)?;
        };
        if self.FPKONIKLICA != 0 {
            os.write_uint32(29, self.FPKONIKLICA)?;
        }
        if self.JEEMGAEIFAE != 0 {
            os.write_uint32(30, self.JEEMGAEIFAE)?;
        }
        if self.HBOFDAJJJME != ::protobuf::EnumOrUnknown::new(super::HEMBNDJAFDA::HEMBNDJAFDA::NORMAL_CREATE) {
            os.write_enum(31, ::protobuf::EnumOrUnknown::value(&self.HBOFDAJJJME))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MonsterBattleInfo {
        MonsterBattleInfo::new()
    }

    fn clear(&mut self) {
        self.entity_id = 0;
        self.monster_id = 0;
        self.OAKILFGDACJ = 0;
        self.BFPAOANBJON = 0;
        self.NKCMCMHAFAF.clear();
        self.total_turns = 0;
        self.total_damage = 0.;
        self.total_heal = 0.;
        self.total_damage_taken = 0.;
        self.AKGFCPFAOLP = 0.;
        self.total_hp_recover = 0.;
        self.stage_id = 0;
        self.battle_id = 0;
        self.JBCDLFJJJDG = 0;
        self.attack_type_damage.clear();
        self.skill_times.clear();
        self.stage_type = 0;
        self.ACOFIPPJKBI = 0.;
        self.delay_cumulate = 0.;
        self.FIEDKNKIEBH = ::protobuf::EnumOrUnknown::new(super::DeathSource::DeathSource::UNKNOWN);
        self.wave = 0;
        self.JHAOGJJDBHL = 0;
        self.phase = 0;
        self.DCMOHECBOLK = 0;
        self.JEDAHLGBIEM = ::protobuf::EnumOrUnknown::new(super::BattleTag::BattleTag::TAG_NONE);
        self.skill_info.clear();
        self.LANFCLOLBOF = 0;
        self.KFGJBILJGDP.clear();
        self.FPKONIKLICA = 0;
        self.JEEMGAEIFAE = 0;
        self.HBOFDAJJJME = ::protobuf::EnumOrUnknown::new(super::HEMBNDJAFDA::HEMBNDJAFDA::NORMAL_CREATE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MonsterBattleInfo {
        static instance: MonsterBattleInfo = MonsterBattleInfo {
            entity_id: 0,
            monster_id: 0,
            OAKILFGDACJ: 0,
            BFPAOANBJON: 0,
            NKCMCMHAFAF: ::protobuf::MessageField::none(),
            total_turns: 0,
            total_damage: 0.,
            total_heal: 0.,
            total_damage_taken: 0.,
            AKGFCPFAOLP: 0.,
            total_hp_recover: 0.,
            stage_id: 0,
            battle_id: 0,
            JBCDLFJJJDG: 0,
            attack_type_damage: ::std::vec::Vec::new(),
            skill_times: ::std::vec::Vec::new(),
            stage_type: 0,
            ACOFIPPJKBI: 0.,
            delay_cumulate: 0.,
            FIEDKNKIEBH: ::protobuf::EnumOrUnknown::from_i32(0),
            wave: 0,
            JHAOGJJDBHL: 0,
            phase: 0,
            DCMOHECBOLK: 0,
            JEDAHLGBIEM: ::protobuf::EnumOrUnknown::from_i32(0),
            skill_info: ::std::vec::Vec::new(),
            LANFCLOLBOF: 0,
            KFGJBILJGDP: ::std::vec::Vec::new(),
            FPKONIKLICA: 0,
            JEEMGAEIFAE: 0,
            HBOFDAJJJME: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MonsterBattleInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MonsterBattleInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MonsterBattleInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonsterBattleInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17MonsterBattleInfo.proto\x1a\x1aAttackDamageProperty.proto\x1a\x0fB\
    attleTag.proto\x1a\x11DeathSource.proto\x1a\x11GAAGEHABINM.proto\x1a\x11\
    HEMBNDJAFDA.proto\x1a\x15MonsterPhaseStt.proto\x1a\x15MonsterProperty.pr\
    oto\x1a\x16SkillUseProperty.proto\"\xa2\t\n\x11MonsterBattleInfo\x12\x1b\
    \n\tentity_id\x18\x01\x20\x01(\rR\x08entityId\x12\x1d\n\nmonster_id\x18\
    \x02\x20\x01(\rR\tmonsterId\x12\x20\n\x0bOAKILFGDACJ\x18\x03\x20\x01(\rR\
    \x0bOAKILFGDACJ\x12\x20\n\x0bBFPAOANBJON\x18\x04\x20\x01(\rR\x0bBFPAOANB\
    JON\x122\n\x0bNKCMCMHAFAF\x18\x05\x20\x01(\x0b2\x10.MonsterPropertyR\x0b\
    NKCMCMHAFAF\x12\x1f\n\x0btotal_turns\x18\x06\x20\x01(\rR\ntotalTurns\x12\
    !\n\x0ctotal_damage\x18\x07\x20\x01(\x01R\x0btotalDamage\x12\x1d\n\ntota\
    l_heal\x18\x08\x20\x01(\x01R\ttotalHeal\x12,\n\x12total_damage_taken\x18\
    \t\x20\x01(\x01R\x10totalDamageTaken\x12\x20\n\x0bAKGFCPFAOLP\x18\n\x20\
    \x01(\x01R\x0bAKGFCPFAOLP\x12(\n\x10total_hp_recover\x18\x0b\x20\x01(\
    \x01R\x0etotalHpRecover\x12\x19\n\x08stage_id\x18\x0c\x20\x01(\rR\x07sta\
    geId\x12\x1b\n\tbattle_id\x18\r\x20\x01(\rR\x08battleId\x12\x20\n\x0bJBC\
    DLFJJJDG\x18\x0e\x20\x01(\rR\x0bJBCDLFJJJDG\x12C\n\x12attack_type_damage\
    \x18\x0f\x20\x03(\x0b2\x15.AttackDamagePropertyR\x10attackTypeDamage\x12\
    2\n\x0bskill_times\x18\x10\x20\x03(\x0b2\x11.SkillUsePropertyR\nskillTim\
    es\x12\x1d\n\nstage_type\x18\x11\x20\x01(\rR\tstageType\x12\x20\n\x0bACO\
    FIPPJKBI\x18\x12\x20\x01(\x01R\x0bACOFIPPJKBI\x12%\n\x0edelay_cumulate\
    \x18\x13\x20\x01(\x01R\rdelayCumulate\x12.\n\x0bFIEDKNKIEBH\x18\x14\x20\
    \x01(\x0e2\x0c.DeathSourceR\x0bFIEDKNKIEBH\x12\x12\n\x04wave\x18\x15\x20\
    \x01(\rR\x04wave\x12\x20\n\x0bJHAOGJJDBHL\x18\x16\x20\x01(\x05R\x0bJHAOG\
    JJDBHL\x12\x14\n\x05phase\x18\x17\x20\x01(\rR\x05phase\x12\x20\n\x0bDCMO\
    HECBOLK\x18\x18\x20\x01(\rR\x0bDCMOHECBOLK\x12,\n\x0bJEDAHLGBIEM\x18\x19\
    \x20\x01(\x0e2\n.BattleTagR\x0bJEDAHLGBIEM\x12+\n\nskill_info\x18\x1a\
    \x20\x03(\x0b2\x0c.GAAGEHABINMR\tskillInfo\x12\x20\n\x0bLANFCLOLBOF\x18\
    \x1b\x20\x01(\rR\x0bLANFCLOLBOF\x122\n\x0bKFGJBILJGDP\x18\x1c\x20\x03(\
    \x0b2\x10.MonsterPhaseSttR\x0bKFGJBILJGDP\x12\x20\n\x0bFPKONIKLICA\x18\
    \x1d\x20\x01(\rR\x0bFPKONIKLICA\x12\x20\n\x0bJEEMGAEIFAE\x18\x1e\x20\x01\
    (\rR\x0bJEEMGAEIFAE\x12.\n\x0bHBOFDAJJJME\x18\x1f\x20\x01(\x0e2\x0c.HEMB\
    NDJAFDAR\x0bHBOFDAJJJMEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::AttackDamageProperty::file_descriptor().clone());
            deps.push(super::BattleTag::file_descriptor().clone());
            deps.push(super::DeathSource::file_descriptor().clone());
            deps.push(super::GAAGEHABINM::file_descriptor().clone());
            deps.push(super::HEMBNDJAFDA::file_descriptor().clone());
            deps.push(super::MonsterPhaseStt::file_descriptor().clone());
            deps.push(super::MonsterProperty::file_descriptor().clone());
            deps.push(super::SkillUseProperty::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MonsterBattleInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
