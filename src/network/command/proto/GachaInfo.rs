// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GachaInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:GachaInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GachaInfo {
    // message fields
    // @@protoc_insertion_point(field:GachaInfo.MLGILEHMPGB)
    pub MLGILEHMPGB: ::std::string::String,
    // @@protoc_insertion_point(field:GachaInfo.end_time)
    pub end_time: i64,
    // @@protoc_insertion_point(field:GachaInfo.begin_time)
    pub begin_time: i64,
    // @@protoc_insertion_point(field:GachaInfo.BOEFFBDOABD)
    pub BOEFFBDOABD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GachaInfo.gacha_ceiling)
    pub gacha_ceiling: ::protobuf::MessageField<super::GachaCeiling::GachaCeiling>,
    // @@protoc_insertion_point(field:GachaInfo.PMNFAINFPAL)
    pub PMNFAINFPAL: ::std::string::String,
    // @@protoc_insertion_point(field:GachaInfo.gacha_id)
    pub gacha_id: u32,
    // @@protoc_insertion_point(field:GachaInfo.AAKCKHANBHI)
    pub AAKCKHANBHI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GachaInfo.GDPOEEJNMHN)
    pub GDPOEEJNMHN: ::protobuf::MessageField<super::LOPDJAHFPHN::LOPDJAHFPHN>,
    // @@protoc_insertion_point(field:GachaInfo.KMNJNMJFGBG)
    pub KMNJNMJFGBG: u32,
    // @@protoc_insertion_point(field:GachaInfo.GDIFAAHIFBH)
    pub GDIFAAHIFBH: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GachaInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GachaInfo {
    fn default() -> &'a GachaInfo {
        <GachaInfo as ::protobuf::Message>::default_instance()
    }
}

impl GachaInfo {
    pub fn new() -> GachaInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MLGILEHMPGB",
            |m: &GachaInfo| { &m.MLGILEHMPGB },
            |m: &mut GachaInfo| { &mut m.MLGILEHMPGB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &GachaInfo| { &m.end_time },
            |m: &mut GachaInfo| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "begin_time",
            |m: &GachaInfo| { &m.begin_time },
            |m: &mut GachaInfo| { &mut m.begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BOEFFBDOABD",
            |m: &GachaInfo| { &m.BOEFFBDOABD },
            |m: &mut GachaInfo| { &mut m.BOEFFBDOABD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GachaCeiling::GachaCeiling>(
            "gacha_ceiling",
            |m: &GachaInfo| { &m.gacha_ceiling },
            |m: &mut GachaInfo| { &mut m.gacha_ceiling },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PMNFAINFPAL",
            |m: &GachaInfo| { &m.PMNFAINFPAL },
            |m: &mut GachaInfo| { &mut m.PMNFAINFPAL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_id",
            |m: &GachaInfo| { &m.gacha_id },
            |m: &mut GachaInfo| { &mut m.gacha_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AAKCKHANBHI",
            |m: &GachaInfo| { &m.AAKCKHANBHI },
            |m: &mut GachaInfo| { &mut m.AAKCKHANBHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LOPDJAHFPHN::LOPDJAHFPHN>(
            "GDPOEEJNMHN",
            |m: &GachaInfo| { &m.GDPOEEJNMHN },
            |m: &mut GachaInfo| { &mut m.GDPOEEJNMHN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KMNJNMJFGBG",
            |m: &GachaInfo| { &m.KMNJNMJFGBG },
            |m: &mut GachaInfo| { &mut m.KMNJNMJFGBG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GDIFAAHIFBH",
            |m: &GachaInfo| { &m.GDIFAAHIFBH },
            |m: &mut GachaInfo| { &mut m.GDIFAAHIFBH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GachaInfo>(
            "GachaInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GachaInfo {
    const NAME: &'static str = "GachaInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.MLGILEHMPGB = is.read_string()?;
                },
                16 => {
                    self.end_time = is.read_int64()?;
                },
                96 => {
                    self.begin_time = is.read_int64()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.BOEFFBDOABD)?;
                },
                32 => {
                    self.BOEFFBDOABD.push(is.read_uint32()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gacha_ceiling)?;
                },
                74 => {
                    self.PMNFAINFPAL = is.read_string()?;
                },
                112 => {
                    self.gacha_id = is.read_uint32()?;
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.AAKCKHANBHI)?;
                },
                120 => {
                    self.AAKCKHANBHI.push(is.read_uint32()?);
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GDPOEEJNMHN)?;
                },
                104 => {
                    self.KMNJNMJFGBG = is.read_uint32()?;
                },
                88 => {
                    self.GDIFAAHIFBH = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.MLGILEHMPGB.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.MLGILEHMPGB);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.end_time);
        }
        if self.begin_time != 0 {
            my_size += ::protobuf::rt::int64_size(12, self.begin_time);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(4, &self.BOEFFBDOABD);
        if let Some(v) = self.gacha_ceiling.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.PMNFAINFPAL.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.PMNFAINFPAL);
        }
        if self.gacha_id != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.gacha_id);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(15, &self.AAKCKHANBHI);
        if let Some(v) = self.GDPOEEJNMHN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.KMNJNMJFGBG != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.KMNJNMJFGBG);
        }
        if self.GDIFAAHIFBH != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.GDIFAAHIFBH);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.MLGILEHMPGB.is_empty() {
            os.write_string(3, &self.MLGILEHMPGB)?;
        }
        if self.end_time != 0 {
            os.write_int64(2, self.end_time)?;
        }
        if self.begin_time != 0 {
            os.write_int64(12, self.begin_time)?;
        }
        os.write_repeated_packed_uint32(4, &self.BOEFFBDOABD)?;
        if let Some(v) = self.gacha_ceiling.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if !self.PMNFAINFPAL.is_empty() {
            os.write_string(9, &self.PMNFAINFPAL)?;
        }
        if self.gacha_id != 0 {
            os.write_uint32(14, self.gacha_id)?;
        }
        os.write_repeated_packed_uint32(15, &self.AAKCKHANBHI)?;
        if let Some(v) = self.GDPOEEJNMHN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.KMNJNMJFGBG != 0 {
            os.write_uint32(13, self.KMNJNMJFGBG)?;
        }
        if self.GDIFAAHIFBH != 0 {
            os.write_uint32(11, self.GDIFAAHIFBH)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GachaInfo {
        GachaInfo::new()
    }

    fn clear(&mut self) {
        self.MLGILEHMPGB.clear();
        self.end_time = 0;
        self.begin_time = 0;
        self.BOEFFBDOABD.clear();
        self.gacha_ceiling.clear();
        self.PMNFAINFPAL.clear();
        self.gacha_id = 0;
        self.AAKCKHANBHI.clear();
        self.GDPOEEJNMHN.clear();
        self.KMNJNMJFGBG = 0;
        self.GDIFAAHIFBH = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GachaInfo {
        static instance: GachaInfo = GachaInfo {
            MLGILEHMPGB: ::std::string::String::new(),
            end_time: 0,
            begin_time: 0,
            BOEFFBDOABD: ::std::vec::Vec::new(),
            gacha_ceiling: ::protobuf::MessageField::none(),
            PMNFAINFPAL: ::std::string::String::new(),
            gacha_id: 0,
            AAKCKHANBHI: ::std::vec::Vec::new(),
            GDPOEEJNMHN: ::protobuf::MessageField::none(),
            KMNJNMJFGBG: 0,
            GDIFAAHIFBH: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GachaInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GachaInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GachaInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GachaInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fGachaInfo.proto\x1a\x12GachaCeiling.proto\x1a\x11LOPDJAHFPHN.proto\
    \"\x90\x03\n\tGachaInfo\x12\x20\n\x0bMLGILEHMPGB\x18\x03\x20\x01(\tR\x0b\
    MLGILEHMPGB\x12\x19\n\x08end_time\x18\x02\x20\x01(\x03R\x07endTime\x12\
    \x1d\n\nbegin_time\x18\x0c\x20\x01(\x03R\tbeginTime\x12\x20\n\x0bBOEFFBD\
    OABD\x18\x04\x20\x03(\rR\x0bBOEFFBDOABD\x122\n\rgacha_ceiling\x18\x07\
    \x20\x01(\x0b2\r.GachaCeilingR\x0cgachaCeiling\x12\x20\n\x0bPMNFAINFPAL\
    \x18\t\x20\x01(\tR\x0bPMNFAINFPAL\x12\x19\n\x08gacha_id\x18\x0e\x20\x01(\
    \rR\x07gachaId\x12\x20\n\x0bAAKCKHANBHI\x18\x0f\x20\x03(\rR\x0bAAKCKHANB\
    HI\x12.\n\x0bGDPOEEJNMHN\x18\x01\x20\x01(\x0b2\x0c.LOPDJAHFPHNR\x0bGDPOE\
    EJNMHN\x12\x20\n\x0bKMNJNMJFGBG\x18\r\x20\x01(\rR\x0bKMNJNMJFGBG\x12\x20\
    \n\x0bGDIFAAHIFBH\x18\x0b\x20\x01(\rR\x0bGDIFAAHIFBHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::GachaCeiling::file_descriptor().clone());
            deps.push(super::LOPDJAHFPHN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GachaInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
