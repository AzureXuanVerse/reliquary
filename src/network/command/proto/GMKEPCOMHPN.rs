// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GMKEPCOMHPN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:GMKEPCOMHPN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GMKEPCOMHPN {
    // message fields
    // @@protoc_insertion_point(field:GMKEPCOMHPN.type)
    pub type_: ::protobuf::EnumOrUnknown<super::AetherdivideSpiritLineupType::AetherdivideSpiritLineupType>,
    // @@protoc_insertion_point(field:GMKEPCOMHPN.id)
    pub id: u32,
    // @@protoc_insertion_point(field:GMKEPCOMHPN.sp_bar)
    pub sp_bar: ::protobuf::MessageField<super::SpBarInfo::SpBarInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:GMKEPCOMHPN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GMKEPCOMHPN {
    fn default() -> &'a GMKEPCOMHPN {
        <GMKEPCOMHPN as ::protobuf::Message>::default_instance()
    }
}

impl GMKEPCOMHPN {
    pub fn new() -> GMKEPCOMHPN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &GMKEPCOMHPN| { &m.type_ },
            |m: &mut GMKEPCOMHPN| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GMKEPCOMHPN| { &m.id },
            |m: &mut GMKEPCOMHPN| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SpBarInfo::SpBarInfo>(
            "sp_bar",
            |m: &GMKEPCOMHPN| { &m.sp_bar },
            |m: &mut GMKEPCOMHPN| { &mut m.sp_bar },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GMKEPCOMHPN>(
            "GMKEPCOMHPN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GMKEPCOMHPN {
    const NAME: &'static str = "GMKEPCOMHPN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.id = is.read_uint32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sp_bar)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(super::AetherdivideSpiritLineupType::AetherdivideSpiritLineupType::AETHERDIVIDE_SPIRIT_LINEUP_NONE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.id);
        }
        if let Some(v) = self.sp_bar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(super::AetherdivideSpiritLineupType::AetherdivideSpiritLineupType::AETHERDIVIDE_SPIRIT_LINEUP_NONE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        if let Some(v) = self.sp_bar.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GMKEPCOMHPN {
        GMKEPCOMHPN::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(super::AetherdivideSpiritLineupType::AetherdivideSpiritLineupType::AETHERDIVIDE_SPIRIT_LINEUP_NONE);
        self.id = 0;
        self.sp_bar.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GMKEPCOMHPN {
        static instance: GMKEPCOMHPN = GMKEPCOMHPN {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            id: 0,
            sp_bar: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GMKEPCOMHPN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GMKEPCOMHPN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GMKEPCOMHPN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GMKEPCOMHPN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GMKEPCOMHPN.proto\x1a\"AetherdivideSpiritLineupType.proto\x1a\x0fS\
    pBarInfo.proto\"s\n\x0bGMKEPCOMHPN\x121\n\x04type\x18\x01\x20\x01(\x0e2\
    \x1d.AetherdivideSpiritLineupTypeR\x04type\x12\x0e\n\x02id\x18\x02\x20\
    \x01(\rR\x02id\x12!\n\x06sp_bar\x18\x03\x20\x01(\x0b2\n.SpBarInfoR\x05sp\
    Barb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::AetherdivideSpiritLineupType::file_descriptor().clone());
            deps.push(super::SpBarInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GMKEPCOMHPN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
