// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `Product.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Product)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Product {
    // message fields
    // @@protoc_insertion_point(field:Product.product_id)
    pub product_id: ::std::string::String,
    // @@protoc_insertion_point(field:Product.gift_type)
    pub gift_type: ::protobuf::EnumOrUnknown<super::ProductGiftType::ProductGiftType>,
    // @@protoc_insertion_point(field:Product.IOGLPEBJMDB)
    pub IOGLPEBJMDB: u32,
    // @@protoc_insertion_point(field:Product.price_tier)
    pub price_tier: ::std::string::String,
    // @@protoc_insertion_point(field:Product.begin_time)
    pub begin_time: i64,
    // @@protoc_insertion_point(field:Product.end_time)
    pub end_time: i64,
    // @@protoc_insertion_point(field:Product.double_reward)
    pub double_reward: bool,
    // @@protoc_insertion_point(field:Product.GCBOBAMCALK)
    pub GCBOBAMCALK: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Product.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Product {
    fn default() -> &'a Product {
        <Product as ::protobuf::Message>::default_instance()
    }
}

impl Product {
    pub fn new() -> Product {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "product_id",
            |m: &Product| { &m.product_id },
            |m: &mut Product| { &mut m.product_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gift_type",
            |m: &Product| { &m.gift_type },
            |m: &mut Product| { &mut m.gift_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IOGLPEBJMDB",
            |m: &Product| { &m.IOGLPEBJMDB },
            |m: &mut Product| { &mut m.IOGLPEBJMDB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price_tier",
            |m: &Product| { &m.price_tier },
            |m: &mut Product| { &mut m.price_tier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "begin_time",
            |m: &Product| { &m.begin_time },
            |m: &mut Product| { &mut m.begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &Product| { &m.end_time },
            |m: &mut Product| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "double_reward",
            |m: &Product| { &m.double_reward },
            |m: &mut Product| { &mut m.double_reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GCBOBAMCALK",
            |m: &Product| { &m.GCBOBAMCALK },
            |m: &mut Product| { &mut m.GCBOBAMCALK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Product>(
            "Product",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Product {
    const NAME: &'static str = "Product";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.product_id = is.read_string()?;
                },
                96 => {
                    self.gift_type = is.read_enum_or_unknown()?;
                },
                40 => {
                    self.IOGLPEBJMDB = is.read_uint32()?;
                },
                122 => {
                    self.price_tier = is.read_string()?;
                },
                56 => {
                    self.begin_time = is.read_int64()?;
                },
                88 => {
                    self.end_time = is.read_int64()?;
                },
                64 => {
                    self.double_reward = is.read_bool()?;
                },
                72 => {
                    self.GCBOBAMCALK = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.product_id);
        }
        if self.gift_type != ::protobuf::EnumOrUnknown::new(super::ProductGiftType::ProductGiftType::PRODUCT_GIFT_NONE) {
            my_size += ::protobuf::rt::int32_size(12, self.gift_type.value());
        }
        if self.IOGLPEBJMDB != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.IOGLPEBJMDB);
        }
        if !self.price_tier.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.price_tier);
        }
        if self.begin_time != 0 {
            my_size += ::protobuf::rt::int64_size(7, self.begin_time);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::int64_size(11, self.end_time);
        }
        if self.double_reward != false {
            my_size += 1 + 1;
        }
        if self.GCBOBAMCALK != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.GCBOBAMCALK);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.product_id.is_empty() {
            os.write_string(6, &self.product_id)?;
        }
        if self.gift_type != ::protobuf::EnumOrUnknown::new(super::ProductGiftType::ProductGiftType::PRODUCT_GIFT_NONE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.gift_type))?;
        }
        if self.IOGLPEBJMDB != 0 {
            os.write_uint32(5, self.IOGLPEBJMDB)?;
        }
        if !self.price_tier.is_empty() {
            os.write_string(15, &self.price_tier)?;
        }
        if self.begin_time != 0 {
            os.write_int64(7, self.begin_time)?;
        }
        if self.end_time != 0 {
            os.write_int64(11, self.end_time)?;
        }
        if self.double_reward != false {
            os.write_bool(8, self.double_reward)?;
        }
        if self.GCBOBAMCALK != 0 {
            os.write_uint32(9, self.GCBOBAMCALK)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Product {
        Product::new()
    }

    fn clear(&mut self) {
        self.product_id.clear();
        self.gift_type = ::protobuf::EnumOrUnknown::new(super::ProductGiftType::ProductGiftType::PRODUCT_GIFT_NONE);
        self.IOGLPEBJMDB = 0;
        self.price_tier.clear();
        self.begin_time = 0;
        self.end_time = 0;
        self.double_reward = false;
        self.GCBOBAMCALK = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Product {
        static instance: Product = Product {
            product_id: ::std::string::String::new(),
            gift_type: ::protobuf::EnumOrUnknown::from_i32(0),
            IOGLPEBJMDB: 0,
            price_tier: ::std::string::String::new(),
            begin_time: 0,
            end_time: 0,
            double_reward: false,
            GCBOBAMCALK: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Product {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Product").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Product {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Product {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rProduct.proto\x1a\x15ProductGiftType.proto\"\x99\x02\n\x07Product\
    \x12\x1d\n\nproduct_id\x18\x06\x20\x01(\tR\tproductId\x12-\n\tgift_type\
    \x18\x0c\x20\x01(\x0e2\x10.ProductGiftTypeR\x08giftType\x12\x20\n\x0bIOG\
    LPEBJMDB\x18\x05\x20\x01(\rR\x0bIOGLPEBJMDB\x12\x1d\n\nprice_tier\x18\
    \x0f\x20\x01(\tR\tpriceTier\x12\x1d\n\nbegin_time\x18\x07\x20\x01(\x03R\
    \tbeginTime\x12\x19\n\x08end_time\x18\x0b\x20\x01(\x03R\x07endTime\x12#\
    \n\rdouble_reward\x18\x08\x20\x01(\x08R\x0cdoubleReward\x12\x20\n\x0bGCB\
    OBAMCALK\x18\t\x20\x01(\rR\x0bGCBOBAMCALKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ProductGiftType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Product::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
