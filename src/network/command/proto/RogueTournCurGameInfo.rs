// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueTournCurGameInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueTournCurGameInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueTournCurGameInfo {
    // message fields
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.tourn_formula_info)
    pub tourn_formula_info: ::protobuf::MessageField<super::RogueTournFormulaInfo::RogueTournFormulaInfo>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.unlock_value)
    pub unlock_value: ::protobuf::MessageField<super::KeywordUnlockValue::KeywordUnlockValue>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.tourn_module_info)
    pub tourn_module_info: ::protobuf::MessageField<super::RogueTournModuleInfo::RogueTournModuleInfo>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.miracle_info)
    pub miracle_info: ::protobuf::MessageField<super::ChessRogueMiracleInfo::ChessRogueMiracleInfo>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.game_difficulty_info)
    pub game_difficulty_info: ::protobuf::MessageField<super::RogueTournGameDifficultyInfo::RogueTournGameDifficultyInfo>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.rogue_tourn_game_area_info)
    pub rogue_tourn_game_area_info: ::protobuf::MessageField<super::RogueTournGameAreaInfo::RogueTournGameAreaInfo>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.lineup)
    pub lineup: ::protobuf::MessageField<super::RogueTournLineupInfo::RogueTournLineupInfo>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.item_value)
    pub item_value: ::protobuf::MessageField<super::RogueGameItemValue::RogueGameItemValue>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.level)
    pub level: ::protobuf::MessageField<super::RogueTournLevelInfo::RogueTournLevelInfo>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF)
    pub ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF: ::protobuf::MessageField<super::ChessRogueBuffInfo::ChessRogueBuffInfo>,
    // @@protoc_insertion_point(field:RogueTournCurGameInfo.JMIDLLDKJBI)
    pub JMIDLLDKJBI: ::protobuf::MessageField<super::CGJNHNMAMDH::CGJNHNMAMDH>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueTournCurGameInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueTournCurGameInfo {
    fn default() -> &'a RogueTournCurGameInfo {
        <RogueTournCurGameInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueTournCurGameInfo {
    pub fn new() -> RogueTournCurGameInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueTournFormulaInfo::RogueTournFormulaInfo>(
            "tourn_formula_info",
            |m: &RogueTournCurGameInfo| { &m.tourn_formula_info },
            |m: &mut RogueTournCurGameInfo| { &mut m.tourn_formula_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KeywordUnlockValue::KeywordUnlockValue>(
            "unlock_value",
            |m: &RogueTournCurGameInfo| { &m.unlock_value },
            |m: &mut RogueTournCurGameInfo| { &mut m.unlock_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueTournModuleInfo::RogueTournModuleInfo>(
            "tourn_module_info",
            |m: &RogueTournCurGameInfo| { &m.tourn_module_info },
            |m: &mut RogueTournCurGameInfo| { &mut m.tourn_module_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ChessRogueMiracleInfo::ChessRogueMiracleInfo>(
            "miracle_info",
            |m: &RogueTournCurGameInfo| { &m.miracle_info },
            |m: &mut RogueTournCurGameInfo| { &mut m.miracle_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueTournGameDifficultyInfo::RogueTournGameDifficultyInfo>(
            "game_difficulty_info",
            |m: &RogueTournCurGameInfo| { &m.game_difficulty_info },
            |m: &mut RogueTournCurGameInfo| { &mut m.game_difficulty_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueTournGameAreaInfo::RogueTournGameAreaInfo>(
            "rogue_tourn_game_area_info",
            |m: &RogueTournCurGameInfo| { &m.rogue_tourn_game_area_info },
            |m: &mut RogueTournCurGameInfo| { &mut m.rogue_tourn_game_area_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueTournLineupInfo::RogueTournLineupInfo>(
            "lineup",
            |m: &RogueTournCurGameInfo| { &m.lineup },
            |m: &mut RogueTournCurGameInfo| { &mut m.lineup },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueGameItemValue::RogueGameItemValue>(
            "item_value",
            |m: &RogueTournCurGameInfo| { &m.item_value },
            |m: &mut RogueTournCurGameInfo| { &mut m.item_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueTournLevelInfo::RogueTournLevelInfo>(
            "level",
            |m: &RogueTournCurGameInfo| { &m.level },
            |m: &mut RogueTournCurGameInfo| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ChessRogueBuffInfo::ChessRogueBuffInfo>(
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF",
            |m: &RogueTournCurGameInfo| { &m.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF },
            |m: &mut RogueTournCurGameInfo| { &mut m.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CGJNHNMAMDH::CGJNHNMAMDH>(
            "JMIDLLDKJBI",
            |m: &RogueTournCurGameInfo| { &m.JMIDLLDKJBI },
            |m: &mut RogueTournCurGameInfo| { &mut m.JMIDLLDKJBI },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueTournCurGameInfo>(
            "RogueTournCurGameInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueTournCurGameInfo {
    const NAME: &'static str = "RogueTournCurGameInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tourn_formula_info)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.unlock_value)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tourn_module_info)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.miracle_info)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.game_difficulty_info)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rogue_tourn_game_area_info)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lineup)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.item_value)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.level)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JMIDLLDKJBI)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tourn_formula_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.unlock_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tourn_module_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.miracle_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.game_difficulty_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rogue_tourn_game_area_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lineup.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.item_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.level.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JMIDLLDKJBI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tourn_formula_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.unlock_value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.tourn_module_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.miracle_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.game_difficulty_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.rogue_tourn_game_area_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.lineup.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.item_value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.level.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.JMIDLLDKJBI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueTournCurGameInfo {
        RogueTournCurGameInfo::new()
    }

    fn clear(&mut self) {
        self.tourn_formula_info.clear();
        self.unlock_value.clear();
        self.tourn_module_info.clear();
        self.miracle_info.clear();
        self.game_difficulty_info.clear();
        self.rogue_tourn_game_area_info.clear();
        self.lineup.clear();
        self.item_value.clear();
        self.level.clear();
        self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF.clear();
        self.JMIDLLDKJBI.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueTournCurGameInfo {
        static instance: RogueTournCurGameInfo = RogueTournCurGameInfo {
            tourn_formula_info: ::protobuf::MessageField::none(),
            unlock_value: ::protobuf::MessageField::none(),
            tourn_module_info: ::protobuf::MessageField::none(),
            miracle_info: ::protobuf::MessageField::none(),
            game_difficulty_info: ::protobuf::MessageField::none(),
            rogue_tourn_game_area_info: ::protobuf::MessageField::none(),
            lineup: ::protobuf::MessageField::none(),
            item_value: ::protobuf::MessageField::none(),
            level: ::protobuf::MessageField::none(),
            ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF: ::protobuf::MessageField::none(),
            JMIDLLDKJBI: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueTournCurGameInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueTournCurGameInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueTournCurGameInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueTournCurGameInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bRogueTournCurGameInfo.proto\x1a\x11CGJNHNMAMDH.proto\x1a\x18ChessR\
    ogueBuffInfo.proto\x1a\x1bChessRogueMiracleInfo.proto\x1a\x18KeywordUnlo\
    ckValue.proto\x1a\x18RogueGameItemValue.proto\x1a\x1bRogueTournFormulaIn\
    fo.proto\x1a\x1cRogueTournGameAreaInfo.proto\x1a\"RogueTournGameDifficul\
    tyInfo.proto\x1a\x19RogueTournLevelInfo.proto\x1a\x1aRogueTournLineupInf\
    o.proto\x1a\x1aRogueTournModuleInfo.proto\"\xe9\x05\n\x15RogueTournCurGa\
    meInfo\x12D\n\x12tourn_formula_info\x18\x05\x20\x01(\x0b2\x16.RogueTourn\
    FormulaInfoR\x10tournFormulaInfo\x126\n\x0cunlock_value\x18\x04\x20\x01(\
    \x0b2\x13.KeywordUnlockValueR\x0bunlockValue\x12A\n\x11tourn_module_info\
    \x18\t\x20\x01(\x0b2\x15.RogueTournModuleInfoR\x0ftournModuleInfo\x129\n\
    \x0cmiracle_info\x18\x08\x20\x01(\x0b2\x16.ChessRogueMiracleInfoR\x0bmir\
    acleInfo\x12O\n\x14game_difficulty_info\x18\n\x20\x01(\x0b2\x1d.RogueTou\
    rnGameDifficultyInfoR\x12gameDifficultyInfo\x12S\n\x1arogue_tourn_game_a\
    rea_info\x18\x01\x20\x01(\x0b2\x17.RogueTournGameAreaInfoR\x16rogueTourn\
    GameAreaInfo\x12-\n\x06lineup\x18\x02\x20\x01(\x0b2\x15.RogueTournLineup\
    InfoR\x06lineup\x122\n\nitem_value\x18\x0b\x20\x01(\x0b2\x13.RogueGameIt\
    emValueR\titemValue\x12*\n\x05level\x18\x07\x20\x01(\x0b2\x14.RogueTourn\
    LevelInfoR\x05level\x12o\n+ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF\
    \x18\x0f\x20\x01(\x0b2\x13.ChessRogueBuffInfoR%ROGUECOMMONACTIONRESULTSO\
    URCETYPEBUFF\x12.\n\x0bJMIDLLDKJBI\x18\x03\x20\x01(\x0b2\x0c.CGJNHNMAMDH\
    R\x0bJMIDLLDKJBIb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(11);
            deps.push(super::CGJNHNMAMDH::file_descriptor().clone());
            deps.push(super::ChessRogueBuffInfo::file_descriptor().clone());
            deps.push(super::ChessRogueMiracleInfo::file_descriptor().clone());
            deps.push(super::KeywordUnlockValue::file_descriptor().clone());
            deps.push(super::RogueGameItemValue::file_descriptor().clone());
            deps.push(super::RogueTournFormulaInfo::file_descriptor().clone());
            deps.push(super::RogueTournGameAreaInfo::file_descriptor().clone());
            deps.push(super::RogueTournGameDifficultyInfo::file_descriptor().clone());
            deps.push(super::RogueTournLevelInfo::file_descriptor().clone());
            deps.push(super::RogueTournLineupInfo::file_descriptor().clone());
            deps.push(super::RogueTournModuleInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueTournCurGameInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
