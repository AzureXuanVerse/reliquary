// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BattleOp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:BattleOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BattleOp {
    // message fields
    // @@protoc_insertion_point(field:BattleOp.turn_counter)
    pub turn_counter: u32,
    // @@protoc_insertion_point(field:BattleOp.state)
    pub state: u32,
    // @@protoc_insertion_point(field:BattleOp.action_entity_id)
    pub action_entity_id: u32,
    // @@protoc_insertion_point(field:BattleOp.target_entity_id)
    pub target_entity_id: u32,
    // @@protoc_insertion_point(field:BattleOp.op_type)
    pub op_type: u32,
    // @@protoc_insertion_point(field:BattleOp.skill_index)
    pub skill_index: u32,
    // @@protoc_insertion_point(field:BattleOp.operation_counter)
    pub operation_counter: u32,
    // @@protoc_insertion_point(field:BattleOp.NPLIEIPHCBF)
    pub NPLIEIPHCBF: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:BattleOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BattleOp {
    fn default() -> &'a BattleOp {
        <BattleOp as ::protobuf::Message>::default_instance()
    }
}

impl BattleOp {
    pub fn new() -> BattleOp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "turn_counter",
            |m: &BattleOp| { &m.turn_counter },
            |m: &mut BattleOp| { &mut m.turn_counter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &BattleOp| { &m.state },
            |m: &mut BattleOp| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action_entity_id",
            |m: &BattleOp| { &m.action_entity_id },
            |m: &mut BattleOp| { &mut m.action_entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_entity_id",
            |m: &BattleOp| { &m.target_entity_id },
            |m: &mut BattleOp| { &mut m.target_entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "op_type",
            |m: &BattleOp| { &m.op_type },
            |m: &mut BattleOp| { &mut m.op_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "skill_index",
            |m: &BattleOp| { &m.skill_index },
            |m: &mut BattleOp| { &mut m.skill_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "operation_counter",
            |m: &BattleOp| { &m.operation_counter },
            |m: &mut BattleOp| { &mut m.operation_counter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NPLIEIPHCBF",
            |m: &BattleOp| { &m.NPLIEIPHCBF },
            |m: &mut BattleOp| { &mut m.NPLIEIPHCBF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BattleOp>(
            "BattleOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BattleOp {
    const NAME: &'static str = "BattleOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.turn_counter = is.read_uint32()?;
                },
                16 => {
                    self.state = is.read_uint32()?;
                },
                24 => {
                    self.action_entity_id = is.read_uint32()?;
                },
                32 => {
                    self.target_entity_id = is.read_uint32()?;
                },
                40 => {
                    self.op_type = is.read_uint32()?;
                },
                48 => {
                    self.skill_index = is.read_uint32()?;
                },
                56 => {
                    self.operation_counter = is.read_uint32()?;
                },
                66 => {
                    self.NPLIEIPHCBF = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.turn_counter != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.turn_counter);
        }
        if self.state != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.state);
        }
        if self.action_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.action_entity_id);
        }
        if self.target_entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.target_entity_id);
        }
        if self.op_type != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.op_type);
        }
        if self.skill_index != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.skill_index);
        }
        if self.operation_counter != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.operation_counter);
        }
        if !self.NPLIEIPHCBF.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.NPLIEIPHCBF);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.turn_counter != 0 {
            os.write_uint32(1, self.turn_counter)?;
        }
        if self.state != 0 {
            os.write_uint32(2, self.state)?;
        }
        if self.action_entity_id != 0 {
            os.write_uint32(3, self.action_entity_id)?;
        }
        if self.target_entity_id != 0 {
            os.write_uint32(4, self.target_entity_id)?;
        }
        if self.op_type != 0 {
            os.write_uint32(5, self.op_type)?;
        }
        if self.skill_index != 0 {
            os.write_uint32(6, self.skill_index)?;
        }
        if self.operation_counter != 0 {
            os.write_uint32(7, self.operation_counter)?;
        }
        if !self.NPLIEIPHCBF.is_empty() {
            os.write_string(8, &self.NPLIEIPHCBF)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BattleOp {
        BattleOp::new()
    }

    fn clear(&mut self) {
        self.turn_counter = 0;
        self.state = 0;
        self.action_entity_id = 0;
        self.target_entity_id = 0;
        self.op_type = 0;
        self.skill_index = 0;
        self.operation_counter = 0;
        self.NPLIEIPHCBF.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BattleOp {
        static instance: BattleOp = BattleOp {
            turn_counter: 0,
            state: 0,
            action_entity_id: 0,
            target_entity_id: 0,
            op_type: 0,
            skill_index: 0,
            operation_counter: 0,
            NPLIEIPHCBF: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BattleOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BattleOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BattleOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BattleOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eBattleOp.proto\"\xa0\x02\n\x08BattleOp\x12!\n\x0cturn_counter\x18\
    \x01\x20\x01(\rR\x0bturnCounter\x12\x14\n\x05state\x18\x02\x20\x01(\rR\
    \x05state\x12(\n\x10action_entity_id\x18\x03\x20\x01(\rR\x0eactionEntity\
    Id\x12(\n\x10target_entity_id\x18\x04\x20\x01(\rR\x0etargetEntityId\x12\
    \x17\n\x07op_type\x18\x05\x20\x01(\rR\x06opType\x12\x1f\n\x0bskill_index\
    \x18\x06\x20\x01(\rR\nskillIndex\x12+\n\x11operation_counter\x18\x07\x20\
    \x01(\rR\x10operationCounter\x12\x20\n\x0bNPLIEIPHCBF\x18\x08\x20\x01(\t\
    R\x0bNPLIEIPHCBFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BattleOp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
