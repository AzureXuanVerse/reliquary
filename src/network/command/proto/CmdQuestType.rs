// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdQuestType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdQuestType)
pub enum CmdQuestType {
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdQuestTypeNone)
    CmdQuestTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdTakeQuestOptionalRewardCsReq)
    CmdTakeQuestOptionalRewardCsReq = 985,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdGetQuestRecordCsReq)
    CmdGetQuestRecordCsReq = 971,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdTakeQuestRewardCsReq)
    CmdTakeQuestRewardCsReq = 931,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdTakeQuestOptionalRewardScRsp)
    CmdTakeQuestOptionalRewardScRsp = 916,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdQuestRecordScNotify)
    CmdQuestRecordScNotify = 922,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdTakeQuestRewardScRsp)
    CmdTakeQuestRewardScRsp = 940,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdGetQuestDataScRsp)
    CmdGetQuestDataScRsp = 932,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdGetQuestDataCsReq)
    CmdGetQuestDataCsReq = 995,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdGetQuestRecordScRsp)
    CmdGetQuestRecordScRsp = 952,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdBatchGetQuestDataCsReq)
    CmdBatchGetQuestDataCsReq = 983,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdFinishQuestCsReq)
    CmdFinishQuestCsReq = 956,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdBatchGetQuestDataScRsp)
    CmdBatchGetQuestDataScRsp = 960,
    // @@protoc_insertion_point(enum_value:CmdQuestType.CmdFinishQuestScRsp)
    CmdFinishQuestScRsp = 972,
}

impl ::protobuf::Enum for CmdQuestType {
    const NAME: &'static str = "CmdQuestType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdQuestType> {
        match value {
            0 => ::std::option::Option::Some(CmdQuestType::CmdQuestTypeNone),
            985 => ::std::option::Option::Some(CmdQuestType::CmdTakeQuestOptionalRewardCsReq),
            971 => ::std::option::Option::Some(CmdQuestType::CmdGetQuestRecordCsReq),
            931 => ::std::option::Option::Some(CmdQuestType::CmdTakeQuestRewardCsReq),
            916 => ::std::option::Option::Some(CmdQuestType::CmdTakeQuestOptionalRewardScRsp),
            922 => ::std::option::Option::Some(CmdQuestType::CmdQuestRecordScNotify),
            940 => ::std::option::Option::Some(CmdQuestType::CmdTakeQuestRewardScRsp),
            932 => ::std::option::Option::Some(CmdQuestType::CmdGetQuestDataScRsp),
            995 => ::std::option::Option::Some(CmdQuestType::CmdGetQuestDataCsReq),
            952 => ::std::option::Option::Some(CmdQuestType::CmdGetQuestRecordScRsp),
            983 => ::std::option::Option::Some(CmdQuestType::CmdBatchGetQuestDataCsReq),
            956 => ::std::option::Option::Some(CmdQuestType::CmdFinishQuestCsReq),
            960 => ::std::option::Option::Some(CmdQuestType::CmdBatchGetQuestDataScRsp),
            972 => ::std::option::Option::Some(CmdQuestType::CmdFinishQuestScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdQuestType> {
        match str {
            "CmdQuestTypeNone" => ::std::option::Option::Some(CmdQuestType::CmdQuestTypeNone),
            "CmdTakeQuestOptionalRewardCsReq" => ::std::option::Option::Some(CmdQuestType::CmdTakeQuestOptionalRewardCsReq),
            "CmdGetQuestRecordCsReq" => ::std::option::Option::Some(CmdQuestType::CmdGetQuestRecordCsReq),
            "CmdTakeQuestRewardCsReq" => ::std::option::Option::Some(CmdQuestType::CmdTakeQuestRewardCsReq),
            "CmdTakeQuestOptionalRewardScRsp" => ::std::option::Option::Some(CmdQuestType::CmdTakeQuestOptionalRewardScRsp),
            "CmdQuestRecordScNotify" => ::std::option::Option::Some(CmdQuestType::CmdQuestRecordScNotify),
            "CmdTakeQuestRewardScRsp" => ::std::option::Option::Some(CmdQuestType::CmdTakeQuestRewardScRsp),
            "CmdGetQuestDataScRsp" => ::std::option::Option::Some(CmdQuestType::CmdGetQuestDataScRsp),
            "CmdGetQuestDataCsReq" => ::std::option::Option::Some(CmdQuestType::CmdGetQuestDataCsReq),
            "CmdGetQuestRecordScRsp" => ::std::option::Option::Some(CmdQuestType::CmdGetQuestRecordScRsp),
            "CmdBatchGetQuestDataCsReq" => ::std::option::Option::Some(CmdQuestType::CmdBatchGetQuestDataCsReq),
            "CmdFinishQuestCsReq" => ::std::option::Option::Some(CmdQuestType::CmdFinishQuestCsReq),
            "CmdBatchGetQuestDataScRsp" => ::std::option::Option::Some(CmdQuestType::CmdBatchGetQuestDataScRsp),
            "CmdFinishQuestScRsp" => ::std::option::Option::Some(CmdQuestType::CmdFinishQuestScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdQuestType] = &[
        CmdQuestType::CmdQuestTypeNone,
        CmdQuestType::CmdTakeQuestOptionalRewardCsReq,
        CmdQuestType::CmdGetQuestRecordCsReq,
        CmdQuestType::CmdTakeQuestRewardCsReq,
        CmdQuestType::CmdTakeQuestOptionalRewardScRsp,
        CmdQuestType::CmdQuestRecordScNotify,
        CmdQuestType::CmdTakeQuestRewardScRsp,
        CmdQuestType::CmdGetQuestDataScRsp,
        CmdQuestType::CmdGetQuestDataCsReq,
        CmdQuestType::CmdGetQuestRecordScRsp,
        CmdQuestType::CmdBatchGetQuestDataCsReq,
        CmdQuestType::CmdFinishQuestCsReq,
        CmdQuestType::CmdBatchGetQuestDataScRsp,
        CmdQuestType::CmdFinishQuestScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdQuestType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdQuestType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdQuestType::CmdQuestTypeNone => 0,
            CmdQuestType::CmdTakeQuestOptionalRewardCsReq => 1,
            CmdQuestType::CmdGetQuestRecordCsReq => 2,
            CmdQuestType::CmdTakeQuestRewardCsReq => 3,
            CmdQuestType::CmdTakeQuestOptionalRewardScRsp => 4,
            CmdQuestType::CmdQuestRecordScNotify => 5,
            CmdQuestType::CmdTakeQuestRewardScRsp => 6,
            CmdQuestType::CmdGetQuestDataScRsp => 7,
            CmdQuestType::CmdGetQuestDataCsReq => 8,
            CmdQuestType::CmdGetQuestRecordScRsp => 9,
            CmdQuestType::CmdBatchGetQuestDataCsReq => 10,
            CmdQuestType::CmdFinishQuestCsReq => 11,
            CmdQuestType::CmdBatchGetQuestDataScRsp => 12,
            CmdQuestType::CmdFinishQuestScRsp => 13,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdQuestType {
    fn default() -> Self {
        CmdQuestType::CmdQuestTypeNone
    }
}

impl CmdQuestType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdQuestType>("CmdQuestType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12CmdQuestType.proto*\xad\x03\n\x0cCmdQuestType\x12\x14\n\x10CmdQues\
    tTypeNone\x10\0\x12$\n\x1fCmdTakeQuestOptionalRewardCsReq\x10\xd9\x07\
    \x12\x1b\n\x16CmdGetQuestRecordCsReq\x10\xcb\x07\x12\x1c\n\x17CmdTakeQue\
    stRewardCsReq\x10\xa3\x07\x12$\n\x1fCmdTakeQuestOptionalRewardScRsp\x10\
    \x94\x07\x12\x1b\n\x16CmdQuestRecordScNotify\x10\x9a\x07\x12\x1c\n\x17Cm\
    dTakeQuestRewardScRsp\x10\xac\x07\x12\x19\n\x14CmdGetQuestDataScRsp\x10\
    \xa4\x07\x12\x19\n\x14CmdGetQuestDataCsReq\x10\xe3\x07\x12\x1b\n\x16CmdG\
    etQuestRecordScRsp\x10\xb8\x07\x12\x1e\n\x19CmdBatchGetQuestDataCsReq\
    \x10\xd7\x07\x12\x18\n\x13CmdFinishQuestCsReq\x10\xbc\x07\x12\x1e\n\x19C\
    mdBatchGetQuestDataScRsp\x10\xc0\x07\x12\x18\n\x13CmdFinishQuestScRsp\
    \x10\xcc\x07b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdQuestType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
