// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `IBEIIHLDKAN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:IBEIIHLDKAN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IBEIIHLDKAN {
    // message oneof groups
    pub ECOEKHPGMEA: ::std::option::Option<ibeiihldkan::ECOEKHPGMEA>,
    // special fields
    // @@protoc_insertion_point(special_field:IBEIIHLDKAN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IBEIIHLDKAN {
    fn default() -> &'a IBEIIHLDKAN {
        <IBEIIHLDKAN as ::protobuf::Message>::default_instance()
    }
}

impl IBEIIHLDKAN {
    pub fn new() -> IBEIIHLDKAN {
        ::std::default::Default::default()
    }

    // .JKPNBBIIBNP DPBGPFADPJB = 10;

    pub fn DPBGPFADPJB(&self) -> &super::JKPNBBIIBNP::JKPNBBIIBNP {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(ref v)) => v,
            _ => <super::JKPNBBIIBNP::JKPNBBIIBNP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DPBGPFADPJB(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_DPBGPFADPJB(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DPBGPFADPJB(&mut self, v: super::JKPNBBIIBNP::JKPNBBIIBNP) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DPBGPFADPJB(&mut self) -> &mut super::JKPNBBIIBNP::JKPNBBIIBNP {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(super::JKPNBBIIBNP::JKPNBBIIBNP::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DPBGPFADPJB(&mut self) -> super::JKPNBBIIBNP::JKPNBBIIBNP {
        if self.has_DPBGPFADPJB() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JKPNBBIIBNP::JKPNBBIIBNP::new()
        }
    }

    // .CIFDFLDEOKC APOAAJEHEFA = 7;

    pub fn APOAAJEHEFA(&self) -> &super::CIFDFLDEOKC::CIFDFLDEOKC {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(ref v)) => v,
            _ => <super::CIFDFLDEOKC::CIFDFLDEOKC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_APOAAJEHEFA(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_APOAAJEHEFA(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_APOAAJEHEFA(&mut self, v: super::CIFDFLDEOKC::CIFDFLDEOKC) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_APOAAJEHEFA(&mut self) -> &mut super::CIFDFLDEOKC::CIFDFLDEOKC {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(super::CIFDFLDEOKC::CIFDFLDEOKC::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_APOAAJEHEFA(&mut self) -> super::CIFDFLDEOKC::CIFDFLDEOKC {
        if self.has_APOAAJEHEFA() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CIFDFLDEOKC::CIFDFLDEOKC::new()
        }
    }

    // .KOJPPIAGBDF MHEAGDGLGCD = 6;

    pub fn MHEAGDGLGCD(&self) -> &super::KOJPPIAGBDF::KOJPPIAGBDF {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(ref v)) => v,
            _ => <super::KOJPPIAGBDF::KOJPPIAGBDF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MHEAGDGLGCD(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_MHEAGDGLGCD(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MHEAGDGLGCD(&mut self, v: super::KOJPPIAGBDF::KOJPPIAGBDF) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MHEAGDGLGCD(&mut self) -> &mut super::KOJPPIAGBDF::KOJPPIAGBDF {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(super::KOJPPIAGBDF::KOJPPIAGBDF::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MHEAGDGLGCD(&mut self) -> super::KOJPPIAGBDF::KOJPPIAGBDF {
        if self.has_MHEAGDGLGCD() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KOJPPIAGBDF::KOJPPIAGBDF::new()
        }
    }

    // .HIFEBJCJLCN LJOIKIFPDKD = 8;

    pub fn LJOIKIFPDKD(&self) -> &super::HIFEBJCJLCN::HIFEBJCJLCN {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(ref v)) => v,
            _ => <super::HIFEBJCJLCN::HIFEBJCJLCN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LJOIKIFPDKD(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_LJOIKIFPDKD(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LJOIKIFPDKD(&mut self, v: super::HIFEBJCJLCN::HIFEBJCJLCN) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LJOIKIFPDKD(&mut self) -> &mut super::HIFEBJCJLCN::HIFEBJCJLCN {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(super::HIFEBJCJLCN::HIFEBJCJLCN::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LJOIKIFPDKD(&mut self) -> super::HIFEBJCJLCN::HIFEBJCJLCN {
        if self.has_LJOIKIFPDKD() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HIFEBJCJLCN::HIFEBJCJLCN::new()
        }
    }

    // .JBHPFNNFKIP JFCOPCFMOBC = 9;

    pub fn JFCOPCFMOBC(&self) -> &super::JBHPFNNFKIP::JBHPFNNFKIP {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(ref v)) => v,
            _ => <super::JBHPFNNFKIP::JBHPFNNFKIP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JFCOPCFMOBC(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_JFCOPCFMOBC(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JFCOPCFMOBC(&mut self, v: super::JBHPFNNFKIP::JBHPFNNFKIP) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JFCOPCFMOBC(&mut self) -> &mut super::JBHPFNNFKIP::JBHPFNNFKIP {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(super::JBHPFNNFKIP::JBHPFNNFKIP::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JFCOPCFMOBC(&mut self) -> super::JBHPFNNFKIP::JBHPFNNFKIP {
        if self.has_JFCOPCFMOBC() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JBHPFNNFKIP::JBHPFNNFKIP::new()
        }
    }

    // .HMCAPGMLPOB OODNPIBEGCF = 15;

    pub fn OODNPIBEGCF(&self) -> &super::HMCAPGMLPOB::HMCAPGMLPOB {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(ref v)) => v,
            _ => <super::HMCAPGMLPOB::HMCAPGMLPOB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OODNPIBEGCF(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_OODNPIBEGCF(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OODNPIBEGCF(&mut self, v: super::HMCAPGMLPOB::HMCAPGMLPOB) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OODNPIBEGCF(&mut self) -> &mut super::HMCAPGMLPOB::HMCAPGMLPOB {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(super::HMCAPGMLPOB::HMCAPGMLPOB::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OODNPIBEGCF(&mut self) -> super::HMCAPGMLPOB::HMCAPGMLPOB {
        if self.has_OODNPIBEGCF() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HMCAPGMLPOB::HMCAPGMLPOB::new()
        }
    }

    // .OHCMFGGBJCJ OFJFLADAGPG = 5;

    pub fn OFJFLADAGPG(&self) -> &super::OHCMFGGBJCJ::OHCMFGGBJCJ {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(ref v)) => v,
            _ => <super::OHCMFGGBJCJ::OHCMFGGBJCJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OFJFLADAGPG(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_OFJFLADAGPG(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OFJFLADAGPG(&mut self, v: super::OHCMFGGBJCJ::OHCMFGGBJCJ) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OFJFLADAGPG(&mut self) -> &mut super::OHCMFGGBJCJ::OHCMFGGBJCJ {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(super::OHCMFGGBJCJ::OHCMFGGBJCJ::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OFJFLADAGPG(&mut self) -> super::OHCMFGGBJCJ::OHCMFGGBJCJ {
        if self.has_OFJFLADAGPG() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OHCMFGGBJCJ::OHCMFGGBJCJ::new()
        }
    }

    // .LOLENBEAHBI CLMCJCOAHJA = 1;

    pub fn CLMCJCOAHJA(&self) -> &super::LOLENBEAHBI::LOLENBEAHBI {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(ref v)) => v,
            _ => <super::LOLENBEAHBI::LOLENBEAHBI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CLMCJCOAHJA(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_CLMCJCOAHJA(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CLMCJCOAHJA(&mut self, v: super::LOLENBEAHBI::LOLENBEAHBI) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CLMCJCOAHJA(&mut self) -> &mut super::LOLENBEAHBI::LOLENBEAHBI {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(super::LOLENBEAHBI::LOLENBEAHBI::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CLMCJCOAHJA(&mut self) -> super::LOLENBEAHBI::LOLENBEAHBI {
        if self.has_CLMCJCOAHJA() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LOLENBEAHBI::LOLENBEAHBI::new()
        }
    }

    // .IGKEEHMGCPA ILPMCFEPLHD = 11;

    pub fn ILPMCFEPLHD(&self) -> &super::IGKEEHMGCPA::IGKEEHMGCPA {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(ref v)) => v,
            _ => <super::IGKEEHMGCPA::IGKEEHMGCPA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ILPMCFEPLHD(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_ILPMCFEPLHD(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ILPMCFEPLHD(&mut self, v: super::IGKEEHMGCPA::IGKEEHMGCPA) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ILPMCFEPLHD(&mut self) -> &mut super::IGKEEHMGCPA::IGKEEHMGCPA {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(super::IGKEEHMGCPA::IGKEEHMGCPA::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ILPMCFEPLHD(&mut self) -> super::IGKEEHMGCPA::IGKEEHMGCPA {
        if self.has_ILPMCFEPLHD() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IGKEEHMGCPA::IGKEEHMGCPA::new()
        }
    }

    // .ALGENLCOGGI EABFCLLKPJA = 4;

    pub fn EABFCLLKPJA(&self) -> &super::ALGENLCOGGI::ALGENLCOGGI {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(ref v)) => v,
            _ => <super::ALGENLCOGGI::ALGENLCOGGI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EABFCLLKPJA(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_EABFCLLKPJA(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EABFCLLKPJA(&mut self, v: super::ALGENLCOGGI::ALGENLCOGGI) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EABFCLLKPJA(&mut self) -> &mut super::ALGENLCOGGI::ALGENLCOGGI {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(super::ALGENLCOGGI::ALGENLCOGGI::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EABFCLLKPJA(&mut self) -> super::ALGENLCOGGI::ALGENLCOGGI {
        if self.has_EABFCLLKPJA() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ALGENLCOGGI::ALGENLCOGGI::new()
        }
    }

    // .AIFKHOMFGLF GDFAPBIOMGP = 3;

    pub fn GDFAPBIOMGP(&self) -> &super::AIFKHOMFGLF::AIFKHOMFGLF {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(ref v)) => v,
            _ => <super::AIFKHOMFGLF::AIFKHOMFGLF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GDFAPBIOMGP(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_GDFAPBIOMGP(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GDFAPBIOMGP(&mut self, v: super::AIFKHOMFGLF::AIFKHOMFGLF) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GDFAPBIOMGP(&mut self) -> &mut super::AIFKHOMFGLF::AIFKHOMFGLF {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(super::AIFKHOMFGLF::AIFKHOMFGLF::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GDFAPBIOMGP(&mut self) -> super::AIFKHOMFGLF::AIFKHOMFGLF {
        if self.has_GDFAPBIOMGP() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AIFKHOMFGLF::AIFKHOMFGLF::new()
        }
    }

    // .JPBJLKJBJOA JGBLIMAOOKD = 13;

    pub fn JGBLIMAOOKD(&self) -> &super::JPBJLKJBJOA::JPBJLKJBJOA {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(ref v)) => v,
            _ => <super::JPBJLKJBJOA::JPBJLKJBJOA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JGBLIMAOOKD(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_JGBLIMAOOKD(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JGBLIMAOOKD(&mut self, v: super::JPBJLKJBJOA::JPBJLKJBJOA) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JGBLIMAOOKD(&mut self) -> &mut super::JPBJLKJBJOA::JPBJLKJBJOA {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(super::JPBJLKJBJOA::JPBJLKJBJOA::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JGBLIMAOOKD(&mut self) -> super::JPBJLKJBJOA::JPBJLKJBJOA {
        if self.has_JGBLIMAOOKD() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JPBJLKJBJOA::JPBJLKJBJOA::new()
        }
    }

    // .MFDALMKKHOM EPEJBIOEJGH = 14;

    pub fn EPEJBIOEJGH(&self) -> &super::MFDALMKKHOM::MFDALMKKHOM {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(ref v)) => v,
            _ => <super::MFDALMKKHOM::MFDALMKKHOM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EPEJBIOEJGH(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_EPEJBIOEJGH(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EPEJBIOEJGH(&mut self, v: super::MFDALMKKHOM::MFDALMKKHOM) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EPEJBIOEJGH(&mut self) -> &mut super::MFDALMKKHOM::MFDALMKKHOM {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(super::MFDALMKKHOM::MFDALMKKHOM::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EPEJBIOEJGH(&mut self) -> super::MFDALMKKHOM::MFDALMKKHOM {
        if self.has_EPEJBIOEJGH() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MFDALMKKHOM::MFDALMKKHOM::new()
        }
    }

    // .BHIHNLGPFFG LGKFIGMHHOG = 12;

    pub fn LGKFIGMHHOG(&self) -> &super::BHIHNLGPFFG::BHIHNLGPFFG {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(ref v)) => v,
            _ => <super::BHIHNLGPFFG::BHIHNLGPFFG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LGKFIGMHHOG(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_LGKFIGMHHOG(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LGKFIGMHHOG(&mut self, v: super::BHIHNLGPFFG::BHIHNLGPFFG) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LGKFIGMHHOG(&mut self) -> &mut super::BHIHNLGPFFG::BHIHNLGPFFG {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(super::BHIHNLGPFFG::BHIHNLGPFFG::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LGKFIGMHHOG(&mut self) -> super::BHIHNLGPFFG::BHIHNLGPFFG {
        if self.has_LGKFIGMHHOG() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BHIHNLGPFFG::BHIHNLGPFFG::new()
        }
    }

    // .HOMJEMILMMF KHCDHCNGFFD = 2;

    pub fn KHCDHCNGFFD(&self) -> &super::HOMJEMILMMF::HOMJEMILMMF {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(ref v)) => v,
            _ => <super::HOMJEMILMMF::HOMJEMILMMF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KHCDHCNGFFD(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_KHCDHCNGFFD(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KHCDHCNGFFD(&mut self, v: super::HOMJEMILMMF::HOMJEMILMMF) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KHCDHCNGFFD(&mut self) -> &mut super::HOMJEMILMMF::HOMJEMILMMF {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(super::HOMJEMILMMF::HOMJEMILMMF::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KHCDHCNGFFD(&mut self) -> super::HOMJEMILMMF::HOMJEMILMMF {
        if self.has_KHCDHCNGFFD() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HOMJEMILMMF::HOMJEMILMMF::new()
        }
    }

    // .EGLBNLJHBFJ MBIFDIPFMDN = 1725;

    pub fn MBIFDIPFMDN(&self) -> &super::EGLBNLJHBFJ::EGLBNLJHBFJ {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(ref v)) => v,
            _ => <super::EGLBNLJHBFJ::EGLBNLJHBFJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MBIFDIPFMDN(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_MBIFDIPFMDN(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MBIFDIPFMDN(&mut self, v: super::EGLBNLJHBFJ::EGLBNLJHBFJ) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MBIFDIPFMDN(&mut self) -> &mut super::EGLBNLJHBFJ::EGLBNLJHBFJ {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(super::EGLBNLJHBFJ::EGLBNLJHBFJ::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MBIFDIPFMDN(&mut self) -> super::EGLBNLJHBFJ::EGLBNLJHBFJ {
        if self.has_MBIFDIPFMDN() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EGLBNLJHBFJ::EGLBNLJHBFJ::new()
        }
    }

    // .OKLHBCFMBBO PHFPNGODBLD = 714;

    pub fn PHFPNGODBLD(&self) -> &super::OKLHBCFMBBO::OKLHBCFMBBO {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(ref v)) => v,
            _ => <super::OKLHBCFMBBO::OKLHBCFMBBO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PHFPNGODBLD(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_PHFPNGODBLD(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PHFPNGODBLD(&mut self, v: super::OKLHBCFMBBO::OKLHBCFMBBO) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PHFPNGODBLD(&mut self) -> &mut super::OKLHBCFMBBO::OKLHBCFMBBO {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(super::OKLHBCFMBBO::OKLHBCFMBBO::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PHFPNGODBLD(&mut self) -> super::OKLHBCFMBBO::OKLHBCFMBBO {
        if self.has_PHFPNGODBLD() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OKLHBCFMBBO::OKLHBCFMBBO::new()
        }
    }

    // .FAJOFMFCJEM NCFFKKBBBOF = 183;

    pub fn NCFFKKBBBOF(&self) -> &super::FAJOFMFCJEM::FAJOFMFCJEM {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(ref v)) => v,
            _ => <super::FAJOFMFCJEM::FAJOFMFCJEM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NCFFKKBBBOF(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_NCFFKKBBBOF(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NCFFKKBBBOF(&mut self, v: super::FAJOFMFCJEM::FAJOFMFCJEM) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NCFFKKBBBOF(&mut self) -> &mut super::FAJOFMFCJEM::FAJOFMFCJEM {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(super::FAJOFMFCJEM::FAJOFMFCJEM::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NCFFKKBBBOF(&mut self) -> super::FAJOFMFCJEM::FAJOFMFCJEM {
        if self.has_NCFFKKBBBOF() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FAJOFMFCJEM::FAJOFMFCJEM::new()
        }
    }

    // .OAGAOPCJDJA INDJMLOCFKI = 1623;

    pub fn INDJMLOCFKI(&self) -> &super::OAGAOPCJDJA::OAGAOPCJDJA {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(ref v)) => v,
            _ => <super::OAGAOPCJDJA::OAGAOPCJDJA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_INDJMLOCFKI(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_INDJMLOCFKI(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_INDJMLOCFKI(&mut self, v: super::OAGAOPCJDJA::OAGAOPCJDJA) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_INDJMLOCFKI(&mut self) -> &mut super::OAGAOPCJDJA::OAGAOPCJDJA {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(super::OAGAOPCJDJA::OAGAOPCJDJA::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_INDJMLOCFKI(&mut self) -> super::OAGAOPCJDJA::OAGAOPCJDJA {
        if self.has_INDJMLOCFKI() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OAGAOPCJDJA::OAGAOPCJDJA::new()
        }
    }

    // .IAKNHMEGIKO MBAMPALALIE = 1128;

    pub fn MBAMPALALIE(&self) -> &super::IAKNHMEGIKO::IAKNHMEGIKO {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(ref v)) => v,
            _ => <super::IAKNHMEGIKO::IAKNHMEGIKO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MBAMPALALIE(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_MBAMPALALIE(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MBAMPALALIE(&mut self, v: super::IAKNHMEGIKO::IAKNHMEGIKO) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MBAMPALALIE(&mut self) -> &mut super::IAKNHMEGIKO::IAKNHMEGIKO {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(super::IAKNHMEGIKO::IAKNHMEGIKO::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MBAMPALALIE(&mut self) -> super::IAKNHMEGIKO::IAKNHMEGIKO {
        if self.has_MBAMPALALIE() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IAKNHMEGIKO::IAKNHMEGIKO::new()
        }
    }

    // .LIMLKCFGKFA FNEFFJODFJI = 1841;

    pub fn FNEFFJODFJI(&self) -> &super::LIMLKCFGKFA::LIMLKCFGKFA {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(ref v)) => v,
            _ => <super::LIMLKCFGKFA::LIMLKCFGKFA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FNEFFJODFJI(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_FNEFFJODFJI(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FNEFFJODFJI(&mut self, v: super::LIMLKCFGKFA::LIMLKCFGKFA) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FNEFFJODFJI(&mut self) -> &mut super::LIMLKCFGKFA::LIMLKCFGKFA {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(super::LIMLKCFGKFA::LIMLKCFGKFA::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FNEFFJODFJI(&mut self) -> super::LIMLKCFGKFA::LIMLKCFGKFA {
        if self.has_FNEFFJODFJI() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LIMLKCFGKFA::LIMLKCFGKFA::new()
        }
    }

    // .MKGOHMIHGGJ PGCPAICCCKH = 267;

    pub fn PGCPAICCCKH(&self) -> &super::MKGOHMIHGGJ::MKGOHMIHGGJ {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(ref v)) => v,
            _ => <super::MKGOHMIHGGJ::MKGOHMIHGGJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PGCPAICCCKH(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_PGCPAICCCKH(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PGCPAICCCKH(&mut self, v: super::MKGOHMIHGGJ::MKGOHMIHGGJ) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PGCPAICCCKH(&mut self) -> &mut super::MKGOHMIHGGJ::MKGOHMIHGGJ {
        if let ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(super::MKGOHMIHGGJ::MKGOHMIHGGJ::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PGCPAICCCKH(&mut self) -> super::MKGOHMIHGGJ::MKGOHMIHGGJ {
        if self.has_PGCPAICCCKH() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MKGOHMIHGGJ::MKGOHMIHGGJ::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(22);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JKPNBBIIBNP::JKPNBBIIBNP>(
            "DPBGPFADPJB",
            IBEIIHLDKAN::has_DPBGPFADPJB,
            IBEIIHLDKAN::DPBGPFADPJB,
            IBEIIHLDKAN::mut_DPBGPFADPJB,
            IBEIIHLDKAN::set_DPBGPFADPJB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CIFDFLDEOKC::CIFDFLDEOKC>(
            "APOAAJEHEFA",
            IBEIIHLDKAN::has_APOAAJEHEFA,
            IBEIIHLDKAN::APOAAJEHEFA,
            IBEIIHLDKAN::mut_APOAAJEHEFA,
            IBEIIHLDKAN::set_APOAAJEHEFA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KOJPPIAGBDF::KOJPPIAGBDF>(
            "MHEAGDGLGCD",
            IBEIIHLDKAN::has_MHEAGDGLGCD,
            IBEIIHLDKAN::MHEAGDGLGCD,
            IBEIIHLDKAN::mut_MHEAGDGLGCD,
            IBEIIHLDKAN::set_MHEAGDGLGCD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HIFEBJCJLCN::HIFEBJCJLCN>(
            "LJOIKIFPDKD",
            IBEIIHLDKAN::has_LJOIKIFPDKD,
            IBEIIHLDKAN::LJOIKIFPDKD,
            IBEIIHLDKAN::mut_LJOIKIFPDKD,
            IBEIIHLDKAN::set_LJOIKIFPDKD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JBHPFNNFKIP::JBHPFNNFKIP>(
            "JFCOPCFMOBC",
            IBEIIHLDKAN::has_JFCOPCFMOBC,
            IBEIIHLDKAN::JFCOPCFMOBC,
            IBEIIHLDKAN::mut_JFCOPCFMOBC,
            IBEIIHLDKAN::set_JFCOPCFMOBC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HMCAPGMLPOB::HMCAPGMLPOB>(
            "OODNPIBEGCF",
            IBEIIHLDKAN::has_OODNPIBEGCF,
            IBEIIHLDKAN::OODNPIBEGCF,
            IBEIIHLDKAN::mut_OODNPIBEGCF,
            IBEIIHLDKAN::set_OODNPIBEGCF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OHCMFGGBJCJ::OHCMFGGBJCJ>(
            "OFJFLADAGPG",
            IBEIIHLDKAN::has_OFJFLADAGPG,
            IBEIIHLDKAN::OFJFLADAGPG,
            IBEIIHLDKAN::mut_OFJFLADAGPG,
            IBEIIHLDKAN::set_OFJFLADAGPG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LOLENBEAHBI::LOLENBEAHBI>(
            "CLMCJCOAHJA",
            IBEIIHLDKAN::has_CLMCJCOAHJA,
            IBEIIHLDKAN::CLMCJCOAHJA,
            IBEIIHLDKAN::mut_CLMCJCOAHJA,
            IBEIIHLDKAN::set_CLMCJCOAHJA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IGKEEHMGCPA::IGKEEHMGCPA>(
            "ILPMCFEPLHD",
            IBEIIHLDKAN::has_ILPMCFEPLHD,
            IBEIIHLDKAN::ILPMCFEPLHD,
            IBEIIHLDKAN::mut_ILPMCFEPLHD,
            IBEIIHLDKAN::set_ILPMCFEPLHD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ALGENLCOGGI::ALGENLCOGGI>(
            "EABFCLLKPJA",
            IBEIIHLDKAN::has_EABFCLLKPJA,
            IBEIIHLDKAN::EABFCLLKPJA,
            IBEIIHLDKAN::mut_EABFCLLKPJA,
            IBEIIHLDKAN::set_EABFCLLKPJA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AIFKHOMFGLF::AIFKHOMFGLF>(
            "GDFAPBIOMGP",
            IBEIIHLDKAN::has_GDFAPBIOMGP,
            IBEIIHLDKAN::GDFAPBIOMGP,
            IBEIIHLDKAN::mut_GDFAPBIOMGP,
            IBEIIHLDKAN::set_GDFAPBIOMGP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JPBJLKJBJOA::JPBJLKJBJOA>(
            "JGBLIMAOOKD",
            IBEIIHLDKAN::has_JGBLIMAOOKD,
            IBEIIHLDKAN::JGBLIMAOOKD,
            IBEIIHLDKAN::mut_JGBLIMAOOKD,
            IBEIIHLDKAN::set_JGBLIMAOOKD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MFDALMKKHOM::MFDALMKKHOM>(
            "EPEJBIOEJGH",
            IBEIIHLDKAN::has_EPEJBIOEJGH,
            IBEIIHLDKAN::EPEJBIOEJGH,
            IBEIIHLDKAN::mut_EPEJBIOEJGH,
            IBEIIHLDKAN::set_EPEJBIOEJGH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BHIHNLGPFFG::BHIHNLGPFFG>(
            "LGKFIGMHHOG",
            IBEIIHLDKAN::has_LGKFIGMHHOG,
            IBEIIHLDKAN::LGKFIGMHHOG,
            IBEIIHLDKAN::mut_LGKFIGMHHOG,
            IBEIIHLDKAN::set_LGKFIGMHHOG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HOMJEMILMMF::HOMJEMILMMF>(
            "KHCDHCNGFFD",
            IBEIIHLDKAN::has_KHCDHCNGFFD,
            IBEIIHLDKAN::KHCDHCNGFFD,
            IBEIIHLDKAN::mut_KHCDHCNGFFD,
            IBEIIHLDKAN::set_KHCDHCNGFFD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EGLBNLJHBFJ::EGLBNLJHBFJ>(
            "MBIFDIPFMDN",
            IBEIIHLDKAN::has_MBIFDIPFMDN,
            IBEIIHLDKAN::MBIFDIPFMDN,
            IBEIIHLDKAN::mut_MBIFDIPFMDN,
            IBEIIHLDKAN::set_MBIFDIPFMDN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OKLHBCFMBBO::OKLHBCFMBBO>(
            "PHFPNGODBLD",
            IBEIIHLDKAN::has_PHFPNGODBLD,
            IBEIIHLDKAN::PHFPNGODBLD,
            IBEIIHLDKAN::mut_PHFPNGODBLD,
            IBEIIHLDKAN::set_PHFPNGODBLD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FAJOFMFCJEM::FAJOFMFCJEM>(
            "NCFFKKBBBOF",
            IBEIIHLDKAN::has_NCFFKKBBBOF,
            IBEIIHLDKAN::NCFFKKBBBOF,
            IBEIIHLDKAN::mut_NCFFKKBBBOF,
            IBEIIHLDKAN::set_NCFFKKBBBOF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OAGAOPCJDJA::OAGAOPCJDJA>(
            "INDJMLOCFKI",
            IBEIIHLDKAN::has_INDJMLOCFKI,
            IBEIIHLDKAN::INDJMLOCFKI,
            IBEIIHLDKAN::mut_INDJMLOCFKI,
            IBEIIHLDKAN::set_INDJMLOCFKI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IAKNHMEGIKO::IAKNHMEGIKO>(
            "MBAMPALALIE",
            IBEIIHLDKAN::has_MBAMPALALIE,
            IBEIIHLDKAN::MBAMPALALIE,
            IBEIIHLDKAN::mut_MBAMPALALIE,
            IBEIIHLDKAN::set_MBAMPALALIE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LIMLKCFGKFA::LIMLKCFGKFA>(
            "FNEFFJODFJI",
            IBEIIHLDKAN::has_FNEFFJODFJI,
            IBEIIHLDKAN::FNEFFJODFJI,
            IBEIIHLDKAN::mut_FNEFFJODFJI,
            IBEIIHLDKAN::set_FNEFFJODFJI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MKGOHMIHGGJ::MKGOHMIHGGJ>(
            "PGCPAICCCKH",
            IBEIIHLDKAN::has_PGCPAICCCKH,
            IBEIIHLDKAN::PGCPAICCCKH,
            IBEIIHLDKAN::mut_PGCPAICCCKH,
            IBEIIHLDKAN::set_PGCPAICCCKH,
        ));
        oneofs.push(ibeiihldkan::ECOEKHPGMEA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IBEIIHLDKAN>(
            "IBEIIHLDKAN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IBEIIHLDKAN {
    const NAME: &'static str = "IBEIIHLDKAN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                82 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(is.read_message()?));
                },
                58 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(is.read_message()?));
                },
                50 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(is.read_message()?));
                },
                66 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(is.read_message()?));
                },
                74 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(is.read_message()?));
                },
                122 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(is.read_message()?));
                },
                42 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(is.read_message()?));
                },
                10 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(is.read_message()?));
                },
                90 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(is.read_message()?));
                },
                34 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(is.read_message()?));
                },
                26 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(is.read_message()?));
                },
                106 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(is.read_message()?));
                },
                114 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(is.read_message()?));
                },
                98 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(is.read_message()?));
                },
                18 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(is.read_message()?));
                },
                13802 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(is.read_message()?));
                },
                5714 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(is.read_message()?));
                },
                1466 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(is.read_message()?));
                },
                12986 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(is.read_message()?));
                },
                9026 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(is.read_message()?));
                },
                14730 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(is.read_message()?));
                },
                2138 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ECOEKHPGMEA {
            match v {
                &ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ECOEKHPGMEA {
            match v {
                &ibeiihldkan::ECOEKHPGMEA::DPBGPFADPJB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::APOAAJEHEFA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::MHEAGDGLGCD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::LJOIKIFPDKD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::JFCOPCFMOBC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::OODNPIBEGCF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::OFJFLADAGPG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::CLMCJCOAHJA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::ILPMCFEPLHD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::EABFCLLKPJA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::GDFAPBIOMGP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::JGBLIMAOOKD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::EPEJBIOEJGH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::LGKFIGMHHOG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::KHCDHCNGFFD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::MBIFDIPFMDN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1725, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::PHFPNGODBLD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(714, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::NCFFKKBBBOF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(183, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::INDJMLOCFKI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1623, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::MBAMPALALIE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1128, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::FNEFFJODFJI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1841, v, os)?;
                },
                &ibeiihldkan::ECOEKHPGMEA::PGCPAICCCKH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(267, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IBEIIHLDKAN {
        IBEIIHLDKAN::new()
    }

    fn clear(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IBEIIHLDKAN {
        static instance: IBEIIHLDKAN = IBEIIHLDKAN {
            ECOEKHPGMEA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IBEIIHLDKAN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IBEIIHLDKAN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IBEIIHLDKAN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IBEIIHLDKAN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `IBEIIHLDKAN`
pub mod ibeiihldkan {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:IBEIIHLDKAN.ECOEKHPGMEA)
    pub enum ECOEKHPGMEA {
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.DPBGPFADPJB)
        DPBGPFADPJB(super::super::JKPNBBIIBNP::JKPNBBIIBNP),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.APOAAJEHEFA)
        APOAAJEHEFA(super::super::CIFDFLDEOKC::CIFDFLDEOKC),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.MHEAGDGLGCD)
        MHEAGDGLGCD(super::super::KOJPPIAGBDF::KOJPPIAGBDF),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.LJOIKIFPDKD)
        LJOIKIFPDKD(super::super::HIFEBJCJLCN::HIFEBJCJLCN),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.JFCOPCFMOBC)
        JFCOPCFMOBC(super::super::JBHPFNNFKIP::JBHPFNNFKIP),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.OODNPIBEGCF)
        OODNPIBEGCF(super::super::HMCAPGMLPOB::HMCAPGMLPOB),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.OFJFLADAGPG)
        OFJFLADAGPG(super::super::OHCMFGGBJCJ::OHCMFGGBJCJ),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.CLMCJCOAHJA)
        CLMCJCOAHJA(super::super::LOLENBEAHBI::LOLENBEAHBI),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.ILPMCFEPLHD)
        ILPMCFEPLHD(super::super::IGKEEHMGCPA::IGKEEHMGCPA),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.EABFCLLKPJA)
        EABFCLLKPJA(super::super::ALGENLCOGGI::ALGENLCOGGI),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.GDFAPBIOMGP)
        GDFAPBIOMGP(super::super::AIFKHOMFGLF::AIFKHOMFGLF),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.JGBLIMAOOKD)
        JGBLIMAOOKD(super::super::JPBJLKJBJOA::JPBJLKJBJOA),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.EPEJBIOEJGH)
        EPEJBIOEJGH(super::super::MFDALMKKHOM::MFDALMKKHOM),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.LGKFIGMHHOG)
        LGKFIGMHHOG(super::super::BHIHNLGPFFG::BHIHNLGPFFG),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.KHCDHCNGFFD)
        KHCDHCNGFFD(super::super::HOMJEMILMMF::HOMJEMILMMF),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.MBIFDIPFMDN)
        MBIFDIPFMDN(super::super::EGLBNLJHBFJ::EGLBNLJHBFJ),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.PHFPNGODBLD)
        PHFPNGODBLD(super::super::OKLHBCFMBBO::OKLHBCFMBBO),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.NCFFKKBBBOF)
        NCFFKKBBBOF(super::super::FAJOFMFCJEM::FAJOFMFCJEM),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.INDJMLOCFKI)
        INDJMLOCFKI(super::super::OAGAOPCJDJA::OAGAOPCJDJA),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.MBAMPALALIE)
        MBAMPALALIE(super::super::IAKNHMEGIKO::IAKNHMEGIKO),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.FNEFFJODFJI)
        FNEFFJODFJI(super::super::LIMLKCFGKFA::LIMLKCFGKFA),
        // @@protoc_insertion_point(oneof_field:IBEIIHLDKAN.PGCPAICCCKH)
        PGCPAICCCKH(super::super::MKGOHMIHGGJ::MKGOHMIHGGJ),
    }

    impl ::protobuf::Oneof for ECOEKHPGMEA {
    }

    impl ::protobuf::OneofFull for ECOEKHPGMEA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::IBEIIHLDKAN as ::protobuf::MessageFull>::descriptor().oneof_by_name("ECOEKHPGMEA").unwrap()).clone()
        }
    }

    impl ECOEKHPGMEA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ECOEKHPGMEA>("ECOEKHPGMEA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11IBEIIHLDKAN.proto\x1a\x11AIFKHOMFGLF.proto\x1a\x11ALGENLCOGGI.prot\
    o\x1a\x11BHIHNLGPFFG.proto\x1a\x11CIFDFLDEOKC.proto\x1a\x11EGLBNLJHBFJ.p\
    roto\x1a\x11FAJOFMFCJEM.proto\x1a\x11HIFEBJCJLCN.proto\x1a\x11HMCAPGMLPO\
    B.proto\x1a\x11HOMJEMILMMF.proto\x1a\x11IAKNHMEGIKO.proto\x1a\x11IGKEEHM\
    GCPA.proto\x1a\x11JBHPFNNFKIP.proto\x1a\x11JKPNBBIIBNP.proto\x1a\x11JPBJ\
    LKJBJOA.proto\x1a\x11KOJPPIAGBDF.proto\x1a\x11LIMLKCFGKFA.proto\x1a\x11L\
    OLENBEAHBI.proto\x1a\x11MFDALMKKHOM.proto\x1a\x11MKGOHMIHGGJ.proto\x1a\
    \x11OAGAOPCJDJA.proto\x1a\x11OHCMFGGBJCJ.proto\x1a\x11OKLHBCFMBBO.proto\
    \"\xef\x08\n\x0bIBEIIHLDKAN\x120\n\x0bDPBGPFADPJB\x18\n\x20\x01(\x0b2\
    \x0c.JKPNBBIIBNPH\0R\x0bDPBGPFADPJB\x120\n\x0bAPOAAJEHEFA\x18\x07\x20\
    \x01(\x0b2\x0c.CIFDFLDEOKCH\0R\x0bAPOAAJEHEFA\x120\n\x0bMHEAGDGLGCD\x18\
    \x06\x20\x01(\x0b2\x0c.KOJPPIAGBDFH\0R\x0bMHEAGDGLGCD\x120\n\x0bLJOIKIFP\
    DKD\x18\x08\x20\x01(\x0b2\x0c.HIFEBJCJLCNH\0R\x0bLJOIKIFPDKD\x120\n\x0bJ\
    FCOPCFMOBC\x18\t\x20\x01(\x0b2\x0c.JBHPFNNFKIPH\0R\x0bJFCOPCFMOBC\x120\n\
    \x0bOODNPIBEGCF\x18\x0f\x20\x01(\x0b2\x0c.HMCAPGMLPOBH\0R\x0bOODNPIBEGCF\
    \x120\n\x0bOFJFLADAGPG\x18\x05\x20\x01(\x0b2\x0c.OHCMFGGBJCJH\0R\x0bOFJF\
    LADAGPG\x120\n\x0bCLMCJCOAHJA\x18\x01\x20\x01(\x0b2\x0c.LOLENBEAHBIH\0R\
    \x0bCLMCJCOAHJA\x120\n\x0bILPMCFEPLHD\x18\x0b\x20\x01(\x0b2\x0c.IGKEEHMG\
    CPAH\0R\x0bILPMCFEPLHD\x120\n\x0bEABFCLLKPJA\x18\x04\x20\x01(\x0b2\x0c.A\
    LGENLCOGGIH\0R\x0bEABFCLLKPJA\x120\n\x0bGDFAPBIOMGP\x18\x03\x20\x01(\x0b\
    2\x0c.AIFKHOMFGLFH\0R\x0bGDFAPBIOMGP\x120\n\x0bJGBLIMAOOKD\x18\r\x20\x01\
    (\x0b2\x0c.JPBJLKJBJOAH\0R\x0bJGBLIMAOOKD\x120\n\x0bEPEJBIOEJGH\x18\x0e\
    \x20\x01(\x0b2\x0c.MFDALMKKHOMH\0R\x0bEPEJBIOEJGH\x120\n\x0bLGKFIGMHHOG\
    \x18\x0c\x20\x01(\x0b2\x0c.BHIHNLGPFFGH\0R\x0bLGKFIGMHHOG\x120\n\x0bKHCD\
    HCNGFFD\x18\x02\x20\x01(\x0b2\x0c.HOMJEMILMMFH\0R\x0bKHCDHCNGFFD\x121\n\
    \x0bMBIFDIPFMDN\x18\xbd\r\x20\x01(\x0b2\x0c.EGLBNLJHBFJH\0R\x0bMBIFDIPFM\
    DN\x121\n\x0bPHFPNGODBLD\x18\xca\x05\x20\x01(\x0b2\x0c.OKLHBCFMBBOH\0R\
    \x0bPHFPNGODBLD\x121\n\x0bNCFFKKBBBOF\x18\xb7\x01\x20\x01(\x0b2\x0c.FAJO\
    FMFCJEMH\0R\x0bNCFFKKBBBOF\x121\n\x0bINDJMLOCFKI\x18\xd7\x0c\x20\x01(\
    \x0b2\x0c.OAGAOPCJDJAH\0R\x0bINDJMLOCFKI\x121\n\x0bMBAMPALALIE\x18\xe8\
    \x08\x20\x01(\x0b2\x0c.IAKNHMEGIKOH\0R\x0bMBAMPALALIE\x121\n\x0bFNEFFJOD\
    FJI\x18\xb1\x0e\x20\x01(\x0b2\x0c.LIMLKCFGKFAH\0R\x0bFNEFFJODFJI\x121\n\
    \x0bPGCPAICCCKH\x18\x8b\x02\x20\x01(\x0b2\x0c.MKGOHMIHGGJH\0R\x0bPGCPAIC\
    CCKHB\r\n\x0bECOEKHPGMEAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(22);
            deps.push(super::AIFKHOMFGLF::file_descriptor().clone());
            deps.push(super::ALGENLCOGGI::file_descriptor().clone());
            deps.push(super::BHIHNLGPFFG::file_descriptor().clone());
            deps.push(super::CIFDFLDEOKC::file_descriptor().clone());
            deps.push(super::EGLBNLJHBFJ::file_descriptor().clone());
            deps.push(super::FAJOFMFCJEM::file_descriptor().clone());
            deps.push(super::HIFEBJCJLCN::file_descriptor().clone());
            deps.push(super::HMCAPGMLPOB::file_descriptor().clone());
            deps.push(super::HOMJEMILMMF::file_descriptor().clone());
            deps.push(super::IAKNHMEGIKO::file_descriptor().clone());
            deps.push(super::IGKEEHMGCPA::file_descriptor().clone());
            deps.push(super::JBHPFNNFKIP::file_descriptor().clone());
            deps.push(super::JKPNBBIIBNP::file_descriptor().clone());
            deps.push(super::JPBJLKJBJOA::file_descriptor().clone());
            deps.push(super::KOJPPIAGBDF::file_descriptor().clone());
            deps.push(super::LIMLKCFGKFA::file_descriptor().clone());
            deps.push(super::LOLENBEAHBI::file_descriptor().clone());
            deps.push(super::MFDALMKKHOM::file_descriptor().clone());
            deps.push(super::MKGOHMIHGGJ::file_descriptor().clone());
            deps.push(super::OAGAOPCJDJA::file_descriptor().clone());
            deps.push(super::OHCMFGGBJCJ::file_descriptor().clone());
            deps.push(super::OKLHBCFMBBO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(IBEIIHLDKAN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
