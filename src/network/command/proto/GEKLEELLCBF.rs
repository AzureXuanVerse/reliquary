// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GEKLEELLCBF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:GEKLEELLCBF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GEKLEELLCBF {
    // message fields
    // @@protoc_insertion_point(field:GEKLEELLCBF.EJOIJGCLCJO)
    pub EJOIJGCLCJO: bool,
    // @@protoc_insertion_point(field:GEKLEELLCBF.status)
    pub status: ::protobuf::EnumOrUnknown<super::RogueTournLevelStatus::RogueTournLevelStatus>,
    // @@protoc_insertion_point(field:GEKLEELLCBF.LGBOHDICFPK)
    pub LGBOHDICFPK: bool,
    // @@protoc_insertion_point(field:GEKLEELLCBF.AHOOAFGDEHF)
    pub AHOOAFGDEHF: ::std::vec::Vec<super::BABHBOMOMDF::BABHBOMOMDF>,
    // @@protoc_insertion_point(field:GEKLEELLCBF.reason)
    pub reason: ::protobuf::EnumOrUnknown<super::AKKHKMECAFL::AKKHKMECAFL>,
    // @@protoc_insertion_point(field:GEKLEELLCBF.LFCDODFMHHN)
    pub LFCDODFMHHN: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GEKLEELLCBF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GEKLEELLCBF {
    fn default() -> &'a GEKLEELLCBF {
        <GEKLEELLCBF as ::protobuf::Message>::default_instance()
    }
}

impl GEKLEELLCBF {
    pub fn new() -> GEKLEELLCBF {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EJOIJGCLCJO",
            |m: &GEKLEELLCBF| { &m.EJOIJGCLCJO },
            |m: &mut GEKLEELLCBF| { &mut m.EJOIJGCLCJO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &GEKLEELLCBF| { &m.status },
            |m: &mut GEKLEELLCBF| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LGBOHDICFPK",
            |m: &GEKLEELLCBF| { &m.LGBOHDICFPK },
            |m: &mut GEKLEELLCBF| { &mut m.LGBOHDICFPK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AHOOAFGDEHF",
            |m: &GEKLEELLCBF| { &m.AHOOAFGDEHF },
            |m: &mut GEKLEELLCBF| { &mut m.AHOOAFGDEHF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reason",
            |m: &GEKLEELLCBF| { &m.reason },
            |m: &mut GEKLEELLCBF| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LFCDODFMHHN",
            |m: &GEKLEELLCBF| { &m.LFCDODFMHHN },
            |m: &mut GEKLEELLCBF| { &mut m.LFCDODFMHHN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GEKLEELLCBF>(
            "GEKLEELLCBF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GEKLEELLCBF {
    const NAME: &'static str = "GEKLEELLCBF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.EJOIJGCLCJO = is.read_bool()?;
                },
                72 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                48 => {
                    self.LGBOHDICFPK = is.read_bool()?;
                },
                66 => {
                    self.AHOOAFGDEHF.push(is.read_message()?);
                },
                112 => {
                    self.reason = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.LFCDODFMHHN = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.EJOIJGCLCJO != false {
            my_size += 1 + 1;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::RogueTournLevelStatus::RogueTournLevelStatus::ROGUE_TOURN_LEVEL_STATUS_NONE) {
            my_size += ::protobuf::rt::int32_size(9, self.status.value());
        }
        if self.LGBOHDICFPK != false {
            my_size += 1 + 1;
        }
        for value in &self.AHOOAFGDEHF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.reason != ::protobuf::EnumOrUnknown::new(super::AKKHKMECAFL::AKKHKMECAFL::ROGUE_TOURN_SETTLE_REASON_NONE) {
            my_size += ::protobuf::rt::int32_size(14, self.reason.value());
        }
        if self.LFCDODFMHHN != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.LFCDODFMHHN);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.EJOIJGCLCJO != false {
            os.write_bool(2, self.EJOIJGCLCJO)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::RogueTournLevelStatus::RogueTournLevelStatus::ROGUE_TOURN_LEVEL_STATUS_NONE) {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if self.LGBOHDICFPK != false {
            os.write_bool(6, self.LGBOHDICFPK)?;
        }
        for v in &self.AHOOAFGDEHF {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.reason != ::protobuf::EnumOrUnknown::new(super::AKKHKMECAFL::AKKHKMECAFL::ROGUE_TOURN_SETTLE_REASON_NONE) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.reason))?;
        }
        if self.LFCDODFMHHN != 0 {
            os.write_uint32(4, self.LFCDODFMHHN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GEKLEELLCBF {
        GEKLEELLCBF::new()
    }

    fn clear(&mut self) {
        self.EJOIJGCLCJO = false;
        self.status = ::protobuf::EnumOrUnknown::new(super::RogueTournLevelStatus::RogueTournLevelStatus::ROGUE_TOURN_LEVEL_STATUS_NONE);
        self.LGBOHDICFPK = false;
        self.AHOOAFGDEHF.clear();
        self.reason = ::protobuf::EnumOrUnknown::new(super::AKKHKMECAFL::AKKHKMECAFL::ROGUE_TOURN_SETTLE_REASON_NONE);
        self.LFCDODFMHHN = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GEKLEELLCBF {
        static instance: GEKLEELLCBF = GEKLEELLCBF {
            EJOIJGCLCJO: false,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            LGBOHDICFPK: false,
            AHOOAFGDEHF: ::std::vec::Vec::new(),
            reason: ::protobuf::EnumOrUnknown::from_i32(0),
            LFCDODFMHHN: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GEKLEELLCBF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GEKLEELLCBF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GEKLEELLCBF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GEKLEELLCBF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GEKLEELLCBF.proto\x1a\x11AKKHKMECAFL.proto\x1a\x11BABHBOMOMDF.prot\
    o\x1a\x1bRogueTournLevelStatus.proto\"\xf9\x01\n\x0bGEKLEELLCBF\x12\x20\
    \n\x0bEJOIJGCLCJO\x18\x02\x20\x01(\x08R\x0bEJOIJGCLCJO\x12.\n\x06status\
    \x18\t\x20\x01(\x0e2\x16.RogueTournLevelStatusR\x06status\x12\x20\n\x0bL\
    GBOHDICFPK\x18\x06\x20\x01(\x08R\x0bLGBOHDICFPK\x12.\n\x0bAHOOAFGDEHF\
    \x18\x08\x20\x03(\x0b2\x0c.BABHBOMOMDFR\x0bAHOOAFGDEHF\x12$\n\x06reason\
    \x18\x0e\x20\x01(\x0e2\x0c.AKKHKMECAFLR\x06reason\x12\x20\n\x0bLFCDODFMH\
    HN\x18\x04\x20\x01(\rR\x0bLFCDODFMHHNb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::AKKHKMECAFL::file_descriptor().clone());
            deps.push(super::BABHBOMOMDF::file_descriptor().clone());
            deps.push(super::RogueTournLevelStatus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GEKLEELLCBF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
