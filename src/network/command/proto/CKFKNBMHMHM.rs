// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CKFKNBMHMHM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:CKFKNBMHMHM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CKFKNBMHMHM {
    // message fields
    // @@protoc_insertion_point(field:CKFKNBMHMHM.NLMHPLDMCMD)
    pub NLMHPLDMCMD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.GIBCHCAGIAN)
    pub GIBCHCAGIAN: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.CBFHIDMKFLB)
    pub CBFHIDMKFLB: u32,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.difficulty_level)
    pub difficulty_level: u32,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.FBFJMPFBCHB)
    pub FBFJMPFBCHB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.CHCBOPFLICI)
    pub CHCBOPFLICI: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.HPLJNILNICK)
    pub HPLJNILNICK: u32,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.EAEFKGOKFKH)
    pub EAEFKGOKFKH: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.NDBOJANDNJN)
    pub NDBOJANDNJN: u32,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.level_id)
    pub level_id: u32,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.OBNDMKNGOJJ)
    pub OBNDMKNGOJJ: u32,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.NODMOBECPEO)
    pub NODMOBECPEO: u32,
    // @@protoc_insertion_point(field:CKFKNBMHMHM.avatar_list)
    pub avatar_list: ::std::vec::Vec<super::BHMCFKHILFO::BHMCFKHILFO>,
    // special fields
    // @@protoc_insertion_point(special_field:CKFKNBMHMHM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CKFKNBMHMHM {
    fn default() -> &'a CKFKNBMHMHM {
        <CKFKNBMHMHM as ::protobuf::Message>::default_instance()
    }
}

impl CKFKNBMHMHM {
    pub fn new() -> CKFKNBMHMHM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NLMHPLDMCMD",
            |m: &CKFKNBMHMHM| { &m.NLMHPLDMCMD },
            |m: &mut CKFKNBMHMHM| { &mut m.NLMHPLDMCMD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "GIBCHCAGIAN",
            |m: &CKFKNBMHMHM| { &m.GIBCHCAGIAN },
            |m: &mut CKFKNBMHMHM| { &mut m.GIBCHCAGIAN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CBFHIDMKFLB",
            |m: &CKFKNBMHMHM| { &m.CBFHIDMKFLB },
            |m: &mut CKFKNBMHMHM| { &mut m.CBFHIDMKFLB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "difficulty_level",
            |m: &CKFKNBMHMHM| { &m.difficulty_level },
            |m: &mut CKFKNBMHMHM| { &mut m.difficulty_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FBFJMPFBCHB",
            |m: &CKFKNBMHMHM| { &m.FBFJMPFBCHB },
            |m: &mut CKFKNBMHMHM| { &mut m.FBFJMPFBCHB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "CHCBOPFLICI",
            |m: &CKFKNBMHMHM| { &m.CHCBOPFLICI },
            |m: &mut CKFKNBMHMHM| { &mut m.CHCBOPFLICI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HPLJNILNICK",
            |m: &CKFKNBMHMHM| { &m.HPLJNILNICK },
            |m: &mut CKFKNBMHMHM| { &mut m.HPLJNILNICK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "EAEFKGOKFKH",
            |m: &CKFKNBMHMHM| { &m.EAEFKGOKFKH },
            |m: &mut CKFKNBMHMHM| { &mut m.EAEFKGOKFKH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NDBOJANDNJN",
            |m: &CKFKNBMHMHM| { &m.NDBOJANDNJN },
            |m: &mut CKFKNBMHMHM| { &mut m.NDBOJANDNJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level_id",
            |m: &CKFKNBMHMHM| { &m.level_id },
            |m: &mut CKFKNBMHMHM| { &mut m.level_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBNDMKNGOJJ",
            |m: &CKFKNBMHMHM| { &m.OBNDMKNGOJJ },
            |m: &mut CKFKNBMHMHM| { &mut m.OBNDMKNGOJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NODMOBECPEO",
            |m: &CKFKNBMHMHM| { &m.NODMOBECPEO },
            |m: &mut CKFKNBMHMHM| { &mut m.NODMOBECPEO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &CKFKNBMHMHM| { &m.avatar_list },
            |m: &mut CKFKNBMHMHM| { &mut m.avatar_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CKFKNBMHMHM>(
            "CKFKNBMHMHM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CKFKNBMHMHM {
    const NAME: &'static str = "CKFKNBMHMHM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.NLMHPLDMCMD)?;
                },
                64 => {
                    self.NLMHPLDMCMD.push(is.read_uint32()?);
                },
                9778 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.GIBCHCAGIAN.insert(key, value);
                },
                24 => {
                    self.CBFHIDMKFLB = is.read_uint32()?;
                },
                88 => {
                    self.difficulty_level = is.read_uint32()?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.FBFJMPFBCHB)?;
                },
                56 => {
                    self.FBFJMPFBCHB.push(is.read_uint32()?);
                },
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.CHCBOPFLICI.insert(key, value);
                },
                48 => {
                    self.HPLJNILNICK = is.read_uint32()?;
                },
                106 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.EAEFKGOKFKH.insert(key, value);
                },
                72 => {
                    self.NDBOJANDNJN = is.read_uint32()?;
                },
                40 => {
                    self.level_id = is.read_uint32()?;
                },
                16 => {
                    self.OBNDMKNGOJJ = is.read_uint32()?;
                },
                32 => {
                    self.NODMOBECPEO = is.read_uint32()?;
                },
                114 => {
                    self.avatar_list.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(8, &self.NLMHPLDMCMD);
        for (k, v) in &self.GIBCHCAGIAN {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.CBFHIDMKFLB != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.CBFHIDMKFLB);
        }
        if self.difficulty_level != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.difficulty_level);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(7, &self.FBFJMPFBCHB);
        for (k, v) in &self.CHCBOPFLICI {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.HPLJNILNICK != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.HPLJNILNICK);
        }
        for (k, v) in &self.EAEFKGOKFKH {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.NDBOJANDNJN != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.NDBOJANDNJN);
        }
        if self.level_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.level_id);
        }
        if self.OBNDMKNGOJJ != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.OBNDMKNGOJJ);
        }
        if self.NODMOBECPEO != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.NODMOBECPEO);
        }
        for value in &self.avatar_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(8, &self.NLMHPLDMCMD)?;
        for (k, v) in &self.GIBCHCAGIAN {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(9778)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.CBFHIDMKFLB != 0 {
            os.write_uint32(3, self.CBFHIDMKFLB)?;
        }
        if self.difficulty_level != 0 {
            os.write_uint32(11, self.difficulty_level)?;
        }
        os.write_repeated_packed_uint32(7, &self.FBFJMPFBCHB)?;
        for (k, v) in &self.CHCBOPFLICI {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.HPLJNILNICK != 0 {
            os.write_uint32(6, self.HPLJNILNICK)?;
        }
        for (k, v) in &self.EAEFKGOKFKH {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(106)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.NDBOJANDNJN != 0 {
            os.write_uint32(9, self.NDBOJANDNJN)?;
        }
        if self.level_id != 0 {
            os.write_uint32(5, self.level_id)?;
        }
        if self.OBNDMKNGOJJ != 0 {
            os.write_uint32(2, self.OBNDMKNGOJJ)?;
        }
        if self.NODMOBECPEO != 0 {
            os.write_uint32(4, self.NODMOBECPEO)?;
        }
        for v in &self.avatar_list {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CKFKNBMHMHM {
        CKFKNBMHMHM::new()
    }

    fn clear(&mut self) {
        self.NLMHPLDMCMD.clear();
        self.GIBCHCAGIAN.clear();
        self.CBFHIDMKFLB = 0;
        self.difficulty_level = 0;
        self.FBFJMPFBCHB.clear();
        self.CHCBOPFLICI.clear();
        self.HPLJNILNICK = 0;
        self.EAEFKGOKFKH.clear();
        self.NDBOJANDNJN = 0;
        self.level_id = 0;
        self.OBNDMKNGOJJ = 0;
        self.NODMOBECPEO = 0;
        self.avatar_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CKFKNBMHMHM {
        static instance: ::protobuf::rt::Lazy<CKFKNBMHMHM> = ::protobuf::rt::Lazy::new();
        instance.get(CKFKNBMHMHM::new)
    }
}

impl ::protobuf::MessageFull for CKFKNBMHMHM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CKFKNBMHMHM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CKFKNBMHMHM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CKFKNBMHMHM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CKFKNBMHMHM.proto\x1a\x11BHMCFKHILFO.proto\"\xf4\x05\n\x0bCKFKNBMH\
    MHM\x12\x20\n\x0bNLMHPLDMCMD\x18\x08\x20\x03(\rR\x0bNLMHPLDMCMD\x12@\n\
    \x0bGIBCHCAGIAN\x18\xc6\t\x20\x03(\x0b2\x1d.CKFKNBMHMHM.GIBCHCAGIANEntry\
    R\x0bGIBCHCAGIAN\x12\x20\n\x0bCBFHIDMKFLB\x18\x03\x20\x01(\rR\x0bCBFHIDM\
    KFLB\x12)\n\x10difficulty_level\x18\x0b\x20\x01(\rR\x0fdifficultyLevel\
    \x12\x20\n\x0bFBFJMPFBCHB\x18\x07\x20\x03(\rR\x0bFBFJMPFBCHB\x12?\n\x0bC\
    HCBOPFLICI\x18\x01\x20\x03(\x0b2\x1d.CKFKNBMHMHM.CHCBOPFLICIEntryR\x0bCH\
    CBOPFLICI\x12\x20\n\x0bHPLJNILNICK\x18\x06\x20\x01(\rR\x0bHPLJNILNICK\
    \x12?\n\x0bEAEFKGOKFKH\x18\r\x20\x03(\x0b2\x1d.CKFKNBMHMHM.EAEFKGOKFKHEn\
    tryR\x0bEAEFKGOKFKH\x12\x20\n\x0bNDBOJANDNJN\x18\t\x20\x01(\rR\x0bNDBOJA\
    NDNJN\x12\x19\n\x08level_id\x18\x05\x20\x01(\rR\x07levelId\x12\x20\n\x0b\
    OBNDMKNGOJJ\x18\x02\x20\x01(\rR\x0bOBNDMKNGOJJ\x12\x20\n\x0bNODMOBECPEO\
    \x18\x04\x20\x01(\rR\x0bNODMOBECPEO\x12-\n\x0bavatar_list\x18\x0e\x20\
    \x03(\x0b2\x0c.BHMCFKHILFOR\navatarList\x1a>\n\x10GIBCHCAGIANEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x01(\rR\x05value:\x028\x01\x1a>\n\x10CHCBOPFLICIEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05va\
    lue:\x028\x01\x1a>\n\x10EAEFKGOKFKHEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\
    \x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::BHMCFKHILFO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CKFKNBMHMHM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
