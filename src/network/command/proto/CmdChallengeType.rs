// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdChallengeType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdChallengeType)
pub enum CmdChallengeType {
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdChallengeTypeNone)
    CmdChallengeTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdChallengeLineupNotify)
    CmdChallengeLineupNotify = 1702,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdGetChallengeCsReq)
    CmdGetChallengeCsReq = 1720,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdChallengeSettleNotify)
    CmdChallengeSettleNotify = 1770,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdRestartChallengePhaseCsReq)
    CmdRestartChallengePhaseCsReq = 1736,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdLeaveChallengeScRsp)
    CmdLeaveChallengeScRsp = 1721,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdGetChallengeGroupStatisticsScRsp)
    CmdGetChallengeGroupStatisticsScRsp = 1738,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdRestartChallengePhaseScRsp)
    CmdRestartChallengePhaseScRsp = 1787,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdGetChallengeScRsp)
    CmdGetChallengeScRsp = 1791,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdEnterChallengeNextPhaseScRsp)
    CmdEnterChallengeNextPhaseScRsp = 1706,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdGetChallengeGroupStatisticsCsReq)
    CmdGetChallengeGroupStatisticsCsReq = 1785,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdGetCurChallengeCsReq)
    CmdGetCurChallengeCsReq = 1777,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdGetCurChallengeScRsp)
    CmdGetCurChallengeScRsp = 1780,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdStartChallengeCsReq)
    CmdStartChallengeCsReq = 1767,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdStartChallengeScRsp)
    CmdStartChallengeScRsp = 1739,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdLeaveChallengeCsReq)
    CmdLeaveChallengeCsReq = 1727,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdEnterChallengeNextPhaseCsReq)
    CmdEnterChallengeNextPhaseCsReq = 1709,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdStartPartialChallengeCsReq)
    CmdStartPartialChallengeCsReq = 1752,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdStartPartialChallengeScRsp)
    CmdStartPartialChallengeScRsp = 1768,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdChallengeBossPhaseSettleNotify)
    CmdChallengeBossPhaseSettleNotify = 1731,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdTakeChallengeRewardScRsp)
    CmdTakeChallengeRewardScRsp = 1798,
    // @@protoc_insertion_point(enum_value:CmdChallengeType.CmdTakeChallengeRewardCsReq)
    CmdTakeChallengeRewardCsReq = 1773,
}

impl ::protobuf::Enum for CmdChallengeType {
    const NAME: &'static str = "CmdChallengeType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdChallengeType> {
        match value {
            0 => ::std::option::Option::Some(CmdChallengeType::CmdChallengeTypeNone),
            1702 => ::std::option::Option::Some(CmdChallengeType::CmdChallengeLineupNotify),
            1720 => ::std::option::Option::Some(CmdChallengeType::CmdGetChallengeCsReq),
            1770 => ::std::option::Option::Some(CmdChallengeType::CmdChallengeSettleNotify),
            1736 => ::std::option::Option::Some(CmdChallengeType::CmdRestartChallengePhaseCsReq),
            1721 => ::std::option::Option::Some(CmdChallengeType::CmdLeaveChallengeScRsp),
            1738 => ::std::option::Option::Some(CmdChallengeType::CmdGetChallengeGroupStatisticsScRsp),
            1787 => ::std::option::Option::Some(CmdChallengeType::CmdRestartChallengePhaseScRsp),
            1791 => ::std::option::Option::Some(CmdChallengeType::CmdGetChallengeScRsp),
            1706 => ::std::option::Option::Some(CmdChallengeType::CmdEnterChallengeNextPhaseScRsp),
            1785 => ::std::option::Option::Some(CmdChallengeType::CmdGetChallengeGroupStatisticsCsReq),
            1777 => ::std::option::Option::Some(CmdChallengeType::CmdGetCurChallengeCsReq),
            1780 => ::std::option::Option::Some(CmdChallengeType::CmdGetCurChallengeScRsp),
            1767 => ::std::option::Option::Some(CmdChallengeType::CmdStartChallengeCsReq),
            1739 => ::std::option::Option::Some(CmdChallengeType::CmdStartChallengeScRsp),
            1727 => ::std::option::Option::Some(CmdChallengeType::CmdLeaveChallengeCsReq),
            1709 => ::std::option::Option::Some(CmdChallengeType::CmdEnterChallengeNextPhaseCsReq),
            1752 => ::std::option::Option::Some(CmdChallengeType::CmdStartPartialChallengeCsReq),
            1768 => ::std::option::Option::Some(CmdChallengeType::CmdStartPartialChallengeScRsp),
            1731 => ::std::option::Option::Some(CmdChallengeType::CmdChallengeBossPhaseSettleNotify),
            1798 => ::std::option::Option::Some(CmdChallengeType::CmdTakeChallengeRewardScRsp),
            1773 => ::std::option::Option::Some(CmdChallengeType::CmdTakeChallengeRewardCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdChallengeType> {
        match str {
            "CmdChallengeTypeNone" => ::std::option::Option::Some(CmdChallengeType::CmdChallengeTypeNone),
            "CmdChallengeLineupNotify" => ::std::option::Option::Some(CmdChallengeType::CmdChallengeLineupNotify),
            "CmdGetChallengeCsReq" => ::std::option::Option::Some(CmdChallengeType::CmdGetChallengeCsReq),
            "CmdChallengeSettleNotify" => ::std::option::Option::Some(CmdChallengeType::CmdChallengeSettleNotify),
            "CmdRestartChallengePhaseCsReq" => ::std::option::Option::Some(CmdChallengeType::CmdRestartChallengePhaseCsReq),
            "CmdLeaveChallengeScRsp" => ::std::option::Option::Some(CmdChallengeType::CmdLeaveChallengeScRsp),
            "CmdGetChallengeGroupStatisticsScRsp" => ::std::option::Option::Some(CmdChallengeType::CmdGetChallengeGroupStatisticsScRsp),
            "CmdRestartChallengePhaseScRsp" => ::std::option::Option::Some(CmdChallengeType::CmdRestartChallengePhaseScRsp),
            "CmdGetChallengeScRsp" => ::std::option::Option::Some(CmdChallengeType::CmdGetChallengeScRsp),
            "CmdEnterChallengeNextPhaseScRsp" => ::std::option::Option::Some(CmdChallengeType::CmdEnterChallengeNextPhaseScRsp),
            "CmdGetChallengeGroupStatisticsCsReq" => ::std::option::Option::Some(CmdChallengeType::CmdGetChallengeGroupStatisticsCsReq),
            "CmdGetCurChallengeCsReq" => ::std::option::Option::Some(CmdChallengeType::CmdGetCurChallengeCsReq),
            "CmdGetCurChallengeScRsp" => ::std::option::Option::Some(CmdChallengeType::CmdGetCurChallengeScRsp),
            "CmdStartChallengeCsReq" => ::std::option::Option::Some(CmdChallengeType::CmdStartChallengeCsReq),
            "CmdStartChallengeScRsp" => ::std::option::Option::Some(CmdChallengeType::CmdStartChallengeScRsp),
            "CmdLeaveChallengeCsReq" => ::std::option::Option::Some(CmdChallengeType::CmdLeaveChallengeCsReq),
            "CmdEnterChallengeNextPhaseCsReq" => ::std::option::Option::Some(CmdChallengeType::CmdEnterChallengeNextPhaseCsReq),
            "CmdStartPartialChallengeCsReq" => ::std::option::Option::Some(CmdChallengeType::CmdStartPartialChallengeCsReq),
            "CmdStartPartialChallengeScRsp" => ::std::option::Option::Some(CmdChallengeType::CmdStartPartialChallengeScRsp),
            "CmdChallengeBossPhaseSettleNotify" => ::std::option::Option::Some(CmdChallengeType::CmdChallengeBossPhaseSettleNotify),
            "CmdTakeChallengeRewardScRsp" => ::std::option::Option::Some(CmdChallengeType::CmdTakeChallengeRewardScRsp),
            "CmdTakeChallengeRewardCsReq" => ::std::option::Option::Some(CmdChallengeType::CmdTakeChallengeRewardCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdChallengeType] = &[
        CmdChallengeType::CmdChallengeTypeNone,
        CmdChallengeType::CmdChallengeLineupNotify,
        CmdChallengeType::CmdGetChallengeCsReq,
        CmdChallengeType::CmdChallengeSettleNotify,
        CmdChallengeType::CmdRestartChallengePhaseCsReq,
        CmdChallengeType::CmdLeaveChallengeScRsp,
        CmdChallengeType::CmdGetChallengeGroupStatisticsScRsp,
        CmdChallengeType::CmdRestartChallengePhaseScRsp,
        CmdChallengeType::CmdGetChallengeScRsp,
        CmdChallengeType::CmdEnterChallengeNextPhaseScRsp,
        CmdChallengeType::CmdGetChallengeGroupStatisticsCsReq,
        CmdChallengeType::CmdGetCurChallengeCsReq,
        CmdChallengeType::CmdGetCurChallengeScRsp,
        CmdChallengeType::CmdStartChallengeCsReq,
        CmdChallengeType::CmdStartChallengeScRsp,
        CmdChallengeType::CmdLeaveChallengeCsReq,
        CmdChallengeType::CmdEnterChallengeNextPhaseCsReq,
        CmdChallengeType::CmdStartPartialChallengeCsReq,
        CmdChallengeType::CmdStartPartialChallengeScRsp,
        CmdChallengeType::CmdChallengeBossPhaseSettleNotify,
        CmdChallengeType::CmdTakeChallengeRewardScRsp,
        CmdChallengeType::CmdTakeChallengeRewardCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdChallengeType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdChallengeType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdChallengeType::CmdChallengeTypeNone => 0,
            CmdChallengeType::CmdChallengeLineupNotify => 1,
            CmdChallengeType::CmdGetChallengeCsReq => 2,
            CmdChallengeType::CmdChallengeSettleNotify => 3,
            CmdChallengeType::CmdRestartChallengePhaseCsReq => 4,
            CmdChallengeType::CmdLeaveChallengeScRsp => 5,
            CmdChallengeType::CmdGetChallengeGroupStatisticsScRsp => 6,
            CmdChallengeType::CmdRestartChallengePhaseScRsp => 7,
            CmdChallengeType::CmdGetChallengeScRsp => 8,
            CmdChallengeType::CmdEnterChallengeNextPhaseScRsp => 9,
            CmdChallengeType::CmdGetChallengeGroupStatisticsCsReq => 10,
            CmdChallengeType::CmdGetCurChallengeCsReq => 11,
            CmdChallengeType::CmdGetCurChallengeScRsp => 12,
            CmdChallengeType::CmdStartChallengeCsReq => 13,
            CmdChallengeType::CmdStartChallengeScRsp => 14,
            CmdChallengeType::CmdLeaveChallengeCsReq => 15,
            CmdChallengeType::CmdEnterChallengeNextPhaseCsReq => 16,
            CmdChallengeType::CmdStartPartialChallengeCsReq => 17,
            CmdChallengeType::CmdStartPartialChallengeScRsp => 18,
            CmdChallengeType::CmdChallengeBossPhaseSettleNotify => 19,
            CmdChallengeType::CmdTakeChallengeRewardScRsp => 20,
            CmdChallengeType::CmdTakeChallengeRewardCsReq => 21,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdChallengeType {
    fn default() -> Self {
        CmdChallengeType::CmdChallengeTypeNone
    }
}

impl CmdChallengeType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdChallengeType>("CmdChallengeType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16CmdChallengeType.proto*\xec\x05\n\x10CmdChallengeType\x12\x18\n\
    \x14CmdChallengeTypeNone\x10\0\x12\x1d\n\x18CmdChallengeLineupNotify\x10\
    \xa6\r\x12\x19\n\x14CmdGetChallengeCsReq\x10\xb8\r\x12\x1d\n\x18CmdChall\
    engeSettleNotify\x10\xea\r\x12\"\n\x1dCmdRestartChallengePhaseCsReq\x10\
    \xc8\r\x12\x1b\n\x16CmdLeaveChallengeScRsp\x10\xb9\r\x12(\n#CmdGetChalle\
    ngeGroupStatisticsScRsp\x10\xca\r\x12\"\n\x1dCmdRestartChallengePhaseScR\
    sp\x10\xfb\r\x12\x19\n\x14CmdGetChallengeScRsp\x10\xff\r\x12$\n\x1fCmdEn\
    terChallengeNextPhaseScRsp\x10\xaa\r\x12(\n#CmdGetChallengeGroupStatisti\
    csCsReq\x10\xf9\r\x12\x1c\n\x17CmdGetCurChallengeCsReq\x10\xf1\r\x12\x1c\
    \n\x17CmdGetCurChallengeScRsp\x10\xf4\r\x12\x1b\n\x16CmdStartChallengeCs\
    Req\x10\xe7\r\x12\x1b\n\x16CmdStartChallengeScRsp\x10\xcb\r\x12\x1b\n\
    \x16CmdLeaveChallengeCsReq\x10\xbf\r\x12$\n\x1fCmdEnterChallengeNextPhas\
    eCsReq\x10\xad\r\x12\"\n\x1dCmdStartPartialChallengeCsReq\x10\xd8\r\x12\
    \"\n\x1dCmdStartPartialChallengeScRsp\x10\xe8\r\x12&\n!CmdChallengeBossP\
    haseSettleNotify\x10\xc3\r\x12\x20\n\x1bCmdTakeChallengeRewardScRsp\x10\
    \x86\x0e\x12\x20\n\x1bCmdTakeChallengeRewardCsReq\x10\xed\rb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdChallengeType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
