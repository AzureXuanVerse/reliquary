// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LFGGPNGKBCH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:LFGGPNGKBCH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LFGGPNGKBCH {
    // message fields
    // @@protoc_insertion_point(field:LFGGPNGKBCH.JIFKHCKPNFM)
    pub JIFKHCKPNFM: u32,
    // @@protoc_insertion_point(field:LFGGPNGKBCH.IAKHMMELMFD)
    pub IAKHMMELMFD: ::std::collections::HashMap<u32, super::ItemCostList::ItemCostList>,
    // @@protoc_insertion_point(field:LFGGPNGKBCH.DMMAMJGNGNN)
    pub DMMAMJGNGNN: i32,
    // @@protoc_insertion_point(field:LFGGPNGKBCH.FAIDIBODMCH)
    pub FAIDIBODMCH: ::protobuf::MessageField<super::ItemCostList::ItemCostList>,
    // special fields
    // @@protoc_insertion_point(special_field:LFGGPNGKBCH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LFGGPNGKBCH {
    fn default() -> &'a LFGGPNGKBCH {
        <LFGGPNGKBCH as ::protobuf::Message>::default_instance()
    }
}

impl LFGGPNGKBCH {
    pub fn new() -> LFGGPNGKBCH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JIFKHCKPNFM",
            |m: &LFGGPNGKBCH| { &m.JIFKHCKPNFM },
            |m: &mut LFGGPNGKBCH| { &mut m.JIFKHCKPNFM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "IAKHMMELMFD",
            |m: &LFGGPNGKBCH| { &m.IAKHMMELMFD },
            |m: &mut LFGGPNGKBCH| { &mut m.IAKHMMELMFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DMMAMJGNGNN",
            |m: &LFGGPNGKBCH| { &m.DMMAMJGNGNN },
            |m: &mut LFGGPNGKBCH| { &mut m.DMMAMJGNGNN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemCostList::ItemCostList>(
            "FAIDIBODMCH",
            |m: &LFGGPNGKBCH| { &m.FAIDIBODMCH },
            |m: &mut LFGGPNGKBCH| { &mut m.FAIDIBODMCH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LFGGPNGKBCH>(
            "LFGGPNGKBCH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LFGGPNGKBCH {
    const NAME: &'static str = "LFGGPNGKBCH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.JIFKHCKPNFM = is.read_uint32()?;
                },
                90 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.IAKHMMELMFD.insert(key, value);
                },
                64 => {
                    self.DMMAMJGNGNN = is.read_int32()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FAIDIBODMCH)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.JIFKHCKPNFM != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.JIFKHCKPNFM);
        }
        for (k, v) in &self.IAKHMMELMFD {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.DMMAMJGNGNN != 0 {
            my_size += ::protobuf::rt::int32_size(8, self.DMMAMJGNGNN);
        }
        if let Some(v) = self.FAIDIBODMCH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.JIFKHCKPNFM != 0 {
            os.write_uint32(15, self.JIFKHCKPNFM)?;
        }
        for (k, v) in &self.IAKHMMELMFD {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(90)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.DMMAMJGNGNN != 0 {
            os.write_int32(8, self.DMMAMJGNGNN)?;
        }
        if let Some(v) = self.FAIDIBODMCH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LFGGPNGKBCH {
        LFGGPNGKBCH::new()
    }

    fn clear(&mut self) {
        self.JIFKHCKPNFM = 0;
        self.IAKHMMELMFD.clear();
        self.DMMAMJGNGNN = 0;
        self.FAIDIBODMCH.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LFGGPNGKBCH {
        static instance: ::protobuf::rt::Lazy<LFGGPNGKBCH> = ::protobuf::rt::Lazy::new();
        instance.get(LFGGPNGKBCH::new)
    }
}

impl ::protobuf::MessageFull for LFGGPNGKBCH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LFGGPNGKBCH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LFGGPNGKBCH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LFGGPNGKBCH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LFGGPNGKBCH.proto\x1a\x12ItemCostList.proto\"\x92\x02\n\x0bLFGGPNG\
    KBCH\x12\x20\n\x0bJIFKHCKPNFM\x18\x0f\x20\x01(\rR\x0bJIFKHCKPNFM\x12?\n\
    \x0bIAKHMMELMFD\x18\x0b\x20\x03(\x0b2\x1d.LFGGPNGKBCH.IAKHMMELMFDEntryR\
    \x0bIAKHMMELMFD\x12\x20\n\x0bDMMAMJGNGNN\x18\x08\x20\x01(\x05R\x0bDMMAMJ\
    GNGNN\x12/\n\x0bFAIDIBODMCH\x18\x05\x20\x01(\x0b2\r.ItemCostListR\x0bFAI\
    DIBODMCH\x1aM\n\x10IAKHMMELMFDEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\
    \x03key\x12#\n\x05value\x18\x02\x20\x01(\x0b2\r.ItemCostListR\x05value:\
    \x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ItemCostList::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LFGGPNGKBCH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
