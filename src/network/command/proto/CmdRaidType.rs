// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdRaidType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdRaidType)
pub enum CmdRaidType {
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdRaidTypeNone)
    CmdRaidTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdGetChallengeRaidInfoCsReq)
    CmdGetChallengeRaidInfoCsReq = 2206,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdRaidKickByServerScNotify)
    CmdRaidKickByServerScNotify = 2225,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdGetSaveRaidCsReq)
    CmdGetSaveRaidCsReq = 2273,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdTakeChallengeRaidRewardScRsp)
    CmdTakeChallengeRaidRewardScRsp = 2226,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdSetClientRaidTargetCountScRsp)
    CmdSetClientRaidTargetCountScRsp = 2250,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdLeaveRaidCsReq)
    CmdLeaveRaidCsReq = 2247,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdGetRaidInfoCsReq)
    CmdGetRaidInfoCsReq = 2295,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdStartRaidCsReq)
    CmdStartRaidCsReq = 2211,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdSetClientRaidTargetCountCsReq)
    CmdSetClientRaidTargetCountCsReq = 2236,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdGetRaidInfoScRsp)
    CmdGetRaidInfoScRsp = 2218,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdDelSaveRaidScNotify)
    CmdDelSaveRaidScNotify = 2257,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdStartRaidScRsp)
    CmdStartRaidScRsp = 2213,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdGetAllSaveRaidCsReq)
    CmdGetAllSaveRaidCsReq = 2291,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdTakeChallengeRaidRewardCsReq)
    CmdTakeChallengeRaidRewardCsReq = 2289,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdRaidInfoNotify)
    CmdRaidInfoNotify = 2235,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdGetSaveRaidScRsp)
    CmdGetSaveRaidScRsp = 2277,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdLeaveRaidScRsp)
    CmdLeaveRaidScRsp = 2209,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdGetAllSaveRaidScRsp)
    CmdGetAllSaveRaidScRsp = 2293,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdGetChallengeRaidInfoScRsp)
    CmdGetChallengeRaidInfoScRsp = 2270,
    // @@protoc_insertion_point(enum_value:CmdRaidType.CmdChallengeRaidNotify)
    CmdChallengeRaidNotify = 2230,
}

impl ::protobuf::Enum for CmdRaidType {
    const NAME: &'static str = "CmdRaidType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdRaidType> {
        match value {
            0 => ::std::option::Option::Some(CmdRaidType::CmdRaidTypeNone),
            2206 => ::std::option::Option::Some(CmdRaidType::CmdGetChallengeRaidInfoCsReq),
            2225 => ::std::option::Option::Some(CmdRaidType::CmdRaidKickByServerScNotify),
            2273 => ::std::option::Option::Some(CmdRaidType::CmdGetSaveRaidCsReq),
            2226 => ::std::option::Option::Some(CmdRaidType::CmdTakeChallengeRaidRewardScRsp),
            2250 => ::std::option::Option::Some(CmdRaidType::CmdSetClientRaidTargetCountScRsp),
            2247 => ::std::option::Option::Some(CmdRaidType::CmdLeaveRaidCsReq),
            2295 => ::std::option::Option::Some(CmdRaidType::CmdGetRaidInfoCsReq),
            2211 => ::std::option::Option::Some(CmdRaidType::CmdStartRaidCsReq),
            2236 => ::std::option::Option::Some(CmdRaidType::CmdSetClientRaidTargetCountCsReq),
            2218 => ::std::option::Option::Some(CmdRaidType::CmdGetRaidInfoScRsp),
            2257 => ::std::option::Option::Some(CmdRaidType::CmdDelSaveRaidScNotify),
            2213 => ::std::option::Option::Some(CmdRaidType::CmdStartRaidScRsp),
            2291 => ::std::option::Option::Some(CmdRaidType::CmdGetAllSaveRaidCsReq),
            2289 => ::std::option::Option::Some(CmdRaidType::CmdTakeChallengeRaidRewardCsReq),
            2235 => ::std::option::Option::Some(CmdRaidType::CmdRaidInfoNotify),
            2277 => ::std::option::Option::Some(CmdRaidType::CmdGetSaveRaidScRsp),
            2209 => ::std::option::Option::Some(CmdRaidType::CmdLeaveRaidScRsp),
            2293 => ::std::option::Option::Some(CmdRaidType::CmdGetAllSaveRaidScRsp),
            2270 => ::std::option::Option::Some(CmdRaidType::CmdGetChallengeRaidInfoScRsp),
            2230 => ::std::option::Option::Some(CmdRaidType::CmdChallengeRaidNotify),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdRaidType> {
        match str {
            "CmdRaidTypeNone" => ::std::option::Option::Some(CmdRaidType::CmdRaidTypeNone),
            "CmdGetChallengeRaidInfoCsReq" => ::std::option::Option::Some(CmdRaidType::CmdGetChallengeRaidInfoCsReq),
            "CmdRaidKickByServerScNotify" => ::std::option::Option::Some(CmdRaidType::CmdRaidKickByServerScNotify),
            "CmdGetSaveRaidCsReq" => ::std::option::Option::Some(CmdRaidType::CmdGetSaveRaidCsReq),
            "CmdTakeChallengeRaidRewardScRsp" => ::std::option::Option::Some(CmdRaidType::CmdTakeChallengeRaidRewardScRsp),
            "CmdSetClientRaidTargetCountScRsp" => ::std::option::Option::Some(CmdRaidType::CmdSetClientRaidTargetCountScRsp),
            "CmdLeaveRaidCsReq" => ::std::option::Option::Some(CmdRaidType::CmdLeaveRaidCsReq),
            "CmdGetRaidInfoCsReq" => ::std::option::Option::Some(CmdRaidType::CmdGetRaidInfoCsReq),
            "CmdStartRaidCsReq" => ::std::option::Option::Some(CmdRaidType::CmdStartRaidCsReq),
            "CmdSetClientRaidTargetCountCsReq" => ::std::option::Option::Some(CmdRaidType::CmdSetClientRaidTargetCountCsReq),
            "CmdGetRaidInfoScRsp" => ::std::option::Option::Some(CmdRaidType::CmdGetRaidInfoScRsp),
            "CmdDelSaveRaidScNotify" => ::std::option::Option::Some(CmdRaidType::CmdDelSaveRaidScNotify),
            "CmdStartRaidScRsp" => ::std::option::Option::Some(CmdRaidType::CmdStartRaidScRsp),
            "CmdGetAllSaveRaidCsReq" => ::std::option::Option::Some(CmdRaidType::CmdGetAllSaveRaidCsReq),
            "CmdTakeChallengeRaidRewardCsReq" => ::std::option::Option::Some(CmdRaidType::CmdTakeChallengeRaidRewardCsReq),
            "CmdRaidInfoNotify" => ::std::option::Option::Some(CmdRaidType::CmdRaidInfoNotify),
            "CmdGetSaveRaidScRsp" => ::std::option::Option::Some(CmdRaidType::CmdGetSaveRaidScRsp),
            "CmdLeaveRaidScRsp" => ::std::option::Option::Some(CmdRaidType::CmdLeaveRaidScRsp),
            "CmdGetAllSaveRaidScRsp" => ::std::option::Option::Some(CmdRaidType::CmdGetAllSaveRaidScRsp),
            "CmdGetChallengeRaidInfoScRsp" => ::std::option::Option::Some(CmdRaidType::CmdGetChallengeRaidInfoScRsp),
            "CmdChallengeRaidNotify" => ::std::option::Option::Some(CmdRaidType::CmdChallengeRaidNotify),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdRaidType] = &[
        CmdRaidType::CmdRaidTypeNone,
        CmdRaidType::CmdGetChallengeRaidInfoCsReq,
        CmdRaidType::CmdRaidKickByServerScNotify,
        CmdRaidType::CmdGetSaveRaidCsReq,
        CmdRaidType::CmdTakeChallengeRaidRewardScRsp,
        CmdRaidType::CmdSetClientRaidTargetCountScRsp,
        CmdRaidType::CmdLeaveRaidCsReq,
        CmdRaidType::CmdGetRaidInfoCsReq,
        CmdRaidType::CmdStartRaidCsReq,
        CmdRaidType::CmdSetClientRaidTargetCountCsReq,
        CmdRaidType::CmdGetRaidInfoScRsp,
        CmdRaidType::CmdDelSaveRaidScNotify,
        CmdRaidType::CmdStartRaidScRsp,
        CmdRaidType::CmdGetAllSaveRaidCsReq,
        CmdRaidType::CmdTakeChallengeRaidRewardCsReq,
        CmdRaidType::CmdRaidInfoNotify,
        CmdRaidType::CmdGetSaveRaidScRsp,
        CmdRaidType::CmdLeaveRaidScRsp,
        CmdRaidType::CmdGetAllSaveRaidScRsp,
        CmdRaidType::CmdGetChallengeRaidInfoScRsp,
        CmdRaidType::CmdChallengeRaidNotify,
    ];
}

impl ::protobuf::EnumFull for CmdRaidType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdRaidType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdRaidType::CmdRaidTypeNone => 0,
            CmdRaidType::CmdGetChallengeRaidInfoCsReq => 1,
            CmdRaidType::CmdRaidKickByServerScNotify => 2,
            CmdRaidType::CmdGetSaveRaidCsReq => 3,
            CmdRaidType::CmdTakeChallengeRaidRewardScRsp => 4,
            CmdRaidType::CmdSetClientRaidTargetCountScRsp => 5,
            CmdRaidType::CmdLeaveRaidCsReq => 6,
            CmdRaidType::CmdGetRaidInfoCsReq => 7,
            CmdRaidType::CmdStartRaidCsReq => 8,
            CmdRaidType::CmdSetClientRaidTargetCountCsReq => 9,
            CmdRaidType::CmdGetRaidInfoScRsp => 10,
            CmdRaidType::CmdDelSaveRaidScNotify => 11,
            CmdRaidType::CmdStartRaidScRsp => 12,
            CmdRaidType::CmdGetAllSaveRaidCsReq => 13,
            CmdRaidType::CmdTakeChallengeRaidRewardCsReq => 14,
            CmdRaidType::CmdRaidInfoNotify => 15,
            CmdRaidType::CmdGetSaveRaidScRsp => 16,
            CmdRaidType::CmdLeaveRaidScRsp => 17,
            CmdRaidType::CmdGetAllSaveRaidScRsp => 18,
            CmdRaidType::CmdGetChallengeRaidInfoScRsp => 19,
            CmdRaidType::CmdChallengeRaidNotify => 20,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdRaidType {
    fn default() -> Self {
        CmdRaidType::CmdRaidTypeNone
    }
}

impl CmdRaidType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdRaidType>("CmdRaidType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CmdRaidType.proto*\xf8\x04\n\x0bCmdRaidType\x12\x13\n\x0fCmdRaidTy\
    peNone\x10\0\x12!\n\x1cCmdGetChallengeRaidInfoCsReq\x10\x9e\x11\x12\x20\
    \n\x1bCmdRaidKickByServerScNotify\x10\xb1\x11\x12\x18\n\x13CmdGetSaveRai\
    dCsReq\x10\xe1\x11\x12$\n\x1fCmdTakeChallengeRaidRewardScRsp\x10\xb2\x11\
    \x12%\n\x20CmdSetClientRaidTargetCountScRsp\x10\xca\x11\x12\x16\n\x11Cmd\
    LeaveRaidCsReq\x10\xc7\x11\x12\x18\n\x13CmdGetRaidInfoCsReq\x10\xf7\x11\
    \x12\x16\n\x11CmdStartRaidCsReq\x10\xa3\x11\x12%\n\x20CmdSetClientRaidTa\
    rgetCountCsReq\x10\xbc\x11\x12\x18\n\x13CmdGetRaidInfoScRsp\x10\xaa\x11\
    \x12\x1b\n\x16CmdDelSaveRaidScNotify\x10\xd1\x11\x12\x16\n\x11CmdStartRa\
    idScRsp\x10\xa5\x11\x12\x1b\n\x16CmdGetAllSaveRaidCsReq\x10\xf3\x11\x12$\
    \n\x1fCmdTakeChallengeRaidRewardCsReq\x10\xf1\x11\x12\x16\n\x11CmdRaidIn\
    foNotify\x10\xbb\x11\x12\x18\n\x13CmdGetSaveRaidScRsp\x10\xe5\x11\x12\
    \x16\n\x11CmdLeaveRaidScRsp\x10\xa1\x11\x12\x1b\n\x16CmdGetAllSaveRaidSc\
    Rsp\x10\xf5\x11\x12!\n\x1cCmdGetChallengeRaidInfoScRsp\x10\xde\x11\x12\
    \x1b\n\x16CmdChallengeRaidNotify\x10\xb6\x11b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdRaidType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
