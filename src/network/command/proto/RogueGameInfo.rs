// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueGameInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueGameInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueGameInfo {
    // message oneof groups
    pub JPBHEOJAKGE: ::std::option::Option<rogue_game_info::JPBHEOJAKGE>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueGameInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueGameInfo {
    fn default() -> &'a RogueGameInfo {
        <RogueGameInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueGameInfo {
    pub fn new() -> RogueGameInfo {
        ::std::default::Default::default()
    }

    // .ChessRogueBuffInfo rogue_buff_info = 12;

    pub fn rogue_buff_info(&self) -> &super::ChessRogueBuffInfo::ChessRogueBuffInfo {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(ref v)) => v,
            _ => <super::ChessRogueBuffInfo::ChessRogueBuffInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_buff_info(&mut self) {
        self.JPBHEOJAKGE = ::std::option::Option::None;
    }

    pub fn has_rogue_buff_info(&self) -> bool {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_buff_info(&mut self, v: super::ChessRogueBuffInfo::ChessRogueBuffInfo) {
        self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_buff_info(&mut self) -> &mut super::ChessRogueBuffInfo::ChessRogueBuffInfo {
        if let ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(_)) = self.JPBHEOJAKGE {
        } else {
            self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(super::ChessRogueBuffInfo::ChessRogueBuffInfo::new()));
        }
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_buff_info(&mut self) -> super::ChessRogueBuffInfo::ChessRogueBuffInfo {
        if self.has_rogue_buff_info() {
            match self.JPBHEOJAKGE.take() {
                ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ChessRogueBuffInfo::ChessRogueBuffInfo::new()
        }
    }

    // .ChessRogueMiracleInfo game_miracle_info = 13;

    pub fn game_miracle_info(&self) -> &super::ChessRogueMiracleInfo::ChessRogueMiracleInfo {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(ref v)) => v,
            _ => <super::ChessRogueMiracleInfo::ChessRogueMiracleInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_game_miracle_info(&mut self) {
        self.JPBHEOJAKGE = ::std::option::Option::None;
    }

    pub fn has_game_miracle_info(&self) -> bool {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_game_miracle_info(&mut self, v: super::ChessRogueMiracleInfo::ChessRogueMiracleInfo) {
        self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_game_miracle_info(&mut self) -> &mut super::ChessRogueMiracleInfo::ChessRogueMiracleInfo {
        if let ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(_)) = self.JPBHEOJAKGE {
        } else {
            self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(super::ChessRogueMiracleInfo::ChessRogueMiracleInfo::new()));
        }
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_game_miracle_info(&mut self) -> super::ChessRogueMiracleInfo::ChessRogueMiracleInfo {
        if self.has_game_miracle_info() {
            match self.JPBHEOJAKGE.take() {
                ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ChessRogueMiracleInfo::ChessRogueMiracleInfo::new()
        }
    }

    // .RogueGameItemValue FFFCCEJIFDK = 8;

    pub fn FFFCCEJIFDK(&self) -> &super::RogueGameItemValue::RogueGameItemValue {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(ref v)) => v,
            _ => <super::RogueGameItemValue::RogueGameItemValue as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FFFCCEJIFDK(&mut self) {
        self.JPBHEOJAKGE = ::std::option::Option::None;
    }

    pub fn has_FFFCCEJIFDK(&self) -> bool {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FFFCCEJIFDK(&mut self, v: super::RogueGameItemValue::RogueGameItemValue) {
        self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FFFCCEJIFDK(&mut self) -> &mut super::RogueGameItemValue::RogueGameItemValue {
        if let ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(_)) = self.JPBHEOJAKGE {
        } else {
            self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(super::RogueGameItemValue::RogueGameItemValue::new()));
        }
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FFFCCEJIFDK(&mut self) -> super::RogueGameItemValue::RogueGameItemValue {
        if self.has_FFFCCEJIFDK() {
            match self.JPBHEOJAKGE.take() {
                ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueGameItemValue::RogueGameItemValue::new()
        }
    }

    // .ChessRogueGameAeonInfo rogue_aeon_info = 1;

    pub fn rogue_aeon_info(&self) -> &super::ChessRogueGameAeonInfo::ChessRogueGameAeonInfo {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(ref v)) => v,
            _ => <super::ChessRogueGameAeonInfo::ChessRogueGameAeonInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_aeon_info(&mut self) {
        self.JPBHEOJAKGE = ::std::option::Option::None;
    }

    pub fn has_rogue_aeon_info(&self) -> bool {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_aeon_info(&mut self, v: super::ChessRogueGameAeonInfo::ChessRogueGameAeonInfo) {
        self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_aeon_info(&mut self) -> &mut super::ChessRogueGameAeonInfo::ChessRogueGameAeonInfo {
        if let ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(_)) = self.JPBHEOJAKGE {
        } else {
            self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(super::ChessRogueGameAeonInfo::ChessRogueGameAeonInfo::new()));
        }
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_aeon_info(&mut self) -> super::ChessRogueGameAeonInfo::ChessRogueGameAeonInfo {
        if self.has_rogue_aeon_info() {
            match self.JPBHEOJAKGE.take() {
                ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ChessRogueGameAeonInfo::ChessRogueGameAeonInfo::new()
        }
    }

    // .RogueDifficultyLevelInfo rogue_difficulty_info = 7;

    pub fn rogue_difficulty_info(&self) -> &super::RogueDifficultyLevelInfo::RogueDifficultyLevelInfo {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(ref v)) => v,
            _ => <super::RogueDifficultyLevelInfo::RogueDifficultyLevelInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_difficulty_info(&mut self) {
        self.JPBHEOJAKGE = ::std::option::Option::None;
    }

    pub fn has_rogue_difficulty_info(&self) -> bool {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_difficulty_info(&mut self, v: super::RogueDifficultyLevelInfo::RogueDifficultyLevelInfo) {
        self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_difficulty_info(&mut self) -> &mut super::RogueDifficultyLevelInfo::RogueDifficultyLevelInfo {
        if let ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(_)) = self.JPBHEOJAKGE {
        } else {
            self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(super::RogueDifficultyLevelInfo::RogueDifficultyLevelInfo::new()));
        }
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_difficulty_info(&mut self) -> super::RogueDifficultyLevelInfo::RogueDifficultyLevelInfo {
        if self.has_rogue_difficulty_info() {
            match self.JPBHEOJAKGE.take() {
                ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueDifficultyLevelInfo::RogueDifficultyLevelInfo::new()
        }
    }

    // .RogueTournFormulaInfo CKAANMDDKCJ = 11;

    pub fn CKAANMDDKCJ(&self) -> &super::RogueTournFormulaInfo::RogueTournFormulaInfo {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(ref v)) => v,
            _ => <super::RogueTournFormulaInfo::RogueTournFormulaInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CKAANMDDKCJ(&mut self) {
        self.JPBHEOJAKGE = ::std::option::Option::None;
    }

    pub fn has_CKAANMDDKCJ(&self) -> bool {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CKAANMDDKCJ(&mut self, v: super::RogueTournFormulaInfo::RogueTournFormulaInfo) {
        self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CKAANMDDKCJ(&mut self) -> &mut super::RogueTournFormulaInfo::RogueTournFormulaInfo {
        if let ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(_)) = self.JPBHEOJAKGE {
        } else {
            self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(super::RogueTournFormulaInfo::RogueTournFormulaInfo::new()));
        }
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CKAANMDDKCJ(&mut self) -> super::RogueTournFormulaInfo::RogueTournFormulaInfo {
        if self.has_CKAANMDDKCJ() {
            match self.JPBHEOJAKGE.take() {
                ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueTournFormulaInfo::RogueTournFormulaInfo::new()
        }
    }

    // .KeywordUnlockValue NBDACDNBJIK = 15;

    pub fn NBDACDNBJIK(&self) -> &super::KeywordUnlockValue::KeywordUnlockValue {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(ref v)) => v,
            _ => <super::KeywordUnlockValue::KeywordUnlockValue as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NBDACDNBJIK(&mut self) {
        self.JPBHEOJAKGE = ::std::option::Option::None;
    }

    pub fn has_NBDACDNBJIK(&self) -> bool {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NBDACDNBJIK(&mut self, v: super::KeywordUnlockValue::KeywordUnlockValue) {
        self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NBDACDNBJIK(&mut self) -> &mut super::KeywordUnlockValue::KeywordUnlockValue {
        if let ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(_)) = self.JPBHEOJAKGE {
        } else {
            self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(super::KeywordUnlockValue::KeywordUnlockValue::new()));
        }
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NBDACDNBJIK(&mut self) -> super::KeywordUnlockValue::KeywordUnlockValue {
        if self.has_NBDACDNBJIK() {
            match self.JPBHEOJAKGE.take() {
                ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KeywordUnlockValue::KeywordUnlockValue::new()
        }
    }

    // .RogueTournLineupInfo rogue_lineup_info = 3;

    pub fn rogue_lineup_info(&self) -> &super::RogueTournLineupInfo::RogueTournLineupInfo {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(ref v)) => v,
            _ => <super::RogueTournLineupInfo::RogueTournLineupInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_lineup_info(&mut self) {
        self.JPBHEOJAKGE = ::std::option::Option::None;
    }

    pub fn has_rogue_lineup_info(&self) -> bool {
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_lineup_info(&mut self, v: super::RogueTournLineupInfo::RogueTournLineupInfo) {
        self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_lineup_info(&mut self) -> &mut super::RogueTournLineupInfo::RogueTournLineupInfo {
        if let ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(_)) = self.JPBHEOJAKGE {
        } else {
            self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(super::RogueTournLineupInfo::RogueTournLineupInfo::new()));
        }
        match self.JPBHEOJAKGE {
            ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_lineup_info(&mut self) -> super::RogueTournLineupInfo::RogueTournLineupInfo {
        if self.has_rogue_lineup_info() {
            match self.JPBHEOJAKGE.take() {
                ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueTournLineupInfo::RogueTournLineupInfo::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ChessRogueBuffInfo::ChessRogueBuffInfo>(
            "rogue_buff_info",
            RogueGameInfo::has_rogue_buff_info,
            RogueGameInfo::rogue_buff_info,
            RogueGameInfo::mut_rogue_buff_info,
            RogueGameInfo::set_rogue_buff_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ChessRogueMiracleInfo::ChessRogueMiracleInfo>(
            "game_miracle_info",
            RogueGameInfo::has_game_miracle_info,
            RogueGameInfo::game_miracle_info,
            RogueGameInfo::mut_game_miracle_info,
            RogueGameInfo::set_game_miracle_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueGameItemValue::RogueGameItemValue>(
            "FFFCCEJIFDK",
            RogueGameInfo::has_FFFCCEJIFDK,
            RogueGameInfo::FFFCCEJIFDK,
            RogueGameInfo::mut_FFFCCEJIFDK,
            RogueGameInfo::set_FFFCCEJIFDK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ChessRogueGameAeonInfo::ChessRogueGameAeonInfo>(
            "rogue_aeon_info",
            RogueGameInfo::has_rogue_aeon_info,
            RogueGameInfo::rogue_aeon_info,
            RogueGameInfo::mut_rogue_aeon_info,
            RogueGameInfo::set_rogue_aeon_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueDifficultyLevelInfo::RogueDifficultyLevelInfo>(
            "rogue_difficulty_info",
            RogueGameInfo::has_rogue_difficulty_info,
            RogueGameInfo::rogue_difficulty_info,
            RogueGameInfo::mut_rogue_difficulty_info,
            RogueGameInfo::set_rogue_difficulty_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueTournFormulaInfo::RogueTournFormulaInfo>(
            "CKAANMDDKCJ",
            RogueGameInfo::has_CKAANMDDKCJ,
            RogueGameInfo::CKAANMDDKCJ,
            RogueGameInfo::mut_CKAANMDDKCJ,
            RogueGameInfo::set_CKAANMDDKCJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KeywordUnlockValue::KeywordUnlockValue>(
            "NBDACDNBJIK",
            RogueGameInfo::has_NBDACDNBJIK,
            RogueGameInfo::NBDACDNBJIK,
            RogueGameInfo::mut_NBDACDNBJIK,
            RogueGameInfo::set_NBDACDNBJIK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueTournLineupInfo::RogueTournLineupInfo>(
            "rogue_lineup_info",
            RogueGameInfo::has_rogue_lineup_info,
            RogueGameInfo::rogue_lineup_info,
            RogueGameInfo::mut_rogue_lineup_info,
            RogueGameInfo::set_rogue_lineup_info,
        ));
        oneofs.push(rogue_game_info::JPBHEOJAKGE::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueGameInfo>(
            "RogueGameInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueGameInfo {
    const NAME: &'static str = "RogueGameInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                98 => {
                    self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(is.read_message()?));
                },
                106 => {
                    self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(is.read_message()?));
                },
                66 => {
                    self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(is.read_message()?));
                },
                10 => {
                    self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(is.read_message()?));
                },
                58 => {
                    self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(is.read_message()?));
                },
                90 => {
                    self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(is.read_message()?));
                },
                122 => {
                    self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(is.read_message()?));
                },
                26 => {
                    self.JPBHEOJAKGE = ::std::option::Option::Some(rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.JPBHEOJAKGE {
            match v {
                &rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.JPBHEOJAKGE {
            match v {
                &rogue_game_info::JPBHEOJAKGE::RogueBuffInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &rogue_game_info::JPBHEOJAKGE::GameMiracleInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &rogue_game_info::JPBHEOJAKGE::FFFCCEJIFDK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &rogue_game_info::JPBHEOJAKGE::RogueAeonInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &rogue_game_info::JPBHEOJAKGE::RogueDifficultyInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &rogue_game_info::JPBHEOJAKGE::CKAANMDDKCJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &rogue_game_info::JPBHEOJAKGE::NBDACDNBJIK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &rogue_game_info::JPBHEOJAKGE::RogueLineupInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueGameInfo {
        RogueGameInfo::new()
    }

    fn clear(&mut self) {
        self.JPBHEOJAKGE = ::std::option::Option::None;
        self.JPBHEOJAKGE = ::std::option::Option::None;
        self.JPBHEOJAKGE = ::std::option::Option::None;
        self.JPBHEOJAKGE = ::std::option::Option::None;
        self.JPBHEOJAKGE = ::std::option::Option::None;
        self.JPBHEOJAKGE = ::std::option::Option::None;
        self.JPBHEOJAKGE = ::std::option::Option::None;
        self.JPBHEOJAKGE = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueGameInfo {
        static instance: RogueGameInfo = RogueGameInfo {
            JPBHEOJAKGE: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueGameInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueGameInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueGameInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueGameInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueGameInfo`
pub mod rogue_game_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueGameInfo.JPBHEOJAKGE)
    pub enum JPBHEOJAKGE {
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.rogue_buff_info)
        RogueBuffInfo(super::super::ChessRogueBuffInfo::ChessRogueBuffInfo),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.game_miracle_info)
        GameMiracleInfo(super::super::ChessRogueMiracleInfo::ChessRogueMiracleInfo),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.FFFCCEJIFDK)
        FFFCCEJIFDK(super::super::RogueGameItemValue::RogueGameItemValue),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.rogue_aeon_info)
        RogueAeonInfo(super::super::ChessRogueGameAeonInfo::ChessRogueGameAeonInfo),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.rogue_difficulty_info)
        RogueDifficultyInfo(super::super::RogueDifficultyLevelInfo::RogueDifficultyLevelInfo),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.CKAANMDDKCJ)
        CKAANMDDKCJ(super::super::RogueTournFormulaInfo::RogueTournFormulaInfo),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.NBDACDNBJIK)
        NBDACDNBJIK(super::super::KeywordUnlockValue::KeywordUnlockValue),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.rogue_lineup_info)
        RogueLineupInfo(super::super::RogueTournLineupInfo::RogueTournLineupInfo),
    }

    impl ::protobuf::Oneof for JPBHEOJAKGE {
    }

    impl ::protobuf::OneofFull for JPBHEOJAKGE {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueGameInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("JPBHEOJAKGE").unwrap()).clone()
        }
    }

    impl JPBHEOJAKGE {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<JPBHEOJAKGE>("JPBHEOJAKGE")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13RogueGameInfo.proto\x1a\x18ChessRogueBuffInfo.proto\x1a\x1cChessRo\
    gueGameAeonInfo.proto\x1a\x1bChessRogueMiracleInfo.proto\x1a\x18KeywordU\
    nlockValue.proto\x1a\x1eRogueDifficultyLevelInfo.proto\x1a\x18RogueGameI\
    temValue.proto\x1a\x1bRogueTournFormulaInfo.proto\x1a\x1aRogueTournLineu\
    pInfo.proto\"\xaa\x04\n\rRogueGameInfo\x12=\n\x0frogue_buff_info\x18\x0c\
    \x20\x01(\x0b2\x13.ChessRogueBuffInfoH\0R\rrogueBuffInfo\x12D\n\x11game_\
    miracle_info\x18\r\x20\x01(\x0b2\x16.ChessRogueMiracleInfoH\0R\x0fgameMi\
    racleInfo\x127\n\x0bFFFCCEJIFDK\x18\x08\x20\x01(\x0b2\x13.RogueGameItemV\
    alueH\0R\x0bFFFCCEJIFDK\x12A\n\x0frogue_aeon_info\x18\x01\x20\x01(\x0b2\
    \x17.ChessRogueGameAeonInfoH\0R\rrogueAeonInfo\x12O\n\x15rogue_difficult\
    y_info\x18\x07\x20\x01(\x0b2\x19.RogueDifficultyLevelInfoH\0R\x13rogueDi\
    fficultyInfo\x12:\n\x0bCKAANMDDKCJ\x18\x0b\x20\x01(\x0b2\x16.RogueTournF\
    ormulaInfoH\0R\x0bCKAANMDDKCJ\x127\n\x0bNBDACDNBJIK\x18\x0f\x20\x01(\x0b\
    2\x13.KeywordUnlockValueH\0R\x0bNBDACDNBJIK\x12C\n\x11rogue_lineup_info\
    \x18\x03\x20\x01(\x0b2\x15.RogueTournLineupInfoH\0R\x0frogueLineupInfoB\
    \r\n\x0bJPBHEOJAKGEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::ChessRogueBuffInfo::file_descriptor().clone());
            deps.push(super::ChessRogueGameAeonInfo::file_descriptor().clone());
            deps.push(super::ChessRogueMiracleInfo::file_descriptor().clone());
            deps.push(super::KeywordUnlockValue::file_descriptor().clone());
            deps.push(super::RogueDifficultyLevelInfo::file_descriptor().clone());
            deps.push(super::RogueGameItemValue::file_descriptor().clone());
            deps.push(super::RogueTournFormulaInfo::file_descriptor().clone());
            deps.push(super::RogueTournLineupInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueGameInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
