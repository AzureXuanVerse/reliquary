// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueGameInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueGameInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueGameInfo {
    // message oneof groups
    pub DEPKICGAIIM: ::std::option::Option<rogue_game_info::DEPKICGAIIM>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueGameInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueGameInfo {
    fn default() -> &'a RogueGameInfo {
        <RogueGameInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueGameInfo {
    pub fn new() -> RogueGameInfo {
        ::std::default::Default::default()
    }

    // .ChessRogueBuffInfo rogue_buff_info = 6;

    pub fn rogue_buff_info(&self) -> &super::ChessRogueBuffInfo::ChessRogueBuffInfo {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueBuffInfo(ref v)) => v,
            _ => <super::ChessRogueBuffInfo::ChessRogueBuffInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_buff_info(&mut self) {
        self.DEPKICGAIIM = ::std::option::Option::None;
    }

    pub fn has_rogue_buff_info(&self) -> bool {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueBuffInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_buff_info(&mut self, v: super::ChessRogueBuffInfo::ChessRogueBuffInfo) {
        self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueBuffInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_buff_info(&mut self) -> &mut super::ChessRogueBuffInfo::ChessRogueBuffInfo {
        if let ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueBuffInfo(_)) = self.DEPKICGAIIM {
        } else {
            self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueBuffInfo(super::ChessRogueBuffInfo::ChessRogueBuffInfo::new()));
        }
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueBuffInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_buff_info(&mut self) -> super::ChessRogueBuffInfo::ChessRogueBuffInfo {
        if self.has_rogue_buff_info() {
            match self.DEPKICGAIIM.take() {
                ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueBuffInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ChessRogueBuffInfo::ChessRogueBuffInfo::new()
        }
    }

    // .ChessRogueMiracleInfo game_miracle_info = 14;

    pub fn game_miracle_info(&self) -> &super::ChessRogueMiracleInfo::ChessRogueMiracleInfo {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::GameMiracleInfo(ref v)) => v,
            _ => <super::ChessRogueMiracleInfo::ChessRogueMiracleInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_game_miracle_info(&mut self) {
        self.DEPKICGAIIM = ::std::option::Option::None;
    }

    pub fn has_game_miracle_info(&self) -> bool {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::GameMiracleInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_game_miracle_info(&mut self, v: super::ChessRogueMiracleInfo::ChessRogueMiracleInfo) {
        self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::GameMiracleInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_game_miracle_info(&mut self) -> &mut super::ChessRogueMiracleInfo::ChessRogueMiracleInfo {
        if let ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::GameMiracleInfo(_)) = self.DEPKICGAIIM {
        } else {
            self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::GameMiracleInfo(super::ChessRogueMiracleInfo::ChessRogueMiracleInfo::new()));
        }
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::GameMiracleInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_game_miracle_info(&mut self) -> super::ChessRogueMiracleInfo::ChessRogueMiracleInfo {
        if self.has_game_miracle_info() {
            match self.DEPKICGAIIM.take() {
                ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::GameMiracleInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ChessRogueMiracleInfo::ChessRogueMiracleInfo::new()
        }
    }

    // .FINDAFKPOOF FFFCCEJIFDK = 9;

    pub fn FFFCCEJIFDK(&self) -> &super::FINDAFKPOOF::FINDAFKPOOF {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(ref v)) => v,
            _ => <super::FINDAFKPOOF::FINDAFKPOOF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FFFCCEJIFDK(&mut self) {
        self.DEPKICGAIIM = ::std::option::Option::None;
    }

    pub fn has_FFFCCEJIFDK(&self) -> bool {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FFFCCEJIFDK(&mut self, v: super::FINDAFKPOOF::FINDAFKPOOF) {
        self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FFFCCEJIFDK(&mut self) -> &mut super::FINDAFKPOOF::FINDAFKPOOF {
        if let ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(_)) = self.DEPKICGAIIM {
        } else {
            self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(super::FINDAFKPOOF::FINDAFKPOOF::new()));
        }
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FFFCCEJIFDK(&mut self) -> super::FINDAFKPOOF::FINDAFKPOOF {
        if self.has_FFFCCEJIFDK() {
            match self.DEPKICGAIIM.take() {
                ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FINDAFKPOOF::FINDAFKPOOF::new()
        }
    }

    // .LADHIKPAJCJ rogue_aeon_info = 1;

    pub fn rogue_aeon_info(&self) -> &super::LADHIKPAJCJ::LADHIKPAJCJ {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueAeonInfo(ref v)) => v,
            _ => <super::LADHIKPAJCJ::LADHIKPAJCJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_aeon_info(&mut self) {
        self.DEPKICGAIIM = ::std::option::Option::None;
    }

    pub fn has_rogue_aeon_info(&self) -> bool {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueAeonInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_aeon_info(&mut self, v: super::LADHIKPAJCJ::LADHIKPAJCJ) {
        self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueAeonInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_aeon_info(&mut self) -> &mut super::LADHIKPAJCJ::LADHIKPAJCJ {
        if let ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueAeonInfo(_)) = self.DEPKICGAIIM {
        } else {
            self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueAeonInfo(super::LADHIKPAJCJ::LADHIKPAJCJ::new()));
        }
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueAeonInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_aeon_info(&mut self) -> super::LADHIKPAJCJ::LADHIKPAJCJ {
        if self.has_rogue_aeon_info() {
            match self.DEPKICGAIIM.take() {
                ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueAeonInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LADHIKPAJCJ::LADHIKPAJCJ::new()
        }
    }

    // .OHLCJEDCOFN rogue_difficulty_info = 12;

    pub fn rogue_difficulty_info(&self) -> &super::OHLCJEDCOFN::OHLCJEDCOFN {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(ref v)) => v,
            _ => <super::OHLCJEDCOFN::OHLCJEDCOFN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_difficulty_info(&mut self) {
        self.DEPKICGAIIM = ::std::option::Option::None;
    }

    pub fn has_rogue_difficulty_info(&self) -> bool {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_difficulty_info(&mut self, v: super::OHLCJEDCOFN::OHLCJEDCOFN) {
        self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_difficulty_info(&mut self) -> &mut super::OHLCJEDCOFN::OHLCJEDCOFN {
        if let ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(_)) = self.DEPKICGAIIM {
        } else {
            self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(super::OHLCJEDCOFN::OHLCJEDCOFN::new()));
        }
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_difficulty_info(&mut self) -> super::OHLCJEDCOFN::OHLCJEDCOFN {
        if self.has_rogue_difficulty_info() {
            match self.DEPKICGAIIM.take() {
                ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OHLCJEDCOFN::OHLCJEDCOFN::new()
        }
    }

    // .KAAJBAOAKBO CKAANMDDKCJ = 8;

    pub fn CKAANMDDKCJ(&self) -> &super::KAAJBAOAKBO::KAAJBAOAKBO {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(ref v)) => v,
            _ => <super::KAAJBAOAKBO::KAAJBAOAKBO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CKAANMDDKCJ(&mut self) {
        self.DEPKICGAIIM = ::std::option::Option::None;
    }

    pub fn has_CKAANMDDKCJ(&self) -> bool {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CKAANMDDKCJ(&mut self, v: super::KAAJBAOAKBO::KAAJBAOAKBO) {
        self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CKAANMDDKCJ(&mut self) -> &mut super::KAAJBAOAKBO::KAAJBAOAKBO {
        if let ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(_)) = self.DEPKICGAIIM {
        } else {
            self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(super::KAAJBAOAKBO::KAAJBAOAKBO::new()));
        }
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CKAANMDDKCJ(&mut self) -> super::KAAJBAOAKBO::KAAJBAOAKBO {
        if self.has_CKAANMDDKCJ() {
            match self.DEPKICGAIIM.take() {
                ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KAAJBAOAKBO::KAAJBAOAKBO::new()
        }
    }

    // .FBNJOFCEMIL NBDACDNBJIK = 7;

    pub fn NBDACDNBJIK(&self) -> &super::FBNJOFCEMIL::FBNJOFCEMIL {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(ref v)) => v,
            _ => <super::FBNJOFCEMIL::FBNJOFCEMIL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NBDACDNBJIK(&mut self) {
        self.DEPKICGAIIM = ::std::option::Option::None;
    }

    pub fn has_NBDACDNBJIK(&self) -> bool {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NBDACDNBJIK(&mut self, v: super::FBNJOFCEMIL::FBNJOFCEMIL) {
        self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NBDACDNBJIK(&mut self) -> &mut super::FBNJOFCEMIL::FBNJOFCEMIL {
        if let ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(_)) = self.DEPKICGAIIM {
        } else {
            self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(super::FBNJOFCEMIL::FBNJOFCEMIL::new()));
        }
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NBDACDNBJIK(&mut self) -> super::FBNJOFCEMIL::FBNJOFCEMIL {
        if self.has_NBDACDNBJIK() {
            match self.DEPKICGAIIM.take() {
                ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FBNJOFCEMIL::FBNJOFCEMIL::new()
        }
    }

    // .OMDEFBABNNB rogue__lineup_info = 15;

    pub fn rogue__lineup_info(&self) -> &super::OMDEFBABNNB::OMDEFBABNNB {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueLineupInfo(ref v)) => v,
            _ => <super::OMDEFBABNNB::OMDEFBABNNB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue__lineup_info(&mut self) {
        self.DEPKICGAIIM = ::std::option::Option::None;
    }

    pub fn has_rogue__lineup_info(&self) -> bool {
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueLineupInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue__lineup_info(&mut self, v: super::OMDEFBABNNB::OMDEFBABNNB) {
        self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueLineupInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue__lineup_info(&mut self) -> &mut super::OMDEFBABNNB::OMDEFBABNNB {
        if let ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueLineupInfo(_)) = self.DEPKICGAIIM {
        } else {
            self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueLineupInfo(super::OMDEFBABNNB::OMDEFBABNNB::new()));
        }
        match self.DEPKICGAIIM {
            ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueLineupInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue__lineup_info(&mut self) -> super::OMDEFBABNNB::OMDEFBABNNB {
        if self.has_rogue__lineup_info() {
            match self.DEPKICGAIIM.take() {
                ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueLineupInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMDEFBABNNB::OMDEFBABNNB::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ChessRogueBuffInfo::ChessRogueBuffInfo>(
            "rogue_buff_info",
            RogueGameInfo::has_rogue_buff_info,
            RogueGameInfo::rogue_buff_info,
            RogueGameInfo::mut_rogue_buff_info,
            RogueGameInfo::set_rogue_buff_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ChessRogueMiracleInfo::ChessRogueMiracleInfo>(
            "game_miracle_info",
            RogueGameInfo::has_game_miracle_info,
            RogueGameInfo::game_miracle_info,
            RogueGameInfo::mut_game_miracle_info,
            RogueGameInfo::set_game_miracle_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FINDAFKPOOF::FINDAFKPOOF>(
            "FFFCCEJIFDK",
            RogueGameInfo::has_FFFCCEJIFDK,
            RogueGameInfo::FFFCCEJIFDK,
            RogueGameInfo::mut_FFFCCEJIFDK,
            RogueGameInfo::set_FFFCCEJIFDK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LADHIKPAJCJ::LADHIKPAJCJ>(
            "rogue_aeon_info",
            RogueGameInfo::has_rogue_aeon_info,
            RogueGameInfo::rogue_aeon_info,
            RogueGameInfo::mut_rogue_aeon_info,
            RogueGameInfo::set_rogue_aeon_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OHLCJEDCOFN::OHLCJEDCOFN>(
            "rogue_difficulty_info",
            RogueGameInfo::has_rogue_difficulty_info,
            RogueGameInfo::rogue_difficulty_info,
            RogueGameInfo::mut_rogue_difficulty_info,
            RogueGameInfo::set_rogue_difficulty_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KAAJBAOAKBO::KAAJBAOAKBO>(
            "CKAANMDDKCJ",
            RogueGameInfo::has_CKAANMDDKCJ,
            RogueGameInfo::CKAANMDDKCJ,
            RogueGameInfo::mut_CKAANMDDKCJ,
            RogueGameInfo::set_CKAANMDDKCJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FBNJOFCEMIL::FBNJOFCEMIL>(
            "NBDACDNBJIK",
            RogueGameInfo::has_NBDACDNBJIK,
            RogueGameInfo::NBDACDNBJIK,
            RogueGameInfo::mut_NBDACDNBJIK,
            RogueGameInfo::set_NBDACDNBJIK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMDEFBABNNB::OMDEFBABNNB>(
            "rogue__lineup_info",
            RogueGameInfo::has_rogue__lineup_info,
            RogueGameInfo::rogue__lineup_info,
            RogueGameInfo::mut_rogue__lineup_info,
            RogueGameInfo::set_rogue__lineup_info,
        ));
        oneofs.push(rogue_game_info::DEPKICGAIIM::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueGameInfo>(
            "RogueGameInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueGameInfo {
    const NAME: &'static str = "RogueGameInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueBuffInfo(is.read_message()?));
                },
                114 => {
                    self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::GameMiracleInfo(is.read_message()?));
                },
                74 => {
                    self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(is.read_message()?));
                },
                10 => {
                    self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueAeonInfo(is.read_message()?));
                },
                98 => {
                    self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(is.read_message()?));
                },
                66 => {
                    self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(is.read_message()?));
                },
                58 => {
                    self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(is.read_message()?));
                },
                122 => {
                    self.DEPKICGAIIM = ::std::option::Option::Some(rogue_game_info::DEPKICGAIIM::RogueLineupInfo(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.DEPKICGAIIM {
            match v {
                &rogue_game_info::DEPKICGAIIM::RogueBuffInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::DEPKICGAIIM::GameMiracleInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::DEPKICGAIIM::RogueAeonInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_game_info::DEPKICGAIIM::RogueLineupInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.DEPKICGAIIM {
            match v {
                &rogue_game_info::DEPKICGAIIM::RogueBuffInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &rogue_game_info::DEPKICGAIIM::GameMiracleInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &rogue_game_info::DEPKICGAIIM::FFFCCEJIFDK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &rogue_game_info::DEPKICGAIIM::RogueAeonInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &rogue_game_info::DEPKICGAIIM::RogueDifficultyInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &rogue_game_info::DEPKICGAIIM::CKAANMDDKCJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &rogue_game_info::DEPKICGAIIM::NBDACDNBJIK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &rogue_game_info::DEPKICGAIIM::RogueLineupInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueGameInfo {
        RogueGameInfo::new()
    }

    fn clear(&mut self) {
        self.DEPKICGAIIM = ::std::option::Option::None;
        self.DEPKICGAIIM = ::std::option::Option::None;
        self.DEPKICGAIIM = ::std::option::Option::None;
        self.DEPKICGAIIM = ::std::option::Option::None;
        self.DEPKICGAIIM = ::std::option::Option::None;
        self.DEPKICGAIIM = ::std::option::Option::None;
        self.DEPKICGAIIM = ::std::option::Option::None;
        self.DEPKICGAIIM = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueGameInfo {
        static instance: RogueGameInfo = RogueGameInfo {
            DEPKICGAIIM: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueGameInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueGameInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueGameInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueGameInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueGameInfo`
pub mod rogue_game_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueGameInfo.DEPKICGAIIM)
    pub enum DEPKICGAIIM {
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.rogue_buff_info)
        RogueBuffInfo(super::super::ChessRogueBuffInfo::ChessRogueBuffInfo),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.game_miracle_info)
        GameMiracleInfo(super::super::ChessRogueMiracleInfo::ChessRogueMiracleInfo),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.FFFCCEJIFDK)
        FFFCCEJIFDK(super::super::FINDAFKPOOF::FINDAFKPOOF),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.rogue_aeon_info)
        RogueAeonInfo(super::super::LADHIKPAJCJ::LADHIKPAJCJ),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.rogue_difficulty_info)
        RogueDifficultyInfo(super::super::OHLCJEDCOFN::OHLCJEDCOFN),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.CKAANMDDKCJ)
        CKAANMDDKCJ(super::super::KAAJBAOAKBO::KAAJBAOAKBO),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.NBDACDNBJIK)
        NBDACDNBJIK(super::super::FBNJOFCEMIL::FBNJOFCEMIL),
        // @@protoc_insertion_point(oneof_field:RogueGameInfo.rogue__lineup_info)
        RogueLineupInfo(super::super::OMDEFBABNNB::OMDEFBABNNB),
    }

    impl ::protobuf::Oneof for DEPKICGAIIM {
    }

    impl ::protobuf::OneofFull for DEPKICGAIIM {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueGameInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("DEPKICGAIIM").unwrap()).clone()
        }
    }

    impl DEPKICGAIIM {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DEPKICGAIIM>("DEPKICGAIIM")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13RogueGameInfo.proto\x1a\x18ChessRogueBuffInfo.proto\x1a\x1bChessRo\
    gueMiracleInfo.proto\x1a\x11FBNJOFCEMIL.proto\x1a\x11FINDAFKPOOF.proto\
    \x1a\x11KAAJBAOAKBO.proto\x1a\x11LADHIKPAJCJ.proto\x1a\x11OHLCJEDCOFN.pr\
    oto\x1a\x11OMDEFBABNNB.proto\"\xf2\x03\n\rRogueGameInfo\x12=\n\x0frogue_\
    buff_info\x18\x06\x20\x01(\x0b2\x13.ChessRogueBuffInfoH\0R\rrogueBuffInf\
    o\x12D\n\x11game_miracle_info\x18\x0e\x20\x01(\x0b2\x16.ChessRogueMiracl\
    eInfoH\0R\x0fgameMiracleInfo\x120\n\x0bFFFCCEJIFDK\x18\t\x20\x01(\x0b2\
    \x0c.FINDAFKPOOFH\0R\x0bFFFCCEJIFDK\x126\n\x0frogue_aeon_info\x18\x01\
    \x20\x01(\x0b2\x0c.LADHIKPAJCJH\0R\rrogueAeonInfo\x12B\n\x15rogue_diffic\
    ulty_info\x18\x0c\x20\x01(\x0b2\x0c.OHLCJEDCOFNH\0R\x13rogueDifficultyIn\
    fo\x120\n\x0bCKAANMDDKCJ\x18\x08\x20\x01(\x0b2\x0c.KAAJBAOAKBOH\0R\x0bCK\
    AANMDDKCJ\x120\n\x0bNBDACDNBJIK\x18\x07\x20\x01(\x0b2\x0c.FBNJOFCEMILH\0\
    R\x0bNBDACDNBJIK\x12;\n\x12rogue__lineup_info\x18\x0f\x20\x01(\x0b2\x0c.\
    OMDEFBABNNBH\0R\x0frogueLineupInfoB\r\n\x0bDEPKICGAIIMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::ChessRogueBuffInfo::file_descriptor().clone());
            deps.push(super::ChessRogueMiracleInfo::file_descriptor().clone());
            deps.push(super::FBNJOFCEMIL::file_descriptor().clone());
            deps.push(super::FINDAFKPOOF::file_descriptor().clone());
            deps.push(super::KAAJBAOAKBO::file_descriptor().clone());
            deps.push(super::LADHIKPAJCJ::file_descriptor().clone());
            deps.push(super::OHLCJEDCOFN::file_descriptor().clone());
            deps.push(super::OMDEFBABNNB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueGameInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
