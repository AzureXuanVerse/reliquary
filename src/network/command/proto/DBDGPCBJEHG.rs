// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DBDGPCBJEHG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:DBDGPCBJEHG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DBDGPCBJEHG {
    // message fields
    // @@protoc_insertion_point(field:DBDGPCBJEHG.avatar_list)
    pub avatar_list: ::std::vec::Vec<super::BattleAvatar::BattleAvatar>,
    // @@protoc_insertion_point(field:DBDGPCBJEHG.monster_wave_list)
    pub monster_wave_list: ::std::vec::Vec<super::PJKOHMBFIKH::PJKOHMBFIKH>,
    // @@protoc_insertion_point(field:DBDGPCBJEHG.buff_list)
    pub buff_list: ::std::vec::Vec<super::FBHLNEALINM::FBHLNEALINM>,
    // @@protoc_insertion_point(field:DBDGPCBJEHG.world_level)
    pub world_level: u32,
    // @@protoc_insertion_point(field:DBDGPCBJEHG.battle_target_info)
    pub battle_target_info: ::std::collections::HashMap<u32, super::BattleTargetList::BattleTargetList>,
    // @@protoc_insertion_point(field:DBDGPCBJEHG.AJGPJGLPMIO)
    pub AJGPJGLPMIO: ::protobuf::MessageField<super::LJGIAGLFHHC::LJGIAGLFHHC>,
    // @@protoc_insertion_point(field:DBDGPCBJEHG.EJCLJLDENDM)
    pub EJCLJLDENDM: ::std::vec::Vec<super::BattleAvatar::BattleAvatar>,
    // @@protoc_insertion_point(field:DBDGPCBJEHG.JPGIFCHJDLK)
    pub JPGIFCHJDLK: ::protobuf::MessageField<super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>,
    // @@protoc_insertion_point(field:DBDGPCBJEHG.MFKJOKAJJMJ)
    pub MFKJOKAJJMJ: ::protobuf::MessageField<super::GIEIBEACBAO::GIEIBEACBAO>,
    // @@protoc_insertion_point(field:DBDGPCBJEHG.rogue_magic_battle_info)
    pub rogue_magic_battle_info: ::protobuf::MessageField<super::RogueMagicBattleInfo::RogueMagicBattleInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:DBDGPCBJEHG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DBDGPCBJEHG {
    fn default() -> &'a DBDGPCBJEHG {
        <DBDGPCBJEHG as ::protobuf::Message>::default_instance()
    }
}

impl DBDGPCBJEHG {
    pub fn new() -> DBDGPCBJEHG {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &DBDGPCBJEHG| { &m.avatar_list },
            |m: &mut DBDGPCBJEHG| { &mut m.avatar_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "monster_wave_list",
            |m: &DBDGPCBJEHG| { &m.monster_wave_list },
            |m: &mut DBDGPCBJEHG| { &mut m.monster_wave_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "buff_list",
            |m: &DBDGPCBJEHG| { &m.buff_list },
            |m: &mut DBDGPCBJEHG| { &mut m.buff_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "world_level",
            |m: &DBDGPCBJEHG| { &m.world_level },
            |m: &mut DBDGPCBJEHG| { &mut m.world_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "battle_target_info",
            |m: &DBDGPCBJEHG| { &m.battle_target_info },
            |m: &mut DBDGPCBJEHG| { &mut m.battle_target_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LJGIAGLFHHC::LJGIAGLFHHC>(
            "AJGPJGLPMIO",
            |m: &DBDGPCBJEHG| { &m.AJGPJGLPMIO },
            |m: &mut DBDGPCBJEHG| { &mut m.AJGPJGLPMIO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EJCLJLDENDM",
            |m: &DBDGPCBJEHG| { &m.EJCLJLDENDM },
            |m: &mut DBDGPCBJEHG| { &mut m.EJCLJLDENDM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>(
            "JPGIFCHJDLK",
            |m: &DBDGPCBJEHG| { &m.JPGIFCHJDLK },
            |m: &mut DBDGPCBJEHG| { &mut m.JPGIFCHJDLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GIEIBEACBAO::GIEIBEACBAO>(
            "MFKJOKAJJMJ",
            |m: &DBDGPCBJEHG| { &m.MFKJOKAJJMJ },
            |m: &mut DBDGPCBJEHG| { &mut m.MFKJOKAJJMJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueMagicBattleInfo::RogueMagicBattleInfo>(
            "rogue_magic_battle_info",
            |m: &DBDGPCBJEHG| { &m.rogue_magic_battle_info },
            |m: &mut DBDGPCBJEHG| { &mut m.rogue_magic_battle_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DBDGPCBJEHG>(
            "DBDGPCBJEHG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DBDGPCBJEHG {
    const NAME: &'static str = "DBDGPCBJEHG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.avatar_list.push(is.read_message()?);
                },
                18 => {
                    self.monster_wave_list.push(is.read_message()?);
                },
                26 => {
                    self.buff_list.push(is.read_message()?);
                },
                56 => {
                    self.world_level = is.read_uint32()?;
                },
                74 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.battle_target_info.insert(key, value);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AJGPJGLPMIO)?;
                },
                90 => {
                    self.EJCLJLDENDM.push(is.read_message()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JPGIFCHJDLK)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MFKJOKAJJMJ)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rogue_magic_battle_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.avatar_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.monster_wave_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.buff_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.world_level != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.world_level);
        }
        for (k, v) in &self.battle_target_info {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.AJGPJGLPMIO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.EJCLJLDENDM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.JPGIFCHJDLK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MFKJOKAJJMJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rogue_magic_battle_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.avatar_list {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.monster_wave_list {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.buff_list {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.world_level != 0 {
            os.write_uint32(7, self.world_level)?;
        }
        for (k, v) in &self.battle_target_info {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(74)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.AJGPJGLPMIO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.EJCLJLDENDM {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if let Some(v) = self.JPGIFCHJDLK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.MFKJOKAJJMJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.rogue_magic_battle_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DBDGPCBJEHG {
        DBDGPCBJEHG::new()
    }

    fn clear(&mut self) {
        self.avatar_list.clear();
        self.monster_wave_list.clear();
        self.buff_list.clear();
        self.world_level = 0;
        self.battle_target_info.clear();
        self.AJGPJGLPMIO.clear();
        self.EJCLJLDENDM.clear();
        self.JPGIFCHJDLK.clear();
        self.MFKJOKAJJMJ.clear();
        self.rogue_magic_battle_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DBDGPCBJEHG {
        static instance: ::protobuf::rt::Lazy<DBDGPCBJEHG> = ::protobuf::rt::Lazy::new();
        instance.get(DBDGPCBJEHG::new)
    }
}

impl ::protobuf::MessageFull for DBDGPCBJEHG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DBDGPCBJEHG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DBDGPCBJEHG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DBDGPCBJEHG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DBDGPCBJEHG.proto\x1a\x12BattleAvatar.proto\x1a\x16BattleTargetLis\
    t.proto\x1a\x1bEvolveBuildBattleInfo.proto\x1a\x11FBHLNEALINM.proto\x1a\
    \x11GIEIBEACBAO.proto\x1a\x11LJGIAGLFHHC.proto\x1a\x11PJKOHMBFIKH.proto\
    \x1a\x1aRogueMagicBattleInfo.proto\"\x86\x05\n\x0bDBDGPCBJEHG\x12.\n\x0b\
    avatar_list\x18\x01\x20\x03(\x0b2\r.BattleAvatarR\navatarList\x128\n\x11\
    monster_wave_list\x18\x02\x20\x03(\x0b2\x0c.PJKOHMBFIKHR\x0fmonsterWaveL\
    ist\x12)\n\tbuff_list\x18\x03\x20\x03(\x0b2\x0c.FBHLNEALINMR\x08buffList\
    \x12\x1f\n\x0bworld_level\x18\x07\x20\x01(\rR\nworldLevel\x12P\n\x12batt\
    le_target_info\x18\t\x20\x03(\x0b2\".DBDGPCBJEHG.BattleTargetInfoEntryR\
    \x10battleTargetInfo\x12.\n\x0bAJGPJGLPMIO\x18\n\x20\x01(\x0b2\x0c.LJGIA\
    GLFHHCR\x0bAJGPJGLPMIO\x12/\n\x0bEJCLJLDENDM\x18\x0b\x20\x03(\x0b2\r.Bat\
    tleAvatarR\x0bEJCLJLDENDM\x128\n\x0bJPGIFCHJDLK\x18\x0c\x20\x01(\x0b2\
    \x16.EvolveBuildBattleInfoR\x0bJPGIFCHJDLK\x12.\n\x0bMFKJOKAJJMJ\x18\r\
    \x20\x01(\x0b2\x0c.GIEIBEACBAOR\x0bMFKJOKAJJMJ\x12L\n\x17rogue_magic_bat\
    tle_info\x18\x0e\x20\x01(\x0b2\x15.RogueMagicBattleInfoR\x14rogueMagicBa\
    ttleInfo\x1aV\n\x15BattleTargetInfoEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\rR\x03key\x12'\n\x05value\x18\x02\x20\x01(\x0b2\x11.BattleTargetLi\
    stR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::BattleAvatar::file_descriptor().clone());
            deps.push(super::BattleTargetList::file_descriptor().clone());
            deps.push(super::EvolveBuildBattleInfo::file_descriptor().clone());
            deps.push(super::FBHLNEALINM::file_descriptor().clone());
            deps.push(super::GIEIBEACBAO::file_descriptor().clone());
            deps.push(super::LJGIAGLFHHC::file_descriptor().clone());
            deps.push(super::PJKOHMBFIKH::file_descriptor().clone());
            deps.push(super::RogueMagicBattleInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DBDGPCBJEHG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
