// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DBKLNGEBBID.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:DBKLNGEBBID)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DBKLNGEBBID {
    // message fields
    // @@protoc_insertion_point(field:DBKLNGEBBID.MNKAHINFMCA)
    pub MNKAHINFMCA: u32,
    // @@protoc_insertion_point(field:DBKLNGEBBID.MLAGPHLLBFB)
    pub MLAGPHLLBFB: u32,
    // @@protoc_insertion_point(field:DBKLNGEBBID.DAJJJFCHOOJ)
    pub DAJJJFCHOOJ: u32,
    // @@protoc_insertion_point(field:DBKLNGEBBID.GFPPCALLGEK)
    pub GFPPCALLGEK: u32,
    // @@protoc_insertion_point(field:DBKLNGEBBID.MFAMKIBGBBG)
    pub MFAMKIBGBBG: u32,
    // @@protoc_insertion_point(field:DBKLNGEBBID.KFAGAOBAPDI)
    pub KFAGAOBAPDI: bool,
    // @@protoc_insertion_point(field:DBKLNGEBBID.LHFFAPBDGLP)
    pub LHFFAPBDGLP: bool,
    // @@protoc_insertion_point(field:DBKLNGEBBID.HEKBBDCPOBO)
    pub HEKBBDCPOBO: ::std::vec::Vec<super::KHOCCHABNMN::KHOCCHABNMN>,
    // special fields
    // @@protoc_insertion_point(special_field:DBKLNGEBBID.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DBKLNGEBBID {
    fn default() -> &'a DBKLNGEBBID {
        <DBKLNGEBBID as ::protobuf::Message>::default_instance()
    }
}

impl DBKLNGEBBID {
    pub fn new() -> DBKLNGEBBID {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MNKAHINFMCA",
            |m: &DBKLNGEBBID| { &m.MNKAHINFMCA },
            |m: &mut DBKLNGEBBID| { &mut m.MNKAHINFMCA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MLAGPHLLBFB",
            |m: &DBKLNGEBBID| { &m.MLAGPHLLBFB },
            |m: &mut DBKLNGEBBID| { &mut m.MLAGPHLLBFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DAJJJFCHOOJ",
            |m: &DBKLNGEBBID| { &m.DAJJJFCHOOJ },
            |m: &mut DBKLNGEBBID| { &mut m.DAJJJFCHOOJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GFPPCALLGEK",
            |m: &DBKLNGEBBID| { &m.GFPPCALLGEK },
            |m: &mut DBKLNGEBBID| { &mut m.GFPPCALLGEK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MFAMKIBGBBG",
            |m: &DBKLNGEBBID| { &m.MFAMKIBGBBG },
            |m: &mut DBKLNGEBBID| { &mut m.MFAMKIBGBBG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KFAGAOBAPDI",
            |m: &DBKLNGEBBID| { &m.KFAGAOBAPDI },
            |m: &mut DBKLNGEBBID| { &mut m.KFAGAOBAPDI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LHFFAPBDGLP",
            |m: &DBKLNGEBBID| { &m.LHFFAPBDGLP },
            |m: &mut DBKLNGEBBID| { &mut m.LHFFAPBDGLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HEKBBDCPOBO",
            |m: &DBKLNGEBBID| { &m.HEKBBDCPOBO },
            |m: &mut DBKLNGEBBID| { &mut m.HEKBBDCPOBO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DBKLNGEBBID>(
            "DBKLNGEBBID",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DBKLNGEBBID {
    const NAME: &'static str = "DBKLNGEBBID";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.MNKAHINFMCA = is.read_uint32()?;
                },
                40 => {
                    self.MLAGPHLLBFB = is.read_uint32()?;
                },
                88 => {
                    self.DAJJJFCHOOJ = is.read_uint32()?;
                },
                104 => {
                    self.GFPPCALLGEK = is.read_uint32()?;
                },
                112 => {
                    self.MFAMKIBGBBG = is.read_uint32()?;
                },
                96 => {
                    self.KFAGAOBAPDI = is.read_bool()?;
                },
                72 => {
                    self.LHFFAPBDGLP = is.read_bool()?;
                },
                58 => {
                    self.HEKBBDCPOBO.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.MNKAHINFMCA != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.MNKAHINFMCA);
        }
        if self.MLAGPHLLBFB != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.MLAGPHLLBFB);
        }
        if self.DAJJJFCHOOJ != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.DAJJJFCHOOJ);
        }
        if self.GFPPCALLGEK != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.GFPPCALLGEK);
        }
        if self.MFAMKIBGBBG != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.MFAMKIBGBBG);
        }
        if self.KFAGAOBAPDI != false {
            my_size += 1 + 1;
        }
        if self.LHFFAPBDGLP != false {
            my_size += 1 + 1;
        }
        for value in &self.HEKBBDCPOBO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.MNKAHINFMCA != 0 {
            os.write_uint32(1, self.MNKAHINFMCA)?;
        }
        if self.MLAGPHLLBFB != 0 {
            os.write_uint32(5, self.MLAGPHLLBFB)?;
        }
        if self.DAJJJFCHOOJ != 0 {
            os.write_uint32(11, self.DAJJJFCHOOJ)?;
        }
        if self.GFPPCALLGEK != 0 {
            os.write_uint32(13, self.GFPPCALLGEK)?;
        }
        if self.MFAMKIBGBBG != 0 {
            os.write_uint32(14, self.MFAMKIBGBBG)?;
        }
        if self.KFAGAOBAPDI != false {
            os.write_bool(12, self.KFAGAOBAPDI)?;
        }
        if self.LHFFAPBDGLP != false {
            os.write_bool(9, self.LHFFAPBDGLP)?;
        }
        for v in &self.HEKBBDCPOBO {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DBKLNGEBBID {
        DBKLNGEBBID::new()
    }

    fn clear(&mut self) {
        self.MNKAHINFMCA = 0;
        self.MLAGPHLLBFB = 0;
        self.DAJJJFCHOOJ = 0;
        self.GFPPCALLGEK = 0;
        self.MFAMKIBGBBG = 0;
        self.KFAGAOBAPDI = false;
        self.LHFFAPBDGLP = false;
        self.HEKBBDCPOBO.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DBKLNGEBBID {
        static instance: DBKLNGEBBID = DBKLNGEBBID {
            MNKAHINFMCA: 0,
            MLAGPHLLBFB: 0,
            DAJJJFCHOOJ: 0,
            GFPPCALLGEK: 0,
            MFAMKIBGBBG: 0,
            KFAGAOBAPDI: false,
            LHFFAPBDGLP: false,
            HEKBBDCPOBO: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DBKLNGEBBID {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DBKLNGEBBID").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DBKLNGEBBID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DBKLNGEBBID {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DBKLNGEBBID.proto\x1a\x11KHOCCHABNMN.proto\"\xab\x02\n\x0bDBKLNGEB\
    BID\x12\x20\n\x0bMNKAHINFMCA\x18\x01\x20\x01(\rR\x0bMNKAHINFMCA\x12\x20\
    \n\x0bMLAGPHLLBFB\x18\x05\x20\x01(\rR\x0bMLAGPHLLBFB\x12\x20\n\x0bDAJJJF\
    CHOOJ\x18\x0b\x20\x01(\rR\x0bDAJJJFCHOOJ\x12\x20\n\x0bGFPPCALLGEK\x18\r\
    \x20\x01(\rR\x0bGFPPCALLGEK\x12\x20\n\x0bMFAMKIBGBBG\x18\x0e\x20\x01(\rR\
    \x0bMFAMKIBGBBG\x12\x20\n\x0bKFAGAOBAPDI\x18\x0c\x20\x01(\x08R\x0bKFAGAO\
    BAPDI\x12\x20\n\x0bLHFFAPBDGLP\x18\t\x20\x01(\x08R\x0bLHFFAPBDGLP\x12.\n\
    \x0bHEKBBDCPOBO\x18\x07\x20\x03(\x0b2\x0c.KHOCCHABNMNR\x0bHEKBBDCPOBOb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::KHOCCHABNMN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DBKLNGEBBID::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
