// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdParkourType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdParkourType)
pub enum CmdParkourType {
    // @@protoc_insertion_point(enum_value:CmdParkourType.CmdParkourTypeNone)
    CmdParkourTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdParkourType.CmdParkourGetDataScRsp)
    CmdParkourGetDataScRsp = 8389,
    // @@protoc_insertion_point(enum_value:CmdParkourType.CmdParkourStartLevelScRsp)
    CmdParkourStartLevelScRsp = 8391,
    // @@protoc_insertion_point(enum_value:CmdParkourType.CmdParkourStartLevelCsReq)
    CmdParkourStartLevelCsReq = 8387,
    // @@protoc_insertion_point(enum_value:CmdParkourType.CmdParkourGetDataCsReq)
    CmdParkourGetDataCsReq = 8398,
    // @@protoc_insertion_point(enum_value:CmdParkourType.CmdParkourEndLevelScRsp)
    CmdParkourEndLevelScRsp = 8383,
    // @@protoc_insertion_point(enum_value:CmdParkourType.CmdParkourGetRankingInfoScRsp)
    CmdParkourGetRankingInfoScRsp = 8396,
    // @@protoc_insertion_point(enum_value:CmdParkourType.CmdParkourEndLevelCsReq)
    CmdParkourEndLevelCsReq = 8385,
    // @@protoc_insertion_point(enum_value:CmdParkourType.CmdParkourGetRankingInfoCsReq)
    CmdParkourGetRankingInfoCsReq = 8390,
}

impl ::protobuf::Enum for CmdParkourType {
    const NAME: &'static str = "CmdParkourType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdParkourType> {
        match value {
            0 => ::std::option::Option::Some(CmdParkourType::CmdParkourTypeNone),
            8389 => ::std::option::Option::Some(CmdParkourType::CmdParkourGetDataScRsp),
            8391 => ::std::option::Option::Some(CmdParkourType::CmdParkourStartLevelScRsp),
            8387 => ::std::option::Option::Some(CmdParkourType::CmdParkourStartLevelCsReq),
            8398 => ::std::option::Option::Some(CmdParkourType::CmdParkourGetDataCsReq),
            8383 => ::std::option::Option::Some(CmdParkourType::CmdParkourEndLevelScRsp),
            8396 => ::std::option::Option::Some(CmdParkourType::CmdParkourGetRankingInfoScRsp),
            8385 => ::std::option::Option::Some(CmdParkourType::CmdParkourEndLevelCsReq),
            8390 => ::std::option::Option::Some(CmdParkourType::CmdParkourGetRankingInfoCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdParkourType> {
        match str {
            "CmdParkourTypeNone" => ::std::option::Option::Some(CmdParkourType::CmdParkourTypeNone),
            "CmdParkourGetDataScRsp" => ::std::option::Option::Some(CmdParkourType::CmdParkourGetDataScRsp),
            "CmdParkourStartLevelScRsp" => ::std::option::Option::Some(CmdParkourType::CmdParkourStartLevelScRsp),
            "CmdParkourStartLevelCsReq" => ::std::option::Option::Some(CmdParkourType::CmdParkourStartLevelCsReq),
            "CmdParkourGetDataCsReq" => ::std::option::Option::Some(CmdParkourType::CmdParkourGetDataCsReq),
            "CmdParkourEndLevelScRsp" => ::std::option::Option::Some(CmdParkourType::CmdParkourEndLevelScRsp),
            "CmdParkourGetRankingInfoScRsp" => ::std::option::Option::Some(CmdParkourType::CmdParkourGetRankingInfoScRsp),
            "CmdParkourEndLevelCsReq" => ::std::option::Option::Some(CmdParkourType::CmdParkourEndLevelCsReq),
            "CmdParkourGetRankingInfoCsReq" => ::std::option::Option::Some(CmdParkourType::CmdParkourGetRankingInfoCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdParkourType] = &[
        CmdParkourType::CmdParkourTypeNone,
        CmdParkourType::CmdParkourGetDataScRsp,
        CmdParkourType::CmdParkourStartLevelScRsp,
        CmdParkourType::CmdParkourStartLevelCsReq,
        CmdParkourType::CmdParkourGetDataCsReq,
        CmdParkourType::CmdParkourEndLevelScRsp,
        CmdParkourType::CmdParkourGetRankingInfoScRsp,
        CmdParkourType::CmdParkourEndLevelCsReq,
        CmdParkourType::CmdParkourGetRankingInfoCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdParkourType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdParkourType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdParkourType::CmdParkourTypeNone => 0,
            CmdParkourType::CmdParkourGetDataScRsp => 1,
            CmdParkourType::CmdParkourStartLevelScRsp => 2,
            CmdParkourType::CmdParkourStartLevelCsReq => 3,
            CmdParkourType::CmdParkourGetDataCsReq => 4,
            CmdParkourType::CmdParkourEndLevelScRsp => 5,
            CmdParkourType::CmdParkourGetRankingInfoScRsp => 6,
            CmdParkourType::CmdParkourEndLevelCsReq => 7,
            CmdParkourType::CmdParkourGetRankingInfoCsReq => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdParkourType {
    fn default() -> Self {
        CmdParkourType::CmdParkourTypeNone
    }
}

impl CmdParkourType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdParkourType>("CmdParkourType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14CmdParkourType.proto*\xa6\x02\n\x0eCmdParkourType\x12\x16\n\x12Cmd\
    ParkourTypeNone\x10\0\x12\x1b\n\x16CmdParkourGetDataScRsp\x10\xc5A\x12\
    \x1e\n\x19CmdParkourStartLevelScRsp\x10\xc7A\x12\x1e\n\x19CmdParkourStar\
    tLevelCsReq\x10\xc3A\x12\x1b\n\x16CmdParkourGetDataCsReq\x10\xceA\x12\
    \x1c\n\x17CmdParkourEndLevelScRsp\x10\xbfA\x12\"\n\x1dCmdParkourGetRanki\
    ngInfoScRsp\x10\xccA\x12\x1c\n\x17CmdParkourEndLevelCsReq\x10\xc1A\x12\"\
    \n\x1dCmdParkourGetRankingInfoCsReq\x10\xc6Ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdParkourType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
