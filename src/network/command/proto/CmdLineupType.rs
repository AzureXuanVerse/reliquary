// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdLineupType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdLineupType)
pub enum CmdLineupType {
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdLineupTypeNone)
    CmdLineupTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdSwapLineupScRsp)
    CmdSwapLineupScRsp = 756,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdJoinLineupScRsp)
    CmdJoinLineupScRsp = 748,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdQuitLineupCsReq)
    CmdQuitLineupCsReq = 771,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdGetStageLineupScRsp)
    CmdGetStageLineupScRsp = 732,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdGetCurLineupDataScRsp)
    CmdGetCurLineupDataScRsp = 740,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdExtraLineupDestroyNotify)
    CmdExtraLineupDestroyNotify = 729,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdGetLineupAvatarDataScRsp)
    CmdGetLineupAvatarDataScRsp = 716,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdSwitchLineupIndexScRsp)
    CmdSwitchLineupIndexScRsp = 702,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdGetLineupAvatarDataCsReq)
    CmdGetLineupAvatarDataCsReq = 785,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdSwitchLineupIndexCsReq)
    CmdSwitchLineupIndexCsReq = 760,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdGetStageLineupCsReq)
    CmdGetStageLineupCsReq = 795,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdVirtualLineupDestroyNotify)
    CmdVirtualLineupDestroyNotify = 777,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdReplaceLineupScRsp)
    CmdReplaceLineupScRsp = 721,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdChangeLineupLeaderScRsp)
    CmdChangeLineupLeaderScRsp = 783,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdSwapLineupCsReq)
    CmdSwapLineupCsReq = 722,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdGetAllLineupDataCsReq)
    CmdGetAllLineupDataCsReq = 733,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdSyncLineupNotify)
    CmdSyncLineupNotify = 772,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdVirtualLineupTrialAvatarChangeScNotify)
    CmdVirtualLineupTrialAvatarChangeScNotify = 763,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdSetLineupNameScRsp)
    CmdSetLineupNameScRsp = 743,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdReplaceLineupCsReq)
    CmdReplaceLineupCsReq = 758,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdQuitLineupScRsp)
    CmdQuitLineupScRsp = 752,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdSetLineupNameCsReq)
    CmdSetLineupNameCsReq = 739,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdJoinLineupCsReq)
    CmdJoinLineupCsReq = 776,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdGetCurLineupDataCsReq)
    CmdGetCurLineupDataCsReq = 731,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdGetAllLineupDataScRsp)
    CmdGetAllLineupDataScRsp = 742,
    // @@protoc_insertion_point(enum_value:CmdLineupType.CmdChangeLineupLeaderCsReq)
    CmdChangeLineupLeaderCsReq = 746,
}

impl ::protobuf::Enum for CmdLineupType {
    const NAME: &'static str = "CmdLineupType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdLineupType> {
        match value {
            0 => ::std::option::Option::Some(CmdLineupType::CmdLineupTypeNone),
            756 => ::std::option::Option::Some(CmdLineupType::CmdSwapLineupScRsp),
            748 => ::std::option::Option::Some(CmdLineupType::CmdJoinLineupScRsp),
            771 => ::std::option::Option::Some(CmdLineupType::CmdQuitLineupCsReq),
            732 => ::std::option::Option::Some(CmdLineupType::CmdGetStageLineupScRsp),
            740 => ::std::option::Option::Some(CmdLineupType::CmdGetCurLineupDataScRsp),
            729 => ::std::option::Option::Some(CmdLineupType::CmdExtraLineupDestroyNotify),
            716 => ::std::option::Option::Some(CmdLineupType::CmdGetLineupAvatarDataScRsp),
            702 => ::std::option::Option::Some(CmdLineupType::CmdSwitchLineupIndexScRsp),
            785 => ::std::option::Option::Some(CmdLineupType::CmdGetLineupAvatarDataCsReq),
            760 => ::std::option::Option::Some(CmdLineupType::CmdSwitchLineupIndexCsReq),
            795 => ::std::option::Option::Some(CmdLineupType::CmdGetStageLineupCsReq),
            777 => ::std::option::Option::Some(CmdLineupType::CmdVirtualLineupDestroyNotify),
            721 => ::std::option::Option::Some(CmdLineupType::CmdReplaceLineupScRsp),
            783 => ::std::option::Option::Some(CmdLineupType::CmdChangeLineupLeaderScRsp),
            722 => ::std::option::Option::Some(CmdLineupType::CmdSwapLineupCsReq),
            733 => ::std::option::Option::Some(CmdLineupType::CmdGetAllLineupDataCsReq),
            772 => ::std::option::Option::Some(CmdLineupType::CmdSyncLineupNotify),
            763 => ::std::option::Option::Some(CmdLineupType::CmdVirtualLineupTrialAvatarChangeScNotify),
            743 => ::std::option::Option::Some(CmdLineupType::CmdSetLineupNameScRsp),
            758 => ::std::option::Option::Some(CmdLineupType::CmdReplaceLineupCsReq),
            752 => ::std::option::Option::Some(CmdLineupType::CmdQuitLineupScRsp),
            739 => ::std::option::Option::Some(CmdLineupType::CmdSetLineupNameCsReq),
            776 => ::std::option::Option::Some(CmdLineupType::CmdJoinLineupCsReq),
            731 => ::std::option::Option::Some(CmdLineupType::CmdGetCurLineupDataCsReq),
            742 => ::std::option::Option::Some(CmdLineupType::CmdGetAllLineupDataScRsp),
            746 => ::std::option::Option::Some(CmdLineupType::CmdChangeLineupLeaderCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdLineupType> {
        match str {
            "CmdLineupTypeNone" => ::std::option::Option::Some(CmdLineupType::CmdLineupTypeNone),
            "CmdSwapLineupScRsp" => ::std::option::Option::Some(CmdLineupType::CmdSwapLineupScRsp),
            "CmdJoinLineupScRsp" => ::std::option::Option::Some(CmdLineupType::CmdJoinLineupScRsp),
            "CmdQuitLineupCsReq" => ::std::option::Option::Some(CmdLineupType::CmdQuitLineupCsReq),
            "CmdGetStageLineupScRsp" => ::std::option::Option::Some(CmdLineupType::CmdGetStageLineupScRsp),
            "CmdGetCurLineupDataScRsp" => ::std::option::Option::Some(CmdLineupType::CmdGetCurLineupDataScRsp),
            "CmdExtraLineupDestroyNotify" => ::std::option::Option::Some(CmdLineupType::CmdExtraLineupDestroyNotify),
            "CmdGetLineupAvatarDataScRsp" => ::std::option::Option::Some(CmdLineupType::CmdGetLineupAvatarDataScRsp),
            "CmdSwitchLineupIndexScRsp" => ::std::option::Option::Some(CmdLineupType::CmdSwitchLineupIndexScRsp),
            "CmdGetLineupAvatarDataCsReq" => ::std::option::Option::Some(CmdLineupType::CmdGetLineupAvatarDataCsReq),
            "CmdSwitchLineupIndexCsReq" => ::std::option::Option::Some(CmdLineupType::CmdSwitchLineupIndexCsReq),
            "CmdGetStageLineupCsReq" => ::std::option::Option::Some(CmdLineupType::CmdGetStageLineupCsReq),
            "CmdVirtualLineupDestroyNotify" => ::std::option::Option::Some(CmdLineupType::CmdVirtualLineupDestroyNotify),
            "CmdReplaceLineupScRsp" => ::std::option::Option::Some(CmdLineupType::CmdReplaceLineupScRsp),
            "CmdChangeLineupLeaderScRsp" => ::std::option::Option::Some(CmdLineupType::CmdChangeLineupLeaderScRsp),
            "CmdSwapLineupCsReq" => ::std::option::Option::Some(CmdLineupType::CmdSwapLineupCsReq),
            "CmdGetAllLineupDataCsReq" => ::std::option::Option::Some(CmdLineupType::CmdGetAllLineupDataCsReq),
            "CmdSyncLineupNotify" => ::std::option::Option::Some(CmdLineupType::CmdSyncLineupNotify),
            "CmdVirtualLineupTrialAvatarChangeScNotify" => ::std::option::Option::Some(CmdLineupType::CmdVirtualLineupTrialAvatarChangeScNotify),
            "CmdSetLineupNameScRsp" => ::std::option::Option::Some(CmdLineupType::CmdSetLineupNameScRsp),
            "CmdReplaceLineupCsReq" => ::std::option::Option::Some(CmdLineupType::CmdReplaceLineupCsReq),
            "CmdQuitLineupScRsp" => ::std::option::Option::Some(CmdLineupType::CmdQuitLineupScRsp),
            "CmdSetLineupNameCsReq" => ::std::option::Option::Some(CmdLineupType::CmdSetLineupNameCsReq),
            "CmdJoinLineupCsReq" => ::std::option::Option::Some(CmdLineupType::CmdJoinLineupCsReq),
            "CmdGetCurLineupDataCsReq" => ::std::option::Option::Some(CmdLineupType::CmdGetCurLineupDataCsReq),
            "CmdGetAllLineupDataScRsp" => ::std::option::Option::Some(CmdLineupType::CmdGetAllLineupDataScRsp),
            "CmdChangeLineupLeaderCsReq" => ::std::option::Option::Some(CmdLineupType::CmdChangeLineupLeaderCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdLineupType] = &[
        CmdLineupType::CmdLineupTypeNone,
        CmdLineupType::CmdSwapLineupScRsp,
        CmdLineupType::CmdJoinLineupScRsp,
        CmdLineupType::CmdQuitLineupCsReq,
        CmdLineupType::CmdGetStageLineupScRsp,
        CmdLineupType::CmdGetCurLineupDataScRsp,
        CmdLineupType::CmdExtraLineupDestroyNotify,
        CmdLineupType::CmdGetLineupAvatarDataScRsp,
        CmdLineupType::CmdSwitchLineupIndexScRsp,
        CmdLineupType::CmdGetLineupAvatarDataCsReq,
        CmdLineupType::CmdSwitchLineupIndexCsReq,
        CmdLineupType::CmdGetStageLineupCsReq,
        CmdLineupType::CmdVirtualLineupDestroyNotify,
        CmdLineupType::CmdReplaceLineupScRsp,
        CmdLineupType::CmdChangeLineupLeaderScRsp,
        CmdLineupType::CmdSwapLineupCsReq,
        CmdLineupType::CmdGetAllLineupDataCsReq,
        CmdLineupType::CmdSyncLineupNotify,
        CmdLineupType::CmdVirtualLineupTrialAvatarChangeScNotify,
        CmdLineupType::CmdSetLineupNameScRsp,
        CmdLineupType::CmdReplaceLineupCsReq,
        CmdLineupType::CmdQuitLineupScRsp,
        CmdLineupType::CmdSetLineupNameCsReq,
        CmdLineupType::CmdJoinLineupCsReq,
        CmdLineupType::CmdGetCurLineupDataCsReq,
        CmdLineupType::CmdGetAllLineupDataScRsp,
        CmdLineupType::CmdChangeLineupLeaderCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdLineupType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdLineupType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdLineupType::CmdLineupTypeNone => 0,
            CmdLineupType::CmdSwapLineupScRsp => 1,
            CmdLineupType::CmdJoinLineupScRsp => 2,
            CmdLineupType::CmdQuitLineupCsReq => 3,
            CmdLineupType::CmdGetStageLineupScRsp => 4,
            CmdLineupType::CmdGetCurLineupDataScRsp => 5,
            CmdLineupType::CmdExtraLineupDestroyNotify => 6,
            CmdLineupType::CmdGetLineupAvatarDataScRsp => 7,
            CmdLineupType::CmdSwitchLineupIndexScRsp => 8,
            CmdLineupType::CmdGetLineupAvatarDataCsReq => 9,
            CmdLineupType::CmdSwitchLineupIndexCsReq => 10,
            CmdLineupType::CmdGetStageLineupCsReq => 11,
            CmdLineupType::CmdVirtualLineupDestroyNotify => 12,
            CmdLineupType::CmdReplaceLineupScRsp => 13,
            CmdLineupType::CmdChangeLineupLeaderScRsp => 14,
            CmdLineupType::CmdSwapLineupCsReq => 15,
            CmdLineupType::CmdGetAllLineupDataCsReq => 16,
            CmdLineupType::CmdSyncLineupNotify => 17,
            CmdLineupType::CmdVirtualLineupTrialAvatarChangeScNotify => 18,
            CmdLineupType::CmdSetLineupNameScRsp => 19,
            CmdLineupType::CmdReplaceLineupCsReq => 20,
            CmdLineupType::CmdQuitLineupScRsp => 21,
            CmdLineupType::CmdSetLineupNameCsReq => 22,
            CmdLineupType::CmdJoinLineupCsReq => 23,
            CmdLineupType::CmdGetCurLineupDataCsReq => 24,
            CmdLineupType::CmdGetAllLineupDataScRsp => 25,
            CmdLineupType::CmdChangeLineupLeaderCsReq => 26,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdLineupType {
    fn default() -> Self {
        CmdLineupType::CmdLineupTypeNone
    }
}

impl CmdLineupType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdLineupType>("CmdLineupType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13CmdLineupType.proto*\xb8\x06\n\rCmdLineupType\x12\x15\n\x11CmdLine\
    upTypeNone\x10\0\x12\x17\n\x12CmdSwapLineupScRsp\x10\xf4\x05\x12\x17\n\
    \x12CmdJoinLineupScRsp\x10\xec\x05\x12\x17\n\x12CmdQuitLineupCsReq\x10\
    \x83\x06\x12\x1b\n\x16CmdGetStageLineupScRsp\x10\xdc\x05\x12\x1d\n\x18Cm\
    dGetCurLineupDataScRsp\x10\xe4\x05\x12\x20\n\x1bCmdExtraLineupDestroyNot\
    ify\x10\xd9\x05\x12\x20\n\x1bCmdGetLineupAvatarDataScRsp\x10\xcc\x05\x12\
    \x1e\n\x19CmdSwitchLineupIndexScRsp\x10\xbe\x05\x12\x20\n\x1bCmdGetLineu\
    pAvatarDataCsReq\x10\x91\x06\x12\x1e\n\x19CmdSwitchLineupIndexCsReq\x10\
    \xf8\x05\x12\x1b\n\x16CmdGetStageLineupCsReq\x10\x9b\x06\x12\"\n\x1dCmdV\
    irtualLineupDestroyNotify\x10\x89\x06\x12\x1a\n\x15CmdReplaceLineupScRsp\
    \x10\xd1\x05\x12\x1f\n\x1aCmdChangeLineupLeaderScRsp\x10\x8f\x06\x12\x17\
    \n\x12CmdSwapLineupCsReq\x10\xd2\x05\x12\x1d\n\x18CmdGetAllLineupDataCsR\
    eq\x10\xdd\x05\x12\x18\n\x13CmdSyncLineupNotify\x10\x84\x06\x12.\n)CmdVi\
    rtualLineupTrialAvatarChangeScNotify\x10\xfb\x05\x12\x1a\n\x15CmdSetLine\
    upNameScRsp\x10\xe7\x05\x12\x1a\n\x15CmdReplaceLineupCsReq\x10\xf6\x05\
    \x12\x17\n\x12CmdQuitLineupScRsp\x10\xf0\x05\x12\x1a\n\x15CmdSetLineupNa\
    meCsReq\x10\xe3\x05\x12\x17\n\x12CmdJoinLineupCsReq\x10\x88\x06\x12\x1d\
    \n\x18CmdGetCurLineupDataCsReq\x10\xdb\x05\x12\x1d\n\x18CmdGetAllLineupD\
    ataScRsp\x10\xe6\x05\x12\x1f\n\x1aCmdChangeLineupLeaderCsReq\x10\xea\x05\
    b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdLineupType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
