// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `IIPKANNMLFN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:IIPKANNMLFN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IIPKANNMLFN {
    // message fields
    // @@protoc_insertion_point(field:IIPKANNMLFN.HPOLOCPDDAC)
    pub HPOLOCPDDAC: u32,
    // @@protoc_insertion_point(field:IIPKANNMLFN.KJEBIDEDLLD)
    pub KJEBIDEDLLD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:IIPKANNMLFN.KKCMFGMHIMO)
    pub KKCMFGMHIMO: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:IIPKANNMLFN.LGEJJAJPEDK)
    pub LGEJJAJPEDK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:IIPKANNMLFN.FBBAJBINGLB)
    pub FBBAJBINGLB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:IIPKANNMLFN.MPMFAHLKEOB)
    pub MPMFAHLKEOB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:IIPKANNMLFN.KNLJGCADLJK)
    pub KNLJGCADLJK: bool,
    // @@protoc_insertion_point(field:IIPKANNMLFN.IAMCOFEIJKI)
    pub IAMCOFEIJKI: u32,
    // @@protoc_insertion_point(field:IIPKANNMLFN.CGPDCGDHGJF)
    pub CGPDCGDHGJF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:IIPKANNMLFN.IKNCCGNELKN)
    pub IKNCCGNELKN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:IIPKANNMLFN.AJHLFMLJOIB)
    pub AJHLFMLJOIB: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:IIPKANNMLFN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IIPKANNMLFN {
    fn default() -> &'a IIPKANNMLFN {
        <IIPKANNMLFN as ::protobuf::Message>::default_instance()
    }
}

impl IIPKANNMLFN {
    pub fn new() -> IIPKANNMLFN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HPOLOCPDDAC",
            |m: &IIPKANNMLFN| { &m.HPOLOCPDDAC },
            |m: &mut IIPKANNMLFN| { &mut m.HPOLOCPDDAC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KJEBIDEDLLD",
            |m: &IIPKANNMLFN| { &m.KJEBIDEDLLD },
            |m: &mut IIPKANNMLFN| { &mut m.KJEBIDEDLLD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KKCMFGMHIMO",
            |m: &IIPKANNMLFN| { &m.KKCMFGMHIMO },
            |m: &mut IIPKANNMLFN| { &mut m.KKCMFGMHIMO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LGEJJAJPEDK",
            |m: &IIPKANNMLFN| { &m.LGEJJAJPEDK },
            |m: &mut IIPKANNMLFN| { &mut m.LGEJJAJPEDK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FBBAJBINGLB",
            |m: &IIPKANNMLFN| { &m.FBBAJBINGLB },
            |m: &mut IIPKANNMLFN| { &mut m.FBBAJBINGLB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MPMFAHLKEOB",
            |m: &IIPKANNMLFN| { &m.MPMFAHLKEOB },
            |m: &mut IIPKANNMLFN| { &mut m.MPMFAHLKEOB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KNLJGCADLJK",
            |m: &IIPKANNMLFN| { &m.KNLJGCADLJK },
            |m: &mut IIPKANNMLFN| { &mut m.KNLJGCADLJK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IAMCOFEIJKI",
            |m: &IIPKANNMLFN| { &m.IAMCOFEIJKI },
            |m: &mut IIPKANNMLFN| { &mut m.IAMCOFEIJKI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CGPDCGDHGJF",
            |m: &IIPKANNMLFN| { &m.CGPDCGDHGJF },
            |m: &mut IIPKANNMLFN| { &mut m.CGPDCGDHGJF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IKNCCGNELKN",
            |m: &IIPKANNMLFN| { &m.IKNCCGNELKN },
            |m: &mut IIPKANNMLFN| { &mut m.IKNCCGNELKN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AJHLFMLJOIB",
            |m: &IIPKANNMLFN| { &m.AJHLFMLJOIB },
            |m: &mut IIPKANNMLFN| { &mut m.AJHLFMLJOIB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IIPKANNMLFN>(
            "IIPKANNMLFN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IIPKANNMLFN {
    const NAME: &'static str = "IIPKANNMLFN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.HPOLOCPDDAC = is.read_uint32()?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.KJEBIDEDLLD)?;
                },
                16 => {
                    self.KJEBIDEDLLD.push(is.read_uint32()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.KKCMFGMHIMO)?;
                },
                24 => {
                    self.KKCMFGMHIMO.push(is.read_uint32()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.LGEJJAJPEDK)?;
                },
                32 => {
                    self.LGEJJAJPEDK.push(is.read_uint32()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.FBBAJBINGLB)?;
                },
                40 => {
                    self.FBBAJBINGLB.push(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.MPMFAHLKEOB)?;
                },
                48 => {
                    self.MPMFAHLKEOB.push(is.read_uint32()?);
                },
                56 => {
                    self.KNLJGCADLJK = is.read_bool()?;
                },
                64 => {
                    self.IAMCOFEIJKI = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.CGPDCGDHGJF)?;
                },
                72 => {
                    self.CGPDCGDHGJF.push(is.read_uint32()?);
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.IKNCCGNELKN)?;
                },
                80 => {
                    self.IKNCCGNELKN.push(is.read_uint32()?);
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.AJHLFMLJOIB)?;
                },
                88 => {
                    self.AJHLFMLJOIB.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HPOLOCPDDAC != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.HPOLOCPDDAC);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(2, &self.KJEBIDEDLLD);
        my_size += ::protobuf::rt::vec_packed_uint32_size(3, &self.KKCMFGMHIMO);
        my_size += ::protobuf::rt::vec_packed_uint32_size(4, &self.LGEJJAJPEDK);
        my_size += ::protobuf::rt::vec_packed_uint32_size(5, &self.FBBAJBINGLB);
        my_size += ::protobuf::rt::vec_packed_uint32_size(6, &self.MPMFAHLKEOB);
        if self.KNLJGCADLJK != false {
            my_size += 1 + 1;
        }
        if self.IAMCOFEIJKI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.IAMCOFEIJKI);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(9, &self.CGPDCGDHGJF);
        my_size += ::protobuf::rt::vec_packed_uint32_size(10, &self.IKNCCGNELKN);
        my_size += ::protobuf::rt::vec_packed_uint32_size(11, &self.AJHLFMLJOIB);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HPOLOCPDDAC != 0 {
            os.write_uint32(1, self.HPOLOCPDDAC)?;
        }
        os.write_repeated_packed_uint32(2, &self.KJEBIDEDLLD)?;
        os.write_repeated_packed_uint32(3, &self.KKCMFGMHIMO)?;
        os.write_repeated_packed_uint32(4, &self.LGEJJAJPEDK)?;
        os.write_repeated_packed_uint32(5, &self.FBBAJBINGLB)?;
        os.write_repeated_packed_uint32(6, &self.MPMFAHLKEOB)?;
        if self.KNLJGCADLJK != false {
            os.write_bool(7, self.KNLJGCADLJK)?;
        }
        if self.IAMCOFEIJKI != 0 {
            os.write_uint32(8, self.IAMCOFEIJKI)?;
        }
        os.write_repeated_packed_uint32(9, &self.CGPDCGDHGJF)?;
        os.write_repeated_packed_uint32(10, &self.IKNCCGNELKN)?;
        os.write_repeated_packed_uint32(11, &self.AJHLFMLJOIB)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IIPKANNMLFN {
        IIPKANNMLFN::new()
    }

    fn clear(&mut self) {
        self.HPOLOCPDDAC = 0;
        self.KJEBIDEDLLD.clear();
        self.KKCMFGMHIMO.clear();
        self.LGEJJAJPEDK.clear();
        self.FBBAJBINGLB.clear();
        self.MPMFAHLKEOB.clear();
        self.KNLJGCADLJK = false;
        self.IAMCOFEIJKI = 0;
        self.CGPDCGDHGJF.clear();
        self.IKNCCGNELKN.clear();
        self.AJHLFMLJOIB.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IIPKANNMLFN {
        static instance: IIPKANNMLFN = IIPKANNMLFN {
            HPOLOCPDDAC: 0,
            KJEBIDEDLLD: ::std::vec::Vec::new(),
            KKCMFGMHIMO: ::std::vec::Vec::new(),
            LGEJJAJPEDK: ::std::vec::Vec::new(),
            FBBAJBINGLB: ::std::vec::Vec::new(),
            MPMFAHLKEOB: ::std::vec::Vec::new(),
            KNLJGCADLJK: false,
            IAMCOFEIJKI: 0,
            CGPDCGDHGJF: ::std::vec::Vec::new(),
            IKNCCGNELKN: ::std::vec::Vec::new(),
            AJHLFMLJOIB: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IIPKANNMLFN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IIPKANNMLFN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IIPKANNMLFN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IIPKANNMLFN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11IIPKANNMLFN.proto\"\x83\x03\n\x0bIIPKANNMLFN\x12\x20\n\x0bHPOLOCPD\
    DAC\x18\x01\x20\x01(\rR\x0bHPOLOCPDDAC\x12\x20\n\x0bKJEBIDEDLLD\x18\x02\
    \x20\x03(\rR\x0bKJEBIDEDLLD\x12\x20\n\x0bKKCMFGMHIMO\x18\x03\x20\x03(\rR\
    \x0bKKCMFGMHIMO\x12\x20\n\x0bLGEJJAJPEDK\x18\x04\x20\x03(\rR\x0bLGEJJAJP\
    EDK\x12\x20\n\x0bFBBAJBINGLB\x18\x05\x20\x03(\rR\x0bFBBAJBINGLB\x12\x20\
    \n\x0bMPMFAHLKEOB\x18\x06\x20\x03(\rR\x0bMPMFAHLKEOB\x12\x20\n\x0bKNLJGC\
    ADLJK\x18\x07\x20\x01(\x08R\x0bKNLJGCADLJK\x12\x20\n\x0bIAMCOFEIJKI\x18\
    \x08\x20\x01(\rR\x0bIAMCOFEIJKI\x12\x20\n\x0bCGPDCGDHGJF\x18\t\x20\x03(\
    \rR\x0bCGPDCGDHGJF\x12\x20\n\x0bIKNCCGNELKN\x18\n\x20\x03(\rR\x0bIKNCCGN\
    ELKN\x12\x20\n\x0bAJHLFMLJOIB\x18\x0b\x20\x03(\rR\x0bAJHLFMLJOIBb\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(IIPKANNMLFN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
