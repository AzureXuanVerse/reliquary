// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HandleRogueCommonPendingActionCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:HandleRogueCommonPendingActionCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HandleRogueCommonPendingActionCsReq {
    // message fields
    // @@protoc_insertion_point(field:HandleRogueCommonPendingActionCsReq.IFDKLLHFPJB)
    pub IFDKLLHFPJB: u32,
    // message oneof groups
    pub NHICOMHCEGC: ::std::option::Option<handle_rogue_common_pending_action_cs_req::NHICOMHCEGC>,
    // special fields
    // @@protoc_insertion_point(special_field:HandleRogueCommonPendingActionCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HandleRogueCommonPendingActionCsReq {
    fn default() -> &'a HandleRogueCommonPendingActionCsReq {
        <HandleRogueCommonPendingActionCsReq as ::protobuf::Message>::default_instance()
    }
}

impl HandleRogueCommonPendingActionCsReq {
    pub fn new() -> HandleRogueCommonPendingActionCsReq {
        ::std::default::Default::default()
    }

    // .HKHFBELMDCG JKHBBDLCHID = 1234;

    pub fn JKHBBDLCHID(&self) -> &super::HKHFBELMDCG::HKHFBELMDCG {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(ref v)) => v,
            _ => <super::HKHFBELMDCG::HKHFBELMDCG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JKHBBDLCHID(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_JKHBBDLCHID(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JKHBBDLCHID(&mut self, v: super::HKHFBELMDCG::HKHFBELMDCG) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JKHBBDLCHID(&mut self) -> &mut super::HKHFBELMDCG::HKHFBELMDCG {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(super::HKHFBELMDCG::HKHFBELMDCG::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JKHBBDLCHID(&mut self) -> super::HKHFBELMDCG::HKHFBELMDCG {
        if self.has_JKHBBDLCHID() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HKHFBELMDCG::HKHFBELMDCG::new()
        }
    }

    // .PBMAKLNJEKO KBNEGOLPLFC = 1593;

    pub fn KBNEGOLPLFC(&self) -> &super::PBMAKLNJEKO::PBMAKLNJEKO {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(ref v)) => v,
            _ => <super::PBMAKLNJEKO::PBMAKLNJEKO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KBNEGOLPLFC(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_KBNEGOLPLFC(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KBNEGOLPLFC(&mut self, v: super::PBMAKLNJEKO::PBMAKLNJEKO) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KBNEGOLPLFC(&mut self) -> &mut super::PBMAKLNJEKO::PBMAKLNJEKO {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(super::PBMAKLNJEKO::PBMAKLNJEKO::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KBNEGOLPLFC(&mut self) -> super::PBMAKLNJEKO::PBMAKLNJEKO {
        if self.has_KBNEGOLPLFC() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PBMAKLNJEKO::PBMAKLNJEKO::new()
        }
    }

    // .OKEFIDDNLKG GDKGIBEKGPF = 407;

    pub fn GDKGIBEKGPF(&self) -> &super::OKEFIDDNLKG::OKEFIDDNLKG {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(ref v)) => v,
            _ => <super::OKEFIDDNLKG::OKEFIDDNLKG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GDKGIBEKGPF(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_GDKGIBEKGPF(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GDKGIBEKGPF(&mut self, v: super::OKEFIDDNLKG::OKEFIDDNLKG) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GDKGIBEKGPF(&mut self) -> &mut super::OKEFIDDNLKG::OKEFIDDNLKG {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(super::OKEFIDDNLKG::OKEFIDDNLKG::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GDKGIBEKGPF(&mut self) -> super::OKEFIDDNLKG::OKEFIDDNLKG {
        if self.has_GDKGIBEKGPF() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OKEFIDDNLKG::OKEFIDDNLKG::new()
        }
    }

    // .MMNDAJFIJOJ ONCNGIILENF = 533;

    pub fn ONCNGIILENF(&self) -> &super::MMNDAJFIJOJ::MMNDAJFIJOJ {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(ref v)) => v,
            _ => <super::MMNDAJFIJOJ::MMNDAJFIJOJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ONCNGIILENF(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_ONCNGIILENF(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ONCNGIILENF(&mut self, v: super::MMNDAJFIJOJ::MMNDAJFIJOJ) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ONCNGIILENF(&mut self) -> &mut super::MMNDAJFIJOJ::MMNDAJFIJOJ {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(super::MMNDAJFIJOJ::MMNDAJFIJOJ::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ONCNGIILENF(&mut self) -> super::MMNDAJFIJOJ::MMNDAJFIJOJ {
        if self.has_ONCNGIILENF() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MMNDAJFIJOJ::MMNDAJFIJOJ::new()
        }
    }

    // .BFBFMLBHGOH GLEJCDPDJNE = 1851;

    pub fn GLEJCDPDJNE(&self) -> &super::BFBFMLBHGOH::BFBFMLBHGOH {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(ref v)) => v,
            _ => <super::BFBFMLBHGOH::BFBFMLBHGOH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GLEJCDPDJNE(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_GLEJCDPDJNE(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GLEJCDPDJNE(&mut self, v: super::BFBFMLBHGOH::BFBFMLBHGOH) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GLEJCDPDJNE(&mut self) -> &mut super::BFBFMLBHGOH::BFBFMLBHGOH {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(super::BFBFMLBHGOH::BFBFMLBHGOH::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GLEJCDPDJNE(&mut self) -> super::BFBFMLBHGOH::BFBFMLBHGOH {
        if self.has_GLEJCDPDJNE() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BFBFMLBHGOH::BFBFMLBHGOH::new()
        }
    }

    // .MPPHHNAEEDK OOAGPGDPJOA = 235;

    pub fn OOAGPGDPJOA(&self) -> &super::MPPHHNAEEDK::MPPHHNAEEDK {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(ref v)) => v,
            _ => <super::MPPHHNAEEDK::MPPHHNAEEDK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OOAGPGDPJOA(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_OOAGPGDPJOA(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OOAGPGDPJOA(&mut self, v: super::MPPHHNAEEDK::MPPHHNAEEDK) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OOAGPGDPJOA(&mut self) -> &mut super::MPPHHNAEEDK::MPPHHNAEEDK {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(super::MPPHHNAEEDK::MPPHHNAEEDK::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OOAGPGDPJOA(&mut self) -> super::MPPHHNAEEDK::MPPHHNAEEDK {
        if self.has_OOAGPGDPJOA() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MPPHHNAEEDK::MPPHHNAEEDK::new()
        }
    }

    // .JFPFDJPPOAG IDBALJBNBKE = 1427;

    pub fn IDBALJBNBKE(&self) -> &super::JFPFDJPPOAG::JFPFDJPPOAG {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(ref v)) => v,
            _ => <super::JFPFDJPPOAG::JFPFDJPPOAG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IDBALJBNBKE(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_IDBALJBNBKE(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IDBALJBNBKE(&mut self, v: super::JFPFDJPPOAG::JFPFDJPPOAG) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IDBALJBNBKE(&mut self) -> &mut super::JFPFDJPPOAG::JFPFDJPPOAG {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(super::JFPFDJPPOAG::JFPFDJPPOAG::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IDBALJBNBKE(&mut self) -> super::JFPFDJPPOAG::JFPFDJPPOAG {
        if self.has_IDBALJBNBKE() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JFPFDJPPOAG::JFPFDJPPOAG::new()
        }
    }

    // .NALELIGHDAA GNEBJEPPKEJ = 774;

    pub fn GNEBJEPPKEJ(&self) -> &super::NALELIGHDAA::NALELIGHDAA {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(ref v)) => v,
            _ => <super::NALELIGHDAA::NALELIGHDAA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GNEBJEPPKEJ(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_GNEBJEPPKEJ(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GNEBJEPPKEJ(&mut self, v: super::NALELIGHDAA::NALELIGHDAA) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GNEBJEPPKEJ(&mut self) -> &mut super::NALELIGHDAA::NALELIGHDAA {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(super::NALELIGHDAA::NALELIGHDAA::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GNEBJEPPKEJ(&mut self) -> super::NALELIGHDAA::NALELIGHDAA {
        if self.has_GNEBJEPPKEJ() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NALELIGHDAA::NALELIGHDAA::new()
        }
    }

    // .PKODMMPHIBC KJLAFILAPJF = 651;

    pub fn KJLAFILAPJF(&self) -> &super::PKODMMPHIBC::PKODMMPHIBC {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(ref v)) => v,
            _ => <super::PKODMMPHIBC::PKODMMPHIBC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KJLAFILAPJF(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_KJLAFILAPJF(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KJLAFILAPJF(&mut self, v: super::PKODMMPHIBC::PKODMMPHIBC) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KJLAFILAPJF(&mut self) -> &mut super::PKODMMPHIBC::PKODMMPHIBC {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(super::PKODMMPHIBC::PKODMMPHIBC::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KJLAFILAPJF(&mut self) -> super::PKODMMPHIBC::PKODMMPHIBC {
        if self.has_KJLAFILAPJF() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PKODMMPHIBC::PKODMMPHIBC::new()
        }
    }

    // .NHCKHPLKLIO FLFPCPHLAGO = 179;

    pub fn FLFPCPHLAGO(&self) -> &super::NHCKHPLKLIO::NHCKHPLKLIO {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(ref v)) => v,
            _ => <super::NHCKHPLKLIO::NHCKHPLKLIO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FLFPCPHLAGO(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_FLFPCPHLAGO(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FLFPCPHLAGO(&mut self, v: super::NHCKHPLKLIO::NHCKHPLKLIO) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FLFPCPHLAGO(&mut self) -> &mut super::NHCKHPLKLIO::NHCKHPLKLIO {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(super::NHCKHPLKLIO::NHCKHPLKLIO::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FLFPCPHLAGO(&mut self) -> super::NHCKHPLKLIO::NHCKHPLKLIO {
        if self.has_FLFPCPHLAGO() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NHCKHPLKLIO::NHCKHPLKLIO::new()
        }
    }

    // .LHJPIKEKPGH EPOAKMFMFLM = 1869;

    pub fn EPOAKMFMFLM(&self) -> &super::LHJPIKEKPGH::LHJPIKEKPGH {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(ref v)) => v,
            _ => <super::LHJPIKEKPGH::LHJPIKEKPGH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EPOAKMFMFLM(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_EPOAKMFMFLM(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EPOAKMFMFLM(&mut self, v: super::LHJPIKEKPGH::LHJPIKEKPGH) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EPOAKMFMFLM(&mut self) -> &mut super::LHJPIKEKPGH::LHJPIKEKPGH {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(super::LHJPIKEKPGH::LHJPIKEKPGH::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EPOAKMFMFLM(&mut self) -> super::LHJPIKEKPGH::LHJPIKEKPGH {
        if self.has_EPOAKMFMFLM() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LHJPIKEKPGH::LHJPIKEKPGH::new()
        }
    }

    // .IMCBIIGOKPM FKPFOKHBPKK = 136;

    pub fn FKPFOKHBPKK(&self) -> &super::IMCBIIGOKPM::IMCBIIGOKPM {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(ref v)) => v,
            _ => <super::IMCBIIGOKPM::IMCBIIGOKPM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FKPFOKHBPKK(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_FKPFOKHBPKK(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FKPFOKHBPKK(&mut self, v: super::IMCBIIGOKPM::IMCBIIGOKPM) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FKPFOKHBPKK(&mut self) -> &mut super::IMCBIIGOKPM::IMCBIIGOKPM {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(super::IMCBIIGOKPM::IMCBIIGOKPM::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FKPFOKHBPKK(&mut self) -> super::IMCBIIGOKPM::IMCBIIGOKPM {
        if self.has_FKPFOKHBPKK() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IMCBIIGOKPM::IMCBIIGOKPM::new()
        }
    }

    // .LKMKHACMAPC EODCLAIPCAE = 1276;

    pub fn EODCLAIPCAE(&self) -> &super::LKMKHACMAPC::LKMKHACMAPC {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(ref v)) => v,
            _ => <super::LKMKHACMAPC::LKMKHACMAPC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EODCLAIPCAE(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_EODCLAIPCAE(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EODCLAIPCAE(&mut self, v: super::LKMKHACMAPC::LKMKHACMAPC) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EODCLAIPCAE(&mut self) -> &mut super::LKMKHACMAPC::LKMKHACMAPC {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(super::LKMKHACMAPC::LKMKHACMAPC::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EODCLAIPCAE(&mut self) -> super::LKMKHACMAPC::LKMKHACMAPC {
        if self.has_EODCLAIPCAE() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LKMKHACMAPC::LKMKHACMAPC::new()
        }
    }

    // .IMLBIBJKPDB AOCODAOBKHM = 822;

    pub fn AOCODAOBKHM(&self) -> &super::IMLBIBJKPDB::IMLBIBJKPDB {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(ref v)) => v,
            _ => <super::IMLBIBJKPDB::IMLBIBJKPDB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AOCODAOBKHM(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_AOCODAOBKHM(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AOCODAOBKHM(&mut self, v: super::IMLBIBJKPDB::IMLBIBJKPDB) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AOCODAOBKHM(&mut self) -> &mut super::IMLBIBJKPDB::IMLBIBJKPDB {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(super::IMLBIBJKPDB::IMLBIBJKPDB::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AOCODAOBKHM(&mut self) -> super::IMLBIBJKPDB::IMLBIBJKPDB {
        if self.has_AOCODAOBKHM() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IMLBIBJKPDB::IMLBIBJKPDB::new()
        }
    }

    // .NOLCMKCNEAF EGGGGGGLFHO = 1348;

    pub fn EGGGGGGLFHO(&self) -> &super::NOLCMKCNEAF::NOLCMKCNEAF {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(ref v)) => v,
            _ => <super::NOLCMKCNEAF::NOLCMKCNEAF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EGGGGGGLFHO(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_EGGGGGGLFHO(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EGGGGGGLFHO(&mut self, v: super::NOLCMKCNEAF::NOLCMKCNEAF) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EGGGGGGLFHO(&mut self) -> &mut super::NOLCMKCNEAF::NOLCMKCNEAF {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(super::NOLCMKCNEAF::NOLCMKCNEAF::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EGGGGGGLFHO(&mut self) -> super::NOLCMKCNEAF::NOLCMKCNEAF {
        if self.has_EGGGGGGLFHO() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NOLCMKCNEAF::NOLCMKCNEAF::new()
        }
    }

    // .KHGCDEIMLHN LNPLOEOFCCJ = 49;

    pub fn LNPLOEOFCCJ(&self) -> &super::KHGCDEIMLHN::KHGCDEIMLHN {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(ref v)) => v,
            _ => <super::KHGCDEIMLHN::KHGCDEIMLHN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LNPLOEOFCCJ(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_LNPLOEOFCCJ(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LNPLOEOFCCJ(&mut self, v: super::KHGCDEIMLHN::KHGCDEIMLHN) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LNPLOEOFCCJ(&mut self) -> &mut super::KHGCDEIMLHN::KHGCDEIMLHN {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(super::KHGCDEIMLHN::KHGCDEIMLHN::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LNPLOEOFCCJ(&mut self) -> super::KHGCDEIMLHN::KHGCDEIMLHN {
        if self.has_LNPLOEOFCCJ() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KHGCDEIMLHN::KHGCDEIMLHN::new()
        }
    }

    // .ONOOFHDEIDD IEABOHKEAPA = 1260;

    pub fn IEABOHKEAPA(&self) -> &super::ONOOFHDEIDD::ONOOFHDEIDD {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(ref v)) => v,
            _ => <super::ONOOFHDEIDD::ONOOFHDEIDD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IEABOHKEAPA(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_IEABOHKEAPA(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IEABOHKEAPA(&mut self, v: super::ONOOFHDEIDD::ONOOFHDEIDD) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IEABOHKEAPA(&mut self) -> &mut super::ONOOFHDEIDD::ONOOFHDEIDD {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(super::ONOOFHDEIDD::ONOOFHDEIDD::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IEABOHKEAPA(&mut self) -> super::ONOOFHDEIDD::ONOOFHDEIDD {
        if self.has_IEABOHKEAPA() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ONOOFHDEIDD::ONOOFHDEIDD::new()
        }
    }

    // .EKMAHAFGNGJ NEDIIBJHGFO = 220;

    pub fn NEDIIBJHGFO(&self) -> &super::EKMAHAFGNGJ::EKMAHAFGNGJ {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(ref v)) => v,
            _ => <super::EKMAHAFGNGJ::EKMAHAFGNGJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NEDIIBJHGFO(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_NEDIIBJHGFO(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NEDIIBJHGFO(&mut self, v: super::EKMAHAFGNGJ::EKMAHAFGNGJ) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NEDIIBJHGFO(&mut self) -> &mut super::EKMAHAFGNGJ::EKMAHAFGNGJ {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(super::EKMAHAFGNGJ::EKMAHAFGNGJ::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NEDIIBJHGFO(&mut self) -> super::EKMAHAFGNGJ::EKMAHAFGNGJ {
        if self.has_NEDIIBJHGFO() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EKMAHAFGNGJ::EKMAHAFGNGJ::new()
        }
    }

    // .HHHCPCOFPPO JGPCBCJKONH = 1158;

    pub fn JGPCBCJKONH(&self) -> &super::HHHCPCOFPPO::HHHCPCOFPPO {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(ref v)) => v,
            _ => <super::HHHCPCOFPPO::HHHCPCOFPPO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JGPCBCJKONH(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_JGPCBCJKONH(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JGPCBCJKONH(&mut self, v: super::HHHCPCOFPPO::HHHCPCOFPPO) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JGPCBCJKONH(&mut self) -> &mut super::HHHCPCOFPPO::HHHCPCOFPPO {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(super::HHHCPCOFPPO::HHHCPCOFPPO::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JGPCBCJKONH(&mut self) -> super::HHHCPCOFPPO::HHHCPCOFPPO {
        if self.has_JGPCBCJKONH() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HHHCPCOFPPO::HHHCPCOFPPO::new()
        }
    }

    // .AHKFIAKMKLO HKNJIPJHOCG = 64;

    pub fn HKNJIPJHOCG(&self) -> &super::AHKFIAKMKLO::AHKFIAKMKLO {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(ref v)) => v,
            _ => <super::AHKFIAKMKLO::AHKFIAKMKLO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HKNJIPJHOCG(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_HKNJIPJHOCG(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HKNJIPJHOCG(&mut self, v: super::AHKFIAKMKLO::AHKFIAKMKLO) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HKNJIPJHOCG(&mut self) -> &mut super::AHKFIAKMKLO::AHKFIAKMKLO {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(super::AHKFIAKMKLO::AHKFIAKMKLO::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HKNJIPJHOCG(&mut self) -> super::AHKFIAKMKLO::AHKFIAKMKLO {
        if self.has_HKNJIPJHOCG() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AHKFIAKMKLO::AHKFIAKMKLO::new()
        }
    }

    // .JCDLJBPHOMD LDAGLIMNMAN = 89;

    pub fn LDAGLIMNMAN(&self) -> &super::JCDLJBPHOMD::JCDLJBPHOMD {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(ref v)) => v,
            _ => <super::JCDLJBPHOMD::JCDLJBPHOMD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LDAGLIMNMAN(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_LDAGLIMNMAN(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LDAGLIMNMAN(&mut self, v: super::JCDLJBPHOMD::JCDLJBPHOMD) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LDAGLIMNMAN(&mut self) -> &mut super::JCDLJBPHOMD::JCDLJBPHOMD {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(super::JCDLJBPHOMD::JCDLJBPHOMD::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LDAGLIMNMAN(&mut self) -> super::JCDLJBPHOMD::JCDLJBPHOMD {
        if self.has_LDAGLIMNMAN() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JCDLJBPHOMD::JCDLJBPHOMD::new()
        }
    }

    // .HHHCPCOFPPO AFLHEIKJNBN = 1155;

    pub fn AFLHEIKJNBN(&self) -> &super::HHHCPCOFPPO::HHHCPCOFPPO {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(ref v)) => v,
            _ => <super::HHHCPCOFPPO::HHHCPCOFPPO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AFLHEIKJNBN(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_AFLHEIKJNBN(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AFLHEIKJNBN(&mut self, v: super::HHHCPCOFPPO::HHHCPCOFPPO) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AFLHEIKJNBN(&mut self) -> &mut super::HHHCPCOFPPO::HHHCPCOFPPO {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(super::HHHCPCOFPPO::HHHCPCOFPPO::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AFLHEIKJNBN(&mut self) -> super::HHHCPCOFPPO::HHHCPCOFPPO {
        if self.has_AFLHEIKJNBN() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HHHCPCOFPPO::HHHCPCOFPPO::new()
        }
    }

    // .HHHCPCOFPPO PHKBFLNPEFI = 1834;

    pub fn PHKBFLNPEFI(&self) -> &super::HHHCPCOFPPO::HHHCPCOFPPO {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(ref v)) => v,
            _ => <super::HHHCPCOFPPO::HHHCPCOFPPO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PHKBFLNPEFI(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_PHKBFLNPEFI(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PHKBFLNPEFI(&mut self, v: super::HHHCPCOFPPO::HHHCPCOFPPO) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PHKBFLNPEFI(&mut self) -> &mut super::HHHCPCOFPPO::HHHCPCOFPPO {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(super::HHHCPCOFPPO::HHHCPCOFPPO::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PHKBFLNPEFI(&mut self) -> super::HHHCPCOFPPO::HHHCPCOFPPO {
        if self.has_PHKBFLNPEFI() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HHHCPCOFPPO::HHHCPCOFPPO::new()
        }
    }

    // .HHHCPCOFPPO GOCMNDKFOAB = 1960;

    pub fn GOCMNDKFOAB(&self) -> &super::HHHCPCOFPPO::HHHCPCOFPPO {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(ref v)) => v,
            _ => <super::HHHCPCOFPPO::HHHCPCOFPPO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GOCMNDKFOAB(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_GOCMNDKFOAB(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GOCMNDKFOAB(&mut self, v: super::HHHCPCOFPPO::HHHCPCOFPPO) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GOCMNDKFOAB(&mut self) -> &mut super::HHHCPCOFPPO::HHHCPCOFPPO {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(super::HHHCPCOFPPO::HHHCPCOFPPO::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GOCMNDKFOAB(&mut self) -> super::HHHCPCOFPPO::HHHCPCOFPPO {
        if self.has_GOCMNDKFOAB() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HHHCPCOFPPO::HHHCPCOFPPO::new()
        }
    }

    // .IIPEGHDKHGD CHONECOLIHA = 1338;

    pub fn CHONECOLIHA(&self) -> &super::IIPEGHDKHGD::IIPEGHDKHGD {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(ref v)) => v,
            _ => <super::IIPEGHDKHGD::IIPEGHDKHGD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CHONECOLIHA(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_CHONECOLIHA(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CHONECOLIHA(&mut self, v: super::IIPEGHDKHGD::IIPEGHDKHGD) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CHONECOLIHA(&mut self) -> &mut super::IIPEGHDKHGD::IIPEGHDKHGD {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(super::IIPEGHDKHGD::IIPEGHDKHGD::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CHONECOLIHA(&mut self) -> super::IIPEGHDKHGD::IIPEGHDKHGD {
        if self.has_CHONECOLIHA() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IIPEGHDKHGD::IIPEGHDKHGD::new()
        }
    }

    // .IIPEGHDKHGD MOAOGACBOIJ = 1521;

    pub fn MOAOGACBOIJ(&self) -> &super::IIPEGHDKHGD::IIPEGHDKHGD {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(ref v)) => v,
            _ => <super::IIPEGHDKHGD::IIPEGHDKHGD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MOAOGACBOIJ(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_MOAOGACBOIJ(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MOAOGACBOIJ(&mut self, v: super::IIPEGHDKHGD::IIPEGHDKHGD) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MOAOGACBOIJ(&mut self) -> &mut super::IIPEGHDKHGD::IIPEGHDKHGD {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(super::IIPEGHDKHGD::IIPEGHDKHGD::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MOAOGACBOIJ(&mut self) -> super::IIPEGHDKHGD::IIPEGHDKHGD {
        if self.has_MOAOGACBOIJ() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IIPEGHDKHGD::IIPEGHDKHGD::new()
        }
    }

    // .IIPEGHDKHGD KILHFPPBBFM = 1855;

    pub fn KILHFPPBBFM(&self) -> &super::IIPEGHDKHGD::IIPEGHDKHGD {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(ref v)) => v,
            _ => <super::IIPEGHDKHGD::IIPEGHDKHGD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KILHFPPBBFM(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_KILHFPPBBFM(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KILHFPPBBFM(&mut self, v: super::IIPEGHDKHGD::IIPEGHDKHGD) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KILHFPPBBFM(&mut self) -> &mut super::IIPEGHDKHGD::IIPEGHDKHGD {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(super::IIPEGHDKHGD::IIPEGHDKHGD::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KILHFPPBBFM(&mut self) -> super::IIPEGHDKHGD::IIPEGHDKHGD {
        if self.has_KILHFPPBBFM() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IIPEGHDKHGD::IIPEGHDKHGD::new()
        }
    }

    // .HAOJLHGNFPM BLHDFAJHCJA = 93;

    pub fn BLHDFAJHCJA(&self) -> &super::HAOJLHGNFPM::HAOJLHGNFPM {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(ref v)) => v,
            _ => <super::HAOJLHGNFPM::HAOJLHGNFPM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BLHDFAJHCJA(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_BLHDFAJHCJA(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BLHDFAJHCJA(&mut self, v: super::HAOJLHGNFPM::HAOJLHGNFPM) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BLHDFAJHCJA(&mut self) -> &mut super::HAOJLHGNFPM::HAOJLHGNFPM {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(super::HAOJLHGNFPM::HAOJLHGNFPM::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BLHDFAJHCJA(&mut self) -> super::HAOJLHGNFPM::HAOJLHGNFPM {
        if self.has_BLHDFAJHCJA() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HAOJLHGNFPM::HAOJLHGNFPM::new()
        }
    }

    // .HAOJLHGNFPM LPJBAIMJAIK = 1189;

    pub fn LPJBAIMJAIK(&self) -> &super::HAOJLHGNFPM::HAOJLHGNFPM {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(ref v)) => v,
            _ => <super::HAOJLHGNFPM::HAOJLHGNFPM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LPJBAIMJAIK(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_LPJBAIMJAIK(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LPJBAIMJAIK(&mut self, v: super::HAOJLHGNFPM::HAOJLHGNFPM) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LPJBAIMJAIK(&mut self) -> &mut super::HAOJLHGNFPM::HAOJLHGNFPM {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(super::HAOJLHGNFPM::HAOJLHGNFPM::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LPJBAIMJAIK(&mut self) -> super::HAOJLHGNFPM::HAOJLHGNFPM {
        if self.has_LPJBAIMJAIK() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HAOJLHGNFPM::HAOJLHGNFPM::new()
        }
    }

    // .OOPINHFMECE HDHDPGGMEPB = 108;

    pub fn HDHDPGGMEPB(&self) -> &super::OOPINHFMECE::OOPINHFMECE {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(ref v)) => v,
            _ => <super::OOPINHFMECE::OOPINHFMECE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HDHDPGGMEPB(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_HDHDPGGMEPB(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HDHDPGGMEPB(&mut self, v: super::OOPINHFMECE::OOPINHFMECE) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HDHDPGGMEPB(&mut self) -> &mut super::OOPINHFMECE::OOPINHFMECE {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(super::OOPINHFMECE::OOPINHFMECE::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HDHDPGGMEPB(&mut self) -> super::OOPINHFMECE::OOPINHFMECE {
        if self.has_HDHDPGGMEPB() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OOPINHFMECE::OOPINHFMECE::new()
        }
    }

    // .LGCMEEPJMHA ECEGPEJCPBL = 757;

    pub fn ECEGPEJCPBL(&self) -> &super::LGCMEEPJMHA::LGCMEEPJMHA {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(ref v)) => v,
            _ => <super::LGCMEEPJMHA::LGCMEEPJMHA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ECEGPEJCPBL(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_ECEGPEJCPBL(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ECEGPEJCPBL(&mut self, v: super::LGCMEEPJMHA::LGCMEEPJMHA) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ECEGPEJCPBL(&mut self) -> &mut super::LGCMEEPJMHA::LGCMEEPJMHA {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(super::LGCMEEPJMHA::LGCMEEPJMHA::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ECEGPEJCPBL(&mut self) -> super::LGCMEEPJMHA::LGCMEEPJMHA {
        if self.has_ECEGPEJCPBL() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LGCMEEPJMHA::LGCMEEPJMHA::new()
        }
    }

    // .AJNAJINFJIC FKPDKFEMKEC = 235803;

    pub fn FKPDKFEMKEC(&self) -> &super::AJNAJINFJIC::AJNAJINFJIC {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(ref v)) => v,
            _ => <super::AJNAJINFJIC::AJNAJINFJIC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FKPDKFEMKEC(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_FKPDKFEMKEC(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FKPDKFEMKEC(&mut self, v: super::AJNAJINFJIC::AJNAJINFJIC) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FKPDKFEMKEC(&mut self) -> &mut super::AJNAJINFJIC::AJNAJINFJIC {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(super::AJNAJINFJIC::AJNAJINFJIC::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FKPDKFEMKEC(&mut self) -> super::AJNAJINFJIC::AJNAJINFJIC {
        if self.has_FKPDKFEMKEC() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AJNAJINFJIC::AJNAJINFJIC::new()
        }
    }

    // .MNMLOAPBHNF LLNMCJCFBMJ = 45077;

    pub fn LLNMCJCFBMJ(&self) -> &super::MNMLOAPBHNF::MNMLOAPBHNF {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(ref v)) => v,
            _ => <super::MNMLOAPBHNF::MNMLOAPBHNF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LLNMCJCFBMJ(&mut self) {
        self.NHICOMHCEGC = ::std::option::Option::None;
    }

    pub fn has_LLNMCJCFBMJ(&self) -> bool {
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LLNMCJCFBMJ(&mut self, v: super::MNMLOAPBHNF::MNMLOAPBHNF) {
        self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LLNMCJCFBMJ(&mut self) -> &mut super::MNMLOAPBHNF::MNMLOAPBHNF {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(_)) = self.NHICOMHCEGC {
        } else {
            self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(super::MNMLOAPBHNF::MNMLOAPBHNF::new()));
        }
        match self.NHICOMHCEGC {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LLNMCJCFBMJ(&mut self) -> super::MNMLOAPBHNF::MNMLOAPBHNF {
        if self.has_LLNMCJCFBMJ() {
            match self.NHICOMHCEGC.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MNMLOAPBHNF::MNMLOAPBHNF::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(34);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IFDKLLHFPJB",
            |m: &HandleRogueCommonPendingActionCsReq| { &m.IFDKLLHFPJB },
            |m: &mut HandleRogueCommonPendingActionCsReq| { &mut m.IFDKLLHFPJB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HKHFBELMDCG::HKHFBELMDCG>(
            "JKHBBDLCHID",
            HandleRogueCommonPendingActionCsReq::has_JKHBBDLCHID,
            HandleRogueCommonPendingActionCsReq::JKHBBDLCHID,
            HandleRogueCommonPendingActionCsReq::mut_JKHBBDLCHID,
            HandleRogueCommonPendingActionCsReq::set_JKHBBDLCHID,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PBMAKLNJEKO::PBMAKLNJEKO>(
            "KBNEGOLPLFC",
            HandleRogueCommonPendingActionCsReq::has_KBNEGOLPLFC,
            HandleRogueCommonPendingActionCsReq::KBNEGOLPLFC,
            HandleRogueCommonPendingActionCsReq::mut_KBNEGOLPLFC,
            HandleRogueCommonPendingActionCsReq::set_KBNEGOLPLFC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OKEFIDDNLKG::OKEFIDDNLKG>(
            "GDKGIBEKGPF",
            HandleRogueCommonPendingActionCsReq::has_GDKGIBEKGPF,
            HandleRogueCommonPendingActionCsReq::GDKGIBEKGPF,
            HandleRogueCommonPendingActionCsReq::mut_GDKGIBEKGPF,
            HandleRogueCommonPendingActionCsReq::set_GDKGIBEKGPF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MMNDAJFIJOJ::MMNDAJFIJOJ>(
            "ONCNGIILENF",
            HandleRogueCommonPendingActionCsReq::has_ONCNGIILENF,
            HandleRogueCommonPendingActionCsReq::ONCNGIILENF,
            HandleRogueCommonPendingActionCsReq::mut_ONCNGIILENF,
            HandleRogueCommonPendingActionCsReq::set_ONCNGIILENF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BFBFMLBHGOH::BFBFMLBHGOH>(
            "GLEJCDPDJNE",
            HandleRogueCommonPendingActionCsReq::has_GLEJCDPDJNE,
            HandleRogueCommonPendingActionCsReq::GLEJCDPDJNE,
            HandleRogueCommonPendingActionCsReq::mut_GLEJCDPDJNE,
            HandleRogueCommonPendingActionCsReq::set_GLEJCDPDJNE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MPPHHNAEEDK::MPPHHNAEEDK>(
            "OOAGPGDPJOA",
            HandleRogueCommonPendingActionCsReq::has_OOAGPGDPJOA,
            HandleRogueCommonPendingActionCsReq::OOAGPGDPJOA,
            HandleRogueCommonPendingActionCsReq::mut_OOAGPGDPJOA,
            HandleRogueCommonPendingActionCsReq::set_OOAGPGDPJOA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JFPFDJPPOAG::JFPFDJPPOAG>(
            "IDBALJBNBKE",
            HandleRogueCommonPendingActionCsReq::has_IDBALJBNBKE,
            HandleRogueCommonPendingActionCsReq::IDBALJBNBKE,
            HandleRogueCommonPendingActionCsReq::mut_IDBALJBNBKE,
            HandleRogueCommonPendingActionCsReq::set_IDBALJBNBKE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NALELIGHDAA::NALELIGHDAA>(
            "GNEBJEPPKEJ",
            HandleRogueCommonPendingActionCsReq::has_GNEBJEPPKEJ,
            HandleRogueCommonPendingActionCsReq::GNEBJEPPKEJ,
            HandleRogueCommonPendingActionCsReq::mut_GNEBJEPPKEJ,
            HandleRogueCommonPendingActionCsReq::set_GNEBJEPPKEJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PKODMMPHIBC::PKODMMPHIBC>(
            "KJLAFILAPJF",
            HandleRogueCommonPendingActionCsReq::has_KJLAFILAPJF,
            HandleRogueCommonPendingActionCsReq::KJLAFILAPJF,
            HandleRogueCommonPendingActionCsReq::mut_KJLAFILAPJF,
            HandleRogueCommonPendingActionCsReq::set_KJLAFILAPJF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NHCKHPLKLIO::NHCKHPLKLIO>(
            "FLFPCPHLAGO",
            HandleRogueCommonPendingActionCsReq::has_FLFPCPHLAGO,
            HandleRogueCommonPendingActionCsReq::FLFPCPHLAGO,
            HandleRogueCommonPendingActionCsReq::mut_FLFPCPHLAGO,
            HandleRogueCommonPendingActionCsReq::set_FLFPCPHLAGO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LHJPIKEKPGH::LHJPIKEKPGH>(
            "EPOAKMFMFLM",
            HandleRogueCommonPendingActionCsReq::has_EPOAKMFMFLM,
            HandleRogueCommonPendingActionCsReq::EPOAKMFMFLM,
            HandleRogueCommonPendingActionCsReq::mut_EPOAKMFMFLM,
            HandleRogueCommonPendingActionCsReq::set_EPOAKMFMFLM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IMCBIIGOKPM::IMCBIIGOKPM>(
            "FKPFOKHBPKK",
            HandleRogueCommonPendingActionCsReq::has_FKPFOKHBPKK,
            HandleRogueCommonPendingActionCsReq::FKPFOKHBPKK,
            HandleRogueCommonPendingActionCsReq::mut_FKPFOKHBPKK,
            HandleRogueCommonPendingActionCsReq::set_FKPFOKHBPKK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LKMKHACMAPC::LKMKHACMAPC>(
            "EODCLAIPCAE",
            HandleRogueCommonPendingActionCsReq::has_EODCLAIPCAE,
            HandleRogueCommonPendingActionCsReq::EODCLAIPCAE,
            HandleRogueCommonPendingActionCsReq::mut_EODCLAIPCAE,
            HandleRogueCommonPendingActionCsReq::set_EODCLAIPCAE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IMLBIBJKPDB::IMLBIBJKPDB>(
            "AOCODAOBKHM",
            HandleRogueCommonPendingActionCsReq::has_AOCODAOBKHM,
            HandleRogueCommonPendingActionCsReq::AOCODAOBKHM,
            HandleRogueCommonPendingActionCsReq::mut_AOCODAOBKHM,
            HandleRogueCommonPendingActionCsReq::set_AOCODAOBKHM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NOLCMKCNEAF::NOLCMKCNEAF>(
            "EGGGGGGLFHO",
            HandleRogueCommonPendingActionCsReq::has_EGGGGGGLFHO,
            HandleRogueCommonPendingActionCsReq::EGGGGGGLFHO,
            HandleRogueCommonPendingActionCsReq::mut_EGGGGGGLFHO,
            HandleRogueCommonPendingActionCsReq::set_EGGGGGGLFHO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KHGCDEIMLHN::KHGCDEIMLHN>(
            "LNPLOEOFCCJ",
            HandleRogueCommonPendingActionCsReq::has_LNPLOEOFCCJ,
            HandleRogueCommonPendingActionCsReq::LNPLOEOFCCJ,
            HandleRogueCommonPendingActionCsReq::mut_LNPLOEOFCCJ,
            HandleRogueCommonPendingActionCsReq::set_LNPLOEOFCCJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ONOOFHDEIDD::ONOOFHDEIDD>(
            "IEABOHKEAPA",
            HandleRogueCommonPendingActionCsReq::has_IEABOHKEAPA,
            HandleRogueCommonPendingActionCsReq::IEABOHKEAPA,
            HandleRogueCommonPendingActionCsReq::mut_IEABOHKEAPA,
            HandleRogueCommonPendingActionCsReq::set_IEABOHKEAPA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EKMAHAFGNGJ::EKMAHAFGNGJ>(
            "NEDIIBJHGFO",
            HandleRogueCommonPendingActionCsReq::has_NEDIIBJHGFO,
            HandleRogueCommonPendingActionCsReq::NEDIIBJHGFO,
            HandleRogueCommonPendingActionCsReq::mut_NEDIIBJHGFO,
            HandleRogueCommonPendingActionCsReq::set_NEDIIBJHGFO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HHHCPCOFPPO::HHHCPCOFPPO>(
            "JGPCBCJKONH",
            HandleRogueCommonPendingActionCsReq::has_JGPCBCJKONH,
            HandleRogueCommonPendingActionCsReq::JGPCBCJKONH,
            HandleRogueCommonPendingActionCsReq::mut_JGPCBCJKONH,
            HandleRogueCommonPendingActionCsReq::set_JGPCBCJKONH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AHKFIAKMKLO::AHKFIAKMKLO>(
            "HKNJIPJHOCG",
            HandleRogueCommonPendingActionCsReq::has_HKNJIPJHOCG,
            HandleRogueCommonPendingActionCsReq::HKNJIPJHOCG,
            HandleRogueCommonPendingActionCsReq::mut_HKNJIPJHOCG,
            HandleRogueCommonPendingActionCsReq::set_HKNJIPJHOCG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JCDLJBPHOMD::JCDLJBPHOMD>(
            "LDAGLIMNMAN",
            HandleRogueCommonPendingActionCsReq::has_LDAGLIMNMAN,
            HandleRogueCommonPendingActionCsReq::LDAGLIMNMAN,
            HandleRogueCommonPendingActionCsReq::mut_LDAGLIMNMAN,
            HandleRogueCommonPendingActionCsReq::set_LDAGLIMNMAN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HHHCPCOFPPO::HHHCPCOFPPO>(
            "AFLHEIKJNBN",
            HandleRogueCommonPendingActionCsReq::has_AFLHEIKJNBN,
            HandleRogueCommonPendingActionCsReq::AFLHEIKJNBN,
            HandleRogueCommonPendingActionCsReq::mut_AFLHEIKJNBN,
            HandleRogueCommonPendingActionCsReq::set_AFLHEIKJNBN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HHHCPCOFPPO::HHHCPCOFPPO>(
            "PHKBFLNPEFI",
            HandleRogueCommonPendingActionCsReq::has_PHKBFLNPEFI,
            HandleRogueCommonPendingActionCsReq::PHKBFLNPEFI,
            HandleRogueCommonPendingActionCsReq::mut_PHKBFLNPEFI,
            HandleRogueCommonPendingActionCsReq::set_PHKBFLNPEFI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HHHCPCOFPPO::HHHCPCOFPPO>(
            "GOCMNDKFOAB",
            HandleRogueCommonPendingActionCsReq::has_GOCMNDKFOAB,
            HandleRogueCommonPendingActionCsReq::GOCMNDKFOAB,
            HandleRogueCommonPendingActionCsReq::mut_GOCMNDKFOAB,
            HandleRogueCommonPendingActionCsReq::set_GOCMNDKFOAB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IIPEGHDKHGD::IIPEGHDKHGD>(
            "CHONECOLIHA",
            HandleRogueCommonPendingActionCsReq::has_CHONECOLIHA,
            HandleRogueCommonPendingActionCsReq::CHONECOLIHA,
            HandleRogueCommonPendingActionCsReq::mut_CHONECOLIHA,
            HandleRogueCommonPendingActionCsReq::set_CHONECOLIHA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IIPEGHDKHGD::IIPEGHDKHGD>(
            "MOAOGACBOIJ",
            HandleRogueCommonPendingActionCsReq::has_MOAOGACBOIJ,
            HandleRogueCommonPendingActionCsReq::MOAOGACBOIJ,
            HandleRogueCommonPendingActionCsReq::mut_MOAOGACBOIJ,
            HandleRogueCommonPendingActionCsReq::set_MOAOGACBOIJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IIPEGHDKHGD::IIPEGHDKHGD>(
            "KILHFPPBBFM",
            HandleRogueCommonPendingActionCsReq::has_KILHFPPBBFM,
            HandleRogueCommonPendingActionCsReq::KILHFPPBBFM,
            HandleRogueCommonPendingActionCsReq::mut_KILHFPPBBFM,
            HandleRogueCommonPendingActionCsReq::set_KILHFPPBBFM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HAOJLHGNFPM::HAOJLHGNFPM>(
            "BLHDFAJHCJA",
            HandleRogueCommonPendingActionCsReq::has_BLHDFAJHCJA,
            HandleRogueCommonPendingActionCsReq::BLHDFAJHCJA,
            HandleRogueCommonPendingActionCsReq::mut_BLHDFAJHCJA,
            HandleRogueCommonPendingActionCsReq::set_BLHDFAJHCJA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HAOJLHGNFPM::HAOJLHGNFPM>(
            "LPJBAIMJAIK",
            HandleRogueCommonPendingActionCsReq::has_LPJBAIMJAIK,
            HandleRogueCommonPendingActionCsReq::LPJBAIMJAIK,
            HandleRogueCommonPendingActionCsReq::mut_LPJBAIMJAIK,
            HandleRogueCommonPendingActionCsReq::set_LPJBAIMJAIK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OOPINHFMECE::OOPINHFMECE>(
            "HDHDPGGMEPB",
            HandleRogueCommonPendingActionCsReq::has_HDHDPGGMEPB,
            HandleRogueCommonPendingActionCsReq::HDHDPGGMEPB,
            HandleRogueCommonPendingActionCsReq::mut_HDHDPGGMEPB,
            HandleRogueCommonPendingActionCsReq::set_HDHDPGGMEPB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LGCMEEPJMHA::LGCMEEPJMHA>(
            "ECEGPEJCPBL",
            HandleRogueCommonPendingActionCsReq::has_ECEGPEJCPBL,
            HandleRogueCommonPendingActionCsReq::ECEGPEJCPBL,
            HandleRogueCommonPendingActionCsReq::mut_ECEGPEJCPBL,
            HandleRogueCommonPendingActionCsReq::set_ECEGPEJCPBL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AJNAJINFJIC::AJNAJINFJIC>(
            "FKPDKFEMKEC",
            HandleRogueCommonPendingActionCsReq::has_FKPDKFEMKEC,
            HandleRogueCommonPendingActionCsReq::FKPDKFEMKEC,
            HandleRogueCommonPendingActionCsReq::mut_FKPDKFEMKEC,
            HandleRogueCommonPendingActionCsReq::set_FKPDKFEMKEC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MNMLOAPBHNF::MNMLOAPBHNF>(
            "LLNMCJCFBMJ",
            HandleRogueCommonPendingActionCsReq::has_LLNMCJCFBMJ,
            HandleRogueCommonPendingActionCsReq::LLNMCJCFBMJ,
            HandleRogueCommonPendingActionCsReq::mut_LLNMCJCFBMJ,
            HandleRogueCommonPendingActionCsReq::set_LLNMCJCFBMJ,
        ));
        oneofs.push(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HandleRogueCommonPendingActionCsReq>(
            "HandleRogueCommonPendingActionCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HandleRogueCommonPendingActionCsReq {
    const NAME: &'static str = "HandleRogueCommonPendingActionCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.IFDKLLHFPJB = is.read_uint32()?;
                },
                9874 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(is.read_message()?));
                },
                12746 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(is.read_message()?));
                },
                3258 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(is.read_message()?));
                },
                4266 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(is.read_message()?));
                },
                14810 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(is.read_message()?));
                },
                1882 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(is.read_message()?));
                },
                11418 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(is.read_message()?));
                },
                6194 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(is.read_message()?));
                },
                5210 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(is.read_message()?));
                },
                1434 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(is.read_message()?));
                },
                14954 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(is.read_message()?));
                },
                1090 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(is.read_message()?));
                },
                10210 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(is.read_message()?));
                },
                6578 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(is.read_message()?));
                },
                10786 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(is.read_message()?));
                },
                394 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(is.read_message()?));
                },
                10082 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(is.read_message()?));
                },
                1762 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(is.read_message()?));
                },
                9266 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(is.read_message()?));
                },
                514 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(is.read_message()?));
                },
                714 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(is.read_message()?));
                },
                9242 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(is.read_message()?));
                },
                14674 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(is.read_message()?));
                },
                15682 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(is.read_message()?));
                },
                10706 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(is.read_message()?));
                },
                12170 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(is.read_message()?));
                },
                14842 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(is.read_message()?));
                },
                746 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(is.read_message()?));
                },
                9514 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(is.read_message()?));
                },
                866 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(is.read_message()?));
                },
                6058 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(is.read_message()?));
                },
                1886426 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(is.read_message()?));
                },
                360618 => {
                    self.NHICOMHCEGC = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.IFDKLLHFPJB != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.IFDKLLHFPJB);
        }
        if let ::std::option::Option::Some(ref v) = self.NHICOMHCEGC {
            match v {
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(ref v) => {
                    let len = v.compute_size();
                    my_size += 3 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 3 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.IFDKLLHFPJB != 0 {
            os.write_uint32(9, self.IFDKLLHFPJB)?;
        }
        if let ::std::option::Option::Some(ref v) = self.NHICOMHCEGC {
            match v {
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JKHBBDLCHID(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1234, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KBNEGOLPLFC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1593, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GDKGIBEKGPF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(407, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ONCNGIILENF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(533, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GLEJCDPDJNE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1851, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::OOAGPGDPJOA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(235, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IDBALJBNBKE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1427, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GNEBJEPPKEJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(774, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KJLAFILAPJF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(651, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FLFPCPHLAGO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(179, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EPOAKMFMFLM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1869, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPFOKHBPKK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(136, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EODCLAIPCAE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1276, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AOCODAOBKHM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(822, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::EGGGGGGLFHO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1348, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LNPLOEOFCCJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(49, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::IEABOHKEAPA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1260, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::NEDIIBJHGFO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(220, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::JGPCBCJKONH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1158, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HKNJIPJHOCG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(64, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LDAGLIMNMAN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(89, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::AFLHEIKJNBN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1155, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::PHKBFLNPEFI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1834, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::GOCMNDKFOAB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1960, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::CHONECOLIHA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1338, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::MOAOGACBOIJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1521, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::KILHFPPBBFM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1855, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::BLHDFAJHCJA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(93, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LPJBAIMJAIK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1189, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::HDHDPGGMEPB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(108, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::ECEGPEJCPBL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(757, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::FKPDKFEMKEC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(235803, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::NHICOMHCEGC::LLNMCJCFBMJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(45077, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HandleRogueCommonPendingActionCsReq {
        HandleRogueCommonPendingActionCsReq::new()
    }

    fn clear(&mut self) {
        self.IFDKLLHFPJB = 0;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.NHICOMHCEGC = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HandleRogueCommonPendingActionCsReq {
        static instance: HandleRogueCommonPendingActionCsReq = HandleRogueCommonPendingActionCsReq {
            IFDKLLHFPJB: 0,
            NHICOMHCEGC: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HandleRogueCommonPendingActionCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HandleRogueCommonPendingActionCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HandleRogueCommonPendingActionCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleRogueCommonPendingActionCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HandleRogueCommonPendingActionCsReq`
pub mod handle_rogue_common_pending_action_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:HandleRogueCommonPendingActionCsReq.NHICOMHCEGC)
    pub enum NHICOMHCEGC {
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.JKHBBDLCHID)
        JKHBBDLCHID(super::super::HKHFBELMDCG::HKHFBELMDCG),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.KBNEGOLPLFC)
        KBNEGOLPLFC(super::super::PBMAKLNJEKO::PBMAKLNJEKO),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.GDKGIBEKGPF)
        GDKGIBEKGPF(super::super::OKEFIDDNLKG::OKEFIDDNLKG),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.ONCNGIILENF)
        ONCNGIILENF(super::super::MMNDAJFIJOJ::MMNDAJFIJOJ),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.GLEJCDPDJNE)
        GLEJCDPDJNE(super::super::BFBFMLBHGOH::BFBFMLBHGOH),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.OOAGPGDPJOA)
        OOAGPGDPJOA(super::super::MPPHHNAEEDK::MPPHHNAEEDK),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.IDBALJBNBKE)
        IDBALJBNBKE(super::super::JFPFDJPPOAG::JFPFDJPPOAG),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.GNEBJEPPKEJ)
        GNEBJEPPKEJ(super::super::NALELIGHDAA::NALELIGHDAA),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.KJLAFILAPJF)
        KJLAFILAPJF(super::super::PKODMMPHIBC::PKODMMPHIBC),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.FLFPCPHLAGO)
        FLFPCPHLAGO(super::super::NHCKHPLKLIO::NHCKHPLKLIO),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.EPOAKMFMFLM)
        EPOAKMFMFLM(super::super::LHJPIKEKPGH::LHJPIKEKPGH),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.FKPFOKHBPKK)
        FKPFOKHBPKK(super::super::IMCBIIGOKPM::IMCBIIGOKPM),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.EODCLAIPCAE)
        EODCLAIPCAE(super::super::LKMKHACMAPC::LKMKHACMAPC),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.AOCODAOBKHM)
        AOCODAOBKHM(super::super::IMLBIBJKPDB::IMLBIBJKPDB),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.EGGGGGGLFHO)
        EGGGGGGLFHO(super::super::NOLCMKCNEAF::NOLCMKCNEAF),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.LNPLOEOFCCJ)
        LNPLOEOFCCJ(super::super::KHGCDEIMLHN::KHGCDEIMLHN),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.IEABOHKEAPA)
        IEABOHKEAPA(super::super::ONOOFHDEIDD::ONOOFHDEIDD),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.NEDIIBJHGFO)
        NEDIIBJHGFO(super::super::EKMAHAFGNGJ::EKMAHAFGNGJ),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.JGPCBCJKONH)
        JGPCBCJKONH(super::super::HHHCPCOFPPO::HHHCPCOFPPO),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.HKNJIPJHOCG)
        HKNJIPJHOCG(super::super::AHKFIAKMKLO::AHKFIAKMKLO),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.LDAGLIMNMAN)
        LDAGLIMNMAN(super::super::JCDLJBPHOMD::JCDLJBPHOMD),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.AFLHEIKJNBN)
        AFLHEIKJNBN(super::super::HHHCPCOFPPO::HHHCPCOFPPO),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.PHKBFLNPEFI)
        PHKBFLNPEFI(super::super::HHHCPCOFPPO::HHHCPCOFPPO),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.GOCMNDKFOAB)
        GOCMNDKFOAB(super::super::HHHCPCOFPPO::HHHCPCOFPPO),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.CHONECOLIHA)
        CHONECOLIHA(super::super::IIPEGHDKHGD::IIPEGHDKHGD),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.MOAOGACBOIJ)
        MOAOGACBOIJ(super::super::IIPEGHDKHGD::IIPEGHDKHGD),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.KILHFPPBBFM)
        KILHFPPBBFM(super::super::IIPEGHDKHGD::IIPEGHDKHGD),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.BLHDFAJHCJA)
        BLHDFAJHCJA(super::super::HAOJLHGNFPM::HAOJLHGNFPM),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.LPJBAIMJAIK)
        LPJBAIMJAIK(super::super::HAOJLHGNFPM::HAOJLHGNFPM),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.HDHDPGGMEPB)
        HDHDPGGMEPB(super::super::OOPINHFMECE::OOPINHFMECE),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.ECEGPEJCPBL)
        ECEGPEJCPBL(super::super::LGCMEEPJMHA::LGCMEEPJMHA),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.FKPDKFEMKEC)
        FKPDKFEMKEC(super::super::AJNAJINFJIC::AJNAJINFJIC),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.LLNMCJCFBMJ)
        LLNMCJCFBMJ(super::super::MNMLOAPBHNF::MNMLOAPBHNF),
    }

    impl ::protobuf::Oneof for NHICOMHCEGC {
    }

    impl ::protobuf::OneofFull for NHICOMHCEGC {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::HandleRogueCommonPendingActionCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("NHICOMHCEGC").unwrap()).clone()
        }
    }

    impl NHICOMHCEGC {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<NHICOMHCEGC>("NHICOMHCEGC")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)HandleRogueCommonPendingActionCsReq.proto\x1a\x11AHKFIAKMKLO.proto\
    \x1a\x11AJNAJINFJIC.proto\x1a\x11BFBFMLBHGOH.proto\x1a\x11EKMAHAFGNGJ.pr\
    oto\x1a\x11HAOJLHGNFPM.proto\x1a\x11HHHCPCOFPPO.proto\x1a\x11HKHFBELMDCG\
    .proto\x1a\x11IIPEGHDKHGD.proto\x1a\x11IMCBIIGOKPM.proto\x1a\x11IMLBIBJK\
    PDB.proto\x1a\x11JCDLJBPHOMD.proto\x1a\x11JFPFDJPPOAG.proto\x1a\x11KHGCD\
    EIMLHN.proto\x1a\x11LGCMEEPJMHA.proto\x1a\x11LHJPIKEKPGH.proto\x1a\x11LK\
    MKHACMAPC.proto\x1a\x11MMNDAJFIJOJ.proto\x1a\x11MNMLOAPBHNF.proto\x1a\
    \x11MPPHHNAEEDK.proto\x1a\x11NALELIGHDAA.proto\x1a\x11NHCKHPLKLIO.proto\
    \x1a\x11NOLCMKCNEAF.proto\x1a\x11OKEFIDDNLKG.proto\x1a\x11ONOOFHDEIDD.pr\
    oto\x1a\x11OOPINHFMECE.proto\x1a\x11PBMAKLNJEKO.proto\x1a\x11PKODMMPHIBC\
    .proto\"\xe6\r\n#HandleRogueCommonPendingActionCsReq\x12\x20\n\x0bIFDKLL\
    HFPJB\x18\t\x20\x01(\rR\x0bIFDKLLHFPJB\x121\n\x0bJKHBBDLCHID\x18\xd2\t\
    \x20\x01(\x0b2\x0c.HKHFBELMDCGH\0R\x0bJKHBBDLCHID\x121\n\x0bKBNEGOLPLFC\
    \x18\xb9\x0c\x20\x01(\x0b2\x0c.PBMAKLNJEKOH\0R\x0bKBNEGOLPLFC\x121\n\x0b\
    GDKGIBEKGPF\x18\x97\x03\x20\x01(\x0b2\x0c.OKEFIDDNLKGH\0R\x0bGDKGIBEKGPF\
    \x121\n\x0bONCNGIILENF\x18\x95\x04\x20\x01(\x0b2\x0c.MMNDAJFIJOJH\0R\x0b\
    ONCNGIILENF\x121\n\x0bGLEJCDPDJNE\x18\xbb\x0e\x20\x01(\x0b2\x0c.BFBFMLBH\
    GOHH\0R\x0bGLEJCDPDJNE\x121\n\x0bOOAGPGDPJOA\x18\xeb\x01\x20\x01(\x0b2\
    \x0c.MPPHHNAEEDKH\0R\x0bOOAGPGDPJOA\x121\n\x0bIDBALJBNBKE\x18\x93\x0b\
    \x20\x01(\x0b2\x0c.JFPFDJPPOAGH\0R\x0bIDBALJBNBKE\x121\n\x0bGNEBJEPPKEJ\
    \x18\x86\x06\x20\x01(\x0b2\x0c.NALELIGHDAAH\0R\x0bGNEBJEPPKEJ\x121\n\x0b\
    KJLAFILAPJF\x18\x8b\x05\x20\x01(\x0b2\x0c.PKODMMPHIBCH\0R\x0bKJLAFILAPJF\
    \x121\n\x0bFLFPCPHLAGO\x18\xb3\x01\x20\x01(\x0b2\x0c.NHCKHPLKLIOH\0R\x0b\
    FLFPCPHLAGO\x121\n\x0bEPOAKMFMFLM\x18\xcd\x0e\x20\x01(\x0b2\x0c.LHJPIKEK\
    PGHH\0R\x0bEPOAKMFMFLM\x121\n\x0bFKPFOKHBPKK\x18\x88\x01\x20\x01(\x0b2\
    \x0c.IMCBIIGOKPMH\0R\x0bFKPFOKHBPKK\x121\n\x0bEODCLAIPCAE\x18\xfc\t\x20\
    \x01(\x0b2\x0c.LKMKHACMAPCH\0R\x0bEODCLAIPCAE\x121\n\x0bAOCODAOBKHM\x18\
    \xb6\x06\x20\x01(\x0b2\x0c.IMLBIBJKPDBH\0R\x0bAOCODAOBKHM\x121\n\x0bEGGG\
    GGGLFHO\x18\xc4\n\x20\x01(\x0b2\x0c.NOLCMKCNEAFH\0R\x0bEGGGGGGLFHO\x120\
    \n\x0bLNPLOEOFCCJ\x181\x20\x01(\x0b2\x0c.KHGCDEIMLHNH\0R\x0bLNPLOEOFCCJ\
    \x121\n\x0bIEABOHKEAPA\x18\xec\t\x20\x01(\x0b2\x0c.ONOOFHDEIDDH\0R\x0bIE\
    ABOHKEAPA\x121\n\x0bNEDIIBJHGFO\x18\xdc\x01\x20\x01(\x0b2\x0c.EKMAHAFGNG\
    JH\0R\x0bNEDIIBJHGFO\x121\n\x0bJGPCBCJKONH\x18\x86\t\x20\x01(\x0b2\x0c.H\
    HHCPCOFPPOH\0R\x0bJGPCBCJKONH\x120\n\x0bHKNJIPJHOCG\x18@\x20\x01(\x0b2\
    \x0c.AHKFIAKMKLOH\0R\x0bHKNJIPJHOCG\x120\n\x0bLDAGLIMNMAN\x18Y\x20\x01(\
    \x0b2\x0c.JCDLJBPHOMDH\0R\x0bLDAGLIMNMAN\x121\n\x0bAFLHEIKJNBN\x18\x83\t\
    \x20\x01(\x0b2\x0c.HHHCPCOFPPOH\0R\x0bAFLHEIKJNBN\x121\n\x0bPHKBFLNPEFI\
    \x18\xaa\x0e\x20\x01(\x0b2\x0c.HHHCPCOFPPOH\0R\x0bPHKBFLNPEFI\x121\n\x0b\
    GOCMNDKFOAB\x18\xa8\x0f\x20\x01(\x0b2\x0c.HHHCPCOFPPOH\0R\x0bGOCMNDKFOAB\
    \x121\n\x0bCHONECOLIHA\x18\xba\n\x20\x01(\x0b2\x0c.IIPEGHDKHGDH\0R\x0bCH\
    ONECOLIHA\x121\n\x0bMOAOGACBOIJ\x18\xf1\x0b\x20\x01(\x0b2\x0c.IIPEGHDKHG\
    DH\0R\x0bMOAOGACBOIJ\x121\n\x0bKILHFPPBBFM\x18\xbf\x0e\x20\x01(\x0b2\x0c\
    .IIPEGHDKHGDH\0R\x0bKILHFPPBBFM\x120\n\x0bBLHDFAJHCJA\x18]\x20\x01(\x0b2\
    \x0c.HAOJLHGNFPMH\0R\x0bBLHDFAJHCJA\x121\n\x0bLPJBAIMJAIK\x18\xa5\t\x20\
    \x01(\x0b2\x0c.HAOJLHGNFPMH\0R\x0bLPJBAIMJAIK\x120\n\x0bHDHDPGGMEPB\x18l\
    \x20\x01(\x0b2\x0c.OOPINHFMECEH\0R\x0bHDHDPGGMEPB\x121\n\x0bECEGPEJCPBL\
    \x18\xf5\x05\x20\x01(\x0b2\x0c.LGCMEEPJMHAH\0R\x0bECEGPEJCPBL\x122\n\x0b\
    FKPDKFEMKEC\x18\x9b\xb2\x0e\x20\x01(\x0b2\x0c.AJNAJINFJICH\0R\x0bFKPDKFE\
    MKEC\x122\n\x0bLLNMCJCFBMJ\x18\x95\xe0\x02\x20\x01(\x0b2\x0c.MNMLOAPBHNF\
    H\0R\x0bLLNMCJCFBMJB\r\n\x0bNHICOMHCEGCb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(27);
            deps.push(super::AHKFIAKMKLO::file_descriptor().clone());
            deps.push(super::AJNAJINFJIC::file_descriptor().clone());
            deps.push(super::BFBFMLBHGOH::file_descriptor().clone());
            deps.push(super::EKMAHAFGNGJ::file_descriptor().clone());
            deps.push(super::HAOJLHGNFPM::file_descriptor().clone());
            deps.push(super::HHHCPCOFPPO::file_descriptor().clone());
            deps.push(super::HKHFBELMDCG::file_descriptor().clone());
            deps.push(super::IIPEGHDKHGD::file_descriptor().clone());
            deps.push(super::IMCBIIGOKPM::file_descriptor().clone());
            deps.push(super::IMLBIBJKPDB::file_descriptor().clone());
            deps.push(super::JCDLJBPHOMD::file_descriptor().clone());
            deps.push(super::JFPFDJPPOAG::file_descriptor().clone());
            deps.push(super::KHGCDEIMLHN::file_descriptor().clone());
            deps.push(super::LGCMEEPJMHA::file_descriptor().clone());
            deps.push(super::LHJPIKEKPGH::file_descriptor().clone());
            deps.push(super::LKMKHACMAPC::file_descriptor().clone());
            deps.push(super::MMNDAJFIJOJ::file_descriptor().clone());
            deps.push(super::MNMLOAPBHNF::file_descriptor().clone());
            deps.push(super::MPPHHNAEEDK::file_descriptor().clone());
            deps.push(super::NALELIGHDAA::file_descriptor().clone());
            deps.push(super::NHCKHPLKLIO::file_descriptor().clone());
            deps.push(super::NOLCMKCNEAF::file_descriptor().clone());
            deps.push(super::OKEFIDDNLKG::file_descriptor().clone());
            deps.push(super::ONOOFHDEIDD::file_descriptor().clone());
            deps.push(super::OOPINHFMECE::file_descriptor().clone());
            deps.push(super::PBMAKLNJEKO::file_descriptor().clone());
            deps.push(super::PKODMMPHIBC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HandleRogueCommonPendingActionCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
