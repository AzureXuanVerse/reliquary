// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `IMPKPKAMIAF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:IMPKPKAMIAF)
pub enum IMPKPKAMIAF {
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_NONE)
    MARBLE_SYNC_TYPE_NONE = 0,
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_LOADING)
    MARBLE_SYNC_TYPE_LOADING = 1,
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_PERFORMANCE)
    MARBLE_SYNC_TYPE_PERFORMANCE = 2,
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_ROUND_START)
    MARBLE_SYNC_TYPE_ROUND_START = 3,
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_ROUND_END)
    MARBLE_SYNC_TYPE_ROUND_END = 4,
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_SWITCH_ROUND)
    MARBLE_SYNC_TYPE_SWITCH_ROUND = 6,
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_USE_TECH)
    MARBLE_SYNC_TYPE_USE_TECH = 7,
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_SIMULATE_START)
    MARBLE_SYNC_TYPE_SIMULATE_START = 8,
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_EMOJI)
    MARBLE_SYNC_TYPE_EMOJI = 9,
    // @@protoc_insertion_point(enum_value:IMPKPKAMIAF.MARBLE_SYNC_TYPE_ACHIEVEMENT)
    MARBLE_SYNC_TYPE_ACHIEVEMENT = 10,
}

impl ::protobuf::Enum for IMPKPKAMIAF {
    const NAME: &'static str = "IMPKPKAMIAF";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IMPKPKAMIAF> {
        match value {
            0 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_NONE),
            1 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_LOADING),
            2 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_PERFORMANCE),
            3 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_ROUND_START),
            4 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_ROUND_END),
            6 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_SWITCH_ROUND),
            7 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_USE_TECH),
            8 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_SIMULATE_START),
            9 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_EMOJI),
            10 => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_ACHIEVEMENT),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<IMPKPKAMIAF> {
        match str {
            "MARBLE_SYNC_TYPE_NONE" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_NONE),
            "MARBLE_SYNC_TYPE_LOADING" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_LOADING),
            "MARBLE_SYNC_TYPE_PERFORMANCE" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_PERFORMANCE),
            "MARBLE_SYNC_TYPE_ROUND_START" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_ROUND_START),
            "MARBLE_SYNC_TYPE_ROUND_END" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_ROUND_END),
            "MARBLE_SYNC_TYPE_SWITCH_ROUND" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_SWITCH_ROUND),
            "MARBLE_SYNC_TYPE_USE_TECH" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_USE_TECH),
            "MARBLE_SYNC_TYPE_SIMULATE_START" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_SIMULATE_START),
            "MARBLE_SYNC_TYPE_EMOJI" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_EMOJI),
            "MARBLE_SYNC_TYPE_ACHIEVEMENT" => ::std::option::Option::Some(IMPKPKAMIAF::MARBLE_SYNC_TYPE_ACHIEVEMENT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [IMPKPKAMIAF] = &[
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_NONE,
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_LOADING,
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_PERFORMANCE,
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_ROUND_START,
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_ROUND_END,
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_SWITCH_ROUND,
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_USE_TECH,
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_SIMULATE_START,
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_EMOJI,
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_ACHIEVEMENT,
    ];
}

impl ::protobuf::EnumFull for IMPKPKAMIAF {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("IMPKPKAMIAF").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_NONE => 0,
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_LOADING => 1,
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_PERFORMANCE => 2,
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_ROUND_START => 3,
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_ROUND_END => 4,
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_SWITCH_ROUND => 5,
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_USE_TECH => 6,
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_SIMULATE_START => 7,
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_EMOJI => 8,
            IMPKPKAMIAF::MARBLE_SYNC_TYPE_ACHIEVEMENT => 9,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for IMPKPKAMIAF {
    fn default() -> Self {
        IMPKPKAMIAF::MARBLE_SYNC_TYPE_NONE
    }
}

impl IMPKPKAMIAF {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<IMPKPKAMIAF>("IMPKPKAMIAF")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11IMPKPKAMIAF.proto*\xcf\x02\n\x0bIMPKPKAMIAF\x12\x19\n\x15MARBLE_SY\
    NC_TYPE_NONE\x10\0\x12\x1c\n\x18MARBLE_SYNC_TYPE_LOADING\x10\x01\x12\x20\
    \n\x1cMARBLE_SYNC_TYPE_PERFORMANCE\x10\x02\x12\x20\n\x1cMARBLE_SYNC_TYPE\
    _ROUND_START\x10\x03\x12\x1e\n\x1aMARBLE_SYNC_TYPE_ROUND_END\x10\x04\x12\
    !\n\x1dMARBLE_SYNC_TYPE_SWITCH_ROUND\x10\x06\x12\x1d\n\x19MARBLE_SYNC_TY\
    PE_USE_TECH\x10\x07\x12#\n\x1fMARBLE_SYNC_TYPE_SIMULATE_START\x10\x08\
    \x12\x1a\n\x16MARBLE_SYNC_TYPE_EMOJI\x10\t\x12\x20\n\x1cMARBLE_SYNC_TYPE\
    _ACHIEVEMENT\x10\nb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(IMPKPKAMIAF::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
