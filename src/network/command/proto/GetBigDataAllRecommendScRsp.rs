// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetBigDataAllRecommendScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:GetBigDataAllRecommendScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetBigDataAllRecommendScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetBigDataAllRecommendScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetBigDataAllRecommendScRsp.big_data_recommend_type)
    pub big_data_recommend_type: ::protobuf::EnumOrUnknown<super::BigDataRecommendType::BigDataRecommendType>,
    // message oneof groups
    pub NJNIONMBMKE: ::std::option::Option<get_big_data_all_recommend_sc_rsp::NJNIONMBMKE>,
    // special fields
    // @@protoc_insertion_point(special_field:GetBigDataAllRecommendScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetBigDataAllRecommendScRsp {
    fn default() -> &'a GetBigDataAllRecommendScRsp {
        <GetBigDataAllRecommendScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetBigDataAllRecommendScRsp {
    pub fn new() -> GetBigDataAllRecommendScRsp {
        ::std::default::Default::default()
    }

    // .PIIIPHEFDJO DKLBNBDPMPO = 1;

    pub fn DKLBNBDPMPO(&self) -> &super::PIIIPHEFDJO::PIIIPHEFDJO {
        match self.NJNIONMBMKE {
            ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(ref v)) => v,
            _ => <super::PIIIPHEFDJO::PIIIPHEFDJO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DKLBNBDPMPO(&mut self) {
        self.NJNIONMBMKE = ::std::option::Option::None;
    }

    pub fn has_DKLBNBDPMPO(&self) -> bool {
        match self.NJNIONMBMKE {
            ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DKLBNBDPMPO(&mut self, v: super::PIIIPHEFDJO::PIIIPHEFDJO) {
        self.NJNIONMBMKE = ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DKLBNBDPMPO(&mut self) -> &mut super::PIIIPHEFDJO::PIIIPHEFDJO {
        if let ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(_)) = self.NJNIONMBMKE {
        } else {
            self.NJNIONMBMKE = ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(super::PIIIPHEFDJO::PIIIPHEFDJO::new()));
        }
        match self.NJNIONMBMKE {
            ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DKLBNBDPMPO(&mut self) -> super::PIIIPHEFDJO::PIIIPHEFDJO {
        if self.has_DKLBNBDPMPO() {
            match self.NJNIONMBMKE.take() {
                ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PIIIPHEFDJO::PIIIPHEFDJO::new()
        }
    }

    // .MKJALMKMPGL PFOPJPJKKLK = 15;

    pub fn PFOPJPJKKLK(&self) -> &super::MKJALMKMPGL::MKJALMKMPGL {
        match self.NJNIONMBMKE {
            ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(ref v)) => v,
            _ => <super::MKJALMKMPGL::MKJALMKMPGL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PFOPJPJKKLK(&mut self) {
        self.NJNIONMBMKE = ::std::option::Option::None;
    }

    pub fn has_PFOPJPJKKLK(&self) -> bool {
        match self.NJNIONMBMKE {
            ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PFOPJPJKKLK(&mut self, v: super::MKJALMKMPGL::MKJALMKMPGL) {
        self.NJNIONMBMKE = ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PFOPJPJKKLK(&mut self) -> &mut super::MKJALMKMPGL::MKJALMKMPGL {
        if let ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(_)) = self.NJNIONMBMKE {
        } else {
            self.NJNIONMBMKE = ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(super::MKJALMKMPGL::MKJALMKMPGL::new()));
        }
        match self.NJNIONMBMKE {
            ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PFOPJPJKKLK(&mut self) -> super::MKJALMKMPGL::MKJALMKMPGL {
        if self.has_PFOPJPJKKLK() {
            match self.NJNIONMBMKE.take() {
                ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MKJALMKMPGL::MKJALMKMPGL::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetBigDataAllRecommendScRsp| { &m.retcode },
            |m: &mut GetBigDataAllRecommendScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "big_data_recommend_type",
            |m: &GetBigDataAllRecommendScRsp| { &m.big_data_recommend_type },
            |m: &mut GetBigDataAllRecommendScRsp| { &mut m.big_data_recommend_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PIIIPHEFDJO::PIIIPHEFDJO>(
            "DKLBNBDPMPO",
            GetBigDataAllRecommendScRsp::has_DKLBNBDPMPO,
            GetBigDataAllRecommendScRsp::DKLBNBDPMPO,
            GetBigDataAllRecommendScRsp::mut_DKLBNBDPMPO,
            GetBigDataAllRecommendScRsp::set_DKLBNBDPMPO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MKJALMKMPGL::MKJALMKMPGL>(
            "PFOPJPJKKLK",
            GetBigDataAllRecommendScRsp::has_PFOPJPJKKLK,
            GetBigDataAllRecommendScRsp::PFOPJPJKKLK,
            GetBigDataAllRecommendScRsp::mut_PFOPJPJKKLK,
            GetBigDataAllRecommendScRsp::set_PFOPJPJKKLK,
        ));
        oneofs.push(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetBigDataAllRecommendScRsp>(
            "GetBigDataAllRecommendScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetBigDataAllRecommendScRsp {
    const NAME: &'static str = "GetBigDataAllRecommendScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.retcode = is.read_uint32()?;
                },
                64 => {
                    self.big_data_recommend_type = is.read_enum_or_unknown()?;
                },
                10 => {
                    self.NJNIONMBMKE = ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(is.read_message()?));
                },
                122 => {
                    self.NJNIONMBMKE = ::std::option::Option::Some(get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.retcode);
        }
        if self.big_data_recommend_type != ::protobuf::EnumOrUnknown::new(super::BigDataRecommendType::BigDataRecommendType::BIG_DATA_RECOMMEND_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(8, self.big_data_recommend_type.value());
        }
        if let ::std::option::Option::Some(ref v) = self.NJNIONMBMKE {
            match v {
                &get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(9, self.retcode)?;
        }
        if self.big_data_recommend_type != ::protobuf::EnumOrUnknown::new(super::BigDataRecommendType::BigDataRecommendType::BIG_DATA_RECOMMEND_TYPE_NONE) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.big_data_recommend_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.NJNIONMBMKE {
            match v {
                &get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::DKLBNBDPMPO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &get_big_data_all_recommend_sc_rsp::NJNIONMBMKE::PFOPJPJKKLK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetBigDataAllRecommendScRsp {
        GetBigDataAllRecommendScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.big_data_recommend_type = ::protobuf::EnumOrUnknown::new(super::BigDataRecommendType::BigDataRecommendType::BIG_DATA_RECOMMEND_TYPE_NONE);
        self.NJNIONMBMKE = ::std::option::Option::None;
        self.NJNIONMBMKE = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetBigDataAllRecommendScRsp {
        static instance: GetBigDataAllRecommendScRsp = GetBigDataAllRecommendScRsp {
            retcode: 0,
            big_data_recommend_type: ::protobuf::EnumOrUnknown::from_i32(0),
            NJNIONMBMKE: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetBigDataAllRecommendScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetBigDataAllRecommendScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetBigDataAllRecommendScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBigDataAllRecommendScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GetBigDataAllRecommendScRsp`
pub mod get_big_data_all_recommend_sc_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:GetBigDataAllRecommendScRsp.NJNIONMBMKE)
    pub enum NJNIONMBMKE {
        // @@protoc_insertion_point(oneof_field:GetBigDataAllRecommendScRsp.DKLBNBDPMPO)
        DKLBNBDPMPO(super::super::PIIIPHEFDJO::PIIIPHEFDJO),
        // @@protoc_insertion_point(oneof_field:GetBigDataAllRecommendScRsp.PFOPJPJKKLK)
        PFOPJPJKKLK(super::super::MKJALMKMPGL::MKJALMKMPGL),
    }

    impl ::protobuf::Oneof for NJNIONMBMKE {
    }

    impl ::protobuf::OneofFull for NJNIONMBMKE {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GetBigDataAllRecommendScRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("NJNIONMBMKE").unwrap()).clone()
        }
    }

    impl NJNIONMBMKE {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<NJNIONMBMKE>("NJNIONMBMKE")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!GetBigDataAllRecommendScRsp.proto\x1a\x1aBigDataRecommendType.proto\
    \x1a\x11MKJALMKMPGL.proto\x1a\x11PIIIPHEFDJO.proto\"\xf8\x01\n\x1bGetBig\
    DataAllRecommendScRsp\x12\x18\n\x07retcode\x18\t\x20\x01(\rR\x07retcode\
    \x12L\n\x17big_data_recommend_type\x18\x08\x20\x01(\x0e2\x15.BigDataReco\
    mmendTypeR\x14bigDataRecommendType\x120\n\x0bDKLBNBDPMPO\x18\x01\x20\x01\
    (\x0b2\x0c.PIIIPHEFDJOH\0R\x0bDKLBNBDPMPO\x120\n\x0bPFOPJPJKKLK\x18\x0f\
    \x20\x01(\x0b2\x0c.MKJALMKMPGLH\0R\x0bPFOPJPJKKLKB\r\n\x0bNJNIONMBMKEb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BigDataRecommendType::file_descriptor().clone());
            deps.push(super::MKJALMKMPGL::file_descriptor().clone());
            deps.push(super::PIIIPHEFDJO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetBigDataAllRecommendScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
