// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DHAHAKMPNAF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:DHAHAKMPNAF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DHAHAKMPNAF {
    // message fields
    // @@protoc_insertion_point(field:DHAHAKMPNAF.EJHMNKHEPFA)
    pub EJHMNKHEPFA: ::protobuf::EnumOrUnknown<super::DevelopmentType::DevelopmentType>,
    // @@protoc_insertion_point(field:DHAHAKMPNAF.time)
    pub time: i64,
    // message oneof groups
    pub FMJDDNEDKGF: ::std::option::Option<dhahakmpnaf::FMJDDNEDKGF>,
    // special fields
    // @@protoc_insertion_point(special_field:DHAHAKMPNAF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DHAHAKMPNAF {
    fn default() -> &'a DHAHAKMPNAF {
        <DHAHAKMPNAF as ::protobuf::Message>::default_instance()
    }
}

impl DHAHAKMPNAF {
    pub fn new() -> DHAHAKMPNAF {
        ::std::default::Default::default()
    }

    // .IOJHJAHIMHM LIIBBGGEHFP = 1131;

    pub fn LIIBBGGEHFP(&self) -> &super::IOJHJAHIMHM::IOJHJAHIMHM {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(ref v)) => v,
            _ => <super::IOJHJAHIMHM::IOJHJAHIMHM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LIIBBGGEHFP(&mut self) {
        self.FMJDDNEDKGF = ::std::option::Option::None;
    }

    pub fn has_LIIBBGGEHFP(&self) -> bool {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LIIBBGGEHFP(&mut self, v: super::IOJHJAHIMHM::IOJHJAHIMHM) {
        self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LIIBBGGEHFP(&mut self) -> &mut super::IOJHJAHIMHM::IOJHJAHIMHM {
        if let ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(_)) = self.FMJDDNEDKGF {
        } else {
            self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(super::IOJHJAHIMHM::IOJHJAHIMHM::new()));
        }
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LIIBBGGEHFP(&mut self) -> super::IOJHJAHIMHM::IOJHJAHIMHM {
        if self.has_LIIBBGGEHFP() {
            match self.FMJDDNEDKGF.take() {
                ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IOJHJAHIMHM::IOJHJAHIMHM::new()
        }
    }

    // .MEEHCBGDBEA IKFFOBAMGHJ = 1838;

    pub fn IKFFOBAMGHJ(&self) -> &super::MEEHCBGDBEA::MEEHCBGDBEA {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(ref v)) => v,
            _ => <super::MEEHCBGDBEA::MEEHCBGDBEA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IKFFOBAMGHJ(&mut self) {
        self.FMJDDNEDKGF = ::std::option::Option::None;
    }

    pub fn has_IKFFOBAMGHJ(&self) -> bool {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IKFFOBAMGHJ(&mut self, v: super::MEEHCBGDBEA::MEEHCBGDBEA) {
        self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IKFFOBAMGHJ(&mut self) -> &mut super::MEEHCBGDBEA::MEEHCBGDBEA {
        if let ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(_)) = self.FMJDDNEDKGF {
        } else {
            self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(super::MEEHCBGDBEA::MEEHCBGDBEA::new()));
        }
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IKFFOBAMGHJ(&mut self) -> super::MEEHCBGDBEA::MEEHCBGDBEA {
        if self.has_IKFFOBAMGHJ() {
            match self.FMJDDNEDKGF.take() {
                ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MEEHCBGDBEA::MEEHCBGDBEA::new()
        }
    }

    // uint32 avatar_id = 793;

    pub fn avatar_id(&self) -> u32 {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::AvatarId(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_avatar_id(&mut self) {
        self.FMJDDNEDKGF = ::std::option::Option::None;
    }

    pub fn has_avatar_id(&self) -> bool {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::AvatarId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_avatar_id(&mut self, v: u32) {
        self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::AvatarId(v))
    }

    // uint32 MDMGKHLHIIN = 1661;

    pub fn MDMGKHLHIIN(&self) -> u32 {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::MDMGKHLHIIN(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_MDMGKHLHIIN(&mut self) {
        self.FMJDDNEDKGF = ::std::option::Option::None;
    }

    pub fn has_MDMGKHLHIIN(&self) -> bool {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::MDMGKHLHIIN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MDMGKHLHIIN(&mut self, v: u32) {
        self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::MDMGKHLHIIN(v))
    }

    // uint32 CKKNNHMDCOG = 75;

    pub fn CKKNNHMDCOG(&self) -> u32 {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::CKKNNHMDCOG(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_CKKNNHMDCOG(&mut self) {
        self.FMJDDNEDKGF = ::std::option::Option::None;
    }

    pub fn has_CKKNNHMDCOG(&self) -> bool {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::CKKNNHMDCOG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CKKNNHMDCOG(&mut self, v: u32) {
        self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::CKKNNHMDCOG(v))
    }

    // .JIENKFADCHE IELHLBFFAGK = 1433;

    pub fn IELHLBFFAGK(&self) -> &super::JIENKFADCHE::JIENKFADCHE {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(ref v)) => v,
            _ => <super::JIENKFADCHE::JIENKFADCHE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IELHLBFFAGK(&mut self) {
        self.FMJDDNEDKGF = ::std::option::Option::None;
    }

    pub fn has_IELHLBFFAGK(&self) -> bool {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IELHLBFFAGK(&mut self, v: super::JIENKFADCHE::JIENKFADCHE) {
        self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IELHLBFFAGK(&mut self) -> &mut super::JIENKFADCHE::JIENKFADCHE {
        if let ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(_)) = self.FMJDDNEDKGF {
        } else {
            self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(super::JIENKFADCHE::JIENKFADCHE::new()));
        }
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IELHLBFFAGK(&mut self) -> super::JIENKFADCHE::JIENKFADCHE {
        if self.has_IELHLBFFAGK() {
            match self.FMJDDNEDKGF.take() {
                ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JIENKFADCHE::JIENKFADCHE::new()
        }
    }

    // uint32 panel_id = 1901;

    pub fn panel_id(&self) -> u32 {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::PanelId(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_panel_id(&mut self) {
        self.FMJDDNEDKGF = ::std::option::Option::None;
    }

    pub fn has_panel_id(&self) -> bool {
        match self.FMJDDNEDKGF {
            ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::PanelId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_panel_id(&mut self, v: u32) {
        self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::PanelId(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EJHMNKHEPFA",
            |m: &DHAHAKMPNAF| { &m.EJHMNKHEPFA },
            |m: &mut DHAHAKMPNAF| { &mut m.EJHMNKHEPFA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &DHAHAKMPNAF| { &m.time },
            |m: &mut DHAHAKMPNAF| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IOJHJAHIMHM::IOJHJAHIMHM>(
            "LIIBBGGEHFP",
            DHAHAKMPNAF::has_LIIBBGGEHFP,
            DHAHAKMPNAF::LIIBBGGEHFP,
            DHAHAKMPNAF::mut_LIIBBGGEHFP,
            DHAHAKMPNAF::set_LIIBBGGEHFP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MEEHCBGDBEA::MEEHCBGDBEA>(
            "IKFFOBAMGHJ",
            DHAHAKMPNAF::has_IKFFOBAMGHJ,
            DHAHAKMPNAF::IKFFOBAMGHJ,
            DHAHAKMPNAF::mut_IKFFOBAMGHJ,
            DHAHAKMPNAF::set_IKFFOBAMGHJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "avatar_id",
            DHAHAKMPNAF::has_avatar_id,
            DHAHAKMPNAF::avatar_id,
            DHAHAKMPNAF::set_avatar_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "MDMGKHLHIIN",
            DHAHAKMPNAF::has_MDMGKHLHIIN,
            DHAHAKMPNAF::MDMGKHLHIIN,
            DHAHAKMPNAF::set_MDMGKHLHIIN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "CKKNNHMDCOG",
            DHAHAKMPNAF::has_CKKNNHMDCOG,
            DHAHAKMPNAF::CKKNNHMDCOG,
            DHAHAKMPNAF::set_CKKNNHMDCOG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JIENKFADCHE::JIENKFADCHE>(
            "IELHLBFFAGK",
            DHAHAKMPNAF::has_IELHLBFFAGK,
            DHAHAKMPNAF::IELHLBFFAGK,
            DHAHAKMPNAF::mut_IELHLBFFAGK,
            DHAHAKMPNAF::set_IELHLBFFAGK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "panel_id",
            DHAHAKMPNAF::has_panel_id,
            DHAHAKMPNAF::panel_id,
            DHAHAKMPNAF::set_panel_id,
        ));
        oneofs.push(dhahakmpnaf::FMJDDNEDKGF::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DHAHAKMPNAF>(
            "DHAHAKMPNAF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DHAHAKMPNAF {
    const NAME: &'static str = "DHAHAKMPNAF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.EJHMNKHEPFA = is.read_enum_or_unknown()?;
                },
                80 => {
                    self.time = is.read_int64()?;
                },
                9050 => {
                    self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(is.read_message()?));
                },
                14706 => {
                    self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(is.read_message()?));
                },
                6344 => {
                    self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::AvatarId(is.read_uint32()?));
                },
                13288 => {
                    self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::MDMGKHLHIIN(is.read_uint32()?));
                },
                600 => {
                    self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::CKKNNHMDCOG(is.read_uint32()?));
                },
                11466 => {
                    self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(is.read_message()?));
                },
                15208 => {
                    self.FMJDDNEDKGF = ::std::option::Option::Some(dhahakmpnaf::FMJDDNEDKGF::PanelId(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.EJHMNKHEPFA != ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE) {
            my_size += ::protobuf::rt::int32_size(11, self.EJHMNKHEPFA.value());
        }
        if self.time != 0 {
            my_size += ::protobuf::rt::int64_size(10, self.time);
        }
        if let ::std::option::Option::Some(ref v) = self.FMJDDNEDKGF {
            match v {
                &dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dhahakmpnaf::FMJDDNEDKGF::AvatarId(v) => {
                    my_size += ::protobuf::rt::uint32_size(793, v);
                },
                &dhahakmpnaf::FMJDDNEDKGF::MDMGKHLHIIN(v) => {
                    my_size += ::protobuf::rt::uint32_size(1661, v);
                },
                &dhahakmpnaf::FMJDDNEDKGF::CKKNNHMDCOG(v) => {
                    my_size += ::protobuf::rt::uint32_size(75, v);
                },
                &dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dhahakmpnaf::FMJDDNEDKGF::PanelId(v) => {
                    my_size += ::protobuf::rt::uint32_size(1901, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.EJHMNKHEPFA != ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE) {
            os.write_enum(11, ::protobuf::EnumOrUnknown::value(&self.EJHMNKHEPFA))?;
        }
        if self.time != 0 {
            os.write_int64(10, self.time)?;
        }
        if let ::std::option::Option::Some(ref v) = self.FMJDDNEDKGF {
            match v {
                &dhahakmpnaf::FMJDDNEDKGF::LIIBBGGEHFP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1131, v, os)?;
                },
                &dhahakmpnaf::FMJDDNEDKGF::IKFFOBAMGHJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1838, v, os)?;
                },
                &dhahakmpnaf::FMJDDNEDKGF::AvatarId(v) => {
                    os.write_uint32(793, v)?;
                },
                &dhahakmpnaf::FMJDDNEDKGF::MDMGKHLHIIN(v) => {
                    os.write_uint32(1661, v)?;
                },
                &dhahakmpnaf::FMJDDNEDKGF::CKKNNHMDCOG(v) => {
                    os.write_uint32(75, v)?;
                },
                &dhahakmpnaf::FMJDDNEDKGF::IELHLBFFAGK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1433, v, os)?;
                },
                &dhahakmpnaf::FMJDDNEDKGF::PanelId(v) => {
                    os.write_uint32(1901, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DHAHAKMPNAF {
        DHAHAKMPNAF::new()
    }

    fn clear(&mut self) {
        self.EJHMNKHEPFA = ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE);
        self.time = 0;
        self.FMJDDNEDKGF = ::std::option::Option::None;
        self.FMJDDNEDKGF = ::std::option::Option::None;
        self.FMJDDNEDKGF = ::std::option::Option::None;
        self.FMJDDNEDKGF = ::std::option::Option::None;
        self.FMJDDNEDKGF = ::std::option::Option::None;
        self.FMJDDNEDKGF = ::std::option::Option::None;
        self.FMJDDNEDKGF = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DHAHAKMPNAF {
        static instance: DHAHAKMPNAF = DHAHAKMPNAF {
            EJHMNKHEPFA: ::protobuf::EnumOrUnknown::from_i32(0),
            time: 0,
            FMJDDNEDKGF: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DHAHAKMPNAF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DHAHAKMPNAF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DHAHAKMPNAF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DHAHAKMPNAF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DHAHAKMPNAF`
pub mod dhahakmpnaf {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DHAHAKMPNAF.FMJDDNEDKGF)
    pub enum FMJDDNEDKGF {
        // @@protoc_insertion_point(oneof_field:DHAHAKMPNAF.LIIBBGGEHFP)
        LIIBBGGEHFP(super::super::IOJHJAHIMHM::IOJHJAHIMHM),
        // @@protoc_insertion_point(oneof_field:DHAHAKMPNAF.IKFFOBAMGHJ)
        IKFFOBAMGHJ(super::super::MEEHCBGDBEA::MEEHCBGDBEA),
        // @@protoc_insertion_point(oneof_field:DHAHAKMPNAF.avatar_id)
        AvatarId(u32),
        // @@protoc_insertion_point(oneof_field:DHAHAKMPNAF.MDMGKHLHIIN)
        MDMGKHLHIIN(u32),
        // @@protoc_insertion_point(oneof_field:DHAHAKMPNAF.CKKNNHMDCOG)
        CKKNNHMDCOG(u32),
        // @@protoc_insertion_point(oneof_field:DHAHAKMPNAF.IELHLBFFAGK)
        IELHLBFFAGK(super::super::JIENKFADCHE::JIENKFADCHE),
        // @@protoc_insertion_point(oneof_field:DHAHAKMPNAF.panel_id)
        PanelId(u32),
    }

    impl ::protobuf::Oneof for FMJDDNEDKGF {
    }

    impl ::protobuf::OneofFull for FMJDDNEDKGF {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DHAHAKMPNAF as ::protobuf::MessageFull>::descriptor().oneof_by_name("FMJDDNEDKGF").unwrap()).clone()
        }
    }

    impl FMJDDNEDKGF {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<FMJDDNEDKGF>("FMJDDNEDKGF")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DHAHAKMPNAF.proto\x1a\x15DevelopmentType.proto\x1a\x11IOJHJAHIMHM.\
    proto\x1a\x11JIENKFADCHE.proto\x1a\x11MEEHCBGDBEA.proto\"\x84\x03\n\x0bD\
    HAHAKMPNAF\x122\n\x0bEJHMNKHEPFA\x18\x0b\x20\x01(\x0e2\x10.DevelopmentTy\
    peR\x0bEJHMNKHEPFA\x12\x12\n\x04time\x18\n\x20\x01(\x03R\x04time\x121\n\
    \x0bLIIBBGGEHFP\x18\xeb\x08\x20\x01(\x0b2\x0c.IOJHJAHIMHMH\0R\x0bLIIBBGG\
    EHFP\x121\n\x0bIKFFOBAMGHJ\x18\xae\x0e\x20\x01(\x0b2\x0c.MEEHCBGDBEAH\0R\
    \x0bIKFFOBAMGHJ\x12\x1e\n\tavatar_id\x18\x99\x06\x20\x01(\rH\0R\x08avata\
    rId\x12#\n\x0bMDMGKHLHIIN\x18\xfd\x0c\x20\x01(\rH\0R\x0bMDMGKHLHIIN\x12\
    \"\n\x0bCKKNNHMDCOG\x18K\x20\x01(\rH\0R\x0bCKKNNHMDCOG\x121\n\x0bIELHLBF\
    FAGK\x18\x99\x0b\x20\x01(\x0b2\x0c.JIENKFADCHEH\0R\x0bIELHLBFFAGK\x12\
    \x1c\n\x08panel_id\x18\xed\x0e\x20\x01(\rH\0R\x07panelIdB\r\n\x0bFMJDDNE\
    DKGFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::DevelopmentType::file_descriptor().clone());
            deps.push(super::IOJHJAHIMHM::file_descriptor().clone());
            deps.push(super::JIENKFADCHE::file_descriptor().clone());
            deps.push(super::MEEHCBGDBEA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DHAHAKMPNAF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
