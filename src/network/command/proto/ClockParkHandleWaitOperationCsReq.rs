// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ClockParkHandleWaitOperationCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ClockParkHandleWaitOperationCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClockParkHandleWaitOperationCsReq {
    // message fields
    // @@protoc_insertion_point(field:ClockParkHandleWaitOperationCsReq.script_id)
    pub script_id: u32,
    // @@protoc_insertion_point(field:ClockParkHandleWaitOperationCsReq.AHIDJBJGGPP)
    pub AHIDJBJGGPP: u32,
    // message oneof groups
    pub DBPOBFJIJIK: ::std::option::Option<clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK>,
    // special fields
    // @@protoc_insertion_point(special_field:ClockParkHandleWaitOperationCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClockParkHandleWaitOperationCsReq {
    fn default() -> &'a ClockParkHandleWaitOperationCsReq {
        <ClockParkHandleWaitOperationCsReq as ::protobuf::Message>::default_instance()
    }
}

impl ClockParkHandleWaitOperationCsReq {
    pub fn new() -> ClockParkHandleWaitOperationCsReq {
        ::std::default::Default::default()
    }

    // .OBNONMHMECK JFBCKCLPAKO = 6;

    pub fn JFBCKCLPAKO(&self) -> &super::OBNONMHMECK::OBNONMHMECK {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(ref v)) => v,
            _ => <super::OBNONMHMECK::OBNONMHMECK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JFBCKCLPAKO(&mut self) {
        self.DBPOBFJIJIK = ::std::option::Option::None;
    }

    pub fn has_JFBCKCLPAKO(&self) -> bool {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JFBCKCLPAKO(&mut self, v: super::OBNONMHMECK::OBNONMHMECK) {
        self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JFBCKCLPAKO(&mut self) -> &mut super::OBNONMHMECK::OBNONMHMECK {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(_)) = self.DBPOBFJIJIK {
        } else {
            self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(super::OBNONMHMECK::OBNONMHMECK::new()));
        }
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JFBCKCLPAKO(&mut self) -> super::OBNONMHMECK::OBNONMHMECK {
        if self.has_JFBCKCLPAKO() {
            match self.DBPOBFJIJIK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OBNONMHMECK::OBNONMHMECK::new()
        }
    }

    // .FFOMIBNCFKI IPIKFLCEFLA = 5;

    pub fn IPIKFLCEFLA(&self) -> &super::FFOMIBNCFKI::FFOMIBNCFKI {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(ref v)) => v,
            _ => <super::FFOMIBNCFKI::FFOMIBNCFKI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IPIKFLCEFLA(&mut self) {
        self.DBPOBFJIJIK = ::std::option::Option::None;
    }

    pub fn has_IPIKFLCEFLA(&self) -> bool {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IPIKFLCEFLA(&mut self, v: super::FFOMIBNCFKI::FFOMIBNCFKI) {
        self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IPIKFLCEFLA(&mut self) -> &mut super::FFOMIBNCFKI::FFOMIBNCFKI {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(_)) = self.DBPOBFJIJIK {
        } else {
            self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(super::FFOMIBNCFKI::FFOMIBNCFKI::new()));
        }
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IPIKFLCEFLA(&mut self) -> super::FFOMIBNCFKI::FFOMIBNCFKI {
        if self.has_IPIKFLCEFLA() {
            match self.DBPOBFJIJIK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FFOMIBNCFKI::FFOMIBNCFKI::new()
        }
    }

    // .AJEHAMDABNA MEGNBBFILNL = 15;

    pub fn MEGNBBFILNL(&self) -> &super::AJEHAMDABNA::AJEHAMDABNA {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(ref v)) => v,
            _ => <super::AJEHAMDABNA::AJEHAMDABNA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MEGNBBFILNL(&mut self) {
        self.DBPOBFJIJIK = ::std::option::Option::None;
    }

    pub fn has_MEGNBBFILNL(&self) -> bool {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MEGNBBFILNL(&mut self, v: super::AJEHAMDABNA::AJEHAMDABNA) {
        self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MEGNBBFILNL(&mut self) -> &mut super::AJEHAMDABNA::AJEHAMDABNA {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(_)) = self.DBPOBFJIJIK {
        } else {
            self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(super::AJEHAMDABNA::AJEHAMDABNA::new()));
        }
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MEGNBBFILNL(&mut self) -> super::AJEHAMDABNA::AJEHAMDABNA {
        if self.has_MEGNBBFILNL() {
            match self.DBPOBFJIJIK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AJEHAMDABNA::AJEHAMDABNA::new()
        }
    }

    // .AMGHDCABJMJ ABKKDHAPCHN = 14;

    pub fn ABKKDHAPCHN(&self) -> &super::AMGHDCABJMJ::AMGHDCABJMJ {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(ref v)) => v,
            _ => <super::AMGHDCABJMJ::AMGHDCABJMJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ABKKDHAPCHN(&mut self) {
        self.DBPOBFJIJIK = ::std::option::Option::None;
    }

    pub fn has_ABKKDHAPCHN(&self) -> bool {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ABKKDHAPCHN(&mut self, v: super::AMGHDCABJMJ::AMGHDCABJMJ) {
        self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ABKKDHAPCHN(&mut self) -> &mut super::AMGHDCABJMJ::AMGHDCABJMJ {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(_)) = self.DBPOBFJIJIK {
        } else {
            self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(super::AMGHDCABJMJ::AMGHDCABJMJ::new()));
        }
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ABKKDHAPCHN(&mut self) -> super::AMGHDCABJMJ::AMGHDCABJMJ {
        if self.has_ABKKDHAPCHN() {
            match self.DBPOBFJIJIK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AMGHDCABJMJ::AMGHDCABJMJ::new()
        }
    }

    // .INNNICFOLII LIHJMEINGIK = 9;

    pub fn LIHJMEINGIK(&self) -> &super::INNNICFOLII::INNNICFOLII {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(ref v)) => v,
            _ => <super::INNNICFOLII::INNNICFOLII as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LIHJMEINGIK(&mut self) {
        self.DBPOBFJIJIK = ::std::option::Option::None;
    }

    pub fn has_LIHJMEINGIK(&self) -> bool {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LIHJMEINGIK(&mut self, v: super::INNNICFOLII::INNNICFOLII) {
        self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LIHJMEINGIK(&mut self) -> &mut super::INNNICFOLII::INNNICFOLII {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(_)) = self.DBPOBFJIJIK {
        } else {
            self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(super::INNNICFOLII::INNNICFOLII::new()));
        }
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LIHJMEINGIK(&mut self) -> super::INNNICFOLII::INNNICFOLII {
        if self.has_LIHJMEINGIK() {
            match self.DBPOBFJIJIK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::INNNICFOLII::INNNICFOLII::new()
        }
    }

    // .CEOONFLONDJ LMGGLCNCDHF = 4;

    pub fn LMGGLCNCDHF(&self) -> &super::CEOONFLONDJ::CEOONFLONDJ {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(ref v)) => v,
            _ => <super::CEOONFLONDJ::CEOONFLONDJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LMGGLCNCDHF(&mut self) {
        self.DBPOBFJIJIK = ::std::option::Option::None;
    }

    pub fn has_LMGGLCNCDHF(&self) -> bool {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LMGGLCNCDHF(&mut self, v: super::CEOONFLONDJ::CEOONFLONDJ) {
        self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LMGGLCNCDHF(&mut self) -> &mut super::CEOONFLONDJ::CEOONFLONDJ {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(_)) = self.DBPOBFJIJIK {
        } else {
            self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(super::CEOONFLONDJ::CEOONFLONDJ::new()));
        }
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LMGGLCNCDHF(&mut self) -> super::CEOONFLONDJ::CEOONFLONDJ {
        if self.has_LMGGLCNCDHF() {
            match self.DBPOBFJIJIK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CEOONFLONDJ::CEOONFLONDJ::new()
        }
    }

    // .HELNOIHMDHA FNGFOAEPFJN = 3;

    pub fn FNGFOAEPFJN(&self) -> &super::HELNOIHMDHA::HELNOIHMDHA {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(ref v)) => v,
            _ => <super::HELNOIHMDHA::HELNOIHMDHA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FNGFOAEPFJN(&mut self) {
        self.DBPOBFJIJIK = ::std::option::Option::None;
    }

    pub fn has_FNGFOAEPFJN(&self) -> bool {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FNGFOAEPFJN(&mut self, v: super::HELNOIHMDHA::HELNOIHMDHA) {
        self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FNGFOAEPFJN(&mut self) -> &mut super::HELNOIHMDHA::HELNOIHMDHA {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(_)) = self.DBPOBFJIJIK {
        } else {
            self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(super::HELNOIHMDHA::HELNOIHMDHA::new()));
        }
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FNGFOAEPFJN(&mut self) -> super::HELNOIHMDHA::HELNOIHMDHA {
        if self.has_FNGFOAEPFJN() {
            match self.DBPOBFJIJIK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HELNOIHMDHA::HELNOIHMDHA::new()
        }
    }

    // uint32 OBPFBLNBFKI = 7;

    pub fn OBPFBLNBFKI(&self) -> u32 {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::OBPFBLNBFKI(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_OBPFBLNBFKI(&mut self) {
        self.DBPOBFJIJIK = ::std::option::Option::None;
    }

    pub fn has_OBPFBLNBFKI(&self) -> bool {
        match self.DBPOBFJIJIK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::OBPFBLNBFKI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OBPFBLNBFKI(&mut self, v: u32) {
        self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::OBPFBLNBFKI(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "script_id",
            |m: &ClockParkHandleWaitOperationCsReq| { &m.script_id },
            |m: &mut ClockParkHandleWaitOperationCsReq| { &mut m.script_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AHIDJBJGGPP",
            |m: &ClockParkHandleWaitOperationCsReq| { &m.AHIDJBJGGPP },
            |m: &mut ClockParkHandleWaitOperationCsReq| { &mut m.AHIDJBJGGPP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OBNONMHMECK::OBNONMHMECK>(
            "JFBCKCLPAKO",
            ClockParkHandleWaitOperationCsReq::has_JFBCKCLPAKO,
            ClockParkHandleWaitOperationCsReq::JFBCKCLPAKO,
            ClockParkHandleWaitOperationCsReq::mut_JFBCKCLPAKO,
            ClockParkHandleWaitOperationCsReq::set_JFBCKCLPAKO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FFOMIBNCFKI::FFOMIBNCFKI>(
            "IPIKFLCEFLA",
            ClockParkHandleWaitOperationCsReq::has_IPIKFLCEFLA,
            ClockParkHandleWaitOperationCsReq::IPIKFLCEFLA,
            ClockParkHandleWaitOperationCsReq::mut_IPIKFLCEFLA,
            ClockParkHandleWaitOperationCsReq::set_IPIKFLCEFLA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AJEHAMDABNA::AJEHAMDABNA>(
            "MEGNBBFILNL",
            ClockParkHandleWaitOperationCsReq::has_MEGNBBFILNL,
            ClockParkHandleWaitOperationCsReq::MEGNBBFILNL,
            ClockParkHandleWaitOperationCsReq::mut_MEGNBBFILNL,
            ClockParkHandleWaitOperationCsReq::set_MEGNBBFILNL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AMGHDCABJMJ::AMGHDCABJMJ>(
            "ABKKDHAPCHN",
            ClockParkHandleWaitOperationCsReq::has_ABKKDHAPCHN,
            ClockParkHandleWaitOperationCsReq::ABKKDHAPCHN,
            ClockParkHandleWaitOperationCsReq::mut_ABKKDHAPCHN,
            ClockParkHandleWaitOperationCsReq::set_ABKKDHAPCHN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::INNNICFOLII::INNNICFOLII>(
            "LIHJMEINGIK",
            ClockParkHandleWaitOperationCsReq::has_LIHJMEINGIK,
            ClockParkHandleWaitOperationCsReq::LIHJMEINGIK,
            ClockParkHandleWaitOperationCsReq::mut_LIHJMEINGIK,
            ClockParkHandleWaitOperationCsReq::set_LIHJMEINGIK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CEOONFLONDJ::CEOONFLONDJ>(
            "LMGGLCNCDHF",
            ClockParkHandleWaitOperationCsReq::has_LMGGLCNCDHF,
            ClockParkHandleWaitOperationCsReq::LMGGLCNCDHF,
            ClockParkHandleWaitOperationCsReq::mut_LMGGLCNCDHF,
            ClockParkHandleWaitOperationCsReq::set_LMGGLCNCDHF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HELNOIHMDHA::HELNOIHMDHA>(
            "FNGFOAEPFJN",
            ClockParkHandleWaitOperationCsReq::has_FNGFOAEPFJN,
            ClockParkHandleWaitOperationCsReq::FNGFOAEPFJN,
            ClockParkHandleWaitOperationCsReq::mut_FNGFOAEPFJN,
            ClockParkHandleWaitOperationCsReq::set_FNGFOAEPFJN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "OBPFBLNBFKI",
            ClockParkHandleWaitOperationCsReq::has_OBPFBLNBFKI,
            ClockParkHandleWaitOperationCsReq::OBPFBLNBFKI,
            ClockParkHandleWaitOperationCsReq::set_OBPFBLNBFKI,
        ));
        oneofs.push(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClockParkHandleWaitOperationCsReq>(
            "ClockParkHandleWaitOperationCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClockParkHandleWaitOperationCsReq {
    const NAME: &'static str = "ClockParkHandleWaitOperationCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.script_id = is.read_uint32()?;
                },
                88 => {
                    self.AHIDJBJGGPP = is.read_uint32()?;
                },
                50 => {
                    self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(is.read_message()?));
                },
                42 => {
                    self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(is.read_message()?));
                },
                122 => {
                    self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(is.read_message()?));
                },
                114 => {
                    self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(is.read_message()?));
                },
                74 => {
                    self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(is.read_message()?));
                },
                34 => {
                    self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(is.read_message()?));
                },
                26 => {
                    self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(is.read_message()?));
                },
                56 => {
                    self.DBPOBFJIJIK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::OBPFBLNBFKI(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.script_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.script_id);
        }
        if self.AHIDJBJGGPP != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.AHIDJBJGGPP);
        }
        if let ::std::option::Option::Some(ref v) = self.DBPOBFJIJIK {
            match v {
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::OBPFBLNBFKI(v) => {
                    my_size += ::protobuf::rt::uint32_size(7, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.script_id != 0 {
            os.write_uint32(1, self.script_id)?;
        }
        if self.AHIDJBJGGPP != 0 {
            os.write_uint32(11, self.AHIDJBJGGPP)?;
        }
        if let ::std::option::Option::Some(ref v) = self.DBPOBFJIJIK {
            match v {
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::JFBCKCLPAKO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::IPIKFLCEFLA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::MEGNBBFILNL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::ABKKDHAPCHN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LIHJMEINGIK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::LMGGLCNCDHF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::FNGFOAEPFJN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::DBPOBFJIJIK::OBPFBLNBFKI(v) => {
                    os.write_uint32(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClockParkHandleWaitOperationCsReq {
        ClockParkHandleWaitOperationCsReq::new()
    }

    fn clear(&mut self) {
        self.script_id = 0;
        self.AHIDJBJGGPP = 0;
        self.DBPOBFJIJIK = ::std::option::Option::None;
        self.DBPOBFJIJIK = ::std::option::Option::None;
        self.DBPOBFJIJIK = ::std::option::Option::None;
        self.DBPOBFJIJIK = ::std::option::Option::None;
        self.DBPOBFJIJIK = ::std::option::Option::None;
        self.DBPOBFJIJIK = ::std::option::Option::None;
        self.DBPOBFJIJIK = ::std::option::Option::None;
        self.DBPOBFJIJIK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClockParkHandleWaitOperationCsReq {
        static instance: ClockParkHandleWaitOperationCsReq = ClockParkHandleWaitOperationCsReq {
            script_id: 0,
            AHIDJBJGGPP: 0,
            DBPOBFJIJIK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClockParkHandleWaitOperationCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClockParkHandleWaitOperationCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClockParkHandleWaitOperationCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClockParkHandleWaitOperationCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ClockParkHandleWaitOperationCsReq`
pub mod clock_park_handle_wait_operation_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ClockParkHandleWaitOperationCsReq.DBPOBFJIJIK)
    pub enum DBPOBFJIJIK {
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.JFBCKCLPAKO)
        JFBCKCLPAKO(super::super::OBNONMHMECK::OBNONMHMECK),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.IPIKFLCEFLA)
        IPIKFLCEFLA(super::super::FFOMIBNCFKI::FFOMIBNCFKI),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.MEGNBBFILNL)
        MEGNBBFILNL(super::super::AJEHAMDABNA::AJEHAMDABNA),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.ABKKDHAPCHN)
        ABKKDHAPCHN(super::super::AMGHDCABJMJ::AMGHDCABJMJ),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.LIHJMEINGIK)
        LIHJMEINGIK(super::super::INNNICFOLII::INNNICFOLII),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.LMGGLCNCDHF)
        LMGGLCNCDHF(super::super::CEOONFLONDJ::CEOONFLONDJ),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.FNGFOAEPFJN)
        FNGFOAEPFJN(super::super::HELNOIHMDHA::HELNOIHMDHA),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.OBPFBLNBFKI)
        OBPFBLNBFKI(u32),
    }

    impl ::protobuf::Oneof for DBPOBFJIJIK {
    }

    impl ::protobuf::OneofFull for DBPOBFJIJIK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ClockParkHandleWaitOperationCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("DBPOBFJIJIK").unwrap()).clone()
        }
    }

    impl DBPOBFJIJIK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DBPOBFJIJIK>("DBPOBFJIJIK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'ClockParkHandleWaitOperationCsReq.proto\x1a\x11AJEHAMDABNA.proto\x1a\
    \x11AMGHDCABJMJ.proto\x1a\x11CEOONFLONDJ.proto\x1a\x11FFOMIBNCFKI.proto\
    \x1a\x11HELNOIHMDHA.proto\x1a\x11INNNICFOLII.proto\x1a\x11OBNONMHMECK.pr\
    oto\"\xf3\x03\n!ClockParkHandleWaitOperationCsReq\x12\x1b\n\tscript_id\
    \x18\x01\x20\x01(\rR\x08scriptId\x12\x20\n\x0bAHIDJBJGGPP\x18\x0b\x20\
    \x01(\rR\x0bAHIDJBJGGPP\x120\n\x0bJFBCKCLPAKO\x18\x06\x20\x01(\x0b2\x0c.\
    OBNONMHMECKH\0R\x0bJFBCKCLPAKO\x120\n\x0bIPIKFLCEFLA\x18\x05\x20\x01(\
    \x0b2\x0c.FFOMIBNCFKIH\0R\x0bIPIKFLCEFLA\x120\n\x0bMEGNBBFILNL\x18\x0f\
    \x20\x01(\x0b2\x0c.AJEHAMDABNAH\0R\x0bMEGNBBFILNL\x120\n\x0bABKKDHAPCHN\
    \x18\x0e\x20\x01(\x0b2\x0c.AMGHDCABJMJH\0R\x0bABKKDHAPCHN\x120\n\x0bLIHJ\
    MEINGIK\x18\t\x20\x01(\x0b2\x0c.INNNICFOLIIH\0R\x0bLIHJMEINGIK\x120\n\
    \x0bLMGGLCNCDHF\x18\x04\x20\x01(\x0b2\x0c.CEOONFLONDJH\0R\x0bLMGGLCNCDHF\
    \x120\n\x0bFNGFOAEPFJN\x18\x03\x20\x01(\x0b2\x0c.HELNOIHMDHAH\0R\x0bFNGF\
    OAEPFJN\x12\"\n\x0bOBPFBLNBFKI\x18\x07\x20\x01(\rH\0R\x0bOBPFBLNBFKIB\r\
    \n\x0bDBPOBFJIJIKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::AJEHAMDABNA::file_descriptor().clone());
            deps.push(super::AMGHDCABJMJ::file_descriptor().clone());
            deps.push(super::CEOONFLONDJ::file_descriptor().clone());
            deps.push(super::FFOMIBNCFKI::file_descriptor().clone());
            deps.push(super::HELNOIHMDHA::file_descriptor().clone());
            deps.push(super::INNNICFOLII::file_descriptor().clone());
            deps.push(super::OBNONMHMECK::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ClockParkHandleWaitOperationCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
