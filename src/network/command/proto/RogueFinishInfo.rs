// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueFinishInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueFinishInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueFinishInfo {
    // message fields
    // @@protoc_insertion_point(field:RogueFinishInfo.MNBIEBOLCCN)
    pub MNBIEBOLCCN: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.LMMEANJPEND)
    pub LMMEANJPEND: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.BIMDLGHKAOI)
    pub BIMDLGHKAOI: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.IFEHBIMEMEC)
    pub IFEHBIMEMEC: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.score_id)
    pub score_id: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.DEDLGFJAEAM)
    pub DEDLGFJAEAM: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.is_win)
    pub is_win: bool,
    // @@protoc_insertion_point(field:RogueFinishInfo.record_info)
    pub record_info: ::protobuf::MessageField<super::GKJFBBHHLAC::GKJFBBHHLAC>,
    // @@protoc_insertion_point(field:RogueFinishInfo.AGPPEPMGFMF)
    pub AGPPEPMGFMF: ::protobuf::MessageField<super::RogueScoreRewardInfo::RogueScoreRewardInfo>,
    // @@protoc_insertion_point(field:RogueFinishInfo.area_id)
    pub area_id: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.HLOBJOOEBOD)
    pub HLOBJOOEBOD: ::protobuf::MessageField<super::ItemList::ItemList>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueFinishInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueFinishInfo {
    fn default() -> &'a RogueFinishInfo {
        <RogueFinishInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueFinishInfo {
    pub fn new() -> RogueFinishInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MNBIEBOLCCN",
            |m: &RogueFinishInfo| { &m.MNBIEBOLCCN },
            |m: &mut RogueFinishInfo| { &mut m.MNBIEBOLCCN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LMMEANJPEND",
            |m: &RogueFinishInfo| { &m.LMMEANJPEND },
            |m: &mut RogueFinishInfo| { &mut m.LMMEANJPEND },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BIMDLGHKAOI",
            |m: &RogueFinishInfo| { &m.BIMDLGHKAOI },
            |m: &mut RogueFinishInfo| { &mut m.BIMDLGHKAOI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IFEHBIMEMEC",
            |m: &RogueFinishInfo| { &m.IFEHBIMEMEC },
            |m: &mut RogueFinishInfo| { &mut m.IFEHBIMEMEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score_id",
            |m: &RogueFinishInfo| { &m.score_id },
            |m: &mut RogueFinishInfo| { &mut m.score_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DEDLGFJAEAM",
            |m: &RogueFinishInfo| { &m.DEDLGFJAEAM },
            |m: &mut RogueFinishInfo| { &mut m.DEDLGFJAEAM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_win",
            |m: &RogueFinishInfo| { &m.is_win },
            |m: &mut RogueFinishInfo| { &mut m.is_win },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GKJFBBHHLAC::GKJFBBHHLAC>(
            "record_info",
            |m: &RogueFinishInfo| { &m.record_info },
            |m: &mut RogueFinishInfo| { &mut m.record_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueScoreRewardInfo::RogueScoreRewardInfo>(
            "AGPPEPMGFMF",
            |m: &RogueFinishInfo| { &m.AGPPEPMGFMF },
            |m: &mut RogueFinishInfo| { &mut m.AGPPEPMGFMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "area_id",
            |m: &RogueFinishInfo| { &m.area_id },
            |m: &mut RogueFinishInfo| { &mut m.area_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "HLOBJOOEBOD",
            |m: &RogueFinishInfo| { &m.HLOBJOOEBOD },
            |m: &mut RogueFinishInfo| { &mut m.HLOBJOOEBOD },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueFinishInfo>(
            "RogueFinishInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueFinishInfo {
    const NAME: &'static str = "RogueFinishInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                40 => {
                    self.MNBIEBOLCCN = is.read_uint32()?;
                },
                2568 => {
                    self.LMMEANJPEND = is.read_uint32()?;
                },
                64 => {
                    self.BIMDLGHKAOI = is.read_uint32()?;
                },
                112 => {
                    self.IFEHBIMEMEC = is.read_uint32()?;
                },
                104 => {
                    self.score_id = is.read_uint32()?;
                },
                72 => {
                    self.DEDLGFJAEAM = is.read_uint32()?;
                },
                56 => {
                    self.is_win = is.read_bool()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.record_info)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AGPPEPMGFMF)?;
                },
                10288 => {
                    self.area_id = is.read_uint32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HLOBJOOEBOD)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.MNBIEBOLCCN != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.MNBIEBOLCCN);
        }
        if self.LMMEANJPEND != 0 {
            my_size += ::protobuf::rt::uint32_size(321, self.LMMEANJPEND);
        }
        if self.BIMDLGHKAOI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.BIMDLGHKAOI);
        }
        if self.IFEHBIMEMEC != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.IFEHBIMEMEC);
        }
        if self.score_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.score_id);
        }
        if self.DEDLGFJAEAM != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.DEDLGFJAEAM);
        }
        if self.is_win != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.record_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.AGPPEPMGFMF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.area_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1286, self.area_id);
        }
        if let Some(v) = self.HLOBJOOEBOD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.MNBIEBOLCCN != 0 {
            os.write_uint32(5, self.MNBIEBOLCCN)?;
        }
        if self.LMMEANJPEND != 0 {
            os.write_uint32(321, self.LMMEANJPEND)?;
        }
        if self.BIMDLGHKAOI != 0 {
            os.write_uint32(8, self.BIMDLGHKAOI)?;
        }
        if self.IFEHBIMEMEC != 0 {
            os.write_uint32(14, self.IFEHBIMEMEC)?;
        }
        if self.score_id != 0 {
            os.write_uint32(13, self.score_id)?;
        }
        if self.DEDLGFJAEAM != 0 {
            os.write_uint32(9, self.DEDLGFJAEAM)?;
        }
        if self.is_win != false {
            os.write_bool(7, self.is_win)?;
        }
        if let Some(v) = self.record_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.AGPPEPMGFMF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.area_id != 0 {
            os.write_uint32(1286, self.area_id)?;
        }
        if let Some(v) = self.HLOBJOOEBOD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueFinishInfo {
        RogueFinishInfo::new()
    }

    fn clear(&mut self) {
        self.MNBIEBOLCCN = 0;
        self.LMMEANJPEND = 0;
        self.BIMDLGHKAOI = 0;
        self.IFEHBIMEMEC = 0;
        self.score_id = 0;
        self.DEDLGFJAEAM = 0;
        self.is_win = false;
        self.record_info.clear();
        self.AGPPEPMGFMF.clear();
        self.area_id = 0;
        self.HLOBJOOEBOD.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueFinishInfo {
        static instance: RogueFinishInfo = RogueFinishInfo {
            MNBIEBOLCCN: 0,
            LMMEANJPEND: 0,
            BIMDLGHKAOI: 0,
            IFEHBIMEMEC: 0,
            score_id: 0,
            DEDLGFJAEAM: 0,
            is_win: false,
            record_info: ::protobuf::MessageField::none(),
            AGPPEPMGFMF: ::protobuf::MessageField::none(),
            area_id: 0,
            HLOBJOOEBOD: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueFinishInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueFinishInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueFinishInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueFinishInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15RogueFinishInfo.proto\x1a\x11GKJFBBHHLAC.proto\x1a\x0eItemList.pro\
    to\x1a\x1aRogueScoreRewardInfo.proto\"\x9d\x03\n\x0fRogueFinishInfo\x12\
    \x20\n\x0bMNBIEBOLCCN\x18\x05\x20\x01(\rR\x0bMNBIEBOLCCN\x12!\n\x0bLMMEA\
    NJPEND\x18\xc1\x02\x20\x01(\rR\x0bLMMEANJPEND\x12\x20\n\x0bBIMDLGHKAOI\
    \x18\x08\x20\x01(\rR\x0bBIMDLGHKAOI\x12\x20\n\x0bIFEHBIMEMEC\x18\x0e\x20\
    \x01(\rR\x0bIFEHBIMEMEC\x12\x19\n\x08score_id\x18\r\x20\x01(\rR\x07score\
    Id\x12\x20\n\x0bDEDLGFJAEAM\x18\t\x20\x01(\rR\x0bDEDLGFJAEAM\x12\x15\n\
    \x06is_win\x18\x07\x20\x01(\x08R\x05isWin\x12-\n\x0brecord_info\x18\x03\
    \x20\x01(\x0b2\x0c.GKJFBBHHLACR\nrecordInfo\x127\n\x0bAGPPEPMGFMF\x18\
    \x02\x20\x01(\x0b2\x15.RogueScoreRewardInfoR\x0bAGPPEPMGFMF\x12\x18\n\
    \x07area_id\x18\x86\n\x20\x01(\rR\x06areaId\x12+\n\x0bHLOBJOOEBOD\x18\
    \x01\x20\x01(\x0b2\t.ItemListR\x0bHLOBJOOEBODb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::GKJFBBHHLAC::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            deps.push(super::RogueScoreRewardInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueFinishInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
