// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlanetFesDoGachaScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PlanetFesDoGachaScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlanetFesDoGachaScRsp {
    // message fields
    // @@protoc_insertion_point(field:PlanetFesDoGachaScRsp.gacha_id)
    pub gacha_id: u32,
    // @@protoc_insertion_point(field:PlanetFesDoGachaScRsp.CIKEPDANGFD)
    pub CIKEPDANGFD: ::std::vec::Vec<super::CEODDCEIDDL::CEODDCEIDDL>,
    // @@protoc_insertion_point(field:PlanetFesDoGachaScRsp.retcode)
    pub retcode: u32,
    // message oneof groups
    pub MICMCKAHMPL: ::std::option::Option<planet_fes_do_gacha_sc_rsp::MICMCKAHMPL>,
    // special fields
    // @@protoc_insertion_point(special_field:PlanetFesDoGachaScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlanetFesDoGachaScRsp {
    fn default() -> &'a PlanetFesDoGachaScRsp {
        <PlanetFesDoGachaScRsp as ::protobuf::Message>::default_instance()
    }
}

impl PlanetFesDoGachaScRsp {
    pub fn new() -> PlanetFesDoGachaScRsp {
        ::std::default::Default::default()
    }

    // .CGOJKBOEOFO IDGKLMCEPBO = 14;

    pub fn IDGKLMCEPBO(&self) -> &super::CGOJKBOEOFO::CGOJKBOEOFO {
        match self.MICMCKAHMPL {
            ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(ref v)) => v,
            _ => <super::CGOJKBOEOFO::CGOJKBOEOFO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IDGKLMCEPBO(&mut self) {
        self.MICMCKAHMPL = ::std::option::Option::None;
    }

    pub fn has_IDGKLMCEPBO(&self) -> bool {
        match self.MICMCKAHMPL {
            ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IDGKLMCEPBO(&mut self, v: super::CGOJKBOEOFO::CGOJKBOEOFO) {
        self.MICMCKAHMPL = ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IDGKLMCEPBO(&mut self) -> &mut super::CGOJKBOEOFO::CGOJKBOEOFO {
        if let ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(_)) = self.MICMCKAHMPL {
        } else {
            self.MICMCKAHMPL = ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(super::CGOJKBOEOFO::CGOJKBOEOFO::new()));
        }
        match self.MICMCKAHMPL {
            ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IDGKLMCEPBO(&mut self) -> super::CGOJKBOEOFO::CGOJKBOEOFO {
        if self.has_IDGKLMCEPBO() {
            match self.MICMCKAHMPL.take() {
                ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGOJKBOEOFO::CGOJKBOEOFO::new()
        }
    }

    // .PJCAKIFOOCP JABDCPFPOKE = 11;

    pub fn JABDCPFPOKE(&self) -> &super::PJCAKIFOOCP::PJCAKIFOOCP {
        match self.MICMCKAHMPL {
            ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(ref v)) => v,
            _ => <super::PJCAKIFOOCP::PJCAKIFOOCP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JABDCPFPOKE(&mut self) {
        self.MICMCKAHMPL = ::std::option::Option::None;
    }

    pub fn has_JABDCPFPOKE(&self) -> bool {
        match self.MICMCKAHMPL {
            ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JABDCPFPOKE(&mut self, v: super::PJCAKIFOOCP::PJCAKIFOOCP) {
        self.MICMCKAHMPL = ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JABDCPFPOKE(&mut self) -> &mut super::PJCAKIFOOCP::PJCAKIFOOCP {
        if let ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(_)) = self.MICMCKAHMPL {
        } else {
            self.MICMCKAHMPL = ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(super::PJCAKIFOOCP::PJCAKIFOOCP::new()));
        }
        match self.MICMCKAHMPL {
            ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JABDCPFPOKE(&mut self) -> super::PJCAKIFOOCP::PJCAKIFOOCP {
        if self.has_JABDCPFPOKE() {
            match self.MICMCKAHMPL.take() {
                ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PJCAKIFOOCP::PJCAKIFOOCP::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_id",
            |m: &PlanetFesDoGachaScRsp| { &m.gacha_id },
            |m: &mut PlanetFesDoGachaScRsp| { &mut m.gacha_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CIKEPDANGFD",
            |m: &PlanetFesDoGachaScRsp| { &m.CIKEPDANGFD },
            |m: &mut PlanetFesDoGachaScRsp| { &mut m.CIKEPDANGFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &PlanetFesDoGachaScRsp| { &m.retcode },
            |m: &mut PlanetFesDoGachaScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGOJKBOEOFO::CGOJKBOEOFO>(
            "IDGKLMCEPBO",
            PlanetFesDoGachaScRsp::has_IDGKLMCEPBO,
            PlanetFesDoGachaScRsp::IDGKLMCEPBO,
            PlanetFesDoGachaScRsp::mut_IDGKLMCEPBO,
            PlanetFesDoGachaScRsp::set_IDGKLMCEPBO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PJCAKIFOOCP::PJCAKIFOOCP>(
            "JABDCPFPOKE",
            PlanetFesDoGachaScRsp::has_JABDCPFPOKE,
            PlanetFesDoGachaScRsp::JABDCPFPOKE,
            PlanetFesDoGachaScRsp::mut_JABDCPFPOKE,
            PlanetFesDoGachaScRsp::set_JABDCPFPOKE,
        ));
        oneofs.push(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlanetFesDoGachaScRsp>(
            "PlanetFesDoGachaScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlanetFesDoGachaScRsp {
    const NAME: &'static str = "PlanetFesDoGachaScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.gacha_id = is.read_uint32()?;
                },
                58 => {
                    self.CIKEPDANGFD.push(is.read_message()?);
                },
                72 => {
                    self.retcode = is.read_uint32()?;
                },
                114 => {
                    self.MICMCKAHMPL = ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(is.read_message()?));
                },
                90 => {
                    self.MICMCKAHMPL = ::std::option::Option::Some(planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.gacha_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.gacha_id);
        }
        for value in &self.CIKEPDANGFD {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.retcode);
        }
        if let ::std::option::Option::Some(ref v) = self.MICMCKAHMPL {
            match v {
                &planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.gacha_id != 0 {
            os.write_uint32(13, self.gacha_id)?;
        }
        for v in &self.CIKEPDANGFD {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(9, self.retcode)?;
        }
        if let ::std::option::Option::Some(ref v) = self.MICMCKAHMPL {
            match v {
                &planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::IDGKLMCEPBO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &planet_fes_do_gacha_sc_rsp::MICMCKAHMPL::JABDCPFPOKE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlanetFesDoGachaScRsp {
        PlanetFesDoGachaScRsp::new()
    }

    fn clear(&mut self) {
        self.gacha_id = 0;
        self.CIKEPDANGFD.clear();
        self.retcode = 0;
        self.MICMCKAHMPL = ::std::option::Option::None;
        self.MICMCKAHMPL = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlanetFesDoGachaScRsp {
        static instance: PlanetFesDoGachaScRsp = PlanetFesDoGachaScRsp {
            gacha_id: 0,
            CIKEPDANGFD: ::std::vec::Vec::new(),
            retcode: 0,
            MICMCKAHMPL: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlanetFesDoGachaScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlanetFesDoGachaScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlanetFesDoGachaScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlanetFesDoGachaScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PlanetFesDoGachaScRsp`
pub mod planet_fes_do_gacha_sc_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:PlanetFesDoGachaScRsp.MICMCKAHMPL)
    pub enum MICMCKAHMPL {
        // @@protoc_insertion_point(oneof_field:PlanetFesDoGachaScRsp.IDGKLMCEPBO)
        IDGKLMCEPBO(super::super::CGOJKBOEOFO::CGOJKBOEOFO),
        // @@protoc_insertion_point(oneof_field:PlanetFesDoGachaScRsp.JABDCPFPOKE)
        JABDCPFPOKE(super::super::PJCAKIFOOCP::PJCAKIFOOCP),
    }

    impl ::protobuf::Oneof for MICMCKAHMPL {
    }

    impl ::protobuf::OneofFull for MICMCKAHMPL {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PlanetFesDoGachaScRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("MICMCKAHMPL").unwrap()).clone()
        }
    }

    impl MICMCKAHMPL {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<MICMCKAHMPL>("MICMCKAHMPL")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bPlanetFesDoGachaScRsp.proto\x1a\x11CEODDCEIDDL.proto\x1a\x11CGOJKB\
    OEOFO.proto\x1a\x11PJCAKIFOOCP.proto\"\xef\x01\n\x15PlanetFesDoGachaScRs\
    p\x12\x19\n\x08gacha_id\x18\r\x20\x01(\rR\x07gachaId\x12.\n\x0bCIKEPDANG\
    FD\x18\x07\x20\x03(\x0b2\x0c.CEODDCEIDDLR\x0bCIKEPDANGFD\x12\x18\n\x07re\
    tcode\x18\t\x20\x01(\rR\x07retcode\x120\n\x0bIDGKLMCEPBO\x18\x0e\x20\x01\
    (\x0b2\x0c.CGOJKBOEOFOH\0R\x0bIDGKLMCEPBO\x120\n\x0bJABDCPFPOKE\x18\x0b\
    \x20\x01(\x0b2\x0c.PJCAKIFOOCPH\0R\x0bJABDCPFPOKEB\r\n\x0bMICMCKAHMPLb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::CEODDCEIDDL::file_descriptor().clone());
            deps.push(super::CGOJKBOEOFO::file_descriptor().clone());
            deps.push(super::PJCAKIFOOCP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlanetFesDoGachaScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
