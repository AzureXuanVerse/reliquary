// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChimeraFinishRoundScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ChimeraFinishRoundScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChimeraFinishRoundScRsp {
    // message fields
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.MOLIDIKIFGB)
    pub MOLIDIKIFGB: bool,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.end_reason)
    pub end_reason: ::protobuf::EnumOrUnknown<super::ChimeraRoundWorkEndReason::ChimeraRoundWorkEndReason>,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.CJKCNHCLMGD)
    pub CJKCNHCLMGD: u32,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.EAIOJCNLMNG)
    pub EAIOJCNLMNG: u32,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.GHKGCFCLABF)
    pub GHKGCFCLABF: ::std::collections::HashMap<u32, super::EADGANMJIPK::EADGANMJIPK>,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.MFAFNNCJJNG)
    pub MFAFNNCJJNG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.OLLDKAJOAJD)
    pub OLLDKAJOAJD: u32,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.NAHPKPPMDKK)
    pub NAHPKPPMDKK: ::std::collections::HashMap<u32, super::ODNNKBIMEFH::ODNNKBIMEFH>,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.JIEIFDOCOHE)
    pub JIEIFDOCOHE: bool,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.BBMGIIMECEL)
    pub BBMGIIMECEL: ::protobuf::EnumOrUnknown<super::OAPDMKKKEOL::OAPDMKKKEOL>,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.GOIAKPGJLCB)
    pub GOIAKPGJLCB: ::std::vec::Vec<super::JCNJDFFCLDG::JCNJDFFCLDG>,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.JFPNMOONLNJ)
    pub JFPNMOONLNJ: u32,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.NCDAOBLMHHP)
    pub NCDAOBLMHHP: ::std::vec::Vec<super::DIFPDPLCIGD::DIFPDPLCIGD>,
    // @@protoc_insertion_point(field:ChimeraFinishRoundScRsp.IJEIOMMFPKA)
    pub IJEIOMMFPKA: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ChimeraFinishRoundScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChimeraFinishRoundScRsp {
    fn default() -> &'a ChimeraFinishRoundScRsp {
        <ChimeraFinishRoundScRsp as ::protobuf::Message>::default_instance()
    }
}

impl ChimeraFinishRoundScRsp {
    pub fn new() -> ChimeraFinishRoundScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MOLIDIKIFGB",
            |m: &ChimeraFinishRoundScRsp| { &m.MOLIDIKIFGB },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.MOLIDIKIFGB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_reason",
            |m: &ChimeraFinishRoundScRsp| { &m.end_reason },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.end_reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CJKCNHCLMGD",
            |m: &ChimeraFinishRoundScRsp| { &m.CJKCNHCLMGD },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.CJKCNHCLMGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EAIOJCNLMNG",
            |m: &ChimeraFinishRoundScRsp| { &m.EAIOJCNLMNG },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.EAIOJCNLMNG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "GHKGCFCLABF",
            |m: &ChimeraFinishRoundScRsp| { &m.GHKGCFCLABF },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.GHKGCFCLABF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MFAFNNCJJNG",
            |m: &ChimeraFinishRoundScRsp| { &m.MFAFNNCJJNG },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.MFAFNNCJJNG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OLLDKAJOAJD",
            |m: &ChimeraFinishRoundScRsp| { &m.OLLDKAJOAJD },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.OLLDKAJOAJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "NAHPKPPMDKK",
            |m: &ChimeraFinishRoundScRsp| { &m.NAHPKPPMDKK },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.NAHPKPPMDKK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JIEIFDOCOHE",
            |m: &ChimeraFinishRoundScRsp| { &m.JIEIFDOCOHE },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.JIEIFDOCOHE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BBMGIIMECEL",
            |m: &ChimeraFinishRoundScRsp| { &m.BBMGIIMECEL },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.BBMGIIMECEL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &ChimeraFinishRoundScRsp| { &m.retcode },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GOIAKPGJLCB",
            |m: &ChimeraFinishRoundScRsp| { &m.GOIAKPGJLCB },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.GOIAKPGJLCB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JFPNMOONLNJ",
            |m: &ChimeraFinishRoundScRsp| { &m.JFPNMOONLNJ },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.JFPNMOONLNJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NCDAOBLMHHP",
            |m: &ChimeraFinishRoundScRsp| { &m.NCDAOBLMHHP },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.NCDAOBLMHHP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IJEIOMMFPKA",
            |m: &ChimeraFinishRoundScRsp| { &m.IJEIOMMFPKA },
            |m: &mut ChimeraFinishRoundScRsp| { &mut m.IJEIOMMFPKA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChimeraFinishRoundScRsp>(
            "ChimeraFinishRoundScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChimeraFinishRoundScRsp {
    const NAME: &'static str = "ChimeraFinishRoundScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.MOLIDIKIFGB = is.read_bool()?;
                },
                56 => {
                    self.end_reason = is.read_enum_or_unknown()?;
                },
                120 => {
                    self.CJKCNHCLMGD = is.read_uint32()?;
                },
                16 => {
                    self.EAIOJCNLMNG = is.read_uint32()?;
                },
                114 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.GHKGCFCLABF.insert(key, value);
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.MFAFNNCJJNG)?;
                },
                104 => {
                    self.MFAFNNCJJNG.push(is.read_uint32()?);
                },
                72 => {
                    self.OLLDKAJOAJD = is.read_uint32()?;
                },
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.NAHPKPPMDKK.insert(key, value);
                },
                40 => {
                    self.JIEIFDOCOHE = is.read_bool()?;
                },
                64 => {
                    self.BBMGIIMECEL = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.retcode = is.read_uint32()?;
                },
                82 => {
                    self.GOIAKPGJLCB.push(is.read_message()?);
                },
                88 => {
                    self.JFPNMOONLNJ = is.read_uint32()?;
                },
                50 => {
                    self.NCDAOBLMHHP.push(is.read_message()?);
                },
                96 => {
                    self.IJEIOMMFPKA = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.MOLIDIKIFGB != false {
            my_size += 1 + 1;
        }
        if self.end_reason != ::protobuf::EnumOrUnknown::new(super::ChimeraRoundWorkEndReason::ChimeraRoundWorkEndReason::CHIMERA_ROUND_WORK_END_NONE) {
            my_size += ::protobuf::rt::int32_size(7, self.end_reason.value());
        }
        if self.CJKCNHCLMGD != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.CJKCNHCLMGD);
        }
        if self.EAIOJCNLMNG != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.EAIOJCNLMNG);
        }
        for (k, v) in &self.GHKGCFCLABF {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(13, &self.MFAFNNCJJNG);
        if self.OLLDKAJOAJD != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.OLLDKAJOAJD);
        }
        for (k, v) in &self.NAHPKPPMDKK {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.JIEIFDOCOHE != false {
            my_size += 1 + 1;
        }
        if self.BBMGIIMECEL != ::protobuf::EnumOrUnknown::new(super::OAPDMKKKEOL::OAPDMKKKEOL::CHIMERA_LAST_PHASE_FINISH_NONE) {
            my_size += ::protobuf::rt::int32_size(8, self.BBMGIIMECEL.value());
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.retcode);
        }
        for value in &self.GOIAKPGJLCB {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.JFPNMOONLNJ != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.JFPNMOONLNJ);
        }
        for value in &self.NCDAOBLMHHP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.IJEIOMMFPKA != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.IJEIOMMFPKA);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.MOLIDIKIFGB != false {
            os.write_bool(3, self.MOLIDIKIFGB)?;
        }
        if self.end_reason != ::protobuf::EnumOrUnknown::new(super::ChimeraRoundWorkEndReason::ChimeraRoundWorkEndReason::CHIMERA_ROUND_WORK_END_NONE) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.end_reason))?;
        }
        if self.CJKCNHCLMGD != 0 {
            os.write_uint32(15, self.CJKCNHCLMGD)?;
        }
        if self.EAIOJCNLMNG != 0 {
            os.write_uint32(2, self.EAIOJCNLMNG)?;
        }
        for (k, v) in &self.GHKGCFCLABF {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(114)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_repeated_packed_uint32(13, &self.MFAFNNCJJNG)?;
        if self.OLLDKAJOAJD != 0 {
            os.write_uint32(9, self.OLLDKAJOAJD)?;
        }
        for (k, v) in &self.NAHPKPPMDKK {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.JIEIFDOCOHE != false {
            os.write_bool(5, self.JIEIFDOCOHE)?;
        }
        if self.BBMGIIMECEL != ::protobuf::EnumOrUnknown::new(super::OAPDMKKKEOL::OAPDMKKKEOL::CHIMERA_LAST_PHASE_FINISH_NONE) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.BBMGIIMECEL))?;
        }
        if self.retcode != 0 {
            os.write_uint32(4, self.retcode)?;
        }
        for v in &self.GOIAKPGJLCB {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        if self.JFPNMOONLNJ != 0 {
            os.write_uint32(11, self.JFPNMOONLNJ)?;
        }
        for v in &self.NCDAOBLMHHP {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if self.IJEIOMMFPKA != 0 {
            os.write_uint32(12, self.IJEIOMMFPKA)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChimeraFinishRoundScRsp {
        ChimeraFinishRoundScRsp::new()
    }

    fn clear(&mut self) {
        self.MOLIDIKIFGB = false;
        self.end_reason = ::protobuf::EnumOrUnknown::new(super::ChimeraRoundWorkEndReason::ChimeraRoundWorkEndReason::CHIMERA_ROUND_WORK_END_NONE);
        self.CJKCNHCLMGD = 0;
        self.EAIOJCNLMNG = 0;
        self.GHKGCFCLABF.clear();
        self.MFAFNNCJJNG.clear();
        self.OLLDKAJOAJD = 0;
        self.NAHPKPPMDKK.clear();
        self.JIEIFDOCOHE = false;
        self.BBMGIIMECEL = ::protobuf::EnumOrUnknown::new(super::OAPDMKKKEOL::OAPDMKKKEOL::CHIMERA_LAST_PHASE_FINISH_NONE);
        self.retcode = 0;
        self.GOIAKPGJLCB.clear();
        self.JFPNMOONLNJ = 0;
        self.NCDAOBLMHHP.clear();
        self.IJEIOMMFPKA = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChimeraFinishRoundScRsp {
        static instance: ::protobuf::rt::Lazy<ChimeraFinishRoundScRsp> = ::protobuf::rt::Lazy::new();
        instance.get(ChimeraFinishRoundScRsp::new)
    }
}

impl ::protobuf::MessageFull for ChimeraFinishRoundScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChimeraFinishRoundScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChimeraFinishRoundScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChimeraFinishRoundScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dChimeraFinishRoundScRsp.proto\x1a\x1fChimeraRoundWorkEndReason.pro\
    to\x1a\x11DIFPDPLCIGD.proto\x1a\x11EADGANMJIPK.proto\x1a\x11JCNJDFFCLDG.\
    proto\x1a\x11OAPDMKKKEOL.proto\x1a\x11ODNNKBIMEFH.proto\"\xc4\x06\n\x17C\
    himeraFinishRoundScRsp\x12\x20\n\x0bMOLIDIKIFGB\x18\x03\x20\x01(\x08R\
    \x0bMOLIDIKIFGB\x129\n\nend_reason\x18\x07\x20\x01(\x0e2\x1a.ChimeraRoun\
    dWorkEndReasonR\tendReason\x12\x20\n\x0bCJKCNHCLMGD\x18\x0f\x20\x01(\rR\
    \x0bCJKCNHCLMGD\x12\x20\n\x0bEAIOJCNLMNG\x18\x02\x20\x01(\rR\x0bEAIOJCNL\
    MNG\x12K\n\x0bGHKGCFCLABF\x18\x0e\x20\x03(\x0b2).ChimeraFinishRoundScRsp\
    .GHKGCFCLABFEntryR\x0bGHKGCFCLABF\x12\x20\n\x0bMFAFNNCJJNG\x18\r\x20\x03\
    (\rR\x0bMFAFNNCJJNG\x12\x20\n\x0bOLLDKAJOAJD\x18\t\x20\x01(\rR\x0bOLLDKA\
    JOAJD\x12K\n\x0bNAHPKPPMDKK\x18\x01\x20\x03(\x0b2).ChimeraFinishRoundScR\
    sp.NAHPKPPMDKKEntryR\x0bNAHPKPPMDKK\x12\x20\n\x0bJIEIFDOCOHE\x18\x05\x20\
    \x01(\x08R\x0bJIEIFDOCOHE\x12.\n\x0bBBMGIIMECEL\x18\x08\x20\x01(\x0e2\
    \x0c.OAPDMKKKEOLR\x0bBBMGIIMECEL\x12\x18\n\x07retcode\x18\x04\x20\x01(\r\
    R\x07retcode\x12.\n\x0bGOIAKPGJLCB\x18\n\x20\x03(\x0b2\x0c.JCNJDFFCLDGR\
    \x0bGOIAKPGJLCB\x12\x20\n\x0bJFPNMOONLNJ\x18\x0b\x20\x01(\rR\x0bJFPNMOON\
    LNJ\x12.\n\x0bNCDAOBLMHHP\x18\x06\x20\x03(\x0b2\x0c.DIFPDPLCIGDR\x0bNCDA\
    OBLMHHP\x12\x20\n\x0bIJEIOMMFPKA\x18\x0c\x20\x01(\rR\x0bIJEIOMMFPKA\x1aL\
    \n\x10GHKGCFCLABFEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\"\
    \n\x05value\x18\x02\x20\x01(\x0b2\x0c.EADGANMJIPKR\x05value:\x028\x01\
    \x1aL\n\x10NAHPKPPMDKKEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\
    \x12\"\n\x05value\x18\x02\x20\x01(\x0b2\x0c.ODNNKBIMEFHR\x05value:\x028\
    \x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::ChimeraRoundWorkEndReason::file_descriptor().clone());
            deps.push(super::DIFPDPLCIGD::file_descriptor().clone());
            deps.push(super::EADGANMJIPK::file_descriptor().clone());
            deps.push(super::JCNJDFFCLDG::file_descriptor().clone());
            deps.push(super::OAPDMKKKEOL::file_descriptor().clone());
            deps.push(super::ODNNKBIMEFH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChimeraFinishRoundScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
