// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ECJMJJKJGOP.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ECJMJJKJGOP)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ECJMJJKJGOP {
    // message fields
    // @@protoc_insertion_point(field:ECJMJJKJGOP.FBEILDAJEDE)
    pub FBEILDAJEDE: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ECJMJJKJGOP.CPGAJPCKCDG)
    pub CPGAJPCKCDG: u32,
    // @@protoc_insertion_point(field:ECJMJJKJGOP.JDJCNBGOGLP)
    pub JDJCNBGOGLP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ECJMJJKJGOP.HDKDKJBDGCC)
    pub HDKDKJBDGCC: u32,
    // @@protoc_insertion_point(field:ECJMJJKJGOP.JALHNEIDHGJ)
    pub JALHNEIDHGJ: u32,
    // @@protoc_insertion_point(field:ECJMJJKJGOP.IICHHOKOPGG)
    pub IICHHOKOPGG: bool,
    // special fields
    // @@protoc_insertion_point(special_field:ECJMJJKJGOP.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ECJMJJKJGOP {
    fn default() -> &'a ECJMJJKJGOP {
        <ECJMJJKJGOP as ::protobuf::Message>::default_instance()
    }
}

impl ECJMJJKJGOP {
    pub fn new() -> ECJMJJKJGOP {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FBEILDAJEDE",
            |m: &ECJMJJKJGOP| { &m.FBEILDAJEDE },
            |m: &mut ECJMJJKJGOP| { &mut m.FBEILDAJEDE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPGAJPCKCDG",
            |m: &ECJMJJKJGOP| { &m.CPGAJPCKCDG },
            |m: &mut ECJMJJKJGOP| { &mut m.CPGAJPCKCDG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JDJCNBGOGLP",
            |m: &ECJMJJKJGOP| { &m.JDJCNBGOGLP },
            |m: &mut ECJMJJKJGOP| { &mut m.JDJCNBGOGLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HDKDKJBDGCC",
            |m: &ECJMJJKJGOP| { &m.HDKDKJBDGCC },
            |m: &mut ECJMJJKJGOP| { &mut m.HDKDKJBDGCC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JALHNEIDHGJ",
            |m: &ECJMJJKJGOP| { &m.JALHNEIDHGJ },
            |m: &mut ECJMJJKJGOP| { &mut m.JALHNEIDHGJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IICHHOKOPGG",
            |m: &ECJMJJKJGOP| { &m.IICHHOKOPGG },
            |m: &mut ECJMJJKJGOP| { &mut m.IICHHOKOPGG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ECJMJJKJGOP>(
            "ECJMJJKJGOP",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ECJMJJKJGOP {
    const NAME: &'static str = "ECJMJJKJGOP";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.FBEILDAJEDE)?;
                },
                64 => {
                    self.FBEILDAJEDE.push(is.read_uint32()?);
                },
                112 => {
                    self.CPGAJPCKCDG = is.read_uint32()?;
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.JDJCNBGOGLP)?;
                },
                80 => {
                    self.JDJCNBGOGLP.push(is.read_uint32()?);
                },
                8 => {
                    self.HDKDKJBDGCC = is.read_uint32()?;
                },
                32 => {
                    self.JALHNEIDHGJ = is.read_uint32()?;
                },
                56 => {
                    self.IICHHOKOPGG = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(8, &self.FBEILDAJEDE);
        if self.CPGAJPCKCDG != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.CPGAJPCKCDG);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(10, &self.JDJCNBGOGLP);
        if self.HDKDKJBDGCC != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.HDKDKJBDGCC);
        }
        if self.JALHNEIDHGJ != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.JALHNEIDHGJ);
        }
        if self.IICHHOKOPGG != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(8, &self.FBEILDAJEDE)?;
        if self.CPGAJPCKCDG != 0 {
            os.write_uint32(14, self.CPGAJPCKCDG)?;
        }
        os.write_repeated_packed_uint32(10, &self.JDJCNBGOGLP)?;
        if self.HDKDKJBDGCC != 0 {
            os.write_uint32(1, self.HDKDKJBDGCC)?;
        }
        if self.JALHNEIDHGJ != 0 {
            os.write_uint32(4, self.JALHNEIDHGJ)?;
        }
        if self.IICHHOKOPGG != false {
            os.write_bool(7, self.IICHHOKOPGG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ECJMJJKJGOP {
        ECJMJJKJGOP::new()
    }

    fn clear(&mut self) {
        self.FBEILDAJEDE.clear();
        self.CPGAJPCKCDG = 0;
        self.JDJCNBGOGLP.clear();
        self.HDKDKJBDGCC = 0;
        self.JALHNEIDHGJ = 0;
        self.IICHHOKOPGG = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ECJMJJKJGOP {
        static instance: ECJMJJKJGOP = ECJMJJKJGOP {
            FBEILDAJEDE: ::std::vec::Vec::new(),
            CPGAJPCKCDG: 0,
            JDJCNBGOGLP: ::std::vec::Vec::new(),
            HDKDKJBDGCC: 0,
            JALHNEIDHGJ: 0,
            IICHHOKOPGG: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ECJMJJKJGOP {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ECJMJJKJGOP").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ECJMJJKJGOP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ECJMJJKJGOP {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ECJMJJKJGOP.proto\"\xd9\x01\n\x0bECJMJJKJGOP\x12\x20\n\x0bFBEILDAJ\
    EDE\x18\x08\x20\x03(\rR\x0bFBEILDAJEDE\x12\x20\n\x0bCPGAJPCKCDG\x18\x0e\
    \x20\x01(\rR\x0bCPGAJPCKCDG\x12\x20\n\x0bJDJCNBGOGLP\x18\n\x20\x03(\rR\
    \x0bJDJCNBGOGLP\x12\x20\n\x0bHDKDKJBDGCC\x18\x01\x20\x01(\rR\x0bHDKDKJBD\
    GCC\x12\x20\n\x0bJALHNEIDHGJ\x18\x04\x20\x01(\rR\x0bJALHNEIDHGJ\x12\x20\
    \n\x0bIICHHOKOPGG\x18\x07\x20\x01(\x08R\x0bIICHHOKOPGGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ECJMJJKJGOP::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
