// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerKickOutScNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PlayerKickOutScNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerKickOutScNotify {
    // message fields
    // @@protoc_insertion_point(field:PlayerKickOutScNotify.black_info)
    pub black_info: ::protobuf::MessageField<super::BlackInfo::BlackInfo>,
    // @@protoc_insertion_point(field:PlayerKickOutScNotify.kick_type)
    pub kick_type: ::protobuf::EnumOrUnknown<player_kick_out_sc_notify::KickType>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerKickOutScNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerKickOutScNotify {
    fn default() -> &'a PlayerKickOutScNotify {
        <PlayerKickOutScNotify as ::protobuf::Message>::default_instance()
    }
}

impl PlayerKickOutScNotify {
    pub fn new() -> PlayerKickOutScNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BlackInfo::BlackInfo>(
            "black_info",
            |m: &PlayerKickOutScNotify| { &m.black_info },
            |m: &mut PlayerKickOutScNotify| { &mut m.black_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kick_type",
            |m: &PlayerKickOutScNotify| { &m.kick_type },
            |m: &mut PlayerKickOutScNotify| { &mut m.kick_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerKickOutScNotify>(
            "PlayerKickOutScNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerKickOutScNotify {
    const NAME: &'static str = "PlayerKickOutScNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.black_info)?;
                },
                72 => {
                    self.kick_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.black_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.kick_type != ::protobuf::EnumOrUnknown::new(player_kick_out_sc_notify::KickType::KICK_SQUEEZED) {
            my_size += ::protobuf::rt::int32_size(9, self.kick_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.black_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.kick_type != ::protobuf::EnumOrUnknown::new(player_kick_out_sc_notify::KickType::KICK_SQUEEZED) {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&self.kick_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerKickOutScNotify {
        PlayerKickOutScNotify::new()
    }

    fn clear(&mut self) {
        self.black_info.clear();
        self.kick_type = ::protobuf::EnumOrUnknown::new(player_kick_out_sc_notify::KickType::KICK_SQUEEZED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerKickOutScNotify {
        static instance: PlayerKickOutScNotify = PlayerKickOutScNotify {
            black_info: ::protobuf::MessageField::none(),
            kick_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerKickOutScNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerKickOutScNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerKickOutScNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerKickOutScNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PlayerKickOutScNotify`
pub mod player_kick_out_sc_notify {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:PlayerKickOutScNotify.KickType)
    pub enum KickType {
        // @@protoc_insertion_point(enum_value:PlayerKickOutScNotify.KickType.KICK_SQUEEZED)
        KICK_SQUEEZED = 0,
        // @@protoc_insertion_point(enum_value:PlayerKickOutScNotify.KickType.KICK_BLACK)
        KICK_BLACK = 1,
        // @@protoc_insertion_point(enum_value:PlayerKickOutScNotify.KickType.KICK_CHANGE_PWD)
        KICK_CHANGE_PWD = 2,
        // @@protoc_insertion_point(enum_value:PlayerKickOutScNotify.KickType.KICK_LOGIN_WHITE_TIMEOUT)
        KICK_LOGIN_WHITE_TIMEOUT = 3,
        // @@protoc_insertion_point(enum_value:PlayerKickOutScNotify.KickType.KICK_ACE_ANTI_CHEATER)
        KICK_ACE_ANTI_CHEATER = 4,
        // @@protoc_insertion_point(enum_value:PlayerKickOutScNotify.KickType.KICK_BY_GM)
        KICK_BY_GM = 5,
    }

    impl ::protobuf::Enum for KickType {
        const NAME: &'static str = "KickType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<KickType> {
            match value {
                0 => ::std::option::Option::Some(KickType::KICK_SQUEEZED),
                1 => ::std::option::Option::Some(KickType::KICK_BLACK),
                2 => ::std::option::Option::Some(KickType::KICK_CHANGE_PWD),
                3 => ::std::option::Option::Some(KickType::KICK_LOGIN_WHITE_TIMEOUT),
                4 => ::std::option::Option::Some(KickType::KICK_ACE_ANTI_CHEATER),
                5 => ::std::option::Option::Some(KickType::KICK_BY_GM),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<KickType> {
            match str {
                "KICK_SQUEEZED" => ::std::option::Option::Some(KickType::KICK_SQUEEZED),
                "KICK_BLACK" => ::std::option::Option::Some(KickType::KICK_BLACK),
                "KICK_CHANGE_PWD" => ::std::option::Option::Some(KickType::KICK_CHANGE_PWD),
                "KICK_LOGIN_WHITE_TIMEOUT" => ::std::option::Option::Some(KickType::KICK_LOGIN_WHITE_TIMEOUT),
                "KICK_ACE_ANTI_CHEATER" => ::std::option::Option::Some(KickType::KICK_ACE_ANTI_CHEATER),
                "KICK_BY_GM" => ::std::option::Option::Some(KickType::KICK_BY_GM),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [KickType] = &[
            KickType::KICK_SQUEEZED,
            KickType::KICK_BLACK,
            KickType::KICK_CHANGE_PWD,
            KickType::KICK_LOGIN_WHITE_TIMEOUT,
            KickType::KICK_ACE_ANTI_CHEATER,
            KickType::KICK_BY_GM,
        ];
    }

    impl ::protobuf::EnumFull for KickType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("PlayerKickOutScNotify.KickType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for KickType {
        fn default() -> Self {
            KickType::KICK_SQUEEZED
        }
    }

    impl KickType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<KickType>("PlayerKickOutScNotify.KickType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bPlayerKickOutScNotify.proto\x1a\x0fBlackInfo.proto\x1a\x0eKickType\
    .proto\"\x8e\x02\n\x15PlayerKickOutScNotify\x12)\n\nblack_info\x18\x07\
    \x20\x01(\x0b2\n.BlackInfoR\tblackInfo\x12<\n\tkick_type\x18\t\x20\x01(\
    \x0e2\x1f.PlayerKickOutScNotify.KickTypeR\x08kickType\"\x8b\x01\n\x08Kic\
    kType\x12\x11\n\rKICK_SQUEEZED\x10\0\x12\x0e\n\nKICK_BLACK\x10\x01\x12\
    \x13\n\x0fKICK_CHANGE_PWD\x10\x02\x12\x1c\n\x18KICK_LOGIN_WHITE_TIMEOUT\
    \x10\x03\x12\x19\n\x15KICK_ACE_ANTI_CHEATER\x10\x04\x12\x0e\n\nKICK_BY_G\
    M\x10\x05b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::BlackInfo::file_descriptor().clone());
            deps.push(super::KickType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerKickOutScNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(player_kick_out_sc_notify::KickType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
