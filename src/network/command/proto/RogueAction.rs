// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueAction.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueAction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueAction {
    // message oneof groups
    pub KFELKJLDKEH: ::std::option::Option<rogue_action::KFELKJLDKEH>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueAction {
    fn default() -> &'a RogueAction {
        <RogueAction as ::protobuf::Message>::default_instance()
    }
}

impl RogueAction {
    pub fn new() -> RogueAction {
        ::std::default::Default::default()
    }

    // .RogueCommonBuffSelectInfo buff_select_info = 2030;

    pub fn buff_select_info(&self) -> &super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffSelectInfo(ref v)) => v,
            _ => <super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_select_info(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_buff_select_info(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_select_info(&mut self, v: super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_select_info(&mut self) -> &mut super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffSelectInfo(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffSelectInfo(super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_select_info(&mut self) -> super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if self.has_buff_select_info() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()
        }
    }

    // .LEFCOMGMPCL FPHHHIOBFAI = 1743;

    pub fn FPHHHIOBFAI(&self) -> &super::LEFCOMGMPCL::LEFCOMGMPCL {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FPHHHIOBFAI(ref v)) => v,
            _ => <super::LEFCOMGMPCL::LEFCOMGMPCL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FPHHHIOBFAI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_FPHHHIOBFAI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FPHHHIOBFAI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FPHHHIOBFAI(&mut self, v: super::LEFCOMGMPCL::LEFCOMGMPCL) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FPHHHIOBFAI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FPHHHIOBFAI(&mut self) -> &mut super::LEFCOMGMPCL::LEFCOMGMPCL {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FPHHHIOBFAI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FPHHHIOBFAI(super::LEFCOMGMPCL::LEFCOMGMPCL::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FPHHHIOBFAI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FPHHHIOBFAI(&mut self) -> super::LEFCOMGMPCL::LEFCOMGMPCL {
        if self.has_FPHHHIOBFAI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FPHHHIOBFAI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LEFCOMGMPCL::LEFCOMGMPCL::new()
        }
    }

    // .IPGKAGFFBHF AJDDFANCEJN = 880;

    pub fn AJDDFANCEJN(&self) -> &super::IPGKAGFFBHF::IPGKAGFFBHF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AJDDFANCEJN(ref v)) => v,
            _ => <super::IPGKAGFFBHF::IPGKAGFFBHF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AJDDFANCEJN(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_AJDDFANCEJN(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AJDDFANCEJN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AJDDFANCEJN(&mut self, v: super::IPGKAGFFBHF::IPGKAGFFBHF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AJDDFANCEJN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AJDDFANCEJN(&mut self) -> &mut super::IPGKAGFFBHF::IPGKAGFFBHF {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AJDDFANCEJN(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AJDDFANCEJN(super::IPGKAGFFBHF::IPGKAGFFBHF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AJDDFANCEJN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AJDDFANCEJN(&mut self) -> super::IPGKAGFFBHF::IPGKAGFFBHF {
        if self.has_AJDDFANCEJN() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AJDDFANCEJN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IPGKAGFFBHF::IPGKAGFFBHF::new()
        }
    }

    // .RogueCommonBuffReforgeSelectInfo buff_reforge_select_info = 1272;

    pub fn buff_reforge_select_info(&self) -> &super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(ref v)) => v,
            _ => <super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_reforge_select_info(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_buff_reforge_select_info(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_reforge_select_info(&mut self, v: super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_reforge_select_info(&mut self) -> &mut super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_reforge_select_info(&mut self) -> super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo {
        if self.has_buff_reforge_select_info() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo::new()
        }
    }

    // .RogueMiracleSelectInfo miracle_select_info = 315;

    pub fn miracle_select_info(&self) -> &super::RogueMiracleSelectInfo::RogueMiracleSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::MiracleSelectInfo(ref v)) => v,
            _ => <super::RogueMiracleSelectInfo::RogueMiracleSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_miracle_select_info(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_miracle_select_info(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::MiracleSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_miracle_select_info(&mut self, v: super::RogueMiracleSelectInfo::RogueMiracleSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::MiracleSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_miracle_select_info(&mut self) -> &mut super::RogueMiracleSelectInfo::RogueMiracleSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::MiracleSelectInfo(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::MiracleSelectInfo(super::RogueMiracleSelectInfo::RogueMiracleSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::MiracleSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_miracle_select_info(&mut self) -> super::RogueMiracleSelectInfo::RogueMiracleSelectInfo {
        if self.has_miracle_select_info() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::MiracleSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueMiracleSelectInfo::RogueMiracleSelectInfo::new()
        }
    }

    // .ANMCAIMELCA BICJEMPPLAM = 747;

    pub fn BICJEMPPLAM(&self) -> &super::ANMCAIMELCA::ANMCAIMELCA {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BICJEMPPLAM(ref v)) => v,
            _ => <super::ANMCAIMELCA::ANMCAIMELCA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BICJEMPPLAM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BICJEMPPLAM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BICJEMPPLAM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BICJEMPPLAM(&mut self, v: super::ANMCAIMELCA::ANMCAIMELCA) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BICJEMPPLAM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BICJEMPPLAM(&mut self) -> &mut super::ANMCAIMELCA::ANMCAIMELCA {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BICJEMPPLAM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BICJEMPPLAM(super::ANMCAIMELCA::ANMCAIMELCA::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BICJEMPPLAM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BICJEMPPLAM(&mut self) -> super::ANMCAIMELCA::ANMCAIMELCA {
        if self.has_BICJEMPPLAM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BICJEMPPLAM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ANMCAIMELCA::ANMCAIMELCA::new()
        }
    }

    // .GABBEHOIPJC AELPPPIEFAB = 1992;

    pub fn AELPPPIEFAB(&self) -> &super::GABBEHOIPJC::GABBEHOIPJC {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AELPPPIEFAB(ref v)) => v,
            _ => <super::GABBEHOIPJC::GABBEHOIPJC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AELPPPIEFAB(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_AELPPPIEFAB(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AELPPPIEFAB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AELPPPIEFAB(&mut self, v: super::GABBEHOIPJC::GABBEHOIPJC) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AELPPPIEFAB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AELPPPIEFAB(&mut self) -> &mut super::GABBEHOIPJC::GABBEHOIPJC {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AELPPPIEFAB(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AELPPPIEFAB(super::GABBEHOIPJC::GABBEHOIPJC::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AELPPPIEFAB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AELPPPIEFAB(&mut self) -> super::GABBEHOIPJC::GABBEHOIPJC {
        if self.has_AELPPPIEFAB() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AELPPPIEFAB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GABBEHOIPJC::GABBEHOIPJC::new()
        }
    }

    // .MLKICCAELKE BEDIACHLCII = 1829;

    pub fn BEDIACHLCII(&self) -> &super::MLKICCAELKE::MLKICCAELKE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BEDIACHLCII(ref v)) => v,
            _ => <super::MLKICCAELKE::MLKICCAELKE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BEDIACHLCII(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BEDIACHLCII(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BEDIACHLCII(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BEDIACHLCII(&mut self, v: super::MLKICCAELKE::MLKICCAELKE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BEDIACHLCII(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BEDIACHLCII(&mut self) -> &mut super::MLKICCAELKE::MLKICCAELKE {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BEDIACHLCII(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BEDIACHLCII(super::MLKICCAELKE::MLKICCAELKE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BEDIACHLCII(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BEDIACHLCII(&mut self) -> super::MLKICCAELKE::MLKICCAELKE {
        if self.has_BEDIACHLCII() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BEDIACHLCII(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MLKICCAELKE::MLKICCAELKE::new()
        }
    }

    // .EAKECFAPPKD LADGCOOMNKA = 2044;

    pub fn LADGCOOMNKA(&self) -> &super::EAKECFAPPKD::EAKECFAPPKD {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LADGCOOMNKA(ref v)) => v,
            _ => <super::EAKECFAPPKD::EAKECFAPPKD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LADGCOOMNKA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LADGCOOMNKA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LADGCOOMNKA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LADGCOOMNKA(&mut self, v: super::EAKECFAPPKD::EAKECFAPPKD) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LADGCOOMNKA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LADGCOOMNKA(&mut self) -> &mut super::EAKECFAPPKD::EAKECFAPPKD {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LADGCOOMNKA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LADGCOOMNKA(super::EAKECFAPPKD::EAKECFAPPKD::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LADGCOOMNKA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LADGCOOMNKA(&mut self) -> super::EAKECFAPPKD::EAKECFAPPKD {
        if self.has_LADGCOOMNKA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LADGCOOMNKA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EAKECFAPPKD::EAKECFAPPKD::new()
        }
    }

    // .ELDAFCNMFBF CGKFOMNCNAK = 1373;

    pub fn CGKFOMNCNAK(&self) -> &super::ELDAFCNMFBF::ELDAFCNMFBF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CGKFOMNCNAK(ref v)) => v,
            _ => <super::ELDAFCNMFBF::ELDAFCNMFBF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CGKFOMNCNAK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_CGKFOMNCNAK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CGKFOMNCNAK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CGKFOMNCNAK(&mut self, v: super::ELDAFCNMFBF::ELDAFCNMFBF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CGKFOMNCNAK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CGKFOMNCNAK(&mut self) -> &mut super::ELDAFCNMFBF::ELDAFCNMFBF {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CGKFOMNCNAK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CGKFOMNCNAK(super::ELDAFCNMFBF::ELDAFCNMFBF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CGKFOMNCNAK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CGKFOMNCNAK(&mut self) -> super::ELDAFCNMFBF::ELDAFCNMFBF {
        if self.has_CGKFOMNCNAK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CGKFOMNCNAK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ELDAFCNMFBF::ELDAFCNMFBF::new()
        }
    }

    // .RogueComposeMiracleSelectInfo compose_miracle_select_info = 1195;

    pub fn compose_miracle_select_info(&self) -> &super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(ref v)) => v,
            _ => <super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_compose_miracle_select_info(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_compose_miracle_select_info(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_compose_miracle_select_info(&mut self, v: super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_compose_miracle_select_info(&mut self) -> &mut super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_compose_miracle_select_info(&mut self) -> super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo {
        if self.has_compose_miracle_select_info() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo::new()
        }
    }

    // .RogueHexAvatarSelectInfo hex_avatar_select_info = 88;

    pub fn hex_avatar_select_info(&self) -> &super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(ref v)) => v,
            _ => <super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_hex_avatar_select_info(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_hex_avatar_select_info(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hex_avatar_select_info(&mut self, v: super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hex_avatar_select_info(&mut self) -> &mut super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hex_avatar_select_info(&mut self) -> super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo {
        if self.has_hex_avatar_select_info() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo::new()
        }
    }

    // .RogueBonusSelectInfo bonus_select_info = 1153;

    pub fn bonus_select_info(&self) -> &super::RogueBonusSelectInfo::RogueBonusSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BonusSelectInfo(ref v)) => v,
            _ => <super::RogueBonusSelectInfo::RogueBonusSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bonus_select_info(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_bonus_select_info(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BonusSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bonus_select_info(&mut self, v: super::RogueBonusSelectInfo::RogueBonusSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BonusSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bonus_select_info(&mut self) -> &mut super::RogueBonusSelectInfo::RogueBonusSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BonusSelectInfo(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BonusSelectInfo(super::RogueBonusSelectInfo::RogueBonusSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BonusSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bonus_select_info(&mut self) -> super::RogueBonusSelectInfo::RogueBonusSelectInfo {
        if self.has_bonus_select_info() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BonusSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueBonusSelectInfo::RogueBonusSelectInfo::new()
        }
    }

    // .RogueFormulaSelectInfo rogue_formula_select_info = 500;

    pub fn rogue_formula_select_info(&self) -> &super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(ref v)) => v,
            _ => <super::RogueFormulaSelectInfo::RogueFormulaSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_formula_select_info(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_rogue_formula_select_info(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_formula_select_info(&mut self, v: super::RogueFormulaSelectInfo::RogueFormulaSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_formula_select_info(&mut self) -> &mut super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_formula_select_info(&mut self) -> super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if self.has_rogue_formula_select_info() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()
        }
    }

    // .FHMAIANENPO JBKPIKAJPEB = 523;

    pub fn JBKPIKAJPEB(&self) -> &super::FHMAIANENPO::FHMAIANENPO {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::JBKPIKAJPEB(ref v)) => v,
            _ => <super::FHMAIANENPO::FHMAIANENPO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JBKPIKAJPEB(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JBKPIKAJPEB(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::JBKPIKAJPEB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JBKPIKAJPEB(&mut self, v: super::FHMAIANENPO::FHMAIANENPO) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::JBKPIKAJPEB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JBKPIKAJPEB(&mut self) -> &mut super::FHMAIANENPO::FHMAIANENPO {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::JBKPIKAJPEB(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::JBKPIKAJPEB(super::FHMAIANENPO::FHMAIANENPO::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::JBKPIKAJPEB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JBKPIKAJPEB(&mut self) -> super::FHMAIANENPO::FHMAIANENPO {
        if self.has_JBKPIKAJPEB() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::JBKPIKAJPEB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FHMAIANENPO::FHMAIANENPO::new()
        }
    }

    // .BPDDOBAHPNA HCCHFJEFANJ = 1071;

    pub fn HCCHFJEFANJ(&self) -> &super::BPDDOBAHPNA::BPDDOBAHPNA {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HCCHFJEFANJ(ref v)) => v,
            _ => <super::BPDDOBAHPNA::BPDDOBAHPNA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HCCHFJEFANJ(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_HCCHFJEFANJ(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HCCHFJEFANJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HCCHFJEFANJ(&mut self, v: super::BPDDOBAHPNA::BPDDOBAHPNA) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HCCHFJEFANJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HCCHFJEFANJ(&mut self) -> &mut super::BPDDOBAHPNA::BPDDOBAHPNA {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HCCHFJEFANJ(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HCCHFJEFANJ(super::BPDDOBAHPNA::BPDDOBAHPNA::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HCCHFJEFANJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HCCHFJEFANJ(&mut self) -> super::BPDDOBAHPNA::BPDDOBAHPNA {
        if self.has_HCCHFJEFANJ() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HCCHFJEFANJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BPDDOBAHPNA::BPDDOBAHPNA::new()
        }
    }

    // .RogueMagicUnitSelectInfo OIOMHOPNIMF = 1665;

    pub fn OIOMHOPNIMF(&self) -> &super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::OIOMHOPNIMF(ref v)) => v,
            _ => <super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OIOMHOPNIMF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_OIOMHOPNIMF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::OIOMHOPNIMF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OIOMHOPNIMF(&mut self, v: super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::OIOMHOPNIMF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OIOMHOPNIMF(&mut self) -> &mut super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::OIOMHOPNIMF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::OIOMHOPNIMF(super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::OIOMHOPNIMF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OIOMHOPNIMF(&mut self) -> super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        if self.has_OIOMHOPNIMF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::OIOMHOPNIMF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo::new()
        }
    }

    // .RogueMagicScepterSelectInfo IFCLAAFPKHC = 1470;

    pub fn IFCLAAFPKHC(&self) -> &super::RogueMagicScepterSelectInfo::RogueMagicScepterSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::IFCLAAFPKHC(ref v)) => v,
            _ => <super::RogueMagicScepterSelectInfo::RogueMagicScepterSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IFCLAAFPKHC(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IFCLAAFPKHC(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::IFCLAAFPKHC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IFCLAAFPKHC(&mut self, v: super::RogueMagicScepterSelectInfo::RogueMagicScepterSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::IFCLAAFPKHC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IFCLAAFPKHC(&mut self) -> &mut super::RogueMagicScepterSelectInfo::RogueMagicScepterSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::IFCLAAFPKHC(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::IFCLAAFPKHC(super::RogueMagicScepterSelectInfo::RogueMagicScepterSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::IFCLAAFPKHC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IFCLAAFPKHC(&mut self) -> super::RogueMagicScepterSelectInfo::RogueMagicScepterSelectInfo {
        if self.has_IFCLAAFPKHC() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::IFCLAAFPKHC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueMagicScepterSelectInfo::RogueMagicScepterSelectInfo::new()
        }
    }

    // .JKHKEBMOBEJ HFJECHFANNF = 836;

    pub fn HFJECHFANNF(&self) -> &super::JKHKEBMOBEJ::JKHKEBMOBEJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HFJECHFANNF(ref v)) => v,
            _ => <super::JKHKEBMOBEJ::JKHKEBMOBEJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HFJECHFANNF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_HFJECHFANNF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HFJECHFANNF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HFJECHFANNF(&mut self, v: super::JKHKEBMOBEJ::JKHKEBMOBEJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HFJECHFANNF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HFJECHFANNF(&mut self) -> &mut super::JKHKEBMOBEJ::JKHKEBMOBEJ {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HFJECHFANNF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HFJECHFANNF(super::JKHKEBMOBEJ::JKHKEBMOBEJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HFJECHFANNF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HFJECHFANNF(&mut self) -> super::JKHKEBMOBEJ::JKHKEBMOBEJ {
        if self.has_HFJECHFANNF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HFJECHFANNF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JKHKEBMOBEJ::JKHKEBMOBEJ::new()
        }
    }

    // .RogueMagicUnitSelectInfo LDJOMIOJEPF = 1003;

    pub fn LDJOMIOJEPF(&self) -> &super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LDJOMIOJEPF(ref v)) => v,
            _ => <super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LDJOMIOJEPF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LDJOMIOJEPF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LDJOMIOJEPF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LDJOMIOJEPF(&mut self, v: super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LDJOMIOJEPF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LDJOMIOJEPF(&mut self) -> &mut super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LDJOMIOJEPF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LDJOMIOJEPF(super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LDJOMIOJEPF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LDJOMIOJEPF(&mut self) -> super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        if self.has_LDJOMIOJEPF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LDJOMIOJEPF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo::new()
        }
    }

    // .RogueMagicUnitSelectInfo LMNONCMBIOO = 469;

    pub fn LMNONCMBIOO(&self) -> &super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LMNONCMBIOO(ref v)) => v,
            _ => <super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LMNONCMBIOO(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LMNONCMBIOO(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LMNONCMBIOO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LMNONCMBIOO(&mut self, v: super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LMNONCMBIOO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LMNONCMBIOO(&mut self) -> &mut super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LMNONCMBIOO(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LMNONCMBIOO(super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LMNONCMBIOO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LMNONCMBIOO(&mut self) -> super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        if self.has_LMNONCMBIOO() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LMNONCMBIOO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo::new()
        }
    }

    // .RogueMagicUnitSelectInfo CNLMCOBNCAI = 1991;

    pub fn CNLMCOBNCAI(&self) -> &super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CNLMCOBNCAI(ref v)) => v,
            _ => <super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CNLMCOBNCAI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_CNLMCOBNCAI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CNLMCOBNCAI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CNLMCOBNCAI(&mut self, v: super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CNLMCOBNCAI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CNLMCOBNCAI(&mut self) -> &mut super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CNLMCOBNCAI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CNLMCOBNCAI(super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CNLMCOBNCAI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CNLMCOBNCAI(&mut self) -> super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo {
        if self.has_CNLMCOBNCAI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CNLMCOBNCAI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo::new()
        }
    }

    // .KKAGNMEMKOG FHOKDLLICJL = 1379;

    pub fn FHOKDLLICJL(&self) -> &super::KKAGNMEMKOG::KKAGNMEMKOG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FHOKDLLICJL(ref v)) => v,
            _ => <super::KKAGNMEMKOG::KKAGNMEMKOG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FHOKDLLICJL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_FHOKDLLICJL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FHOKDLLICJL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FHOKDLLICJL(&mut self, v: super::KKAGNMEMKOG::KKAGNMEMKOG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FHOKDLLICJL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FHOKDLLICJL(&mut self) -> &mut super::KKAGNMEMKOG::KKAGNMEMKOG {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FHOKDLLICJL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FHOKDLLICJL(super::KKAGNMEMKOG::KKAGNMEMKOG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FHOKDLLICJL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FHOKDLLICJL(&mut self) -> super::KKAGNMEMKOG::KKAGNMEMKOG {
        if self.has_FHOKDLLICJL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FHOKDLLICJL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KKAGNMEMKOG::KKAGNMEMKOG::new()
        }
    }

    // .KKAGNMEMKOG PHDEMDBGOIB = 2001;

    pub fn PHDEMDBGOIB(&self) -> &super::KKAGNMEMKOG::KKAGNMEMKOG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::PHDEMDBGOIB(ref v)) => v,
            _ => <super::KKAGNMEMKOG::KKAGNMEMKOG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PHDEMDBGOIB(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_PHDEMDBGOIB(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::PHDEMDBGOIB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PHDEMDBGOIB(&mut self, v: super::KKAGNMEMKOG::KKAGNMEMKOG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::PHDEMDBGOIB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PHDEMDBGOIB(&mut self) -> &mut super::KKAGNMEMKOG::KKAGNMEMKOG {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::PHDEMDBGOIB(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::PHDEMDBGOIB(super::KKAGNMEMKOG::KKAGNMEMKOG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::PHDEMDBGOIB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PHDEMDBGOIB(&mut self) -> super::KKAGNMEMKOG::KKAGNMEMKOG {
        if self.has_PHDEMDBGOIB() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::PHDEMDBGOIB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KKAGNMEMKOG::KKAGNMEMKOG::new()
        }
    }

    // .KKAGNMEMKOG KLJJIBPJGFF = 532;

    pub fn KLJJIBPJGFF(&self) -> &super::KKAGNMEMKOG::KKAGNMEMKOG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::KLJJIBPJGFF(ref v)) => v,
            _ => <super::KKAGNMEMKOG::KKAGNMEMKOG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KLJJIBPJGFF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KLJJIBPJGFF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::KLJJIBPJGFF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KLJJIBPJGFF(&mut self, v: super::KKAGNMEMKOG::KKAGNMEMKOG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::KLJJIBPJGFF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KLJJIBPJGFF(&mut self) -> &mut super::KKAGNMEMKOG::KKAGNMEMKOG {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::KLJJIBPJGFF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::KLJJIBPJGFF(super::KKAGNMEMKOG::KKAGNMEMKOG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::KLJJIBPJGFF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KLJJIBPJGFF(&mut self) -> super::KKAGNMEMKOG::KKAGNMEMKOG {
        if self.has_KLJJIBPJGFF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::KLJJIBPJGFF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KKAGNMEMKOG::KKAGNMEMKOG::new()
        }
    }

    // .PIGFBKOJNHG DLFALFGFDHE = 296;

    pub fn DLFALFGFDHE(&self) -> &super::PIGFBKOJNHG::PIGFBKOJNHG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::DLFALFGFDHE(ref v)) => v,
            _ => <super::PIGFBKOJNHG::PIGFBKOJNHG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DLFALFGFDHE(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DLFALFGFDHE(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::DLFALFGFDHE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DLFALFGFDHE(&mut self, v: super::PIGFBKOJNHG::PIGFBKOJNHG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::DLFALFGFDHE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DLFALFGFDHE(&mut self) -> &mut super::PIGFBKOJNHG::PIGFBKOJNHG {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::DLFALFGFDHE(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::DLFALFGFDHE(super::PIGFBKOJNHG::PIGFBKOJNHG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::DLFALFGFDHE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DLFALFGFDHE(&mut self) -> super::PIGFBKOJNHG::PIGFBKOJNHG {
        if self.has_DLFALFGFDHE() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::DLFALFGFDHE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PIGFBKOJNHG::PIGFBKOJNHG::new()
        }
    }

    // .CGGBPJICHGF NPCDBPNDGOP = 53;

    pub fn NPCDBPNDGOP(&self) -> &super::CGGBPJICHGF::CGGBPJICHGF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::NPCDBPNDGOP(ref v)) => v,
            _ => <super::CGGBPJICHGF::CGGBPJICHGF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NPCDBPNDGOP(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NPCDBPNDGOP(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::NPCDBPNDGOP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NPCDBPNDGOP(&mut self, v: super::CGGBPJICHGF::CGGBPJICHGF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::NPCDBPNDGOP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NPCDBPNDGOP(&mut self) -> &mut super::CGGBPJICHGF::CGGBPJICHGF {
        if let ::std::option::Option::Some(rogue_action::KFELKJLDKEH::NPCDBPNDGOP(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::NPCDBPNDGOP(super::CGGBPJICHGF::CGGBPJICHGF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_action::KFELKJLDKEH::NPCDBPNDGOP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NPCDBPNDGOP(&mut self) -> super::CGGBPJICHGF::CGGBPJICHGF {
        if self.has_NPCDBPNDGOP() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_action::KFELKJLDKEH::NPCDBPNDGOP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGGBPJICHGF::CGGBPJICHGF::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(27);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo>(
            "buff_select_info",
            RogueAction::has_buff_select_info,
            RogueAction::buff_select_info,
            RogueAction::mut_buff_select_info,
            RogueAction::set_buff_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LEFCOMGMPCL::LEFCOMGMPCL>(
            "FPHHHIOBFAI",
            RogueAction::has_FPHHHIOBFAI,
            RogueAction::FPHHHIOBFAI,
            RogueAction::mut_FPHHHIOBFAI,
            RogueAction::set_FPHHHIOBFAI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IPGKAGFFBHF::IPGKAGFFBHF>(
            "AJDDFANCEJN",
            RogueAction::has_AJDDFANCEJN,
            RogueAction::AJDDFANCEJN,
            RogueAction::mut_AJDDFANCEJN,
            RogueAction::set_AJDDFANCEJN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo>(
            "buff_reforge_select_info",
            RogueAction::has_buff_reforge_select_info,
            RogueAction::buff_reforge_select_info,
            RogueAction::mut_buff_reforge_select_info,
            RogueAction::set_buff_reforge_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueMiracleSelectInfo::RogueMiracleSelectInfo>(
            "miracle_select_info",
            RogueAction::has_miracle_select_info,
            RogueAction::miracle_select_info,
            RogueAction::mut_miracle_select_info,
            RogueAction::set_miracle_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ANMCAIMELCA::ANMCAIMELCA>(
            "BICJEMPPLAM",
            RogueAction::has_BICJEMPPLAM,
            RogueAction::BICJEMPPLAM,
            RogueAction::mut_BICJEMPPLAM,
            RogueAction::set_BICJEMPPLAM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GABBEHOIPJC::GABBEHOIPJC>(
            "AELPPPIEFAB",
            RogueAction::has_AELPPPIEFAB,
            RogueAction::AELPPPIEFAB,
            RogueAction::mut_AELPPPIEFAB,
            RogueAction::set_AELPPPIEFAB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MLKICCAELKE::MLKICCAELKE>(
            "BEDIACHLCII",
            RogueAction::has_BEDIACHLCII,
            RogueAction::BEDIACHLCII,
            RogueAction::mut_BEDIACHLCII,
            RogueAction::set_BEDIACHLCII,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EAKECFAPPKD::EAKECFAPPKD>(
            "LADGCOOMNKA",
            RogueAction::has_LADGCOOMNKA,
            RogueAction::LADGCOOMNKA,
            RogueAction::mut_LADGCOOMNKA,
            RogueAction::set_LADGCOOMNKA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ELDAFCNMFBF::ELDAFCNMFBF>(
            "CGKFOMNCNAK",
            RogueAction::has_CGKFOMNCNAK,
            RogueAction::CGKFOMNCNAK,
            RogueAction::mut_CGKFOMNCNAK,
            RogueAction::set_CGKFOMNCNAK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo>(
            "compose_miracle_select_info",
            RogueAction::has_compose_miracle_select_info,
            RogueAction::compose_miracle_select_info,
            RogueAction::mut_compose_miracle_select_info,
            RogueAction::set_compose_miracle_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo>(
            "hex_avatar_select_info",
            RogueAction::has_hex_avatar_select_info,
            RogueAction::hex_avatar_select_info,
            RogueAction::mut_hex_avatar_select_info,
            RogueAction::set_hex_avatar_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueBonusSelectInfo::RogueBonusSelectInfo>(
            "bonus_select_info",
            RogueAction::has_bonus_select_info,
            RogueAction::bonus_select_info,
            RogueAction::mut_bonus_select_info,
            RogueAction::set_bonus_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueFormulaSelectInfo::RogueFormulaSelectInfo>(
            "rogue_formula_select_info",
            RogueAction::has_rogue_formula_select_info,
            RogueAction::rogue_formula_select_info,
            RogueAction::mut_rogue_formula_select_info,
            RogueAction::set_rogue_formula_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FHMAIANENPO::FHMAIANENPO>(
            "JBKPIKAJPEB",
            RogueAction::has_JBKPIKAJPEB,
            RogueAction::JBKPIKAJPEB,
            RogueAction::mut_JBKPIKAJPEB,
            RogueAction::set_JBKPIKAJPEB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BPDDOBAHPNA::BPDDOBAHPNA>(
            "HCCHFJEFANJ",
            RogueAction::has_HCCHFJEFANJ,
            RogueAction::HCCHFJEFANJ,
            RogueAction::mut_HCCHFJEFANJ,
            RogueAction::set_HCCHFJEFANJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo>(
            "OIOMHOPNIMF",
            RogueAction::has_OIOMHOPNIMF,
            RogueAction::OIOMHOPNIMF,
            RogueAction::mut_OIOMHOPNIMF,
            RogueAction::set_OIOMHOPNIMF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueMagicScepterSelectInfo::RogueMagicScepterSelectInfo>(
            "IFCLAAFPKHC",
            RogueAction::has_IFCLAAFPKHC,
            RogueAction::IFCLAAFPKHC,
            RogueAction::mut_IFCLAAFPKHC,
            RogueAction::set_IFCLAAFPKHC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JKHKEBMOBEJ::JKHKEBMOBEJ>(
            "HFJECHFANNF",
            RogueAction::has_HFJECHFANNF,
            RogueAction::HFJECHFANNF,
            RogueAction::mut_HFJECHFANNF,
            RogueAction::set_HFJECHFANNF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo>(
            "LDJOMIOJEPF",
            RogueAction::has_LDJOMIOJEPF,
            RogueAction::LDJOMIOJEPF,
            RogueAction::mut_LDJOMIOJEPF,
            RogueAction::set_LDJOMIOJEPF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo>(
            "LMNONCMBIOO",
            RogueAction::has_LMNONCMBIOO,
            RogueAction::LMNONCMBIOO,
            RogueAction::mut_LMNONCMBIOO,
            RogueAction::set_LMNONCMBIOO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo>(
            "CNLMCOBNCAI",
            RogueAction::has_CNLMCOBNCAI,
            RogueAction::CNLMCOBNCAI,
            RogueAction::mut_CNLMCOBNCAI,
            RogueAction::set_CNLMCOBNCAI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KKAGNMEMKOG::KKAGNMEMKOG>(
            "FHOKDLLICJL",
            RogueAction::has_FHOKDLLICJL,
            RogueAction::FHOKDLLICJL,
            RogueAction::mut_FHOKDLLICJL,
            RogueAction::set_FHOKDLLICJL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KKAGNMEMKOG::KKAGNMEMKOG>(
            "PHDEMDBGOIB",
            RogueAction::has_PHDEMDBGOIB,
            RogueAction::PHDEMDBGOIB,
            RogueAction::mut_PHDEMDBGOIB,
            RogueAction::set_PHDEMDBGOIB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KKAGNMEMKOG::KKAGNMEMKOG>(
            "KLJJIBPJGFF",
            RogueAction::has_KLJJIBPJGFF,
            RogueAction::KLJJIBPJGFF,
            RogueAction::mut_KLJJIBPJGFF,
            RogueAction::set_KLJJIBPJGFF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PIGFBKOJNHG::PIGFBKOJNHG>(
            "DLFALFGFDHE",
            RogueAction::has_DLFALFGFDHE,
            RogueAction::DLFALFGFDHE,
            RogueAction::mut_DLFALFGFDHE,
            RogueAction::set_DLFALFGFDHE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGGBPJICHGF::CGGBPJICHGF>(
            "NPCDBPNDGOP",
            RogueAction::has_NPCDBPNDGOP,
            RogueAction::NPCDBPNDGOP,
            RogueAction::mut_NPCDBPNDGOP,
            RogueAction::set_NPCDBPNDGOP,
        ));
        oneofs.push(rogue_action::KFELKJLDKEH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueAction>(
            "RogueAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueAction {
    const NAME: &'static str = "RogueAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16242 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffSelectInfo(is.read_message()?));
                },
                13946 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FPHHHIOBFAI(is.read_message()?));
                },
                7042 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AJDDFANCEJN(is.read_message()?));
                },
                10178 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(is.read_message()?));
                },
                2522 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::MiracleSelectInfo(is.read_message()?));
                },
                5978 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BICJEMPPLAM(is.read_message()?));
                },
                15938 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::AELPPPIEFAB(is.read_message()?));
                },
                14634 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BEDIACHLCII(is.read_message()?));
                },
                16354 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LADGCOOMNKA(is.read_message()?));
                },
                10986 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CGKFOMNCNAK(is.read_message()?));
                },
                9562 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(is.read_message()?));
                },
                706 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(is.read_message()?));
                },
                9226 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::BonusSelectInfo(is.read_message()?));
                },
                4002 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(is.read_message()?));
                },
                4186 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::JBKPIKAJPEB(is.read_message()?));
                },
                8570 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HCCHFJEFANJ(is.read_message()?));
                },
                13322 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::OIOMHOPNIMF(is.read_message()?));
                },
                11762 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::IFCLAAFPKHC(is.read_message()?));
                },
                6690 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::HFJECHFANNF(is.read_message()?));
                },
                8026 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LDJOMIOJEPF(is.read_message()?));
                },
                3754 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::LMNONCMBIOO(is.read_message()?));
                },
                15930 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::CNLMCOBNCAI(is.read_message()?));
                },
                11034 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::FHOKDLLICJL(is.read_message()?));
                },
                16010 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::PHDEMDBGOIB(is.read_message()?));
                },
                4258 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::KLJJIBPJGFF(is.read_message()?));
                },
                2370 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::DLFALFGFDHE(is.read_message()?));
                },
                426 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_action::KFELKJLDKEH::NPCDBPNDGOP(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &rogue_action::KFELKJLDKEH::BuffSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::FPHHHIOBFAI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::AJDDFANCEJN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::MiracleSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::BICJEMPPLAM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::AELPPPIEFAB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::BEDIACHLCII(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::LADGCOOMNKA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::CGKFOMNCNAK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::BonusSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::JBKPIKAJPEB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::HCCHFJEFANJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::OIOMHOPNIMF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::IFCLAAFPKHC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::HFJECHFANNF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::LDJOMIOJEPF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::LMNONCMBIOO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::CNLMCOBNCAI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::FHOKDLLICJL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::PHDEMDBGOIB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::KLJJIBPJGFF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::DLFALFGFDHE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::KFELKJLDKEH::NPCDBPNDGOP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &rogue_action::KFELKJLDKEH::BuffSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2030, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::FPHHHIOBFAI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1743, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::AJDDFANCEJN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(880, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::BuffReforgeSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1272, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::MiracleSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(315, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::BICJEMPPLAM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(747, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::AELPPPIEFAB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1992, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::BEDIACHLCII(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1829, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::LADGCOOMNKA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2044, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::CGKFOMNCNAK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1373, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::ComposeMiracleSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1195, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::HexAvatarSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(88, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::BonusSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1153, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::RogueFormulaSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(500, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::JBKPIKAJPEB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(523, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::HCCHFJEFANJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1071, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::OIOMHOPNIMF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1665, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::IFCLAAFPKHC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1470, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::HFJECHFANNF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(836, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::LDJOMIOJEPF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1003, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::LMNONCMBIOO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(469, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::CNLMCOBNCAI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1991, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::FHOKDLLICJL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1379, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::PHDEMDBGOIB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2001, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::KLJJIBPJGFF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(532, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::DLFALFGFDHE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(296, v, os)?;
                },
                &rogue_action::KFELKJLDKEH::NPCDBPNDGOP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(53, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueAction {
        RogueAction::new()
    }

    fn clear(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueAction {
        static instance: RogueAction = RogueAction {
            KFELKJLDKEH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueAction`
pub mod rogue_action {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueAction.KFELKJLDKEH)
    pub enum KFELKJLDKEH {
        // @@protoc_insertion_point(oneof_field:RogueAction.buff_select_info)
        BuffSelectInfo(super::super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.FPHHHIOBFAI)
        FPHHHIOBFAI(super::super::LEFCOMGMPCL::LEFCOMGMPCL),
        // @@protoc_insertion_point(oneof_field:RogueAction.AJDDFANCEJN)
        AJDDFANCEJN(super::super::IPGKAGFFBHF::IPGKAGFFBHF),
        // @@protoc_insertion_point(oneof_field:RogueAction.buff_reforge_select_info)
        BuffReforgeSelectInfo(super::super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.miracle_select_info)
        MiracleSelectInfo(super::super::RogueMiracleSelectInfo::RogueMiracleSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.BICJEMPPLAM)
        BICJEMPPLAM(super::super::ANMCAIMELCA::ANMCAIMELCA),
        // @@protoc_insertion_point(oneof_field:RogueAction.AELPPPIEFAB)
        AELPPPIEFAB(super::super::GABBEHOIPJC::GABBEHOIPJC),
        // @@protoc_insertion_point(oneof_field:RogueAction.BEDIACHLCII)
        BEDIACHLCII(super::super::MLKICCAELKE::MLKICCAELKE),
        // @@protoc_insertion_point(oneof_field:RogueAction.LADGCOOMNKA)
        LADGCOOMNKA(super::super::EAKECFAPPKD::EAKECFAPPKD),
        // @@protoc_insertion_point(oneof_field:RogueAction.CGKFOMNCNAK)
        CGKFOMNCNAK(super::super::ELDAFCNMFBF::ELDAFCNMFBF),
        // @@protoc_insertion_point(oneof_field:RogueAction.compose_miracle_select_info)
        ComposeMiracleSelectInfo(super::super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.hex_avatar_select_info)
        HexAvatarSelectInfo(super::super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.bonus_select_info)
        BonusSelectInfo(super::super::RogueBonusSelectInfo::RogueBonusSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.rogue_formula_select_info)
        RogueFormulaSelectInfo(super::super::RogueFormulaSelectInfo::RogueFormulaSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.JBKPIKAJPEB)
        JBKPIKAJPEB(super::super::FHMAIANENPO::FHMAIANENPO),
        // @@protoc_insertion_point(oneof_field:RogueAction.HCCHFJEFANJ)
        HCCHFJEFANJ(super::super::BPDDOBAHPNA::BPDDOBAHPNA),
        // @@protoc_insertion_point(oneof_field:RogueAction.OIOMHOPNIMF)
        OIOMHOPNIMF(super::super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.IFCLAAFPKHC)
        IFCLAAFPKHC(super::super::RogueMagicScepterSelectInfo::RogueMagicScepterSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.HFJECHFANNF)
        HFJECHFANNF(super::super::JKHKEBMOBEJ::JKHKEBMOBEJ),
        // @@protoc_insertion_point(oneof_field:RogueAction.LDJOMIOJEPF)
        LDJOMIOJEPF(super::super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.LMNONCMBIOO)
        LMNONCMBIOO(super::super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.CNLMCOBNCAI)
        CNLMCOBNCAI(super::super::RogueMagicUnitSelectInfo::RogueMagicUnitSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.FHOKDLLICJL)
        FHOKDLLICJL(super::super::KKAGNMEMKOG::KKAGNMEMKOG),
        // @@protoc_insertion_point(oneof_field:RogueAction.PHDEMDBGOIB)
        PHDEMDBGOIB(super::super::KKAGNMEMKOG::KKAGNMEMKOG),
        // @@protoc_insertion_point(oneof_field:RogueAction.KLJJIBPJGFF)
        KLJJIBPJGFF(super::super::KKAGNMEMKOG::KKAGNMEMKOG),
        // @@protoc_insertion_point(oneof_field:RogueAction.DLFALFGFDHE)
        DLFALFGFDHE(super::super::PIGFBKOJNHG::PIGFBKOJNHG),
        // @@protoc_insertion_point(oneof_field:RogueAction.NPCDBPNDGOP)
        NPCDBPNDGOP(super::super::CGGBPJICHGF::CGGBPJICHGF),
    }

    impl ::protobuf::Oneof for KFELKJLDKEH {
    }

    impl ::protobuf::OneofFull for KFELKJLDKEH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueAction as ::protobuf::MessageFull>::descriptor().oneof_by_name("KFELKJLDKEH").unwrap()).clone()
        }
    }

    impl KFELKJLDKEH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KFELKJLDKEH>("KFELKJLDKEH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11RogueAction.proto\x1a\x11ANMCAIMELCA.proto\x1a\x11BPDDOBAHPNA.prot\
    o\x1a\x11CGGBPJICHGF.proto\x1a\x11EAKECFAPPKD.proto\x1a\x11ELDAFCNMFBF.p\
    roto\x1a\x11FHMAIANENPO.proto\x1a\x11GABBEHOIPJC.proto\x1a\x11IPGKAGFFBH\
    F.proto\x1a\x11JKHKEBMOBEJ.proto\x1a\x11KKAGNMEMKOG.proto\x1a\x11LEFCOMG\
    MPCL.proto\x1a\x11MLKICCAELKE.proto\x1a\x11PIGFBKOJNHG.proto\x1a\x1aRogu\
    eBonusSelectInfo.proto\x1a&RogueCommonBuffReforgeSelectInfo.proto\x1a\
    \x1fRogueCommonBuffSelectInfo.proto\x1a#RogueComposeMiracleSelectInfo.pr\
    oto\x1a\x1cRogueFormulaSelectInfo.proto\x1a\x1eRogueHexAvatarSelectInfo.\
    proto\x1a!RogueMagicScepterSelectInfo.proto\x1a\x1eRogueMagicUnitSelectI\
    nfo.proto\x1a\x1cRogueMiracleSelectInfo.proto\"\xa0\r\n\x0bRogueAction\
    \x12G\n\x10buff_select_info\x18\xee\x0f\x20\x01(\x0b2\x1a.RogueCommonBuf\
    fSelectInfoH\0R\x0ebuffSelectInfo\x121\n\x0bFPHHHIOBFAI\x18\xcf\r\x20\
    \x01(\x0b2\x0c.LEFCOMGMPCLH\0R\x0bFPHHHIOBFAI\x121\n\x0bAJDDFANCEJN\x18\
    \xf0\x06\x20\x01(\x0b2\x0c.IPGKAGFFBHFH\0R\x0bAJDDFANCEJN\x12]\n\x18buff\
    _reforge_select_info\x18\xf8\t\x20\x01(\x0b2!.RogueCommonBuffReforgeSele\
    ctInfoH\0R\x15buffReforgeSelectInfo\x12J\n\x13miracle_select_info\x18\
    \xbb\x02\x20\x01(\x0b2\x17.RogueMiracleSelectInfoH\0R\x11miracleSelectIn\
    fo\x121\n\x0bBICJEMPPLAM\x18\xeb\x05\x20\x01(\x0b2\x0c.ANMCAIMELCAH\0R\
    \x0bBICJEMPPLAM\x121\n\x0bAELPPPIEFAB\x18\xc8\x0f\x20\x01(\x0b2\x0c.GABB\
    EHOIPJCH\0R\x0bAELPPPIEFAB\x121\n\x0bBEDIACHLCII\x18\xa5\x0e\x20\x01(\
    \x0b2\x0c.MLKICCAELKEH\0R\x0bBEDIACHLCII\x121\n\x0bLADGCOOMNKA\x18\xfc\
    \x0f\x20\x01(\x0b2\x0c.EAKECFAPPKDH\0R\x0bLADGCOOMNKA\x121\n\x0bCGKFOMNC\
    NAK\x18\xdd\n\x20\x01(\x0b2\x0c.ELDAFCNMFBFH\0R\x0bCGKFOMNCNAK\x12`\n\
    \x1bcompose_miracle_select_info\x18\xab\t\x20\x01(\x0b2\x1e.RogueCompose\
    MiracleSelectInfoH\0R\x18composeMiracleSelectInfo\x12P\n\x16hex_avatar_s\
    elect_info\x18X\x20\x01(\x0b2\x19.RogueHexAvatarSelectInfoH\0R\x13hexAva\
    tarSelectInfo\x12D\n\x11bonus_select_info\x18\x81\t\x20\x01(\x0b2\x15.Ro\
    gueBonusSelectInfoH\0R\x0fbonusSelectInfo\x12U\n\x19rogue_formula_select\
    _info\x18\xf4\x03\x20\x01(\x0b2\x17.RogueFormulaSelectInfoH\0R\x16rogueF\
    ormulaSelectInfo\x121\n\x0bJBKPIKAJPEB\x18\x8b\x04\x20\x01(\x0b2\x0c.FHM\
    AIANENPOH\0R\x0bJBKPIKAJPEB\x121\n\x0bHCCHFJEFANJ\x18\xaf\x08\x20\x01(\
    \x0b2\x0c.BPDDOBAHPNAH\0R\x0bHCCHFJEFANJ\x12>\n\x0bOIOMHOPNIMF\x18\x81\r\
    \x20\x01(\x0b2\x19.RogueMagicUnitSelectInfoH\0R\x0bOIOMHOPNIMF\x12A\n\
    \x0bIFCLAAFPKHC\x18\xbe\x0b\x20\x01(\x0b2\x1c.RogueMagicScepterSelectInf\
    oH\0R\x0bIFCLAAFPKHC\x121\n\x0bHFJECHFANNF\x18\xc4\x06\x20\x01(\x0b2\x0c\
    .JKHKEBMOBEJH\0R\x0bHFJECHFANNF\x12>\n\x0bLDJOMIOJEPF\x18\xeb\x07\x20\
    \x01(\x0b2\x19.RogueMagicUnitSelectInfoH\0R\x0bLDJOMIOJEPF\x12>\n\x0bLMN\
    ONCMBIOO\x18\xd5\x03\x20\x01(\x0b2\x19.RogueMagicUnitSelectInfoH\0R\x0bL\
    MNONCMBIOO\x12>\n\x0bCNLMCOBNCAI\x18\xc7\x0f\x20\x01(\x0b2\x19.RogueMagi\
    cUnitSelectInfoH\0R\x0bCNLMCOBNCAI\x121\n\x0bFHOKDLLICJL\x18\xe3\n\x20\
    \x01(\x0b2\x0c.KKAGNMEMKOGH\0R\x0bFHOKDLLICJL\x121\n\x0bPHDEMDBGOIB\x18\
    \xd1\x0f\x20\x01(\x0b2\x0c.KKAGNMEMKOGH\0R\x0bPHDEMDBGOIB\x121\n\x0bKLJJ\
    IBPJGFF\x18\x94\x04\x20\x01(\x0b2\x0c.KKAGNMEMKOGH\0R\x0bKLJJIBPJGFF\x12\
    1\n\x0bDLFALFGFDHE\x18\xa8\x02\x20\x01(\x0b2\x0c.PIGFBKOJNHGH\0R\x0bDLFA\
    LFGFDHE\x120\n\x0bNPCDBPNDGOP\x185\x20\x01(\x0b2\x0c.CGGBPJICHGFH\0R\x0b\
    NPCDBPNDGOPB\r\n\x0bKFELKJLDKEHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(22);
            deps.push(super::ANMCAIMELCA::file_descriptor().clone());
            deps.push(super::BPDDOBAHPNA::file_descriptor().clone());
            deps.push(super::CGGBPJICHGF::file_descriptor().clone());
            deps.push(super::EAKECFAPPKD::file_descriptor().clone());
            deps.push(super::ELDAFCNMFBF::file_descriptor().clone());
            deps.push(super::FHMAIANENPO::file_descriptor().clone());
            deps.push(super::GABBEHOIPJC::file_descriptor().clone());
            deps.push(super::IPGKAGFFBHF::file_descriptor().clone());
            deps.push(super::JKHKEBMOBEJ::file_descriptor().clone());
            deps.push(super::KKAGNMEMKOG::file_descriptor().clone());
            deps.push(super::LEFCOMGMPCL::file_descriptor().clone());
            deps.push(super::MLKICCAELKE::file_descriptor().clone());
            deps.push(super::PIGFBKOJNHG::file_descriptor().clone());
            deps.push(super::RogueBonusSelectInfo::file_descriptor().clone());
            deps.push(super::RogueCommonBuffReforgeSelectInfo::file_descriptor().clone());
            deps.push(super::RogueCommonBuffSelectInfo::file_descriptor().clone());
            deps.push(super::RogueComposeMiracleSelectInfo::file_descriptor().clone());
            deps.push(super::RogueFormulaSelectInfo::file_descriptor().clone());
            deps.push(super::RogueHexAvatarSelectInfo::file_descriptor().clone());
            deps.push(super::RogueMagicScepterSelectInfo::file_descriptor().clone());
            deps.push(super::RogueMagicUnitSelectInfo::file_descriptor().clone());
            deps.push(super::RogueMiracleSelectInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueAction::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
