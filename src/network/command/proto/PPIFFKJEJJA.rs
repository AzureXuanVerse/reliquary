// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PPIFFKJEJJA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:PPIFFKJEJJA)
pub enum PPIFFKJEJJA {
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_None)
    Marble_Game_Phase_None = 0,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_Ready)
    Marble_Game_Phase_Ready = 1,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_Delay)
    Marble_Game_Phase_Delay = 2,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_Loading)
    Marble_Game_Phase_Loading = 3,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_LoadFinish)
    Marble_Game_Phase_LoadFinish = 4,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_Performance)
    Marble_Game_Phase_Performance = 5,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_PerformanceFinish)
    Marble_Game_Phase_PerformanceFinish = 6,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_RoundA)
    Marble_Game_Phase_RoundA = 7,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_RoundB)
    Marble_Game_Phase_RoundB = 8,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_Simulate)
    Marble_Game_Phase_Simulate = 9,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_SimulateFinish)
    Marble_Game_Phase_SimulateFinish = 10,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_Tech)
    Marble_Game_Phase_Tech = 11,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_TechUI)
    Marble_Game_Phase_TechUI = 12,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_TechFinish)
    Marble_Game_Phase_TechFinish = 13,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_Finish)
    Marble_Game_Phase_Finish = 14,
    // @@protoc_insertion_point(enum_value:PPIFFKJEJJA.Marble_Game_Phase_PreRound)
    Marble_Game_Phase_PreRound = 15,
}

impl ::protobuf::Enum for PPIFFKJEJJA {
    const NAME: &'static str = "PPIFFKJEJJA";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PPIFFKJEJJA> {
        match value {
            0 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_None),
            1 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Ready),
            2 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Delay),
            3 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Loading),
            4 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_LoadFinish),
            5 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Performance),
            6 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_PerformanceFinish),
            7 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_RoundA),
            8 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_RoundB),
            9 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Simulate),
            10 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_SimulateFinish),
            11 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Tech),
            12 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_TechUI),
            13 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_TechFinish),
            14 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Finish),
            15 => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_PreRound),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<PPIFFKJEJJA> {
        match str {
            "Marble_Game_Phase_None" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_None),
            "Marble_Game_Phase_Ready" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Ready),
            "Marble_Game_Phase_Delay" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Delay),
            "Marble_Game_Phase_Loading" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Loading),
            "Marble_Game_Phase_LoadFinish" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_LoadFinish),
            "Marble_Game_Phase_Performance" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Performance),
            "Marble_Game_Phase_PerformanceFinish" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_PerformanceFinish),
            "Marble_Game_Phase_RoundA" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_RoundA),
            "Marble_Game_Phase_RoundB" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_RoundB),
            "Marble_Game_Phase_Simulate" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Simulate),
            "Marble_Game_Phase_SimulateFinish" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_SimulateFinish),
            "Marble_Game_Phase_Tech" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Tech),
            "Marble_Game_Phase_TechUI" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_TechUI),
            "Marble_Game_Phase_TechFinish" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_TechFinish),
            "Marble_Game_Phase_Finish" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_Finish),
            "Marble_Game_Phase_PreRound" => ::std::option::Option::Some(PPIFFKJEJJA::Marble_Game_Phase_PreRound),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [PPIFFKJEJJA] = &[
        PPIFFKJEJJA::Marble_Game_Phase_None,
        PPIFFKJEJJA::Marble_Game_Phase_Ready,
        PPIFFKJEJJA::Marble_Game_Phase_Delay,
        PPIFFKJEJJA::Marble_Game_Phase_Loading,
        PPIFFKJEJJA::Marble_Game_Phase_LoadFinish,
        PPIFFKJEJJA::Marble_Game_Phase_Performance,
        PPIFFKJEJJA::Marble_Game_Phase_PerformanceFinish,
        PPIFFKJEJJA::Marble_Game_Phase_RoundA,
        PPIFFKJEJJA::Marble_Game_Phase_RoundB,
        PPIFFKJEJJA::Marble_Game_Phase_Simulate,
        PPIFFKJEJJA::Marble_Game_Phase_SimulateFinish,
        PPIFFKJEJJA::Marble_Game_Phase_Tech,
        PPIFFKJEJJA::Marble_Game_Phase_TechUI,
        PPIFFKJEJJA::Marble_Game_Phase_TechFinish,
        PPIFFKJEJJA::Marble_Game_Phase_Finish,
        PPIFFKJEJJA::Marble_Game_Phase_PreRound,
    ];
}

impl ::protobuf::EnumFull for PPIFFKJEJJA {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("PPIFFKJEJJA").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for PPIFFKJEJJA {
    fn default() -> Self {
        PPIFFKJEJJA::Marble_Game_Phase_None
    }
}

impl PPIFFKJEJJA {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PPIFFKJEJJA>("PPIFFKJEJJA")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11PPIFFKJEJJA.proto*\x8c\x04\n\x0bPPIFFKJEJJA\x12\x1a\n\x16Marble_Ga\
    me_Phase_None\x10\0\x12\x1b\n\x17Marble_Game_Phase_Ready\x10\x01\x12\x1b\
    \n\x17Marble_Game_Phase_Delay\x10\x02\x12\x1d\n\x19Marble_Game_Phase_Loa\
    ding\x10\x03\x12\x20\n\x1cMarble_Game_Phase_LoadFinish\x10\x04\x12!\n\
    \x1dMarble_Game_Phase_Performance\x10\x05\x12'\n#Marble_Game_Phase_Perfo\
    rmanceFinish\x10\x06\x12\x1c\n\x18Marble_Game_Phase_RoundA\x10\x07\x12\
    \x1c\n\x18Marble_Game_Phase_RoundB\x10\x08\x12\x1e\n\x1aMarble_Game_Phas\
    e_Simulate\x10\t\x12$\n\x20Marble_Game_Phase_SimulateFinish\x10\n\x12\
    \x1a\n\x16Marble_Game_Phase_Tech\x10\x0b\x12\x1c\n\x18Marble_Game_Phase_\
    TechUI\x10\x0c\x12\x20\n\x1cMarble_Game_Phase_TechFinish\x10\r\x12\x1c\n\
    \x18Marble_Game_Phase_Finish\x10\x0e\x12\x1e\n\x1aMarble_Game_Phase_PreR\
    ound\x10\x0fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(PPIFFKJEJJA::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
