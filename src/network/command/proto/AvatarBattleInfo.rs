// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AvatarBattleInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:AvatarBattleInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AvatarBattleInfo {
    // message fields
    // @@protoc_insertion_point(field:AvatarBattleInfo.avatar_type)
    pub avatar_type: ::protobuf::EnumOrUnknown<super::AvatarType::AvatarType>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.id)
    pub id: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.avatar_level)
    pub avatar_level: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.avatar_rank)
    pub avatar_rank: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.avatar_promotion)
    pub avatar_promotion: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.avatar_status)
    pub avatar_status: ::protobuf::MessageField<super::AvatarProperty::AvatarProperty>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.avatar_skill)
    pub avatar_skill: ::std::vec::Vec<super::AvatarSkillTree::AvatarSkillTree>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.avatar_equipment)
    pub avatar_equipment: ::std::vec::Vec<super::EquipmentProperty::EquipmentProperty>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_turns)
    pub total_turns: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_damage)
    pub total_damage: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_heal)
    pub total_heal: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_damage_taken)
    pub total_damage_taken: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_hp_recover)
    pub total_hp_recover: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_sp_cost)
    pub total_sp_cost: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.stage_id)
    pub stage_id: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.stage_type)
    pub stage_type: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_break_damage)
    pub total_break_damage: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.attack_type_damage)
    pub attack_type_damage: ::std::vec::Vec<super::AttackDamageProperty::AttackDamageProperty>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.attack_type_break_damage)
    pub attack_type_break_damage: ::std::vec::Vec<super::AttackDamageProperty::AttackDamageProperty>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.attack_type_max_damage)
    pub attack_type_max_damage: ::std::vec::Vec<super::AttackDamageProperty::AttackDamageProperty>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.skill_times)
    pub skill_times: ::std::vec::Vec<super::SkillUseProperty::SkillUseProperty>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.delay_cumulate)
    pub delay_cumulate: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_sp_add)
    pub total_sp_add: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.sp_add_source)
    pub sp_add_source: ::std::vec::Vec<super::SpAddSource::SpAddSource>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_bp_cost)
    pub total_bp_cost: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.die_times)
    pub die_times: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.revive_times)
    pub revive_times: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.break_times)
    pub break_times: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.extra_turns)
    pub extra_turns: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_shield)
    pub total_shield: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_shield_taken)
    pub total_shield_taken: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.total_shield_damage)
    pub total_shield_damage: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.initial_status)
    pub initial_status: ::protobuf::MessageField<super::AvatarProperty::AvatarProperty>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.relics)
    pub relics: ::std::vec::Vec<super::BattleRelic::BattleRelic>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.assist_uid)
    pub assist_uid: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.AADGFLPBPDF)
    pub AADGFLPBPDF: ::std::vec::Vec<super::AttackDamageProperty::AttackDamageProperty>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.FPFBMIMBBHJ)
    pub FPFBMIMBBHJ: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.GGPJOHNOCPC)
    pub GGPJOHNOCPC: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.LACKCJHHIMK)
    pub LACKCJHHIMK: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.FMODLGOBNPE)
    pub FMODLGOBNPE: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.LHKABNICKJN)
    pub LHKABNICKJN: ::std::vec::Vec<super::AbilityUseStt::AbilityUseStt>,
    // @@protoc_insertion_point(field:AvatarBattleInfo.NCJHDJJDJNL)
    pub NCJHDJJDJNL: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.LKMGDIADOPB)
    pub LKMGDIADOPB: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.IBLGMCIPCKM)
    pub IBLGMCIPCKM: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.HACJDJIGMGP)
    pub HACJDJIGMGP: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.IMDJAHAJGCF)
    pub IMDJAHAJGCF: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.JDOLKDBICLJ)
    pub JDOLKDBICLJ: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.CACCODDCJHI)
    pub CACCODDCJHI: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.LLDMLOHBFLO)
    pub LLDMLOHBFLO: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.CHNIKKCIBEG)
    pub CHNIKKCIBEG: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.LBNJHHHLPMO)
    pub LBNJHHHLPMO: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.PDLILFICHIL)
    pub PDLILFICHIL: f64,
    // @@protoc_insertion_point(field:AvatarBattleInfo.PMKLPHJIOHC)
    pub PMKLPHJIOHC: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.MPFAENEKFDC)
    pub MPFAENEKFDC: u32,
    // @@protoc_insertion_point(field:AvatarBattleInfo.GLACKHOPMIO)
    pub GLACKHOPMIO: u32,
    // special fields
    // @@protoc_insertion_point(special_field:AvatarBattleInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AvatarBattleInfo {
    fn default() -> &'a AvatarBattleInfo {
        <AvatarBattleInfo as ::protobuf::Message>::default_instance()
    }
}

impl AvatarBattleInfo {
    pub fn new() -> AvatarBattleInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(55);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_type",
            |m: &AvatarBattleInfo| { &m.avatar_type },
            |m: &mut AvatarBattleInfo| { &mut m.avatar_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &AvatarBattleInfo| { &m.id },
            |m: &mut AvatarBattleInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_level",
            |m: &AvatarBattleInfo| { &m.avatar_level },
            |m: &mut AvatarBattleInfo| { &mut m.avatar_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_rank",
            |m: &AvatarBattleInfo| { &m.avatar_rank },
            |m: &mut AvatarBattleInfo| { &mut m.avatar_rank },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_promotion",
            |m: &AvatarBattleInfo| { &m.avatar_promotion },
            |m: &mut AvatarBattleInfo| { &mut m.avatar_promotion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AvatarProperty::AvatarProperty>(
            "avatar_status",
            |m: &AvatarBattleInfo| { &m.avatar_status },
            |m: &mut AvatarBattleInfo| { &mut m.avatar_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_skill",
            |m: &AvatarBattleInfo| { &m.avatar_skill },
            |m: &mut AvatarBattleInfo| { &mut m.avatar_skill },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_equipment",
            |m: &AvatarBattleInfo| { &m.avatar_equipment },
            |m: &mut AvatarBattleInfo| { &mut m.avatar_equipment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_turns",
            |m: &AvatarBattleInfo| { &m.total_turns },
            |m: &mut AvatarBattleInfo| { &mut m.total_turns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_damage",
            |m: &AvatarBattleInfo| { &m.total_damage },
            |m: &mut AvatarBattleInfo| { &mut m.total_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_heal",
            |m: &AvatarBattleInfo| { &m.total_heal },
            |m: &mut AvatarBattleInfo| { &mut m.total_heal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_damage_taken",
            |m: &AvatarBattleInfo| { &m.total_damage_taken },
            |m: &mut AvatarBattleInfo| { &mut m.total_damage_taken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_hp_recover",
            |m: &AvatarBattleInfo| { &m.total_hp_recover },
            |m: &mut AvatarBattleInfo| { &mut m.total_hp_recover },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_sp_cost",
            |m: &AvatarBattleInfo| { &m.total_sp_cost },
            |m: &mut AvatarBattleInfo| { &mut m.total_sp_cost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stage_id",
            |m: &AvatarBattleInfo| { &m.stage_id },
            |m: &mut AvatarBattleInfo| { &mut m.stage_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stage_type",
            |m: &AvatarBattleInfo| { &m.stage_type },
            |m: &mut AvatarBattleInfo| { &mut m.stage_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_break_damage",
            |m: &AvatarBattleInfo| { &m.total_break_damage },
            |m: &mut AvatarBattleInfo| { &mut m.total_break_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attack_type_damage",
            |m: &AvatarBattleInfo| { &m.attack_type_damage },
            |m: &mut AvatarBattleInfo| { &mut m.attack_type_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attack_type_break_damage",
            |m: &AvatarBattleInfo| { &m.attack_type_break_damage },
            |m: &mut AvatarBattleInfo| { &mut m.attack_type_break_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attack_type_max_damage",
            |m: &AvatarBattleInfo| { &m.attack_type_max_damage },
            |m: &mut AvatarBattleInfo| { &mut m.attack_type_max_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "skill_times",
            |m: &AvatarBattleInfo| { &m.skill_times },
            |m: &mut AvatarBattleInfo| { &mut m.skill_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delay_cumulate",
            |m: &AvatarBattleInfo| { &m.delay_cumulate },
            |m: &mut AvatarBattleInfo| { &mut m.delay_cumulate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_sp_add",
            |m: &AvatarBattleInfo| { &m.total_sp_add },
            |m: &mut AvatarBattleInfo| { &mut m.total_sp_add },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sp_add_source",
            |m: &AvatarBattleInfo| { &m.sp_add_source },
            |m: &mut AvatarBattleInfo| { &mut m.sp_add_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_bp_cost",
            |m: &AvatarBattleInfo| { &m.total_bp_cost },
            |m: &mut AvatarBattleInfo| { &mut m.total_bp_cost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "die_times",
            |m: &AvatarBattleInfo| { &m.die_times },
            |m: &mut AvatarBattleInfo| { &mut m.die_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "revive_times",
            |m: &AvatarBattleInfo| { &m.revive_times },
            |m: &mut AvatarBattleInfo| { &mut m.revive_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "break_times",
            |m: &AvatarBattleInfo| { &m.break_times },
            |m: &mut AvatarBattleInfo| { &mut m.break_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extra_turns",
            |m: &AvatarBattleInfo| { &m.extra_turns },
            |m: &mut AvatarBattleInfo| { &mut m.extra_turns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_shield",
            |m: &AvatarBattleInfo| { &m.total_shield },
            |m: &mut AvatarBattleInfo| { &mut m.total_shield },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_shield_taken",
            |m: &AvatarBattleInfo| { &m.total_shield_taken },
            |m: &mut AvatarBattleInfo| { &mut m.total_shield_taken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_shield_damage",
            |m: &AvatarBattleInfo| { &m.total_shield_damage },
            |m: &mut AvatarBattleInfo| { &mut m.total_shield_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AvatarProperty::AvatarProperty>(
            "initial_status",
            |m: &AvatarBattleInfo| { &m.initial_status },
            |m: &mut AvatarBattleInfo| { &mut m.initial_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "relics",
            |m: &AvatarBattleInfo| { &m.relics },
            |m: &mut AvatarBattleInfo| { &mut m.relics },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "assist_uid",
            |m: &AvatarBattleInfo| { &m.assist_uid },
            |m: &mut AvatarBattleInfo| { &mut m.assist_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AADGFLPBPDF",
            |m: &AvatarBattleInfo| { &m.AADGFLPBPDF },
            |m: &mut AvatarBattleInfo| { &mut m.AADGFLPBPDF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FPFBMIMBBHJ",
            |m: &AvatarBattleInfo| { &m.FPFBMIMBBHJ },
            |m: &mut AvatarBattleInfo| { &mut m.FPFBMIMBBHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GGPJOHNOCPC",
            |m: &AvatarBattleInfo| { &m.GGPJOHNOCPC },
            |m: &mut AvatarBattleInfo| { &mut m.GGPJOHNOCPC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LACKCJHHIMK",
            |m: &AvatarBattleInfo| { &m.LACKCJHHIMK },
            |m: &mut AvatarBattleInfo| { &mut m.LACKCJHHIMK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMODLGOBNPE",
            |m: &AvatarBattleInfo| { &m.FMODLGOBNPE },
            |m: &mut AvatarBattleInfo| { &mut m.FMODLGOBNPE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LHKABNICKJN",
            |m: &AvatarBattleInfo| { &m.LHKABNICKJN },
            |m: &mut AvatarBattleInfo| { &mut m.LHKABNICKJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NCJHDJJDJNL",
            |m: &AvatarBattleInfo| { &m.NCJHDJJDJNL },
            |m: &mut AvatarBattleInfo| { &mut m.NCJHDJJDJNL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LKMGDIADOPB",
            |m: &AvatarBattleInfo| { &m.LKMGDIADOPB },
            |m: &mut AvatarBattleInfo| { &mut m.LKMGDIADOPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IBLGMCIPCKM",
            |m: &AvatarBattleInfo| { &m.IBLGMCIPCKM },
            |m: &mut AvatarBattleInfo| { &mut m.IBLGMCIPCKM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HACJDJIGMGP",
            |m: &AvatarBattleInfo| { &m.HACJDJIGMGP },
            |m: &mut AvatarBattleInfo| { &mut m.HACJDJIGMGP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IMDJAHAJGCF",
            |m: &AvatarBattleInfo| { &m.IMDJAHAJGCF },
            |m: &mut AvatarBattleInfo| { &mut m.IMDJAHAJGCF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JDOLKDBICLJ",
            |m: &AvatarBattleInfo| { &m.JDOLKDBICLJ },
            |m: &mut AvatarBattleInfo| { &mut m.JDOLKDBICLJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CACCODDCJHI",
            |m: &AvatarBattleInfo| { &m.CACCODDCJHI },
            |m: &mut AvatarBattleInfo| { &mut m.CACCODDCJHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LLDMLOHBFLO",
            |m: &AvatarBattleInfo| { &m.LLDMLOHBFLO },
            |m: &mut AvatarBattleInfo| { &mut m.LLDMLOHBFLO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CHNIKKCIBEG",
            |m: &AvatarBattleInfo| { &m.CHNIKKCIBEG },
            |m: &mut AvatarBattleInfo| { &mut m.CHNIKKCIBEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LBNJHHHLPMO",
            |m: &AvatarBattleInfo| { &m.LBNJHHHLPMO },
            |m: &mut AvatarBattleInfo| { &mut m.LBNJHHHLPMO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PDLILFICHIL",
            |m: &AvatarBattleInfo| { &m.PDLILFICHIL },
            |m: &mut AvatarBattleInfo| { &mut m.PDLILFICHIL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PMKLPHJIOHC",
            |m: &AvatarBattleInfo| { &m.PMKLPHJIOHC },
            |m: &mut AvatarBattleInfo| { &mut m.PMKLPHJIOHC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPFAENEKFDC",
            |m: &AvatarBattleInfo| { &m.MPFAENEKFDC },
            |m: &mut AvatarBattleInfo| { &mut m.MPFAENEKFDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GLACKHOPMIO",
            |m: &AvatarBattleInfo| { &m.GLACKHOPMIO },
            |m: &mut AvatarBattleInfo| { &mut m.GLACKHOPMIO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AvatarBattleInfo>(
            "AvatarBattleInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AvatarBattleInfo {
    const NAME: &'static str = "AvatarBattleInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.avatar_type = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.id = is.read_uint32()?;
                },
                24 => {
                    self.avatar_level = is.read_uint32()?;
                },
                32 => {
                    self.avatar_rank = is.read_uint32()?;
                },
                40 => {
                    self.avatar_promotion = is.read_uint32()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.avatar_status)?;
                },
                58 => {
                    self.avatar_skill.push(is.read_message()?);
                },
                66 => {
                    self.avatar_equipment.push(is.read_message()?);
                },
                72 => {
                    self.total_turns = is.read_uint32()?;
                },
                81 => {
                    self.total_damage = is.read_double()?;
                },
                89 => {
                    self.total_heal = is.read_double()?;
                },
                97 => {
                    self.total_damage_taken = is.read_double()?;
                },
                105 => {
                    self.total_hp_recover = is.read_double()?;
                },
                113 => {
                    self.total_sp_cost = is.read_double()?;
                },
                120 => {
                    self.stage_id = is.read_uint32()?;
                },
                128 => {
                    self.stage_type = is.read_uint32()?;
                },
                137 => {
                    self.total_break_damage = is.read_double()?;
                },
                146 => {
                    self.attack_type_damage.push(is.read_message()?);
                },
                154 => {
                    self.attack_type_break_damage.push(is.read_message()?);
                },
                162 => {
                    self.attack_type_max_damage.push(is.read_message()?);
                },
                170 => {
                    self.skill_times.push(is.read_message()?);
                },
                177 => {
                    self.delay_cumulate = is.read_double()?;
                },
                184 => {
                    self.total_sp_add = is.read_uint32()?;
                },
                194 => {
                    self.sp_add_source.push(is.read_message()?);
                },
                200 => {
                    self.total_bp_cost = is.read_uint32()?;
                },
                208 => {
                    self.die_times = is.read_uint32()?;
                },
                216 => {
                    self.revive_times = is.read_uint32()?;
                },
                224 => {
                    self.break_times = is.read_uint32()?;
                },
                232 => {
                    self.extra_turns = is.read_uint32()?;
                },
                241 => {
                    self.total_shield = is.read_double()?;
                },
                249 => {
                    self.total_shield_taken = is.read_double()?;
                },
                257 => {
                    self.total_shield_damage = is.read_double()?;
                },
                266 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.initial_status)?;
                },
                274 => {
                    self.relics.push(is.read_message()?);
                },
                280 => {
                    self.assist_uid = is.read_uint32()?;
                },
                290 => {
                    self.AADGFLPBPDF.push(is.read_message()?);
                },
                297 => {
                    self.FPFBMIMBBHJ = is.read_double()?;
                },
                305 => {
                    self.GGPJOHNOCPC = is.read_double()?;
                },
                313 => {
                    self.LACKCJHHIMK = is.read_double()?;
                },
                321 => {
                    self.FMODLGOBNPE = is.read_double()?;
                },
                330 => {
                    self.LHKABNICKJN.push(is.read_message()?);
                },
                336 => {
                    self.NCJHDJJDJNL = is.read_uint32()?;
                },
                344 => {
                    self.LKMGDIADOPB = is.read_uint32()?;
                },
                353 => {
                    self.IBLGMCIPCKM = is.read_double()?;
                },
                361 => {
                    self.HACJDJIGMGP = is.read_double()?;
                },
                369 => {
                    self.IMDJAHAJGCF = is.read_double()?;
                },
                377 => {
                    self.JDOLKDBICLJ = is.read_double()?;
                },
                385 => {
                    self.CACCODDCJHI = is.read_double()?;
                },
                392 => {
                    self.LLDMLOHBFLO = is.read_uint32()?;
                },
                400 => {
                    self.CHNIKKCIBEG = is.read_uint32()?;
                },
                408 => {
                    self.LBNJHHHLPMO = is.read_uint32()?;
                },
                417 => {
                    self.PDLILFICHIL = is.read_double()?;
                },
                424 => {
                    self.PMKLPHJIOHC = is.read_uint32()?;
                },
                432 => {
                    self.MPFAENEKFDC = is.read_uint32()?;
                },
                440 => {
                    self.GLACKHOPMIO = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.avatar_type != ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(1, self.avatar_type.value());
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.id);
        }
        if self.avatar_level != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.avatar_level);
        }
        if self.avatar_rank != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.avatar_rank);
        }
        if self.avatar_promotion != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.avatar_promotion);
        }
        if let Some(v) = self.avatar_status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.avatar_skill {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.avatar_equipment {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.total_turns != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.total_turns);
        }
        if self.total_damage != 0. {
            my_size += 1 + 8;
        }
        if self.total_heal != 0. {
            my_size += 1 + 8;
        }
        if self.total_damage_taken != 0. {
            my_size += 1 + 8;
        }
        if self.total_hp_recover != 0. {
            my_size += 1 + 8;
        }
        if self.total_sp_cost != 0. {
            my_size += 1 + 8;
        }
        if self.stage_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.stage_id);
        }
        if self.stage_type != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.stage_type);
        }
        if self.total_break_damage != 0. {
            my_size += 2 + 8;
        }
        for value in &self.attack_type_damage {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.attack_type_break_damage {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.attack_type_max_damage {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.skill_times {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.delay_cumulate != 0. {
            my_size += 2 + 8;
        }
        if self.total_sp_add != 0 {
            my_size += ::protobuf::rt::uint32_size(23, self.total_sp_add);
        }
        for value in &self.sp_add_source {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.total_bp_cost != 0 {
            my_size += ::protobuf::rt::uint32_size(25, self.total_bp_cost);
        }
        if self.die_times != 0 {
            my_size += ::protobuf::rt::uint32_size(26, self.die_times);
        }
        if self.revive_times != 0 {
            my_size += ::protobuf::rt::uint32_size(27, self.revive_times);
        }
        if self.break_times != 0 {
            my_size += ::protobuf::rt::uint32_size(28, self.break_times);
        }
        if self.extra_turns != 0 {
            my_size += ::protobuf::rt::uint32_size(29, self.extra_turns);
        }
        if self.total_shield != 0. {
            my_size += 2 + 8;
        }
        if self.total_shield_taken != 0. {
            my_size += 2 + 8;
        }
        if self.total_shield_damage != 0. {
            my_size += 2 + 8;
        }
        if let Some(v) = self.initial_status.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.relics {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.assist_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(35, self.assist_uid);
        }
        for value in &self.AADGFLPBPDF {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.FPFBMIMBBHJ != 0. {
            my_size += 2 + 8;
        }
        if self.GGPJOHNOCPC != 0. {
            my_size += 2 + 8;
        }
        if self.LACKCJHHIMK != 0. {
            my_size += 2 + 8;
        }
        if self.FMODLGOBNPE != 0. {
            my_size += 2 + 8;
        }
        for value in &self.LHKABNICKJN {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.NCJHDJJDJNL != 0 {
            my_size += ::protobuf::rt::uint32_size(42, self.NCJHDJJDJNL);
        }
        if self.LKMGDIADOPB != 0 {
            my_size += ::protobuf::rt::uint32_size(43, self.LKMGDIADOPB);
        }
        if self.IBLGMCIPCKM != 0. {
            my_size += 2 + 8;
        }
        if self.HACJDJIGMGP != 0. {
            my_size += 2 + 8;
        }
        if self.IMDJAHAJGCF != 0. {
            my_size += 2 + 8;
        }
        if self.JDOLKDBICLJ != 0. {
            my_size += 2 + 8;
        }
        if self.CACCODDCJHI != 0. {
            my_size += 2 + 8;
        }
        if self.LLDMLOHBFLO != 0 {
            my_size += ::protobuf::rt::uint32_size(49, self.LLDMLOHBFLO);
        }
        if self.CHNIKKCIBEG != 0 {
            my_size += ::protobuf::rt::uint32_size(50, self.CHNIKKCIBEG);
        }
        if self.LBNJHHHLPMO != 0 {
            my_size += ::protobuf::rt::uint32_size(51, self.LBNJHHHLPMO);
        }
        if self.PDLILFICHIL != 0. {
            my_size += 2 + 8;
        }
        if self.PMKLPHJIOHC != 0 {
            my_size += ::protobuf::rt::uint32_size(53, self.PMKLPHJIOHC);
        }
        if self.MPFAENEKFDC != 0 {
            my_size += ::protobuf::rt::uint32_size(54, self.MPFAENEKFDC);
        }
        if self.GLACKHOPMIO != 0 {
            my_size += ::protobuf::rt::uint32_size(55, self.GLACKHOPMIO);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.avatar_type != ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.avatar_type))?;
        }
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        if self.avatar_level != 0 {
            os.write_uint32(3, self.avatar_level)?;
        }
        if self.avatar_rank != 0 {
            os.write_uint32(4, self.avatar_rank)?;
        }
        if self.avatar_promotion != 0 {
            os.write_uint32(5, self.avatar_promotion)?;
        }
        if let Some(v) = self.avatar_status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.avatar_skill {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.avatar_equipment {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.total_turns != 0 {
            os.write_uint32(9, self.total_turns)?;
        }
        if self.total_damage != 0. {
            os.write_double(10, self.total_damage)?;
        }
        if self.total_heal != 0. {
            os.write_double(11, self.total_heal)?;
        }
        if self.total_damage_taken != 0. {
            os.write_double(12, self.total_damage_taken)?;
        }
        if self.total_hp_recover != 0. {
            os.write_double(13, self.total_hp_recover)?;
        }
        if self.total_sp_cost != 0. {
            os.write_double(14, self.total_sp_cost)?;
        }
        if self.stage_id != 0 {
            os.write_uint32(15, self.stage_id)?;
        }
        if self.stage_type != 0 {
            os.write_uint32(16, self.stage_type)?;
        }
        if self.total_break_damage != 0. {
            os.write_double(17, self.total_break_damage)?;
        }
        for v in &self.attack_type_damage {
            ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
        };
        for v in &self.attack_type_break_damage {
            ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
        };
        for v in &self.attack_type_max_damage {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        };
        for v in &self.skill_times {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        if self.delay_cumulate != 0. {
            os.write_double(22, self.delay_cumulate)?;
        }
        if self.total_sp_add != 0 {
            os.write_uint32(23, self.total_sp_add)?;
        }
        for v in &self.sp_add_source {
            ::protobuf::rt::write_message_field_with_cached_size(24, v, os)?;
        };
        if self.total_bp_cost != 0 {
            os.write_uint32(25, self.total_bp_cost)?;
        }
        if self.die_times != 0 {
            os.write_uint32(26, self.die_times)?;
        }
        if self.revive_times != 0 {
            os.write_uint32(27, self.revive_times)?;
        }
        if self.break_times != 0 {
            os.write_uint32(28, self.break_times)?;
        }
        if self.extra_turns != 0 {
            os.write_uint32(29, self.extra_turns)?;
        }
        if self.total_shield != 0. {
            os.write_double(30, self.total_shield)?;
        }
        if self.total_shield_taken != 0. {
            os.write_double(31, self.total_shield_taken)?;
        }
        if self.total_shield_damage != 0. {
            os.write_double(32, self.total_shield_damage)?;
        }
        if let Some(v) = self.initial_status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(33, v, os)?;
        }
        for v in &self.relics {
            ::protobuf::rt::write_message_field_with_cached_size(34, v, os)?;
        };
        if self.assist_uid != 0 {
            os.write_uint32(35, self.assist_uid)?;
        }
        for v in &self.AADGFLPBPDF {
            ::protobuf::rt::write_message_field_with_cached_size(36, v, os)?;
        };
        if self.FPFBMIMBBHJ != 0. {
            os.write_double(37, self.FPFBMIMBBHJ)?;
        }
        if self.GGPJOHNOCPC != 0. {
            os.write_double(38, self.GGPJOHNOCPC)?;
        }
        if self.LACKCJHHIMK != 0. {
            os.write_double(39, self.LACKCJHHIMK)?;
        }
        if self.FMODLGOBNPE != 0. {
            os.write_double(40, self.FMODLGOBNPE)?;
        }
        for v in &self.LHKABNICKJN {
            ::protobuf::rt::write_message_field_with_cached_size(41, v, os)?;
        };
        if self.NCJHDJJDJNL != 0 {
            os.write_uint32(42, self.NCJHDJJDJNL)?;
        }
        if self.LKMGDIADOPB != 0 {
            os.write_uint32(43, self.LKMGDIADOPB)?;
        }
        if self.IBLGMCIPCKM != 0. {
            os.write_double(44, self.IBLGMCIPCKM)?;
        }
        if self.HACJDJIGMGP != 0. {
            os.write_double(45, self.HACJDJIGMGP)?;
        }
        if self.IMDJAHAJGCF != 0. {
            os.write_double(46, self.IMDJAHAJGCF)?;
        }
        if self.JDOLKDBICLJ != 0. {
            os.write_double(47, self.JDOLKDBICLJ)?;
        }
        if self.CACCODDCJHI != 0. {
            os.write_double(48, self.CACCODDCJHI)?;
        }
        if self.LLDMLOHBFLO != 0 {
            os.write_uint32(49, self.LLDMLOHBFLO)?;
        }
        if self.CHNIKKCIBEG != 0 {
            os.write_uint32(50, self.CHNIKKCIBEG)?;
        }
        if self.LBNJHHHLPMO != 0 {
            os.write_uint32(51, self.LBNJHHHLPMO)?;
        }
        if self.PDLILFICHIL != 0. {
            os.write_double(52, self.PDLILFICHIL)?;
        }
        if self.PMKLPHJIOHC != 0 {
            os.write_uint32(53, self.PMKLPHJIOHC)?;
        }
        if self.MPFAENEKFDC != 0 {
            os.write_uint32(54, self.MPFAENEKFDC)?;
        }
        if self.GLACKHOPMIO != 0 {
            os.write_uint32(55, self.GLACKHOPMIO)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AvatarBattleInfo {
        AvatarBattleInfo::new()
    }

    fn clear(&mut self) {
        self.avatar_type = ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE);
        self.id = 0;
        self.avatar_level = 0;
        self.avatar_rank = 0;
        self.avatar_promotion = 0;
        self.avatar_status.clear();
        self.avatar_skill.clear();
        self.avatar_equipment.clear();
        self.total_turns = 0;
        self.total_damage = 0.;
        self.total_heal = 0.;
        self.total_damage_taken = 0.;
        self.total_hp_recover = 0.;
        self.total_sp_cost = 0.;
        self.stage_id = 0;
        self.stage_type = 0;
        self.total_break_damage = 0.;
        self.attack_type_damage.clear();
        self.attack_type_break_damage.clear();
        self.attack_type_max_damage.clear();
        self.skill_times.clear();
        self.delay_cumulate = 0.;
        self.total_sp_add = 0;
        self.sp_add_source.clear();
        self.total_bp_cost = 0;
        self.die_times = 0;
        self.revive_times = 0;
        self.break_times = 0;
        self.extra_turns = 0;
        self.total_shield = 0.;
        self.total_shield_taken = 0.;
        self.total_shield_damage = 0.;
        self.initial_status.clear();
        self.relics.clear();
        self.assist_uid = 0;
        self.AADGFLPBPDF.clear();
        self.FPFBMIMBBHJ = 0.;
        self.GGPJOHNOCPC = 0.;
        self.LACKCJHHIMK = 0.;
        self.FMODLGOBNPE = 0.;
        self.LHKABNICKJN.clear();
        self.NCJHDJJDJNL = 0;
        self.LKMGDIADOPB = 0;
        self.IBLGMCIPCKM = 0.;
        self.HACJDJIGMGP = 0.;
        self.IMDJAHAJGCF = 0.;
        self.JDOLKDBICLJ = 0.;
        self.CACCODDCJHI = 0.;
        self.LLDMLOHBFLO = 0;
        self.CHNIKKCIBEG = 0;
        self.LBNJHHHLPMO = 0;
        self.PDLILFICHIL = 0.;
        self.PMKLPHJIOHC = 0;
        self.MPFAENEKFDC = 0;
        self.GLACKHOPMIO = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AvatarBattleInfo {
        static instance: AvatarBattleInfo = AvatarBattleInfo {
            avatar_type: ::protobuf::EnumOrUnknown::from_i32(0),
            id: 0,
            avatar_level: 0,
            avatar_rank: 0,
            avatar_promotion: 0,
            avatar_status: ::protobuf::MessageField::none(),
            avatar_skill: ::std::vec::Vec::new(),
            avatar_equipment: ::std::vec::Vec::new(),
            total_turns: 0,
            total_damage: 0.,
            total_heal: 0.,
            total_damage_taken: 0.,
            total_hp_recover: 0.,
            total_sp_cost: 0.,
            stage_id: 0,
            stage_type: 0,
            total_break_damage: 0.,
            attack_type_damage: ::std::vec::Vec::new(),
            attack_type_break_damage: ::std::vec::Vec::new(),
            attack_type_max_damage: ::std::vec::Vec::new(),
            skill_times: ::std::vec::Vec::new(),
            delay_cumulate: 0.,
            total_sp_add: 0,
            sp_add_source: ::std::vec::Vec::new(),
            total_bp_cost: 0,
            die_times: 0,
            revive_times: 0,
            break_times: 0,
            extra_turns: 0,
            total_shield: 0.,
            total_shield_taken: 0.,
            total_shield_damage: 0.,
            initial_status: ::protobuf::MessageField::none(),
            relics: ::std::vec::Vec::new(),
            assist_uid: 0,
            AADGFLPBPDF: ::std::vec::Vec::new(),
            FPFBMIMBBHJ: 0.,
            GGPJOHNOCPC: 0.,
            LACKCJHHIMK: 0.,
            FMODLGOBNPE: 0.,
            LHKABNICKJN: ::std::vec::Vec::new(),
            NCJHDJJDJNL: 0,
            LKMGDIADOPB: 0,
            IBLGMCIPCKM: 0.,
            HACJDJIGMGP: 0.,
            IMDJAHAJGCF: 0.,
            JDOLKDBICLJ: 0.,
            CACCODDCJHI: 0.,
            LLDMLOHBFLO: 0,
            CHNIKKCIBEG: 0,
            LBNJHHHLPMO: 0,
            PDLILFICHIL: 0.,
            PMKLPHJIOHC: 0,
            MPFAENEKFDC: 0,
            GLACKHOPMIO: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AvatarBattleInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AvatarBattleInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AvatarBattleInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AvatarBattleInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16AvatarBattleInfo.proto\x1a\x13AbilityUseStt.proto\x1a\x1aAttackDam\
    ageProperty.proto\x1a\x14AvatarProperty.proto\x1a\x15AvatarSkillTree.pro\
    to\x1a\x10AvatarType.proto\x1a\x11BattleRelic.proto\x1a\x17EquipmentProp\
    erty.proto\x1a\x16SkillUseProperty.proto\x1a\x11SpAddSource.proto\"\xb3\
    \x11\n\x10AvatarBattleInfo\x12,\n\x0bavatar_type\x18\x01\x20\x01(\x0e2\
    \x0b.AvatarTypeR\navatarType\x12\x0e\n\x02id\x18\x02\x20\x01(\rR\x02id\
    \x12!\n\x0cavatar_level\x18\x03\x20\x01(\rR\x0bavatarLevel\x12\x1f\n\x0b\
    avatar_rank\x18\x04\x20\x01(\rR\navatarRank\x12)\n\x10avatar_promotion\
    \x18\x05\x20\x01(\rR\x0favatarPromotion\x124\n\ravatar_status\x18\x06\
    \x20\x01(\x0b2\x0f.AvatarPropertyR\x0cavatarStatus\x123\n\x0cavatar_skil\
    l\x18\x07\x20\x03(\x0b2\x10.AvatarSkillTreeR\x0bavatarSkill\x12=\n\x10av\
    atar_equipment\x18\x08\x20\x03(\x0b2\x12.EquipmentPropertyR\x0favatarEqu\
    ipment\x12\x1f\n\x0btotal_turns\x18\t\x20\x01(\rR\ntotalTurns\x12!\n\x0c\
    total_damage\x18\n\x20\x01(\x01R\x0btotalDamage\x12\x1d\n\ntotal_heal\
    \x18\x0b\x20\x01(\x01R\ttotalHeal\x12,\n\x12total_damage_taken\x18\x0c\
    \x20\x01(\x01R\x10totalDamageTaken\x12(\n\x10total_hp_recover\x18\r\x20\
    \x01(\x01R\x0etotalHpRecover\x12\"\n\rtotal_sp_cost\x18\x0e\x20\x01(\x01\
    R\x0btotalSpCost\x12\x19\n\x08stage_id\x18\x0f\x20\x01(\rR\x07stageId\
    \x12\x1d\n\nstage_type\x18\x10\x20\x01(\rR\tstageType\x12,\n\x12total_br\
    eak_damage\x18\x11\x20\x01(\x01R\x10totalBreakDamage\x12C\n\x12attack_ty\
    pe_damage\x18\x12\x20\x03(\x0b2\x15.AttackDamagePropertyR\x10attackTypeD\
    amage\x12N\n\x18attack_type_break_damage\x18\x13\x20\x03(\x0b2\x15.Attac\
    kDamagePropertyR\x15attackTypeBreakDamage\x12J\n\x16attack_type_max_dama\
    ge\x18\x14\x20\x03(\x0b2\x15.AttackDamagePropertyR\x13attackTypeMaxDamag\
    e\x122\n\x0bskill_times\x18\x15\x20\x03(\x0b2\x11.SkillUsePropertyR\nski\
    llTimes\x12%\n\x0edelay_cumulate\x18\x16\x20\x01(\x01R\rdelayCumulate\
    \x12\x20\n\x0ctotal_sp_add\x18\x17\x20\x01(\rR\ntotalSpAdd\x120\n\rsp_ad\
    d_source\x18\x18\x20\x03(\x0b2\x0c.SpAddSourceR\x0bspAddSource\x12\"\n\r\
    total_bp_cost\x18\x19\x20\x01(\rR\x0btotalBpCost\x12\x1b\n\tdie_times\
    \x18\x1a\x20\x01(\rR\x08dieTimes\x12!\n\x0crevive_times\x18\x1b\x20\x01(\
    \rR\x0breviveTimes\x12\x1f\n\x0bbreak_times\x18\x1c\x20\x01(\rR\nbreakTi\
    mes\x12\x1f\n\x0bextra_turns\x18\x1d\x20\x01(\rR\nextraTurns\x12!\n\x0ct\
    otal_shield\x18\x1e\x20\x01(\x01R\x0btotalShield\x12,\n\x12total_shield_\
    taken\x18\x1f\x20\x01(\x01R\x10totalShieldTaken\x12.\n\x13total_shield_d\
    amage\x18\x20\x20\x01(\x01R\x11totalShieldDamage\x126\n\x0einitial_statu\
    s\x18!\x20\x01(\x0b2\x0f.AvatarPropertyR\rinitialStatus\x12$\n\x06relics\
    \x18\"\x20\x03(\x0b2\x0c.BattleRelicR\x06relics\x12\x1d\n\nassist_uid\
    \x18#\x20\x01(\rR\tassistUid\x127\n\x0bAADGFLPBPDF\x18$\x20\x03(\x0b2\
    \x15.AttackDamagePropertyR\x0bAADGFLPBPDF\x12\x20\n\x0bFPFBMIMBBHJ\x18%\
    \x20\x01(\x01R\x0bFPFBMIMBBHJ\x12\x20\n\x0bGGPJOHNOCPC\x18&\x20\x01(\x01\
    R\x0bGGPJOHNOCPC\x12\x20\n\x0bLACKCJHHIMK\x18'\x20\x01(\x01R\x0bLACKCJHH\
    IMK\x12\x20\n\x0bFMODLGOBNPE\x18(\x20\x01(\x01R\x0bFMODLGOBNPE\x120\n\
    \x0bLHKABNICKJN\x18)\x20\x03(\x0b2\x0e.AbilityUseSttR\x0bLHKABNICKJN\x12\
    \x20\n\x0bNCJHDJJDJNL\x18*\x20\x01(\rR\x0bNCJHDJJDJNL\x12\x20\n\x0bLKMGD\
    IADOPB\x18+\x20\x01(\rR\x0bLKMGDIADOPB\x12\x20\n\x0bIBLGMCIPCKM\x18,\x20\
    \x01(\x01R\x0bIBLGMCIPCKM\x12\x20\n\x0bHACJDJIGMGP\x18-\x20\x01(\x01R\
    \x0bHACJDJIGMGP\x12\x20\n\x0bIMDJAHAJGCF\x18.\x20\x01(\x01R\x0bIMDJAHAJG\
    CF\x12\x20\n\x0bJDOLKDBICLJ\x18/\x20\x01(\x01R\x0bJDOLKDBICLJ\x12\x20\n\
    \x0bCACCODDCJHI\x180\x20\x01(\x01R\x0bCACCODDCJHI\x12\x20\n\x0bLLDMLOHBF\
    LO\x181\x20\x01(\rR\x0bLLDMLOHBFLO\x12\x20\n\x0bCHNIKKCIBEG\x182\x20\x01\
    (\rR\x0bCHNIKKCIBEG\x12\x20\n\x0bLBNJHHHLPMO\x183\x20\x01(\rR\x0bLBNJHHH\
    LPMO\x12\x20\n\x0bPDLILFICHIL\x184\x20\x01(\x01R\x0bPDLILFICHIL\x12\x20\
    \n\x0bPMKLPHJIOHC\x185\x20\x01(\rR\x0bPMKLPHJIOHC\x12\x20\n\x0bMPFAENEKF\
    DC\x186\x20\x01(\rR\x0bMPFAENEKFDC\x12\x20\n\x0bGLACKHOPMIO\x187\x20\x01\
    (\rR\x0bGLACKHOPMIOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(9);
            deps.push(super::AbilityUseStt::file_descriptor().clone());
            deps.push(super::AttackDamageProperty::file_descriptor().clone());
            deps.push(super::AvatarProperty::file_descriptor().clone());
            deps.push(super::AvatarSkillTree::file_descriptor().clone());
            deps.push(super::AvatarType::file_descriptor().clone());
            deps.push(super::BattleRelic::file_descriptor().clone());
            deps.push(super::EquipmentProperty::file_descriptor().clone());
            deps.push(super::SkillUseProperty::file_descriptor().clone());
            deps.push(super::SpAddSource::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AvatarBattleInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
