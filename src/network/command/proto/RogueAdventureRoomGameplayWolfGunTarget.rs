// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueAdventureRoomGameplayWolfGunTarget.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueAdventureRoomGameplayWolfGunTarget)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueAdventureRoomGameplayWolfGunTarget {
    // message oneof groups
    pub target_impl: ::std::option::Option<rogue_adventure_room_gameplay_wolf_gun_target::Target_impl>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueAdventureRoomGameplayWolfGunTarget.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueAdventureRoomGameplayWolfGunTarget {
    fn default() -> &'a RogueAdventureRoomGameplayWolfGunTarget {
        <RogueAdventureRoomGameplayWolfGunTarget as ::protobuf::Message>::default_instance()
    }
}

impl RogueAdventureRoomGameplayWolfGunTarget {
    pub fn new() -> RogueAdventureRoomGameplayWolfGunTarget {
        ::std::default::Default::default()
    }

    // .RogueAdventureRoomTargetNone target_none = 8;

    pub fn target_none(&self) -> &super::RogueAdventureRoomTargetNone::RogueAdventureRoomTargetNone {
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(ref v)) => v,
            _ => <super::RogueAdventureRoomTargetNone::RogueAdventureRoomTargetNone as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_target_none(&mut self) {
        self.target_impl = ::std::option::Option::None;
    }

    pub fn has_target_none(&self) -> bool {
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_target_none(&mut self, v: super::RogueAdventureRoomTargetNone::RogueAdventureRoomTargetNone) {
        self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(v))
    }

    // Mutable pointer to the field.
    pub fn mut_target_none(&mut self) -> &mut super::RogueAdventureRoomTargetNone::RogueAdventureRoomTargetNone {
        if let ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(_)) = self.target_impl {
        } else {
            self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(super::RogueAdventureRoomTargetNone::RogueAdventureRoomTargetNone::new()));
        }
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_target_none(&mut self) -> super::RogueAdventureRoomTargetNone::RogueAdventureRoomTargetNone {
        if self.has_target_none() {
            match self.target_impl.take() {
                ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueAdventureRoomTargetNone::RogueAdventureRoomTargetNone::new()
        }
    }

    // .RogueAdventureRoomTargetCoin target_coin = 12;

    pub fn target_coin(&self) -> &super::RogueAdventureRoomTargetCoin::RogueAdventureRoomTargetCoin {
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(ref v)) => v,
            _ => <super::RogueAdventureRoomTargetCoin::RogueAdventureRoomTargetCoin as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_target_coin(&mut self) {
        self.target_impl = ::std::option::Option::None;
    }

    pub fn has_target_coin(&self) -> bool {
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_target_coin(&mut self, v: super::RogueAdventureRoomTargetCoin::RogueAdventureRoomTargetCoin) {
        self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(v))
    }

    // Mutable pointer to the field.
    pub fn mut_target_coin(&mut self) -> &mut super::RogueAdventureRoomTargetCoin::RogueAdventureRoomTargetCoin {
        if let ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(_)) = self.target_impl {
        } else {
            self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(super::RogueAdventureRoomTargetCoin::RogueAdventureRoomTargetCoin::new()));
        }
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_target_coin(&mut self) -> super::RogueAdventureRoomTargetCoin::RogueAdventureRoomTargetCoin {
        if self.has_target_coin() {
            match self.target_impl.take() {
                ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueAdventureRoomTargetCoin::RogueAdventureRoomTargetCoin::new()
        }
    }

    // .RogueAdventureRoomTargetMiracle target_miracle = 15;

    pub fn target_miracle(&self) -> &super::RogueAdventureRoomTargetMiracle::RogueAdventureRoomTargetMiracle {
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(ref v)) => v,
            _ => <super::RogueAdventureRoomTargetMiracle::RogueAdventureRoomTargetMiracle as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_target_miracle(&mut self) {
        self.target_impl = ::std::option::Option::None;
    }

    pub fn has_target_miracle(&self) -> bool {
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_target_miracle(&mut self, v: super::RogueAdventureRoomTargetMiracle::RogueAdventureRoomTargetMiracle) {
        self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(v))
    }

    // Mutable pointer to the field.
    pub fn mut_target_miracle(&mut self) -> &mut super::RogueAdventureRoomTargetMiracle::RogueAdventureRoomTargetMiracle {
        if let ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(_)) = self.target_impl {
        } else {
            self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(super::RogueAdventureRoomTargetMiracle::RogueAdventureRoomTargetMiracle::new()));
        }
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_target_miracle(&mut self) -> super::RogueAdventureRoomTargetMiracle::RogueAdventureRoomTargetMiracle {
        if self.has_target_miracle() {
            match self.target_impl.take() {
                ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueAdventureRoomTargetMiracle::RogueAdventureRoomTargetMiracle::new()
        }
    }

    // .RogueAdventureRoomTargetRuanmei target_ruanmei = 14;

    pub fn target_ruanmei(&self) -> &super::RogueAdventureRoomTargetRuanmei::RogueAdventureRoomTargetRuanmei {
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(ref v)) => v,
            _ => <super::RogueAdventureRoomTargetRuanmei::RogueAdventureRoomTargetRuanmei as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_target_ruanmei(&mut self) {
        self.target_impl = ::std::option::Option::None;
    }

    pub fn has_target_ruanmei(&self) -> bool {
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_target_ruanmei(&mut self, v: super::RogueAdventureRoomTargetRuanmei::RogueAdventureRoomTargetRuanmei) {
        self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(v))
    }

    // Mutable pointer to the field.
    pub fn mut_target_ruanmei(&mut self) -> &mut super::RogueAdventureRoomTargetRuanmei::RogueAdventureRoomTargetRuanmei {
        if let ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(_)) = self.target_impl {
        } else {
            self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(super::RogueAdventureRoomTargetRuanmei::RogueAdventureRoomTargetRuanmei::new()));
        }
        match self.target_impl {
            ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_target_ruanmei(&mut self) -> super::RogueAdventureRoomTargetRuanmei::RogueAdventureRoomTargetRuanmei {
        if self.has_target_ruanmei() {
            match self.target_impl.take() {
                ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueAdventureRoomTargetRuanmei::RogueAdventureRoomTargetRuanmei::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueAdventureRoomTargetNone::RogueAdventureRoomTargetNone>(
            "target_none",
            RogueAdventureRoomGameplayWolfGunTarget::has_target_none,
            RogueAdventureRoomGameplayWolfGunTarget::target_none,
            RogueAdventureRoomGameplayWolfGunTarget::mut_target_none,
            RogueAdventureRoomGameplayWolfGunTarget::set_target_none,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueAdventureRoomTargetCoin::RogueAdventureRoomTargetCoin>(
            "target_coin",
            RogueAdventureRoomGameplayWolfGunTarget::has_target_coin,
            RogueAdventureRoomGameplayWolfGunTarget::target_coin,
            RogueAdventureRoomGameplayWolfGunTarget::mut_target_coin,
            RogueAdventureRoomGameplayWolfGunTarget::set_target_coin,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueAdventureRoomTargetMiracle::RogueAdventureRoomTargetMiracle>(
            "target_miracle",
            RogueAdventureRoomGameplayWolfGunTarget::has_target_miracle,
            RogueAdventureRoomGameplayWolfGunTarget::target_miracle,
            RogueAdventureRoomGameplayWolfGunTarget::mut_target_miracle,
            RogueAdventureRoomGameplayWolfGunTarget::set_target_miracle,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueAdventureRoomTargetRuanmei::RogueAdventureRoomTargetRuanmei>(
            "target_ruanmei",
            RogueAdventureRoomGameplayWolfGunTarget::has_target_ruanmei,
            RogueAdventureRoomGameplayWolfGunTarget::target_ruanmei,
            RogueAdventureRoomGameplayWolfGunTarget::mut_target_ruanmei,
            RogueAdventureRoomGameplayWolfGunTarget::set_target_ruanmei,
        ));
        oneofs.push(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueAdventureRoomGameplayWolfGunTarget>(
            "RogueAdventureRoomGameplayWolfGunTarget",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueAdventureRoomGameplayWolfGunTarget {
    const NAME: &'static str = "RogueAdventureRoomGameplayWolfGunTarget";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(is.read_message()?));
                },
                98 => {
                    self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(is.read_message()?));
                },
                122 => {
                    self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(is.read_message()?));
                },
                114 => {
                    self.target_impl = ::std::option::Option::Some(rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.target_impl {
            match v {
                &rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.target_impl {
            match v {
                &rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetNone(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetCoin(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetMiracle(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &rogue_adventure_room_gameplay_wolf_gun_target::Target_impl::TargetRuanmei(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueAdventureRoomGameplayWolfGunTarget {
        RogueAdventureRoomGameplayWolfGunTarget::new()
    }

    fn clear(&mut self) {
        self.target_impl = ::std::option::Option::None;
        self.target_impl = ::std::option::Option::None;
        self.target_impl = ::std::option::Option::None;
        self.target_impl = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueAdventureRoomGameplayWolfGunTarget {
        static instance: RogueAdventureRoomGameplayWolfGunTarget = RogueAdventureRoomGameplayWolfGunTarget {
            target_impl: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueAdventureRoomGameplayWolfGunTarget {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueAdventureRoomGameplayWolfGunTarget").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueAdventureRoomGameplayWolfGunTarget {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueAdventureRoomGameplayWolfGunTarget {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueAdventureRoomGameplayWolfGunTarget`
pub mod rogue_adventure_room_gameplay_wolf_gun_target {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueAdventureRoomGameplayWolfGunTarget.target_impl)
    pub enum Target_impl {
        // @@protoc_insertion_point(oneof_field:RogueAdventureRoomGameplayWolfGunTarget.target_none)
        TargetNone(super::super::RogueAdventureRoomTargetNone::RogueAdventureRoomTargetNone),
        // @@protoc_insertion_point(oneof_field:RogueAdventureRoomGameplayWolfGunTarget.target_coin)
        TargetCoin(super::super::RogueAdventureRoomTargetCoin::RogueAdventureRoomTargetCoin),
        // @@protoc_insertion_point(oneof_field:RogueAdventureRoomGameplayWolfGunTarget.target_miracle)
        TargetMiracle(super::super::RogueAdventureRoomTargetMiracle::RogueAdventureRoomTargetMiracle),
        // @@protoc_insertion_point(oneof_field:RogueAdventureRoomGameplayWolfGunTarget.target_ruanmei)
        TargetRuanmei(super::super::RogueAdventureRoomTargetRuanmei::RogueAdventureRoomTargetRuanmei),
    }

    impl ::protobuf::Oneof for Target_impl {
    }

    impl ::protobuf::OneofFull for Target_impl {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueAdventureRoomGameplayWolfGunTarget as ::protobuf::MessageFull>::descriptor().oneof_by_name("target_impl").unwrap()).clone()
        }
    }

    impl Target_impl {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Target_impl>("target_impl")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-RogueAdventureRoomGameplayWolfGunTarget.proto\x1a\"RogueAdventureRoom\
    TargetCoin.proto\x1a%RogueAdventureRoomTargetMiracle.proto\x1a\"RogueAdv\
    entureRoomTargetNone.proto\x1a%RogueAdventureRoomTargetRuanmei.proto\"\
    \xd2\x02\n'RogueAdventureRoomGameplayWolfGunTarget\x12@\n\x0btarget_none\
    \x18\x08\x20\x01(\x0b2\x1d.RogueAdventureRoomTargetNoneH\0R\ntargetNone\
    \x12@\n\x0btarget_coin\x18\x0c\x20\x01(\x0b2\x1d.RogueAdventureRoomTarge\
    tCoinH\0R\ntargetCoin\x12I\n\x0etarget_miracle\x18\x0f\x20\x01(\x0b2\x20\
    .RogueAdventureRoomTargetMiracleH\0R\rtargetMiracle\x12I\n\x0etarget_rua\
    nmei\x18\x0e\x20\x01(\x0b2\x20.RogueAdventureRoomTargetRuanmeiH\0R\rtarg\
    etRuanmeiB\r\n\x0btarget_implb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::RogueAdventureRoomTargetCoin::file_descriptor().clone());
            deps.push(super::RogueAdventureRoomTargetMiracle::file_descriptor().clone());
            deps.push(super::RogueAdventureRoomTargetNone::file_descriptor().clone());
            deps.push(super::RogueAdventureRoomTargetRuanmei::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueAdventureRoomGameplayWolfGunTarget::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
