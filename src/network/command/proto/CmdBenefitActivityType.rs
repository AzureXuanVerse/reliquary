// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdBenefitActivityType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdBenefitActivityType)
pub enum CmdBenefitActivityType {
    // @@protoc_insertion_point(enum_value:CmdBenefitActivityType.CmdBenefitActivityTypeNone)
    CmdBenefitActivityTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdBenefitActivityType.CmdTakeBenefitActivityRewardCsReq)
    CmdTakeBenefitActivityRewardCsReq = 4868,
    // @@protoc_insertion_point(enum_value:CmdBenefitActivityType.CmdJoinBenefitActivityScRsp)
    CmdJoinBenefitActivityScRsp = 4887,
    // @@protoc_insertion_point(enum_value:CmdBenefitActivityType.CmdJoinBenefitActivityCsReq)
    CmdJoinBenefitActivityCsReq = 4861,
    // @@protoc_insertion_point(enum_value:CmdBenefitActivityType.CmdTakeBenefitActivityRewardScRsp)
    CmdTakeBenefitActivityRewardScRsp = 4886,
    // @@protoc_insertion_point(enum_value:CmdBenefitActivityType.CmdGetBenefitActivityInfoCsReq)
    CmdGetBenefitActivityInfoCsReq = 4899,
    // @@protoc_insertion_point(enum_value:CmdBenefitActivityType.CmdGetBenefitActivityInfoScRsp)
    CmdGetBenefitActivityInfoScRsp = 4877,
}

impl ::protobuf::Enum for CmdBenefitActivityType {
    const NAME: &'static str = "CmdBenefitActivityType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdBenefitActivityType> {
        match value {
            0 => ::std::option::Option::Some(CmdBenefitActivityType::CmdBenefitActivityTypeNone),
            4868 => ::std::option::Option::Some(CmdBenefitActivityType::CmdTakeBenefitActivityRewardCsReq),
            4887 => ::std::option::Option::Some(CmdBenefitActivityType::CmdJoinBenefitActivityScRsp),
            4861 => ::std::option::Option::Some(CmdBenefitActivityType::CmdJoinBenefitActivityCsReq),
            4886 => ::std::option::Option::Some(CmdBenefitActivityType::CmdTakeBenefitActivityRewardScRsp),
            4899 => ::std::option::Option::Some(CmdBenefitActivityType::CmdGetBenefitActivityInfoCsReq),
            4877 => ::std::option::Option::Some(CmdBenefitActivityType::CmdGetBenefitActivityInfoScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdBenefitActivityType> {
        match str {
            "CmdBenefitActivityTypeNone" => ::std::option::Option::Some(CmdBenefitActivityType::CmdBenefitActivityTypeNone),
            "CmdTakeBenefitActivityRewardCsReq" => ::std::option::Option::Some(CmdBenefitActivityType::CmdTakeBenefitActivityRewardCsReq),
            "CmdJoinBenefitActivityScRsp" => ::std::option::Option::Some(CmdBenefitActivityType::CmdJoinBenefitActivityScRsp),
            "CmdJoinBenefitActivityCsReq" => ::std::option::Option::Some(CmdBenefitActivityType::CmdJoinBenefitActivityCsReq),
            "CmdTakeBenefitActivityRewardScRsp" => ::std::option::Option::Some(CmdBenefitActivityType::CmdTakeBenefitActivityRewardScRsp),
            "CmdGetBenefitActivityInfoCsReq" => ::std::option::Option::Some(CmdBenefitActivityType::CmdGetBenefitActivityInfoCsReq),
            "CmdGetBenefitActivityInfoScRsp" => ::std::option::Option::Some(CmdBenefitActivityType::CmdGetBenefitActivityInfoScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdBenefitActivityType] = &[
        CmdBenefitActivityType::CmdBenefitActivityTypeNone,
        CmdBenefitActivityType::CmdTakeBenefitActivityRewardCsReq,
        CmdBenefitActivityType::CmdJoinBenefitActivityScRsp,
        CmdBenefitActivityType::CmdJoinBenefitActivityCsReq,
        CmdBenefitActivityType::CmdTakeBenefitActivityRewardScRsp,
        CmdBenefitActivityType::CmdGetBenefitActivityInfoCsReq,
        CmdBenefitActivityType::CmdGetBenefitActivityInfoScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdBenefitActivityType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdBenefitActivityType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdBenefitActivityType::CmdBenefitActivityTypeNone => 0,
            CmdBenefitActivityType::CmdTakeBenefitActivityRewardCsReq => 1,
            CmdBenefitActivityType::CmdJoinBenefitActivityScRsp => 2,
            CmdBenefitActivityType::CmdJoinBenefitActivityCsReq => 3,
            CmdBenefitActivityType::CmdTakeBenefitActivityRewardScRsp => 4,
            CmdBenefitActivityType::CmdGetBenefitActivityInfoCsReq => 5,
            CmdBenefitActivityType::CmdGetBenefitActivityInfoScRsp => 6,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdBenefitActivityType {
    fn default() -> Self {
        CmdBenefitActivityType::CmdBenefitActivityTypeNone
    }
}

impl CmdBenefitActivityType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdBenefitActivityType>("CmdBenefitActivityType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cCmdBenefitActivityType.proto*\x96\x02\n\x16CmdBenefitActivityType\
    \x12\x1e\n\x1aCmdBenefitActivityTypeNone\x10\0\x12&\n!CmdTakeBenefitActi\
    vityRewardCsReq\x10\x84&\x12\x20\n\x1bCmdJoinBenefitActivityScRsp\x10\
    \x97&\x12\x20\n\x1bCmdJoinBenefitActivityCsReq\x10\xfd%\x12&\n!CmdTakeBe\
    nefitActivityRewardScRsp\x10\x96&\x12#\n\x1eCmdGetBenefitActivityInfoCsR\
    eq\x10\xa3&\x12#\n\x1eCmdGetBenefitActivityInfoScRsp\x10\x8d&b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdBenefitActivityType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
