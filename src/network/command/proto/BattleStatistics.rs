// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BattleStatistics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:BattleStatistics)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BattleStatistics {
    // message fields
    // @@protoc_insertion_point(field:BattleStatistics.total_battle_turns)
    pub total_battle_turns: u32,
    // @@protoc_insertion_point(field:BattleStatistics.total_auto_turns)
    pub total_auto_turns: u32,
    // @@protoc_insertion_point(field:BattleStatistics.avatar_id_list)
    pub avatar_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:BattleStatistics.ultra_cnt)
    pub ultra_cnt: u32,
    // @@protoc_insertion_point(field:BattleStatistics.total_delay_cumulate)
    pub total_delay_cumulate: f64,
    // @@protoc_insertion_point(field:BattleStatistics.cost_time)
    pub cost_time: f64,
    // @@protoc_insertion_point(field:BattleStatistics.pve_avatar_list)
    pub pve_avatar_list: ::std::vec::Vec<super::AvatarBattleInfo::AvatarBattleInfo>,
    // @@protoc_insertion_point(field:BattleStatistics.monster_list)
    pub monster_list: ::std::vec::Vec<super::LAFIENGMEMJ::LAFIENGMEMJ>,
    // @@protoc_insertion_point(field:BattleStatistics.round_cnt)
    pub round_cnt: u32,
    // @@protoc_insertion_point(field:BattleStatistics.cocoon_dead_wave)
    pub cocoon_dead_wave: u32,
    // @@protoc_insertion_point(field:BattleStatistics.avatar_battle_turns)
    pub avatar_battle_turns: u32,
    // @@protoc_insertion_point(field:BattleStatistics.monster_battle_turns)
    pub monster_battle_turns: u32,
    // @@protoc_insertion_point(field:BattleStatistics.NBDEKMAKPKJ)
    pub NBDEKMAKPKJ: ::std::collections::HashMap<::std::string::String, f32>,
    // @@protoc_insertion_point(field:BattleStatistics.BATTLE_TARGET_TYPE_CHALLENGE_SCORE)
    pub BATTLE_TARGET_TYPE_CHALLENGE_SCORE: u32,
    // @@protoc_insertion_point(field:BattleStatistics.IJOLOFBJINB)
    pub IJOLOFBJINB: ::std::vec::Vec<super::BattleEventBattleInfo::BattleEventBattleInfo>,
    // @@protoc_insertion_point(field:BattleStatistics.end_reason)
    pub end_reason: ::protobuf::EnumOrUnknown<super::BattleEndReason::BattleEndReason>,
    // @@protoc_insertion_point(field:BattleStatistics.GLOJPNLNHJH)
    pub GLOJPNLNHJH: ::std::vec::Vec<super::IBFFAJOHKMO::IBFFAJOHKMO>,
    // @@protoc_insertion_point(field:BattleStatistics.IICCEFCGPAK)
    pub IICCEFCGPAK: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:BattleStatistics.LDGAANONMBK)
    pub LDGAANONMBK: ::std::vec::Vec<super::IIIPHJIMNID::IIIPHJIMNID>,
    // @@protoc_insertion_point(field:BattleStatistics.ADBHGKPNIKP)
    pub ADBHGKPNIKP: ::std::vec::Vec<super::MMNDJAMEBML::MMNDJAMEBML>,
    // @@protoc_insertion_point(field:BattleStatistics.ECEFBCNOFKB)
    pub ECEFBCNOFKB: ::std::vec::Vec<super::GMKEPCOMHPN::GMKEPCOMHPN>,
    // @@protoc_insertion_point(field:BattleStatistics.battle_target_info)
    pub battle_target_info: ::std::collections::HashMap<u32, super::BattleTargetList::BattleTargetList>,
    // @@protoc_insertion_point(field:BattleStatistics.NAJLKHFLLPG)
    pub NAJLKHFLLPG: ::std::vec::Vec<super::EAGOCAHFGAF::EAGOCAHFGAF>,
    // @@protoc_insertion_point(field:BattleStatistics.JPGIFCHJDLK)
    pub JPGIFCHJDLK: ::protobuf::MessageField<super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>,
    // @@protoc_insertion_point(field:BattleStatistics.MNPHNJKGPKL)
    pub MNPHNJKGPKL: ::protobuf::MessageField<super::CHDONIGOKNM::CHDONIGOKNM>,
    // @@protoc_insertion_point(field:BattleStatistics.LEDDODAMMNO)
    pub LEDDODAMMNO: bool,
    // @@protoc_insertion_point(field:BattleStatistics.ENBJCPKGCOL)
    pub ENBJCPKGCOL: ::std::vec::Vec<super::JFFNDOBBNFB::JFFNDOBBNFB>,
    // @@protoc_insertion_point(field:BattleStatistics.NGOKNFDMHMF)
    pub NGOKNFDMHMF: ::std::vec::Vec<super::EKBAGMOMECL::EKBAGMOMECL>,
    // @@protoc_insertion_point(field:BattleStatistics.DKOEADNAMCJ)
    pub DKOEADNAMCJ: u32,
    // @@protoc_insertion_point(field:BattleStatistics.IDCGPAKJFMD)
    pub IDCGPAKJFMD: ::protobuf::MessageField<super::AIGKNHFANGA::AIGKNHFANGA>,
    // @@protoc_insertion_point(field:BattleStatistics.BILLJJBFIOL)
    pub BILLJJBFIOL: ::protobuf::MessageField<super::BAAGNOHEHMA::BAAGNOHEHMA>,
    // @@protoc_insertion_point(field:BattleStatistics.HMPGMILJAPB)
    pub HMPGMILJAPB: ::protobuf::MessageField<super::BDMGOEJBFGL::BDMGOEJBFGL>,
    // @@protoc_insertion_point(field:BattleStatistics.NOCIGFLLIFG)
    pub NOCIGFLLIFG: ::protobuf::MessageField<super::NMCMOHAHOPL::NMCMOHAHOPL>,
    // @@protoc_insertion_point(field:BattleStatistics.JNJIIMJBOJP)
    pub JNJIIMJBOJP: ::protobuf::MessageField<super::DEMLPCNDJJP::DEMLPCNDJJP>,
    // @@protoc_insertion_point(field:BattleStatistics.KKPKALJMAMF)
    pub KKPKALJMAMF: u32,
    // @@protoc_insertion_point(field:BattleStatistics.OKGCIPAHMEI)
    pub OKGCIPAHMEI: ::std::vec::Vec<super::PEDJNPJKOCK::PEDJNPJKOCK>,
    // special fields
    // @@protoc_insertion_point(special_field:BattleStatistics.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BattleStatistics {
    fn default() -> &'a BattleStatistics {
        <BattleStatistics as ::protobuf::Message>::default_instance()
    }
}

impl BattleStatistics {
    pub fn new() -> BattleStatistics {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(36);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_battle_turns",
            |m: &BattleStatistics| { &m.total_battle_turns },
            |m: &mut BattleStatistics| { &mut m.total_battle_turns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_auto_turns",
            |m: &BattleStatistics| { &m.total_auto_turns },
            |m: &mut BattleStatistics| { &mut m.total_auto_turns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_id_list",
            |m: &BattleStatistics| { &m.avatar_id_list },
            |m: &mut BattleStatistics| { &mut m.avatar_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ultra_cnt",
            |m: &BattleStatistics| { &m.ultra_cnt },
            |m: &mut BattleStatistics| { &mut m.ultra_cnt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_delay_cumulate",
            |m: &BattleStatistics| { &m.total_delay_cumulate },
            |m: &mut BattleStatistics| { &mut m.total_delay_cumulate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cost_time",
            |m: &BattleStatistics| { &m.cost_time },
            |m: &mut BattleStatistics| { &mut m.cost_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pve_avatar_list",
            |m: &BattleStatistics| { &m.pve_avatar_list },
            |m: &mut BattleStatistics| { &mut m.pve_avatar_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "monster_list",
            |m: &BattleStatistics| { &m.monster_list },
            |m: &mut BattleStatistics| { &mut m.monster_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "round_cnt",
            |m: &BattleStatistics| { &m.round_cnt },
            |m: &mut BattleStatistics| { &mut m.round_cnt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cocoon_dead_wave",
            |m: &BattleStatistics| { &m.cocoon_dead_wave },
            |m: &mut BattleStatistics| { &mut m.cocoon_dead_wave },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_battle_turns",
            |m: &BattleStatistics| { &m.avatar_battle_turns },
            |m: &mut BattleStatistics| { &mut m.avatar_battle_turns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_battle_turns",
            |m: &BattleStatistics| { &m.monster_battle_turns },
            |m: &mut BattleStatistics| { &mut m.monster_battle_turns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "NBDEKMAKPKJ",
            |m: &BattleStatistics| { &m.NBDEKMAKPKJ },
            |m: &mut BattleStatistics| { &mut m.NBDEKMAKPKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BATTLE_TARGET_TYPE_CHALLENGE_SCORE",
            |m: &BattleStatistics| { &m.BATTLE_TARGET_TYPE_CHALLENGE_SCORE },
            |m: &mut BattleStatistics| { &mut m.BATTLE_TARGET_TYPE_CHALLENGE_SCORE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IJOLOFBJINB",
            |m: &BattleStatistics| { &m.IJOLOFBJINB },
            |m: &mut BattleStatistics| { &mut m.IJOLOFBJINB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_reason",
            |m: &BattleStatistics| { &m.end_reason },
            |m: &mut BattleStatistics| { &mut m.end_reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GLOJPNLNHJH",
            |m: &BattleStatistics| { &m.GLOJPNLNHJH },
            |m: &mut BattleStatistics| { &mut m.GLOJPNLNHJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IICCEFCGPAK",
            |m: &BattleStatistics| { &m.IICCEFCGPAK },
            |m: &mut BattleStatistics| { &mut m.IICCEFCGPAK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LDGAANONMBK",
            |m: &BattleStatistics| { &m.LDGAANONMBK },
            |m: &mut BattleStatistics| { &mut m.LDGAANONMBK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ADBHGKPNIKP",
            |m: &BattleStatistics| { &m.ADBHGKPNIKP },
            |m: &mut BattleStatistics| { &mut m.ADBHGKPNIKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ECEFBCNOFKB",
            |m: &BattleStatistics| { &m.ECEFBCNOFKB },
            |m: &mut BattleStatistics| { &mut m.ECEFBCNOFKB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "battle_target_info",
            |m: &BattleStatistics| { &m.battle_target_info },
            |m: &mut BattleStatistics| { &mut m.battle_target_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NAJLKHFLLPG",
            |m: &BattleStatistics| { &m.NAJLKHFLLPG },
            |m: &mut BattleStatistics| { &mut m.NAJLKHFLLPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>(
            "JPGIFCHJDLK",
            |m: &BattleStatistics| { &m.JPGIFCHJDLK },
            |m: &mut BattleStatistics| { &mut m.JPGIFCHJDLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CHDONIGOKNM::CHDONIGOKNM>(
            "MNPHNJKGPKL",
            |m: &BattleStatistics| { &m.MNPHNJKGPKL },
            |m: &mut BattleStatistics| { &mut m.MNPHNJKGPKL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LEDDODAMMNO",
            |m: &BattleStatistics| { &m.LEDDODAMMNO },
            |m: &mut BattleStatistics| { &mut m.LEDDODAMMNO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ENBJCPKGCOL",
            |m: &BattleStatistics| { &m.ENBJCPKGCOL },
            |m: &mut BattleStatistics| { &mut m.ENBJCPKGCOL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NGOKNFDMHMF",
            |m: &BattleStatistics| { &m.NGOKNFDMHMF },
            |m: &mut BattleStatistics| { &mut m.NGOKNFDMHMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKOEADNAMCJ",
            |m: &BattleStatistics| { &m.DKOEADNAMCJ },
            |m: &mut BattleStatistics| { &mut m.DKOEADNAMCJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AIGKNHFANGA::AIGKNHFANGA>(
            "IDCGPAKJFMD",
            |m: &BattleStatistics| { &m.IDCGPAKJFMD },
            |m: &mut BattleStatistics| { &mut m.IDCGPAKJFMD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BAAGNOHEHMA::BAAGNOHEHMA>(
            "BILLJJBFIOL",
            |m: &BattleStatistics| { &m.BILLJJBFIOL },
            |m: &mut BattleStatistics| { &mut m.BILLJJBFIOL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BDMGOEJBFGL::BDMGOEJBFGL>(
            "HMPGMILJAPB",
            |m: &BattleStatistics| { &m.HMPGMILJAPB },
            |m: &mut BattleStatistics| { &mut m.HMPGMILJAPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NMCMOHAHOPL::NMCMOHAHOPL>(
            "NOCIGFLLIFG",
            |m: &BattleStatistics| { &m.NOCIGFLLIFG },
            |m: &mut BattleStatistics| { &mut m.NOCIGFLLIFG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DEMLPCNDJJP::DEMLPCNDJJP>(
            "JNJIIMJBOJP",
            |m: &BattleStatistics| { &m.JNJIIMJBOJP },
            |m: &mut BattleStatistics| { &mut m.JNJIIMJBOJP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KKPKALJMAMF",
            |m: &BattleStatistics| { &m.KKPKALJMAMF },
            |m: &mut BattleStatistics| { &mut m.KKPKALJMAMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OKGCIPAHMEI",
            |m: &BattleStatistics| { &m.OKGCIPAHMEI },
            |m: &mut BattleStatistics| { &mut m.OKGCIPAHMEI },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BattleStatistics>(
            "BattleStatistics",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BattleStatistics {
    const NAME: &'static str = "BattleStatistics";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.total_battle_turns = is.read_uint32()?;
                },
                16 => {
                    self.total_auto_turns = is.read_uint32()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.avatar_id_list)?;
                },
                24 => {
                    self.avatar_id_list.push(is.read_uint32()?);
                },
                32 => {
                    self.ultra_cnt = is.read_uint32()?;
                },
                41 => {
                    self.total_delay_cumulate = is.read_double()?;
                },
                49 => {
                    self.cost_time = is.read_double()?;
                },
                58 => {
                    self.pve_avatar_list.push(is.read_message()?);
                },
                66 => {
                    self.monster_list.push(is.read_message()?);
                },
                72 => {
                    self.round_cnt = is.read_uint32()?;
                },
                80 => {
                    self.cocoon_dead_wave = is.read_uint32()?;
                },
                88 => {
                    self.avatar_battle_turns = is.read_uint32()?;
                },
                96 => {
                    self.monster_battle_turns = is.read_uint32()?;
                },
                106 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            21 => value = is.read_float()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.NBDEKMAKPKJ.insert(key, value);
                },
                112 => {
                    self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE = is.read_uint32()?;
                },
                130 => {
                    self.IJOLOFBJINB.push(is.read_message()?);
                },
                152 => {
                    self.end_reason = is.read_enum_or_unknown()?;
                },
                170 => {
                    self.GLOJPNLNHJH.push(is.read_message()?);
                },
                178 => {
                    is.read_repeated_packed_int32_into(&mut self.IICCEFCGPAK)?;
                },
                176 => {
                    self.IICCEFCGPAK.push(is.read_int32()?);
                },
                186 => {
                    self.LDGAANONMBK.push(is.read_message()?);
                },
                210 => {
                    self.ADBHGKPNIKP.push(is.read_message()?);
                },
                218 => {
                    self.ECEFBCNOFKB.push(is.read_message()?);
                },
                226 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.battle_target_info.insert(key, value);
                },
                234 => {
                    self.NAJLKHFLLPG.push(is.read_message()?);
                },
                242 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JPGIFCHJDLK)?;
                },
                250 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MNPHNJKGPKL)?;
                },
                256 => {
                    self.LEDDODAMMNO = is.read_bool()?;
                },
                266 => {
                    self.ENBJCPKGCOL.push(is.read_message()?);
                },
                274 => {
                    self.NGOKNFDMHMF.push(is.read_message()?);
                },
                280 => {
                    self.DKOEADNAMCJ = is.read_uint32()?;
                },
                290 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IDCGPAKJFMD)?;
                },
                298 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BILLJJBFIOL)?;
                },
                306 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HMPGMILJAPB)?;
                },
                314 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NOCIGFLLIFG)?;
                },
                322 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JNJIIMJBOJP)?;
                },
                328 => {
                    self.KKPKALJMAMF = is.read_uint32()?;
                },
                338 => {
                    self.OKGCIPAHMEI.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.total_battle_turns != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.total_battle_turns);
        }
        if self.total_auto_turns != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.total_auto_turns);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(3, &self.avatar_id_list);
        if self.ultra_cnt != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.ultra_cnt);
        }
        if self.total_delay_cumulate != 0. {
            my_size += 1 + 8;
        }
        if self.cost_time != 0. {
            my_size += 1 + 8;
        }
        for value in &self.pve_avatar_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.monster_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.round_cnt != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.round_cnt);
        }
        if self.cocoon_dead_wave != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.cocoon_dead_wave);
        }
        if self.avatar_battle_turns != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.avatar_battle_turns);
        }
        if self.monster_battle_turns != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.monster_battle_turns);
        }
        for (k, v) in &self.NBDEKMAKPKJ {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 4;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE);
        }
        for value in &self.IJOLOFBJINB {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.end_reason != ::protobuf::EnumOrUnknown::new(super::BattleEndReason::BattleEndReason::BATTLE_END_REASON_NONE) {
            my_size += ::protobuf::rt::int32_size(19, self.end_reason.value());
        }
        for value in &self.GLOJPNLNHJH {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_int32_size(22, &self.IICCEFCGPAK);
        for value in &self.LDGAANONMBK {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.ADBHGKPNIKP {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.ECEFBCNOFKB {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.battle_target_info {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.NAJLKHFLLPG {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.JPGIFCHJDLK.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MNPHNJKGPKL.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.LEDDODAMMNO != false {
            my_size += 2 + 1;
        }
        for value in &self.ENBJCPKGCOL {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.NGOKNFDMHMF {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.DKOEADNAMCJ != 0 {
            my_size += ::protobuf::rt::uint32_size(35, self.DKOEADNAMCJ);
        }
        if let Some(v) = self.IDCGPAKJFMD.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.BILLJJBFIOL.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.HMPGMILJAPB.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NOCIGFLLIFG.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JNJIIMJBOJP.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.KKPKALJMAMF != 0 {
            my_size += ::protobuf::rt::uint32_size(41, self.KKPKALJMAMF);
        }
        for value in &self.OKGCIPAHMEI {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.total_battle_turns != 0 {
            os.write_uint32(1, self.total_battle_turns)?;
        }
        if self.total_auto_turns != 0 {
            os.write_uint32(2, self.total_auto_turns)?;
        }
        os.write_repeated_packed_uint32(3, &self.avatar_id_list)?;
        if self.ultra_cnt != 0 {
            os.write_uint32(4, self.ultra_cnt)?;
        }
        if self.total_delay_cumulate != 0. {
            os.write_double(5, self.total_delay_cumulate)?;
        }
        if self.cost_time != 0. {
            os.write_double(6, self.cost_time)?;
        }
        for v in &self.pve_avatar_list {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.monster_list {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.round_cnt != 0 {
            os.write_uint32(9, self.round_cnt)?;
        }
        if self.cocoon_dead_wave != 0 {
            os.write_uint32(10, self.cocoon_dead_wave)?;
        }
        if self.avatar_battle_turns != 0 {
            os.write_uint32(11, self.avatar_battle_turns)?;
        }
        if self.monster_battle_turns != 0 {
            os.write_uint32(12, self.monster_battle_turns)?;
        }
        for (k, v) in &self.NBDEKMAKPKJ {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 4;
            os.write_raw_varint32(106)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_float(2, *v)?;
        };
        if self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE != 0 {
            os.write_uint32(14, self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE)?;
        }
        for v in &self.IJOLOFBJINB {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        };
        if self.end_reason != ::protobuf::EnumOrUnknown::new(super::BattleEndReason::BattleEndReason::BATTLE_END_REASON_NONE) {
            os.write_enum(19, ::protobuf::EnumOrUnknown::value(&self.end_reason))?;
        }
        for v in &self.GLOJPNLNHJH {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        os.write_repeated_packed_int32(22, &self.IICCEFCGPAK)?;
        for v in &self.LDGAANONMBK {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        };
        for v in &self.ADBHGKPNIKP {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        };
        for v in &self.ECEFBCNOFKB {
            ::protobuf::rt::write_message_field_with_cached_size(27, v, os)?;
        };
        for (k, v) in &self.battle_target_info {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(226)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.NAJLKHFLLPG {
            ::protobuf::rt::write_message_field_with_cached_size(29, v, os)?;
        };
        if let Some(v) = self.JPGIFCHJDLK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(30, v, os)?;
        }
        if let Some(v) = self.MNPHNJKGPKL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(31, v, os)?;
        }
        if self.LEDDODAMMNO != false {
            os.write_bool(32, self.LEDDODAMMNO)?;
        }
        for v in &self.ENBJCPKGCOL {
            ::protobuf::rt::write_message_field_with_cached_size(33, v, os)?;
        };
        for v in &self.NGOKNFDMHMF {
            ::protobuf::rt::write_message_field_with_cached_size(34, v, os)?;
        };
        if self.DKOEADNAMCJ != 0 {
            os.write_uint32(35, self.DKOEADNAMCJ)?;
        }
        if let Some(v) = self.IDCGPAKJFMD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(36, v, os)?;
        }
        if let Some(v) = self.BILLJJBFIOL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(37, v, os)?;
        }
        if let Some(v) = self.HMPGMILJAPB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(38, v, os)?;
        }
        if let Some(v) = self.NOCIGFLLIFG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(39, v, os)?;
        }
        if let Some(v) = self.JNJIIMJBOJP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(40, v, os)?;
        }
        if self.KKPKALJMAMF != 0 {
            os.write_uint32(41, self.KKPKALJMAMF)?;
        }
        for v in &self.OKGCIPAHMEI {
            ::protobuf::rt::write_message_field_with_cached_size(42, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BattleStatistics {
        BattleStatistics::new()
    }

    fn clear(&mut self) {
        self.total_battle_turns = 0;
        self.total_auto_turns = 0;
        self.avatar_id_list.clear();
        self.ultra_cnt = 0;
        self.total_delay_cumulate = 0.;
        self.cost_time = 0.;
        self.pve_avatar_list.clear();
        self.monster_list.clear();
        self.round_cnt = 0;
        self.cocoon_dead_wave = 0;
        self.avatar_battle_turns = 0;
        self.monster_battle_turns = 0;
        self.NBDEKMAKPKJ.clear();
        self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE = 0;
        self.IJOLOFBJINB.clear();
        self.end_reason = ::protobuf::EnumOrUnknown::new(super::BattleEndReason::BattleEndReason::BATTLE_END_REASON_NONE);
        self.GLOJPNLNHJH.clear();
        self.IICCEFCGPAK.clear();
        self.LDGAANONMBK.clear();
        self.ADBHGKPNIKP.clear();
        self.ECEFBCNOFKB.clear();
        self.battle_target_info.clear();
        self.NAJLKHFLLPG.clear();
        self.JPGIFCHJDLK.clear();
        self.MNPHNJKGPKL.clear();
        self.LEDDODAMMNO = false;
        self.ENBJCPKGCOL.clear();
        self.NGOKNFDMHMF.clear();
        self.DKOEADNAMCJ = 0;
        self.IDCGPAKJFMD.clear();
        self.BILLJJBFIOL.clear();
        self.HMPGMILJAPB.clear();
        self.NOCIGFLLIFG.clear();
        self.JNJIIMJBOJP.clear();
        self.KKPKALJMAMF = 0;
        self.OKGCIPAHMEI.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BattleStatistics {
        static instance: ::protobuf::rt::Lazy<BattleStatistics> = ::protobuf::rt::Lazy::new();
        instance.get(BattleStatistics::new)
    }
}

impl ::protobuf::MessageFull for BattleStatistics {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BattleStatistics").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BattleStatistics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BattleStatistics {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16BattleStatistics.proto\x1a\x11AIGKNHFANGA.proto\x1a\x16AvatarBattl\
    eInfo.proto\x1a\x11BAAGNOHEHMA.proto\x1a\x11BDMGOEJBFGL.proto\x1a\x15Bat\
    tleEndReason.proto\x1a\x1bBattleEventBattleInfo.proto\x1a\x16BattleTarge\
    tList.proto\x1a\x11CHDONIGOKNM.proto\x1a\x11DEMLPCNDJJP.proto\x1a\x11EAG\
    OCAHFGAF.proto\x1a\x11EKBAGMOMECL.proto\x1a\x1bEvolveBuildBattleInfo.pro\
    to\x1a\x11GMKEPCOMHPN.proto\x1a\x11IBFFAJOHKMO.proto\x1a\x11IIIPHJIMNID.\
    proto\x1a\x11JFFNDOBBNFB.proto\x1a\x11LAFIENGMEMJ.proto\x1a\x11MMNDJAMEB\
    ML.proto\x1a\x11NMCMOHAHOPL.proto\x1a\x11PEDJNPJKOCK.proto\"\xdf\x0e\n\
    \x10BattleStatistics\x12,\n\x12total_battle_turns\x18\x01\x20\x01(\rR\
    \x10totalBattleTurns\x12(\n\x10total_auto_turns\x18\x02\x20\x01(\rR\x0et\
    otalAutoTurns\x12$\n\x0eavatar_id_list\x18\x03\x20\x03(\rR\x0cavatarIdLi\
    st\x12\x1b\n\tultra_cnt\x18\x04\x20\x01(\rR\x08ultraCnt\x120\n\x14total_\
    delay_cumulate\x18\x05\x20\x01(\x01R\x12totalDelayCumulate\x12\x1b\n\tco\
    st_time\x18\x06\x20\x01(\x01R\x08costTime\x129\n\x0fpve_avatar_list\x18\
    \x07\x20\x03(\x0b2\x11.AvatarBattleInfoR\rpveAvatarList\x12/\n\x0cmonste\
    r_list\x18\x08\x20\x03(\x0b2\x0c.LAFIENGMEMJR\x0bmonsterList\x12\x1b\n\t\
    round_cnt\x18\t\x20\x01(\rR\x08roundCnt\x12(\n\x10cocoon_dead_wave\x18\n\
    \x20\x01(\rR\x0ecocoonDeadWave\x12.\n\x13avatar_battle_turns\x18\x0b\x20\
    \x01(\rR\x11avatarBattleTurns\x120\n\x14monster_battle_turns\x18\x0c\x20\
    \x01(\rR\x12monsterBattleTurns\x12D\n\x0bNBDEKMAKPKJ\x18\r\x20\x03(\x0b2\
    \".BattleStatistics.NBDEKMAKPKJEntryR\x0bNBDEKMAKPKJ\x12J\n\"BATTLE_TARG\
    ET_TYPE_CHALLENGE_SCORE\x18\x0e\x20\x01(\rR\x1eBATTLETARGETTYPECHALLENGE\
    SCORE\x128\n\x0bIJOLOFBJINB\x18\x10\x20\x03(\x0b2\x16.BattleEventBattleI\
    nfoR\x0bIJOLOFBJINB\x12/\n\nend_reason\x18\x13\x20\x01(\x0e2\x10.BattleE\
    ndReasonR\tendReason\x12.\n\x0bGLOJPNLNHJH\x18\x15\x20\x03(\x0b2\x0c.IBF\
    FAJOHKMOR\x0bGLOJPNLNHJH\x12\x20\n\x0bIICCEFCGPAK\x18\x16\x20\x03(\x05R\
    \x0bIICCEFCGPAK\x12.\n\x0bLDGAANONMBK\x18\x17\x20\x03(\x0b2\x0c.IIIPHJIM\
    NIDR\x0bLDGAANONMBK\x12.\n\x0bADBHGKPNIKP\x18\x1a\x20\x03(\x0b2\x0c.MMND\
    JAMEBMLR\x0bADBHGKPNIKP\x12.\n\x0bECEFBCNOFKB\x18\x1b\x20\x03(\x0b2\x0c.\
    GMKEPCOMHPNR\x0bECEFBCNOFKB\x12U\n\x12battle_target_info\x18\x1c\x20\x03\
    (\x0b2'.BattleStatistics.BattleTargetInfoEntryR\x10battleTargetInfo\x12.\
    \n\x0bNAJLKHFLLPG\x18\x1d\x20\x03(\x0b2\x0c.EAGOCAHFGAFR\x0bNAJLKHFLLPG\
    \x128\n\x0bJPGIFCHJDLK\x18\x1e\x20\x01(\x0b2\x16.EvolveBuildBattleInfoR\
    \x0bJPGIFCHJDLK\x12.\n\x0bMNPHNJKGPKL\x18\x1f\x20\x01(\x0b2\x0c.CHDONIGO\
    KNMR\x0bMNPHNJKGPKL\x12\x20\n\x0bLEDDODAMMNO\x18\x20\x20\x01(\x08R\x0bLE\
    DDODAMMNO\x12.\n\x0bENBJCPKGCOL\x18!\x20\x03(\x0b2\x0c.JFFNDOBBNFBR\x0bE\
    NBJCPKGCOL\x12.\n\x0bNGOKNFDMHMF\x18\"\x20\x03(\x0b2\x0c.EKBAGMOMECLR\
    \x0bNGOKNFDMHMF\x12\x20\n\x0bDKOEADNAMCJ\x18#\x20\x01(\rR\x0bDKOEADNAMCJ\
    \x12.\n\x0bIDCGPAKJFMD\x18$\x20\x01(\x0b2\x0c.AIGKNHFANGAR\x0bIDCGPAKJFM\
    D\x12.\n\x0bBILLJJBFIOL\x18%\x20\x01(\x0b2\x0c.BAAGNOHEHMAR\x0bBILLJJBFI\
    OL\x12.\n\x0bHMPGMILJAPB\x18&\x20\x01(\x0b2\x0c.BDMGOEJBFGLR\x0bHMPGMILJ\
    APB\x12.\n\x0bNOCIGFLLIFG\x18'\x20\x01(\x0b2\x0c.NMCMOHAHOPLR\x0bNOCIGFL\
    LIFG\x12.\n\x0bJNJIIMJBOJP\x18(\x20\x01(\x0b2\x0c.DEMLPCNDJJPR\x0bJNJIIM\
    JBOJP\x12\x20\n\x0bKKPKALJMAMF\x18)\x20\x01(\rR\x0bKKPKALJMAMF\x12.\n\
    \x0bOKGCIPAHMEI\x18*\x20\x03(\x0b2\x0c.PEDJNPJKOCKR\x0bOKGCIPAHMEI\x1a>\
    \n\x10NBDEKMAKPKJEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\x02R\x05value:\x028\x01\x1aV\n\x15Battl\
    eTargetInfoEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12'\n\x05v\
    alue\x18\x02\x20\x01(\x0b2\x11.BattleTargetListR\x05value:\x028\x01b\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(20);
            deps.push(super::AIGKNHFANGA::file_descriptor().clone());
            deps.push(super::AvatarBattleInfo::file_descriptor().clone());
            deps.push(super::BAAGNOHEHMA::file_descriptor().clone());
            deps.push(super::BDMGOEJBFGL::file_descriptor().clone());
            deps.push(super::BattleEndReason::file_descriptor().clone());
            deps.push(super::BattleEventBattleInfo::file_descriptor().clone());
            deps.push(super::BattleTargetList::file_descriptor().clone());
            deps.push(super::CHDONIGOKNM::file_descriptor().clone());
            deps.push(super::DEMLPCNDJJP::file_descriptor().clone());
            deps.push(super::EAGOCAHFGAF::file_descriptor().clone());
            deps.push(super::EKBAGMOMECL::file_descriptor().clone());
            deps.push(super::EvolveBuildBattleInfo::file_descriptor().clone());
            deps.push(super::GMKEPCOMHPN::file_descriptor().clone());
            deps.push(super::IBFFAJOHKMO::file_descriptor().clone());
            deps.push(super::IIIPHJIMNID::file_descriptor().clone());
            deps.push(super::JFFNDOBBNFB::file_descriptor().clone());
            deps.push(super::LAFIENGMEMJ::file_descriptor().clone());
            deps.push(super::MMNDJAMEBML::file_descriptor().clone());
            deps.push(super::NMCMOHAHOPL::file_descriptor().clone());
            deps.push(super::PEDJNPJKOCK::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BattleStatistics::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
