// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueCommonDialogueInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueCommonDialogueInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueCommonDialogueInfo {
    // message oneof groups
    pub ACDOBBPLDBG: ::std::option::Option<rogue_common_dialogue_info::ACDOBBPLDBG>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueCommonDialogueInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueCommonDialogueInfo {
    fn default() -> &'a RogueCommonDialogueInfo {
        <RogueCommonDialogueInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueCommonDialogueInfo {
    pub fn new() -> RogueCommonDialogueInfo {
        ::std::default::Default::default()
    }

    // .RogueCommonDialogueBasicInfo dialogue_basic_info = 3;

    pub fn dialogue_basic_info(&self) -> &super::RogueCommonDialogueBasicInfo::RogueCommonDialogueBasicInfo {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(ref v)) => v,
            _ => <super::RogueCommonDialogueBasicInfo::RogueCommonDialogueBasicInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_dialogue_basic_info(&mut self) {
        self.ACDOBBPLDBG = ::std::option::Option::None;
    }

    pub fn has_dialogue_basic_info(&self) -> bool {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dialogue_basic_info(&mut self, v: super::RogueCommonDialogueBasicInfo::RogueCommonDialogueBasicInfo) {
        self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dialogue_basic_info(&mut self) -> &mut super::RogueCommonDialogueBasicInfo::RogueCommonDialogueBasicInfo {
        if let ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(_)) = self.ACDOBBPLDBG {
        } else {
            self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(super::RogueCommonDialogueBasicInfo::RogueCommonDialogueBasicInfo::new()));
        }
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dialogue_basic_info(&mut self) -> super::RogueCommonDialogueBasicInfo::RogueCommonDialogueBasicInfo {
        if self.has_dialogue_basic_info() {
            match self.ACDOBBPLDBG.take() {
                ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonDialogueBasicInfo::RogueCommonDialogueBasicInfo::new()
        }
    }

    // .GNJAPOMLLHE ADMAHLAALNH = 10;

    pub fn ADMAHLAALNH(&self) -> &super::GNJAPOMLLHE::GNJAPOMLLHE {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(ref v)) => v,
            _ => <super::GNJAPOMLLHE::GNJAPOMLLHE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ADMAHLAALNH(&mut self) {
        self.ACDOBBPLDBG = ::std::option::Option::None;
    }

    pub fn has_ADMAHLAALNH(&self) -> bool {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ADMAHLAALNH(&mut self, v: super::GNJAPOMLLHE::GNJAPOMLLHE) {
        self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ADMAHLAALNH(&mut self) -> &mut super::GNJAPOMLLHE::GNJAPOMLLHE {
        if let ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(_)) = self.ACDOBBPLDBG {
        } else {
            self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(super::GNJAPOMLLHE::GNJAPOMLLHE::new()));
        }
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ADMAHLAALNH(&mut self) -> super::GNJAPOMLLHE::GNJAPOMLLHE {
        if self.has_ADMAHLAALNH() {
            match self.ACDOBBPLDBG.take() {
                ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GNJAPOMLLHE::GNJAPOMLLHE::new()
        }
    }

    // .CNHHPDHBMDC ODDGCBPOPLF = 2;

    pub fn ODDGCBPOPLF(&self) -> &super::CNHHPDHBMDC::CNHHPDHBMDC {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(ref v)) => v,
            _ => <super::CNHHPDHBMDC::CNHHPDHBMDC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ODDGCBPOPLF(&mut self) {
        self.ACDOBBPLDBG = ::std::option::Option::None;
    }

    pub fn has_ODDGCBPOPLF(&self) -> bool {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ODDGCBPOPLF(&mut self, v: super::CNHHPDHBMDC::CNHHPDHBMDC) {
        self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ODDGCBPOPLF(&mut self) -> &mut super::CNHHPDHBMDC::CNHHPDHBMDC {
        if let ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(_)) = self.ACDOBBPLDBG {
        } else {
            self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(super::CNHHPDHBMDC::CNHHPDHBMDC::new()));
        }
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ODDGCBPOPLF(&mut self) -> super::CNHHPDHBMDC::CNHHPDHBMDC {
        if self.has_ODDGCBPOPLF() {
            match self.ACDOBBPLDBG.take() {
                ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CNHHPDHBMDC::CNHHPDHBMDC::new()
        }
    }

    // .JIEAAFJENLK GMAKHONAEPH = 11;

    pub fn GMAKHONAEPH(&self) -> &super::JIEAAFJENLK::JIEAAFJENLK {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(ref v)) => v,
            _ => <super::JIEAAFJENLK::JIEAAFJENLK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GMAKHONAEPH(&mut self) {
        self.ACDOBBPLDBG = ::std::option::Option::None;
    }

    pub fn has_GMAKHONAEPH(&self) -> bool {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GMAKHONAEPH(&mut self, v: super::JIEAAFJENLK::JIEAAFJENLK) {
        self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GMAKHONAEPH(&mut self) -> &mut super::JIEAAFJENLK::JIEAAFJENLK {
        if let ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(_)) = self.ACDOBBPLDBG {
        } else {
            self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(super::JIEAAFJENLK::JIEAAFJENLK::new()));
        }
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GMAKHONAEPH(&mut self) -> super::JIEAAFJENLK::JIEAAFJENLK {
        if self.has_GMAKHONAEPH() {
            match self.ACDOBBPLDBG.take() {
                ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JIEAAFJENLK::JIEAAFJENLK::new()
        }
    }

    // .HPJLAFHHGJG CACGEKAANKL = 9;

    pub fn CACGEKAANKL(&self) -> &super::HPJLAFHHGJG::HPJLAFHHGJG {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(ref v)) => v,
            _ => <super::HPJLAFHHGJG::HPJLAFHHGJG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CACGEKAANKL(&mut self) {
        self.ACDOBBPLDBG = ::std::option::Option::None;
    }

    pub fn has_CACGEKAANKL(&self) -> bool {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CACGEKAANKL(&mut self, v: super::HPJLAFHHGJG::HPJLAFHHGJG) {
        self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CACGEKAANKL(&mut self) -> &mut super::HPJLAFHHGJG::HPJLAFHHGJG {
        if let ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(_)) = self.ACDOBBPLDBG {
        } else {
            self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(super::HPJLAFHHGJG::HPJLAFHHGJG::new()));
        }
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CACGEKAANKL(&mut self) -> super::HPJLAFHHGJG::HPJLAFHHGJG {
        if self.has_CACGEKAANKL() {
            match self.ACDOBBPLDBG.take() {
                ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HPJLAFHHGJG::HPJLAFHHGJG::new()
        }
    }

    // .AFCCAOACNAK AGGBLHGKPFJ = 7;

    pub fn AGGBLHGKPFJ(&self) -> &super::AFCCAOACNAK::AFCCAOACNAK {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(ref v)) => v,
            _ => <super::AFCCAOACNAK::AFCCAOACNAK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AGGBLHGKPFJ(&mut self) {
        self.ACDOBBPLDBG = ::std::option::Option::None;
    }

    pub fn has_AGGBLHGKPFJ(&self) -> bool {
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AGGBLHGKPFJ(&mut self, v: super::AFCCAOACNAK::AFCCAOACNAK) {
        self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AGGBLHGKPFJ(&mut self) -> &mut super::AFCCAOACNAK::AFCCAOACNAK {
        if let ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(_)) = self.ACDOBBPLDBG {
        } else {
            self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(super::AFCCAOACNAK::AFCCAOACNAK::new()));
        }
        match self.ACDOBBPLDBG {
            ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AGGBLHGKPFJ(&mut self) -> super::AFCCAOACNAK::AFCCAOACNAK {
        if self.has_AGGBLHGKPFJ() {
            match self.ACDOBBPLDBG.take() {
                ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AFCCAOACNAK::AFCCAOACNAK::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonDialogueBasicInfo::RogueCommonDialogueBasicInfo>(
            "dialogue_basic_info",
            RogueCommonDialogueInfo::has_dialogue_basic_info,
            RogueCommonDialogueInfo::dialogue_basic_info,
            RogueCommonDialogueInfo::mut_dialogue_basic_info,
            RogueCommonDialogueInfo::set_dialogue_basic_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GNJAPOMLLHE::GNJAPOMLLHE>(
            "ADMAHLAALNH",
            RogueCommonDialogueInfo::has_ADMAHLAALNH,
            RogueCommonDialogueInfo::ADMAHLAALNH,
            RogueCommonDialogueInfo::mut_ADMAHLAALNH,
            RogueCommonDialogueInfo::set_ADMAHLAALNH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CNHHPDHBMDC::CNHHPDHBMDC>(
            "ODDGCBPOPLF",
            RogueCommonDialogueInfo::has_ODDGCBPOPLF,
            RogueCommonDialogueInfo::ODDGCBPOPLF,
            RogueCommonDialogueInfo::mut_ODDGCBPOPLF,
            RogueCommonDialogueInfo::set_ODDGCBPOPLF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JIEAAFJENLK::JIEAAFJENLK>(
            "GMAKHONAEPH",
            RogueCommonDialogueInfo::has_GMAKHONAEPH,
            RogueCommonDialogueInfo::GMAKHONAEPH,
            RogueCommonDialogueInfo::mut_GMAKHONAEPH,
            RogueCommonDialogueInfo::set_GMAKHONAEPH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HPJLAFHHGJG::HPJLAFHHGJG>(
            "CACGEKAANKL",
            RogueCommonDialogueInfo::has_CACGEKAANKL,
            RogueCommonDialogueInfo::CACGEKAANKL,
            RogueCommonDialogueInfo::mut_CACGEKAANKL,
            RogueCommonDialogueInfo::set_CACGEKAANKL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AFCCAOACNAK::AFCCAOACNAK>(
            "AGGBLHGKPFJ",
            RogueCommonDialogueInfo::has_AGGBLHGKPFJ,
            RogueCommonDialogueInfo::AGGBLHGKPFJ,
            RogueCommonDialogueInfo::mut_AGGBLHGKPFJ,
            RogueCommonDialogueInfo::set_AGGBLHGKPFJ,
        ));
        oneofs.push(rogue_common_dialogue_info::ACDOBBPLDBG::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueCommonDialogueInfo>(
            "RogueCommonDialogueInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueCommonDialogueInfo {
    const NAME: &'static str = "RogueCommonDialogueInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(is.read_message()?));
                },
                82 => {
                    self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(is.read_message()?));
                },
                18 => {
                    self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(is.read_message()?));
                },
                90 => {
                    self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(is.read_message()?));
                },
                74 => {
                    self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(is.read_message()?));
                },
                58 => {
                    self.ACDOBBPLDBG = ::std::option::Option::Some(rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ACDOBBPLDBG {
            match v {
                &rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ACDOBBPLDBG {
            match v {
                &rogue_common_dialogue_info::ACDOBBPLDBG::DialogueBasicInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::ADMAHLAALNH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::ODDGCBPOPLF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::GMAKHONAEPH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::CACGEKAANKL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &rogue_common_dialogue_info::ACDOBBPLDBG::AGGBLHGKPFJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueCommonDialogueInfo {
        RogueCommonDialogueInfo::new()
    }

    fn clear(&mut self) {
        self.ACDOBBPLDBG = ::std::option::Option::None;
        self.ACDOBBPLDBG = ::std::option::Option::None;
        self.ACDOBBPLDBG = ::std::option::Option::None;
        self.ACDOBBPLDBG = ::std::option::Option::None;
        self.ACDOBBPLDBG = ::std::option::Option::None;
        self.ACDOBBPLDBG = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueCommonDialogueInfo {
        static instance: RogueCommonDialogueInfo = RogueCommonDialogueInfo {
            ACDOBBPLDBG: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueCommonDialogueInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueCommonDialogueInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueCommonDialogueInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueCommonDialogueInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueCommonDialogueInfo`
pub mod rogue_common_dialogue_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueCommonDialogueInfo.ACDOBBPLDBG)
    pub enum ACDOBBPLDBG {
        // @@protoc_insertion_point(oneof_field:RogueCommonDialogueInfo.dialogue_basic_info)
        DialogueBasicInfo(super::super::RogueCommonDialogueBasicInfo::RogueCommonDialogueBasicInfo),
        // @@protoc_insertion_point(oneof_field:RogueCommonDialogueInfo.ADMAHLAALNH)
        ADMAHLAALNH(super::super::GNJAPOMLLHE::GNJAPOMLLHE),
        // @@protoc_insertion_point(oneof_field:RogueCommonDialogueInfo.ODDGCBPOPLF)
        ODDGCBPOPLF(super::super::CNHHPDHBMDC::CNHHPDHBMDC),
        // @@protoc_insertion_point(oneof_field:RogueCommonDialogueInfo.GMAKHONAEPH)
        GMAKHONAEPH(super::super::JIEAAFJENLK::JIEAAFJENLK),
        // @@protoc_insertion_point(oneof_field:RogueCommonDialogueInfo.CACGEKAANKL)
        CACGEKAANKL(super::super::HPJLAFHHGJG::HPJLAFHHGJG),
        // @@protoc_insertion_point(oneof_field:RogueCommonDialogueInfo.AGGBLHGKPFJ)
        AGGBLHGKPFJ(super::super::AFCCAOACNAK::AFCCAOACNAK),
    }

    impl ::protobuf::Oneof for ACDOBBPLDBG {
    }

    impl ::protobuf::OneofFull for ACDOBBPLDBG {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueCommonDialogueInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("ACDOBBPLDBG").unwrap()).clone()
        }
    }

    impl ACDOBBPLDBG {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ACDOBBPLDBG>("ACDOBBPLDBG")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dRogueCommonDialogueInfo.proto\x1a\x11AFCCAOACNAK.proto\x1a\x11CNHH\
    PDHBMDC.proto\x1a\x11GNJAPOMLLHE.proto\x1a\x11HPJLAFHHGJG.proto\x1a\x11J\
    IEAAFJENLK.proto\x1a\"RogueCommonDialogueBasicInfo.proto\"\xf3\x02\n\x17\
    RogueCommonDialogueInfo\x12O\n\x13dialogue_basic_info\x18\x03\x20\x01(\
    \x0b2\x1d.RogueCommonDialogueBasicInfoH\0R\x11dialogueBasicInfo\x120\n\
    \x0bADMAHLAALNH\x18\n\x20\x01(\x0b2\x0c.GNJAPOMLLHEH\0R\x0bADMAHLAALNH\
    \x120\n\x0bODDGCBPOPLF\x18\x02\x20\x01(\x0b2\x0c.CNHHPDHBMDCH\0R\x0bODDG\
    CBPOPLF\x120\n\x0bGMAKHONAEPH\x18\x0b\x20\x01(\x0b2\x0c.JIEAAFJENLKH\0R\
    \x0bGMAKHONAEPH\x120\n\x0bCACGEKAANKL\x18\t\x20\x01(\x0b2\x0c.HPJLAFHHGJ\
    GH\0R\x0bCACGEKAANKL\x120\n\x0bAGGBLHGKPFJ\x18\x07\x20\x01(\x0b2\x0c.AFC\
    CAOACNAKH\0R\x0bAGGBLHGKPFJB\r\n\x0bACDOBBPLDBGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::AFCCAOACNAK::file_descriptor().clone());
            deps.push(super::CNHHPDHBMDC::file_descriptor().clone());
            deps.push(super::GNJAPOMLLHE::file_descriptor().clone());
            deps.push(super::HPJLAFHHGJG::file_descriptor().clone());
            deps.push(super::JIEAAFJENLK::file_descriptor().clone());
            deps.push(super::RogueCommonDialogueBasicInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueCommonDialogueInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
