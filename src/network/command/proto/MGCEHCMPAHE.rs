// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MGCEHCMPAHE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:MGCEHCMPAHE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MGCEHCMPAHE {
    // message fields
    // @@protoc_insertion_point(field:MGCEHCMPAHE.EHBGHCGKFBH)
    pub EHBGHCGKFBH: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MGCEHCMPAHE.JJDOACKKCBJ)
    pub JJDOACKKCBJ: ::protobuf::MessageField<super::JGOGDBMPLCP::JGOGDBMPLCP>,
    // @@protoc_insertion_point(field:MGCEHCMPAHE.MFKJDOEBLIM)
    pub MFKJDOEBLIM: ::protobuf::MessageField<super::DLIKBEGADFP::DLIKBEGADFP>,
    // @@protoc_insertion_point(field:MGCEHCMPAHE.NGPIGMBNIAC)
    pub NGPIGMBNIAC: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:MGCEHCMPAHE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MGCEHCMPAHE {
    fn default() -> &'a MGCEHCMPAHE {
        <MGCEHCMPAHE as ::protobuf::Message>::default_instance()
    }
}

impl MGCEHCMPAHE {
    pub fn new() -> MGCEHCMPAHE {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EHBGHCGKFBH",
            |m: &MGCEHCMPAHE| { &m.EHBGHCGKFBH },
            |m: &mut MGCEHCMPAHE| { &mut m.EHBGHCGKFBH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JGOGDBMPLCP::JGOGDBMPLCP>(
            "JJDOACKKCBJ",
            |m: &MGCEHCMPAHE| { &m.JJDOACKKCBJ },
            |m: &mut MGCEHCMPAHE| { &mut m.JJDOACKKCBJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DLIKBEGADFP::DLIKBEGADFP>(
            "MFKJDOEBLIM",
            |m: &MGCEHCMPAHE| { &m.MFKJDOEBLIM },
            |m: &mut MGCEHCMPAHE| { &mut m.MFKJDOEBLIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NGPIGMBNIAC",
            |m: &MGCEHCMPAHE| { &m.NGPIGMBNIAC },
            |m: &mut MGCEHCMPAHE| { &mut m.NGPIGMBNIAC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MGCEHCMPAHE>(
            "MGCEHCMPAHE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MGCEHCMPAHE {
    const NAME: &'static str = "MGCEHCMPAHE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.EHBGHCGKFBH)?;
                },
                120 => {
                    self.EHBGHCGKFBH.push(is.read_uint32()?);
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JJDOACKKCBJ)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MFKJDOEBLIM)?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.NGPIGMBNIAC)?;
                },
                32 => {
                    self.NGPIGMBNIAC.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(15, &self.EHBGHCGKFBH);
        if let Some(v) = self.JJDOACKKCBJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MFKJDOEBLIM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(4, &self.NGPIGMBNIAC);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(15, &self.EHBGHCGKFBH)?;
        if let Some(v) = self.JJDOACKKCBJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.MFKJDOEBLIM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        os.write_repeated_packed_uint32(4, &self.NGPIGMBNIAC)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MGCEHCMPAHE {
        MGCEHCMPAHE::new()
    }

    fn clear(&mut self) {
        self.EHBGHCGKFBH.clear();
        self.JJDOACKKCBJ.clear();
        self.MFKJDOEBLIM.clear();
        self.NGPIGMBNIAC.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MGCEHCMPAHE {
        static instance: MGCEHCMPAHE = MGCEHCMPAHE {
            EHBGHCGKFBH: ::std::vec::Vec::new(),
            JJDOACKKCBJ: ::protobuf::MessageField::none(),
            MFKJDOEBLIM: ::protobuf::MessageField::none(),
            NGPIGMBNIAC: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MGCEHCMPAHE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MGCEHCMPAHE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MGCEHCMPAHE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MGCEHCMPAHE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MGCEHCMPAHE.proto\x1a\x11DLIKBEGADFP.proto\x1a\x11JGOGDBMPLCP.prot\
    o\"\xb1\x01\n\x0bMGCEHCMPAHE\x12\x20\n\x0bEHBGHCGKFBH\x18\x0f\x20\x03(\r\
    R\x0bEHBGHCGKFBH\x12.\n\x0bJJDOACKKCBJ\x18\x0e\x20\x01(\x0b2\x0c.JGOGDBM\
    PLCPR\x0bJJDOACKKCBJ\x12.\n\x0bMFKJDOEBLIM\x18\x0c\x20\x01(\x0b2\x0c.DLI\
    KBEGADFPR\x0bMFKJDOEBLIM\x12\x20\n\x0bNGPIGMBNIAC\x18\x04\x20\x03(\rR\
    \x0bNGPIGMBNIACb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::DLIKBEGADFP::file_descriptor().clone());
            deps.push(super::JGOGDBMPLCP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MGCEHCMPAHE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
