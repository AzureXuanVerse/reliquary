// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MusicRhythmDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:MusicRhythmDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MusicRhythmDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:MusicRhythmDataScRsp.music_level)
    pub music_level: ::std::vec::Vec<super::MusicRhythmLevel::MusicRhythmLevel>,
    // @@protoc_insertion_point(field:MusicRhythmDataScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:MusicRhythmDataScRsp.unlock_track_list)
    pub unlock_track_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MusicRhythmDataScRsp.music_group)
    pub music_group: ::std::vec::Vec<super::MusicRhythmGroup::MusicRhythmGroup>,
    // @@protoc_insertion_point(field:MusicRhythmDataScRsp.unlock_song_list)
    pub unlock_song_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MusicRhythmDataScRsp.show_hint)
    pub show_hint: bool,
    // @@protoc_insertion_point(field:MusicRhythmDataScRsp.unlock_phase_list)
    pub unlock_phase_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MusicRhythmDataScRsp.cur_level_id)
    pub cur_level_id: u32,
    // @@protoc_insertion_point(field:MusicRhythmDataScRsp.cur_song_id)
    pub cur_song_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:MusicRhythmDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MusicRhythmDataScRsp {
    fn default() -> &'a MusicRhythmDataScRsp {
        <MusicRhythmDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl MusicRhythmDataScRsp {
    pub fn new() -> MusicRhythmDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "music_level",
            |m: &MusicRhythmDataScRsp| { &m.music_level },
            |m: &mut MusicRhythmDataScRsp| { &mut m.music_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &MusicRhythmDataScRsp| { &m.retcode },
            |m: &mut MusicRhythmDataScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unlock_track_list",
            |m: &MusicRhythmDataScRsp| { &m.unlock_track_list },
            |m: &mut MusicRhythmDataScRsp| { &mut m.unlock_track_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "music_group",
            |m: &MusicRhythmDataScRsp| { &m.music_group },
            |m: &mut MusicRhythmDataScRsp| { &mut m.music_group },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unlock_song_list",
            |m: &MusicRhythmDataScRsp| { &m.unlock_song_list },
            |m: &mut MusicRhythmDataScRsp| { &mut m.unlock_song_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "show_hint",
            |m: &MusicRhythmDataScRsp| { &m.show_hint },
            |m: &mut MusicRhythmDataScRsp| { &mut m.show_hint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unlock_phase_list",
            |m: &MusicRhythmDataScRsp| { &m.unlock_phase_list },
            |m: &mut MusicRhythmDataScRsp| { &mut m.unlock_phase_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_level_id",
            |m: &MusicRhythmDataScRsp| { &m.cur_level_id },
            |m: &mut MusicRhythmDataScRsp| { &mut m.cur_level_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_song_id",
            |m: &MusicRhythmDataScRsp| { &m.cur_song_id },
            |m: &mut MusicRhythmDataScRsp| { &mut m.cur_song_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MusicRhythmDataScRsp>(
            "MusicRhythmDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MusicRhythmDataScRsp {
    const NAME: &'static str = "MusicRhythmDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    self.music_level.push(is.read_message()?);
                },
                56 => {
                    self.retcode = is.read_uint32()?;
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.unlock_track_list)?;
                },
                48 => {
                    self.unlock_track_list.push(is.read_uint32()?);
                },
                66 => {
                    self.music_group.push(is.read_message()?);
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.unlock_song_list)?;
                },
                120 => {
                    self.unlock_song_list.push(is.read_uint32()?);
                },
                104 => {
                    self.show_hint = is.read_bool()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.unlock_phase_list)?;
                },
                72 => {
                    self.unlock_phase_list.push(is.read_uint32()?);
                },
                80 => {
                    self.cur_level_id = is.read_uint32()?;
                },
                8 => {
                    self.cur_song_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.music_level {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.retcode);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(6, &self.unlock_track_list);
        for value in &self.music_group {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(15, &self.unlock_song_list);
        if self.show_hint != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(9, &self.unlock_phase_list);
        if self.cur_level_id != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.cur_level_id);
        }
        if self.cur_song_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.cur_song_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.music_level {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(7, self.retcode)?;
        }
        os.write_repeated_packed_uint32(6, &self.unlock_track_list)?;
        for v in &self.music_group {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_repeated_packed_uint32(15, &self.unlock_song_list)?;
        if self.show_hint != false {
            os.write_bool(13, self.show_hint)?;
        }
        os.write_repeated_packed_uint32(9, &self.unlock_phase_list)?;
        if self.cur_level_id != 0 {
            os.write_uint32(10, self.cur_level_id)?;
        }
        if self.cur_song_id != 0 {
            os.write_uint32(1, self.cur_song_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MusicRhythmDataScRsp {
        MusicRhythmDataScRsp::new()
    }

    fn clear(&mut self) {
        self.music_level.clear();
        self.retcode = 0;
        self.unlock_track_list.clear();
        self.music_group.clear();
        self.unlock_song_list.clear();
        self.show_hint = false;
        self.unlock_phase_list.clear();
        self.cur_level_id = 0;
        self.cur_song_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MusicRhythmDataScRsp {
        static instance: MusicRhythmDataScRsp = MusicRhythmDataScRsp {
            music_level: ::std::vec::Vec::new(),
            retcode: 0,
            unlock_track_list: ::std::vec::Vec::new(),
            music_group: ::std::vec::Vec::new(),
            unlock_song_list: ::std::vec::Vec::new(),
            show_hint: false,
            unlock_phase_list: ::std::vec::Vec::new(),
            cur_level_id: 0,
            cur_song_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MusicRhythmDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MusicRhythmDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MusicRhythmDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MusicRhythmDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aMusicRhythmDataScRsp.proto\x1a\x16MusicRhythmGroup.proto\x1a\x16Mu\
    sicRhythmLevel.proto\"\xf9\x02\n\x14MusicRhythmDataScRsp\x122\n\x0bmusic\
    _level\x18\x0e\x20\x03(\x0b2\x11.MusicRhythmLevelR\nmusicLevel\x12\x18\n\
    \x07retcode\x18\x07\x20\x01(\rR\x07retcode\x12*\n\x11unlock_track_list\
    \x18\x06\x20\x03(\rR\x0funlockTrackList\x122\n\x0bmusic_group\x18\x08\
    \x20\x03(\x0b2\x11.MusicRhythmGroupR\nmusicGroup\x12(\n\x10unlock_song_l\
    ist\x18\x0f\x20\x03(\rR\x0eunlockSongList\x12\x1b\n\tshow_hint\x18\r\x20\
    \x01(\x08R\x08showHint\x12*\n\x11unlock_phase_list\x18\t\x20\x03(\rR\x0f\
    unlockPhaseList\x12\x20\n\x0ccur_level_id\x18\n\x20\x01(\rR\ncurLevelId\
    \x12\x1e\n\x0bcur_song_id\x18\x01\x20\x01(\rR\tcurSongIdb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::MusicRhythmGroup::file_descriptor().clone());
            deps.push(super::MusicRhythmLevel::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MusicRhythmDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
