// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ReplayInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ReplayInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReplayInfo {
    // message fields
    // @@protoc_insertion_point(field:ReplayInfo.DKNPKJMAHCM)
    pub DKNPKJMAHCM: u64,
    // @@protoc_insertion_point(field:ReplayInfo.replay_type)
    pub replay_type: ::protobuf::EnumOrUnknown<super::ReplayType::ReplayType>,
    // @@protoc_insertion_point(field:ReplayInfo.stage_id)
    pub stage_id: u32,
    // @@protoc_insertion_point(field:ReplayInfo.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:ReplayInfo.nickname)
    pub nickname: ::std::string::String,
    // @@protoc_insertion_point(field:ReplayInfo.head_icon)
    pub head_icon: u32,
    // @@protoc_insertion_point(field:ReplayInfo.replay_name)
    pub replay_name: ::std::string::String,
    // @@protoc_insertion_point(field:ReplayInfo.create_time)
    pub create_time: u64,
    // @@protoc_insertion_point(field:ReplayInfo.AFEHLMFIBMD)
    pub AFEHLMFIBMD: u32,
    // @@protoc_insertion_point(field:ReplayInfo.CMPBKBBKAOA)
    pub CMPBKBBKAOA: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ReplayInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReplayInfo {
    fn default() -> &'a ReplayInfo {
        <ReplayInfo as ::protobuf::Message>::default_instance()
    }
}

impl ReplayInfo {
    pub fn new() -> ReplayInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKNPKJMAHCM",
            |m: &ReplayInfo| { &m.DKNPKJMAHCM },
            |m: &mut ReplayInfo| { &mut m.DKNPKJMAHCM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "replay_type",
            |m: &ReplayInfo| { &m.replay_type },
            |m: &mut ReplayInfo| { &mut m.replay_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stage_id",
            |m: &ReplayInfo| { &m.stage_id },
            |m: &mut ReplayInfo| { &mut m.stage_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &ReplayInfo| { &m.uid },
            |m: &mut ReplayInfo| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nickname",
            |m: &ReplayInfo| { &m.nickname },
            |m: &mut ReplayInfo| { &mut m.nickname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "head_icon",
            |m: &ReplayInfo| { &m.head_icon },
            |m: &mut ReplayInfo| { &mut m.head_icon },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "replay_name",
            |m: &ReplayInfo| { &m.replay_name },
            |m: &mut ReplayInfo| { &mut m.replay_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "create_time",
            |m: &ReplayInfo| { &m.create_time },
            |m: &mut ReplayInfo| { &mut m.create_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AFEHLMFIBMD",
            |m: &ReplayInfo| { &m.AFEHLMFIBMD },
            |m: &mut ReplayInfo| { &mut m.AFEHLMFIBMD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMPBKBBKAOA",
            |m: &ReplayInfo| { &m.CMPBKBBKAOA },
            |m: &mut ReplayInfo| { &mut m.CMPBKBBKAOA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReplayInfo>(
            "ReplayInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReplayInfo {
    const NAME: &'static str = "ReplayInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.DKNPKJMAHCM = is.read_uint64()?;
                },
                16 => {
                    self.replay_type = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.stage_id = is.read_uint32()?;
                },
                32 => {
                    self.uid = is.read_uint32()?;
                },
                42 => {
                    self.nickname = is.read_string()?;
                },
                48 => {
                    self.head_icon = is.read_uint32()?;
                },
                58 => {
                    self.replay_name = is.read_string()?;
                },
                64 => {
                    self.create_time = is.read_uint64()?;
                },
                72 => {
                    self.AFEHLMFIBMD = is.read_uint32()?;
                },
                80 => {
                    self.CMPBKBBKAOA = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.DKNPKJMAHCM != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.DKNPKJMAHCM);
        }
        if self.replay_type != ::protobuf::EnumOrUnknown::new(super::ReplayType::ReplayType::REPLAY_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.replay_type.value());
        }
        if self.stage_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.stage_id);
        }
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.uid);
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.nickname);
        }
        if self.head_icon != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.head_icon);
        }
        if !self.replay_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.replay_name);
        }
        if self.create_time != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.create_time);
        }
        if self.AFEHLMFIBMD != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.AFEHLMFIBMD);
        }
        if self.CMPBKBBKAOA != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.CMPBKBBKAOA);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.DKNPKJMAHCM != 0 {
            os.write_uint64(1, self.DKNPKJMAHCM)?;
        }
        if self.replay_type != ::protobuf::EnumOrUnknown::new(super::ReplayType::ReplayType::REPLAY_TYPE_NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.replay_type))?;
        }
        if self.stage_id != 0 {
            os.write_uint32(3, self.stage_id)?;
        }
        if self.uid != 0 {
            os.write_uint32(4, self.uid)?;
        }
        if !self.nickname.is_empty() {
            os.write_string(5, &self.nickname)?;
        }
        if self.head_icon != 0 {
            os.write_uint32(6, self.head_icon)?;
        }
        if !self.replay_name.is_empty() {
            os.write_string(7, &self.replay_name)?;
        }
        if self.create_time != 0 {
            os.write_uint64(8, self.create_time)?;
        }
        if self.AFEHLMFIBMD != 0 {
            os.write_uint32(9, self.AFEHLMFIBMD)?;
        }
        if self.CMPBKBBKAOA != 0 {
            os.write_uint32(10, self.CMPBKBBKAOA)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReplayInfo {
        ReplayInfo::new()
    }

    fn clear(&mut self) {
        self.DKNPKJMAHCM = 0;
        self.replay_type = ::protobuf::EnumOrUnknown::new(super::ReplayType::ReplayType::REPLAY_TYPE_NONE);
        self.stage_id = 0;
        self.uid = 0;
        self.nickname.clear();
        self.head_icon = 0;
        self.replay_name.clear();
        self.create_time = 0;
        self.AFEHLMFIBMD = 0;
        self.CMPBKBBKAOA = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReplayInfo {
        static instance: ReplayInfo = ReplayInfo {
            DKNPKJMAHCM: 0,
            replay_type: ::protobuf::EnumOrUnknown::from_i32(0),
            stage_id: 0,
            uid: 0,
            nickname: ::std::string::String::new(),
            head_icon: 0,
            replay_name: ::std::string::String::new(),
            create_time: 0,
            AFEHLMFIBMD: 0,
            CMPBKBBKAOA: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReplayInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReplayInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReplayInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplayInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10ReplayInfo.proto\x1a\x10ReplayType.proto\"\xc8\x02\n\nReplayInfo\
    \x12\x20\n\x0bDKNPKJMAHCM\x18\x01\x20\x01(\x04R\x0bDKNPKJMAHCM\x12,\n\
    \x0breplay_type\x18\x02\x20\x01(\x0e2\x0b.ReplayTypeR\nreplayType\x12\
    \x19\n\x08stage_id\x18\x03\x20\x01(\rR\x07stageId\x12\x10\n\x03uid\x18\
    \x04\x20\x01(\rR\x03uid\x12\x1a\n\x08nickname\x18\x05\x20\x01(\tR\x08nic\
    kname\x12\x1b\n\thead_icon\x18\x06\x20\x01(\rR\x08headIcon\x12\x1f\n\x0b\
    replay_name\x18\x07\x20\x01(\tR\nreplayName\x12\x1f\n\x0bcreate_time\x18\
    \x08\x20\x01(\x04R\ncreateTime\x12\x20\n\x0bAFEHLMFIBMD\x18\t\x20\x01(\r\
    R\x0bAFEHLMFIBMD\x12\x20\n\x0bCMPBKBBKAOA\x18\n\x20\x01(\rR\x0bCMPBKBBKA\
    OAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ReplayType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ReplayInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
