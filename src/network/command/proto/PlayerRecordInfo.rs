// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerRecordInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PlayerRecordInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerRecordInfo {
    // message fields
    // @@protoc_insertion_point(field:PlayerRecordInfo.EMJDEBDMHLL)
    pub EMJDEBDMHLL: u32,
    // @@protoc_insertion_point(field:PlayerRecordInfo.BHFEFEODNIM)
    pub BHFEFEODNIM: u32,
    // @@protoc_insertion_point(field:PlayerRecordInfo.HKNOAKGCJBK)
    pub HKNOAKGCJBK: u32,
    // @@protoc_insertion_point(field:PlayerRecordInfo.collection_info)
    pub collection_info: ::protobuf::MessageField<super::PlayerCollectionInfo::PlayerCollectionInfo>,
    // @@protoc_insertion_point(field:PlayerRecordInfo.CFDFMGLLICO)
    pub CFDFMGLLICO: u32,
    // @@protoc_insertion_point(field:PlayerRecordInfo.FHKKMPDDMGO)
    pub FHKKMPDDMGO: u32,
    // @@protoc_insertion_point(field:PlayerRecordInfo.EHBDEIJJOHK)
    pub EHBDEIJJOHK: u32,
    // @@protoc_insertion_point(field:PlayerRecordInfo.GEKKNDONHLJ)
    pub GEKKNDONHLJ: u32,
    // @@protoc_insertion_point(field:PlayerRecordInfo.JFPGBKBPBNF)
    pub JFPGBKBPBNF: u32,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerRecordInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerRecordInfo {
    fn default() -> &'a PlayerRecordInfo {
        <PlayerRecordInfo as ::protobuf::Message>::default_instance()
    }
}

impl PlayerRecordInfo {
    pub fn new() -> PlayerRecordInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EMJDEBDMHLL",
            |m: &PlayerRecordInfo| { &m.EMJDEBDMHLL },
            |m: &mut PlayerRecordInfo| { &mut m.EMJDEBDMHLL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BHFEFEODNIM",
            |m: &PlayerRecordInfo| { &m.BHFEFEODNIM },
            |m: &mut PlayerRecordInfo| { &mut m.BHFEFEODNIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HKNOAKGCJBK",
            |m: &PlayerRecordInfo| { &m.HKNOAKGCJBK },
            |m: &mut PlayerRecordInfo| { &mut m.HKNOAKGCJBK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PlayerCollectionInfo::PlayerCollectionInfo>(
            "collection_info",
            |m: &PlayerRecordInfo| { &m.collection_info },
            |m: &mut PlayerRecordInfo| { &mut m.collection_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CFDFMGLLICO",
            |m: &PlayerRecordInfo| { &m.CFDFMGLLICO },
            |m: &mut PlayerRecordInfo| { &mut m.CFDFMGLLICO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FHKKMPDDMGO",
            |m: &PlayerRecordInfo| { &m.FHKKMPDDMGO },
            |m: &mut PlayerRecordInfo| { &mut m.FHKKMPDDMGO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EHBDEIJJOHK",
            |m: &PlayerRecordInfo| { &m.EHBDEIJJOHK },
            |m: &mut PlayerRecordInfo| { &mut m.EHBDEIJJOHK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GEKKNDONHLJ",
            |m: &PlayerRecordInfo| { &m.GEKKNDONHLJ },
            |m: &mut PlayerRecordInfo| { &mut m.GEKKNDONHLJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JFPGBKBPBNF",
            |m: &PlayerRecordInfo| { &m.JFPGBKBPBNF },
            |m: &mut PlayerRecordInfo| { &mut m.JFPGBKBPBNF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerRecordInfo>(
            "PlayerRecordInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerRecordInfo {
    const NAME: &'static str = "PlayerRecordInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.EMJDEBDMHLL = is.read_uint32()?;
                },
                48 => {
                    self.BHFEFEODNIM = is.read_uint32()?;
                },
                56 => {
                    self.HKNOAKGCJBK = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.collection_info)?;
                },
                16 => {
                    self.CFDFMGLLICO = is.read_uint32()?;
                },
                40 => {
                    self.FHKKMPDDMGO = is.read_uint32()?;
                },
                88 => {
                    self.EHBDEIJJOHK = is.read_uint32()?;
                },
                24 => {
                    self.GEKKNDONHLJ = is.read_uint32()?;
                },
                112 => {
                    self.JFPGBKBPBNF = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.EMJDEBDMHLL != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.EMJDEBDMHLL);
        }
        if self.BHFEFEODNIM != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.BHFEFEODNIM);
        }
        if self.HKNOAKGCJBK != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.HKNOAKGCJBK);
        }
        if let Some(v) = self.collection_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.CFDFMGLLICO != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.CFDFMGLLICO);
        }
        if self.FHKKMPDDMGO != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.FHKKMPDDMGO);
        }
        if self.EHBDEIJJOHK != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.EHBDEIJJOHK);
        }
        if self.GEKKNDONHLJ != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.GEKKNDONHLJ);
        }
        if self.JFPGBKBPBNF != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.JFPGBKBPBNF);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.EMJDEBDMHLL != 0 {
            os.write_uint32(4, self.EMJDEBDMHLL)?;
        }
        if self.BHFEFEODNIM != 0 {
            os.write_uint32(6, self.BHFEFEODNIM)?;
        }
        if self.HKNOAKGCJBK != 0 {
            os.write_uint32(7, self.HKNOAKGCJBK)?;
        }
        if let Some(v) = self.collection_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.CFDFMGLLICO != 0 {
            os.write_uint32(2, self.CFDFMGLLICO)?;
        }
        if self.FHKKMPDDMGO != 0 {
            os.write_uint32(5, self.FHKKMPDDMGO)?;
        }
        if self.EHBDEIJJOHK != 0 {
            os.write_uint32(11, self.EHBDEIJJOHK)?;
        }
        if self.GEKKNDONHLJ != 0 {
            os.write_uint32(3, self.GEKKNDONHLJ)?;
        }
        if self.JFPGBKBPBNF != 0 {
            os.write_uint32(14, self.JFPGBKBPBNF)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerRecordInfo {
        PlayerRecordInfo::new()
    }

    fn clear(&mut self) {
        self.EMJDEBDMHLL = 0;
        self.BHFEFEODNIM = 0;
        self.HKNOAKGCJBK = 0;
        self.collection_info.clear();
        self.CFDFMGLLICO = 0;
        self.FHKKMPDDMGO = 0;
        self.EHBDEIJJOHK = 0;
        self.GEKKNDONHLJ = 0;
        self.JFPGBKBPBNF = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerRecordInfo {
        static instance: PlayerRecordInfo = PlayerRecordInfo {
            EMJDEBDMHLL: 0,
            BHFEFEODNIM: 0,
            HKNOAKGCJBK: 0,
            collection_info: ::protobuf::MessageField::none(),
            CFDFMGLLICO: 0,
            FHKKMPDDMGO: 0,
            EHBDEIJJOHK: 0,
            GEKKNDONHLJ: 0,
            JFPGBKBPBNF: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerRecordInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerRecordInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerRecordInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerRecordInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16PlayerRecordInfo.proto\x1a\x1aPlayerCollectionInfo.proto\"\xe2\x02\
    \n\x10PlayerRecordInfo\x12\x20\n\x0bEMJDEBDMHLL\x18\x04\x20\x01(\rR\x0bE\
    MJDEBDMHLL\x12\x20\n\x0bBHFEFEODNIM\x18\x06\x20\x01(\rR\x0bBHFEFEODNIM\
    \x12\x20\n\x0bHKNOAKGCJBK\x18\x07\x20\x01(\rR\x0bHKNOAKGCJBK\x12>\n\x0fc\
    ollection_info\x18\r\x20\x01(\x0b2\x15.PlayerCollectionInfoR\x0ecollecti\
    onInfo\x12\x20\n\x0bCFDFMGLLICO\x18\x02\x20\x01(\rR\x0bCFDFMGLLICO\x12\
    \x20\n\x0bFHKKMPDDMGO\x18\x05\x20\x01(\rR\x0bFHKKMPDDMGO\x12\x20\n\x0bEH\
    BDEIJJOHK\x18\x0b\x20\x01(\rR\x0bEHBDEIJJOHK\x12\x20\n\x0bGEKKNDONHLJ\
    \x18\x03\x20\x01(\rR\x0bGEKKNDONHLJ\x12\x20\n\x0bJFPGBKBPBNF\x18\x0e\x20\
    \x01(\rR\x0bJFPGBKBPBNFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::PlayerCollectionInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerRecordInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
