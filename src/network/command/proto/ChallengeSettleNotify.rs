// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChallengeSettleNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ChallengeSettleNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChallengeSettleNotify {
    // message fields
    // @@protoc_insertion_point(field:ChallengeSettleNotify.challenge_score)
    pub challenge_score: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.max_level)
    pub max_level: ::protobuf::MessageField<super::ChallengeHistoryMaxLevel::ChallengeHistoryMaxLevel>,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.challenge_id)
    pub challenge_id: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.cur_challenge)
    pub cur_challenge: ::protobuf::MessageField<super::CurChallenge::CurChallenge>,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.LPLJMKPBLIF)
    pub LPLJMKPBLIF: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.is_win)
    pub is_win: bool,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.reward)
    pub reward: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.star)
    pub star: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.score_two)
    pub score_two: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.HAHAEIFMLBM)
    pub HAHAEIFMLBM: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ChallengeSettleNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChallengeSettleNotify {
    fn default() -> &'a ChallengeSettleNotify {
        <ChallengeSettleNotify as ::protobuf::Message>::default_instance()
    }
}

impl ChallengeSettleNotify {
    pub fn new() -> ChallengeSettleNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "challenge_score",
            |m: &ChallengeSettleNotify| { &m.challenge_score },
            |m: &mut ChallengeSettleNotify| { &mut m.challenge_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ChallengeHistoryMaxLevel::ChallengeHistoryMaxLevel>(
            "max_level",
            |m: &ChallengeSettleNotify| { &m.max_level },
            |m: &mut ChallengeSettleNotify| { &mut m.max_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "challenge_id",
            |m: &ChallengeSettleNotify| { &m.challenge_id },
            |m: &mut ChallengeSettleNotify| { &mut m.challenge_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CurChallenge::CurChallenge>(
            "cur_challenge",
            |m: &ChallengeSettleNotify| { &m.cur_challenge },
            |m: &mut ChallengeSettleNotify| { &mut m.cur_challenge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LPLJMKPBLIF",
            |m: &ChallengeSettleNotify| { &m.LPLJMKPBLIF },
            |m: &mut ChallengeSettleNotify| { &mut m.LPLJMKPBLIF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_win",
            |m: &ChallengeSettleNotify| { &m.is_win },
            |m: &mut ChallengeSettleNotify| { &mut m.is_win },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "reward",
            |m: &ChallengeSettleNotify| { &m.reward },
            |m: &mut ChallengeSettleNotify| { &mut m.reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "star",
            |m: &ChallengeSettleNotify| { &m.star },
            |m: &mut ChallengeSettleNotify| { &mut m.star },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score_two",
            |m: &ChallengeSettleNotify| { &m.score_two },
            |m: &mut ChallengeSettleNotify| { &mut m.score_two },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HAHAEIFMLBM",
            |m: &ChallengeSettleNotify| { &m.HAHAEIFMLBM },
            |m: &mut ChallengeSettleNotify| { &mut m.HAHAEIFMLBM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChallengeSettleNotify>(
            "ChallengeSettleNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChallengeSettleNotify {
    const NAME: &'static str = "ChallengeSettleNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.challenge_score = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.max_level)?;
                },
                8 => {
                    self.challenge_id = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cur_challenge)?;
                },
                120 => {
                    self.LPLJMKPBLIF = is.read_uint32()?;
                },
                56 => {
                    self.is_win = is.read_bool()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reward)?;
                },
                48 => {
                    self.star = is.read_uint32()?;
                },
                88 => {
                    self.score_two = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.HAHAEIFMLBM)?;
                },
                72 => {
                    self.HAHAEIFMLBM.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.challenge_score != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.challenge_score);
        }
        if let Some(v) = self.max_level.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.challenge_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.challenge_id);
        }
        if let Some(v) = self.cur_challenge.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.LPLJMKPBLIF != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.LPLJMKPBLIF);
        }
        if self.is_win != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.reward.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.star != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.star);
        }
        if self.score_two != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.score_two);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(9, &self.HAHAEIFMLBM);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.challenge_score != 0 {
            os.write_uint32(4, self.challenge_score)?;
        }
        if let Some(v) = self.max_level.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.challenge_id != 0 {
            os.write_uint32(1, self.challenge_id)?;
        }
        if let Some(v) = self.cur_challenge.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.LPLJMKPBLIF != 0 {
            os.write_uint32(15, self.LPLJMKPBLIF)?;
        }
        if self.is_win != false {
            os.write_bool(7, self.is_win)?;
        }
        if let Some(v) = self.reward.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.star != 0 {
            os.write_uint32(6, self.star)?;
        }
        if self.score_two != 0 {
            os.write_uint32(11, self.score_two)?;
        }
        os.write_repeated_packed_uint32(9, &self.HAHAEIFMLBM)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChallengeSettleNotify {
        ChallengeSettleNotify::new()
    }

    fn clear(&mut self) {
        self.challenge_score = 0;
        self.max_level.clear();
        self.challenge_id = 0;
        self.cur_challenge.clear();
        self.LPLJMKPBLIF = 0;
        self.is_win = false;
        self.reward.clear();
        self.star = 0;
        self.score_two = 0;
        self.HAHAEIFMLBM.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChallengeSettleNotify {
        static instance: ChallengeSettleNotify = ChallengeSettleNotify {
            challenge_score: 0,
            max_level: ::protobuf::MessageField::none(),
            challenge_id: 0,
            cur_challenge: ::protobuf::MessageField::none(),
            LPLJMKPBLIF: 0,
            is_win: false,
            reward: ::protobuf::MessageField::none(),
            star: 0,
            score_two: 0,
            HAHAEIFMLBM: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChallengeSettleNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChallengeSettleNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChallengeSettleNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChallengeSettleNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bChallengeSettleNotify.proto\x1a\x1eChallengeHistoryMaxLevel.proto\
    \x1a\x12CurChallenge.proto\x1a\x0eItemList.proto\"\xfe\x02\n\x15Challeng\
    eSettleNotify\x12'\n\x0fchallenge_score\x18\x04\x20\x01(\rR\x0echallenge\
    Score\x126\n\tmax_level\x18\x02\x20\x01(\x0b2\x19.ChallengeHistoryMaxLev\
    elR\x08maxLevel\x12!\n\x0cchallenge_id\x18\x01\x20\x01(\rR\x0bchallengeI\
    d\x122\n\rcur_challenge\x18\r\x20\x01(\x0b2\r.CurChallengeR\x0ccurChalle\
    nge\x12\x20\n\x0bLPLJMKPBLIF\x18\x0f\x20\x01(\rR\x0bLPLJMKPBLIF\x12\x15\
    \n\x06is_win\x18\x07\x20\x01(\x08R\x05isWin\x12!\n\x06reward\x18\x03\x20\
    \x01(\x0b2\t.ItemListR\x06reward\x12\x12\n\x04star\x18\x06\x20\x01(\rR\
    \x04star\x12\x1b\n\tscore_two\x18\x0b\x20\x01(\rR\x08scoreTwo\x12\x20\n\
    \x0bHAHAEIFMLBM\x18\t\x20\x03(\rR\x0bHAHAEIFMLBMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ChallengeHistoryMaxLevel::file_descriptor().clone());
            deps.push(super::CurChallenge::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChallengeSettleNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
