// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdBattlePassType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdBattlePassType)
pub enum CmdBattlePassType {
    // @@protoc_insertion_point(enum_value:CmdBattlePassType.CmdBattlePassTypeNone)
    CmdBattlePassTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdBattlePassType.CmdBuyBpLevelScRsp)
    CmdBuyBpLevelScRsp = 3070,
    // @@protoc_insertion_point(enum_value:CmdBattlePassType.CmdBuyBpLevelCsReq)
    CmdBuyBpLevelCsReq = 3021,
    // @@protoc_insertion_point(enum_value:CmdBattlePassType.CmdTakeAllRewardScRsp)
    CmdTakeAllRewardScRsp = 3054,
    // @@protoc_insertion_point(enum_value:CmdBattlePassType.CmdTakeBpRewardScRsp)
    CmdTakeBpRewardScRsp = 3027,
    // @@protoc_insertion_point(enum_value:CmdBattlePassType.CmdTakeBpRewardCsReq)
    CmdTakeBpRewardCsReq = 3039,
    // @@protoc_insertion_point(enum_value:CmdBattlePassType.CmdTakeAllRewardCsReq)
    CmdTakeAllRewardCsReq = 3059,
    // @@protoc_insertion_point(enum_value:CmdBattlePassType.CmdBattlePassInfoNotify)
    CmdBattlePassInfoNotify = 3020,
}

impl ::protobuf::Enum for CmdBattlePassType {
    const NAME: &'static str = "CmdBattlePassType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdBattlePassType> {
        match value {
            0 => ::std::option::Option::Some(CmdBattlePassType::CmdBattlePassTypeNone),
            3070 => ::std::option::Option::Some(CmdBattlePassType::CmdBuyBpLevelScRsp),
            3021 => ::std::option::Option::Some(CmdBattlePassType::CmdBuyBpLevelCsReq),
            3054 => ::std::option::Option::Some(CmdBattlePassType::CmdTakeAllRewardScRsp),
            3027 => ::std::option::Option::Some(CmdBattlePassType::CmdTakeBpRewardScRsp),
            3039 => ::std::option::Option::Some(CmdBattlePassType::CmdTakeBpRewardCsReq),
            3059 => ::std::option::Option::Some(CmdBattlePassType::CmdTakeAllRewardCsReq),
            3020 => ::std::option::Option::Some(CmdBattlePassType::CmdBattlePassInfoNotify),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdBattlePassType> {
        match str {
            "CmdBattlePassTypeNone" => ::std::option::Option::Some(CmdBattlePassType::CmdBattlePassTypeNone),
            "CmdBuyBpLevelScRsp" => ::std::option::Option::Some(CmdBattlePassType::CmdBuyBpLevelScRsp),
            "CmdBuyBpLevelCsReq" => ::std::option::Option::Some(CmdBattlePassType::CmdBuyBpLevelCsReq),
            "CmdTakeAllRewardScRsp" => ::std::option::Option::Some(CmdBattlePassType::CmdTakeAllRewardScRsp),
            "CmdTakeBpRewardScRsp" => ::std::option::Option::Some(CmdBattlePassType::CmdTakeBpRewardScRsp),
            "CmdTakeBpRewardCsReq" => ::std::option::Option::Some(CmdBattlePassType::CmdTakeBpRewardCsReq),
            "CmdTakeAllRewardCsReq" => ::std::option::Option::Some(CmdBattlePassType::CmdTakeAllRewardCsReq),
            "CmdBattlePassInfoNotify" => ::std::option::Option::Some(CmdBattlePassType::CmdBattlePassInfoNotify),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdBattlePassType] = &[
        CmdBattlePassType::CmdBattlePassTypeNone,
        CmdBattlePassType::CmdBuyBpLevelScRsp,
        CmdBattlePassType::CmdBuyBpLevelCsReq,
        CmdBattlePassType::CmdTakeAllRewardScRsp,
        CmdBattlePassType::CmdTakeBpRewardScRsp,
        CmdBattlePassType::CmdTakeBpRewardCsReq,
        CmdBattlePassType::CmdTakeAllRewardCsReq,
        CmdBattlePassType::CmdBattlePassInfoNotify,
    ];
}

impl ::protobuf::EnumFull for CmdBattlePassType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdBattlePassType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdBattlePassType::CmdBattlePassTypeNone => 0,
            CmdBattlePassType::CmdBuyBpLevelScRsp => 1,
            CmdBattlePassType::CmdBuyBpLevelCsReq => 2,
            CmdBattlePassType::CmdTakeAllRewardScRsp => 3,
            CmdBattlePassType::CmdTakeBpRewardScRsp => 4,
            CmdBattlePassType::CmdTakeBpRewardCsReq => 5,
            CmdBattlePassType::CmdTakeAllRewardCsReq => 6,
            CmdBattlePassType::CmdBattlePassInfoNotify => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdBattlePassType {
    fn default() -> Self {
        CmdBattlePassType::CmdBattlePassTypeNone
    }
}

impl CmdBattlePassType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdBattlePassType>("CmdBattlePassType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17CmdBattlePassType.proto*\xec\x01\n\x11CmdBattlePassType\x12\x19\n\
    \x15CmdBattlePassTypeNone\x10\0\x12\x17\n\x12CmdBuyBpLevelScRsp\x10\xfe\
    \x17\x12\x17\n\x12CmdBuyBpLevelCsReq\x10\xcd\x17\x12\x1a\n\x15CmdTakeAll\
    RewardScRsp\x10\xee\x17\x12\x19\n\x14CmdTakeBpRewardScRsp\x10\xd3\x17\
    \x12\x19\n\x14CmdTakeBpRewardCsReq\x10\xdf\x17\x12\x1a\n\x15CmdTakeAllRe\
    wardCsReq\x10\xf3\x17\x12\x1c\n\x17CmdBattlePassInfoNotify\x10\xcc\x17b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdBattlePassType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
