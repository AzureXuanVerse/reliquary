// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JKMFMMPMNAM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:JKMFMMPMNAM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JKMFMMPMNAM {
    // message oneof groups
    pub ADGKFOAPJJK: ::std::option::Option<jkmfmmpmnam::ADGKFOAPJJK>,
    // special fields
    // @@protoc_insertion_point(special_field:JKMFMMPMNAM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JKMFMMPMNAM {
    fn default() -> &'a JKMFMMPMNAM {
        <JKMFMMPMNAM as ::protobuf::Message>::default_instance()
    }
}

impl JKMFMMPMNAM {
    pub fn new() -> JKMFMMPMNAM {
        ::std::default::Default::default()
    }

    // .DPDIEGOAGBP KANGPCOKFNE = 14;

    pub fn KANGPCOKFNE(&self) -> &super::DPDIEGOAGBP::DPDIEGOAGBP {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(ref v)) => v,
            _ => <super::DPDIEGOAGBP::DPDIEGOAGBP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KANGPCOKFNE(&mut self) {
        self.ADGKFOAPJJK = ::std::option::Option::None;
    }

    pub fn has_KANGPCOKFNE(&self) -> bool {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KANGPCOKFNE(&mut self, v: super::DPDIEGOAGBP::DPDIEGOAGBP) {
        self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KANGPCOKFNE(&mut self) -> &mut super::DPDIEGOAGBP::DPDIEGOAGBP {
        if let ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(_)) = self.ADGKFOAPJJK {
        } else {
            self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(super::DPDIEGOAGBP::DPDIEGOAGBP::new()));
        }
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KANGPCOKFNE(&mut self) -> super::DPDIEGOAGBP::DPDIEGOAGBP {
        if self.has_KANGPCOKFNE() {
            match self.ADGKFOAPJJK.take() {
                ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DPDIEGOAGBP::DPDIEGOAGBP::new()
        }
    }

    // .FPEGPJCEOEI HHCIFNFMKLA = 10;

    pub fn HHCIFNFMKLA(&self) -> &super::FPEGPJCEOEI::FPEGPJCEOEI {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(ref v)) => v,
            _ => <super::FPEGPJCEOEI::FPEGPJCEOEI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HHCIFNFMKLA(&mut self) {
        self.ADGKFOAPJJK = ::std::option::Option::None;
    }

    pub fn has_HHCIFNFMKLA(&self) -> bool {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HHCIFNFMKLA(&mut self, v: super::FPEGPJCEOEI::FPEGPJCEOEI) {
        self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HHCIFNFMKLA(&mut self) -> &mut super::FPEGPJCEOEI::FPEGPJCEOEI {
        if let ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(_)) = self.ADGKFOAPJJK {
        } else {
            self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(super::FPEGPJCEOEI::FPEGPJCEOEI::new()));
        }
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HHCIFNFMKLA(&mut self) -> super::FPEGPJCEOEI::FPEGPJCEOEI {
        if self.has_HHCIFNFMKLA() {
            match self.ADGKFOAPJJK.take() {
                ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FPEGPJCEOEI::FPEGPJCEOEI::new()
        }
    }

    // .FKHFONPKDIP OCGPLMNKMLK = 4;

    pub fn OCGPLMNKMLK(&self) -> &super::FKHFONPKDIP::FKHFONPKDIP {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(ref v)) => v,
            _ => <super::FKHFONPKDIP::FKHFONPKDIP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OCGPLMNKMLK(&mut self) {
        self.ADGKFOAPJJK = ::std::option::Option::None;
    }

    pub fn has_OCGPLMNKMLK(&self) -> bool {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OCGPLMNKMLK(&mut self, v: super::FKHFONPKDIP::FKHFONPKDIP) {
        self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OCGPLMNKMLK(&mut self) -> &mut super::FKHFONPKDIP::FKHFONPKDIP {
        if let ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(_)) = self.ADGKFOAPJJK {
        } else {
            self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(super::FKHFONPKDIP::FKHFONPKDIP::new()));
        }
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OCGPLMNKMLK(&mut self) -> super::FKHFONPKDIP::FKHFONPKDIP {
        if self.has_OCGPLMNKMLK() {
            match self.ADGKFOAPJJK.take() {
                ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FKHFONPKDIP::FKHFONPKDIP::new()
        }
    }

    // .AEJCCMEPLGO AKMNKLADOLM = 9;

    pub fn AKMNKLADOLM(&self) -> &super::AEJCCMEPLGO::AEJCCMEPLGO {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(ref v)) => v,
            _ => <super::AEJCCMEPLGO::AEJCCMEPLGO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AKMNKLADOLM(&mut self) {
        self.ADGKFOAPJJK = ::std::option::Option::None;
    }

    pub fn has_AKMNKLADOLM(&self) -> bool {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AKMNKLADOLM(&mut self, v: super::AEJCCMEPLGO::AEJCCMEPLGO) {
        self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AKMNKLADOLM(&mut self) -> &mut super::AEJCCMEPLGO::AEJCCMEPLGO {
        if let ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(_)) = self.ADGKFOAPJJK {
        } else {
            self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(super::AEJCCMEPLGO::AEJCCMEPLGO::new()));
        }
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AKMNKLADOLM(&mut self) -> super::AEJCCMEPLGO::AEJCCMEPLGO {
        if self.has_AKMNKLADOLM() {
            match self.ADGKFOAPJJK.take() {
                ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AEJCCMEPLGO::AEJCCMEPLGO::new()
        }
    }

    // .NIGCOPGHAMJ KKDDANDLFBD = 15;

    pub fn KKDDANDLFBD(&self) -> &super::NIGCOPGHAMJ::NIGCOPGHAMJ {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(ref v)) => v,
            _ => <super::NIGCOPGHAMJ::NIGCOPGHAMJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KKDDANDLFBD(&mut self) {
        self.ADGKFOAPJJK = ::std::option::Option::None;
    }

    pub fn has_KKDDANDLFBD(&self) -> bool {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KKDDANDLFBD(&mut self, v: super::NIGCOPGHAMJ::NIGCOPGHAMJ) {
        self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KKDDANDLFBD(&mut self) -> &mut super::NIGCOPGHAMJ::NIGCOPGHAMJ {
        if let ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(_)) = self.ADGKFOAPJJK {
        } else {
            self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(super::NIGCOPGHAMJ::NIGCOPGHAMJ::new()));
        }
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KKDDANDLFBD(&mut self) -> super::NIGCOPGHAMJ::NIGCOPGHAMJ {
        if self.has_KKDDANDLFBD() {
            match self.ADGKFOAPJJK.take() {
                ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NIGCOPGHAMJ::NIGCOPGHAMJ::new()
        }
    }

    // .KHPHAIFNJEI AFFNCONKEKP = 12;

    pub fn AFFNCONKEKP(&self) -> &super::KHPHAIFNJEI::KHPHAIFNJEI {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(ref v)) => v,
            _ => <super::KHPHAIFNJEI::KHPHAIFNJEI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AFFNCONKEKP(&mut self) {
        self.ADGKFOAPJJK = ::std::option::Option::None;
    }

    pub fn has_AFFNCONKEKP(&self) -> bool {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AFFNCONKEKP(&mut self, v: super::KHPHAIFNJEI::KHPHAIFNJEI) {
        self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AFFNCONKEKP(&mut self) -> &mut super::KHPHAIFNJEI::KHPHAIFNJEI {
        if let ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(_)) = self.ADGKFOAPJJK {
        } else {
            self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(super::KHPHAIFNJEI::KHPHAIFNJEI::new()));
        }
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AFFNCONKEKP(&mut self) -> super::KHPHAIFNJEI::KHPHAIFNJEI {
        if self.has_AFFNCONKEKP() {
            match self.ADGKFOAPJJK.take() {
                ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KHPHAIFNJEI::KHPHAIFNJEI::new()
        }
    }

    // .PLODIDCJOKA CNIBNGJDNJP = 8;

    pub fn CNIBNGJDNJP(&self) -> &super::PLODIDCJOKA::PLODIDCJOKA {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(ref v)) => v,
            _ => <super::PLODIDCJOKA::PLODIDCJOKA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CNIBNGJDNJP(&mut self) {
        self.ADGKFOAPJJK = ::std::option::Option::None;
    }

    pub fn has_CNIBNGJDNJP(&self) -> bool {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CNIBNGJDNJP(&mut self, v: super::PLODIDCJOKA::PLODIDCJOKA) {
        self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CNIBNGJDNJP(&mut self) -> &mut super::PLODIDCJOKA::PLODIDCJOKA {
        if let ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(_)) = self.ADGKFOAPJJK {
        } else {
            self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(super::PLODIDCJOKA::PLODIDCJOKA::new()));
        }
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CNIBNGJDNJP(&mut self) -> super::PLODIDCJOKA::PLODIDCJOKA {
        if self.has_CNIBNGJDNJP() {
            match self.ADGKFOAPJJK.take() {
                ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PLODIDCJOKA::PLODIDCJOKA::new()
        }
    }

    // .KHCAKPOMGNK OAPMKLFJKKG = 1;

    pub fn OAPMKLFJKKG(&self) -> &super::KHCAKPOMGNK::KHCAKPOMGNK {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(ref v)) => v,
            _ => <super::KHCAKPOMGNK::KHCAKPOMGNK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OAPMKLFJKKG(&mut self) {
        self.ADGKFOAPJJK = ::std::option::Option::None;
    }

    pub fn has_OAPMKLFJKKG(&self) -> bool {
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OAPMKLFJKKG(&mut self, v: super::KHCAKPOMGNK::KHCAKPOMGNK) {
        self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OAPMKLFJKKG(&mut self) -> &mut super::KHCAKPOMGNK::KHCAKPOMGNK {
        if let ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(_)) = self.ADGKFOAPJJK {
        } else {
            self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(super::KHCAKPOMGNK::KHCAKPOMGNK::new()));
        }
        match self.ADGKFOAPJJK {
            ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OAPMKLFJKKG(&mut self) -> super::KHCAKPOMGNK::KHCAKPOMGNK {
        if self.has_OAPMKLFJKKG() {
            match self.ADGKFOAPJJK.take() {
                ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KHCAKPOMGNK::KHCAKPOMGNK::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DPDIEGOAGBP::DPDIEGOAGBP>(
            "KANGPCOKFNE",
            JKMFMMPMNAM::has_KANGPCOKFNE,
            JKMFMMPMNAM::KANGPCOKFNE,
            JKMFMMPMNAM::mut_KANGPCOKFNE,
            JKMFMMPMNAM::set_KANGPCOKFNE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FPEGPJCEOEI::FPEGPJCEOEI>(
            "HHCIFNFMKLA",
            JKMFMMPMNAM::has_HHCIFNFMKLA,
            JKMFMMPMNAM::HHCIFNFMKLA,
            JKMFMMPMNAM::mut_HHCIFNFMKLA,
            JKMFMMPMNAM::set_HHCIFNFMKLA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FKHFONPKDIP::FKHFONPKDIP>(
            "OCGPLMNKMLK",
            JKMFMMPMNAM::has_OCGPLMNKMLK,
            JKMFMMPMNAM::OCGPLMNKMLK,
            JKMFMMPMNAM::mut_OCGPLMNKMLK,
            JKMFMMPMNAM::set_OCGPLMNKMLK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AEJCCMEPLGO::AEJCCMEPLGO>(
            "AKMNKLADOLM",
            JKMFMMPMNAM::has_AKMNKLADOLM,
            JKMFMMPMNAM::AKMNKLADOLM,
            JKMFMMPMNAM::mut_AKMNKLADOLM,
            JKMFMMPMNAM::set_AKMNKLADOLM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NIGCOPGHAMJ::NIGCOPGHAMJ>(
            "KKDDANDLFBD",
            JKMFMMPMNAM::has_KKDDANDLFBD,
            JKMFMMPMNAM::KKDDANDLFBD,
            JKMFMMPMNAM::mut_KKDDANDLFBD,
            JKMFMMPMNAM::set_KKDDANDLFBD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KHPHAIFNJEI::KHPHAIFNJEI>(
            "AFFNCONKEKP",
            JKMFMMPMNAM::has_AFFNCONKEKP,
            JKMFMMPMNAM::AFFNCONKEKP,
            JKMFMMPMNAM::mut_AFFNCONKEKP,
            JKMFMMPMNAM::set_AFFNCONKEKP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PLODIDCJOKA::PLODIDCJOKA>(
            "CNIBNGJDNJP",
            JKMFMMPMNAM::has_CNIBNGJDNJP,
            JKMFMMPMNAM::CNIBNGJDNJP,
            JKMFMMPMNAM::mut_CNIBNGJDNJP,
            JKMFMMPMNAM::set_CNIBNGJDNJP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KHCAKPOMGNK::KHCAKPOMGNK>(
            "OAPMKLFJKKG",
            JKMFMMPMNAM::has_OAPMKLFJKKG,
            JKMFMMPMNAM::OAPMKLFJKKG,
            JKMFMMPMNAM::mut_OAPMKLFJKKG,
            JKMFMMPMNAM::set_OAPMKLFJKKG,
        ));
        oneofs.push(jkmfmmpmnam::ADGKFOAPJJK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JKMFMMPMNAM>(
            "JKMFMMPMNAM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JKMFMMPMNAM {
    const NAME: &'static str = "JKMFMMPMNAM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(is.read_message()?));
                },
                82 => {
                    self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(is.read_message()?));
                },
                34 => {
                    self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(is.read_message()?));
                },
                74 => {
                    self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(is.read_message()?));
                },
                122 => {
                    self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(is.read_message()?));
                },
                98 => {
                    self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(is.read_message()?));
                },
                66 => {
                    self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(is.read_message()?));
                },
                10 => {
                    self.ADGKFOAPJJK = ::std::option::Option::Some(jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ADGKFOAPJJK {
            match v {
                &jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ADGKFOAPJJK {
            match v {
                &jkmfmmpmnam::ADGKFOAPJJK::KANGPCOKFNE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::HHCIFNFMKLA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::OCGPLMNKMLK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::AKMNKLADOLM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::KKDDANDLFBD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::AFFNCONKEKP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::CNIBNGJDNJP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &jkmfmmpmnam::ADGKFOAPJJK::OAPMKLFJKKG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JKMFMMPMNAM {
        JKMFMMPMNAM::new()
    }

    fn clear(&mut self) {
        self.ADGKFOAPJJK = ::std::option::Option::None;
        self.ADGKFOAPJJK = ::std::option::Option::None;
        self.ADGKFOAPJJK = ::std::option::Option::None;
        self.ADGKFOAPJJK = ::std::option::Option::None;
        self.ADGKFOAPJJK = ::std::option::Option::None;
        self.ADGKFOAPJJK = ::std::option::Option::None;
        self.ADGKFOAPJJK = ::std::option::Option::None;
        self.ADGKFOAPJJK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JKMFMMPMNAM {
        static instance: JKMFMMPMNAM = JKMFMMPMNAM {
            ADGKFOAPJJK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JKMFMMPMNAM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JKMFMMPMNAM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JKMFMMPMNAM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JKMFMMPMNAM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `JKMFMMPMNAM`
pub mod jkmfmmpmnam {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:JKMFMMPMNAM.ADGKFOAPJJK)
    pub enum ADGKFOAPJJK {
        // @@protoc_insertion_point(oneof_field:JKMFMMPMNAM.KANGPCOKFNE)
        KANGPCOKFNE(super::super::DPDIEGOAGBP::DPDIEGOAGBP),
        // @@protoc_insertion_point(oneof_field:JKMFMMPMNAM.HHCIFNFMKLA)
        HHCIFNFMKLA(super::super::FPEGPJCEOEI::FPEGPJCEOEI),
        // @@protoc_insertion_point(oneof_field:JKMFMMPMNAM.OCGPLMNKMLK)
        OCGPLMNKMLK(super::super::FKHFONPKDIP::FKHFONPKDIP),
        // @@protoc_insertion_point(oneof_field:JKMFMMPMNAM.AKMNKLADOLM)
        AKMNKLADOLM(super::super::AEJCCMEPLGO::AEJCCMEPLGO),
        // @@protoc_insertion_point(oneof_field:JKMFMMPMNAM.KKDDANDLFBD)
        KKDDANDLFBD(super::super::NIGCOPGHAMJ::NIGCOPGHAMJ),
        // @@protoc_insertion_point(oneof_field:JKMFMMPMNAM.AFFNCONKEKP)
        AFFNCONKEKP(super::super::KHPHAIFNJEI::KHPHAIFNJEI),
        // @@protoc_insertion_point(oneof_field:JKMFMMPMNAM.CNIBNGJDNJP)
        CNIBNGJDNJP(super::super::PLODIDCJOKA::PLODIDCJOKA),
        // @@protoc_insertion_point(oneof_field:JKMFMMPMNAM.OAPMKLFJKKG)
        OAPMKLFJKKG(super::super::KHCAKPOMGNK::KHCAKPOMGNK),
    }

    impl ::protobuf::Oneof for ADGKFOAPJJK {
    }

    impl ::protobuf::OneofFull for ADGKFOAPJJK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::JKMFMMPMNAM as ::protobuf::MessageFull>::descriptor().oneof_by_name("ADGKFOAPJJK").unwrap()).clone()
        }
    }

    impl ADGKFOAPJJK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ADGKFOAPJJK>("ADGKFOAPJJK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JKMFMMPMNAM.proto\x1a\x11AEJCCMEPLGO.proto\x1a\x11DPDIEGOAGBP.prot\
    o\x1a\x11FKHFONPKDIP.proto\x1a\x11FPEGPJCEOEI.proto\x1a\x11KHCAKPOMGNK.p\
    roto\x1a\x11KHPHAIFNJEI.proto\x1a\x11NIGCOPGHAMJ.proto\x1a\x11PLODIDCJOK\
    A.proto\"\xac\x03\n\x0bJKMFMMPMNAM\x120\n\x0bKANGPCOKFNE\x18\x0e\x20\x01\
    (\x0b2\x0c.DPDIEGOAGBPH\0R\x0bKANGPCOKFNE\x120\n\x0bHHCIFNFMKLA\x18\n\
    \x20\x01(\x0b2\x0c.FPEGPJCEOEIH\0R\x0bHHCIFNFMKLA\x120\n\x0bOCGPLMNKMLK\
    \x18\x04\x20\x01(\x0b2\x0c.FKHFONPKDIPH\0R\x0bOCGPLMNKMLK\x120\n\x0bAKMN\
    KLADOLM\x18\t\x20\x01(\x0b2\x0c.AEJCCMEPLGOH\0R\x0bAKMNKLADOLM\x120\n\
    \x0bKKDDANDLFBD\x18\x0f\x20\x01(\x0b2\x0c.NIGCOPGHAMJH\0R\x0bKKDDANDLFBD\
    \x120\n\x0bAFFNCONKEKP\x18\x0c\x20\x01(\x0b2\x0c.KHPHAIFNJEIH\0R\x0bAFFN\
    CONKEKP\x120\n\x0bCNIBNGJDNJP\x18\x08\x20\x01(\x0b2\x0c.PLODIDCJOKAH\0R\
    \x0bCNIBNGJDNJP\x120\n\x0bOAPMKLFJKKG\x18\x01\x20\x01(\x0b2\x0c.KHCAKPOM\
    GNKH\0R\x0bOAPMKLFJKKGB\r\n\x0bADGKFOAPJJKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::AEJCCMEPLGO::file_descriptor().clone());
            deps.push(super::DPDIEGOAGBP::file_descriptor().clone());
            deps.push(super::FKHFONPKDIP::file_descriptor().clone());
            deps.push(super::FPEGPJCEOEI::file_descriptor().clone());
            deps.push(super::KHCAKPOMGNK::file_descriptor().clone());
            deps.push(super::KHPHAIFNJEI::file_descriptor().clone());
            deps.push(super::NIGCOPGHAMJ::file_descriptor().clone());
            deps.push(super::PLODIDCJOKA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JKMFMMPMNAM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
