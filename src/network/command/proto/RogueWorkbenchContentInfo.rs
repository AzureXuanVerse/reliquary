// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueWorkbenchContentInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueWorkbenchContentInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueWorkbenchContentInfo {
    // message oneof groups
    pub ECOEKHPGMEA: ::std::option::Option<rogue_workbench_content_info::ECOEKHPGMEA>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueWorkbenchContentInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueWorkbenchContentInfo {
    fn default() -> &'a RogueWorkbenchContentInfo {
        <RogueWorkbenchContentInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueWorkbenchContentInfo {
    pub fn new() -> RogueWorkbenchContentInfo {
        ::std::default::Default::default()
    }

    // .WorkbenchReforgeBuffTargetInfo reforge_buff_func = 15;

    pub fn reforge_buff_func(&self) -> &super::WorkbenchReforgeBuffTargetInfo::WorkbenchReforgeBuffTargetInfo {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(ref v)) => v,
            _ => <super::WorkbenchReforgeBuffTargetInfo::WorkbenchReforgeBuffTargetInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reforge_buff_func(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_reforge_buff_func(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reforge_buff_func(&mut self, v: super::WorkbenchReforgeBuffTargetInfo::WorkbenchReforgeBuffTargetInfo) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reforge_buff_func(&mut self) -> &mut super::WorkbenchReforgeBuffTargetInfo::WorkbenchReforgeBuffTargetInfo {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(super::WorkbenchReforgeBuffTargetInfo::WorkbenchReforgeBuffTargetInfo::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reforge_buff_func(&mut self) -> super::WorkbenchReforgeBuffTargetInfo::WorkbenchReforgeBuffTargetInfo {
        if self.has_reforge_buff_func() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchReforgeBuffTargetInfo::WorkbenchReforgeBuffTargetInfo::new()
        }
    }

    // .WorkbenchReforgeFormulaTargetInfo reforge_formula_func = 10;

    pub fn reforge_formula_func(&self) -> &super::WorkbenchReforgeFormulaTargetInfo::WorkbenchReforgeFormulaTargetInfo {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(ref v)) => v,
            _ => <super::WorkbenchReforgeFormulaTargetInfo::WorkbenchReforgeFormulaTargetInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reforge_formula_func(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_reforge_formula_func(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reforge_formula_func(&mut self, v: super::WorkbenchReforgeFormulaTargetInfo::WorkbenchReforgeFormulaTargetInfo) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reforge_formula_func(&mut self) -> &mut super::WorkbenchReforgeFormulaTargetInfo::WorkbenchReforgeFormulaTargetInfo {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(super::WorkbenchReforgeFormulaTargetInfo::WorkbenchReforgeFormulaTargetInfo::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reforge_formula_func(&mut self) -> super::WorkbenchReforgeFormulaTargetInfo::WorkbenchReforgeFormulaTargetInfo {
        if self.has_reforge_formula_func() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchReforgeFormulaTargetInfo::WorkbenchReforgeFormulaTargetInfo::new()
        }
    }

    // .WorkbenchEnhanceBuffTargetInfo enhance_buff_func = 11;

    pub fn enhance_buff_func(&self) -> &super::WorkbenchEnhanceBuffTargetInfo::WorkbenchEnhanceBuffTargetInfo {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(ref v)) => v,
            _ => <super::WorkbenchEnhanceBuffTargetInfo::WorkbenchEnhanceBuffTargetInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_enhance_buff_func(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_enhance_buff_func(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enhance_buff_func(&mut self, v: super::WorkbenchEnhanceBuffTargetInfo::WorkbenchEnhanceBuffTargetInfo) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_enhance_buff_func(&mut self) -> &mut super::WorkbenchEnhanceBuffTargetInfo::WorkbenchEnhanceBuffTargetInfo {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(super::WorkbenchEnhanceBuffTargetInfo::WorkbenchEnhanceBuffTargetInfo::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_enhance_buff_func(&mut self) -> super::WorkbenchEnhanceBuffTargetInfo::WorkbenchEnhanceBuffTargetInfo {
        if self.has_enhance_buff_func() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchEnhanceBuffTargetInfo::WorkbenchEnhanceBuffTargetInfo::new()
        }
    }

    // .WorkbenchComposeMiracleTargetInfo compose_miracle_func = 3;

    pub fn compose_miracle_func(&self) -> &super::WorkbenchComposeMiracleTargetInfo::WorkbenchComposeMiracleTargetInfo {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(ref v)) => v,
            _ => <super::WorkbenchComposeMiracleTargetInfo::WorkbenchComposeMiracleTargetInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_compose_miracle_func(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_compose_miracle_func(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_compose_miracle_func(&mut self, v: super::WorkbenchComposeMiracleTargetInfo::WorkbenchComposeMiracleTargetInfo) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_compose_miracle_func(&mut self) -> &mut super::WorkbenchComposeMiracleTargetInfo::WorkbenchComposeMiracleTargetInfo {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(super::WorkbenchComposeMiracleTargetInfo::WorkbenchComposeMiracleTargetInfo::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_compose_miracle_func(&mut self) -> super::WorkbenchComposeMiracleTargetInfo::WorkbenchComposeMiracleTargetInfo {
        if self.has_compose_miracle_func() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchComposeMiracleTargetInfo::WorkbenchComposeMiracleTargetInfo::new()
        }
    }

    // .WorkbenchReforgeHexAvatarTargetInfo reforge_hex_avatar_func = 5;

    pub fn reforge_hex_avatar_func(&self) -> &super::WorkbenchReforgeHexAvatarTargetInfo::WorkbenchReforgeHexAvatarTargetInfo {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(ref v)) => v,
            _ => <super::WorkbenchReforgeHexAvatarTargetInfo::WorkbenchReforgeHexAvatarTargetInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reforge_hex_avatar_func(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_reforge_hex_avatar_func(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reforge_hex_avatar_func(&mut self, v: super::WorkbenchReforgeHexAvatarTargetInfo::WorkbenchReforgeHexAvatarTargetInfo) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reforge_hex_avatar_func(&mut self) -> &mut super::WorkbenchReforgeHexAvatarTargetInfo::WorkbenchReforgeHexAvatarTargetInfo {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(super::WorkbenchReforgeHexAvatarTargetInfo::WorkbenchReforgeHexAvatarTargetInfo::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reforge_hex_avatar_func(&mut self) -> super::WorkbenchReforgeHexAvatarTargetInfo::WorkbenchReforgeHexAvatarTargetInfo {
        if self.has_reforge_hex_avatar_func() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::WorkbenchReforgeHexAvatarTargetInfo::WorkbenchReforgeHexAvatarTargetInfo::new()
        }
    }

    // .JDOOIDBKCIM magic_item = 7;

    pub fn magic_item(&self) -> &super::JDOOIDBKCIM::JDOOIDBKCIM {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(ref v)) => v,
            _ => <super::JDOOIDBKCIM::JDOOIDBKCIM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_magic_item(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_magic_item(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_magic_item(&mut self, v: super::JDOOIDBKCIM::JDOOIDBKCIM) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(v))
    }

    // Mutable pointer to the field.
    pub fn mut_magic_item(&mut self) -> &mut super::JDOOIDBKCIM::JDOOIDBKCIM {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(super::JDOOIDBKCIM::JDOOIDBKCIM::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_magic_item(&mut self) -> super::JDOOIDBKCIM::JDOOIDBKCIM {
        if self.has_magic_item() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JDOOIDBKCIM::JDOOIDBKCIM::new()
        }
    }

    // .GJBBLCIPBHD game_magic_unit = 8;

    pub fn game_magic_unit(&self) -> &super::GJBBLCIPBHD::GJBBLCIPBHD {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(ref v)) => v,
            _ => <super::GJBBLCIPBHD::GJBBLCIPBHD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_game_magic_unit(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_game_magic_unit(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_game_magic_unit(&mut self, v: super::GJBBLCIPBHD::GJBBLCIPBHD) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_game_magic_unit(&mut self) -> &mut super::GJBBLCIPBHD::GJBBLCIPBHD {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(super::GJBBLCIPBHD::GJBBLCIPBHD::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_game_magic_unit(&mut self) -> super::GJBBLCIPBHD::GJBBLCIPBHD {
        if self.has_game_magic_unit() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GJBBLCIPBHD::GJBBLCIPBHD::new()
        }
    }

    // .LEHGLCELJMF CEAJNLIOFHF = 2;

    pub fn CEAJNLIOFHF(&self) -> &super::LEHGLCELJMF::LEHGLCELJMF {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(ref v)) => v,
            _ => <super::LEHGLCELJMF::LEHGLCELJMF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CEAJNLIOFHF(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_CEAJNLIOFHF(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CEAJNLIOFHF(&mut self, v: super::LEHGLCELJMF::LEHGLCELJMF) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CEAJNLIOFHF(&mut self) -> &mut super::LEHGLCELJMF::LEHGLCELJMF {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(super::LEHGLCELJMF::LEHGLCELJMF::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CEAJNLIOFHF(&mut self) -> super::LEHGLCELJMF::LEHGLCELJMF {
        if self.has_CEAJNLIOFHF() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LEHGLCELJMF::LEHGLCELJMF::new()
        }
    }

    // .FHJGLOPMFNC PGPAAPOPDOC = 13;

    pub fn PGPAAPOPDOC(&self) -> &super::FHJGLOPMFNC::FHJGLOPMFNC {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(ref v)) => v,
            _ => <super::FHJGLOPMFNC::FHJGLOPMFNC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PGPAAPOPDOC(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_PGPAAPOPDOC(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PGPAAPOPDOC(&mut self, v: super::FHJGLOPMFNC::FHJGLOPMFNC) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PGPAAPOPDOC(&mut self) -> &mut super::FHJGLOPMFNC::FHJGLOPMFNC {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(super::FHJGLOPMFNC::FHJGLOPMFNC::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PGPAAPOPDOC(&mut self) -> super::FHJGLOPMFNC::FHJGLOPMFNC {
        if self.has_PGPAAPOPDOC() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FHJGLOPMFNC::FHJGLOPMFNC::new()
        }
    }

    // .JBNCDFFPDOP PMKEHGBPCNG = 14;

    pub fn PMKEHGBPCNG(&self) -> &super::JBNCDFFPDOP::JBNCDFFPDOP {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(ref v)) => v,
            _ => <super::JBNCDFFPDOP::JBNCDFFPDOP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMKEHGBPCNG(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_PMKEHGBPCNG(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMKEHGBPCNG(&mut self, v: super::JBNCDFFPDOP::JBNCDFFPDOP) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMKEHGBPCNG(&mut self) -> &mut super::JBNCDFFPDOP::JBNCDFFPDOP {
        if let ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(super::JBNCDFFPDOP::JBNCDFFPDOP::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMKEHGBPCNG(&mut self) -> super::JBNCDFFPDOP::JBNCDFFPDOP {
        if self.has_PMKEHGBPCNG() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JBNCDFFPDOP::JBNCDFFPDOP::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchReforgeBuffTargetInfo::WorkbenchReforgeBuffTargetInfo>(
            "reforge_buff_func",
            RogueWorkbenchContentInfo::has_reforge_buff_func,
            RogueWorkbenchContentInfo::reforge_buff_func,
            RogueWorkbenchContentInfo::mut_reforge_buff_func,
            RogueWorkbenchContentInfo::set_reforge_buff_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchReforgeFormulaTargetInfo::WorkbenchReforgeFormulaTargetInfo>(
            "reforge_formula_func",
            RogueWorkbenchContentInfo::has_reforge_formula_func,
            RogueWorkbenchContentInfo::reforge_formula_func,
            RogueWorkbenchContentInfo::mut_reforge_formula_func,
            RogueWorkbenchContentInfo::set_reforge_formula_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchEnhanceBuffTargetInfo::WorkbenchEnhanceBuffTargetInfo>(
            "enhance_buff_func",
            RogueWorkbenchContentInfo::has_enhance_buff_func,
            RogueWorkbenchContentInfo::enhance_buff_func,
            RogueWorkbenchContentInfo::mut_enhance_buff_func,
            RogueWorkbenchContentInfo::set_enhance_buff_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchComposeMiracleTargetInfo::WorkbenchComposeMiracleTargetInfo>(
            "compose_miracle_func",
            RogueWorkbenchContentInfo::has_compose_miracle_func,
            RogueWorkbenchContentInfo::compose_miracle_func,
            RogueWorkbenchContentInfo::mut_compose_miracle_func,
            RogueWorkbenchContentInfo::set_compose_miracle_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::WorkbenchReforgeHexAvatarTargetInfo::WorkbenchReforgeHexAvatarTargetInfo>(
            "reforge_hex_avatar_func",
            RogueWorkbenchContentInfo::has_reforge_hex_avatar_func,
            RogueWorkbenchContentInfo::reforge_hex_avatar_func,
            RogueWorkbenchContentInfo::mut_reforge_hex_avatar_func,
            RogueWorkbenchContentInfo::set_reforge_hex_avatar_func,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JDOOIDBKCIM::JDOOIDBKCIM>(
            "magic_item",
            RogueWorkbenchContentInfo::has_magic_item,
            RogueWorkbenchContentInfo::magic_item,
            RogueWorkbenchContentInfo::mut_magic_item,
            RogueWorkbenchContentInfo::set_magic_item,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GJBBLCIPBHD::GJBBLCIPBHD>(
            "game_magic_unit",
            RogueWorkbenchContentInfo::has_game_magic_unit,
            RogueWorkbenchContentInfo::game_magic_unit,
            RogueWorkbenchContentInfo::mut_game_magic_unit,
            RogueWorkbenchContentInfo::set_game_magic_unit,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LEHGLCELJMF::LEHGLCELJMF>(
            "CEAJNLIOFHF",
            RogueWorkbenchContentInfo::has_CEAJNLIOFHF,
            RogueWorkbenchContentInfo::CEAJNLIOFHF,
            RogueWorkbenchContentInfo::mut_CEAJNLIOFHF,
            RogueWorkbenchContentInfo::set_CEAJNLIOFHF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FHJGLOPMFNC::FHJGLOPMFNC>(
            "PGPAAPOPDOC",
            RogueWorkbenchContentInfo::has_PGPAAPOPDOC,
            RogueWorkbenchContentInfo::PGPAAPOPDOC,
            RogueWorkbenchContentInfo::mut_PGPAAPOPDOC,
            RogueWorkbenchContentInfo::set_PGPAAPOPDOC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JBNCDFFPDOP::JBNCDFFPDOP>(
            "PMKEHGBPCNG",
            RogueWorkbenchContentInfo::has_PMKEHGBPCNG,
            RogueWorkbenchContentInfo::PMKEHGBPCNG,
            RogueWorkbenchContentInfo::mut_PMKEHGBPCNG,
            RogueWorkbenchContentInfo::set_PMKEHGBPCNG,
        ));
        oneofs.push(rogue_workbench_content_info::ECOEKHPGMEA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueWorkbenchContentInfo>(
            "RogueWorkbenchContentInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueWorkbenchContentInfo {
    const NAME: &'static str = "RogueWorkbenchContentInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                122 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(is.read_message()?));
                },
                82 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(is.read_message()?));
                },
                90 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(is.read_message()?));
                },
                26 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(is.read_message()?));
                },
                42 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(is.read_message()?));
                },
                58 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(is.read_message()?));
                },
                66 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(is.read_message()?));
                },
                18 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(is.read_message()?));
                },
                106 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(is.read_message()?));
                },
                114 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ECOEKHPGMEA {
            match v {
                &rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ECOEKHPGMEA {
            match v {
                &rogue_workbench_content_info::ECOEKHPGMEA::ReforgeBuffFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::ReforgeFormulaFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::EnhanceBuffFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::ComposeMiracleFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::ReforgeHexAvatarFunc(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::MagicItem(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::GameMagicUnit(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::CEAJNLIOFHF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::PGPAAPOPDOC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &rogue_workbench_content_info::ECOEKHPGMEA::PMKEHGBPCNG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueWorkbenchContentInfo {
        RogueWorkbenchContentInfo::new()
    }

    fn clear(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueWorkbenchContentInfo {
        static instance: RogueWorkbenchContentInfo = RogueWorkbenchContentInfo {
            ECOEKHPGMEA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueWorkbenchContentInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueWorkbenchContentInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueWorkbenchContentInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueWorkbenchContentInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueWorkbenchContentInfo`
pub mod rogue_workbench_content_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueWorkbenchContentInfo.ECOEKHPGMEA)
    pub enum ECOEKHPGMEA {
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.reforge_buff_func)
        ReforgeBuffFunc(super::super::WorkbenchReforgeBuffTargetInfo::WorkbenchReforgeBuffTargetInfo),
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.reforge_formula_func)
        ReforgeFormulaFunc(super::super::WorkbenchReforgeFormulaTargetInfo::WorkbenchReforgeFormulaTargetInfo),
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.enhance_buff_func)
        EnhanceBuffFunc(super::super::WorkbenchEnhanceBuffTargetInfo::WorkbenchEnhanceBuffTargetInfo),
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.compose_miracle_func)
        ComposeMiracleFunc(super::super::WorkbenchComposeMiracleTargetInfo::WorkbenchComposeMiracleTargetInfo),
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.reforge_hex_avatar_func)
        ReforgeHexAvatarFunc(super::super::WorkbenchReforgeHexAvatarTargetInfo::WorkbenchReforgeHexAvatarTargetInfo),
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.magic_item)
        MagicItem(super::super::JDOOIDBKCIM::JDOOIDBKCIM),
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.game_magic_unit)
        GameMagicUnit(super::super::GJBBLCIPBHD::GJBBLCIPBHD),
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.CEAJNLIOFHF)
        CEAJNLIOFHF(super::super::LEHGLCELJMF::LEHGLCELJMF),
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.PGPAAPOPDOC)
        PGPAAPOPDOC(super::super::FHJGLOPMFNC::FHJGLOPMFNC),
        // @@protoc_insertion_point(oneof_field:RogueWorkbenchContentInfo.PMKEHGBPCNG)
        PMKEHGBPCNG(super::super::JBNCDFFPDOP::JBNCDFFPDOP),
    }

    impl ::protobuf::Oneof for ECOEKHPGMEA {
    }

    impl ::protobuf::OneofFull for ECOEKHPGMEA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueWorkbenchContentInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("ECOEKHPGMEA").unwrap()).clone()
        }
    }

    impl ECOEKHPGMEA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ECOEKHPGMEA>("ECOEKHPGMEA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fRogueWorkbenchContentInfo.proto\x1a\x11FHJGLOPMFNC.proto\x1a\x11GJ\
    BBLCIPBHD.proto\x1a\x11JBNCDFFPDOP.proto\x1a\x11JDOOIDBKCIM.proto\x1a\
    \x11LEHGLCELJMF.proto\x1a'WorkbenchComposeMiracleTargetInfo.proto\x1a$Wo\
    rkbenchEnhanceBuffTargetInfo.proto\x1a$WorkbenchReforgeBuffTargetInfo.pr\
    oto\x1a'WorkbenchReforgeFormulaTargetInfo.proto\x1a)WorkbenchReforgeHexA\
    vatarTargetInfo.proto\"\xd4\x05\n\x19RogueWorkbenchContentInfo\x12M\n\
    \x11reforge_buff_func\x18\x0f\x20\x01(\x0b2\x1f.WorkbenchReforgeBuffTarg\
    etInfoH\0R\x0freforgeBuffFunc\x12V\n\x14reforge_formula_func\x18\n\x20\
    \x01(\x0b2\".WorkbenchReforgeFormulaTargetInfoH\0R\x12reforgeFormulaFunc\
    \x12M\n\x11enhance_buff_func\x18\x0b\x20\x01(\x0b2\x1f.WorkbenchEnhanceB\
    uffTargetInfoH\0R\x0fenhanceBuffFunc\x12V\n\x14compose_miracle_func\x18\
    \x03\x20\x01(\x0b2\".WorkbenchComposeMiracleTargetInfoH\0R\x12composeMir\
    acleFunc\x12]\n\x17reforge_hex_avatar_func\x18\x05\x20\x01(\x0b2$.Workbe\
    nchReforgeHexAvatarTargetInfoH\0R\x14reforgeHexAvatarFunc\x12-\n\nmagic_\
    item\x18\x07\x20\x01(\x0b2\x0c.JDOOIDBKCIMH\0R\tmagicItem\x126\n\x0fgame\
    _magic_unit\x18\x08\x20\x01(\x0b2\x0c.GJBBLCIPBHDH\0R\rgameMagicUnit\x12\
    0\n\x0bCEAJNLIOFHF\x18\x02\x20\x01(\x0b2\x0c.LEHGLCELJMFH\0R\x0bCEAJNLIO\
    FHF\x120\n\x0bPGPAAPOPDOC\x18\r\x20\x01(\x0b2\x0c.FHJGLOPMFNCH\0R\x0bPGP\
    AAPOPDOC\x120\n\x0bPMKEHGBPCNG\x18\x0e\x20\x01(\x0b2\x0c.JBNCDFFPDOPH\0R\
    \x0bPMKEHGBPCNGB\r\n\x0bECOEKHPGMEAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::FHJGLOPMFNC::file_descriptor().clone());
            deps.push(super::GJBBLCIPBHD::file_descriptor().clone());
            deps.push(super::JBNCDFFPDOP::file_descriptor().clone());
            deps.push(super::JDOOIDBKCIM::file_descriptor().clone());
            deps.push(super::LEHGLCELJMF::file_descriptor().clone());
            deps.push(super::WorkbenchComposeMiracleTargetInfo::file_descriptor().clone());
            deps.push(super::WorkbenchEnhanceBuffTargetInfo::file_descriptor().clone());
            deps.push(super::WorkbenchReforgeBuffTargetInfo::file_descriptor().clone());
            deps.push(super::WorkbenchReforgeFormulaTargetInfo::file_descriptor().clone());
            deps.push(super::WorkbenchReforgeHexAvatarTargetInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueWorkbenchContentInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
