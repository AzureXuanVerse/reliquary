// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdFightMatch3Type.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdFightMatch3Type)
pub enum CmdFightMatch3Type {
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMathc3TypeNone)
    CmdFightMathc3TypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SoloDataUpdateNotify)
    CmdFightMatch3SoloDataUpdateNotify = 30152,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3ChatScRsp)
    CmdFightMatch3ChatScRsp = 30177,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SwapScRsp)
    CmdFightMatch3SwapScRsp = 30170,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SoloPreTurnEndCsReq)
    CmdFightMatch3SoloPreTurnEndCsReq = 30136,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3UseItemCsReq)
    CmdFightMatch3UseItemCsReq = 30105,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SoloAnimEndCsReq)
    CmdFightMatch3SoloAnimEndCsReq = 30185,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SwapCsReq)
    CmdFightMatch3SwapCsReq = 30121,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3StartCountDownScNotify)
    CmdFightMatch3StartCountDownScNotify = 30167,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SoloPreTurnEndScRsp)
    CmdFightMatch3SoloPreTurnEndScRsp = 30187,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3ForceUpdateNotify)
    CmdFightMatch3ForceUpdateNotify = 30102,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3TurnStartScNotify)
    CmdFightMatch3TurnStartScNotify = 30139,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SoloDataScRsp)
    CmdFightMatch3SoloDataScRsp = 30198,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SoloSwapNotify)
    CmdFightMatch3SoloSwapNotify = 30168,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SoloUseItemNotify)
    CmdFightMatch3SoloUseItemNotify = 30194,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SoloDataCsReq)
    CmdFightMatch3SoloDataCsReq = 30173,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3ChatScNotify)
    CmdFightMatch3ChatScNotify = 30180,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3DataScRsp)
    CmdFightMatch3DataScRsp = 30191,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3UseItemScRsp)
    CmdFightMatch3UseItemScRsp = 30174,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3SoloAnimEndScRsp)
    CmdFightMatch3SoloAnimEndScRsp = 30138,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3OpponentDataScNotify)
    CmdFightMatch3OpponentDataScNotify = 30159,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3TurnEndScNotify)
    CmdFightMatch3TurnEndScNotify = 30127,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3DataCsReq)
    CmdFightMatch3DataCsReq = 30120,
    // @@protoc_insertion_point(enum_value:CmdFightMatch3Type.CmdFightMatch3ChatCsReq)
    CmdFightMatch3ChatCsReq = 30154,
}

impl ::protobuf::Enum for CmdFightMatch3Type {
    const NAME: &'static str = "CmdFightMatch3Type";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdFightMatch3Type> {
        match value {
            0 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMathc3TypeNone),
            30152 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloDataUpdateNotify),
            30177 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3ChatScRsp),
            30170 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SwapScRsp),
            30136 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloPreTurnEndCsReq),
            30105 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3UseItemCsReq),
            30185 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloAnimEndCsReq),
            30121 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SwapCsReq),
            30167 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3StartCountDownScNotify),
            30187 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloPreTurnEndScRsp),
            30102 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3ForceUpdateNotify),
            30139 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3TurnStartScNotify),
            30198 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloDataScRsp),
            30168 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloSwapNotify),
            30194 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloUseItemNotify),
            30173 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloDataCsReq),
            30180 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3ChatScNotify),
            30191 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3DataScRsp),
            30174 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3UseItemScRsp),
            30138 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloAnimEndScRsp),
            30159 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3OpponentDataScNotify),
            30127 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3TurnEndScNotify),
            30120 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3DataCsReq),
            30154 => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3ChatCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdFightMatch3Type> {
        match str {
            "CmdFightMathc3TypeNone" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMathc3TypeNone),
            "CmdFightMatch3SoloDataUpdateNotify" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloDataUpdateNotify),
            "CmdFightMatch3ChatScRsp" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3ChatScRsp),
            "CmdFightMatch3SwapScRsp" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SwapScRsp),
            "CmdFightMatch3SoloPreTurnEndCsReq" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloPreTurnEndCsReq),
            "CmdFightMatch3UseItemCsReq" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3UseItemCsReq),
            "CmdFightMatch3SoloAnimEndCsReq" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloAnimEndCsReq),
            "CmdFightMatch3SwapCsReq" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SwapCsReq),
            "CmdFightMatch3StartCountDownScNotify" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3StartCountDownScNotify),
            "CmdFightMatch3SoloPreTurnEndScRsp" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloPreTurnEndScRsp),
            "CmdFightMatch3ForceUpdateNotify" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3ForceUpdateNotify),
            "CmdFightMatch3TurnStartScNotify" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3TurnStartScNotify),
            "CmdFightMatch3SoloDataScRsp" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloDataScRsp),
            "CmdFightMatch3SoloSwapNotify" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloSwapNotify),
            "CmdFightMatch3SoloUseItemNotify" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloUseItemNotify),
            "CmdFightMatch3SoloDataCsReq" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloDataCsReq),
            "CmdFightMatch3ChatScNotify" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3ChatScNotify),
            "CmdFightMatch3DataScRsp" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3DataScRsp),
            "CmdFightMatch3UseItemScRsp" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3UseItemScRsp),
            "CmdFightMatch3SoloAnimEndScRsp" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3SoloAnimEndScRsp),
            "CmdFightMatch3OpponentDataScNotify" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3OpponentDataScNotify),
            "CmdFightMatch3TurnEndScNotify" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3TurnEndScNotify),
            "CmdFightMatch3DataCsReq" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3DataCsReq),
            "CmdFightMatch3ChatCsReq" => ::std::option::Option::Some(CmdFightMatch3Type::CmdFightMatch3ChatCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdFightMatch3Type] = &[
        CmdFightMatch3Type::CmdFightMathc3TypeNone,
        CmdFightMatch3Type::CmdFightMatch3SoloDataUpdateNotify,
        CmdFightMatch3Type::CmdFightMatch3ChatScRsp,
        CmdFightMatch3Type::CmdFightMatch3SwapScRsp,
        CmdFightMatch3Type::CmdFightMatch3SoloPreTurnEndCsReq,
        CmdFightMatch3Type::CmdFightMatch3UseItemCsReq,
        CmdFightMatch3Type::CmdFightMatch3SoloAnimEndCsReq,
        CmdFightMatch3Type::CmdFightMatch3SwapCsReq,
        CmdFightMatch3Type::CmdFightMatch3StartCountDownScNotify,
        CmdFightMatch3Type::CmdFightMatch3SoloPreTurnEndScRsp,
        CmdFightMatch3Type::CmdFightMatch3ForceUpdateNotify,
        CmdFightMatch3Type::CmdFightMatch3TurnStartScNotify,
        CmdFightMatch3Type::CmdFightMatch3SoloDataScRsp,
        CmdFightMatch3Type::CmdFightMatch3SoloSwapNotify,
        CmdFightMatch3Type::CmdFightMatch3SoloUseItemNotify,
        CmdFightMatch3Type::CmdFightMatch3SoloDataCsReq,
        CmdFightMatch3Type::CmdFightMatch3ChatScNotify,
        CmdFightMatch3Type::CmdFightMatch3DataScRsp,
        CmdFightMatch3Type::CmdFightMatch3UseItemScRsp,
        CmdFightMatch3Type::CmdFightMatch3SoloAnimEndScRsp,
        CmdFightMatch3Type::CmdFightMatch3OpponentDataScNotify,
        CmdFightMatch3Type::CmdFightMatch3TurnEndScNotify,
        CmdFightMatch3Type::CmdFightMatch3DataCsReq,
        CmdFightMatch3Type::CmdFightMatch3ChatCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdFightMatch3Type {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdFightMatch3Type").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdFightMatch3Type::CmdFightMathc3TypeNone => 0,
            CmdFightMatch3Type::CmdFightMatch3SoloDataUpdateNotify => 1,
            CmdFightMatch3Type::CmdFightMatch3ChatScRsp => 2,
            CmdFightMatch3Type::CmdFightMatch3SwapScRsp => 3,
            CmdFightMatch3Type::CmdFightMatch3SoloPreTurnEndCsReq => 4,
            CmdFightMatch3Type::CmdFightMatch3UseItemCsReq => 5,
            CmdFightMatch3Type::CmdFightMatch3SoloAnimEndCsReq => 6,
            CmdFightMatch3Type::CmdFightMatch3SwapCsReq => 7,
            CmdFightMatch3Type::CmdFightMatch3StartCountDownScNotify => 8,
            CmdFightMatch3Type::CmdFightMatch3SoloPreTurnEndScRsp => 9,
            CmdFightMatch3Type::CmdFightMatch3ForceUpdateNotify => 10,
            CmdFightMatch3Type::CmdFightMatch3TurnStartScNotify => 11,
            CmdFightMatch3Type::CmdFightMatch3SoloDataScRsp => 12,
            CmdFightMatch3Type::CmdFightMatch3SoloSwapNotify => 13,
            CmdFightMatch3Type::CmdFightMatch3SoloUseItemNotify => 14,
            CmdFightMatch3Type::CmdFightMatch3SoloDataCsReq => 15,
            CmdFightMatch3Type::CmdFightMatch3ChatScNotify => 16,
            CmdFightMatch3Type::CmdFightMatch3DataScRsp => 17,
            CmdFightMatch3Type::CmdFightMatch3UseItemScRsp => 18,
            CmdFightMatch3Type::CmdFightMatch3SoloAnimEndScRsp => 19,
            CmdFightMatch3Type::CmdFightMatch3OpponentDataScNotify => 20,
            CmdFightMatch3Type::CmdFightMatch3TurnEndScNotify => 21,
            CmdFightMatch3Type::CmdFightMatch3DataCsReq => 22,
            CmdFightMatch3Type::CmdFightMatch3ChatCsReq => 23,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdFightMatch3Type {
    fn default() -> Self {
        CmdFightMatch3Type::CmdFightMathc3TypeNone
    }
}

impl CmdFightMatch3Type {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdFightMatch3Type>("CmdFightMatch3Type")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18CmdFightMatch3Type.proto*\xf2\x06\n\x12CmdFightMatch3Type\x12\x1a\
    \n\x16CmdFightMathc3TypeNone\x10\0\x12(\n\"CmdFightMatch3SoloDataUpdateN\
    otify\x10\xc8\xeb\x01\x12\x1d\n\x17CmdFightMatch3ChatScRsp\x10\xe1\xeb\
    \x01\x12\x1d\n\x17CmdFightMatch3SwapScRsp\x10\xda\xeb\x01\x12'\n!CmdFigh\
    tMatch3SoloPreTurnEndCsReq\x10\xb8\xeb\x01\x12\x20\n\x1aCmdFightMatch3Us\
    eItemCsReq\x10\x99\xeb\x01\x12$\n\x1eCmdFightMatch3SoloAnimEndCsReq\x10\
    \xe9\xeb\x01\x12\x1d\n\x17CmdFightMatch3SwapCsReq\x10\xa9\xeb\x01\x12*\n\
    $CmdFightMatch3StartCountDownScNotify\x10\xd7\xeb\x01\x12'\n!CmdFightMat\
    ch3SoloPreTurnEndScRsp\x10\xeb\xeb\x01\x12%\n\x1fCmdFightMatch3ForceUpda\
    teNotify\x10\x96\xeb\x01\x12%\n\x1fCmdFightMatch3TurnStartScNotify\x10\
    \xbb\xeb\x01\x12!\n\x1bCmdFightMatch3SoloDataScRsp\x10\xf6\xeb\x01\x12\"\
    \n\x1cCmdFightMatch3SoloSwapNotify\x10\xd8\xeb\x01\x12%\n\x1fCmdFightMat\
    ch3SoloUseItemNotify\x10\xf2\xeb\x01\x12!\n\x1bCmdFightMatch3SoloDataCsR\
    eq\x10\xdd\xeb\x01\x12\x20\n\x1aCmdFightMatch3ChatScNotify\x10\xe4\xeb\
    \x01\x12\x1d\n\x17CmdFightMatch3DataScRsp\x10\xef\xeb\x01\x12\x20\n\x1aC\
    mdFightMatch3UseItemScRsp\x10\xde\xeb\x01\x12$\n\x1eCmdFightMatch3SoloAn\
    imEndScRsp\x10\xba\xeb\x01\x12(\n\"CmdFightMatch3OpponentDataScNotify\
    \x10\xcf\xeb\x01\x12#\n\x1dCmdFightMatch3TurnEndScNotify\x10\xaf\xeb\x01\
    \x12\x1d\n\x17CmdFightMatch3DataCsReq\x10\xa8\xeb\x01\x12\x1d\n\x17CmdFi\
    ghtMatch3ChatCsReq\x10\xca\xeb\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdFightMatch3Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
