// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AnnounceData.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:AnnounceData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AnnounceData {
    // message fields
    // @@protoc_insertion_point(field:AnnounceData.banner_frequency)
    pub banner_frequency: u32,
    // @@protoc_insertion_point(field:AnnounceData.emergency_text)
    pub emergency_text: ::std::string::String,
    // @@protoc_insertion_point(field:AnnounceData.count_down_text)
    pub count_down_text: ::std::string::String,
    // @@protoc_insertion_point(field:AnnounceData.is_center_system_last_5_every_minutes)
    pub is_center_system_last_5_every_minutes: bool,
    // @@protoc_insertion_point(field:AnnounceData.config_id)
    pub config_id: u32,
    // @@protoc_insertion_point(field:AnnounceData.banner_text)
    pub banner_text: ::std::string::String,
    // @@protoc_insertion_point(field:AnnounceData.center_system_frequency)
    pub center_system_frequency: u32,
    // @@protoc_insertion_point(field:AnnounceData.end_time)
    pub end_time: i64,
    // @@protoc_insertion_point(field:AnnounceData.begin_time)
    pub begin_time: i64,
    // special fields
    // @@protoc_insertion_point(special_field:AnnounceData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AnnounceData {
    fn default() -> &'a AnnounceData {
        <AnnounceData as ::protobuf::Message>::default_instance()
    }
}

impl AnnounceData {
    pub fn new() -> AnnounceData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "banner_frequency",
            |m: &AnnounceData| { &m.banner_frequency },
            |m: &mut AnnounceData| { &mut m.banner_frequency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "emergency_text",
            |m: &AnnounceData| { &m.emergency_text },
            |m: &mut AnnounceData| { &mut m.emergency_text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count_down_text",
            |m: &AnnounceData| { &m.count_down_text },
            |m: &mut AnnounceData| { &mut m.count_down_text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_center_system_last_5_every_minutes",
            |m: &AnnounceData| { &m.is_center_system_last_5_every_minutes },
            |m: &mut AnnounceData| { &mut m.is_center_system_last_5_every_minutes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "config_id",
            |m: &AnnounceData| { &m.config_id },
            |m: &mut AnnounceData| { &mut m.config_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "banner_text",
            |m: &AnnounceData| { &m.banner_text },
            |m: &mut AnnounceData| { &mut m.banner_text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "center_system_frequency",
            |m: &AnnounceData| { &m.center_system_frequency },
            |m: &mut AnnounceData| { &mut m.center_system_frequency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &AnnounceData| { &m.end_time },
            |m: &mut AnnounceData| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "begin_time",
            |m: &AnnounceData| { &m.begin_time },
            |m: &mut AnnounceData| { &mut m.begin_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AnnounceData>(
            "AnnounceData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AnnounceData {
    const NAME: &'static str = "AnnounceData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.banner_frequency = is.read_uint32()?;
                },
                122 => {
                    self.emergency_text = is.read_string()?;
                },
                42 => {
                    self.count_down_text = is.read_string()?;
                },
                48 => {
                    self.is_center_system_last_5_every_minutes = is.read_bool()?;
                },
                88 => {
                    self.config_id = is.read_uint32()?;
                },
                34 => {
                    self.banner_text = is.read_string()?;
                },
                24 => {
                    self.center_system_frequency = is.read_uint32()?;
                },
                64 => {
                    self.end_time = is.read_int64()?;
                },
                72 => {
                    self.begin_time = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.banner_frequency != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.banner_frequency);
        }
        if !self.emergency_text.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.emergency_text);
        }
        if !self.count_down_text.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.count_down_text);
        }
        if self.is_center_system_last_5_every_minutes != false {
            my_size += 1 + 1;
        }
        if self.config_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.config_id);
        }
        if !self.banner_text.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.banner_text);
        }
        if self.center_system_frequency != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.center_system_frequency);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::int64_size(8, self.end_time);
        }
        if self.begin_time != 0 {
            my_size += ::protobuf::rt::int64_size(9, self.begin_time);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.banner_frequency != 0 {
            os.write_uint32(1, self.banner_frequency)?;
        }
        if !self.emergency_text.is_empty() {
            os.write_string(15, &self.emergency_text)?;
        }
        if !self.count_down_text.is_empty() {
            os.write_string(5, &self.count_down_text)?;
        }
        if self.is_center_system_last_5_every_minutes != false {
            os.write_bool(6, self.is_center_system_last_5_every_minutes)?;
        }
        if self.config_id != 0 {
            os.write_uint32(11, self.config_id)?;
        }
        if !self.banner_text.is_empty() {
            os.write_string(4, &self.banner_text)?;
        }
        if self.center_system_frequency != 0 {
            os.write_uint32(3, self.center_system_frequency)?;
        }
        if self.end_time != 0 {
            os.write_int64(8, self.end_time)?;
        }
        if self.begin_time != 0 {
            os.write_int64(9, self.begin_time)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AnnounceData {
        AnnounceData::new()
    }

    fn clear(&mut self) {
        self.banner_frequency = 0;
        self.emergency_text.clear();
        self.count_down_text.clear();
        self.is_center_system_last_5_every_minutes = false;
        self.config_id = 0;
        self.banner_text.clear();
        self.center_system_frequency = 0;
        self.end_time = 0;
        self.begin_time = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AnnounceData {
        static instance: AnnounceData = AnnounceData {
            banner_frequency: 0,
            emergency_text: ::std::string::String::new(),
            count_down_text: ::std::string::String::new(),
            is_center_system_last_5_every_minutes: false,
            config_id: 0,
            banner_text: ::std::string::String::new(),
            center_system_frequency: 0,
            end_time: 0,
            begin_time: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AnnounceData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AnnounceData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AnnounceData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AnnounceData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12AnnounceData.proto\"\x88\x03\n\x0cAnnounceData\x12)\n\x10banner_fr\
    equency\x18\x01\x20\x01(\rR\x0fbannerFrequency\x12%\n\x0eemergency_text\
    \x18\x0f\x20\x01(\tR\remergencyText\x12&\n\x0fcount_down_text\x18\x05\
    \x20\x01(\tR\rcountDownText\x12N\n%is_center_system_last_5_every_minutes\
    \x18\x06\x20\x01(\x08R\x1fisCenterSystemLast5EveryMinutes\x12\x1b\n\tcon\
    fig_id\x18\x0b\x20\x01(\rR\x08configId\x12\x1f\n\x0bbanner_text\x18\x04\
    \x20\x01(\tR\nbannerText\x126\n\x17center_system_frequency\x18\x03\x20\
    \x01(\rR\x15centerSystemFrequency\x12\x19\n\x08end_time\x18\x08\x20\x01(\
    \x03R\x07endTime\x12\x1d\n\nbegin_time\x18\t\x20\x01(\x03R\tbeginTimeb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AnnounceData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
