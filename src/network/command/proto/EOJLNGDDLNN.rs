// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EOJLNGDDLNN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:EOJLNGDDLNN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EOJLNGDDLNN {
    // message fields
    // @@protoc_insertion_point(field:EOJLNGDDLNN.CGNBHKBHICG)
    pub CGNBHKBHICG: u32,
    // @@protoc_insertion_point(field:EOJLNGDDLNN.PANBCNICOHJ)
    pub PANBCNICOHJ: u32,
    // @@protoc_insertion_point(field:EOJLNGDDLNN.JFEDJMKMLFO)
    pub JFEDJMKMLFO: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EOJLNGDDLNN.MDBGGBLEGEM)
    pub MDBGGBLEGEM: ::std::vec::Vec<super::JALLAPPCPFE::JALLAPPCPFE>,
    // @@protoc_insertion_point(field:EOJLNGDDLNN.BLALJMMHIFP)
    pub BLALJMMHIFP: bool,
    // @@protoc_insertion_point(field:EOJLNGDDLNN.NBKELCHILGG)
    pub NBKELCHILGG: bool,
    // @@protoc_insertion_point(field:EOJLNGDDLNN.NBKHPJHJMHO)
    pub NBKHPJHJMHO: ::std::vec::Vec<super::HBGHAOPBKJP::HBGHAOPBKJP>,
    // special fields
    // @@protoc_insertion_point(special_field:EOJLNGDDLNN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EOJLNGDDLNN {
    fn default() -> &'a EOJLNGDDLNN {
        <EOJLNGDDLNN as ::protobuf::Message>::default_instance()
    }
}

impl EOJLNGDDLNN {
    pub fn new() -> EOJLNGDDLNN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CGNBHKBHICG",
            |m: &EOJLNGDDLNN| { &m.CGNBHKBHICG },
            |m: &mut EOJLNGDDLNN| { &mut m.CGNBHKBHICG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PANBCNICOHJ",
            |m: &EOJLNGDDLNN| { &m.PANBCNICOHJ },
            |m: &mut EOJLNGDDLNN| { &mut m.PANBCNICOHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JFEDJMKMLFO",
            |m: &EOJLNGDDLNN| { &m.JFEDJMKMLFO },
            |m: &mut EOJLNGDDLNN| { &mut m.JFEDJMKMLFO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MDBGGBLEGEM",
            |m: &EOJLNGDDLNN| { &m.MDBGGBLEGEM },
            |m: &mut EOJLNGDDLNN| { &mut m.MDBGGBLEGEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BLALJMMHIFP",
            |m: &EOJLNGDDLNN| { &m.BLALJMMHIFP },
            |m: &mut EOJLNGDDLNN| { &mut m.BLALJMMHIFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NBKELCHILGG",
            |m: &EOJLNGDDLNN| { &m.NBKELCHILGG },
            |m: &mut EOJLNGDDLNN| { &mut m.NBKELCHILGG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NBKHPJHJMHO",
            |m: &EOJLNGDDLNN| { &m.NBKHPJHJMHO },
            |m: &mut EOJLNGDDLNN| { &mut m.NBKHPJHJMHO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EOJLNGDDLNN>(
            "EOJLNGDDLNN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EOJLNGDDLNN {
    const NAME: &'static str = "EOJLNGDDLNN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.CGNBHKBHICG = is.read_uint32()?;
                },
                104 => {
                    self.PANBCNICOHJ = is.read_uint32()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.JFEDJMKMLFO)?;
                },
                32 => {
                    self.JFEDJMKMLFO.push(is.read_uint32()?);
                },
                18 => {
                    self.MDBGGBLEGEM.push(is.read_message()?);
                },
                72 => {
                    self.BLALJMMHIFP = is.read_bool()?;
                },
                64 => {
                    self.NBKELCHILGG = is.read_bool()?;
                },
                50 => {
                    self.NBKHPJHJMHO.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CGNBHKBHICG != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.CGNBHKBHICG);
        }
        if self.PANBCNICOHJ != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.PANBCNICOHJ);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(4, &self.JFEDJMKMLFO);
        for value in &self.MDBGGBLEGEM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.BLALJMMHIFP != false {
            my_size += 1 + 1;
        }
        if self.NBKELCHILGG != false {
            my_size += 1 + 1;
        }
        for value in &self.NBKHPJHJMHO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CGNBHKBHICG != 0 {
            os.write_uint32(15, self.CGNBHKBHICG)?;
        }
        if self.PANBCNICOHJ != 0 {
            os.write_uint32(13, self.PANBCNICOHJ)?;
        }
        os.write_repeated_packed_uint32(4, &self.JFEDJMKMLFO)?;
        for v in &self.MDBGGBLEGEM {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.BLALJMMHIFP != false {
            os.write_bool(9, self.BLALJMMHIFP)?;
        }
        if self.NBKELCHILGG != false {
            os.write_bool(8, self.NBKELCHILGG)?;
        }
        for v in &self.NBKHPJHJMHO {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EOJLNGDDLNN {
        EOJLNGDDLNN::new()
    }

    fn clear(&mut self) {
        self.CGNBHKBHICG = 0;
        self.PANBCNICOHJ = 0;
        self.JFEDJMKMLFO.clear();
        self.MDBGGBLEGEM.clear();
        self.BLALJMMHIFP = false;
        self.NBKELCHILGG = false;
        self.NBKHPJHJMHO.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EOJLNGDDLNN {
        static instance: EOJLNGDDLNN = EOJLNGDDLNN {
            CGNBHKBHICG: 0,
            PANBCNICOHJ: 0,
            JFEDJMKMLFO: ::std::vec::Vec::new(),
            MDBGGBLEGEM: ::std::vec::Vec::new(),
            BLALJMMHIFP: false,
            NBKELCHILGG: false,
            NBKHPJHJMHO: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EOJLNGDDLNN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EOJLNGDDLNN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EOJLNGDDLNN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EOJLNGDDLNN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EOJLNGDDLNN.proto\x1a\x11HBGHAOPBKJP.proto\x1a\x11JALLAPPCPFE.prot\
    o\"\x97\x02\n\x0bEOJLNGDDLNN\x12\x20\n\x0bCGNBHKBHICG\x18\x0f\x20\x01(\r\
    R\x0bCGNBHKBHICG\x12\x20\n\x0bPANBCNICOHJ\x18\r\x20\x01(\rR\x0bPANBCNICO\
    HJ\x12\x20\n\x0bJFEDJMKMLFO\x18\x04\x20\x03(\rR\x0bJFEDJMKMLFO\x12.\n\
    \x0bMDBGGBLEGEM\x18\x02\x20\x03(\x0b2\x0c.JALLAPPCPFER\x0bMDBGGBLEGEM\
    \x12\x20\n\x0bBLALJMMHIFP\x18\t\x20\x01(\x08R\x0bBLALJMMHIFP\x12\x20\n\
    \x0bNBKELCHILGG\x18\x08\x20\x01(\x08R\x0bNBKELCHILGG\x12.\n\x0bNBKHPJHJM\
    HO\x18\x06\x20\x03(\x0b2\x0c.HBGHAOPBKJPR\x0bNBKHPJHJMHOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::HBGHAOPBKJP::file_descriptor().clone());
            deps.push(super::JALLAPPCPFE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EOJLNGDDLNN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
