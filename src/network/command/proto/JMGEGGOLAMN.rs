// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JMGEGGOLAMN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:JMGEGGOLAMN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JMGEGGOLAMN {
    // message fields
    // @@protoc_insertion_point(field:JMGEGGOLAMN.LGIECNJOCJN)
    pub LGIECNJOCJN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:JMGEGGOLAMN.FPGEDABJBHO)
    pub FPGEDABJBHO: u64,
    // @@protoc_insertion_point(field:JMGEGGOLAMN.GPPHOCNOJNF)
    pub GPPHOCNOJNF: ::std::vec::Vec<super::DGMGKOGHFOO::DGMGKOGHFOO>,
    // @@protoc_insertion_point(field:JMGEGGOLAMN.FCIAOJKLBNJ)
    pub FCIAOJKLBNJ: ::std::vec::Vec<super::DFKMFNDIIPE::DFKMFNDIIPE>,
    // @@protoc_insertion_point(field:JMGEGGOLAMN.OBGKJKEODNG)
    pub OBGKJKEODNG: u32,
    // @@protoc_insertion_point(field:JMGEGGOLAMN.NMOEICLLCPG)
    pub NMOEICLLCPG: u32,
    // @@protoc_insertion_point(field:JMGEGGOLAMN.HELDFGLCNFB)
    pub HELDFGLCNFB: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:JMGEGGOLAMN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JMGEGGOLAMN {
    fn default() -> &'a JMGEGGOLAMN {
        <JMGEGGOLAMN as ::protobuf::Message>::default_instance()
    }
}

impl JMGEGGOLAMN {
    pub fn new() -> JMGEGGOLAMN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LGIECNJOCJN",
            |m: &JMGEGGOLAMN| { &m.LGIECNJOCJN },
            |m: &mut JMGEGGOLAMN| { &mut m.LGIECNJOCJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FPGEDABJBHO",
            |m: &JMGEGGOLAMN| { &m.FPGEDABJBHO },
            |m: &mut JMGEGGOLAMN| { &mut m.FPGEDABJBHO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GPPHOCNOJNF",
            |m: &JMGEGGOLAMN| { &m.GPPHOCNOJNF },
            |m: &mut JMGEGGOLAMN| { &mut m.GPPHOCNOJNF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FCIAOJKLBNJ",
            |m: &JMGEGGOLAMN| { &m.FCIAOJKLBNJ },
            |m: &mut JMGEGGOLAMN| { &mut m.FCIAOJKLBNJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBGKJKEODNG",
            |m: &JMGEGGOLAMN| { &m.OBGKJKEODNG },
            |m: &mut JMGEGGOLAMN| { &mut m.OBGKJKEODNG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NMOEICLLCPG",
            |m: &JMGEGGOLAMN| { &m.NMOEICLLCPG },
            |m: &mut JMGEGGOLAMN| { &mut m.NMOEICLLCPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HELDFGLCNFB",
            |m: &JMGEGGOLAMN| { &m.HELDFGLCNFB },
            |m: &mut JMGEGGOLAMN| { &mut m.HELDFGLCNFB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JMGEGGOLAMN>(
            "JMGEGGOLAMN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JMGEGGOLAMN {
    const NAME: &'static str = "JMGEGGOLAMN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.LGIECNJOCJN)?;
                },
                32 => {
                    self.LGIECNJOCJN.push(is.read_uint32()?);
                },
                72 => {
                    self.FPGEDABJBHO = is.read_uint64()?;
                },
                42 => {
                    self.GPPHOCNOJNF.push(is.read_message()?);
                },
                26 => {
                    self.FCIAOJKLBNJ.push(is.read_message()?);
                },
                80 => {
                    self.OBGKJKEODNG = is.read_uint32()?;
                },
                48 => {
                    self.NMOEICLLCPG = is.read_uint32()?;
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.HELDFGLCNFB)?;
                },
                120 => {
                    self.HELDFGLCNFB.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(4, &self.LGIECNJOCJN);
        if self.FPGEDABJBHO != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.FPGEDABJBHO);
        }
        for value in &self.GPPHOCNOJNF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.FCIAOJKLBNJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.OBGKJKEODNG != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.OBGKJKEODNG);
        }
        if self.NMOEICLLCPG != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.NMOEICLLCPG);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(15, &self.HELDFGLCNFB);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(4, &self.LGIECNJOCJN)?;
        if self.FPGEDABJBHO != 0 {
            os.write_uint64(9, self.FPGEDABJBHO)?;
        }
        for v in &self.GPPHOCNOJNF {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.FCIAOJKLBNJ {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.OBGKJKEODNG != 0 {
            os.write_uint32(10, self.OBGKJKEODNG)?;
        }
        if self.NMOEICLLCPG != 0 {
            os.write_uint32(6, self.NMOEICLLCPG)?;
        }
        os.write_repeated_packed_uint32(15, &self.HELDFGLCNFB)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JMGEGGOLAMN {
        JMGEGGOLAMN::new()
    }

    fn clear(&mut self) {
        self.LGIECNJOCJN.clear();
        self.FPGEDABJBHO = 0;
        self.GPPHOCNOJNF.clear();
        self.FCIAOJKLBNJ.clear();
        self.OBGKJKEODNG = 0;
        self.NMOEICLLCPG = 0;
        self.HELDFGLCNFB.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JMGEGGOLAMN {
        static instance: JMGEGGOLAMN = JMGEGGOLAMN {
            LGIECNJOCJN: ::std::vec::Vec::new(),
            FPGEDABJBHO: 0,
            GPPHOCNOJNF: ::std::vec::Vec::new(),
            FCIAOJKLBNJ: ::std::vec::Vec::new(),
            OBGKJKEODNG: 0,
            NMOEICLLCPG: 0,
            HELDFGLCNFB: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JMGEGGOLAMN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JMGEGGOLAMN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JMGEGGOLAMN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JMGEGGOLAMN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JMGEGGOLAMN.proto\x1a\x11DFKMFNDIIPE.proto\x1a\x11DGMGKOGHFOO.prot\
    o\"\x97\x02\n\x0bJMGEGGOLAMN\x12\x20\n\x0bLGIECNJOCJN\x18\x04\x20\x03(\r\
    R\x0bLGIECNJOCJN\x12\x20\n\x0bFPGEDABJBHO\x18\t\x20\x01(\x04R\x0bFPGEDAB\
    JBHO\x12.\n\x0bGPPHOCNOJNF\x18\x05\x20\x03(\x0b2\x0c.DGMGKOGHFOOR\x0bGPP\
    HOCNOJNF\x12.\n\x0bFCIAOJKLBNJ\x18\x03\x20\x03(\x0b2\x0c.DFKMFNDIIPER\
    \x0bFCIAOJKLBNJ\x12\x20\n\x0bOBGKJKEODNG\x18\n\x20\x01(\rR\x0bOBGKJKEODN\
    G\x12\x20\n\x0bNMOEICLLCPG\x18\x06\x20\x01(\rR\x0bNMOEICLLCPG\x12\x20\n\
    \x0bHELDFGLCNFB\x18\x0f\x20\x03(\rR\x0bHELDFGLCNFBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::DFKMFNDIIPE::file_descriptor().clone());
            deps.push(super::DGMGKOGHFOO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JMGEGGOLAMN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
