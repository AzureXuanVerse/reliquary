// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OOALAODNCPE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OOALAODNCPE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OOALAODNCPE {
    // message fields
    // @@protoc_insertion_point(field:OOALAODNCPE.OIGKBOOHNII)
    pub OIGKBOOHNII: u32,
    // @@protoc_insertion_point(field:OOALAODNCPE.OGGEGAOLPGN)
    pub OGGEGAOLPGN: u32,
    // @@protoc_insertion_point(field:OOALAODNCPE.GFDIPLDIFHG)
    pub GFDIPLDIFHG: u32,
    // @@protoc_insertion_point(field:OOALAODNCPE.NFPHCJIPIJH)
    pub NFPHCJIPIJH: u32,
    // @@protoc_insertion_point(field:OOALAODNCPE.FODEKCOBFFA)
    pub FODEKCOBFFA: u32,
    // @@protoc_insertion_point(field:OOALAODNCPE.NBNEKBDILLK)
    pub NBNEKBDILLK: u32,
    // @@protoc_insertion_point(field:OOALAODNCPE.MMABIMIEJNJ)
    pub MMABIMIEJNJ: u32,
    // @@protoc_insertion_point(field:OOALAODNCPE.APNNBDBENLC)
    pub APNNBDBENLC: ::std::vec::Vec<super::DCKPBICNMKK::DCKPBICNMKK>,
    // @@protoc_insertion_point(field:OOALAODNCPE.JEHJLJDKBGE)
    pub JEHJLJDKBGE: u32,
    // @@protoc_insertion_point(field:OOALAODNCPE.NEEFGJBMCLL)
    pub NEEFGJBMCLL: u32,
    // @@protoc_insertion_point(field:OOALAODNCPE.DHDLNDFIBKC)
    pub DHDLNDFIBKC: u32,
    // special fields
    // @@protoc_insertion_point(special_field:OOALAODNCPE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OOALAODNCPE {
    fn default() -> &'a OOALAODNCPE {
        <OOALAODNCPE as ::protobuf::Message>::default_instance()
    }
}

impl OOALAODNCPE {
    pub fn new() -> OOALAODNCPE {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OIGKBOOHNII",
            |m: &OOALAODNCPE| { &m.OIGKBOOHNII },
            |m: &mut OOALAODNCPE| { &mut m.OIGKBOOHNII },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OGGEGAOLPGN",
            |m: &OOALAODNCPE| { &m.OGGEGAOLPGN },
            |m: &mut OOALAODNCPE| { &mut m.OGGEGAOLPGN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GFDIPLDIFHG",
            |m: &OOALAODNCPE| { &m.GFDIPLDIFHG },
            |m: &mut OOALAODNCPE| { &mut m.GFDIPLDIFHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NFPHCJIPIJH",
            |m: &OOALAODNCPE| { &m.NFPHCJIPIJH },
            |m: &mut OOALAODNCPE| { &mut m.NFPHCJIPIJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FODEKCOBFFA",
            |m: &OOALAODNCPE| { &m.FODEKCOBFFA },
            |m: &mut OOALAODNCPE| { &mut m.FODEKCOBFFA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NBNEKBDILLK",
            |m: &OOALAODNCPE| { &m.NBNEKBDILLK },
            |m: &mut OOALAODNCPE| { &mut m.NBNEKBDILLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MMABIMIEJNJ",
            |m: &OOALAODNCPE| { &m.MMABIMIEJNJ },
            |m: &mut OOALAODNCPE| { &mut m.MMABIMIEJNJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "APNNBDBENLC",
            |m: &OOALAODNCPE| { &m.APNNBDBENLC },
            |m: &mut OOALAODNCPE| { &mut m.APNNBDBENLC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JEHJLJDKBGE",
            |m: &OOALAODNCPE| { &m.JEHJLJDKBGE },
            |m: &mut OOALAODNCPE| { &mut m.JEHJLJDKBGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NEEFGJBMCLL",
            |m: &OOALAODNCPE| { &m.NEEFGJBMCLL },
            |m: &mut OOALAODNCPE| { &mut m.NEEFGJBMCLL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DHDLNDFIBKC",
            |m: &OOALAODNCPE| { &m.DHDLNDFIBKC },
            |m: &mut OOALAODNCPE| { &mut m.DHDLNDFIBKC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OOALAODNCPE>(
            "OOALAODNCPE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OOALAODNCPE {
    const NAME: &'static str = "OOALAODNCPE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.OIGKBOOHNII = is.read_uint32()?;
                },
                48 => {
                    self.OGGEGAOLPGN = is.read_uint32()?;
                },
                64 => {
                    self.GFDIPLDIFHG = is.read_uint32()?;
                },
                8 => {
                    self.NFPHCJIPIJH = is.read_uint32()?;
                },
                24 => {
                    self.FODEKCOBFFA = is.read_uint32()?;
                },
                32 => {
                    self.NBNEKBDILLK = is.read_uint32()?;
                },
                40 => {
                    self.MMABIMIEJNJ = is.read_uint32()?;
                },
                18 => {
                    self.APNNBDBENLC.push(is.read_message()?);
                },
                120 => {
                    self.JEHJLJDKBGE = is.read_uint32()?;
                },
                56 => {
                    self.NEEFGJBMCLL = is.read_uint32()?;
                },
                72 => {
                    self.DHDLNDFIBKC = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OIGKBOOHNII != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.OIGKBOOHNII);
        }
        if self.OGGEGAOLPGN != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.OGGEGAOLPGN);
        }
        if self.GFDIPLDIFHG != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.GFDIPLDIFHG);
        }
        if self.NFPHCJIPIJH != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.NFPHCJIPIJH);
        }
        if self.FODEKCOBFFA != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.FODEKCOBFFA);
        }
        if self.NBNEKBDILLK != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.NBNEKBDILLK);
        }
        if self.MMABIMIEJNJ != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.MMABIMIEJNJ);
        }
        for value in &self.APNNBDBENLC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.JEHJLJDKBGE != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.JEHJLJDKBGE);
        }
        if self.NEEFGJBMCLL != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.NEEFGJBMCLL);
        }
        if self.DHDLNDFIBKC != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.DHDLNDFIBKC);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OIGKBOOHNII != 0 {
            os.write_uint32(13, self.OIGKBOOHNII)?;
        }
        if self.OGGEGAOLPGN != 0 {
            os.write_uint32(6, self.OGGEGAOLPGN)?;
        }
        if self.GFDIPLDIFHG != 0 {
            os.write_uint32(8, self.GFDIPLDIFHG)?;
        }
        if self.NFPHCJIPIJH != 0 {
            os.write_uint32(1, self.NFPHCJIPIJH)?;
        }
        if self.FODEKCOBFFA != 0 {
            os.write_uint32(3, self.FODEKCOBFFA)?;
        }
        if self.NBNEKBDILLK != 0 {
            os.write_uint32(4, self.NBNEKBDILLK)?;
        }
        if self.MMABIMIEJNJ != 0 {
            os.write_uint32(5, self.MMABIMIEJNJ)?;
        }
        for v in &self.APNNBDBENLC {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.JEHJLJDKBGE != 0 {
            os.write_uint32(15, self.JEHJLJDKBGE)?;
        }
        if self.NEEFGJBMCLL != 0 {
            os.write_uint32(7, self.NEEFGJBMCLL)?;
        }
        if self.DHDLNDFIBKC != 0 {
            os.write_uint32(9, self.DHDLNDFIBKC)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OOALAODNCPE {
        OOALAODNCPE::new()
    }

    fn clear(&mut self) {
        self.OIGKBOOHNII = 0;
        self.OGGEGAOLPGN = 0;
        self.GFDIPLDIFHG = 0;
        self.NFPHCJIPIJH = 0;
        self.FODEKCOBFFA = 0;
        self.NBNEKBDILLK = 0;
        self.MMABIMIEJNJ = 0;
        self.APNNBDBENLC.clear();
        self.JEHJLJDKBGE = 0;
        self.NEEFGJBMCLL = 0;
        self.DHDLNDFIBKC = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OOALAODNCPE {
        static instance: OOALAODNCPE = OOALAODNCPE {
            OIGKBOOHNII: 0,
            OGGEGAOLPGN: 0,
            GFDIPLDIFHG: 0,
            NFPHCJIPIJH: 0,
            FODEKCOBFFA: 0,
            NBNEKBDILLK: 0,
            MMABIMIEJNJ: 0,
            APNNBDBENLC: ::std::vec::Vec::new(),
            JEHJLJDKBGE: 0,
            NEEFGJBMCLL: 0,
            DHDLNDFIBKC: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OOALAODNCPE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OOALAODNCPE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OOALAODNCPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OOALAODNCPE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OOALAODNCPE.proto\x1a\x11DCKPBICNMKK.proto\"\x91\x03\n\x0bOOALAODN\
    CPE\x12\x20\n\x0bOIGKBOOHNII\x18\r\x20\x01(\rR\x0bOIGKBOOHNII\x12\x20\n\
    \x0bOGGEGAOLPGN\x18\x06\x20\x01(\rR\x0bOGGEGAOLPGN\x12\x20\n\x0bGFDIPLDI\
    FHG\x18\x08\x20\x01(\rR\x0bGFDIPLDIFHG\x12\x20\n\x0bNFPHCJIPIJH\x18\x01\
    \x20\x01(\rR\x0bNFPHCJIPIJH\x12\x20\n\x0bFODEKCOBFFA\x18\x03\x20\x01(\rR\
    \x0bFODEKCOBFFA\x12\x20\n\x0bNBNEKBDILLK\x18\x04\x20\x01(\rR\x0bNBNEKBDI\
    LLK\x12\x20\n\x0bMMABIMIEJNJ\x18\x05\x20\x01(\rR\x0bMMABIMIEJNJ\x12.\n\
    \x0bAPNNBDBENLC\x18\x02\x20\x03(\x0b2\x0c.DCKPBICNMKKR\x0bAPNNBDBENLC\
    \x12\x20\n\x0bJEHJLJDKBGE\x18\x0f\x20\x01(\rR\x0bJEHJLJDKBGE\x12\x20\n\
    \x0bNEEFGJBMCLL\x18\x07\x20\x01(\rR\x0bNEEFGJBMCLL\x12\x20\n\x0bDHDLNDFI\
    BKC\x18\t\x20\x01(\rR\x0bDHDLNDFIBKCb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::DCKPBICNMKK::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OOALAODNCPE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
