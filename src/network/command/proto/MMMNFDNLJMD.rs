// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MMMNFDNLJMD.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:MMMNFDNLJMD)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MMMNFDNLJMD {
    // message fields
    // @@protoc_insertion_point(field:MMMNFDNLJMD.queue_position)
    pub queue_position: u32,
    // @@protoc_insertion_point(field:MMMNFDNLJMD.GPJGGKNOAFD)
    pub GPJGGKNOAFD: u32,
    // message oneof groups
    pub OEEHIFHNFDH: ::std::option::Option<mmmnfdnljmd::OEEHIFHNFDH>,
    // special fields
    // @@protoc_insertion_point(special_field:MMMNFDNLJMD.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MMMNFDNLJMD {
    fn default() -> &'a MMMNFDNLJMD {
        <MMMNFDNLJMD as ::protobuf::Message>::default_instance()
    }
}

impl MMMNFDNLJMD {
    pub fn new() -> MMMNFDNLJMD {
        ::std::default::Default::default()
    }

    // .LJNPGKDOJHO marble_game_begin = 101;

    pub fn marble_game_begin(&self) -> &super::LJNPGKDOJHO::LJNPGKDOJHO {
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(ref v)) => v,
            _ => <super::LJNPGKDOJHO::LJNPGKDOJHO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_marble_game_begin(&mut self) {
        self.OEEHIFHNFDH = ::std::option::Option::None;
    }

    pub fn has_marble_game_begin(&self) -> bool {
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_marble_game_begin(&mut self, v: super::LJNPGKDOJHO::LJNPGKDOJHO) {
        self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(v))
    }

    // Mutable pointer to the field.
    pub fn mut_marble_game_begin(&mut self) -> &mut super::LJNPGKDOJHO::LJNPGKDOJHO {
        if let ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(_)) = self.OEEHIFHNFDH {
        } else {
            self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(super::LJNPGKDOJHO::LJNPGKDOJHO::new()));
        }
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_marble_game_begin(&mut self) -> super::LJNPGKDOJHO::LJNPGKDOJHO {
        if self.has_marble_game_begin() {
            match self.OEEHIFHNFDH.take() {
                ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LJNPGKDOJHO::LJNPGKDOJHO::new()
        }
    }

    // .BPNMJCHEDNL marble_game_end = 102;

    pub fn marble_game_end(&self) -> &super::BPNMJCHEDNL::BPNMJCHEDNL {
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(ref v)) => v,
            _ => <super::BPNMJCHEDNL::BPNMJCHEDNL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_marble_game_end(&mut self) {
        self.OEEHIFHNFDH = ::std::option::Option::None;
    }

    pub fn has_marble_game_end(&self) -> bool {
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_marble_game_end(&mut self, v: super::BPNMJCHEDNL::BPNMJCHEDNL) {
        self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(v))
    }

    // Mutable pointer to the field.
    pub fn mut_marble_game_end(&mut self) -> &mut super::BPNMJCHEDNL::BPNMJCHEDNL {
        if let ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(_)) = self.OEEHIFHNFDH {
        } else {
            self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(super::BPNMJCHEDNL::BPNMJCHEDNL::new()));
        }
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_marble_game_end(&mut self) -> super::BPNMJCHEDNL::BPNMJCHEDNL {
        if self.has_marble_game_end() {
            match self.OEEHIFHNFDH.take() {
                ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BPNMJCHEDNL::BPNMJCHEDNL::new()
        }
    }

    // .FOOPINGAFEG marble_game_round = 103;

    pub fn marble_game_round(&self) -> &super::FOOPINGAFEG::FOOPINGAFEG {
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(ref v)) => v,
            _ => <super::FOOPINGAFEG::FOOPINGAFEG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_marble_game_round(&mut self) {
        self.OEEHIFHNFDH = ::std::option::Option::None;
    }

    pub fn has_marble_game_round(&self) -> bool {
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_marble_game_round(&mut self, v: super::FOOPINGAFEG::FOOPINGAFEG) {
        self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(v))
    }

    // Mutable pointer to the field.
    pub fn mut_marble_game_round(&mut self) -> &mut super::FOOPINGAFEG::FOOPINGAFEG {
        if let ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(_)) = self.OEEHIFHNFDH {
        } else {
            self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(super::FOOPINGAFEG::FOOPINGAFEG::new()));
        }
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_marble_game_round(&mut self) -> super::FOOPINGAFEG::FOOPINGAFEG {
        if self.has_marble_game_round() {
            match self.OEEHIFHNFDH.take() {
                ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FOOPINGAFEG::FOOPINGAFEG::new()
        }
    }

    // .OFILKJCLEGI marble_game_turn = 104;

    pub fn marble_game_turn(&self) -> &super::OFILKJCLEGI::OFILKJCLEGI {
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(ref v)) => v,
            _ => <super::OFILKJCLEGI::OFILKJCLEGI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_marble_game_turn(&mut self) {
        self.OEEHIFHNFDH = ::std::option::Option::None;
    }

    pub fn has_marble_game_turn(&self) -> bool {
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_marble_game_turn(&mut self, v: super::OFILKJCLEGI::OFILKJCLEGI) {
        self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(v))
    }

    // Mutable pointer to the field.
    pub fn mut_marble_game_turn(&mut self) -> &mut super::OFILKJCLEGI::OFILKJCLEGI {
        if let ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(_)) = self.OEEHIFHNFDH {
        } else {
            self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(super::OFILKJCLEGI::OFILKJCLEGI::new()));
        }
        match self.OEEHIFHNFDH {
            ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_marble_game_turn(&mut self) -> super::OFILKJCLEGI::OFILKJCLEGI {
        if self.has_marble_game_turn() {
            match self.OEEHIFHNFDH.take() {
                ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OFILKJCLEGI::OFILKJCLEGI::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "queue_position",
            |m: &MMMNFDNLJMD| { &m.queue_position },
            |m: &mut MMMNFDNLJMD| { &mut m.queue_position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GPJGGKNOAFD",
            |m: &MMMNFDNLJMD| { &m.GPJGGKNOAFD },
            |m: &mut MMMNFDNLJMD| { &mut m.GPJGGKNOAFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LJNPGKDOJHO::LJNPGKDOJHO>(
            "marble_game_begin",
            MMMNFDNLJMD::has_marble_game_begin,
            MMMNFDNLJMD::marble_game_begin,
            MMMNFDNLJMD::mut_marble_game_begin,
            MMMNFDNLJMD::set_marble_game_begin,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BPNMJCHEDNL::BPNMJCHEDNL>(
            "marble_game_end",
            MMMNFDNLJMD::has_marble_game_end,
            MMMNFDNLJMD::marble_game_end,
            MMMNFDNLJMD::mut_marble_game_end,
            MMMNFDNLJMD::set_marble_game_end,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FOOPINGAFEG::FOOPINGAFEG>(
            "marble_game_round",
            MMMNFDNLJMD::has_marble_game_round,
            MMMNFDNLJMD::marble_game_round,
            MMMNFDNLJMD::mut_marble_game_round,
            MMMNFDNLJMD::set_marble_game_round,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OFILKJCLEGI::OFILKJCLEGI>(
            "marble_game_turn",
            MMMNFDNLJMD::has_marble_game_turn,
            MMMNFDNLJMD::marble_game_turn,
            MMMNFDNLJMD::mut_marble_game_turn,
            MMMNFDNLJMD::set_marble_game_turn,
        ));
        oneofs.push(mmmnfdnljmd::OEEHIFHNFDH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MMMNFDNLJMD>(
            "MMMNFDNLJMD",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MMMNFDNLJMD {
    const NAME: &'static str = "MMMNFDNLJMD";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.queue_position = is.read_uint32()?;
                },
                16 => {
                    self.GPJGGKNOAFD = is.read_uint32()?;
                },
                810 => {
                    self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(is.read_message()?));
                },
                818 => {
                    self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(is.read_message()?));
                },
                826 => {
                    self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(is.read_message()?));
                },
                834 => {
                    self.OEEHIFHNFDH = ::std::option::Option::Some(mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.queue_position != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.queue_position);
        }
        if self.GPJGGKNOAFD != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.GPJGGKNOAFD);
        }
        if let ::std::option::Option::Some(ref v) = self.OEEHIFHNFDH {
            match v {
                &mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.queue_position != 0 {
            os.write_uint32(1, self.queue_position)?;
        }
        if self.GPJGGKNOAFD != 0 {
            os.write_uint32(2, self.GPJGGKNOAFD)?;
        }
        if let ::std::option::Option::Some(ref v) = self.OEEHIFHNFDH {
            match v {
                &mmmnfdnljmd::OEEHIFHNFDH::MarbleGameBegin(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
                &mmmnfdnljmd::OEEHIFHNFDH::MarbleGameEnd(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(102, v, os)?;
                },
                &mmmnfdnljmd::OEEHIFHNFDH::MarbleGameRound(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(103, v, os)?;
                },
                &mmmnfdnljmd::OEEHIFHNFDH::MarbleGameTurn(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(104, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MMMNFDNLJMD {
        MMMNFDNLJMD::new()
    }

    fn clear(&mut self) {
        self.queue_position = 0;
        self.GPJGGKNOAFD = 0;
        self.OEEHIFHNFDH = ::std::option::Option::None;
        self.OEEHIFHNFDH = ::std::option::Option::None;
        self.OEEHIFHNFDH = ::std::option::Option::None;
        self.OEEHIFHNFDH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MMMNFDNLJMD {
        static instance: MMMNFDNLJMD = MMMNFDNLJMD {
            queue_position: 0,
            GPJGGKNOAFD: 0,
            OEEHIFHNFDH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MMMNFDNLJMD {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MMMNFDNLJMD").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MMMNFDNLJMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MMMNFDNLJMD {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MMMNFDNLJMD`
pub mod mmmnfdnljmd {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:MMMNFDNLJMD.OEEHIFHNFDH)
    pub enum OEEHIFHNFDH {
        // @@protoc_insertion_point(oneof_field:MMMNFDNLJMD.marble_game_begin)
        MarbleGameBegin(super::super::LJNPGKDOJHO::LJNPGKDOJHO),
        // @@protoc_insertion_point(oneof_field:MMMNFDNLJMD.marble_game_end)
        MarbleGameEnd(super::super::BPNMJCHEDNL::BPNMJCHEDNL),
        // @@protoc_insertion_point(oneof_field:MMMNFDNLJMD.marble_game_round)
        MarbleGameRound(super::super::FOOPINGAFEG::FOOPINGAFEG),
        // @@protoc_insertion_point(oneof_field:MMMNFDNLJMD.marble_game_turn)
        MarbleGameTurn(super::super::OFILKJCLEGI::OFILKJCLEGI),
    }

    impl ::protobuf::Oneof for OEEHIFHNFDH {
    }

    impl ::protobuf::OneofFull for OEEHIFHNFDH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::MMMNFDNLJMD as ::protobuf::MessageFull>::descriptor().oneof_by_name("OEEHIFHNFDH").unwrap()).clone()
        }
    }

    impl OEEHIFHNFDH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<OEEHIFHNFDH>("OEEHIFHNFDH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MMMNFDNLJMD.proto\x1a\x11BPNMJCHEDNL.proto\x1a\x11FOOPINGAFEG.prot\
    o\x1a\x11LJNPGKDOJHO.proto\x1a\x11OFILKJCLEGI.proto\"\xcf\x02\n\x0bMMMNF\
    DNLJMD\x12%\n\x0equeue_position\x18\x01\x20\x01(\rR\rqueuePosition\x12\
    \x20\n\x0bGPJGGKNOAFD\x18\x02\x20\x01(\rR\x0bGPJGGKNOAFD\x12:\n\x11marbl\
    e_game_begin\x18e\x20\x01(\x0b2\x0c.LJNPGKDOJHOH\0R\x0fmarbleGameBegin\
    \x126\n\x0fmarble_game_end\x18f\x20\x01(\x0b2\x0c.BPNMJCHEDNLH\0R\rmarbl\
    eGameEnd\x12:\n\x11marble_game_round\x18g\x20\x01(\x0b2\x0c.FOOPINGAFEGH\
    \0R\x0fmarbleGameRound\x128\n\x10marble_game_turn\x18h\x20\x01(\x0b2\x0c\
    .OFILKJCLEGIH\0R\x0emarbleGameTurnB\r\n\x0bOEEHIFHNFDHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::BPNMJCHEDNL::file_descriptor().clone());
            deps.push(super::FOOPINGAFEG::file_descriptor().clone());
            deps.push(super::LJNPGKDOJHO::file_descriptor().clone());
            deps.push(super::OFILKJCLEGI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MMMNFDNLJMD::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
