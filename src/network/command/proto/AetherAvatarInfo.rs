// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AetherAvatarInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:AetherAvatarInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AetherAvatarInfo {
    // message fields
    // @@protoc_insertion_point(field:AetherAvatarInfo.id)
    pub id: u32,
    // @@protoc_insertion_point(field:AetherAvatarInfo.index)
    pub index: u32,
    // @@protoc_insertion_point(field:AetherAvatarInfo.promotion)
    pub promotion: u32,
    // @@protoc_insertion_point(field:AetherAvatarInfo.passive_skill)
    pub passive_skill: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:AetherAvatarInfo.spirit_lineup_type)
    pub spirit_lineup_type: ::protobuf::EnumOrUnknown<super::AetherdivideSpiritLineupType::AetherdivideSpiritLineupType>,
    // @@protoc_insertion_point(field:AetherAvatarInfo.sp_bar)
    pub sp_bar: ::protobuf::MessageField<super::SpBarInfo::SpBarInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:AetherAvatarInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AetherAvatarInfo {
    fn default() -> &'a AetherAvatarInfo {
        <AetherAvatarInfo as ::protobuf::Message>::default_instance()
    }
}

impl AetherAvatarInfo {
    pub fn new() -> AetherAvatarInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &AetherAvatarInfo| { &m.id },
            |m: &mut AetherAvatarInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &AetherAvatarInfo| { &m.index },
            |m: &mut AetherAvatarInfo| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "promotion",
            |m: &AetherAvatarInfo| { &m.promotion },
            |m: &mut AetherAvatarInfo| { &mut m.promotion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "passive_skill",
            |m: &AetherAvatarInfo| { &m.passive_skill },
            |m: &mut AetherAvatarInfo| { &mut m.passive_skill },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spirit_lineup_type",
            |m: &AetherAvatarInfo| { &m.spirit_lineup_type },
            |m: &mut AetherAvatarInfo| { &mut m.spirit_lineup_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SpBarInfo::SpBarInfo>(
            "sp_bar",
            |m: &AetherAvatarInfo| { &m.sp_bar },
            |m: &mut AetherAvatarInfo| { &mut m.sp_bar },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AetherAvatarInfo>(
            "AetherAvatarInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AetherAvatarInfo {
    const NAME: &'static str = "AetherAvatarInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                16 => {
                    self.index = is.read_uint32()?;
                },
                24 => {
                    self.promotion = is.read_uint32()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.passive_skill)?;
                },
                32 => {
                    self.passive_skill.push(is.read_uint32()?);
                },
                40 => {
                    self.spirit_lineup_type = is.read_enum_or_unknown()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sp_bar)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.index);
        }
        if self.promotion != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.promotion);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(4, &self.passive_skill);
        if self.spirit_lineup_type != ::protobuf::EnumOrUnknown::new(super::AetherdivideSpiritLineupType::AetherdivideSpiritLineupType::AETHERDIVIDE_SPIRIT_LINEUP_NONE) {
            my_size += ::protobuf::rt::int32_size(5, self.spirit_lineup_type.value());
        }
        if let Some(v) = self.sp_bar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.index != 0 {
            os.write_uint32(2, self.index)?;
        }
        if self.promotion != 0 {
            os.write_uint32(3, self.promotion)?;
        }
        os.write_repeated_packed_uint32(4, &self.passive_skill)?;
        if self.spirit_lineup_type != ::protobuf::EnumOrUnknown::new(super::AetherdivideSpiritLineupType::AetherdivideSpiritLineupType::AETHERDIVIDE_SPIRIT_LINEUP_NONE) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.spirit_lineup_type))?;
        }
        if let Some(v) = self.sp_bar.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AetherAvatarInfo {
        AetherAvatarInfo::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.index = 0;
        self.promotion = 0;
        self.passive_skill.clear();
        self.spirit_lineup_type = ::protobuf::EnumOrUnknown::new(super::AetherdivideSpiritLineupType::AetherdivideSpiritLineupType::AETHERDIVIDE_SPIRIT_LINEUP_NONE);
        self.sp_bar.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AetherAvatarInfo {
        static instance: AetherAvatarInfo = AetherAvatarInfo {
            id: 0,
            index: 0,
            promotion: 0,
            passive_skill: ::std::vec::Vec::new(),
            spirit_lineup_type: ::protobuf::EnumOrUnknown::from_i32(0),
            sp_bar: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AetherAvatarInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AetherAvatarInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AetherAvatarInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AetherAvatarInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16AetherAvatarInfo.proto\x1a\"AetherdivideSpiritLineupType.proto\x1a\
    \x0fSpBarInfo.proto\"\xeb\x01\n\x10AetherAvatarInfo\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\rR\x02id\x12\x14\n\x05index\x18\x02\x20\x01(\rR\x05index\
    \x12\x1c\n\tpromotion\x18\x03\x20\x01(\rR\tpromotion\x12#\n\rpassive_ski\
    ll\x18\x04\x20\x03(\rR\x0cpassiveSkill\x12K\n\x12spirit_lineup_type\x18\
    \x05\x20\x01(\x0e2\x1d.AetherdivideSpiritLineupTypeR\x10spiritLineupType\
    \x12!\n\x06sp_bar\x18\x06\x20\x01(\x0b2\n.SpBarInfoR\x05spBarb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::AetherdivideSpiritLineupType::file_descriptor().clone());
            deps.push(super::SpBarInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AetherAvatarInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
