// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AKOKICDPFMP.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:AKOKICDPFMP)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AKOKICDPFMP {
    // message fields
    // @@protoc_insertion_point(field:AKOKICDPFMP.AHEHKCILDFA)
    pub AHEHKCILDFA: u32,
    // message oneof groups
    pub GFIPHJBLGBN: ::std::option::Option<akokicdpfmp::GFIPHJBLGBN>,
    // special fields
    // @@protoc_insertion_point(special_field:AKOKICDPFMP.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AKOKICDPFMP {
    fn default() -> &'a AKOKICDPFMP {
        <AKOKICDPFMP as ::protobuf::Message>::default_instance()
    }
}

impl AKOKICDPFMP {
    pub fn new() -> AKOKICDPFMP {
        ::std::default::Default::default()
    }

    // .LBAOGIBPJOP LGPIEMDLHJM = 775;

    pub fn LGPIEMDLHJM(&self) -> &super::LBAOGIBPJOP::LBAOGIBPJOP {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(ref v)) => v,
            _ => <super::LBAOGIBPJOP::LBAOGIBPJOP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LGPIEMDLHJM(&mut self) {
        self.GFIPHJBLGBN = ::std::option::Option::None;
    }

    pub fn has_LGPIEMDLHJM(&self) -> bool {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LGPIEMDLHJM(&mut self, v: super::LBAOGIBPJOP::LBAOGIBPJOP) {
        self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LGPIEMDLHJM(&mut self) -> &mut super::LBAOGIBPJOP::LBAOGIBPJOP {
        if let ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(_)) = self.GFIPHJBLGBN {
        } else {
            self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(super::LBAOGIBPJOP::LBAOGIBPJOP::new()));
        }
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LGPIEMDLHJM(&mut self) -> super::LBAOGIBPJOP::LBAOGIBPJOP {
        if self.has_LGPIEMDLHJM() {
            match self.GFIPHJBLGBN.take() {
                ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LBAOGIBPJOP::LBAOGIBPJOP::new()
        }
    }

    // .GLDNBPFCNHD PHMCJEJIDJA = 144;

    pub fn PHMCJEJIDJA(&self) -> &super::GLDNBPFCNHD::GLDNBPFCNHD {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(ref v)) => v,
            _ => <super::GLDNBPFCNHD::GLDNBPFCNHD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PHMCJEJIDJA(&mut self) {
        self.GFIPHJBLGBN = ::std::option::Option::None;
    }

    pub fn has_PHMCJEJIDJA(&self) -> bool {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PHMCJEJIDJA(&mut self, v: super::GLDNBPFCNHD::GLDNBPFCNHD) {
        self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PHMCJEJIDJA(&mut self) -> &mut super::GLDNBPFCNHD::GLDNBPFCNHD {
        if let ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(_)) = self.GFIPHJBLGBN {
        } else {
            self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(super::GLDNBPFCNHD::GLDNBPFCNHD::new()));
        }
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PHMCJEJIDJA(&mut self) -> super::GLDNBPFCNHD::GLDNBPFCNHD {
        if self.has_PHMCJEJIDJA() {
            match self.GFIPHJBLGBN.take() {
                ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GLDNBPFCNHD::GLDNBPFCNHD::new()
        }
    }

    // .ICAOOPPMJDJ rogue_finish_info = 307;

    pub fn rogue_finish_info(&self) -> &super::ICAOOPPMJDJ::ICAOOPPMJDJ {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(ref v)) => v,
            _ => <super::ICAOOPPMJDJ::ICAOOPPMJDJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_finish_info(&mut self) {
        self.GFIPHJBLGBN = ::std::option::Option::None;
    }

    pub fn has_rogue_finish_info(&self) -> bool {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_finish_info(&mut self, v: super::ICAOOPPMJDJ::ICAOOPPMJDJ) {
        self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_finish_info(&mut self) -> &mut super::ICAOOPPMJDJ::ICAOOPPMJDJ {
        if let ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(_)) = self.GFIPHJBLGBN {
        } else {
            self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(super::ICAOOPPMJDJ::ICAOOPPMJDJ::new()));
        }
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_finish_info(&mut self) -> super::ICAOOPPMJDJ::ICAOOPPMJDJ {
        if self.has_rogue_finish_info() {
            match self.GFIPHJBLGBN.take() {
                ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ICAOOPPMJDJ::ICAOOPPMJDJ::new()
        }
    }

    // .MAOGFDKDCKM MEJDMJIKIMO = 902;

    pub fn MEJDMJIKIMO(&self) -> &super::MAOGFDKDCKM::MAOGFDKDCKM {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(ref v)) => v,
            _ => <super::MAOGFDKDCKM::MAOGFDKDCKM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MEJDMJIKIMO(&mut self) {
        self.GFIPHJBLGBN = ::std::option::Option::None;
    }

    pub fn has_MEJDMJIKIMO(&self) -> bool {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MEJDMJIKIMO(&mut self, v: super::MAOGFDKDCKM::MAOGFDKDCKM) {
        self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MEJDMJIKIMO(&mut self) -> &mut super::MAOGFDKDCKM::MAOGFDKDCKM {
        if let ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(_)) = self.GFIPHJBLGBN {
        } else {
            self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(super::MAOGFDKDCKM::MAOGFDKDCKM::new()));
        }
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MEJDMJIKIMO(&mut self) -> super::MAOGFDKDCKM::MAOGFDKDCKM {
        if self.has_MEJDMJIKIMO() {
            match self.GFIPHJBLGBN.take() {
                ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MAOGFDKDCKM::MAOGFDKDCKM::new()
        }
    }

    // .GOCKGIGBDCG JHFGDIJPFCG = 653;

    pub fn JHFGDIJPFCG(&self) -> &super::GOCKGIGBDCG::GOCKGIGBDCG {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(ref v)) => v,
            _ => <super::GOCKGIGBDCG::GOCKGIGBDCG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JHFGDIJPFCG(&mut self) {
        self.GFIPHJBLGBN = ::std::option::Option::None;
    }

    pub fn has_JHFGDIJPFCG(&self) -> bool {
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JHFGDIJPFCG(&mut self, v: super::GOCKGIGBDCG::GOCKGIGBDCG) {
        self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JHFGDIJPFCG(&mut self) -> &mut super::GOCKGIGBDCG::GOCKGIGBDCG {
        if let ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(_)) = self.GFIPHJBLGBN {
        } else {
            self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(super::GOCKGIGBDCG::GOCKGIGBDCG::new()));
        }
        match self.GFIPHJBLGBN {
            ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JHFGDIJPFCG(&mut self) -> super::GOCKGIGBDCG::GOCKGIGBDCG {
        if self.has_JHFGDIJPFCG() {
            match self.GFIPHJBLGBN.take() {
                ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GOCKGIGBDCG::GOCKGIGBDCG::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AHEHKCILDFA",
            |m: &AKOKICDPFMP| { &m.AHEHKCILDFA },
            |m: &mut AKOKICDPFMP| { &mut m.AHEHKCILDFA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LBAOGIBPJOP::LBAOGIBPJOP>(
            "LGPIEMDLHJM",
            AKOKICDPFMP::has_LGPIEMDLHJM,
            AKOKICDPFMP::LGPIEMDLHJM,
            AKOKICDPFMP::mut_LGPIEMDLHJM,
            AKOKICDPFMP::set_LGPIEMDLHJM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GLDNBPFCNHD::GLDNBPFCNHD>(
            "PHMCJEJIDJA",
            AKOKICDPFMP::has_PHMCJEJIDJA,
            AKOKICDPFMP::PHMCJEJIDJA,
            AKOKICDPFMP::mut_PHMCJEJIDJA,
            AKOKICDPFMP::set_PHMCJEJIDJA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ICAOOPPMJDJ::ICAOOPPMJDJ>(
            "rogue_finish_info",
            AKOKICDPFMP::has_rogue_finish_info,
            AKOKICDPFMP::rogue_finish_info,
            AKOKICDPFMP::mut_rogue_finish_info,
            AKOKICDPFMP::set_rogue_finish_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MAOGFDKDCKM::MAOGFDKDCKM>(
            "MEJDMJIKIMO",
            AKOKICDPFMP::has_MEJDMJIKIMO,
            AKOKICDPFMP::MEJDMJIKIMO,
            AKOKICDPFMP::mut_MEJDMJIKIMO,
            AKOKICDPFMP::set_MEJDMJIKIMO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GOCKGIGBDCG::GOCKGIGBDCG>(
            "JHFGDIJPFCG",
            AKOKICDPFMP::has_JHFGDIJPFCG,
            AKOKICDPFMP::JHFGDIJPFCG,
            AKOKICDPFMP::mut_JHFGDIJPFCG,
            AKOKICDPFMP::set_JHFGDIJPFCG,
        ));
        oneofs.push(akokicdpfmp::GFIPHJBLGBN::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AKOKICDPFMP>(
            "AKOKICDPFMP",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AKOKICDPFMP {
    const NAME: &'static str = "AKOKICDPFMP";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.AHEHKCILDFA = is.read_uint32()?;
                },
                6202 => {
                    self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(is.read_message()?));
                },
                1154 => {
                    self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(is.read_message()?));
                },
                2458 => {
                    self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(is.read_message()?));
                },
                7218 => {
                    self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(is.read_message()?));
                },
                5226 => {
                    self.GFIPHJBLGBN = ::std::option::Option::Some(akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.AHEHKCILDFA != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.AHEHKCILDFA);
        }
        if let ::std::option::Option::Some(ref v) = self.GFIPHJBLGBN {
            match v {
                &akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.AHEHKCILDFA != 0 {
            os.write_uint32(2, self.AHEHKCILDFA)?;
        }
        if let ::std::option::Option::Some(ref v) = self.GFIPHJBLGBN {
            match v {
                &akokicdpfmp::GFIPHJBLGBN::LGPIEMDLHJM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(775, v, os)?;
                },
                &akokicdpfmp::GFIPHJBLGBN::PHMCJEJIDJA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(144, v, os)?;
                },
                &akokicdpfmp::GFIPHJBLGBN::RogueFinishInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(307, v, os)?;
                },
                &akokicdpfmp::GFIPHJBLGBN::MEJDMJIKIMO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(902, v, os)?;
                },
                &akokicdpfmp::GFIPHJBLGBN::JHFGDIJPFCG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(653, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AKOKICDPFMP {
        AKOKICDPFMP::new()
    }

    fn clear(&mut self) {
        self.AHEHKCILDFA = 0;
        self.GFIPHJBLGBN = ::std::option::Option::None;
        self.GFIPHJBLGBN = ::std::option::Option::None;
        self.GFIPHJBLGBN = ::std::option::Option::None;
        self.GFIPHJBLGBN = ::std::option::Option::None;
        self.GFIPHJBLGBN = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AKOKICDPFMP {
        static instance: AKOKICDPFMP = AKOKICDPFMP {
            AHEHKCILDFA: 0,
            GFIPHJBLGBN: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AKOKICDPFMP {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AKOKICDPFMP").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AKOKICDPFMP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AKOKICDPFMP {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AKOKICDPFMP`
pub mod akokicdpfmp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AKOKICDPFMP.GFIPHJBLGBN)
    pub enum GFIPHJBLGBN {
        // @@protoc_insertion_point(oneof_field:AKOKICDPFMP.LGPIEMDLHJM)
        LGPIEMDLHJM(super::super::LBAOGIBPJOP::LBAOGIBPJOP),
        // @@protoc_insertion_point(oneof_field:AKOKICDPFMP.PHMCJEJIDJA)
        PHMCJEJIDJA(super::super::GLDNBPFCNHD::GLDNBPFCNHD),
        // @@protoc_insertion_point(oneof_field:AKOKICDPFMP.rogue_finish_info)
        RogueFinishInfo(super::super::ICAOOPPMJDJ::ICAOOPPMJDJ),
        // @@protoc_insertion_point(oneof_field:AKOKICDPFMP.MEJDMJIKIMO)
        MEJDMJIKIMO(super::super::MAOGFDKDCKM::MAOGFDKDCKM),
        // @@protoc_insertion_point(oneof_field:AKOKICDPFMP.JHFGDIJPFCG)
        JHFGDIJPFCG(super::super::GOCKGIGBDCG::GOCKGIGBDCG),
    }

    impl ::protobuf::Oneof for GFIPHJBLGBN {
    }

    impl ::protobuf::OneofFull for GFIPHJBLGBN {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AKOKICDPFMP as ::protobuf::MessageFull>::descriptor().oneof_by_name("GFIPHJBLGBN").unwrap()).clone()
        }
    }

    impl GFIPHJBLGBN {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<GFIPHJBLGBN>("GFIPHJBLGBN")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AKOKICDPFMP.proto\x1a\x11GLDNBPFCNHD.proto\x1a\x11GOCKGIGBDCG.prot\
    o\x1a\x11ICAOOPPMJDJ.proto\x1a\x11LBAOGIBPJOP.proto\x1a\x11MAOGFDKDCKM.p\
    roto\"\xc7\x02\n\x0bAKOKICDPFMP\x12\x20\n\x0bAHEHKCILDFA\x18\x02\x20\x01\
    (\rR\x0bAHEHKCILDFA\x121\n\x0bLGPIEMDLHJM\x18\x87\x06\x20\x01(\x0b2\x0c.\
    LBAOGIBPJOPH\0R\x0bLGPIEMDLHJM\x121\n\x0bPHMCJEJIDJA\x18\x90\x01\x20\x01\
    (\x0b2\x0c.GLDNBPFCNHDH\0R\x0bPHMCJEJIDJA\x12;\n\x11rogue_finish_info\
    \x18\xb3\x02\x20\x01(\x0b2\x0c.ICAOOPPMJDJH\0R\x0frogueFinishInfo\x121\n\
    \x0bMEJDMJIKIMO\x18\x86\x07\x20\x01(\x0b2\x0c.MAOGFDKDCKMH\0R\x0bMEJDMJI\
    KIMO\x121\n\x0bJHFGDIJPFCG\x18\x8d\x05\x20\x01(\x0b2\x0c.GOCKGIGBDCGH\0R\
    \x0bJHFGDIJPFCGB\r\n\x0bGFIPHJBLGBNb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::GLDNBPFCNHD::file_descriptor().clone());
            deps.push(super::GOCKGIGBDCG::file_descriptor().clone());
            deps.push(super::ICAOOPPMJDJ::file_descriptor().clone());
            deps.push(super::LBAOGIBPJOP::file_descriptor().clone());
            deps.push(super::MAOGFDKDCKM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AKOKICDPFMP::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
