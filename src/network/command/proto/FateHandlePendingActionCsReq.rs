// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FateHandlePendingActionCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:FateHandlePendingActionCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FateHandlePendingActionCsReq {
    // message fields
    // @@protoc_insertion_point(field:FateHandlePendingActionCsReq.queue_position)
    pub queue_position: u32,
    // message oneof groups
    pub KOIJFOFFJNJ: ::std::option::Option<fate_handle_pending_action_cs_req::KOIJFOFFJNJ>,
    // special fields
    // @@protoc_insertion_point(special_field:FateHandlePendingActionCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FateHandlePendingActionCsReq {
    fn default() -> &'a FateHandlePendingActionCsReq {
        <FateHandlePendingActionCsReq as ::protobuf::Message>::default_instance()
    }
}

impl FateHandlePendingActionCsReq {
    pub fn new() -> FateHandlePendingActionCsReq {
        ::std::default::Default::default()
    }

    // .LICMPOLBCFJ BAMNOJKMBMN = 12;

    pub fn BAMNOJKMBMN(&self) -> &super::LICMPOLBCFJ::LICMPOLBCFJ {
        match self.KOIJFOFFJNJ {
            ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(ref v)) => v,
            _ => <super::LICMPOLBCFJ::LICMPOLBCFJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BAMNOJKMBMN(&mut self) {
        self.KOIJFOFFJNJ = ::std::option::Option::None;
    }

    pub fn has_BAMNOJKMBMN(&self) -> bool {
        match self.KOIJFOFFJNJ {
            ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BAMNOJKMBMN(&mut self, v: super::LICMPOLBCFJ::LICMPOLBCFJ) {
        self.KOIJFOFFJNJ = ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BAMNOJKMBMN(&mut self) -> &mut super::LICMPOLBCFJ::LICMPOLBCFJ {
        if let ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(_)) = self.KOIJFOFFJNJ {
        } else {
            self.KOIJFOFFJNJ = ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(super::LICMPOLBCFJ::LICMPOLBCFJ::new()));
        }
        match self.KOIJFOFFJNJ {
            ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BAMNOJKMBMN(&mut self) -> super::LICMPOLBCFJ::LICMPOLBCFJ {
        if self.has_BAMNOJKMBMN() {
            match self.KOIJFOFFJNJ.take() {
                ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LICMPOLBCFJ::LICMPOLBCFJ::new()
        }
    }

    // .DANEMLLJACO FJGMNIOILOK = 10;

    pub fn FJGMNIOILOK(&self) -> &super::DANEMLLJACO::DANEMLLJACO {
        match self.KOIJFOFFJNJ {
            ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(ref v)) => v,
            _ => <super::DANEMLLJACO::DANEMLLJACO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FJGMNIOILOK(&mut self) {
        self.KOIJFOFFJNJ = ::std::option::Option::None;
    }

    pub fn has_FJGMNIOILOK(&self) -> bool {
        match self.KOIJFOFFJNJ {
            ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FJGMNIOILOK(&mut self, v: super::DANEMLLJACO::DANEMLLJACO) {
        self.KOIJFOFFJNJ = ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FJGMNIOILOK(&mut self) -> &mut super::DANEMLLJACO::DANEMLLJACO {
        if let ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(_)) = self.KOIJFOFFJNJ {
        } else {
            self.KOIJFOFFJNJ = ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(super::DANEMLLJACO::DANEMLLJACO::new()));
        }
        match self.KOIJFOFFJNJ {
            ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FJGMNIOILOK(&mut self) -> super::DANEMLLJACO::DANEMLLJACO {
        if self.has_FJGMNIOILOK() {
            match self.KOIJFOFFJNJ.take() {
                ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DANEMLLJACO::DANEMLLJACO::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "queue_position",
            |m: &FateHandlePendingActionCsReq| { &m.queue_position },
            |m: &mut FateHandlePendingActionCsReq| { &mut m.queue_position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LICMPOLBCFJ::LICMPOLBCFJ>(
            "BAMNOJKMBMN",
            FateHandlePendingActionCsReq::has_BAMNOJKMBMN,
            FateHandlePendingActionCsReq::BAMNOJKMBMN,
            FateHandlePendingActionCsReq::mut_BAMNOJKMBMN,
            FateHandlePendingActionCsReq::set_BAMNOJKMBMN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DANEMLLJACO::DANEMLLJACO>(
            "FJGMNIOILOK",
            FateHandlePendingActionCsReq::has_FJGMNIOILOK,
            FateHandlePendingActionCsReq::FJGMNIOILOK,
            FateHandlePendingActionCsReq::mut_FJGMNIOILOK,
            FateHandlePendingActionCsReq::set_FJGMNIOILOK,
        ));
        oneofs.push(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FateHandlePendingActionCsReq>(
            "FateHandlePendingActionCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FateHandlePendingActionCsReq {
    const NAME: &'static str = "FateHandlePendingActionCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.queue_position = is.read_uint32()?;
                },
                98 => {
                    self.KOIJFOFFJNJ = ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(is.read_message()?));
                },
                82 => {
                    self.KOIJFOFFJNJ = ::std::option::Option::Some(fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.queue_position != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.queue_position);
        }
        if let ::std::option::Option::Some(ref v) = self.KOIJFOFFJNJ {
            match v {
                &fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.queue_position != 0 {
            os.write_uint32(3, self.queue_position)?;
        }
        if let ::std::option::Option::Some(ref v) = self.KOIJFOFFJNJ {
            match v {
                &fate_handle_pending_action_cs_req::KOIJFOFFJNJ::BAMNOJKMBMN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &fate_handle_pending_action_cs_req::KOIJFOFFJNJ::FJGMNIOILOK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FateHandlePendingActionCsReq {
        FateHandlePendingActionCsReq::new()
    }

    fn clear(&mut self) {
        self.queue_position = 0;
        self.KOIJFOFFJNJ = ::std::option::Option::None;
        self.KOIJFOFFJNJ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FateHandlePendingActionCsReq {
        static instance: FateHandlePendingActionCsReq = FateHandlePendingActionCsReq {
            queue_position: 0,
            KOIJFOFFJNJ: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FateHandlePendingActionCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FateHandlePendingActionCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FateHandlePendingActionCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FateHandlePendingActionCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FateHandlePendingActionCsReq`
pub mod fate_handle_pending_action_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:FateHandlePendingActionCsReq.KOIJFOFFJNJ)
    pub enum KOIJFOFFJNJ {
        // @@protoc_insertion_point(oneof_field:FateHandlePendingActionCsReq.BAMNOJKMBMN)
        BAMNOJKMBMN(super::super::LICMPOLBCFJ::LICMPOLBCFJ),
        // @@protoc_insertion_point(oneof_field:FateHandlePendingActionCsReq.FJGMNIOILOK)
        FJGMNIOILOK(super::super::DANEMLLJACO::DANEMLLJACO),
    }

    impl ::protobuf::Oneof for KOIJFOFFJNJ {
    }

    impl ::protobuf::OneofFull for KOIJFOFFJNJ {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FateHandlePendingActionCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("KOIJFOFFJNJ").unwrap()).clone()
        }
    }

    impl KOIJFOFFJNJ {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KOIJFOFFJNJ>("KOIJFOFFJNJ")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"FateHandlePendingActionCsReq.proto\x1a\x11DANEMLLJACO.proto\x1a\x11L\
    ICMPOLBCFJ.proto\"\xb8\x01\n\x1cFateHandlePendingActionCsReq\x12%\n\x0eq\
    ueue_position\x18\x03\x20\x01(\rR\rqueuePosition\x120\n\x0bBAMNOJKMBMN\
    \x18\x0c\x20\x01(\x0b2\x0c.LICMPOLBCFJH\0R\x0bBAMNOJKMBMN\x120\n\x0bFJGM\
    NIOILOK\x18\n\x20\x01(\x0b2\x0c.DANEMLLJACOH\0R\x0bFJGMNIOILOKB\r\n\x0bK\
    OIJFOFFJNJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::DANEMLLJACO::file_descriptor().clone());
            deps.push(super::LICMPOLBCFJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FateHandlePendingActionCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
