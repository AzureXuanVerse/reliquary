// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `TrainPartyInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:TrainPartyInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TrainPartyInfo {
    // message fields
    // @@protoc_insertion_point(field:TrainPartyInfo.cur_fund)
    pub cur_fund: u32,
    // @@protoc_insertion_point(field:TrainPartyInfo.PPFFKFGOLLJ)
    pub PPFFKFGOLLJ: u32,
    // @@protoc_insertion_point(field:TrainPartyInfo.EEBNAAPBKCN)
    pub EEBNAAPBKCN: u32,
    // @@protoc_insertion_point(field:TrainPartyInfo.dynamic_id_list)
    pub dynamic_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:TrainPartyInfo.FLBNEKGIDBO)
    pub FLBNEKGIDBO: u32,
    // @@protoc_insertion_point(field:TrainPartyInfo.EOHBBEAKODF)
    pub EOHBBEAKODF: ::std::vec::Vec<super::INDFFNNHOHC::INDFFNNHOHC>,
    // @@protoc_insertion_point(field:TrainPartyInfo.CNAJOIGNMLJ)
    pub CNAJOIGNMLJ: u32,
    // @@protoc_insertion_point(field:TrainPartyInfo.area_list)
    pub area_list: ::std::vec::Vec<super::TrainPartyArea::TrainPartyArea>,
    // @@protoc_insertion_point(field:TrainPartyInfo.CIGACGHPDGK)
    pub CIGACGHPDGK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:TrainPartyInfo.OBOKGLCMKKE)
    pub OBOKGLCMKKE: u32,
    // special fields
    // @@protoc_insertion_point(special_field:TrainPartyInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrainPartyInfo {
    fn default() -> &'a TrainPartyInfo {
        <TrainPartyInfo as ::protobuf::Message>::default_instance()
    }
}

impl TrainPartyInfo {
    pub fn new() -> TrainPartyInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_fund",
            |m: &TrainPartyInfo| { &m.cur_fund },
            |m: &mut TrainPartyInfo| { &mut m.cur_fund },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PPFFKFGOLLJ",
            |m: &TrainPartyInfo| { &m.PPFFKFGOLLJ },
            |m: &mut TrainPartyInfo| { &mut m.PPFFKFGOLLJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EEBNAAPBKCN",
            |m: &TrainPartyInfo| { &m.EEBNAAPBKCN },
            |m: &mut TrainPartyInfo| { &mut m.EEBNAAPBKCN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dynamic_id_list",
            |m: &TrainPartyInfo| { &m.dynamic_id_list },
            |m: &mut TrainPartyInfo| { &mut m.dynamic_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FLBNEKGIDBO",
            |m: &TrainPartyInfo| { &m.FLBNEKGIDBO },
            |m: &mut TrainPartyInfo| { &mut m.FLBNEKGIDBO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EOHBBEAKODF",
            |m: &TrainPartyInfo| { &m.EOHBBEAKODF },
            |m: &mut TrainPartyInfo| { &mut m.EOHBBEAKODF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CNAJOIGNMLJ",
            |m: &TrainPartyInfo| { &m.CNAJOIGNMLJ },
            |m: &mut TrainPartyInfo| { &mut m.CNAJOIGNMLJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "area_list",
            |m: &TrainPartyInfo| { &m.area_list },
            |m: &mut TrainPartyInfo| { &mut m.area_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CIGACGHPDGK",
            |m: &TrainPartyInfo| { &m.CIGACGHPDGK },
            |m: &mut TrainPartyInfo| { &mut m.CIGACGHPDGK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBOKGLCMKKE",
            |m: &TrainPartyInfo| { &m.OBOKGLCMKKE },
            |m: &mut TrainPartyInfo| { &mut m.OBOKGLCMKKE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TrainPartyInfo>(
            "TrainPartyInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TrainPartyInfo {
    const NAME: &'static str = "TrainPartyInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.cur_fund = is.read_uint32()?;
                },
                24 => {
                    self.PPFFKFGOLLJ = is.read_uint32()?;
                },
                8 => {
                    self.EEBNAAPBKCN = is.read_uint32()?;
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.dynamic_id_list)?;
                },
                104 => {
                    self.dynamic_id_list.push(is.read_uint32()?);
                },
                88 => {
                    self.FLBNEKGIDBO = is.read_uint32()?;
                },
                98 => {
                    self.EOHBBEAKODF.push(is.read_message()?);
                },
                56 => {
                    self.CNAJOIGNMLJ = is.read_uint32()?;
                },
                34 => {
                    self.area_list.push(is.read_message()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.CIGACGHPDGK)?;
                },
                48 => {
                    self.CIGACGHPDGK.push(is.read_uint32()?);
                },
                64 => {
                    self.OBOKGLCMKKE = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.cur_fund != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.cur_fund);
        }
        if self.PPFFKFGOLLJ != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.PPFFKFGOLLJ);
        }
        if self.EEBNAAPBKCN != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.EEBNAAPBKCN);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(13, &self.dynamic_id_list);
        if self.FLBNEKGIDBO != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.FLBNEKGIDBO);
        }
        for value in &self.EOHBBEAKODF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CNAJOIGNMLJ != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.CNAJOIGNMLJ);
        }
        for value in &self.area_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(6, &self.CIGACGHPDGK);
        if self.OBOKGLCMKKE != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.OBOKGLCMKKE);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.cur_fund != 0 {
            os.write_uint32(2, self.cur_fund)?;
        }
        if self.PPFFKFGOLLJ != 0 {
            os.write_uint32(3, self.PPFFKFGOLLJ)?;
        }
        if self.EEBNAAPBKCN != 0 {
            os.write_uint32(1, self.EEBNAAPBKCN)?;
        }
        os.write_repeated_packed_uint32(13, &self.dynamic_id_list)?;
        if self.FLBNEKGIDBO != 0 {
            os.write_uint32(11, self.FLBNEKGIDBO)?;
        }
        for v in &self.EOHBBEAKODF {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if self.CNAJOIGNMLJ != 0 {
            os.write_uint32(7, self.CNAJOIGNMLJ)?;
        }
        for v in &self.area_list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_repeated_packed_uint32(6, &self.CIGACGHPDGK)?;
        if self.OBOKGLCMKKE != 0 {
            os.write_uint32(8, self.OBOKGLCMKKE)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrainPartyInfo {
        TrainPartyInfo::new()
    }

    fn clear(&mut self) {
        self.cur_fund = 0;
        self.PPFFKFGOLLJ = 0;
        self.EEBNAAPBKCN = 0;
        self.dynamic_id_list.clear();
        self.FLBNEKGIDBO = 0;
        self.EOHBBEAKODF.clear();
        self.CNAJOIGNMLJ = 0;
        self.area_list.clear();
        self.CIGACGHPDGK.clear();
        self.OBOKGLCMKKE = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrainPartyInfo {
        static instance: TrainPartyInfo = TrainPartyInfo {
            cur_fund: 0,
            PPFFKFGOLLJ: 0,
            EEBNAAPBKCN: 0,
            dynamic_id_list: ::std::vec::Vec::new(),
            FLBNEKGIDBO: 0,
            EOHBBEAKODF: ::std::vec::Vec::new(),
            CNAJOIGNMLJ: 0,
            area_list: ::std::vec::Vec::new(),
            CIGACGHPDGK: ::std::vec::Vec::new(),
            OBOKGLCMKKE: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TrainPartyInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TrainPartyInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TrainPartyInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrainPartyInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14TrainPartyInfo.proto\x1a\x11INDFFNNHOHC.proto\x1a\x14TrainPartyAre\
    a.proto\"\xfd\x02\n\x0eTrainPartyInfo\x12\x19\n\x08cur_fund\x18\x02\x20\
    \x01(\rR\x07curFund\x12\x20\n\x0bPPFFKFGOLLJ\x18\x03\x20\x01(\rR\x0bPPFF\
    KFGOLLJ\x12\x20\n\x0bEEBNAAPBKCN\x18\x01\x20\x01(\rR\x0bEEBNAAPBKCN\x12&\
    \n\x0fdynamic_id_list\x18\r\x20\x03(\rR\rdynamicIdList\x12\x20\n\x0bFLBN\
    EKGIDBO\x18\x0b\x20\x01(\rR\x0bFLBNEKGIDBO\x12.\n\x0bEOHBBEAKODF\x18\x0c\
    \x20\x03(\x0b2\x0c.INDFFNNHOHCR\x0bEOHBBEAKODF\x12\x20\n\x0bCNAJOIGNMLJ\
    \x18\x07\x20\x01(\rR\x0bCNAJOIGNMLJ\x12,\n\tarea_list\x18\x04\x20\x03(\
    \x0b2\x0f.TrainPartyAreaR\x08areaList\x12\x20\n\x0bCIGACGHPDGK\x18\x06\
    \x20\x03(\rR\x0bCIGACGHPDGK\x12\x20\n\x0bOBOKGLCMKKE\x18\x08\x20\x01(\rR\
    \x0bOBOKGLCMKKEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::INDFFNNHOHC::file_descriptor().clone());
            deps.push(super::TrainPartyArea::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(TrainPartyInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
