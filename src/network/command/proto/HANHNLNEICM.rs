// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HANHNLNEICM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:HANHNLNEICM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HANHNLNEICM {
    // message fields
    // @@protoc_insertion_point(field:HANHNLNEICM.avatar_id)
    pub avatar_id: u32,
    // @@protoc_insertion_point(field:HANHNLNEICM.DPDNNMBCPOI)
    pub DPDNNMBCPOI: u32,
    // @@protoc_insertion_point(field:HANHNLNEICM.total_turns)
    pub total_turns: u32,
    // @@protoc_insertion_point(field:HANHNLNEICM.FBCMJGMBJFC)
    pub FBCMJGMBJFC: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.skill_times)
    pub skill_times: ::std::vec::Vec<super::SkillUseProperty::SkillUseProperty>,
    // @@protoc_insertion_point(field:HANHNLNEICM.total_damage)
    pub total_damage: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.total_break_damage)
    pub total_break_damage: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.attack_type_damage)
    pub attack_type_damage: ::std::vec::Vec<super::AttackDamageProperty::AttackDamageProperty>,
    // @@protoc_insertion_point(field:HANHNLNEICM.attack_type_break_damage)
    pub attack_type_break_damage: ::std::vec::Vec<super::AttackDamageProperty::AttackDamageProperty>,
    // @@protoc_insertion_point(field:HANHNLNEICM.attack_type_max_damage)
    pub attack_type_max_damage: ::std::vec::Vec<super::AttackDamageProperty::AttackDamageProperty>,
    // @@protoc_insertion_point(field:HANHNLNEICM.total_damage_taken)
    pub total_damage_taken: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.total_heal)
    pub total_heal: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.total_hp_recover)
    pub total_hp_recover: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.total_shield)
    pub total_shield: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.total_shield_taken)
    pub total_shield_taken: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.total_shield_damage)
    pub total_shield_damage: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.break_times)
    pub break_times: u32,
    // @@protoc_insertion_point(field:HANHNLNEICM.JEPLCJKFOMB)
    pub JEPLCJKFOMB: u32,
    // @@protoc_insertion_point(field:HANHNLNEICM.NCJHDJJDJNL)
    pub NCJHDJJDJNL: u32,
    // @@protoc_insertion_point(field:HANHNLNEICM.LKMGDIADOPB)
    pub LKMGDIADOPB: u32,
    // @@protoc_insertion_point(field:HANHNLNEICM.IBLGMCIPCKM)
    pub IBLGMCIPCKM: f64,
    // @@protoc_insertion_point(field:HANHNLNEICM.entity_id)
    pub entity_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:HANHNLNEICM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HANHNLNEICM {
    fn default() -> &'a HANHNLNEICM {
        <HANHNLNEICM as ::protobuf::Message>::default_instance()
    }
}

impl HANHNLNEICM {
    pub fn new() -> HANHNLNEICM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(22);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_id",
            |m: &HANHNLNEICM| { &m.avatar_id },
            |m: &mut HANHNLNEICM| { &mut m.avatar_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DPDNNMBCPOI",
            |m: &HANHNLNEICM| { &m.DPDNNMBCPOI },
            |m: &mut HANHNLNEICM| { &mut m.DPDNNMBCPOI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_turns",
            |m: &HANHNLNEICM| { &m.total_turns },
            |m: &mut HANHNLNEICM| { &mut m.total_turns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FBCMJGMBJFC",
            |m: &HANHNLNEICM| { &m.FBCMJGMBJFC },
            |m: &mut HANHNLNEICM| { &mut m.FBCMJGMBJFC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "skill_times",
            |m: &HANHNLNEICM| { &m.skill_times },
            |m: &mut HANHNLNEICM| { &mut m.skill_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_damage",
            |m: &HANHNLNEICM| { &m.total_damage },
            |m: &mut HANHNLNEICM| { &mut m.total_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_break_damage",
            |m: &HANHNLNEICM| { &m.total_break_damage },
            |m: &mut HANHNLNEICM| { &mut m.total_break_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attack_type_damage",
            |m: &HANHNLNEICM| { &m.attack_type_damage },
            |m: &mut HANHNLNEICM| { &mut m.attack_type_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attack_type_break_damage",
            |m: &HANHNLNEICM| { &m.attack_type_break_damage },
            |m: &mut HANHNLNEICM| { &mut m.attack_type_break_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attack_type_max_damage",
            |m: &HANHNLNEICM| { &m.attack_type_max_damage },
            |m: &mut HANHNLNEICM| { &mut m.attack_type_max_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_damage_taken",
            |m: &HANHNLNEICM| { &m.total_damage_taken },
            |m: &mut HANHNLNEICM| { &mut m.total_damage_taken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_heal",
            |m: &HANHNLNEICM| { &m.total_heal },
            |m: &mut HANHNLNEICM| { &mut m.total_heal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_hp_recover",
            |m: &HANHNLNEICM| { &m.total_hp_recover },
            |m: &mut HANHNLNEICM| { &mut m.total_hp_recover },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_shield",
            |m: &HANHNLNEICM| { &m.total_shield },
            |m: &mut HANHNLNEICM| { &mut m.total_shield },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_shield_taken",
            |m: &HANHNLNEICM| { &m.total_shield_taken },
            |m: &mut HANHNLNEICM| { &mut m.total_shield_taken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_shield_damage",
            |m: &HANHNLNEICM| { &m.total_shield_damage },
            |m: &mut HANHNLNEICM| { &mut m.total_shield_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "break_times",
            |m: &HANHNLNEICM| { &m.break_times },
            |m: &mut HANHNLNEICM| { &mut m.break_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JEPLCJKFOMB",
            |m: &HANHNLNEICM| { &m.JEPLCJKFOMB },
            |m: &mut HANHNLNEICM| { &mut m.JEPLCJKFOMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NCJHDJJDJNL",
            |m: &HANHNLNEICM| { &m.NCJHDJJDJNL },
            |m: &mut HANHNLNEICM| { &mut m.NCJHDJJDJNL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LKMGDIADOPB",
            |m: &HANHNLNEICM| { &m.LKMGDIADOPB },
            |m: &mut HANHNLNEICM| { &mut m.LKMGDIADOPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IBLGMCIPCKM",
            |m: &HANHNLNEICM| { &m.IBLGMCIPCKM },
            |m: &mut HANHNLNEICM| { &mut m.IBLGMCIPCKM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &HANHNLNEICM| { &m.entity_id },
            |m: &mut HANHNLNEICM| { &mut m.entity_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HANHNLNEICM>(
            "HANHNLNEICM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HANHNLNEICM {
    const NAME: &'static str = "HANHNLNEICM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.avatar_id = is.read_uint32()?;
                },
                16 => {
                    self.DPDNNMBCPOI = is.read_uint32()?;
                },
                24 => {
                    self.total_turns = is.read_uint32()?;
                },
                33 => {
                    self.FBCMJGMBJFC = is.read_double()?;
                },
                42 => {
                    self.skill_times.push(is.read_message()?);
                },
                49 => {
                    self.total_damage = is.read_double()?;
                },
                57 => {
                    self.total_break_damage = is.read_double()?;
                },
                66 => {
                    self.attack_type_damage.push(is.read_message()?);
                },
                74 => {
                    self.attack_type_break_damage.push(is.read_message()?);
                },
                82 => {
                    self.attack_type_max_damage.push(is.read_message()?);
                },
                89 => {
                    self.total_damage_taken = is.read_double()?;
                },
                97 => {
                    self.total_heal = is.read_double()?;
                },
                105 => {
                    self.total_hp_recover = is.read_double()?;
                },
                113 => {
                    self.total_shield = is.read_double()?;
                },
                121 => {
                    self.total_shield_taken = is.read_double()?;
                },
                129 => {
                    self.total_shield_damage = is.read_double()?;
                },
                136 => {
                    self.break_times = is.read_uint32()?;
                },
                144 => {
                    self.JEPLCJKFOMB = is.read_uint32()?;
                },
                152 => {
                    self.NCJHDJJDJNL = is.read_uint32()?;
                },
                160 => {
                    self.LKMGDIADOPB = is.read_uint32()?;
                },
                169 => {
                    self.IBLGMCIPCKM = is.read_double()?;
                },
                176 => {
                    self.entity_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.avatar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.avatar_id);
        }
        if self.DPDNNMBCPOI != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.DPDNNMBCPOI);
        }
        if self.total_turns != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.total_turns);
        }
        if self.FBCMJGMBJFC != 0. {
            my_size += 1 + 8;
        }
        for value in &self.skill_times {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.total_damage != 0. {
            my_size += 1 + 8;
        }
        if self.total_break_damage != 0. {
            my_size += 1 + 8;
        }
        for value in &self.attack_type_damage {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.attack_type_break_damage {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.attack_type_max_damage {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.total_damage_taken != 0. {
            my_size += 1 + 8;
        }
        if self.total_heal != 0. {
            my_size += 1 + 8;
        }
        if self.total_hp_recover != 0. {
            my_size += 1 + 8;
        }
        if self.total_shield != 0. {
            my_size += 1 + 8;
        }
        if self.total_shield_taken != 0. {
            my_size += 1 + 8;
        }
        if self.total_shield_damage != 0. {
            my_size += 2 + 8;
        }
        if self.break_times != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.break_times);
        }
        if self.JEPLCJKFOMB != 0 {
            my_size += ::protobuf::rt::uint32_size(18, self.JEPLCJKFOMB);
        }
        if self.NCJHDJJDJNL != 0 {
            my_size += ::protobuf::rt::uint32_size(19, self.NCJHDJJDJNL);
        }
        if self.LKMGDIADOPB != 0 {
            my_size += ::protobuf::rt::uint32_size(20, self.LKMGDIADOPB);
        }
        if self.IBLGMCIPCKM != 0. {
            my_size += 2 + 8;
        }
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(22, self.entity_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.avatar_id != 0 {
            os.write_uint32(1, self.avatar_id)?;
        }
        if self.DPDNNMBCPOI != 0 {
            os.write_uint32(2, self.DPDNNMBCPOI)?;
        }
        if self.total_turns != 0 {
            os.write_uint32(3, self.total_turns)?;
        }
        if self.FBCMJGMBJFC != 0. {
            os.write_double(4, self.FBCMJGMBJFC)?;
        }
        for v in &self.skill_times {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.total_damage != 0. {
            os.write_double(6, self.total_damage)?;
        }
        if self.total_break_damage != 0. {
            os.write_double(7, self.total_break_damage)?;
        }
        for v in &self.attack_type_damage {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.attack_type_break_damage {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for v in &self.attack_type_max_damage {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        if self.total_damage_taken != 0. {
            os.write_double(11, self.total_damage_taken)?;
        }
        if self.total_heal != 0. {
            os.write_double(12, self.total_heal)?;
        }
        if self.total_hp_recover != 0. {
            os.write_double(13, self.total_hp_recover)?;
        }
        if self.total_shield != 0. {
            os.write_double(14, self.total_shield)?;
        }
        if self.total_shield_taken != 0. {
            os.write_double(15, self.total_shield_taken)?;
        }
        if self.total_shield_damage != 0. {
            os.write_double(16, self.total_shield_damage)?;
        }
        if self.break_times != 0 {
            os.write_uint32(17, self.break_times)?;
        }
        if self.JEPLCJKFOMB != 0 {
            os.write_uint32(18, self.JEPLCJKFOMB)?;
        }
        if self.NCJHDJJDJNL != 0 {
            os.write_uint32(19, self.NCJHDJJDJNL)?;
        }
        if self.LKMGDIADOPB != 0 {
            os.write_uint32(20, self.LKMGDIADOPB)?;
        }
        if self.IBLGMCIPCKM != 0. {
            os.write_double(21, self.IBLGMCIPCKM)?;
        }
        if self.entity_id != 0 {
            os.write_uint32(22, self.entity_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HANHNLNEICM {
        HANHNLNEICM::new()
    }

    fn clear(&mut self) {
        self.avatar_id = 0;
        self.DPDNNMBCPOI = 0;
        self.total_turns = 0;
        self.FBCMJGMBJFC = 0.;
        self.skill_times.clear();
        self.total_damage = 0.;
        self.total_break_damage = 0.;
        self.attack_type_damage.clear();
        self.attack_type_break_damage.clear();
        self.attack_type_max_damage.clear();
        self.total_damage_taken = 0.;
        self.total_heal = 0.;
        self.total_hp_recover = 0.;
        self.total_shield = 0.;
        self.total_shield_taken = 0.;
        self.total_shield_damage = 0.;
        self.break_times = 0;
        self.JEPLCJKFOMB = 0;
        self.NCJHDJJDJNL = 0;
        self.LKMGDIADOPB = 0;
        self.IBLGMCIPCKM = 0.;
        self.entity_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HANHNLNEICM {
        static instance: HANHNLNEICM = HANHNLNEICM {
            avatar_id: 0,
            DPDNNMBCPOI: 0,
            total_turns: 0,
            FBCMJGMBJFC: 0.,
            skill_times: ::std::vec::Vec::new(),
            total_damage: 0.,
            total_break_damage: 0.,
            attack_type_damage: ::std::vec::Vec::new(),
            attack_type_break_damage: ::std::vec::Vec::new(),
            attack_type_max_damage: ::std::vec::Vec::new(),
            total_damage_taken: 0.,
            total_heal: 0.,
            total_hp_recover: 0.,
            total_shield: 0.,
            total_shield_taken: 0.,
            total_shield_damage: 0.,
            break_times: 0,
            JEPLCJKFOMB: 0,
            NCJHDJJDJNL: 0,
            LKMGDIADOPB: 0,
            IBLGMCIPCKM: 0.,
            entity_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HANHNLNEICM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HANHNLNEICM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HANHNLNEICM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HANHNLNEICM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HANHNLNEICM.proto\x1a\x1aAttackDamageProperty.proto\x1a\x16SkillUs\
    eProperty.proto\"\xb3\x07\n\x0bHANHNLNEICM\x12\x1b\n\tavatar_id\x18\x01\
    \x20\x01(\rR\x08avatarId\x12\x20\n\x0bDPDNNMBCPOI\x18\x02\x20\x01(\rR\
    \x0bDPDNNMBCPOI\x12\x1f\n\x0btotal_turns\x18\x03\x20\x01(\rR\ntotalTurns\
    \x12\x20\n\x0bFBCMJGMBJFC\x18\x04\x20\x01(\x01R\x0bFBCMJGMBJFC\x122\n\
    \x0bskill_times\x18\x05\x20\x03(\x0b2\x11.SkillUsePropertyR\nskillTimes\
    \x12!\n\x0ctotal_damage\x18\x06\x20\x01(\x01R\x0btotalDamage\x12,\n\x12t\
    otal_break_damage\x18\x07\x20\x01(\x01R\x10totalBreakDamage\x12C\n\x12at\
    tack_type_damage\x18\x08\x20\x03(\x0b2\x15.AttackDamagePropertyR\x10atta\
    ckTypeDamage\x12N\n\x18attack_type_break_damage\x18\t\x20\x03(\x0b2\x15.\
    AttackDamagePropertyR\x15attackTypeBreakDamage\x12J\n\x16attack_type_max\
    _damage\x18\n\x20\x03(\x0b2\x15.AttackDamagePropertyR\x13attackTypeMaxDa\
    mage\x12,\n\x12total_damage_taken\x18\x0b\x20\x01(\x01R\x10totalDamageTa\
    ken\x12\x1d\n\ntotal_heal\x18\x0c\x20\x01(\x01R\ttotalHeal\x12(\n\x10tot\
    al_hp_recover\x18\r\x20\x01(\x01R\x0etotalHpRecover\x12!\n\x0ctotal_shie\
    ld\x18\x0e\x20\x01(\x01R\x0btotalShield\x12,\n\x12total_shield_taken\x18\
    \x0f\x20\x01(\x01R\x10totalShieldTaken\x12.\n\x13total_shield_damage\x18\
    \x10\x20\x01(\x01R\x11totalShieldDamage\x12\x1f\n\x0bbreak_times\x18\x11\
    \x20\x01(\rR\nbreakTimes\x12\x20\n\x0bJEPLCJKFOMB\x18\x12\x20\x01(\rR\
    \x0bJEPLCJKFOMB\x12\x20\n\x0bNCJHDJJDJNL\x18\x13\x20\x01(\rR\x0bNCJHDJJD\
    JNL\x12\x20\n\x0bLKMGDIADOPB\x18\x14\x20\x01(\rR\x0bLKMGDIADOPB\x12\x20\
    \n\x0bIBLGMCIPCKM\x18\x15\x20\x01(\x01R\x0bIBLGMCIPCKM\x12\x1b\n\tentity\
    _id\x18\x16\x20\x01(\rR\x08entityIdb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::AttackDamageProperty::file_descriptor().clone());
            deps.push(super::SkillUseProperty::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HANHNLNEICM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
