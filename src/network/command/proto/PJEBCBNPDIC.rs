// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PJEBCBNPDIC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PJEBCBNPDIC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PJEBCBNPDIC {
    // message fields
    // @@protoc_insertion_point(field:PJEBCBNPDIC.area_id)
    pub area_id: u32,
    // @@protoc_insertion_point(field:PJEBCBNPDIC.IFPOILOPFAG)
    pub IFPOILOPFAG: u32,
    // @@protoc_insertion_point(field:PJEBCBNPDIC.is_taken_reward)
    pub is_taken_reward: bool,
    // @@protoc_insertion_point(field:PJEBCBNPDIC.NPBNMMKHKOP)
    pub NPBNMMKHKOP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PJEBCBNPDIC.record_info)
    pub record_info: ::protobuf::MessageField<super::OLFGBAMEFJI::OLFGBAMEFJI>,
    // @@protoc_insertion_point(field:PJEBCBNPDIC.is_unlocked)
    pub is_unlocked: bool,
    // @@protoc_insertion_point(field:PJEBCBNPDIC.CGAIJCCLKBH)
    pub CGAIJCCLKBH: ::protobuf::MessageField<super::KOIICMIEAEF::KOIICMIEAEF>,
    // @@protoc_insertion_point(field:PJEBCBNPDIC.BIIFELFEGNK)
    pub BIIFELFEGNK: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PJEBCBNPDIC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PJEBCBNPDIC {
    fn default() -> &'a PJEBCBNPDIC {
        <PJEBCBNPDIC as ::protobuf::Message>::default_instance()
    }
}

impl PJEBCBNPDIC {
    pub fn new() -> PJEBCBNPDIC {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "area_id",
            |m: &PJEBCBNPDIC| { &m.area_id },
            |m: &mut PJEBCBNPDIC| { &mut m.area_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IFPOILOPFAG",
            |m: &PJEBCBNPDIC| { &m.IFPOILOPFAG },
            |m: &mut PJEBCBNPDIC| { &mut m.IFPOILOPFAG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_taken_reward",
            |m: &PJEBCBNPDIC| { &m.is_taken_reward },
            |m: &mut PJEBCBNPDIC| { &mut m.is_taken_reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NPBNMMKHKOP",
            |m: &PJEBCBNPDIC| { &m.NPBNMMKHKOP },
            |m: &mut PJEBCBNPDIC| { &mut m.NPBNMMKHKOP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OLFGBAMEFJI::OLFGBAMEFJI>(
            "record_info",
            |m: &PJEBCBNPDIC| { &m.record_info },
            |m: &mut PJEBCBNPDIC| { &mut m.record_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_unlocked",
            |m: &PJEBCBNPDIC| { &m.is_unlocked },
            |m: &mut PJEBCBNPDIC| { &mut m.is_unlocked },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KOIICMIEAEF::KOIICMIEAEF>(
            "CGAIJCCLKBH",
            |m: &PJEBCBNPDIC| { &m.CGAIJCCLKBH },
            |m: &mut PJEBCBNPDIC| { &mut m.CGAIJCCLKBH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BIIFELFEGNK",
            |m: &PJEBCBNPDIC| { &m.BIIFELFEGNK },
            |m: &mut PJEBCBNPDIC| { &mut m.BIIFELFEGNK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PJEBCBNPDIC>(
            "PJEBCBNPDIC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PJEBCBNPDIC {
    const NAME: &'static str = "PJEBCBNPDIC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.area_id = is.read_uint32()?;
                },
                112 => {
                    self.IFPOILOPFAG = is.read_uint32()?;
                },
                88 => {
                    self.is_taken_reward = is.read_bool()?;
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.NPBNMMKHKOP)?;
                },
                104 => {
                    self.NPBNMMKHKOP.push(is.read_uint32()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.record_info)?;
                },
                56 => {
                    self.is_unlocked = is.read_bool()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CGAIJCCLKBH)?;
                },
                96 => {
                    self.BIIFELFEGNK = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.area_id != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.area_id);
        }
        if self.IFPOILOPFAG != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.IFPOILOPFAG);
        }
        if self.is_taken_reward != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(13, &self.NPBNMMKHKOP);
        if let Some(v) = self.record_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.is_unlocked != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.CGAIJCCLKBH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.BIIFELFEGNK != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.area_id != 0 {
            os.write_uint32(6, self.area_id)?;
        }
        if self.IFPOILOPFAG != 0 {
            os.write_uint32(14, self.IFPOILOPFAG)?;
        }
        if self.is_taken_reward != false {
            os.write_bool(11, self.is_taken_reward)?;
        }
        os.write_repeated_packed_uint32(13, &self.NPBNMMKHKOP)?;
        if let Some(v) = self.record_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.is_unlocked != false {
            os.write_bool(7, self.is_unlocked)?;
        }
        if let Some(v) = self.CGAIJCCLKBH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.BIIFELFEGNK != false {
            os.write_bool(12, self.BIIFELFEGNK)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PJEBCBNPDIC {
        PJEBCBNPDIC::new()
    }

    fn clear(&mut self) {
        self.area_id = 0;
        self.IFPOILOPFAG = 0;
        self.is_taken_reward = false;
        self.NPBNMMKHKOP.clear();
        self.record_info.clear();
        self.is_unlocked = false;
        self.CGAIJCCLKBH.clear();
        self.BIIFELFEGNK = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PJEBCBNPDIC {
        static instance: PJEBCBNPDIC = PJEBCBNPDIC {
            area_id: 0,
            IFPOILOPFAG: 0,
            is_taken_reward: false,
            NPBNMMKHKOP: ::std::vec::Vec::new(),
            record_info: ::protobuf::MessageField::none(),
            is_unlocked: false,
            CGAIJCCLKBH: ::protobuf::MessageField::none(),
            BIIFELFEGNK: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PJEBCBNPDIC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PJEBCBNPDIC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PJEBCBNPDIC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PJEBCBNPDIC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11PJEBCBNPDIC.proto\x1a\x11KOIICMIEAEF.proto\x1a\x11OLFGBAMEFJI.prot\
    o\"\xb4\x02\n\x0bPJEBCBNPDIC\x12\x17\n\x07area_id\x18\x06\x20\x01(\rR\
    \x06areaId\x12\x20\n\x0bIFPOILOPFAG\x18\x0e\x20\x01(\rR\x0bIFPOILOPFAG\
    \x12&\n\x0fis_taken_reward\x18\x0b\x20\x01(\x08R\risTakenReward\x12\x20\
    \n\x0bNPBNMMKHKOP\x18\r\x20\x03(\rR\x0bNPBNMMKHKOP\x12-\n\x0brecord_info\
    \x18\x05\x20\x01(\x0b2\x0c.OLFGBAMEFJIR\nrecordInfo\x12\x1f\n\x0bis_unlo\
    cked\x18\x07\x20\x01(\x08R\nisUnlocked\x12.\n\x0bCGAIJCCLKBH\x18\x01\x20\
    \x01(\x0b2\x0c.KOIICMIEAEFR\x0bCGAIJCCLKBH\x12\x20\n\x0bBIIFELFEGNK\x18\
    \x0c\x20\x01(\x08R\x0bBIIFELFEGNKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::KOIICMIEAEF::file_descriptor().clone());
            deps.push(super::OLFGBAMEFJI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PJEBCBNPDIC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
