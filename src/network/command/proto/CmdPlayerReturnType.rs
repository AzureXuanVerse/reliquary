// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdPlayerReturnType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdPlayerReturnType)
pub enum CmdPlayerReturnType {
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTypeNone)
    CmdPlayerReturnTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnPointChangeScNotify)
    CmdPlayerReturnPointChangeScNotify = 4539,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakeRewardCsReq)
    CmdPlayerReturnTakeRewardCsReq = 4570,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakePointRewardScRsp)
    CmdPlayerReturnTakePointRewardScRsp = 4521,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakeRelicCsReq)
    CmdPlayerReturnTakeRelicCsReq = 4502,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnSignScRsp)
    CmdPlayerReturnSignScRsp = 4567,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnForceFinishScNotify)
    CmdPlayerReturnForceFinishScNotify = 4580,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnInfoQueryCsReq)
    CmdPlayerReturnInfoQueryCsReq = 4554,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakeRelicScRsp)
    CmdPlayerReturnTakeRelicScRsp = 4505,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnSignCsReq)
    CmdPlayerReturnSignCsReq = 4591,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnInfoQueryScRsp)
    CmdPlayerReturnInfoQueryScRsp = 4577,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakePointRewardCsReq)
    CmdPlayerReturnTakePointRewardCsReq = 4527,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakeRewardScRsp)
    CmdPlayerReturnTakeRewardScRsp = 4559,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnStartScNotify)
    CmdPlayerReturnStartScNotify = 4520,
}

impl ::protobuf::Enum for CmdPlayerReturnType {
    const NAME: &'static str = "CmdPlayerReturnType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdPlayerReturnType> {
        match value {
            0 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTypeNone),
            4539 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnPointChangeScNotify),
            4570 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRewardCsReq),
            4521 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakePointRewardScRsp),
            4502 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRelicCsReq),
            4567 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnSignScRsp),
            4580 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnForceFinishScNotify),
            4554 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnInfoQueryCsReq),
            4505 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRelicScRsp),
            4591 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnSignCsReq),
            4577 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnInfoQueryScRsp),
            4527 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakePointRewardCsReq),
            4559 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRewardScRsp),
            4520 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnStartScNotify),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdPlayerReturnType> {
        match str {
            "CmdPlayerReturnTypeNone" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTypeNone),
            "CmdPlayerReturnPointChangeScNotify" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnPointChangeScNotify),
            "CmdPlayerReturnTakeRewardCsReq" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRewardCsReq),
            "CmdPlayerReturnTakePointRewardScRsp" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakePointRewardScRsp),
            "CmdPlayerReturnTakeRelicCsReq" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRelicCsReq),
            "CmdPlayerReturnSignScRsp" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnSignScRsp),
            "CmdPlayerReturnForceFinishScNotify" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnForceFinishScNotify),
            "CmdPlayerReturnInfoQueryCsReq" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnInfoQueryCsReq),
            "CmdPlayerReturnTakeRelicScRsp" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRelicScRsp),
            "CmdPlayerReturnSignCsReq" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnSignCsReq),
            "CmdPlayerReturnInfoQueryScRsp" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnInfoQueryScRsp),
            "CmdPlayerReturnTakePointRewardCsReq" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakePointRewardCsReq),
            "CmdPlayerReturnTakeRewardScRsp" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRewardScRsp),
            "CmdPlayerReturnStartScNotify" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnStartScNotify),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdPlayerReturnType] = &[
        CmdPlayerReturnType::CmdPlayerReturnTypeNone,
        CmdPlayerReturnType::CmdPlayerReturnPointChangeScNotify,
        CmdPlayerReturnType::CmdPlayerReturnTakeRewardCsReq,
        CmdPlayerReturnType::CmdPlayerReturnTakePointRewardScRsp,
        CmdPlayerReturnType::CmdPlayerReturnTakeRelicCsReq,
        CmdPlayerReturnType::CmdPlayerReturnSignScRsp,
        CmdPlayerReturnType::CmdPlayerReturnForceFinishScNotify,
        CmdPlayerReturnType::CmdPlayerReturnInfoQueryCsReq,
        CmdPlayerReturnType::CmdPlayerReturnTakeRelicScRsp,
        CmdPlayerReturnType::CmdPlayerReturnSignCsReq,
        CmdPlayerReturnType::CmdPlayerReturnInfoQueryScRsp,
        CmdPlayerReturnType::CmdPlayerReturnTakePointRewardCsReq,
        CmdPlayerReturnType::CmdPlayerReturnTakeRewardScRsp,
        CmdPlayerReturnType::CmdPlayerReturnStartScNotify,
    ];
}

impl ::protobuf::EnumFull for CmdPlayerReturnType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdPlayerReturnType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdPlayerReturnType::CmdPlayerReturnTypeNone => 0,
            CmdPlayerReturnType::CmdPlayerReturnPointChangeScNotify => 1,
            CmdPlayerReturnType::CmdPlayerReturnTakeRewardCsReq => 2,
            CmdPlayerReturnType::CmdPlayerReturnTakePointRewardScRsp => 3,
            CmdPlayerReturnType::CmdPlayerReturnTakeRelicCsReq => 4,
            CmdPlayerReturnType::CmdPlayerReturnSignScRsp => 5,
            CmdPlayerReturnType::CmdPlayerReturnForceFinishScNotify => 6,
            CmdPlayerReturnType::CmdPlayerReturnInfoQueryCsReq => 7,
            CmdPlayerReturnType::CmdPlayerReturnTakeRelicScRsp => 8,
            CmdPlayerReturnType::CmdPlayerReturnSignCsReq => 9,
            CmdPlayerReturnType::CmdPlayerReturnInfoQueryScRsp => 10,
            CmdPlayerReturnType::CmdPlayerReturnTakePointRewardCsReq => 11,
            CmdPlayerReturnType::CmdPlayerReturnTakeRewardScRsp => 12,
            CmdPlayerReturnType::CmdPlayerReturnStartScNotify => 13,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdPlayerReturnType {
    fn default() -> Self {
        CmdPlayerReturnType::CmdPlayerReturnTypeNone
    }
}

impl CmdPlayerReturnType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdPlayerReturnType>("CmdPlayerReturnType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19CmdPlayerReturnType.proto*\x93\x04\n\x13CmdPlayerReturnType\x12\
    \x1b\n\x17CmdPlayerReturnTypeNone\x10\0\x12'\n\"CmdPlayerReturnPointChan\
    geScNotify\x10\xbb#\x12#\n\x1eCmdPlayerReturnTakeRewardCsReq\x10\xda#\
    \x12(\n#CmdPlayerReturnTakePointRewardScRsp\x10\xa9#\x12\"\n\x1dCmdPlaye\
    rReturnTakeRelicCsReq\x10\x96#\x12\x1d\n\x18CmdPlayerReturnSignScRsp\x10\
    \xd7#\x12'\n\"CmdPlayerReturnForceFinishScNotify\x10\xe4#\x12\"\n\x1dCmd\
    PlayerReturnInfoQueryCsReq\x10\xca#\x12\"\n\x1dCmdPlayerReturnTakeRelicS\
    cRsp\x10\x99#\x12\x1d\n\x18CmdPlayerReturnSignCsReq\x10\xef#\x12\"\n\x1d\
    CmdPlayerReturnInfoQueryScRsp\x10\xe1#\x12(\n#CmdPlayerReturnTakePointRe\
    wardCsReq\x10\xaf#\x12#\n\x1eCmdPlayerReturnTakeRewardScRsp\x10\xcf#\x12\
    !\n\x1cCmdPlayerReturnStartScNotify\x10\xa8#b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdPlayerReturnType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
