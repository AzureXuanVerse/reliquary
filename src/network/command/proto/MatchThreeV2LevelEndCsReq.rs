// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MatchThreeV2LevelEndCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:MatchThreeV2LevelEndCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MatchThreeV2LevelEndCsReq {
    // message fields
    // @@protoc_insertion_point(field:MatchThreeV2LevelEndCsReq.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:MatchThreeV2LevelEndCsReq.EHMPEMEONGE)
    pub EHMPEMEONGE: u32,
    // @@protoc_insertion_point(field:MatchThreeV2LevelEndCsReq.JKFPENGNJPI)
    pub JKFPENGNJPI: u32,
    // @@protoc_insertion_point(field:MatchThreeV2LevelEndCsReq.BBGKAKHGOIO)
    pub BBGKAKHGOIO: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MatchThreeV2LevelEndCsReq.HLDNMIBKLKJ)
    pub HLDNMIBKLKJ: ::std::vec::Vec<super::KHOCCHABNMN::KHOCCHABNMN>,
    // @@protoc_insertion_point(field:MatchThreeV2LevelEndCsReq.ACJCPHIFMLN)
    pub ACJCPHIFMLN: u32,
    // @@protoc_insertion_point(field:MatchThreeV2LevelEndCsReq.DKBJHPIJCAE)
    pub DKBJHPIJCAE: u32,
    // @@protoc_insertion_point(field:MatchThreeV2LevelEndCsReq.BKMPFEOCFIB)
    pub BKMPFEOCFIB: u32,
    // special fields
    // @@protoc_insertion_point(special_field:MatchThreeV2LevelEndCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MatchThreeV2LevelEndCsReq {
    fn default() -> &'a MatchThreeV2LevelEndCsReq {
        <MatchThreeV2LevelEndCsReq as ::protobuf::Message>::default_instance()
    }
}

impl MatchThreeV2LevelEndCsReq {
    pub fn new() -> MatchThreeV2LevelEndCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &MatchThreeV2LevelEndCsReq| { &m.uuid },
            |m: &mut MatchThreeV2LevelEndCsReq| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EHMPEMEONGE",
            |m: &MatchThreeV2LevelEndCsReq| { &m.EHMPEMEONGE },
            |m: &mut MatchThreeV2LevelEndCsReq| { &mut m.EHMPEMEONGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JKFPENGNJPI",
            |m: &MatchThreeV2LevelEndCsReq| { &m.JKFPENGNJPI },
            |m: &mut MatchThreeV2LevelEndCsReq| { &mut m.JKFPENGNJPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BBGKAKHGOIO",
            |m: &MatchThreeV2LevelEndCsReq| { &m.BBGKAKHGOIO },
            |m: &mut MatchThreeV2LevelEndCsReq| { &mut m.BBGKAKHGOIO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HLDNMIBKLKJ",
            |m: &MatchThreeV2LevelEndCsReq| { &m.HLDNMIBKLKJ },
            |m: &mut MatchThreeV2LevelEndCsReq| { &mut m.HLDNMIBKLKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACJCPHIFMLN",
            |m: &MatchThreeV2LevelEndCsReq| { &m.ACJCPHIFMLN },
            |m: &mut MatchThreeV2LevelEndCsReq| { &mut m.ACJCPHIFMLN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKBJHPIJCAE",
            |m: &MatchThreeV2LevelEndCsReq| { &m.DKBJHPIJCAE },
            |m: &mut MatchThreeV2LevelEndCsReq| { &mut m.DKBJHPIJCAE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BKMPFEOCFIB",
            |m: &MatchThreeV2LevelEndCsReq| { &m.BKMPFEOCFIB },
            |m: &mut MatchThreeV2LevelEndCsReq| { &mut m.BKMPFEOCFIB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MatchThreeV2LevelEndCsReq>(
            "MatchThreeV2LevelEndCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MatchThreeV2LevelEndCsReq {
    const NAME: &'static str = "MatchThreeV2LevelEndCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    self.uuid = is.read_string()?;
                },
                80 => {
                    self.EHMPEMEONGE = is.read_uint32()?;
                },
                96 => {
                    self.JKFPENGNJPI = is.read_uint32()?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.BBGKAKHGOIO)?;
                },
                56 => {
                    self.BBGKAKHGOIO.push(is.read_uint32()?);
                },
                34 => {
                    self.HLDNMIBKLKJ.push(is.read_message()?);
                },
                48 => {
                    self.ACJCPHIFMLN = is.read_uint32()?;
                },
                24 => {
                    self.DKBJHPIJCAE = is.read_uint32()?;
                },
                104 => {
                    self.BKMPFEOCFIB = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.uuid);
        }
        if self.EHMPEMEONGE != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.EHMPEMEONGE);
        }
        if self.JKFPENGNJPI != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.JKFPENGNJPI);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(7, &self.BBGKAKHGOIO);
        for value in &self.HLDNMIBKLKJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.ACJCPHIFMLN != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.ACJCPHIFMLN);
        }
        if self.DKBJHPIJCAE != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.DKBJHPIJCAE);
        }
        if self.BKMPFEOCFIB != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.BKMPFEOCFIB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(14, &self.uuid)?;
        }
        if self.EHMPEMEONGE != 0 {
            os.write_uint32(10, self.EHMPEMEONGE)?;
        }
        if self.JKFPENGNJPI != 0 {
            os.write_uint32(12, self.JKFPENGNJPI)?;
        }
        os.write_repeated_packed_uint32(7, &self.BBGKAKHGOIO)?;
        for v in &self.HLDNMIBKLKJ {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.ACJCPHIFMLN != 0 {
            os.write_uint32(6, self.ACJCPHIFMLN)?;
        }
        if self.DKBJHPIJCAE != 0 {
            os.write_uint32(3, self.DKBJHPIJCAE)?;
        }
        if self.BKMPFEOCFIB != 0 {
            os.write_uint32(13, self.BKMPFEOCFIB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MatchThreeV2LevelEndCsReq {
        MatchThreeV2LevelEndCsReq::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.EHMPEMEONGE = 0;
        self.JKFPENGNJPI = 0;
        self.BBGKAKHGOIO.clear();
        self.HLDNMIBKLKJ.clear();
        self.ACJCPHIFMLN = 0;
        self.DKBJHPIJCAE = 0;
        self.BKMPFEOCFIB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MatchThreeV2LevelEndCsReq {
        static instance: MatchThreeV2LevelEndCsReq = MatchThreeV2LevelEndCsReq {
            uuid: ::std::string::String::new(),
            EHMPEMEONGE: 0,
            JKFPENGNJPI: 0,
            BBGKAKHGOIO: ::std::vec::Vec::new(),
            HLDNMIBKLKJ: ::std::vec::Vec::new(),
            ACJCPHIFMLN: 0,
            DKBJHPIJCAE: 0,
            BKMPFEOCFIB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MatchThreeV2LevelEndCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MatchThreeV2LevelEndCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MatchThreeV2LevelEndCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatchThreeV2LevelEndCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fMatchThreeV2LevelEndCsReq.proto\x1a\x11KHOCCHABNMN.proto\"\xab\x02\
    \n\x19MatchThreeV2LevelEndCsReq\x12\x12\n\x04uuid\x18\x0e\x20\x01(\tR\
    \x04uuid\x12\x20\n\x0bEHMPEMEONGE\x18\n\x20\x01(\rR\x0bEHMPEMEONGE\x12\
    \x20\n\x0bJKFPENGNJPI\x18\x0c\x20\x01(\rR\x0bJKFPENGNJPI\x12\x20\n\x0bBB\
    GKAKHGOIO\x18\x07\x20\x03(\rR\x0bBBGKAKHGOIO\x12.\n\x0bHLDNMIBKLKJ\x18\
    \x04\x20\x03(\x0b2\x0c.KHOCCHABNMNR\x0bHLDNMIBKLKJ\x12\x20\n\x0bACJCPHIF\
    MLN\x18\x06\x20\x01(\rR\x0bACJCPHIFMLN\x12\x20\n\x0bDKBJHPIJCAE\x18\x03\
    \x20\x01(\rR\x0bDKBJHPIJCAE\x12\x20\n\x0bBKMPFEOCFIB\x18\r\x20\x01(\rR\
    \x0bBKMPFEOCFIBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::KHOCCHABNMN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MatchThreeV2LevelEndCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
