// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EPEGHCGCMHP.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:EPEGHCGCMHP)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EPEGHCGCMHP {
    // message fields
    // @@protoc_insertion_point(field:EPEGHCGCMHP.BHGGHFJMMBM)
    pub BHGGHFJMMBM: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:EPEGHCGCMHP.FMOPBFKNLNI)
    pub FMOPBFKNLNI: bool,
    // message oneof groups
    pub GEGMAJGEJFL: ::std::option::Option<epeghcgcmhp::GEGMAJGEJFL>,
    // special fields
    // @@protoc_insertion_point(special_field:EPEGHCGCMHP.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EPEGHCGCMHP {
    fn default() -> &'a EPEGHCGCMHP {
        <EPEGHCGCMHP as ::protobuf::Message>::default_instance()
    }
}

impl EPEGHCGCMHP {
    pub fn new() -> EPEGHCGCMHP {
        ::std::default::Default::default()
    }

    // .NJFGJPCANDI DCHDJALLNEC = 1001;

    pub fn DCHDJALLNEC(&self) -> &super::NJFGJPCANDI::NJFGJPCANDI {
        match self.GEGMAJGEJFL {
            ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(ref v)) => v,
            _ => <super::NJFGJPCANDI::NJFGJPCANDI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DCHDJALLNEC(&mut self) {
        self.GEGMAJGEJFL = ::std::option::Option::None;
    }

    pub fn has_DCHDJALLNEC(&self) -> bool {
        match self.GEGMAJGEJFL {
            ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DCHDJALLNEC(&mut self, v: super::NJFGJPCANDI::NJFGJPCANDI) {
        self.GEGMAJGEJFL = ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DCHDJALLNEC(&mut self) -> &mut super::NJFGJPCANDI::NJFGJPCANDI {
        if let ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(_)) = self.GEGMAJGEJFL {
        } else {
            self.GEGMAJGEJFL = ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(super::NJFGJPCANDI::NJFGJPCANDI::new()));
        }
        match self.GEGMAJGEJFL {
            ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DCHDJALLNEC(&mut self) -> super::NJFGJPCANDI::NJFGJPCANDI {
        if self.has_DCHDJALLNEC() {
            match self.GEGMAJGEJFL.take() {
                ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NJFGJPCANDI::NJFGJPCANDI::new()
        }
    }

    // .LCMIFOBKNEN EMBBHNCJDPK = 1002;

    pub fn EMBBHNCJDPK(&self) -> &super::LCMIFOBKNEN::LCMIFOBKNEN {
        match self.GEGMAJGEJFL {
            ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(ref v)) => v,
            _ => <super::LCMIFOBKNEN::LCMIFOBKNEN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EMBBHNCJDPK(&mut self) {
        self.GEGMAJGEJFL = ::std::option::Option::None;
    }

    pub fn has_EMBBHNCJDPK(&self) -> bool {
        match self.GEGMAJGEJFL {
            ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EMBBHNCJDPK(&mut self, v: super::LCMIFOBKNEN::LCMIFOBKNEN) {
        self.GEGMAJGEJFL = ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EMBBHNCJDPK(&mut self) -> &mut super::LCMIFOBKNEN::LCMIFOBKNEN {
        if let ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(_)) = self.GEGMAJGEJFL {
        } else {
            self.GEGMAJGEJFL = ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(super::LCMIFOBKNEN::LCMIFOBKNEN::new()));
        }
        match self.GEGMAJGEJFL {
            ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EMBBHNCJDPK(&mut self) -> super::LCMIFOBKNEN::LCMIFOBKNEN {
        if self.has_EMBBHNCJDPK() {
            match self.GEGMAJGEJFL.take() {
                ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCMIFOBKNEN::LCMIFOBKNEN::new()
        }
    }

    // .FDHJBIMPKEK MINKKEJIONE = 1003;

    pub fn MINKKEJIONE(&self) -> &super::FDHJBIMPKEK::FDHJBIMPKEK {
        match self.GEGMAJGEJFL {
            ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(ref v)) => v,
            _ => <super::FDHJBIMPKEK::FDHJBIMPKEK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MINKKEJIONE(&mut self) {
        self.GEGMAJGEJFL = ::std::option::Option::None;
    }

    pub fn has_MINKKEJIONE(&self) -> bool {
        match self.GEGMAJGEJFL {
            ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MINKKEJIONE(&mut self, v: super::FDHJBIMPKEK::FDHJBIMPKEK) {
        self.GEGMAJGEJFL = ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MINKKEJIONE(&mut self) -> &mut super::FDHJBIMPKEK::FDHJBIMPKEK {
        if let ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(_)) = self.GEGMAJGEJFL {
        } else {
            self.GEGMAJGEJFL = ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(super::FDHJBIMPKEK::FDHJBIMPKEK::new()));
        }
        match self.GEGMAJGEJFL {
            ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MINKKEJIONE(&mut self) -> super::FDHJBIMPKEK::FDHJBIMPKEK {
        if self.has_MINKKEJIONE() {
            match self.GEGMAJGEJFL.take() {
                ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FDHJBIMPKEK::FDHJBIMPKEK::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BHGGHFJMMBM",
            |m: &EPEGHCGCMHP| { &m.BHGGHFJMMBM },
            |m: &mut EPEGHCGCMHP| { &mut m.BHGGHFJMMBM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMOPBFKNLNI",
            |m: &EPEGHCGCMHP| { &m.FMOPBFKNLNI },
            |m: &mut EPEGHCGCMHP| { &mut m.FMOPBFKNLNI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NJFGJPCANDI::NJFGJPCANDI>(
            "DCHDJALLNEC",
            EPEGHCGCMHP::has_DCHDJALLNEC,
            EPEGHCGCMHP::DCHDJALLNEC,
            EPEGHCGCMHP::mut_DCHDJALLNEC,
            EPEGHCGCMHP::set_DCHDJALLNEC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCMIFOBKNEN::LCMIFOBKNEN>(
            "EMBBHNCJDPK",
            EPEGHCGCMHP::has_EMBBHNCJDPK,
            EPEGHCGCMHP::EMBBHNCJDPK,
            EPEGHCGCMHP::mut_EMBBHNCJDPK,
            EPEGHCGCMHP::set_EMBBHNCJDPK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FDHJBIMPKEK::FDHJBIMPKEK>(
            "MINKKEJIONE",
            EPEGHCGCMHP::has_MINKKEJIONE,
            EPEGHCGCMHP::MINKKEJIONE,
            EPEGHCGCMHP::mut_MINKKEJIONE,
            EPEGHCGCMHP::set_MINKKEJIONE,
        ));
        oneofs.push(epeghcgcmhp::GEGMAJGEJFL::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EPEGHCGCMHP>(
            "EPEGHCGCMHP",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EPEGHCGCMHP {
    const NAME: &'static str = "EPEGHCGCMHP";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.BHGGHFJMMBM.push(is.read_string()?);
                },
                16 => {
                    self.FMOPBFKNLNI = is.read_bool()?;
                },
                8010 => {
                    self.GEGMAJGEJFL = ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(is.read_message()?));
                },
                8018 => {
                    self.GEGMAJGEJFL = ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(is.read_message()?));
                },
                8026 => {
                    self.GEGMAJGEJFL = ::std::option::Option::Some(epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.BHGGHFJMMBM {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.FMOPBFKNLNI != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.GEGMAJGEJFL {
            match v {
                &epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.BHGGHFJMMBM {
            os.write_string(1, &v)?;
        };
        if self.FMOPBFKNLNI != false {
            os.write_bool(2, self.FMOPBFKNLNI)?;
        }
        if let ::std::option::Option::Some(ref v) = self.GEGMAJGEJFL {
            match v {
                &epeghcgcmhp::GEGMAJGEJFL::DCHDJALLNEC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1001, v, os)?;
                },
                &epeghcgcmhp::GEGMAJGEJFL::EMBBHNCJDPK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1002, v, os)?;
                },
                &epeghcgcmhp::GEGMAJGEJFL::MINKKEJIONE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1003, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EPEGHCGCMHP {
        EPEGHCGCMHP::new()
    }

    fn clear(&mut self) {
        self.BHGGHFJMMBM.clear();
        self.FMOPBFKNLNI = false;
        self.GEGMAJGEJFL = ::std::option::Option::None;
        self.GEGMAJGEJFL = ::std::option::Option::None;
        self.GEGMAJGEJFL = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EPEGHCGCMHP {
        static instance: EPEGHCGCMHP = EPEGHCGCMHP {
            BHGGHFJMMBM: ::std::vec::Vec::new(),
            FMOPBFKNLNI: false,
            GEGMAJGEJFL: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EPEGHCGCMHP {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EPEGHCGCMHP").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EPEGHCGCMHP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EPEGHCGCMHP {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EPEGHCGCMHP`
pub mod epeghcgcmhp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:EPEGHCGCMHP.GEGMAJGEJFL)
    pub enum GEGMAJGEJFL {
        // @@protoc_insertion_point(oneof_field:EPEGHCGCMHP.DCHDJALLNEC)
        DCHDJALLNEC(super::super::NJFGJPCANDI::NJFGJPCANDI),
        // @@protoc_insertion_point(oneof_field:EPEGHCGCMHP.EMBBHNCJDPK)
        EMBBHNCJDPK(super::super::LCMIFOBKNEN::LCMIFOBKNEN),
        // @@protoc_insertion_point(oneof_field:EPEGHCGCMHP.MINKKEJIONE)
        MINKKEJIONE(super::super::FDHJBIMPKEK::FDHJBIMPKEK),
    }

    impl ::protobuf::Oneof for GEGMAJGEJFL {
    }

    impl ::protobuf::OneofFull for GEGMAJGEJFL {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EPEGHCGCMHP as ::protobuf::MessageFull>::descriptor().oneof_by_name("GEGMAJGEJFL").unwrap()).clone()
        }
    }

    impl GEGMAJGEJFL {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<GEGMAJGEJFL>("GEGMAJGEJFL")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EPEGHCGCMHP.proto\x1a\x11FDHJBIMPKEK.proto\x1a\x11LCMIFOBKNEN.prot\
    o\x1a\x11NJFGJPCANDI.proto\"\xf9\x01\n\x0bEPEGHCGCMHP\x12\x20\n\x0bBHGGH\
    FJMMBM\x18\x01\x20\x03(\tR\x0bBHGGHFJMMBM\x12\x20\n\x0bFMOPBFKNLNI\x18\
    \x02\x20\x01(\x08R\x0bFMOPBFKNLNI\x121\n\x0bDCHDJALLNEC\x18\xe9\x07\x20\
    \x01(\x0b2\x0c.NJFGJPCANDIH\0R\x0bDCHDJALLNEC\x121\n\x0bEMBBHNCJDPK\x18\
    \xea\x07\x20\x01(\x0b2\x0c.LCMIFOBKNENH\0R\x0bEMBBHNCJDPK\x121\n\x0bMINK\
    KEJIONE\x18\xeb\x07\x20\x01(\x0b2\x0c.FDHJBIMPKEKH\0R\x0bMINKKEJIONEB\r\
    \n\x0bGEGMAJGEJFLb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::FDHJBIMPKEK::file_descriptor().clone());
            deps.push(super::LCMIFOBKNEN::file_descriptor().clone());
            deps.push(super::NJFGJPCANDI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EPEGHCGCMHP::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
