// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdDrinkMakerType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdDrinkMakerType)
pub enum CmdDrinkMakerType {
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdDrinkMakerTypeNone)
    CmdDrinkMakerTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdEndDrinkMakerSequenceCsReq)
    CmdEndDrinkMakerSequenceCsReq = 6984,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdDrinkMakerDayEndScNotify)
    CmdDrinkMakerDayEndScNotify = 6987,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdMakeMissionDrinkScRsp)
    CmdMakeMissionDrinkScRsp = 6989,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdMakeDrinkScRsp)
    CmdMakeDrinkScRsp = 6990,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdDrinkMakerUpdateTipsNotify)
    CmdDrinkMakerUpdateTipsNotify = 6981,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdDrinkMakerChallengeCsReq)
    CmdDrinkMakerChallengeCsReq = 6983,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdMakeDrinkCsReq)
    CmdMakeDrinkCsReq = 6988,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdGetDrinkMakerDataCsReq)
    CmdGetDrinkMakerDataCsReq = 6994,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdEndDrinkMakerSequenceScRsp)
    CmdEndDrinkMakerSequenceScRsp = 6982,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdGetDrinkMakerDataScRsp)
    CmdGetDrinkMakerDataScRsp = 6993,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdMakeMissionDrinkCsReq)
    CmdMakeMissionDrinkCsReq = 7000,
    // @@protoc_insertion_point(enum_value:CmdDrinkMakerType.CmdDrinkMakerChallengeScRsp)
    CmdDrinkMakerChallengeScRsp = 6985,
}

impl ::protobuf::Enum for CmdDrinkMakerType {
    const NAME: &'static str = "CmdDrinkMakerType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdDrinkMakerType> {
        match value {
            0 => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerTypeNone),
            6984 => ::std::option::Option::Some(CmdDrinkMakerType::CmdEndDrinkMakerSequenceCsReq),
            6987 => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerDayEndScNotify),
            6989 => ::std::option::Option::Some(CmdDrinkMakerType::CmdMakeMissionDrinkScRsp),
            6990 => ::std::option::Option::Some(CmdDrinkMakerType::CmdMakeDrinkScRsp),
            6981 => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerUpdateTipsNotify),
            6983 => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerChallengeCsReq),
            6988 => ::std::option::Option::Some(CmdDrinkMakerType::CmdMakeDrinkCsReq),
            6994 => ::std::option::Option::Some(CmdDrinkMakerType::CmdGetDrinkMakerDataCsReq),
            6982 => ::std::option::Option::Some(CmdDrinkMakerType::CmdEndDrinkMakerSequenceScRsp),
            6993 => ::std::option::Option::Some(CmdDrinkMakerType::CmdGetDrinkMakerDataScRsp),
            7000 => ::std::option::Option::Some(CmdDrinkMakerType::CmdMakeMissionDrinkCsReq),
            6985 => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerChallengeScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdDrinkMakerType> {
        match str {
            "CmdDrinkMakerTypeNone" => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerTypeNone),
            "CmdEndDrinkMakerSequenceCsReq" => ::std::option::Option::Some(CmdDrinkMakerType::CmdEndDrinkMakerSequenceCsReq),
            "CmdDrinkMakerDayEndScNotify" => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerDayEndScNotify),
            "CmdMakeMissionDrinkScRsp" => ::std::option::Option::Some(CmdDrinkMakerType::CmdMakeMissionDrinkScRsp),
            "CmdMakeDrinkScRsp" => ::std::option::Option::Some(CmdDrinkMakerType::CmdMakeDrinkScRsp),
            "CmdDrinkMakerUpdateTipsNotify" => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerUpdateTipsNotify),
            "CmdDrinkMakerChallengeCsReq" => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerChallengeCsReq),
            "CmdMakeDrinkCsReq" => ::std::option::Option::Some(CmdDrinkMakerType::CmdMakeDrinkCsReq),
            "CmdGetDrinkMakerDataCsReq" => ::std::option::Option::Some(CmdDrinkMakerType::CmdGetDrinkMakerDataCsReq),
            "CmdEndDrinkMakerSequenceScRsp" => ::std::option::Option::Some(CmdDrinkMakerType::CmdEndDrinkMakerSequenceScRsp),
            "CmdGetDrinkMakerDataScRsp" => ::std::option::Option::Some(CmdDrinkMakerType::CmdGetDrinkMakerDataScRsp),
            "CmdMakeMissionDrinkCsReq" => ::std::option::Option::Some(CmdDrinkMakerType::CmdMakeMissionDrinkCsReq),
            "CmdDrinkMakerChallengeScRsp" => ::std::option::Option::Some(CmdDrinkMakerType::CmdDrinkMakerChallengeScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdDrinkMakerType] = &[
        CmdDrinkMakerType::CmdDrinkMakerTypeNone,
        CmdDrinkMakerType::CmdEndDrinkMakerSequenceCsReq,
        CmdDrinkMakerType::CmdDrinkMakerDayEndScNotify,
        CmdDrinkMakerType::CmdMakeMissionDrinkScRsp,
        CmdDrinkMakerType::CmdMakeDrinkScRsp,
        CmdDrinkMakerType::CmdDrinkMakerUpdateTipsNotify,
        CmdDrinkMakerType::CmdDrinkMakerChallengeCsReq,
        CmdDrinkMakerType::CmdMakeDrinkCsReq,
        CmdDrinkMakerType::CmdGetDrinkMakerDataCsReq,
        CmdDrinkMakerType::CmdEndDrinkMakerSequenceScRsp,
        CmdDrinkMakerType::CmdGetDrinkMakerDataScRsp,
        CmdDrinkMakerType::CmdMakeMissionDrinkCsReq,
        CmdDrinkMakerType::CmdDrinkMakerChallengeScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdDrinkMakerType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdDrinkMakerType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdDrinkMakerType::CmdDrinkMakerTypeNone => 0,
            CmdDrinkMakerType::CmdEndDrinkMakerSequenceCsReq => 1,
            CmdDrinkMakerType::CmdDrinkMakerDayEndScNotify => 2,
            CmdDrinkMakerType::CmdMakeMissionDrinkScRsp => 3,
            CmdDrinkMakerType::CmdMakeDrinkScRsp => 4,
            CmdDrinkMakerType::CmdDrinkMakerUpdateTipsNotify => 5,
            CmdDrinkMakerType::CmdDrinkMakerChallengeCsReq => 6,
            CmdDrinkMakerType::CmdMakeDrinkCsReq => 7,
            CmdDrinkMakerType::CmdGetDrinkMakerDataCsReq => 8,
            CmdDrinkMakerType::CmdEndDrinkMakerSequenceScRsp => 9,
            CmdDrinkMakerType::CmdGetDrinkMakerDataScRsp => 10,
            CmdDrinkMakerType::CmdMakeMissionDrinkCsReq => 11,
            CmdDrinkMakerType::CmdDrinkMakerChallengeScRsp => 12,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdDrinkMakerType {
    fn default() -> Self {
        CmdDrinkMakerType::CmdDrinkMakerTypeNone
    }
}

impl CmdDrinkMakerType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdDrinkMakerType>("CmdDrinkMakerType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17CmdDrinkMakerType.proto*\xae\x03\n\x11CmdDrinkMakerType\x12\x19\n\
    \x15CmdDrinkMakerTypeNone\x10\0\x12\"\n\x1dCmdEndDrinkMakerSequenceCsReq\
    \x10\xc86\x12\x20\n\x1bCmdDrinkMakerDayEndScNotify\x10\xcb6\x12\x1d\n\
    \x18CmdMakeMissionDrinkScRsp\x10\xcd6\x12\x16\n\x11CmdMakeDrinkScRsp\x10\
    \xce6\x12\"\n\x1dCmdDrinkMakerUpdateTipsNotify\x10\xc56\x12\x20\n\x1bCmd\
    DrinkMakerChallengeCsReq\x10\xc76\x12\x16\n\x11CmdMakeDrinkCsReq\x10\xcc\
    6\x12\x1e\n\x19CmdGetDrinkMakerDataCsReq\x10\xd26\x12\"\n\x1dCmdEndDrink\
    MakerSequenceScRsp\x10\xc66\x12\x1e\n\x19CmdGetDrinkMakerDataScRsp\x10\
    \xd16\x12\x1d\n\x18CmdMakeMissionDrinkCsReq\x10\xd86\x12\x20\n\x1bCmdDri\
    nkMakerChallengeScRsp\x10\xc96b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdDrinkMakerType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
