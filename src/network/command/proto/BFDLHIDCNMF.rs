// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BFDLHIDCNMF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:BFDLHIDCNMF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BFDLHIDCNMF {
    // message fields
    // @@protoc_insertion_point(field:BFDLHIDCNMF.COCONGACIFJ)
    pub COCONGACIFJ: bool,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.item_list)
    pub item_list: ::std::vec::Vec<super::BHGPHKLEHEC::BHGPHKLEHEC>,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.MIDEJNJCAIA)
    pub MIDEJNJCAIA: u32,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.KJPMOHFIILO)
    pub KJPMOHFIILO: ::protobuf::EnumOrUnknown<super::NPPNFPPENMC::NPPNFPPENMC>,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.LDNBEIDJBHI)
    pub LDNBEIDJBHI: u32,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.energy_info)
    pub energy_info: u32,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.ANHFJKEPCGF)
    pub ANHFJKEPCGF: u32,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.NIAEGHJLNMB)
    pub NIAEGHJLNMB: ::protobuf::MessageField<super::CDIMEMFJJFP::CDIMEMFJJFP>,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.OGNEPBFPILH)
    pub OGNEPBFPILH: u32,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.JDNGFBOAJAP)
    pub JDNGFBOAJAP: bool,
    // @@protoc_insertion_point(field:BFDLHIDCNMF.score_id)
    pub score_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:BFDLHIDCNMF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BFDLHIDCNMF {
    fn default() -> &'a BFDLHIDCNMF {
        <BFDLHIDCNMF as ::protobuf::Message>::default_instance()
    }
}

impl BFDLHIDCNMF {
    pub fn new() -> BFDLHIDCNMF {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "COCONGACIFJ",
            |m: &BFDLHIDCNMF| { &m.COCONGACIFJ },
            |m: &mut BFDLHIDCNMF| { &mut m.COCONGACIFJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "item_list",
            |m: &BFDLHIDCNMF| { &m.item_list },
            |m: &mut BFDLHIDCNMF| { &mut m.item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MIDEJNJCAIA",
            |m: &BFDLHIDCNMF| { &m.MIDEJNJCAIA },
            |m: &mut BFDLHIDCNMF| { &mut m.MIDEJNJCAIA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KJPMOHFIILO",
            |m: &BFDLHIDCNMF| { &m.KJPMOHFIILO },
            |m: &mut BFDLHIDCNMF| { &mut m.KJPMOHFIILO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LDNBEIDJBHI",
            |m: &BFDLHIDCNMF| { &m.LDNBEIDJBHI },
            |m: &mut BFDLHIDCNMF| { &mut m.LDNBEIDJBHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "energy_info",
            |m: &BFDLHIDCNMF| { &m.energy_info },
            |m: &mut BFDLHIDCNMF| { &mut m.energy_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ANHFJKEPCGF",
            |m: &BFDLHIDCNMF| { &m.ANHFJKEPCGF },
            |m: &mut BFDLHIDCNMF| { &mut m.ANHFJKEPCGF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CDIMEMFJJFP::CDIMEMFJJFP>(
            "NIAEGHJLNMB",
            |m: &BFDLHIDCNMF| { &m.NIAEGHJLNMB },
            |m: &mut BFDLHIDCNMF| { &mut m.NIAEGHJLNMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OGNEPBFPILH",
            |m: &BFDLHIDCNMF| { &m.OGNEPBFPILH },
            |m: &mut BFDLHIDCNMF| { &mut m.OGNEPBFPILH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JDNGFBOAJAP",
            |m: &BFDLHIDCNMF| { &m.JDNGFBOAJAP },
            |m: &mut BFDLHIDCNMF| { &mut m.JDNGFBOAJAP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score_id",
            |m: &BFDLHIDCNMF| { &m.score_id },
            |m: &mut BFDLHIDCNMF| { &mut m.score_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BFDLHIDCNMF>(
            "BFDLHIDCNMF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BFDLHIDCNMF {
    const NAME: &'static str = "BFDLHIDCNMF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.COCONGACIFJ = is.read_bool()?;
                },
                34 => {
                    self.item_list.push(is.read_message()?);
                },
                104 => {
                    self.MIDEJNJCAIA = is.read_uint32()?;
                },
                48 => {
                    self.KJPMOHFIILO = is.read_enum_or_unknown()?;
                },
                64 => {
                    self.LDNBEIDJBHI = is.read_uint32()?;
                },
                40 => {
                    self.energy_info = is.read_uint32()?;
                },
                112 => {
                    self.ANHFJKEPCGF = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NIAEGHJLNMB)?;
                },
                8 => {
                    self.OGNEPBFPILH = is.read_uint32()?;
                },
                56 => {
                    self.JDNGFBOAJAP = is.read_bool()?;
                },
                80 => {
                    self.score_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.COCONGACIFJ != false {
            my_size += 1 + 1;
        }
        for value in &self.item_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.MIDEJNJCAIA != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.MIDEJNJCAIA);
        }
        if self.KJPMOHFIILO != ::protobuf::EnumOrUnknown::new(super::NPPNFPPENMC::NPPNFPPENMC::MATCH3_PLAYER_STATE_ALIVE) {
            my_size += ::protobuf::rt::int32_size(6, self.KJPMOHFIILO.value());
        }
        if self.LDNBEIDJBHI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.LDNBEIDJBHI);
        }
        if self.energy_info != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.energy_info);
        }
        if self.ANHFJKEPCGF != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.ANHFJKEPCGF);
        }
        if let Some(v) = self.NIAEGHJLNMB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.OGNEPBFPILH != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.OGNEPBFPILH);
        }
        if self.JDNGFBOAJAP != false {
            my_size += 1 + 1;
        }
        if self.score_id != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.score_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.COCONGACIFJ != false {
            os.write_bool(2, self.COCONGACIFJ)?;
        }
        for v in &self.item_list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.MIDEJNJCAIA != 0 {
            os.write_uint32(13, self.MIDEJNJCAIA)?;
        }
        if self.KJPMOHFIILO != ::protobuf::EnumOrUnknown::new(super::NPPNFPPENMC::NPPNFPPENMC::MATCH3_PLAYER_STATE_ALIVE) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.KJPMOHFIILO))?;
        }
        if self.LDNBEIDJBHI != 0 {
            os.write_uint32(8, self.LDNBEIDJBHI)?;
        }
        if self.energy_info != 0 {
            os.write_uint32(5, self.energy_info)?;
        }
        if self.ANHFJKEPCGF != 0 {
            os.write_uint32(14, self.ANHFJKEPCGF)?;
        }
        if let Some(v) = self.NIAEGHJLNMB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.OGNEPBFPILH != 0 {
            os.write_uint32(1, self.OGNEPBFPILH)?;
        }
        if self.JDNGFBOAJAP != false {
            os.write_bool(7, self.JDNGFBOAJAP)?;
        }
        if self.score_id != 0 {
            os.write_uint32(10, self.score_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BFDLHIDCNMF {
        BFDLHIDCNMF::new()
    }

    fn clear(&mut self) {
        self.COCONGACIFJ = false;
        self.item_list.clear();
        self.MIDEJNJCAIA = 0;
        self.KJPMOHFIILO = ::protobuf::EnumOrUnknown::new(super::NPPNFPPENMC::NPPNFPPENMC::MATCH3_PLAYER_STATE_ALIVE);
        self.LDNBEIDJBHI = 0;
        self.energy_info = 0;
        self.ANHFJKEPCGF = 0;
        self.NIAEGHJLNMB.clear();
        self.OGNEPBFPILH = 0;
        self.JDNGFBOAJAP = false;
        self.score_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BFDLHIDCNMF {
        static instance: BFDLHIDCNMF = BFDLHIDCNMF {
            COCONGACIFJ: false,
            item_list: ::std::vec::Vec::new(),
            MIDEJNJCAIA: 0,
            KJPMOHFIILO: ::protobuf::EnumOrUnknown::from_i32(0),
            LDNBEIDJBHI: 0,
            energy_info: 0,
            ANHFJKEPCGF: 0,
            NIAEGHJLNMB: ::protobuf::MessageField::none(),
            OGNEPBFPILH: 0,
            JDNGFBOAJAP: false,
            score_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BFDLHIDCNMF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BFDLHIDCNMF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BFDLHIDCNMF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BFDLHIDCNMF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BFDLHIDCNMF.proto\x1a\x11BHGPHKLEHEC.proto\x1a\x11CDIMEMFJJFP.prot\
    o\x1a\x11NPPNFPPENMC.proto\"\xa0\x03\n\x0bBFDLHIDCNMF\x12\x20\n\x0bCOCON\
    GACIFJ\x18\x02\x20\x01(\x08R\x0bCOCONGACIFJ\x12)\n\titem_list\x18\x04\
    \x20\x03(\x0b2\x0c.BHGPHKLEHECR\x08itemList\x12\x20\n\x0bMIDEJNJCAIA\x18\
    \r\x20\x01(\rR\x0bMIDEJNJCAIA\x12.\n\x0bKJPMOHFIILO\x18\x06\x20\x01(\x0e\
    2\x0c.NPPNFPPENMCR\x0bKJPMOHFIILO\x12\x20\n\x0bLDNBEIDJBHI\x18\x08\x20\
    \x01(\rR\x0bLDNBEIDJBHI\x12\x1f\n\x0benergy_info\x18\x05\x20\x01(\rR\nen\
    ergyInfo\x12\x20\n\x0bANHFJKEPCGF\x18\x0e\x20\x01(\rR\x0bANHFJKEPCGF\x12\
    .\n\x0bNIAEGHJLNMB\x18\t\x20\x01(\x0b2\x0c.CDIMEMFJJFPR\x0bNIAEGHJLNMB\
    \x12\x20\n\x0bOGNEPBFPILH\x18\x01\x20\x01(\rR\x0bOGNEPBFPILH\x12\x20\n\
    \x0bJDNGFBOAJAP\x18\x07\x20\x01(\x08R\x0bJDNGFBOAJAP\x12\x19\n\x08score_\
    id\x18\n\x20\x01(\rR\x07scoreIdb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BHGPHKLEHEC::file_descriptor().clone());
            deps.push(super::CDIMEMFJJFP::file_descriptor().clone());
            deps.push(super::NPPNFPPENMC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BFDLHIDCNMF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
