// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OLFGBAMEFJI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OLFGBAMEFJI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OLFGBAMEFJI {
    // message fields
    // @@protoc_insertion_point(field:OLFGBAMEFJI.OFBIAHGOPCM)
    pub OFBIAHGOPCM: u32,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.NNNKJKCLBLO)
    pub NNNKJKCLBLO: u32,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.HMKGBMIDGOP)
    pub HMKGBMIDGOP: u32,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.NJIEMPGEEOG)
    pub NJIEMPGEEOG: u32,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.rogue_magic_unit_info_list)
    pub rogue_magic_unit_info_list: ::std::vec::Vec<super::RogueMagicGameUnitInfo::RogueMagicGameUnitInfo>,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.BLFDFMCFFIM)
    pub BLFDFMCFFIM: u32,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.magic_scepter_info_list)
    pub magic_scepter_info_list: ::std::vec::Vec<super::RogueMagicGameScepterInfo::RogueMagicGameScepterInfo>,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.IPODNBLJPOL)
    pub IPODNBLJPOL: u32,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.FONNGHLGJFA)
    pub FONNGHLGJFA: u32,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.extra_round_limit)
    pub extra_round_limit: u32,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.JLHFOJODOKG)
    pub JLHFOJODOKG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.avatar_id_list)
    pub avatar_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OLFGBAMEFJI.game_style_type)
    pub game_style_type: u32,
    // special fields
    // @@protoc_insertion_point(special_field:OLFGBAMEFJI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OLFGBAMEFJI {
    fn default() -> &'a OLFGBAMEFJI {
        <OLFGBAMEFJI as ::protobuf::Message>::default_instance()
    }
}

impl OLFGBAMEFJI {
    pub fn new() -> OLFGBAMEFJI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OFBIAHGOPCM",
            |m: &OLFGBAMEFJI| { &m.OFBIAHGOPCM },
            |m: &mut OLFGBAMEFJI| { &mut m.OFBIAHGOPCM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NNNKJKCLBLO",
            |m: &OLFGBAMEFJI| { &m.NNNKJKCLBLO },
            |m: &mut OLFGBAMEFJI| { &mut m.NNNKJKCLBLO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HMKGBMIDGOP",
            |m: &OLFGBAMEFJI| { &m.HMKGBMIDGOP },
            |m: &mut OLFGBAMEFJI| { &mut m.HMKGBMIDGOP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NJIEMPGEEOG",
            |m: &OLFGBAMEFJI| { &m.NJIEMPGEEOG },
            |m: &mut OLFGBAMEFJI| { &mut m.NJIEMPGEEOG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rogue_magic_unit_info_list",
            |m: &OLFGBAMEFJI| { &m.rogue_magic_unit_info_list },
            |m: &mut OLFGBAMEFJI| { &mut m.rogue_magic_unit_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BLFDFMCFFIM",
            |m: &OLFGBAMEFJI| { &m.BLFDFMCFFIM },
            |m: &mut OLFGBAMEFJI| { &mut m.BLFDFMCFFIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "magic_scepter_info_list",
            |m: &OLFGBAMEFJI| { &m.magic_scepter_info_list },
            |m: &mut OLFGBAMEFJI| { &mut m.magic_scepter_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IPODNBLJPOL",
            |m: &OLFGBAMEFJI| { &m.IPODNBLJPOL },
            |m: &mut OLFGBAMEFJI| { &mut m.IPODNBLJPOL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FONNGHLGJFA",
            |m: &OLFGBAMEFJI| { &m.FONNGHLGJFA },
            |m: &mut OLFGBAMEFJI| { &mut m.FONNGHLGJFA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extra_round_limit",
            |m: &OLFGBAMEFJI| { &m.extra_round_limit },
            |m: &mut OLFGBAMEFJI| { &mut m.extra_round_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JLHFOJODOKG",
            |m: &OLFGBAMEFJI| { &m.JLHFOJODOKG },
            |m: &mut OLFGBAMEFJI| { &mut m.JLHFOJODOKG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_id_list",
            |m: &OLFGBAMEFJI| { &m.avatar_id_list },
            |m: &mut OLFGBAMEFJI| { &mut m.avatar_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "game_style_type",
            |m: &OLFGBAMEFJI| { &m.game_style_type },
            |m: &mut OLFGBAMEFJI| { &mut m.game_style_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OLFGBAMEFJI>(
            "OLFGBAMEFJI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OLFGBAMEFJI {
    const NAME: &'static str = "OLFGBAMEFJI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.OFBIAHGOPCM = is.read_uint32()?;
                },
                112 => {
                    self.NNNKJKCLBLO = is.read_uint32()?;
                },
                40 => {
                    self.HMKGBMIDGOP = is.read_uint32()?;
                },
                72 => {
                    self.NJIEMPGEEOG = is.read_uint32()?;
                },
                9866 => {
                    self.rogue_magic_unit_info_list.push(is.read_message()?);
                },
                16 => {
                    self.BLFDFMCFFIM = is.read_uint32()?;
                },
                8850 => {
                    self.magic_scepter_info_list.push(is.read_message()?);
                },
                88 => {
                    self.IPODNBLJPOL = is.read_uint32()?;
                },
                96 => {
                    self.FONNGHLGJFA = is.read_uint32()?;
                },
                64 => {
                    self.extra_round_limit = is.read_uint32()?;
                },
                6530 => {
                    is.read_repeated_packed_uint32_into(&mut self.JLHFOJODOKG)?;
                },
                6528 => {
                    self.JLHFOJODOKG.push(is.read_uint32()?);
                },
                13506 => {
                    is.read_repeated_packed_uint32_into(&mut self.avatar_id_list)?;
                },
                13504 => {
                    self.avatar_id_list.push(is.read_uint32()?);
                },
                120 => {
                    self.game_style_type = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OFBIAHGOPCM != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.OFBIAHGOPCM);
        }
        if self.NNNKJKCLBLO != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.NNNKJKCLBLO);
        }
        if self.HMKGBMIDGOP != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.HMKGBMIDGOP);
        }
        if self.NJIEMPGEEOG != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.NJIEMPGEEOG);
        }
        for value in &self.rogue_magic_unit_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.BLFDFMCFFIM != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.BLFDFMCFFIM);
        }
        for value in &self.magic_scepter_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.IPODNBLJPOL != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.IPODNBLJPOL);
        }
        if self.FONNGHLGJFA != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.FONNGHLGJFA);
        }
        if self.extra_round_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.extra_round_limit);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(816, &self.JLHFOJODOKG);
        my_size += ::protobuf::rt::vec_packed_uint32_size(1688, &self.avatar_id_list);
        if self.game_style_type != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.game_style_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OFBIAHGOPCM != 0 {
            os.write_uint32(13, self.OFBIAHGOPCM)?;
        }
        if self.NNNKJKCLBLO != 0 {
            os.write_uint32(14, self.NNNKJKCLBLO)?;
        }
        if self.HMKGBMIDGOP != 0 {
            os.write_uint32(5, self.HMKGBMIDGOP)?;
        }
        if self.NJIEMPGEEOG != 0 {
            os.write_uint32(9, self.NJIEMPGEEOG)?;
        }
        for v in &self.rogue_magic_unit_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(1233, v, os)?;
        };
        if self.BLFDFMCFFIM != 0 {
            os.write_uint32(2, self.BLFDFMCFFIM)?;
        }
        for v in &self.magic_scepter_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(1106, v, os)?;
        };
        if self.IPODNBLJPOL != 0 {
            os.write_uint32(11, self.IPODNBLJPOL)?;
        }
        if self.FONNGHLGJFA != 0 {
            os.write_uint32(12, self.FONNGHLGJFA)?;
        }
        if self.extra_round_limit != 0 {
            os.write_uint32(8, self.extra_round_limit)?;
        }
        os.write_repeated_packed_uint32(816, &self.JLHFOJODOKG)?;
        os.write_repeated_packed_uint32(1688, &self.avatar_id_list)?;
        if self.game_style_type != 0 {
            os.write_uint32(15, self.game_style_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OLFGBAMEFJI {
        OLFGBAMEFJI::new()
    }

    fn clear(&mut self) {
        self.OFBIAHGOPCM = 0;
        self.NNNKJKCLBLO = 0;
        self.HMKGBMIDGOP = 0;
        self.NJIEMPGEEOG = 0;
        self.rogue_magic_unit_info_list.clear();
        self.BLFDFMCFFIM = 0;
        self.magic_scepter_info_list.clear();
        self.IPODNBLJPOL = 0;
        self.FONNGHLGJFA = 0;
        self.extra_round_limit = 0;
        self.JLHFOJODOKG.clear();
        self.avatar_id_list.clear();
        self.game_style_type = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OLFGBAMEFJI {
        static instance: OLFGBAMEFJI = OLFGBAMEFJI {
            OFBIAHGOPCM: 0,
            NNNKJKCLBLO: 0,
            HMKGBMIDGOP: 0,
            NJIEMPGEEOG: 0,
            rogue_magic_unit_info_list: ::std::vec::Vec::new(),
            BLFDFMCFFIM: 0,
            magic_scepter_info_list: ::std::vec::Vec::new(),
            IPODNBLJPOL: 0,
            FONNGHLGJFA: 0,
            extra_round_limit: 0,
            JLHFOJODOKG: ::std::vec::Vec::new(),
            avatar_id_list: ::std::vec::Vec::new(),
            game_style_type: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OLFGBAMEFJI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OLFGBAMEFJI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OLFGBAMEFJI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OLFGBAMEFJI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OLFGBAMEFJI.proto\x1a\x1fRogueMagicGameScepterInfo.proto\x1a\x1cRo\
    gueMagicGameUnitInfo.proto\"\xc3\x04\n\x0bOLFGBAMEFJI\x12\x20\n\x0bOFBIA\
    HGOPCM\x18\r\x20\x01(\rR\x0bOFBIAHGOPCM\x12\x20\n\x0bNNNKJKCLBLO\x18\x0e\
    \x20\x01(\rR\x0bNNNKJKCLBLO\x12\x20\n\x0bHMKGBMIDGOP\x18\x05\x20\x01(\rR\
    \x0bHMKGBMIDGOP\x12\x20\n\x0bNJIEMPGEEOG\x18\t\x20\x01(\rR\x0bNJIEMPGEEO\
    G\x12T\n\x1arogue_magic_unit_info_list\x18\xd1\t\x20\x03(\x0b2\x17.Rogue\
    MagicGameUnitInfoR\x16rogueMagicUnitInfoList\x12\x20\n\x0bBLFDFMCFFIM\
    \x18\x02\x20\x01(\rR\x0bBLFDFMCFFIM\x12R\n\x17magic_scepter_info_list\
    \x18\xd2\x08\x20\x03(\x0b2\x1a.RogueMagicGameScepterInfoR\x14magicScepte\
    rInfoList\x12\x20\n\x0bIPODNBLJPOL\x18\x0b\x20\x01(\rR\x0bIPODNBLJPOL\
    \x12\x20\n\x0bFONNGHLGJFA\x18\x0c\x20\x01(\rR\x0bFONNGHLGJFA\x12*\n\x11e\
    xtra_round_limit\x18\x08\x20\x01(\rR\x0fextraRoundLimit\x12!\n\x0bJLHFOJ\
    ODOKG\x18\xb0\x06\x20\x03(\rR\x0bJLHFOJODOKG\x12%\n\x0eavatar_id_list\
    \x18\x98\r\x20\x03(\rR\x0cavatarIdList\x12&\n\x0fgame_style_type\x18\x0f\
    \x20\x01(\rR\rgameStyleTypeb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::RogueMagicGameScepterInfo::file_descriptor().clone());
            deps.push(super::RogueMagicGameUnitInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OLFGBAMEFJI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
