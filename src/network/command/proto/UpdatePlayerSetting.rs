// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `UpdatePlayerSetting.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:UpdatePlayerSetting)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UpdatePlayerSetting {
    // message oneof groups
    pub GCMPPOICPOD: ::std::option::Option<update_player_setting::GCMPPOICPOD>,
    // special fields
    // @@protoc_insertion_point(special_field:UpdatePlayerSetting.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdatePlayerSetting {
    fn default() -> &'a UpdatePlayerSetting {
        <UpdatePlayerSetting as ::protobuf::Message>::default_instance()
    }
}

impl UpdatePlayerSetting {
    pub fn new() -> UpdatePlayerSetting {
        ::std::default::Default::default()
    }

    // bool KAPDIMGJLNF = 13;

    pub fn KAPDIMGJLNF(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::KAPDIMGJLNF(v)) => v,
            _ => false,
        }
    }

    pub fn clear_KAPDIMGJLNF(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_KAPDIMGJLNF(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::KAPDIMGJLNF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KAPDIMGJLNF(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::KAPDIMGJLNF(v))
    }

    // bool MMMNJCHEMFN = 5;

    pub fn MMMNJCHEMFN(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::MMMNJCHEMFN(v)) => v,
            _ => false,
        }
    }

    pub fn clear_MMMNJCHEMFN(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_MMMNJCHEMFN(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::MMMNJCHEMFN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MMMNJCHEMFN(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::MMMNJCHEMFN(v))
    }

    // bool NKEKIBNJMPA = 12;

    pub fn NKEKIBNJMPA(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::NKEKIBNJMPA(v)) => v,
            _ => false,
        }
    }

    pub fn clear_NKEKIBNJMPA(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_NKEKIBNJMPA(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::NKEKIBNJMPA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NKEKIBNJMPA(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::NKEKIBNJMPA(v))
    }

    // bool PBKBGLHHKPE = 10;

    pub fn PBKBGLHHKPE(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::PBKBGLHHKPE(v)) => v,
            _ => false,
        }
    }

    pub fn clear_PBKBGLHHKPE(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_PBKBGLHHKPE(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::PBKBGLHHKPE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PBKBGLHHKPE(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::PBKBGLHHKPE(v))
    }

    // bool NJFMILJOFOK = 6;

    pub fn NJFMILJOFOK(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::NJFMILJOFOK(v)) => v,
            _ => false,
        }
    }

    pub fn clear_NJFMILJOFOK(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_NJFMILJOFOK(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::NJFMILJOFOK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NJFMILJOFOK(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::NJFMILJOFOK(v))
    }

    // bool AICNFAOBCPI = 2;

    pub fn AICNFAOBCPI(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::AICNFAOBCPI(v)) => v,
            _ => false,
        }
    }

    pub fn clear_AICNFAOBCPI(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_AICNFAOBCPI(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::AICNFAOBCPI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AICNFAOBCPI(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::AICNFAOBCPI(v))
    }

    // bool KJNCCKHJFHE = 11;

    pub fn KJNCCKHJFHE(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::KJNCCKHJFHE(v)) => v,
            _ => false,
        }
    }

    pub fn clear_KJNCCKHJFHE(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_KJNCCKHJFHE(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::KJNCCKHJFHE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KJNCCKHJFHE(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::KJNCCKHJFHE(v))
    }

    // bool APONEIDMPHL = 3;

    pub fn APONEIDMPHL(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::APONEIDMPHL(v)) => v,
            _ => false,
        }
    }

    pub fn clear_APONEIDMPHL(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_APONEIDMPHL(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::APONEIDMPHL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_APONEIDMPHL(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::APONEIDMPHL(v))
    }

    // bool GMJANOJMKCE = 9;

    pub fn GMJANOJMKCE(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GMJANOJMKCE(v)) => v,
            _ => false,
        }
    }

    pub fn clear_GMJANOJMKCE(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_GMJANOJMKCE(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GMJANOJMKCE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GMJANOJMKCE(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GMJANOJMKCE(v))
    }

    // .OGFIODPILEL GHKCMDNKOPN = 15;

    pub fn GHKCMDNKOPN(&self) -> &super::OGFIODPILEL::OGFIODPILEL {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(ref v)) => v,
            _ => <super::OGFIODPILEL::OGFIODPILEL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GHKCMDNKOPN(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_GHKCMDNKOPN(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GHKCMDNKOPN(&mut self, v: super::OGFIODPILEL::OGFIODPILEL) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GHKCMDNKOPN(&mut self) -> &mut super::OGFIODPILEL::OGFIODPILEL {
        if let ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(_)) = self.GCMPPOICPOD {
        } else {
            self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(super::OGFIODPILEL::OGFIODPILEL::new()));
        }
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GHKCMDNKOPN(&mut self) -> super::OGFIODPILEL::OGFIODPILEL {
        if self.has_GHKCMDNKOPN() {
            match self.GCMPPOICPOD.take() {
                ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OGFIODPILEL::OGFIODPILEL::new()
        }
    }

    // bool ILFALCDLAOL = 1;

    pub fn ILFALCDLAOL(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::ILFALCDLAOL(v)) => v,
            _ => false,
        }
    }

    pub fn clear_ILFALCDLAOL(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
    }

    pub fn has_ILFALCDLAOL(&self) -> bool {
        match self.GCMPPOICPOD {
            ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::ILFALCDLAOL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ILFALCDLAOL(&mut self, v: bool) {
        self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::ILFALCDLAOL(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "KAPDIMGJLNF",
            UpdatePlayerSetting::has_KAPDIMGJLNF,
            UpdatePlayerSetting::KAPDIMGJLNF,
            UpdatePlayerSetting::set_KAPDIMGJLNF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "MMMNJCHEMFN",
            UpdatePlayerSetting::has_MMMNJCHEMFN,
            UpdatePlayerSetting::MMMNJCHEMFN,
            UpdatePlayerSetting::set_MMMNJCHEMFN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "NKEKIBNJMPA",
            UpdatePlayerSetting::has_NKEKIBNJMPA,
            UpdatePlayerSetting::NKEKIBNJMPA,
            UpdatePlayerSetting::set_NKEKIBNJMPA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "PBKBGLHHKPE",
            UpdatePlayerSetting::has_PBKBGLHHKPE,
            UpdatePlayerSetting::PBKBGLHHKPE,
            UpdatePlayerSetting::set_PBKBGLHHKPE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "NJFMILJOFOK",
            UpdatePlayerSetting::has_NJFMILJOFOK,
            UpdatePlayerSetting::NJFMILJOFOK,
            UpdatePlayerSetting::set_NJFMILJOFOK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "AICNFAOBCPI",
            UpdatePlayerSetting::has_AICNFAOBCPI,
            UpdatePlayerSetting::AICNFAOBCPI,
            UpdatePlayerSetting::set_AICNFAOBCPI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "KJNCCKHJFHE",
            UpdatePlayerSetting::has_KJNCCKHJFHE,
            UpdatePlayerSetting::KJNCCKHJFHE,
            UpdatePlayerSetting::set_KJNCCKHJFHE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "APONEIDMPHL",
            UpdatePlayerSetting::has_APONEIDMPHL,
            UpdatePlayerSetting::APONEIDMPHL,
            UpdatePlayerSetting::set_APONEIDMPHL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "GMJANOJMKCE",
            UpdatePlayerSetting::has_GMJANOJMKCE,
            UpdatePlayerSetting::GMJANOJMKCE,
            UpdatePlayerSetting::set_GMJANOJMKCE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OGFIODPILEL::OGFIODPILEL>(
            "GHKCMDNKOPN",
            UpdatePlayerSetting::has_GHKCMDNKOPN,
            UpdatePlayerSetting::GHKCMDNKOPN,
            UpdatePlayerSetting::mut_GHKCMDNKOPN,
            UpdatePlayerSetting::set_GHKCMDNKOPN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ILFALCDLAOL",
            UpdatePlayerSetting::has_ILFALCDLAOL,
            UpdatePlayerSetting::ILFALCDLAOL,
            UpdatePlayerSetting::set_ILFALCDLAOL,
        ));
        oneofs.push(update_player_setting::GCMPPOICPOD::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdatePlayerSetting>(
            "UpdatePlayerSetting",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdatePlayerSetting {
    const NAME: &'static str = "UpdatePlayerSetting";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::KAPDIMGJLNF(is.read_bool()?));
                },
                40 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::MMMNJCHEMFN(is.read_bool()?));
                },
                96 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::NKEKIBNJMPA(is.read_bool()?));
                },
                80 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::PBKBGLHHKPE(is.read_bool()?));
                },
                48 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::NJFMILJOFOK(is.read_bool()?));
                },
                16 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::AICNFAOBCPI(is.read_bool()?));
                },
                88 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::KJNCCKHJFHE(is.read_bool()?));
                },
                24 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::APONEIDMPHL(is.read_bool()?));
                },
                72 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GMJANOJMKCE(is.read_bool()?));
                },
                122 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(is.read_message()?));
                },
                8 => {
                    self.GCMPPOICPOD = ::std::option::Option::Some(update_player_setting::GCMPPOICPOD::ILFALCDLAOL(is.read_bool()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.GCMPPOICPOD {
            match v {
                &update_player_setting::GCMPPOICPOD::KAPDIMGJLNF(v) => {
                    my_size += 1 + 1;
                },
                &update_player_setting::GCMPPOICPOD::MMMNJCHEMFN(v) => {
                    my_size += 1 + 1;
                },
                &update_player_setting::GCMPPOICPOD::NKEKIBNJMPA(v) => {
                    my_size += 1 + 1;
                },
                &update_player_setting::GCMPPOICPOD::PBKBGLHHKPE(v) => {
                    my_size += 1 + 1;
                },
                &update_player_setting::GCMPPOICPOD::NJFMILJOFOK(v) => {
                    my_size += 1 + 1;
                },
                &update_player_setting::GCMPPOICPOD::AICNFAOBCPI(v) => {
                    my_size += 1 + 1;
                },
                &update_player_setting::GCMPPOICPOD::KJNCCKHJFHE(v) => {
                    my_size += 1 + 1;
                },
                &update_player_setting::GCMPPOICPOD::APONEIDMPHL(v) => {
                    my_size += 1 + 1;
                },
                &update_player_setting::GCMPPOICPOD::GMJANOJMKCE(v) => {
                    my_size += 1 + 1;
                },
                &update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &update_player_setting::GCMPPOICPOD::ILFALCDLAOL(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.GCMPPOICPOD {
            match v {
                &update_player_setting::GCMPPOICPOD::KAPDIMGJLNF(v) => {
                    os.write_bool(13, v)?;
                },
                &update_player_setting::GCMPPOICPOD::MMMNJCHEMFN(v) => {
                    os.write_bool(5, v)?;
                },
                &update_player_setting::GCMPPOICPOD::NKEKIBNJMPA(v) => {
                    os.write_bool(12, v)?;
                },
                &update_player_setting::GCMPPOICPOD::PBKBGLHHKPE(v) => {
                    os.write_bool(10, v)?;
                },
                &update_player_setting::GCMPPOICPOD::NJFMILJOFOK(v) => {
                    os.write_bool(6, v)?;
                },
                &update_player_setting::GCMPPOICPOD::AICNFAOBCPI(v) => {
                    os.write_bool(2, v)?;
                },
                &update_player_setting::GCMPPOICPOD::KJNCCKHJFHE(v) => {
                    os.write_bool(11, v)?;
                },
                &update_player_setting::GCMPPOICPOD::APONEIDMPHL(v) => {
                    os.write_bool(3, v)?;
                },
                &update_player_setting::GCMPPOICPOD::GMJANOJMKCE(v) => {
                    os.write_bool(9, v)?;
                },
                &update_player_setting::GCMPPOICPOD::GHKCMDNKOPN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &update_player_setting::GCMPPOICPOD::ILFALCDLAOL(v) => {
                    os.write_bool(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdatePlayerSetting {
        UpdatePlayerSetting::new()
    }

    fn clear(&mut self) {
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.GCMPPOICPOD = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdatePlayerSetting {
        static instance: UpdatePlayerSetting = UpdatePlayerSetting {
            GCMPPOICPOD: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdatePlayerSetting {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdatePlayerSetting").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdatePlayerSetting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdatePlayerSetting {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `UpdatePlayerSetting`
pub mod update_player_setting {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:UpdatePlayerSetting.GCMPPOICPOD)
    pub enum GCMPPOICPOD {
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.KAPDIMGJLNF)
        KAPDIMGJLNF(bool),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.MMMNJCHEMFN)
        MMMNJCHEMFN(bool),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.NKEKIBNJMPA)
        NKEKIBNJMPA(bool),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.PBKBGLHHKPE)
        PBKBGLHHKPE(bool),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.NJFMILJOFOK)
        NJFMILJOFOK(bool),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.AICNFAOBCPI)
        AICNFAOBCPI(bool),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.KJNCCKHJFHE)
        KJNCCKHJFHE(bool),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.APONEIDMPHL)
        APONEIDMPHL(bool),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.GMJANOJMKCE)
        GMJANOJMKCE(bool),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.GHKCMDNKOPN)
        GHKCMDNKOPN(super::super::OGFIODPILEL::OGFIODPILEL),
        // @@protoc_insertion_point(oneof_field:UpdatePlayerSetting.ILFALCDLAOL)
        ILFALCDLAOL(bool),
    }

    impl ::protobuf::Oneof for GCMPPOICPOD {
    }

    impl ::protobuf::OneofFull for GCMPPOICPOD {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::UpdatePlayerSetting as ::protobuf::MessageFull>::descriptor().oneof_by_name("GCMPPOICPOD").unwrap()).clone()
        }
    }

    impl GCMPPOICPOD {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<GCMPPOICPOD>("GCMPPOICPOD")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19UpdatePlayerSetting.proto\x1a\x11OGFIODPILEL.proto\"\xbe\x03\n\x13\
    UpdatePlayerSetting\x12\"\n\x0bKAPDIMGJLNF\x18\r\x20\x01(\x08H\0R\x0bKAP\
    DIMGJLNF\x12\"\n\x0bMMMNJCHEMFN\x18\x05\x20\x01(\x08H\0R\x0bMMMNJCHEMFN\
    \x12\"\n\x0bNKEKIBNJMPA\x18\x0c\x20\x01(\x08H\0R\x0bNKEKIBNJMPA\x12\"\n\
    \x0bPBKBGLHHKPE\x18\n\x20\x01(\x08H\0R\x0bPBKBGLHHKPE\x12\"\n\x0bNJFMILJ\
    OFOK\x18\x06\x20\x01(\x08H\0R\x0bNJFMILJOFOK\x12\"\n\x0bAICNFAOBCPI\x18\
    \x02\x20\x01(\x08H\0R\x0bAICNFAOBCPI\x12\"\n\x0bKJNCCKHJFHE\x18\x0b\x20\
    \x01(\x08H\0R\x0bKJNCCKHJFHE\x12\"\n\x0bAPONEIDMPHL\x18\x03\x20\x01(\x08\
    H\0R\x0bAPONEIDMPHL\x12\"\n\x0bGMJANOJMKCE\x18\t\x20\x01(\x08H\0R\x0bGMJ\
    ANOJMKCE\x120\n\x0bGHKCMDNKOPN\x18\x0f\x20\x01(\x0b2\x0c.OGFIODPILELH\0R\
    \x0bGHKCMDNKOPN\x12\"\n\x0bILFALCDLAOL\x18\x01\x20\x01(\x08H\0R\x0bILFAL\
    CDLAOLB\r\n\x0bGCMPPOICPODb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::OGFIODPILEL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(UpdatePlayerSetting::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
