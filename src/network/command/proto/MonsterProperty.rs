// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MonsterProperty.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:MonsterProperty)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MonsterProperty {
    // message fields
    // @@protoc_insertion_point(field:MonsterProperty.max_hp)
    pub max_hp: f64,
    // @@protoc_insertion_point(field:MonsterProperty.TURN_FOOD_SWITCH_ATTACK)
    pub TURN_FOOD_SWITCH_ATTACK: f64,
    // @@protoc_insertion_point(field:MonsterProperty.defence)
    pub defence: f64,
    // @@protoc_insertion_point(field:MonsterProperty.IHEMIIFPBGJ)
    pub IHEMIIFPBGJ: f64,
    // @@protoc_insertion_point(field:MonsterProperty.speed)
    pub speed: f64,
    // @@protoc_insertion_point(field:MonsterProperty.left_hp)
    pub left_hp: f64,
    // @@protoc_insertion_point(field:MonsterProperty.NILPFIHMECI)
    pub NILPFIHMECI: f64,
    // special fields
    // @@protoc_insertion_point(special_field:MonsterProperty.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MonsterProperty {
    fn default() -> &'a MonsterProperty {
        <MonsterProperty as ::protobuf::Message>::default_instance()
    }
}

impl MonsterProperty {
    pub fn new() -> MonsterProperty {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_hp",
            |m: &MonsterProperty| { &m.max_hp },
            |m: &mut MonsterProperty| { &mut m.max_hp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TURN_FOOD_SWITCH_ATTACK",
            |m: &MonsterProperty| { &m.TURN_FOOD_SWITCH_ATTACK },
            |m: &mut MonsterProperty| { &mut m.TURN_FOOD_SWITCH_ATTACK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "defence",
            |m: &MonsterProperty| { &m.defence },
            |m: &mut MonsterProperty| { &mut m.defence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IHEMIIFPBGJ",
            |m: &MonsterProperty| { &m.IHEMIIFPBGJ },
            |m: &mut MonsterProperty| { &mut m.IHEMIIFPBGJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "speed",
            |m: &MonsterProperty| { &m.speed },
            |m: &mut MonsterProperty| { &mut m.speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "left_hp",
            |m: &MonsterProperty| { &m.left_hp },
            |m: &mut MonsterProperty| { &mut m.left_hp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NILPFIHMECI",
            |m: &MonsterProperty| { &m.NILPFIHMECI },
            |m: &mut MonsterProperty| { &mut m.NILPFIHMECI },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MonsterProperty>(
            "MonsterProperty",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MonsterProperty {
    const NAME: &'static str = "MonsterProperty";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.max_hp = is.read_double()?;
                },
                17 => {
                    self.TURN_FOOD_SWITCH_ATTACK = is.read_double()?;
                },
                25 => {
                    self.defence = is.read_double()?;
                },
                33 => {
                    self.IHEMIIFPBGJ = is.read_double()?;
                },
                41 => {
                    self.speed = is.read_double()?;
                },
                49 => {
                    self.left_hp = is.read_double()?;
                },
                57 => {
                    self.NILPFIHMECI = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.max_hp != 0. {
            my_size += 1 + 8;
        }
        if self.TURN_FOOD_SWITCH_ATTACK != 0. {
            my_size += 1 + 8;
        }
        if self.defence != 0. {
            my_size += 1 + 8;
        }
        if self.IHEMIIFPBGJ != 0. {
            my_size += 1 + 8;
        }
        if self.speed != 0. {
            my_size += 1 + 8;
        }
        if self.left_hp != 0. {
            my_size += 1 + 8;
        }
        if self.NILPFIHMECI != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.max_hp != 0. {
            os.write_double(1, self.max_hp)?;
        }
        if self.TURN_FOOD_SWITCH_ATTACK != 0. {
            os.write_double(2, self.TURN_FOOD_SWITCH_ATTACK)?;
        }
        if self.defence != 0. {
            os.write_double(3, self.defence)?;
        }
        if self.IHEMIIFPBGJ != 0. {
            os.write_double(4, self.IHEMIIFPBGJ)?;
        }
        if self.speed != 0. {
            os.write_double(5, self.speed)?;
        }
        if self.left_hp != 0. {
            os.write_double(6, self.left_hp)?;
        }
        if self.NILPFIHMECI != 0. {
            os.write_double(7, self.NILPFIHMECI)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MonsterProperty {
        MonsterProperty::new()
    }

    fn clear(&mut self) {
        self.max_hp = 0.;
        self.TURN_FOOD_SWITCH_ATTACK = 0.;
        self.defence = 0.;
        self.IHEMIIFPBGJ = 0.;
        self.speed = 0.;
        self.left_hp = 0.;
        self.NILPFIHMECI = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MonsterProperty {
        static instance: MonsterProperty = MonsterProperty {
            max_hp: 0.,
            TURN_FOOD_SWITCH_ATTACK: 0.,
            defence: 0.,
            IHEMIIFPBGJ: 0.,
            speed: 0.,
            left_hp: 0.,
            NILPFIHMECI: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MonsterProperty {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MonsterProperty").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MonsterProperty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonsterProperty {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15MonsterProperty.proto\"\xec\x01\n\x0fMonsterProperty\x12\x15\n\x06\
    max_hp\x18\x01\x20\x01(\x01R\x05maxHp\x125\n\x17TURN_FOOD_SWITCH_ATTACK\
    \x18\x02\x20\x01(\x01R\x14TURNFOODSWITCHATTACK\x12\x18\n\x07defence\x18\
    \x03\x20\x01(\x01R\x07defence\x12\x20\n\x0bIHEMIIFPBGJ\x18\x04\x20\x01(\
    \x01R\x0bIHEMIIFPBGJ\x12\x14\n\x05speed\x18\x05\x20\x01(\x01R\x05speed\
    \x12\x17\n\x07left_hp\x18\x06\x20\x01(\x01R\x06leftHp\x12\x20\n\x0bNILPF\
    IHMECI\x18\x07\x20\x01(\x01R\x0bNILPFIHMECIb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MonsterProperty::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
