// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RevcMsgScNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RevcMsgScNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RevcMsgScNotify {
    // message fields
    // @@protoc_insertion_point(field:RevcMsgScNotify.CMIPPPJEHCI)
    pub CMIPPPJEHCI: u32,
    // @@protoc_insertion_point(field:RevcMsgScNotify.chat_type)
    pub chat_type: ::protobuf::EnumOrUnknown<super::ChatType::ChatType>,
    // @@protoc_insertion_point(field:RevcMsgScNotify.msg_text)
    pub msg_text: ::std::string::String,
    // @@protoc_insertion_point(field:RevcMsgScNotify.msg_type)
    pub msg_type: ::protobuf::EnumOrUnknown<super::MsgType::MsgType>,
    // @@protoc_insertion_point(field:RevcMsgScNotify.emote)
    pub emote: u32,
    // @@protoc_insertion_point(field:RevcMsgScNotify.FMHIONKAGNA)
    pub FMHIONKAGNA: u32,
    // @@protoc_insertion_point(field:RevcMsgScNotify.HNBEPABNBNG)
    pub HNBEPABNBNG: ::protobuf::MessageField<super::PEDLPHDBNAF::PEDLPHDBNAF>,
    // special fields
    // @@protoc_insertion_point(special_field:RevcMsgScNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RevcMsgScNotify {
    fn default() -> &'a RevcMsgScNotify {
        <RevcMsgScNotify as ::protobuf::Message>::default_instance()
    }
}

impl RevcMsgScNotify {
    pub fn new() -> RevcMsgScNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMIPPPJEHCI",
            |m: &RevcMsgScNotify| { &m.CMIPPPJEHCI },
            |m: &mut RevcMsgScNotify| { &mut m.CMIPPPJEHCI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chat_type",
            |m: &RevcMsgScNotify| { &m.chat_type },
            |m: &mut RevcMsgScNotify| { &mut m.chat_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_text",
            |m: &RevcMsgScNotify| { &m.msg_text },
            |m: &mut RevcMsgScNotify| { &mut m.msg_text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_type",
            |m: &RevcMsgScNotify| { &m.msg_type },
            |m: &mut RevcMsgScNotify| { &mut m.msg_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "emote",
            |m: &RevcMsgScNotify| { &m.emote },
            |m: &mut RevcMsgScNotify| { &mut m.emote },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMHIONKAGNA",
            |m: &RevcMsgScNotify| { &m.FMHIONKAGNA },
            |m: &mut RevcMsgScNotify| { &mut m.FMHIONKAGNA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PEDLPHDBNAF::PEDLPHDBNAF>(
            "HNBEPABNBNG",
            |m: &RevcMsgScNotify| { &m.HNBEPABNBNG },
            |m: &mut RevcMsgScNotify| { &mut m.HNBEPABNBNG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RevcMsgScNotify>(
            "RevcMsgScNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RevcMsgScNotify {
    const NAME: &'static str = "RevcMsgScNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.CMIPPPJEHCI = is.read_uint32()?;
                },
                96 => {
                    self.chat_type = is.read_enum_or_unknown()?;
                },
                66 => {
                    self.msg_text = is.read_string()?;
                },
                56 => {
                    self.msg_type = is.read_enum_or_unknown()?;
                },
                48 => {
                    self.emote = is.read_uint32()?;
                },
                72 => {
                    self.FMHIONKAGNA = is.read_uint32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HNBEPABNBNG)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CMIPPPJEHCI != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.CMIPPPJEHCI);
        }
        if self.chat_type != ::protobuf::EnumOrUnknown::new(super::ChatType::ChatType::CHAT_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(12, self.chat_type.value());
        }
        if !self.msg_text.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.msg_text);
        }
        if self.msg_type != ::protobuf::EnumOrUnknown::new(super::MsgType::MsgType::MSG_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(7, self.msg_type.value());
        }
        if self.emote != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.emote);
        }
        if self.FMHIONKAGNA != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.FMHIONKAGNA);
        }
        if let Some(v) = self.HNBEPABNBNG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CMIPPPJEHCI != 0 {
            os.write_uint32(11, self.CMIPPPJEHCI)?;
        }
        if self.chat_type != ::protobuf::EnumOrUnknown::new(super::ChatType::ChatType::CHAT_TYPE_NONE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.chat_type))?;
        }
        if !self.msg_text.is_empty() {
            os.write_string(8, &self.msg_text)?;
        }
        if self.msg_type != ::protobuf::EnumOrUnknown::new(super::MsgType::MsgType::MSG_TYPE_NONE) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.msg_type))?;
        }
        if self.emote != 0 {
            os.write_uint32(6, self.emote)?;
        }
        if self.FMHIONKAGNA != 0 {
            os.write_uint32(9, self.FMHIONKAGNA)?;
        }
        if let Some(v) = self.HNBEPABNBNG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RevcMsgScNotify {
        RevcMsgScNotify::new()
    }

    fn clear(&mut self) {
        self.CMIPPPJEHCI = 0;
        self.chat_type = ::protobuf::EnumOrUnknown::new(super::ChatType::ChatType::CHAT_TYPE_NONE);
        self.msg_text.clear();
        self.msg_type = ::protobuf::EnumOrUnknown::new(super::MsgType::MsgType::MSG_TYPE_NONE);
        self.emote = 0;
        self.FMHIONKAGNA = 0;
        self.HNBEPABNBNG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RevcMsgScNotify {
        static instance: RevcMsgScNotify = RevcMsgScNotify {
            CMIPPPJEHCI: 0,
            chat_type: ::protobuf::EnumOrUnknown::from_i32(0),
            msg_text: ::std::string::String::new(),
            msg_type: ::protobuf::EnumOrUnknown::from_i32(0),
            emote: 0,
            FMHIONKAGNA: 0,
            HNBEPABNBNG: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RevcMsgScNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RevcMsgScNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RevcMsgScNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevcMsgScNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15RevcMsgScNotify.proto\x1a\x0eChatType.proto\x1a\rMsgType.proto\x1a\
    \x11PEDLPHDBNAF.proto\"\x83\x02\n\x0fRevcMsgScNotify\x12\x20\n\x0bCMIPPP\
    JEHCI\x18\x0b\x20\x01(\rR\x0bCMIPPPJEHCI\x12&\n\tchat_type\x18\x0c\x20\
    \x01(\x0e2\t.ChatTypeR\x08chatType\x12\x19\n\x08msg_text\x18\x08\x20\x01\
    (\tR\x07msgText\x12#\n\x08msg_type\x18\x07\x20\x01(\x0e2\x08.MsgTypeR\
    \x07msgType\x12\x14\n\x05emote\x18\x06\x20\x01(\rR\x05emote\x12\x20\n\
    \x0bFMHIONKAGNA\x18\t\x20\x01(\rR\x0bFMHIONKAGNA\x12.\n\x0bHNBEPABNBNG\
    \x18\x01\x20\x01(\x0b2\x0c.PEDLPHDBNAFR\x0bHNBEPABNBNGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ChatType::file_descriptor().clone());
            deps.push(super::MsgType::file_descriptor().clone());
            deps.push(super::PEDLPHDBNAF::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RevcMsgScNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
