// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdMatchType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdMatchType)
pub enum CmdMatchType {
    // @@protoc_insertion_point(enum_value:CmdMatchType.CmdMatchTypeNone)
    CmdMatchTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdMatchType.CmdGetCrossInfoCsReq)
    CmdGetCrossInfoCsReq = 7317,
    // @@protoc_insertion_point(enum_value:CmdMatchType.CmdCancelMatchScRsp)
    CmdCancelMatchScRsp = 7337,
    // @@protoc_insertion_point(enum_value:CmdMatchType.CmdStartMatchCsReq)
    CmdStartMatchCsReq = 7304,
    // @@protoc_insertion_point(enum_value:CmdMatchType.CmdGetCrossInfoScRsp)
    CmdGetCrossInfoScRsp = 7327,
    // @@protoc_insertion_point(enum_value:CmdMatchType.CmdStartMatchScRsp)
    CmdStartMatchScRsp = 7346,
    // @@protoc_insertion_point(enum_value:CmdMatchType.CmdCancelMatchCsReq)
    CmdCancelMatchCsReq = 7302,
    // @@protoc_insertion_point(enum_value:CmdMatchType.CmdMatchResultScNotify)
    CmdMatchResultScNotify = 7336,
}

impl ::protobuf::Enum for CmdMatchType {
    const NAME: &'static str = "CmdMatchType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdMatchType> {
        match value {
            0 => ::std::option::Option::Some(CmdMatchType::CmdMatchTypeNone),
            7317 => ::std::option::Option::Some(CmdMatchType::CmdGetCrossInfoCsReq),
            7337 => ::std::option::Option::Some(CmdMatchType::CmdCancelMatchScRsp),
            7304 => ::std::option::Option::Some(CmdMatchType::CmdStartMatchCsReq),
            7327 => ::std::option::Option::Some(CmdMatchType::CmdGetCrossInfoScRsp),
            7346 => ::std::option::Option::Some(CmdMatchType::CmdStartMatchScRsp),
            7302 => ::std::option::Option::Some(CmdMatchType::CmdCancelMatchCsReq),
            7336 => ::std::option::Option::Some(CmdMatchType::CmdMatchResultScNotify),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdMatchType> {
        match str {
            "CmdMatchTypeNone" => ::std::option::Option::Some(CmdMatchType::CmdMatchTypeNone),
            "CmdGetCrossInfoCsReq" => ::std::option::Option::Some(CmdMatchType::CmdGetCrossInfoCsReq),
            "CmdCancelMatchScRsp" => ::std::option::Option::Some(CmdMatchType::CmdCancelMatchScRsp),
            "CmdStartMatchCsReq" => ::std::option::Option::Some(CmdMatchType::CmdStartMatchCsReq),
            "CmdGetCrossInfoScRsp" => ::std::option::Option::Some(CmdMatchType::CmdGetCrossInfoScRsp),
            "CmdStartMatchScRsp" => ::std::option::Option::Some(CmdMatchType::CmdStartMatchScRsp),
            "CmdCancelMatchCsReq" => ::std::option::Option::Some(CmdMatchType::CmdCancelMatchCsReq),
            "CmdMatchResultScNotify" => ::std::option::Option::Some(CmdMatchType::CmdMatchResultScNotify),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdMatchType] = &[
        CmdMatchType::CmdMatchTypeNone,
        CmdMatchType::CmdGetCrossInfoCsReq,
        CmdMatchType::CmdCancelMatchScRsp,
        CmdMatchType::CmdStartMatchCsReq,
        CmdMatchType::CmdGetCrossInfoScRsp,
        CmdMatchType::CmdStartMatchScRsp,
        CmdMatchType::CmdCancelMatchCsReq,
        CmdMatchType::CmdMatchResultScNotify,
    ];
}

impl ::protobuf::EnumFull for CmdMatchType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdMatchType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdMatchType::CmdMatchTypeNone => 0,
            CmdMatchType::CmdGetCrossInfoCsReq => 1,
            CmdMatchType::CmdCancelMatchScRsp => 2,
            CmdMatchType::CmdStartMatchCsReq => 3,
            CmdMatchType::CmdGetCrossInfoScRsp => 4,
            CmdMatchType::CmdStartMatchScRsp => 5,
            CmdMatchType::CmdCancelMatchCsReq => 6,
            CmdMatchType::CmdMatchResultScNotify => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdMatchType {
    fn default() -> Self {
        CmdMatchType::CmdMatchTypeNone
    }
}

impl CmdMatchType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdMatchType>("CmdMatchType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12CmdMatchType.proto*\xdd\x01\n\x0cCmdMatchType\x12\x14\n\x10CmdMatc\
    hTypeNone\x10\0\x12\x19\n\x14CmdGetCrossInfoCsReq\x10\x959\x12\x18\n\x13\
    CmdCancelMatchScRsp\x10\xa99\x12\x17\n\x12CmdStartMatchCsReq\x10\x889\
    \x12\x19\n\x14CmdGetCrossInfoScRsp\x10\x9f9\x12\x17\n\x12CmdStartMatchSc\
    Rsp\x10\xb29\x12\x18\n\x13CmdCancelMatchCsReq\x10\x869\x12\x1b\n\x16CmdM\
    atchResultScNotify\x10\xa89b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdMatchType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
