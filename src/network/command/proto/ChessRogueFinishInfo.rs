// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChessRogueFinishInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ChessRogueFinishInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChessRogueFinishInfo {
    // message fields
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.OPOIMHHAFJO)
    pub OPOIMHHAFJO: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.BGPECKFDELD)
    pub BGPECKFDELD: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.DMBDNAICPFB)
    pub DMBDNAICPFB: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.ABEHKCJHCEH)
    pub ABEHKCJHCEH: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.rogue_buff_info)
    pub rogue_buff_info: ::protobuf::MessageField<super::ChessRogueBuff::ChessRogueBuff>,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.score_id)
    pub score_id: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.IPOJMMGOOPJ)
    pub IPOJMMGOOPJ: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.OJGGMOOPGIL)
    pub OJGGMOOPGIL: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.OPAKJJMAGPH)
    pub OPAKJJMAGPH: ::protobuf::MessageField<super::IMNPEAJAJJO::IMNPEAJAJJO>,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.EGPCIBJIAJD)
    pub EGPCIBJIAJD: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.rogue_lineup)
    pub rogue_lineup: ::protobuf::MessageField<super::LineupInfo::LineupInfo>,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.PLBCDIAADKD)
    pub PLBCDIAADKD: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.rogue_sub_mode)
    pub rogue_sub_mode: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.BLBBOKOGFDA)
    pub BLBBOKOGFDA: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.game_miracle_info)
    pub game_miracle_info: ::protobuf::MessageField<super::ChessRogueMiracle::ChessRogueMiracle>,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.is_finish)
    pub is_finish: bool,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.chess_rogue_main_story_id)
    pub chess_rogue_main_story_id: u32,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.quit_reason)
    pub quit_reason: ::protobuf::EnumOrUnknown<super::ChessRogueQuitReason::ChessRogueQuitReason>,
    // @@protoc_insertion_point(field:ChessRogueFinishInfo.difficulty_level)
    pub difficulty_level: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ChessRogueFinishInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChessRogueFinishInfo {
    fn default() -> &'a ChessRogueFinishInfo {
        <ChessRogueFinishInfo as ::protobuf::Message>::default_instance()
    }
}

impl ChessRogueFinishInfo {
    pub fn new() -> ChessRogueFinishInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(19);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OPOIMHHAFJO",
            |m: &ChessRogueFinishInfo| { &m.OPOIMHHAFJO },
            |m: &mut ChessRogueFinishInfo| { &mut m.OPOIMHHAFJO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "BGPECKFDELD",
            |m: &ChessRogueFinishInfo| { &m.BGPECKFDELD },
            |m: &mut ChessRogueFinishInfo| { &mut m.BGPECKFDELD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DMBDNAICPFB",
            |m: &ChessRogueFinishInfo| { &m.DMBDNAICPFB },
            |m: &mut ChessRogueFinishInfo| { &mut m.DMBDNAICPFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ABEHKCJHCEH",
            |m: &ChessRogueFinishInfo| { &m.ABEHKCJHCEH },
            |m: &mut ChessRogueFinishInfo| { &mut m.ABEHKCJHCEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ChessRogueBuff::ChessRogueBuff>(
            "rogue_buff_info",
            |m: &ChessRogueFinishInfo| { &m.rogue_buff_info },
            |m: &mut ChessRogueFinishInfo| { &mut m.rogue_buff_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score_id",
            |m: &ChessRogueFinishInfo| { &m.score_id },
            |m: &mut ChessRogueFinishInfo| { &mut m.score_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IPOJMMGOOPJ",
            |m: &ChessRogueFinishInfo| { &m.IPOJMMGOOPJ },
            |m: &mut ChessRogueFinishInfo| { &mut m.IPOJMMGOOPJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OJGGMOOPGIL",
            |m: &ChessRogueFinishInfo| { &m.OJGGMOOPGIL },
            |m: &mut ChessRogueFinishInfo| { &mut m.OJGGMOOPGIL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IMNPEAJAJJO::IMNPEAJAJJO>(
            "OPAKJJMAGPH",
            |m: &ChessRogueFinishInfo| { &m.OPAKJJMAGPH },
            |m: &mut ChessRogueFinishInfo| { &mut m.OPAKJJMAGPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EGPCIBJIAJD",
            |m: &ChessRogueFinishInfo| { &m.EGPCIBJIAJD },
            |m: &mut ChessRogueFinishInfo| { &mut m.EGPCIBJIAJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LineupInfo::LineupInfo>(
            "rogue_lineup",
            |m: &ChessRogueFinishInfo| { &m.rogue_lineup },
            |m: &mut ChessRogueFinishInfo| { &mut m.rogue_lineup },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PLBCDIAADKD",
            |m: &ChessRogueFinishInfo| { &m.PLBCDIAADKD },
            |m: &mut ChessRogueFinishInfo| { &mut m.PLBCDIAADKD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rogue_sub_mode",
            |m: &ChessRogueFinishInfo| { &m.rogue_sub_mode },
            |m: &mut ChessRogueFinishInfo| { &mut m.rogue_sub_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BLBBOKOGFDA",
            |m: &ChessRogueFinishInfo| { &m.BLBBOKOGFDA },
            |m: &mut ChessRogueFinishInfo| { &mut m.BLBBOKOGFDA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ChessRogueMiracle::ChessRogueMiracle>(
            "game_miracle_info",
            |m: &ChessRogueFinishInfo| { &m.game_miracle_info },
            |m: &mut ChessRogueFinishInfo| { &mut m.game_miracle_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_finish",
            |m: &ChessRogueFinishInfo| { &m.is_finish },
            |m: &mut ChessRogueFinishInfo| { &mut m.is_finish },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chess_rogue_main_story_id",
            |m: &ChessRogueFinishInfo| { &m.chess_rogue_main_story_id },
            |m: &mut ChessRogueFinishInfo| { &mut m.chess_rogue_main_story_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quit_reason",
            |m: &ChessRogueFinishInfo| { &m.quit_reason },
            |m: &mut ChessRogueFinishInfo| { &mut m.quit_reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "difficulty_level",
            |m: &ChessRogueFinishInfo| { &m.difficulty_level },
            |m: &mut ChessRogueFinishInfo| { &mut m.difficulty_level },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChessRogueFinishInfo>(
            "ChessRogueFinishInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChessRogueFinishInfo {
    const NAME: &'static str = "ChessRogueFinishInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                1968 => {
                    self.OPOIMHHAFJO = is.read_uint32()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BGPECKFDELD)?;
                },
                96 => {
                    self.DMBDNAICPFB = is.read_uint32()?;
                },
                3016 => {
                    self.ABEHKCJHCEH = is.read_uint32()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rogue_buff_info)?;
                },
                8944 => {
                    self.score_id = is.read_uint32()?;
                },
                120 => {
                    self.IPOJMMGOOPJ = is.read_uint32()?;
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.OJGGMOOPGIL)?;
                },
                80 => {
                    self.OJGGMOOPGIL.push(is.read_uint32()?);
                },
                12050 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OPAKJJMAGPH)?;
                },
                9296 => {
                    self.EGPCIBJIAJD = is.read_uint32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rogue_lineup)?;
                },
                32 => {
                    self.PLBCDIAADKD = is.read_uint32()?;
                },
                11320 => {
                    self.rogue_sub_mode = is.read_uint32()?;
                },
                104 => {
                    self.BLBBOKOGFDA = is.read_uint32()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.game_miracle_info)?;
                },
                16 => {
                    self.is_finish = is.read_bool()?;
                },
                64 => {
                    self.chess_rogue_main_story_id = is.read_uint32()?;
                },
                112 => {
                    self.quit_reason = is.read_enum_or_unknown()?;
                },
                8 => {
                    self.difficulty_level = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OPOIMHHAFJO != 0 {
            my_size += ::protobuf::rt::uint32_size(246, self.OPOIMHHAFJO);
        }
        if let Some(v) = self.BGPECKFDELD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.DMBDNAICPFB != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.DMBDNAICPFB);
        }
        if self.ABEHKCJHCEH != 0 {
            my_size += ::protobuf::rt::uint32_size(377, self.ABEHKCJHCEH);
        }
        if let Some(v) = self.rogue_buff_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.score_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1118, self.score_id);
        }
        if self.IPOJMMGOOPJ != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.IPOJMMGOOPJ);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(10, &self.OJGGMOOPGIL);
        if let Some(v) = self.OPAKJJMAGPH.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.EGPCIBJIAJD != 0 {
            my_size += ::protobuf::rt::uint32_size(1162, self.EGPCIBJIAJD);
        }
        if let Some(v) = self.rogue_lineup.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.PLBCDIAADKD != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.PLBCDIAADKD);
        }
        if self.rogue_sub_mode != 0 {
            my_size += ::protobuf::rt::uint32_size(1415, self.rogue_sub_mode);
        }
        if self.BLBBOKOGFDA != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.BLBBOKOGFDA);
        }
        if let Some(v) = self.game_miracle_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.is_finish != false {
            my_size += 1 + 1;
        }
        if self.chess_rogue_main_story_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.chess_rogue_main_story_id);
        }
        if self.quit_reason != ::protobuf::EnumOrUnknown::new(super::ChessRogueQuitReason::ChessRogueQuitReason::CHESS_ROGUE_ACCOUNT_BY_NONE) {
            my_size += ::protobuf::rt::int32_size(14, self.quit_reason.value());
        }
        if self.difficulty_level != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.difficulty_level);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OPOIMHHAFJO != 0 {
            os.write_uint32(246, self.OPOIMHHAFJO)?;
        }
        if let Some(v) = self.BGPECKFDELD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.DMBDNAICPFB != 0 {
            os.write_uint32(12, self.DMBDNAICPFB)?;
        }
        if self.ABEHKCJHCEH != 0 {
            os.write_uint32(377, self.ABEHKCJHCEH)?;
        }
        if let Some(v) = self.rogue_buff_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.score_id != 0 {
            os.write_uint32(1118, self.score_id)?;
        }
        if self.IPOJMMGOOPJ != 0 {
            os.write_uint32(15, self.IPOJMMGOOPJ)?;
        }
        os.write_repeated_packed_uint32(10, &self.OJGGMOOPGIL)?;
        if let Some(v) = self.OPAKJJMAGPH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1506, v, os)?;
        }
        if self.EGPCIBJIAJD != 0 {
            os.write_uint32(1162, self.EGPCIBJIAJD)?;
        }
        if let Some(v) = self.rogue_lineup.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.PLBCDIAADKD != 0 {
            os.write_uint32(4, self.PLBCDIAADKD)?;
        }
        if self.rogue_sub_mode != 0 {
            os.write_uint32(1415, self.rogue_sub_mode)?;
        }
        if self.BLBBOKOGFDA != 0 {
            os.write_uint32(13, self.BLBBOKOGFDA)?;
        }
        if let Some(v) = self.game_miracle_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.is_finish != false {
            os.write_bool(2, self.is_finish)?;
        }
        if self.chess_rogue_main_story_id != 0 {
            os.write_uint32(8, self.chess_rogue_main_story_id)?;
        }
        if self.quit_reason != ::protobuf::EnumOrUnknown::new(super::ChessRogueQuitReason::ChessRogueQuitReason::CHESS_ROGUE_ACCOUNT_BY_NONE) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.quit_reason))?;
        }
        if self.difficulty_level != 0 {
            os.write_uint32(1, self.difficulty_level)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChessRogueFinishInfo {
        ChessRogueFinishInfo::new()
    }

    fn clear(&mut self) {
        self.OPOIMHHAFJO = 0;
        self.BGPECKFDELD.clear();
        self.DMBDNAICPFB = 0;
        self.ABEHKCJHCEH = 0;
        self.rogue_buff_info.clear();
        self.score_id = 0;
        self.IPOJMMGOOPJ = 0;
        self.OJGGMOOPGIL.clear();
        self.OPAKJJMAGPH.clear();
        self.EGPCIBJIAJD = 0;
        self.rogue_lineup.clear();
        self.PLBCDIAADKD = 0;
        self.rogue_sub_mode = 0;
        self.BLBBOKOGFDA = 0;
        self.game_miracle_info.clear();
        self.is_finish = false;
        self.chess_rogue_main_story_id = 0;
        self.quit_reason = ::protobuf::EnumOrUnknown::new(super::ChessRogueQuitReason::ChessRogueQuitReason::CHESS_ROGUE_ACCOUNT_BY_NONE);
        self.difficulty_level = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChessRogueFinishInfo {
        static instance: ChessRogueFinishInfo = ChessRogueFinishInfo {
            OPOIMHHAFJO: 0,
            BGPECKFDELD: ::protobuf::MessageField::none(),
            DMBDNAICPFB: 0,
            ABEHKCJHCEH: 0,
            rogue_buff_info: ::protobuf::MessageField::none(),
            score_id: 0,
            IPOJMMGOOPJ: 0,
            OJGGMOOPGIL: ::std::vec::Vec::new(),
            OPAKJJMAGPH: ::protobuf::MessageField::none(),
            EGPCIBJIAJD: 0,
            rogue_lineup: ::protobuf::MessageField::none(),
            PLBCDIAADKD: 0,
            rogue_sub_mode: 0,
            BLBBOKOGFDA: 0,
            game_miracle_info: ::protobuf::MessageField::none(),
            is_finish: false,
            chess_rogue_main_story_id: 0,
            quit_reason: ::protobuf::EnumOrUnknown::from_i32(0),
            difficulty_level: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChessRogueFinishInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChessRogueFinishInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChessRogueFinishInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChessRogueFinishInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aChessRogueFinishInfo.proto\x1a\x14ChessRogueBuff.proto\x1a\x17Ches\
    sRogueMiracle.proto\x1a\x1aChessRogueQuitReason.proto\x1a\x11IMNPEAJAJJO\
    .proto\x1a\x0eItemList.proto\x1a\x10LineupInfo.proto\"\xad\x06\n\x14Ches\
    sRogueFinishInfo\x12!\n\x0bOPOIMHHAFJO\x18\xf6\x01\x20\x01(\rR\x0bOPOIMH\
    HAFJO\x12+\n\x0bBGPECKFDELD\x18\x07\x20\x01(\x0b2\t.ItemListR\x0bBGPECKF\
    DELD\x12\x20\n\x0bDMBDNAICPFB\x18\x0c\x20\x01(\rR\x0bDMBDNAICPFB\x12!\n\
    \x0bABEHKCJHCEH\x18\xf9\x02\x20\x01(\rR\x0bABEHKCJHCEH\x127\n\x0frogue_b\
    uff_info\x18\x06\x20\x01(\x0b2\x0f.ChessRogueBuffR\rrogueBuffInfo\x12\
    \x1a\n\x08score_id\x18\xde\x08\x20\x01(\rR\x07scoreId\x12\x20\n\x0bIPOJM\
    MGOOPJ\x18\x0f\x20\x01(\rR\x0bIPOJMMGOOPJ\x12\x20\n\x0bOJGGMOOPGIL\x18\n\
    \x20\x03(\rR\x0bOJGGMOOPGIL\x12/\n\x0bOPAKJJMAGPH\x18\xe2\x0b\x20\x01(\
    \x0b2\x0c.IMNPEAJAJJOR\x0bOPAKJJMAGPH\x12!\n\x0bEGPCIBJIAJD\x18\x8a\t\
    \x20\x01(\rR\x0bEGPCIBJIAJD\x12.\n\x0crogue_lineup\x18\x03\x20\x01(\x0b2\
    \x0b.LineupInfoR\x0brogueLineup\x12\x20\n\x0bPLBCDIAADKD\x18\x04\x20\x01\
    (\rR\x0bPLBCDIAADKD\x12%\n\x0erogue_sub_mode\x18\x87\x0b\x20\x01(\rR\x0c\
    rogueSubMode\x12\x20\n\x0bBLBBOKOGFDA\x18\r\x20\x01(\rR\x0bBLBBOKOGFDA\
    \x12>\n\x11game_miracle_info\x18\x0b\x20\x01(\x0b2\x12.ChessRogueMiracle\
    R\x0fgameMiracleInfo\x12\x1b\n\tis_finish\x18\x02\x20\x01(\x08R\x08isFin\
    ish\x128\n\x19chess_rogue_main_story_id\x18\x08\x20\x01(\rR\x15chessRogu\
    eMainStoryId\x126\n\x0bquit_reason\x18\x0e\x20\x01(\x0e2\x15.ChessRogueQ\
    uitReasonR\nquitReason\x12)\n\x10difficulty_level\x18\x01\x20\x01(\rR\
    \x0fdifficultyLevelb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::ChessRogueBuff::file_descriptor().clone());
            deps.push(super::ChessRogueMiracle::file_descriptor().clone());
            deps.push(super::ChessRogueQuitReason::file_descriptor().clone());
            deps.push(super::IMNPEAJAJJO::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            deps.push(super::LineupInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChessRogueFinishInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
