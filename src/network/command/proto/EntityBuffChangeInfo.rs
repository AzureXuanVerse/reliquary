// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EntityBuffChangeInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:EntityBuffChangeInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EntityBuffChangeInfo {
    // message fields
    // @@protoc_insertion_point(field:EntityBuffChangeInfo.attacked_group_id)
    pub attacked_group_id: u32,
    // @@protoc_insertion_point(field:EntityBuffChangeInfo.reason)
    pub reason: ::protobuf::EnumOrUnknown<super::CAGLGPAOALO::CAGLGPAOALO>,
    // @@protoc_insertion_point(field:EntityBuffChangeInfo.entity_id)
    pub entity_id: u32,
    // message oneof groups
    pub KFELKJLDKEH: ::std::option::Option<entity_buff_change_info::KFELKJLDKEH>,
    // special fields
    // @@protoc_insertion_point(special_field:EntityBuffChangeInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityBuffChangeInfo {
    fn default() -> &'a EntityBuffChangeInfo {
        <EntityBuffChangeInfo as ::protobuf::Message>::default_instance()
    }
}

impl EntityBuffChangeInfo {
    pub fn new() -> EntityBuffChangeInfo {
        ::std::default::Default::default()
    }

    // .BuffInfo PCJLGHBIJCM = 2;

    pub fn PCJLGHBIJCM(&self) -> &super::BuffInfo::BuffInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(ref v)) => v,
            _ => <super::BuffInfo::BuffInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PCJLGHBIJCM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_PCJLGHBIJCM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PCJLGHBIJCM(&mut self, v: super::BuffInfo::BuffInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PCJLGHBIJCM(&mut self) -> &mut super::BuffInfo::BuffInfo {
        if let ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(super::BuffInfo::BuffInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PCJLGHBIJCM(&mut self) -> super::BuffInfo::BuffInfo {
        if self.has_PCJLGHBIJCM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BuffInfo::BuffInfo::new()
        }
    }

    // uint32 HCAHEKMGEAN = 5;

    pub fn HCAHEKMGEAN(&self) -> u32 {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::HCAHEKMGEAN(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_HCAHEKMGEAN(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_HCAHEKMGEAN(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::HCAHEKMGEAN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HCAHEKMGEAN(&mut self, v: u32) {
        self.KFELKJLDKEH = ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::HCAHEKMGEAN(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "attacked_group_id",
            |m: &EntityBuffChangeInfo| { &m.attacked_group_id },
            |m: &mut EntityBuffChangeInfo| { &mut m.attacked_group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reason",
            |m: &EntityBuffChangeInfo| { &m.reason },
            |m: &mut EntityBuffChangeInfo| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &EntityBuffChangeInfo| { &m.entity_id },
            |m: &mut EntityBuffChangeInfo| { &mut m.entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BuffInfo::BuffInfo>(
            "PCJLGHBIJCM",
            EntityBuffChangeInfo::has_PCJLGHBIJCM,
            EntityBuffChangeInfo::PCJLGHBIJCM,
            EntityBuffChangeInfo::mut_PCJLGHBIJCM,
            EntityBuffChangeInfo::set_PCJLGHBIJCM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "HCAHEKMGEAN",
            EntityBuffChangeInfo::has_HCAHEKMGEAN,
            EntityBuffChangeInfo::HCAHEKMGEAN,
            EntityBuffChangeInfo::set_HCAHEKMGEAN,
        ));
        oneofs.push(entity_buff_change_info::KFELKJLDKEH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityBuffChangeInfo>(
            "EntityBuffChangeInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityBuffChangeInfo {
    const NAME: &'static str = "EntityBuffChangeInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.attacked_group_id = is.read_uint32()?;
                },
                80 => {
                    self.reason = is.read_enum_or_unknown()?;
                },
                64 => {
                    self.entity_id = is.read_uint32()?;
                },
                18 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(is.read_message()?));
                },
                40 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(entity_buff_change_info::KFELKJLDKEH::HCAHEKMGEAN(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.attacked_group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.attacked_group_id);
        }
        if self.reason != ::protobuf::EnumOrUnknown::new(super::CAGLGPAOALO::CAGLGPAOALO::SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT) {
            my_size += ::protobuf::rt::int32_size(10, self.reason.value());
        }
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.entity_id);
        }
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &entity_buff_change_info::KFELKJLDKEH::HCAHEKMGEAN(v) => {
                    my_size += ::protobuf::rt::uint32_size(5, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.attacked_group_id != 0 {
            os.write_uint32(4, self.attacked_group_id)?;
        }
        if self.reason != ::protobuf::EnumOrUnknown::new(super::CAGLGPAOALO::CAGLGPAOALO::SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT) {
            os.write_enum(10, ::protobuf::EnumOrUnknown::value(&self.reason))?;
        }
        if self.entity_id != 0 {
            os.write_uint32(8, self.entity_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &entity_buff_change_info::KFELKJLDKEH::PCJLGHBIJCM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &entity_buff_change_info::KFELKJLDKEH::HCAHEKMGEAN(v) => {
                    os.write_uint32(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityBuffChangeInfo {
        EntityBuffChangeInfo::new()
    }

    fn clear(&mut self) {
        self.attacked_group_id = 0;
        self.reason = ::protobuf::EnumOrUnknown::new(super::CAGLGPAOALO::CAGLGPAOALO::SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT);
        self.entity_id = 0;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityBuffChangeInfo {
        static instance: EntityBuffChangeInfo = EntityBuffChangeInfo {
            attacked_group_id: 0,
            reason: ::protobuf::EnumOrUnknown::from_i32(0),
            entity_id: 0,
            KFELKJLDKEH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityBuffChangeInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityBuffChangeInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityBuffChangeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityBuffChangeInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EntityBuffChangeInfo`
pub mod entity_buff_change_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:EntityBuffChangeInfo.KFELKJLDKEH)
    pub enum KFELKJLDKEH {
        // @@protoc_insertion_point(oneof_field:EntityBuffChangeInfo.PCJLGHBIJCM)
        PCJLGHBIJCM(super::super::BuffInfo::BuffInfo),
        // @@protoc_insertion_point(oneof_field:EntityBuffChangeInfo.HCAHEKMGEAN)
        HCAHEKMGEAN(u32),
    }

    impl ::protobuf::Oneof for KFELKJLDKEH {
    }

    impl ::protobuf::OneofFull for KFELKJLDKEH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EntityBuffChangeInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("KFELKJLDKEH").unwrap()).clone()
        }
    }

    impl KFELKJLDKEH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KFELKJLDKEH>("KFELKJLDKEH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aEntityBuffChangeInfo.proto\x1a\x0eBuffInfo.proto\x1a\x11CAGLGPAOAL\
    O.proto\"\xe7\x01\n\x14EntityBuffChangeInfo\x12*\n\x11attacked_group_id\
    \x18\x04\x20\x01(\rR\x0fattackedGroupId\x12$\n\x06reason\x18\n\x20\x01(\
    \x0e2\x0c.CAGLGPAOALOR\x06reason\x12\x1b\n\tentity_id\x18\x08\x20\x01(\r\
    R\x08entityId\x12-\n\x0bPCJLGHBIJCM\x18\x02\x20\x01(\x0b2\t.BuffInfoH\0R\
    \x0bPCJLGHBIJCM\x12\"\n\x0bHCAHEKMGEAN\x18\x05\x20\x01(\rH\0R\x0bHCAHEKM\
    GEANB\r\n\x0bKFELKJLDKEHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::BuffInfo::file_descriptor().clone());
            deps.push(super::CAGLGPAOALO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EntityBuffChangeInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
