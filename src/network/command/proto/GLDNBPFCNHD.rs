// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GLDNBPFCNHD.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:GLDNBPFCNHD)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GLDNBPFCNHD {
    // message fields
    // @@protoc_insertion_point(field:GLDNBPFCNHD.FMKDIFNJAJC)
    pub FMKDIFNJAJC: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.KNCHEHIIJNN)
    pub KNCHEHIIJNN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.FOMBHJKDHGO)
    pub FOMBHJKDHGO: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.NKHPCKEGPCL)
    pub NKHPCKEGPCL: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.FJKBAIMDPEP)
    pub FJKBAIMDPEP: bool,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.DNDJKDFHEPE)
    pub DNDJKDFHEPE: ::protobuf::EnumOrUnknown<super::IMPKPKAMIAF::IMPKPKAMIAF>,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.HLIEAMPLIPP)
    pub HLIEAMPLIPP: ::std::vec::Vec<super::DCDNIAJCEHN::DCDNIAJCEHN>,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.OMKKPGFJHFE)
    pub OMKKPGFJHFE: bool,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.AINLMGDNHIB)
    pub AINLMGDNHIB: ::std::vec::Vec<super::DCDNIAJCEHN::DCDNIAJCEHN>,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.EEFCBBKKFLC)
    pub EEFCBBKKFLC: f32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.JLDCFLKCBLD)
    pub JLDCFLKCBLD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.queue_position)
    pub queue_position: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.HMFFHGBKOGL)
    pub HMFFHGBKOGL: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.EHCJCILCNOP)
    pub EHCJCILCNOP: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.KJGDKNJFCPG)
    pub KJGDKNJFCPG: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.extra_id)
    pub extra_id: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.DHELBCIMLGA)
    pub DHELBCIMLGA: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.IEPGCLGKHEG)
    pub IEPGCLGKHEG: u32,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.DPOOAPKPCHF)
    pub DPOOAPKPCHF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GLDNBPFCNHD.PMANBPLFLKL)
    pub PMANBPLFLKL: bool,
    // special fields
    // @@protoc_insertion_point(special_field:GLDNBPFCNHD.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GLDNBPFCNHD {
    fn default() -> &'a GLDNBPFCNHD {
        <GLDNBPFCNHD as ::protobuf::Message>::default_instance()
    }
}

impl GLDNBPFCNHD {
    pub fn new() -> GLDNBPFCNHD {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(20);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMKDIFNJAJC",
            |m: &GLDNBPFCNHD| { &m.FMKDIFNJAJC },
            |m: &mut GLDNBPFCNHD| { &mut m.FMKDIFNJAJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KNCHEHIIJNN",
            |m: &GLDNBPFCNHD| { &m.KNCHEHIIJNN },
            |m: &mut GLDNBPFCNHD| { &mut m.KNCHEHIIJNN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FOMBHJKDHGO",
            |m: &GLDNBPFCNHD| { &m.FOMBHJKDHGO },
            |m: &mut GLDNBPFCNHD| { &mut m.FOMBHJKDHGO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NKHPCKEGPCL",
            |m: &GLDNBPFCNHD| { &m.NKHPCKEGPCL },
            |m: &mut GLDNBPFCNHD| { &mut m.NKHPCKEGPCL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FJKBAIMDPEP",
            |m: &GLDNBPFCNHD| { &m.FJKBAIMDPEP },
            |m: &mut GLDNBPFCNHD| { &mut m.FJKBAIMDPEP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DNDJKDFHEPE",
            |m: &GLDNBPFCNHD| { &m.DNDJKDFHEPE },
            |m: &mut GLDNBPFCNHD| { &mut m.DNDJKDFHEPE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HLIEAMPLIPP",
            |m: &GLDNBPFCNHD| { &m.HLIEAMPLIPP },
            |m: &mut GLDNBPFCNHD| { &mut m.HLIEAMPLIPP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OMKKPGFJHFE",
            |m: &GLDNBPFCNHD| { &m.OMKKPGFJHFE },
            |m: &mut GLDNBPFCNHD| { &mut m.OMKKPGFJHFE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AINLMGDNHIB",
            |m: &GLDNBPFCNHD| { &m.AINLMGDNHIB },
            |m: &mut GLDNBPFCNHD| { &mut m.AINLMGDNHIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EEFCBBKKFLC",
            |m: &GLDNBPFCNHD| { &m.EEFCBBKKFLC },
            |m: &mut GLDNBPFCNHD| { &mut m.EEFCBBKKFLC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JLDCFLKCBLD",
            |m: &GLDNBPFCNHD| { &m.JLDCFLKCBLD },
            |m: &mut GLDNBPFCNHD| { &mut m.JLDCFLKCBLD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "queue_position",
            |m: &GLDNBPFCNHD| { &m.queue_position },
            |m: &mut GLDNBPFCNHD| { &mut m.queue_position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HMFFHGBKOGL",
            |m: &GLDNBPFCNHD| { &m.HMFFHGBKOGL },
            |m: &mut GLDNBPFCNHD| { &mut m.HMFFHGBKOGL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EHCJCILCNOP",
            |m: &GLDNBPFCNHD| { &m.EHCJCILCNOP },
            |m: &mut GLDNBPFCNHD| { &mut m.EHCJCILCNOP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KJGDKNJFCPG",
            |m: &GLDNBPFCNHD| { &m.KJGDKNJFCPG },
            |m: &mut GLDNBPFCNHD| { &mut m.KJGDKNJFCPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extra_id",
            |m: &GLDNBPFCNHD| { &m.extra_id },
            |m: &mut GLDNBPFCNHD| { &mut m.extra_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DHELBCIMLGA",
            |m: &GLDNBPFCNHD| { &m.DHELBCIMLGA },
            |m: &mut GLDNBPFCNHD| { &mut m.DHELBCIMLGA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IEPGCLGKHEG",
            |m: &GLDNBPFCNHD| { &m.IEPGCLGKHEG },
            |m: &mut GLDNBPFCNHD| { &mut m.IEPGCLGKHEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DPOOAPKPCHF",
            |m: &GLDNBPFCNHD| { &m.DPOOAPKPCHF },
            |m: &mut GLDNBPFCNHD| { &mut m.DPOOAPKPCHF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PMANBPLFLKL",
            |m: &GLDNBPFCNHD| { &m.PMANBPLFLKL },
            |m: &mut GLDNBPFCNHD| { &mut m.PMANBPLFLKL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GLDNBPFCNHD>(
            "GLDNBPFCNHD",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GLDNBPFCNHD {
    const NAME: &'static str = "GLDNBPFCNHD";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.FMKDIFNJAJC = is.read_uint32()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.KNCHEHIIJNN)?;
                },
                96 => {
                    self.KNCHEHIIJNN.push(is.read_uint32()?);
                },
                9480 => {
                    self.FOMBHJKDHGO = is.read_uint32()?;
                },
                4656 => {
                    self.NKHPCKEGPCL = is.read_uint32()?;
                },
                88 => {
                    self.FJKBAIMDPEP = is.read_bool()?;
                },
                32 => {
                    self.DNDJKDFHEPE = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.HLIEAMPLIPP.push(is.read_message()?);
                },
                4104 => {
                    self.OMKKPGFJHFE = is.read_bool()?;
                },
                12746 => {
                    self.AINLMGDNHIB.push(is.read_message()?);
                },
                69 => {
                    self.EEFCBBKKFLC = is.read_float()?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.JLDCFLKCBLD)?;
                },
                56 => {
                    self.JLDCFLKCBLD.push(is.read_uint32()?);
                },
                72 => {
                    self.queue_position = is.read_uint32()?;
                },
                80 => {
                    self.HMFFHGBKOGL = is.read_uint32()?;
                },
                112 => {
                    self.EHCJCILCNOP = is.read_uint32()?;
                },
                120 => {
                    self.KJGDKNJFCPG = is.read_uint32()?;
                },
                8 => {
                    self.extra_id = is.read_uint32()?;
                },
                16 => {
                    self.DHELBCIMLGA = is.read_uint32()?;
                },
                9328 => {
                    self.IEPGCLGKHEG = is.read_uint32()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.DPOOAPKPCHF)?;
                },
                40 => {
                    self.DPOOAPKPCHF.push(is.read_uint32()?);
                },
                104 => {
                    self.PMANBPLFLKL = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.FMKDIFNJAJC != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.FMKDIFNJAJC);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(12, &self.KNCHEHIIJNN);
        if self.FOMBHJKDHGO != 0 {
            my_size += ::protobuf::rt::uint32_size(1185, self.FOMBHJKDHGO);
        }
        if self.NKHPCKEGPCL != 0 {
            my_size += ::protobuf::rt::uint32_size(582, self.NKHPCKEGPCL);
        }
        if self.FJKBAIMDPEP != false {
            my_size += 1 + 1;
        }
        if self.DNDJKDFHEPE != ::protobuf::EnumOrUnknown::new(super::IMPKPKAMIAF::IMPKPKAMIAF::MARBLE_SYNC_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(4, self.DNDJKDFHEPE.value());
        }
        for value in &self.HLIEAMPLIPP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.OMKKPGFJHFE != false {
            my_size += 2 + 1;
        }
        for value in &self.AINLMGDNHIB {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.EEFCBBKKFLC != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(7, &self.JLDCFLKCBLD);
        if self.queue_position != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.queue_position);
        }
        if self.HMFFHGBKOGL != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.HMFFHGBKOGL);
        }
        if self.EHCJCILCNOP != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.EHCJCILCNOP);
        }
        if self.KJGDKNJFCPG != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.KJGDKNJFCPG);
        }
        if self.extra_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.extra_id);
        }
        if self.DHELBCIMLGA != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.DHELBCIMLGA);
        }
        if self.IEPGCLGKHEG != 0 {
            my_size += ::protobuf::rt::uint32_size(1166, self.IEPGCLGKHEG);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(5, &self.DPOOAPKPCHF);
        if self.PMANBPLFLKL != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.FMKDIFNJAJC != 0 {
            os.write_uint32(6, self.FMKDIFNJAJC)?;
        }
        os.write_repeated_packed_uint32(12, &self.KNCHEHIIJNN)?;
        if self.FOMBHJKDHGO != 0 {
            os.write_uint32(1185, self.FOMBHJKDHGO)?;
        }
        if self.NKHPCKEGPCL != 0 {
            os.write_uint32(582, self.NKHPCKEGPCL)?;
        }
        if self.FJKBAIMDPEP != false {
            os.write_bool(11, self.FJKBAIMDPEP)?;
        }
        if self.DNDJKDFHEPE != ::protobuf::EnumOrUnknown::new(super::IMPKPKAMIAF::IMPKPKAMIAF::MARBLE_SYNC_TYPE_NONE) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.DNDJKDFHEPE))?;
        }
        for v in &self.HLIEAMPLIPP {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.OMKKPGFJHFE != false {
            os.write_bool(513, self.OMKKPGFJHFE)?;
        }
        for v in &self.AINLMGDNHIB {
            ::protobuf::rt::write_message_field_with_cached_size(1593, v, os)?;
        };
        if self.EEFCBBKKFLC != 0. {
            os.write_float(8, self.EEFCBBKKFLC)?;
        }
        os.write_repeated_packed_uint32(7, &self.JLDCFLKCBLD)?;
        if self.queue_position != 0 {
            os.write_uint32(9, self.queue_position)?;
        }
        if self.HMFFHGBKOGL != 0 {
            os.write_uint32(10, self.HMFFHGBKOGL)?;
        }
        if self.EHCJCILCNOP != 0 {
            os.write_uint32(14, self.EHCJCILCNOP)?;
        }
        if self.KJGDKNJFCPG != 0 {
            os.write_uint32(15, self.KJGDKNJFCPG)?;
        }
        if self.extra_id != 0 {
            os.write_uint32(1, self.extra_id)?;
        }
        if self.DHELBCIMLGA != 0 {
            os.write_uint32(2, self.DHELBCIMLGA)?;
        }
        if self.IEPGCLGKHEG != 0 {
            os.write_uint32(1166, self.IEPGCLGKHEG)?;
        }
        os.write_repeated_packed_uint32(5, &self.DPOOAPKPCHF)?;
        if self.PMANBPLFLKL != false {
            os.write_bool(13, self.PMANBPLFLKL)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GLDNBPFCNHD {
        GLDNBPFCNHD::new()
    }

    fn clear(&mut self) {
        self.FMKDIFNJAJC = 0;
        self.KNCHEHIIJNN.clear();
        self.FOMBHJKDHGO = 0;
        self.NKHPCKEGPCL = 0;
        self.FJKBAIMDPEP = false;
        self.DNDJKDFHEPE = ::protobuf::EnumOrUnknown::new(super::IMPKPKAMIAF::IMPKPKAMIAF::MARBLE_SYNC_TYPE_NONE);
        self.HLIEAMPLIPP.clear();
        self.OMKKPGFJHFE = false;
        self.AINLMGDNHIB.clear();
        self.EEFCBBKKFLC = 0.;
        self.JLDCFLKCBLD.clear();
        self.queue_position = 0;
        self.HMFFHGBKOGL = 0;
        self.EHCJCILCNOP = 0;
        self.KJGDKNJFCPG = 0;
        self.extra_id = 0;
        self.DHELBCIMLGA = 0;
        self.IEPGCLGKHEG = 0;
        self.DPOOAPKPCHF.clear();
        self.PMANBPLFLKL = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GLDNBPFCNHD {
        static instance: GLDNBPFCNHD = GLDNBPFCNHD {
            FMKDIFNJAJC: 0,
            KNCHEHIIJNN: ::std::vec::Vec::new(),
            FOMBHJKDHGO: 0,
            NKHPCKEGPCL: 0,
            FJKBAIMDPEP: false,
            DNDJKDFHEPE: ::protobuf::EnumOrUnknown::from_i32(0),
            HLIEAMPLIPP: ::std::vec::Vec::new(),
            OMKKPGFJHFE: false,
            AINLMGDNHIB: ::std::vec::Vec::new(),
            EEFCBBKKFLC: 0.,
            JLDCFLKCBLD: ::std::vec::Vec::new(),
            queue_position: 0,
            HMFFHGBKOGL: 0,
            EHCJCILCNOP: 0,
            KJGDKNJFCPG: 0,
            extra_id: 0,
            DHELBCIMLGA: 0,
            IEPGCLGKHEG: 0,
            DPOOAPKPCHF: ::std::vec::Vec::new(),
            PMANBPLFLKL: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GLDNBPFCNHD {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GLDNBPFCNHD").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GLDNBPFCNHD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GLDNBPFCNHD {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GLDNBPFCNHD.proto\x1a\x11DCDNIAJCEHN.proto\x1a\x11IMPKPKAMIAF.prot\
    o\"\xe2\x05\n\x0bGLDNBPFCNHD\x12\x20\n\x0bFMKDIFNJAJC\x18\x06\x20\x01(\r\
    R\x0bFMKDIFNJAJC\x12\x20\n\x0bKNCHEHIIJNN\x18\x0c\x20\x03(\rR\x0bKNCHEHI\
    IJNN\x12!\n\x0bFOMBHJKDHGO\x18\xa1\t\x20\x01(\rR\x0bFOMBHJKDHGO\x12!\n\
    \x0bNKHPCKEGPCL\x18\xc6\x04\x20\x01(\rR\x0bNKHPCKEGPCL\x12\x20\n\x0bFJKB\
    AIMDPEP\x18\x0b\x20\x01(\x08R\x0bFJKBAIMDPEP\x12.\n\x0bDNDJKDFHEPE\x18\
    \x04\x20\x01(\x0e2\x0c.IMPKPKAMIAFR\x0bDNDJKDFHEPE\x12.\n\x0bHLIEAMPLIPP\
    \x18\x03\x20\x03(\x0b2\x0c.DCDNIAJCEHNR\x0bHLIEAMPLIPP\x12!\n\x0bOMKKPGF\
    JHFE\x18\x81\x04\x20\x01(\x08R\x0bOMKKPGFJHFE\x12/\n\x0bAINLMGDNHIB\x18\
    \xb9\x0c\x20\x03(\x0b2\x0c.DCDNIAJCEHNR\x0bAINLMGDNHIB\x12\x20\n\x0bEEFC\
    BBKKFLC\x18\x08\x20\x01(\x02R\x0bEEFCBBKKFLC\x12\x20\n\x0bJLDCFLKCBLD\
    \x18\x07\x20\x03(\rR\x0bJLDCFLKCBLD\x12%\n\x0equeue_position\x18\t\x20\
    \x01(\rR\rqueuePosition\x12\x20\n\x0bHMFFHGBKOGL\x18\n\x20\x01(\rR\x0bHM\
    FFHGBKOGL\x12\x20\n\x0bEHCJCILCNOP\x18\x0e\x20\x01(\rR\x0bEHCJCILCNOP\
    \x12\x20\n\x0bKJGDKNJFCPG\x18\x0f\x20\x01(\rR\x0bKJGDKNJFCPG\x12\x19\n\
    \x08extra_id\x18\x01\x20\x01(\rR\x07extraId\x12\x20\n\x0bDHELBCIMLGA\x18\
    \x02\x20\x01(\rR\x0bDHELBCIMLGA\x12!\n\x0bIEPGCLGKHEG\x18\x8e\t\x20\x01(\
    \rR\x0bIEPGCLGKHEG\x12\x20\n\x0bDPOOAPKPCHF\x18\x05\x20\x03(\rR\x0bDPOOA\
    PKPCHF\x12\x20\n\x0bPMANBPLFLKL\x18\r\x20\x01(\x08R\x0bPMANBPLFLKLb\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::DCDNIAJCEHN::file_descriptor().clone());
            deps.push(super::IMPKPKAMIAF::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GLDNBPFCNHD::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
