// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerSyncScNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PlayerSyncScNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerSyncScNotify {
    // message fields
    // @@protoc_insertion_point(field:PlayerSyncScNotify.total_achievement_exp)
    pub total_achievement_exp: u32,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.OLFLKCBBJOH)
    pub OLFLKCBBJOH: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.multi_path_avatar_type_info_list)
    pub multi_path_avatar_type_info_list: ::std::vec::Vec<super::MultiPathAvatarTypeInfo::MultiPathAvatarTypeInfo>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.OMJOPKGJPLG)
    pub OMJOPKGJPLG: ::protobuf::MessageField<super::DMBMPAHKHLA::DMBMPAHKHLA>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.relic_list)
    pub relic_list: ::std::vec::Vec<super::Relic::Relic>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.equipment_list)
    pub equipment_list: ::std::vec::Vec<super::Equipment::Equipment>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.IGGOGFJFPDJ)
    pub IGGOGFJFPDJ: ::protobuf::MessageField<super::BLPMHFGIOAC::BLPMHFGIOAC>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.material_list)
    pub material_list: ::std::vec::Vec<super::Material::Material>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.basic_info)
    pub basic_info: ::protobuf::MessageField<super::BasicInfo::BasicInfo>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.board_data_sync)
    pub board_data_sync: ::protobuf::MessageField<super::BoardDataSync::BoardDataSync>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.quest_list)
    pub quest_list: ::std::vec::Vec<super::Quest::Quest>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.FCOKFFEAPMI)
    pub FCOKFFEAPMI: ::std::vec::Vec<super::Material::Material>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.avatar_sync)
    pub avatar_sync: ::protobuf::MessageField<super::AvatarSync::AvatarSync>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.HLINMKBDKNC)
    pub HLINMKBDKNC: ::std::vec::Vec<super::WaitDelResource::WaitDelResource>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.BKEBJFIPJEH)
    pub BKEBJFIPJEH: ::protobuf::MessageField<super::LPFMHAJHDMM::LPFMHAJHDMM>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.del_relic_list)
    pub del_relic_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.mission_sync)
    pub mission_sync: ::protobuf::MessageField<super::MissionSync::MissionSync>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.MJOKLHFPGAD)
    pub MJOKLHFPGAD: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.IGIPEIMGEAA)
    pub IGIPEIMGEAA: ::std::vec::Vec<super::GKDIHIFFHFD::GKDIHIFFHFD>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.del_equipment_list)
    pub del_equipment_list: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerSyncScNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerSyncScNotify {
    fn default() -> &'a PlayerSyncScNotify {
        <PlayerSyncScNotify as ::protobuf::Message>::default_instance()
    }
}

impl PlayerSyncScNotify {
    pub fn new() -> PlayerSyncScNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(20);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_achievement_exp",
            |m: &PlayerSyncScNotify| { &m.total_achievement_exp },
            |m: &mut PlayerSyncScNotify| { &mut m.total_achievement_exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OLFLKCBBJOH",
            |m: &PlayerSyncScNotify| { &m.OLFLKCBBJOH },
            |m: &mut PlayerSyncScNotify| { &mut m.OLFLKCBBJOH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "multi_path_avatar_type_info_list",
            |m: &PlayerSyncScNotify| { &m.multi_path_avatar_type_info_list },
            |m: &mut PlayerSyncScNotify| { &mut m.multi_path_avatar_type_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DMBMPAHKHLA::DMBMPAHKHLA>(
            "OMJOPKGJPLG",
            |m: &PlayerSyncScNotify| { &m.OMJOPKGJPLG },
            |m: &mut PlayerSyncScNotify| { &mut m.OMJOPKGJPLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "relic_list",
            |m: &PlayerSyncScNotify| { &m.relic_list },
            |m: &mut PlayerSyncScNotify| { &mut m.relic_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "equipment_list",
            |m: &PlayerSyncScNotify| { &m.equipment_list },
            |m: &mut PlayerSyncScNotify| { &mut m.equipment_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BLPMHFGIOAC::BLPMHFGIOAC>(
            "IGGOGFJFPDJ",
            |m: &PlayerSyncScNotify| { &m.IGGOGFJFPDJ },
            |m: &mut PlayerSyncScNotify| { &mut m.IGGOGFJFPDJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "material_list",
            |m: &PlayerSyncScNotify| { &m.material_list },
            |m: &mut PlayerSyncScNotify| { &mut m.material_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BasicInfo::BasicInfo>(
            "basic_info",
            |m: &PlayerSyncScNotify| { &m.basic_info },
            |m: &mut PlayerSyncScNotify| { &mut m.basic_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BoardDataSync::BoardDataSync>(
            "board_data_sync",
            |m: &PlayerSyncScNotify| { &m.board_data_sync },
            |m: &mut PlayerSyncScNotify| { &mut m.board_data_sync },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "quest_list",
            |m: &PlayerSyncScNotify| { &m.quest_list },
            |m: &mut PlayerSyncScNotify| { &mut m.quest_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FCOKFFEAPMI",
            |m: &PlayerSyncScNotify| { &m.FCOKFFEAPMI },
            |m: &mut PlayerSyncScNotify| { &mut m.FCOKFFEAPMI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AvatarSync::AvatarSync>(
            "avatar_sync",
            |m: &PlayerSyncScNotify| { &m.avatar_sync },
            |m: &mut PlayerSyncScNotify| { &mut m.avatar_sync },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HLINMKBDKNC",
            |m: &PlayerSyncScNotify| { &m.HLINMKBDKNC },
            |m: &mut PlayerSyncScNotify| { &mut m.HLINMKBDKNC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LPFMHAJHDMM::LPFMHAJHDMM>(
            "BKEBJFIPJEH",
            |m: &PlayerSyncScNotify| { &m.BKEBJFIPJEH },
            |m: &mut PlayerSyncScNotify| { &mut m.BKEBJFIPJEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "del_relic_list",
            |m: &PlayerSyncScNotify| { &m.del_relic_list },
            |m: &mut PlayerSyncScNotify| { &mut m.del_relic_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MissionSync::MissionSync>(
            "mission_sync",
            |m: &PlayerSyncScNotify| { &m.mission_sync },
            |m: &mut PlayerSyncScNotify| { &mut m.mission_sync },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "MJOKLHFPGAD",
            |m: &PlayerSyncScNotify| { &m.MJOKLHFPGAD },
            |m: &mut PlayerSyncScNotify| { &mut m.MJOKLHFPGAD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IGIPEIMGEAA",
            |m: &PlayerSyncScNotify| { &m.IGIPEIMGEAA },
            |m: &mut PlayerSyncScNotify| { &mut m.IGIPEIMGEAA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "del_equipment_list",
            |m: &PlayerSyncScNotify| { &m.del_equipment_list },
            |m: &mut PlayerSyncScNotify| { &mut m.del_equipment_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerSyncScNotify>(
            "PlayerSyncScNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerSyncScNotify {
    const NAME: &'static str = "PlayerSyncScNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9168 => {
                    self.total_achievement_exp = is.read_uint32()?;
                },
                15370 => {
                    is.read_repeated_packed_uint32_into(&mut self.OLFLKCBBJOH)?;
                },
                15368 => {
                    self.OLFLKCBBJOH.push(is.read_uint32()?);
                },
                11602 => {
                    self.multi_path_avatar_type_info_list.push(is.read_message()?);
                },
                16194 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OMJOPKGJPLG)?;
                },
                82 => {
                    self.relic_list.push(is.read_message()?);
                },
                74 => {
                    self.equipment_list.push(is.read_message()?);
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IGGOGFJFPDJ)?;
                },
                122 => {
                    self.material_list.push(is.read_message()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.basic_info)?;
                },
                16146 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.board_data_sync)?;
                },
                26 => {
                    self.quest_list.push(is.read_message()?);
                },
                12202 => {
                    self.FCOKFFEAPMI.push(is.read_message()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.avatar_sync)?;
                },
                50 => {
                    self.HLINMKBDKNC.push(is.read_message()?);
                },
                1474 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BKEBJFIPJEH)?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.del_relic_list)?;
                },
                56 => {
                    self.del_relic_list.push(is.read_uint32()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mission_sync)?;
                },
                9322 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MJOKLHFPGAD)?;
                },
                5890 => {
                    self.IGIPEIMGEAA.push(is.read_message()?);
                },
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.del_equipment_list)?;
                },
                112 => {
                    self.del_equipment_list.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.total_achievement_exp != 0 {
            my_size += ::protobuf::rt::uint32_size(1146, self.total_achievement_exp);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(1921, &self.OLFLKCBBJOH);
        for value in &self.multi_path_avatar_type_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.OMJOPKGJPLG.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.relic_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.equipment_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.IGGOGFJFPDJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.material_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.basic_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.board_data_sync.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.quest_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.FCOKFFEAPMI {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.avatar_sync.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.HLINMKBDKNC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.BKEBJFIPJEH.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(7, &self.del_relic_list);
        if let Some(v) = self.mission_sync.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MJOKLHFPGAD.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.IGIPEIMGEAA {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(14, &self.del_equipment_list);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.total_achievement_exp != 0 {
            os.write_uint32(1146, self.total_achievement_exp)?;
        }
        os.write_repeated_packed_uint32(1921, &self.OLFLKCBBJOH)?;
        for v in &self.multi_path_avatar_type_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(1450, v, os)?;
        };
        if let Some(v) = self.OMJOPKGJPLG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2024, v, os)?;
        }
        for v in &self.relic_list {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        for v in &self.equipment_list {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if let Some(v) = self.IGGOGFJFPDJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        for v in &self.material_list {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if let Some(v) = self.basic_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.board_data_sync.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2018, v, os)?;
        }
        for v in &self.quest_list {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.FCOKFFEAPMI {
            ::protobuf::rt::write_message_field_with_cached_size(1525, v, os)?;
        };
        if let Some(v) = self.avatar_sync.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        for v in &self.HLINMKBDKNC {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.BKEBJFIPJEH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(184, v, os)?;
        }
        os.write_repeated_packed_uint32(7, &self.del_relic_list)?;
        if let Some(v) = self.mission_sync.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.MJOKLHFPGAD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1165, v, os)?;
        }
        for v in &self.IGIPEIMGEAA {
            ::protobuf::rt::write_message_field_with_cached_size(736, v, os)?;
        };
        os.write_repeated_packed_uint32(14, &self.del_equipment_list)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerSyncScNotify {
        PlayerSyncScNotify::new()
    }

    fn clear(&mut self) {
        self.total_achievement_exp = 0;
        self.OLFLKCBBJOH.clear();
        self.multi_path_avatar_type_info_list.clear();
        self.OMJOPKGJPLG.clear();
        self.relic_list.clear();
        self.equipment_list.clear();
        self.IGGOGFJFPDJ.clear();
        self.material_list.clear();
        self.basic_info.clear();
        self.board_data_sync.clear();
        self.quest_list.clear();
        self.FCOKFFEAPMI.clear();
        self.avatar_sync.clear();
        self.HLINMKBDKNC.clear();
        self.BKEBJFIPJEH.clear();
        self.del_relic_list.clear();
        self.mission_sync.clear();
        self.MJOKLHFPGAD.clear();
        self.IGIPEIMGEAA.clear();
        self.del_equipment_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerSyncScNotify {
        static instance: PlayerSyncScNotify = PlayerSyncScNotify {
            total_achievement_exp: 0,
            OLFLKCBBJOH: ::std::vec::Vec::new(),
            multi_path_avatar_type_info_list: ::std::vec::Vec::new(),
            OMJOPKGJPLG: ::protobuf::MessageField::none(),
            relic_list: ::std::vec::Vec::new(),
            equipment_list: ::std::vec::Vec::new(),
            IGGOGFJFPDJ: ::protobuf::MessageField::none(),
            material_list: ::std::vec::Vec::new(),
            basic_info: ::protobuf::MessageField::none(),
            board_data_sync: ::protobuf::MessageField::none(),
            quest_list: ::std::vec::Vec::new(),
            FCOKFFEAPMI: ::std::vec::Vec::new(),
            avatar_sync: ::protobuf::MessageField::none(),
            HLINMKBDKNC: ::std::vec::Vec::new(),
            BKEBJFIPJEH: ::protobuf::MessageField::none(),
            del_relic_list: ::std::vec::Vec::new(),
            mission_sync: ::protobuf::MessageField::none(),
            MJOKLHFPGAD: ::protobuf::MessageField::none(),
            IGIPEIMGEAA: ::std::vec::Vec::new(),
            del_equipment_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerSyncScNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerSyncScNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerSyncScNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerSyncScNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18PlayerSyncScNotify.proto\x1a\x10AvatarSync.proto\x1a\x11BLPMHFGIOA\
    C.proto\x1a\x0fBasicInfo.proto\x1a\x13BoardDataSync.proto\x1a\x11DMBMPAH\
    KHLA.proto\x1a\x0fEquipment.proto\x1a\x11GKDIHIFFHFD.proto\x1a\x0eItemLi\
    st.proto\x1a\x11LPFMHAJHDMM.proto\x1a\x0eMaterial.proto\x1a\x11MissionSy\
    nc.proto\x1a\x1dMultiPathAvatarTypeInfo.proto\x1a\x0bQuest.proto\x1a\x0b\
    Relic.proto\x1a\x15WaitDelResource.proto\"\xe9\x07\n\x12PlayerSyncScNoti\
    fy\x123\n\x15total_achievement_exp\x18\xfa\x08\x20\x01(\rR\x13totalAchie\
    vementExp\x12!\n\x0bOLFLKCBBJOH\x18\x81\x0f\x20\x03(\rR\x0bOLFLKCBBJOH\
    \x12`\n\x20multi_path_avatar_type_info_list\x18\xaa\x0b\x20\x03(\x0b2\
    \x18.MultiPathAvatarTypeInfoR\x1bmultiPathAvatarTypeInfoList\x12/\n\x0bO\
    MJOPKGJPLG\x18\xe8\x0f\x20\x01(\x0b2\x0c.DMBMPAHKHLAR\x0bOMJOPKGJPLG\x12\
    %\n\nrelic_list\x18\n\x20\x03(\x0b2\x06.RelicR\trelicList\x121\n\x0eequi\
    pment_list\x18\t\x20\x03(\x0b2\n.EquipmentR\requipmentList\x12.\n\x0bIGG\
    OGFJFPDJ\x18\x0b\x20\x01(\x0b2\x0c.BLPMHFGIOACR\x0bIGGOGFJFPDJ\x12.\n\rm\
    aterial_list\x18\x0f\x20\x03(\x0b2\t.MaterialR\x0cmaterialList\x12)\n\nb\
    asic_info\x18\x0c\x20\x01(\x0b2\n.BasicInfoR\tbasicInfo\x127\n\x0fboard_\
    data_sync\x18\xe2\x0f\x20\x01(\x0b2\x0e.BoardDataSyncR\rboardDataSync\
    \x12%\n\nquest_list\x18\x03\x20\x03(\x0b2\x06.QuestR\tquestList\x12,\n\
    \x0bFCOKFFEAPMI\x18\xf5\x0b\x20\x03(\x0b2\t.MaterialR\x0bFCOKFFEAPMI\x12\
    ,\n\x0bavatar_sync\x18\x05\x20\x01(\x0b2\x0b.AvatarSyncR\navatarSync\x12\
    2\n\x0bHLINMKBDKNC\x18\x06\x20\x03(\x0b2\x10.WaitDelResourceR\x0bHLINMKB\
    DKNC\x12/\n\x0bBKEBJFIPJEH\x18\xb8\x01\x20\x01(\x0b2\x0c.LPFMHAJHDMMR\
    \x0bBKEBJFIPJEH\x12$\n\x0edel_relic_list\x18\x07\x20\x03(\rR\x0cdelRelic\
    List\x12/\n\x0cmission_sync\x18\x08\x20\x01(\x0b2\x0c.MissionSyncR\x0bmi\
    ssionSync\x12,\n\x0bMJOKLHFPGAD\x18\x8d\t\x20\x01(\x0b2\t.ItemListR\x0bM\
    JOKLHFPGAD\x12/\n\x0bIGIPEIMGEAA\x18\xe0\x05\x20\x03(\x0b2\x0c.GKDIHIFFH\
    FDR\x0bIGIPEIMGEAA\x12,\n\x12del_equipment_list\x18\x0e\x20\x03(\rR\x10d\
    elEquipmentListb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(15);
            deps.push(super::AvatarSync::file_descriptor().clone());
            deps.push(super::BLPMHFGIOAC::file_descriptor().clone());
            deps.push(super::BasicInfo::file_descriptor().clone());
            deps.push(super::BoardDataSync::file_descriptor().clone());
            deps.push(super::DMBMPAHKHLA::file_descriptor().clone());
            deps.push(super::Equipment::file_descriptor().clone());
            deps.push(super::GKDIHIFFHFD::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            deps.push(super::LPFMHAJHDMM::file_descriptor().clone());
            deps.push(super::Material::file_descriptor().clone());
            deps.push(super::MissionSync::file_descriptor().clone());
            deps.push(super::MultiPathAvatarTypeInfo::file_descriptor().clone());
            deps.push(super::Quest::file_descriptor().clone());
            deps.push(super::Relic::file_descriptor().clone());
            deps.push(super::WaitDelResource::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerSyncScNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
