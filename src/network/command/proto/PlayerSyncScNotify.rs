// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerSyncScNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PlayerSyncScNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerSyncScNotify {
    // message fields
    // @@protoc_insertion_point(field:PlayerSyncScNotify.basic_module_sync)
    pub basic_module_sync: ::protobuf::MessageField<super::BasicModuleSync::BasicModuleSync>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.CGLEKFODMAG)
    pub CGLEKFODMAG: ::std::vec::Vec<super::NKDOHHODNNH::NKDOHHODNNH>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.IGIPEIMGEAA)
    pub IGIPEIMGEAA: ::std::vec::Vec<super::GKDIHIFFHFD::GKDIHIFFHFD>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.total_achievement_exp)
    pub total_achievement_exp: u32,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.basic_info)
    pub basic_info: ::protobuf::MessageField<super::PlayerBasicInfo::PlayerBasicInfo>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.OMJOPKGJPLG)
    pub OMJOPKGJPLG: ::protobuf::MessageField<super::DMBMPAHKHLA::DMBMPAHKHLA>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.equipment_list)
    pub equipment_list: ::std::vec::Vec<super::Equipment::Equipment>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.relic_list)
    pub relic_list: ::std::vec::Vec<super::Relic::Relic>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.wait_del_resource_list)
    pub wait_del_resource_list: ::std::vec::Vec<super::WaitDelResource::WaitDelResource>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.material_list)
    pub material_list: ::std::vec::Vec<super::Material::Material>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.multi_path_avatar_info_list)
    pub multi_path_avatar_info_list: ::std::vec::Vec<super::MultiPathAvatarInfo::MultiPathAvatarInfo>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.FCOKFFEAPMI)
    pub FCOKFFEAPMI: ::std::vec::Vec<super::Material::Material>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.playerboard_module_sync)
    pub playerboard_module_sync: ::protobuf::MessageField<super::PlayerBoardModuleSync::PlayerBoardModuleSync>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.sync_status)
    pub sync_status: ::protobuf::MessageField<super::SyncStatus::SyncStatus>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.avatar_sync)
    pub avatar_sync: ::protobuf::MessageField<super::AvatarSync::AvatarSync>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.MJOKLHFPGAD)
    pub MJOKLHFPGAD: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.quest_list)
    pub quest_list: ::std::vec::Vec<super::Quest::Quest>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.del_relic_list)
    pub del_relic_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.mission_sync)
    pub mission_sync: ::protobuf::MessageField<super::MissionSync::MissionSync>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.new_item_hint_list)
    pub new_item_hint_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.del_equipment_list)
    pub del_equipment_list: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerSyncScNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerSyncScNotify {
    fn default() -> &'a PlayerSyncScNotify {
        <PlayerSyncScNotify as ::protobuf::Message>::default_instance()
    }
}

impl PlayerSyncScNotify {
    pub fn new() -> PlayerSyncScNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(21);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BasicModuleSync::BasicModuleSync>(
            "basic_module_sync",
            |m: &PlayerSyncScNotify| { &m.basic_module_sync },
            |m: &mut PlayerSyncScNotify| { &mut m.basic_module_sync },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CGLEKFODMAG",
            |m: &PlayerSyncScNotify| { &m.CGLEKFODMAG },
            |m: &mut PlayerSyncScNotify| { &mut m.CGLEKFODMAG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IGIPEIMGEAA",
            |m: &PlayerSyncScNotify| { &m.IGIPEIMGEAA },
            |m: &mut PlayerSyncScNotify| { &mut m.IGIPEIMGEAA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_achievement_exp",
            |m: &PlayerSyncScNotify| { &m.total_achievement_exp },
            |m: &mut PlayerSyncScNotify| { &mut m.total_achievement_exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PlayerBasicInfo::PlayerBasicInfo>(
            "basic_info",
            |m: &PlayerSyncScNotify| { &m.basic_info },
            |m: &mut PlayerSyncScNotify| { &mut m.basic_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DMBMPAHKHLA::DMBMPAHKHLA>(
            "OMJOPKGJPLG",
            |m: &PlayerSyncScNotify| { &m.OMJOPKGJPLG },
            |m: &mut PlayerSyncScNotify| { &mut m.OMJOPKGJPLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "equipment_list",
            |m: &PlayerSyncScNotify| { &m.equipment_list },
            |m: &mut PlayerSyncScNotify| { &mut m.equipment_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "relic_list",
            |m: &PlayerSyncScNotify| { &m.relic_list },
            |m: &mut PlayerSyncScNotify| { &mut m.relic_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "wait_del_resource_list",
            |m: &PlayerSyncScNotify| { &m.wait_del_resource_list },
            |m: &mut PlayerSyncScNotify| { &mut m.wait_del_resource_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "material_list",
            |m: &PlayerSyncScNotify| { &m.material_list },
            |m: &mut PlayerSyncScNotify| { &mut m.material_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "multi_path_avatar_info_list",
            |m: &PlayerSyncScNotify| { &m.multi_path_avatar_info_list },
            |m: &mut PlayerSyncScNotify| { &mut m.multi_path_avatar_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FCOKFFEAPMI",
            |m: &PlayerSyncScNotify| { &m.FCOKFFEAPMI },
            |m: &mut PlayerSyncScNotify| { &mut m.FCOKFFEAPMI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PlayerBoardModuleSync::PlayerBoardModuleSync>(
            "playerboard_module_sync",
            |m: &PlayerSyncScNotify| { &m.playerboard_module_sync },
            |m: &mut PlayerSyncScNotify| { &mut m.playerboard_module_sync },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SyncStatus::SyncStatus>(
            "sync_status",
            |m: &PlayerSyncScNotify| { &m.sync_status },
            |m: &mut PlayerSyncScNotify| { &mut m.sync_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AvatarSync::AvatarSync>(
            "avatar_sync",
            |m: &PlayerSyncScNotify| { &m.avatar_sync },
            |m: &mut PlayerSyncScNotify| { &mut m.avatar_sync },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "MJOKLHFPGAD",
            |m: &PlayerSyncScNotify| { &m.MJOKLHFPGAD },
            |m: &mut PlayerSyncScNotify| { &mut m.MJOKLHFPGAD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "quest_list",
            |m: &PlayerSyncScNotify| { &m.quest_list },
            |m: &mut PlayerSyncScNotify| { &mut m.quest_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "del_relic_list",
            |m: &PlayerSyncScNotify| { &m.del_relic_list },
            |m: &mut PlayerSyncScNotify| { &mut m.del_relic_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MissionSync::MissionSync>(
            "mission_sync",
            |m: &PlayerSyncScNotify| { &m.mission_sync },
            |m: &mut PlayerSyncScNotify| { &mut m.mission_sync },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "new_item_hint_list",
            |m: &PlayerSyncScNotify| { &m.new_item_hint_list },
            |m: &mut PlayerSyncScNotify| { &mut m.new_item_hint_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "del_equipment_list",
            |m: &PlayerSyncScNotify| { &m.del_equipment_list },
            |m: &mut PlayerSyncScNotify| { &mut m.del_equipment_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerSyncScNotify>(
            "PlayerSyncScNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerSyncScNotify {
    const NAME: &'static str = "PlayerSyncScNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.basic_module_sync)?;
                },
                10490 => {
                    self.CGLEKFODMAG.push(is.read_message()?);
                },
                5674 => {
                    self.IGIPEIMGEAA.push(is.read_message()?);
                },
                3240 => {
                    self.total_achievement_exp = is.read_uint32()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.basic_info)?;
                },
                1226 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OMJOPKGJPLG)?;
                },
                114 => {
                    self.equipment_list.push(is.read_message()?);
                },
                26 => {
                    self.relic_list.push(is.read_message()?);
                },
                66 => {
                    self.wait_del_resource_list.push(is.read_message()?);
                },
                34 => {
                    self.material_list.push(is.read_message()?);
                },
                4394 => {
                    self.multi_path_avatar_info_list.push(is.read_message()?);
                },
                1994 => {
                    self.FCOKFFEAPMI.push(is.read_message()?);
                },
                15826 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.playerboard_module_sync)?;
                },
                9282 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sync_status)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.avatar_sync)?;
                },
                4058 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MJOKLHFPGAD)?;
                },
                10 => {
                    self.quest_list.push(is.read_message()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.del_relic_list)?;
                },
                16 => {
                    self.del_relic_list.push(is.read_uint32()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mission_sync)?;
                },
                11578 => {
                    is.read_repeated_packed_uint32_into(&mut self.new_item_hint_list)?;
                },
                11576 => {
                    self.new_item_hint_list.push(is.read_uint32()?);
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.del_equipment_list)?;
                },
                88 => {
                    self.del_equipment_list.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.basic_module_sync.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.CGLEKFODMAG {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.IGIPEIMGEAA {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.total_achievement_exp != 0 {
            my_size += ::protobuf::rt::uint32_size(405, self.total_achievement_exp);
        }
        if let Some(v) = self.basic_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OMJOPKGJPLG.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.equipment_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.relic_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.wait_del_resource_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.material_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.multi_path_avatar_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.FCOKFFEAPMI {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.playerboard_module_sync.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sync_status.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.avatar_sync.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MJOKLHFPGAD.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.quest_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(2, &self.del_relic_list);
        if let Some(v) = self.mission_sync.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(1447, &self.new_item_hint_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(11, &self.del_equipment_list);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.basic_module_sync.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.CGLEKFODMAG {
            ::protobuf::rt::write_message_field_with_cached_size(1311, v, os)?;
        };
        for v in &self.IGIPEIMGEAA {
            ::protobuf::rt::write_message_field_with_cached_size(709, v, os)?;
        };
        if self.total_achievement_exp != 0 {
            os.write_uint32(405, self.total_achievement_exp)?;
        }
        if let Some(v) = self.basic_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.OMJOPKGJPLG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(153, v, os)?;
        }
        for v in &self.equipment_list {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        for v in &self.relic_list {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.wait_del_resource_list {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.material_list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.multi_path_avatar_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(549, v, os)?;
        };
        for v in &self.FCOKFFEAPMI {
            ::protobuf::rt::write_message_field_with_cached_size(249, v, os)?;
        };
        if let Some(v) = self.playerboard_module_sync.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1978, v, os)?;
        }
        if let Some(v) = self.sync_status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1160, v, os)?;
        }
        if let Some(v) = self.avatar_sync.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.MJOKLHFPGAD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(507, v, os)?;
        }
        for v in &self.quest_list {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_repeated_packed_uint32(2, &self.del_relic_list)?;
        if let Some(v) = self.mission_sync.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        os.write_repeated_packed_uint32(1447, &self.new_item_hint_list)?;
        os.write_repeated_packed_uint32(11, &self.del_equipment_list)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerSyncScNotify {
        PlayerSyncScNotify::new()
    }

    fn clear(&mut self) {
        self.basic_module_sync.clear();
        self.CGLEKFODMAG.clear();
        self.IGIPEIMGEAA.clear();
        self.total_achievement_exp = 0;
        self.basic_info.clear();
        self.OMJOPKGJPLG.clear();
        self.equipment_list.clear();
        self.relic_list.clear();
        self.wait_del_resource_list.clear();
        self.material_list.clear();
        self.multi_path_avatar_info_list.clear();
        self.FCOKFFEAPMI.clear();
        self.playerboard_module_sync.clear();
        self.sync_status.clear();
        self.avatar_sync.clear();
        self.MJOKLHFPGAD.clear();
        self.quest_list.clear();
        self.del_relic_list.clear();
        self.mission_sync.clear();
        self.new_item_hint_list.clear();
        self.del_equipment_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerSyncScNotify {
        static instance: PlayerSyncScNotify = PlayerSyncScNotify {
            basic_module_sync: ::protobuf::MessageField::none(),
            CGLEKFODMAG: ::std::vec::Vec::new(),
            IGIPEIMGEAA: ::std::vec::Vec::new(),
            total_achievement_exp: 0,
            basic_info: ::protobuf::MessageField::none(),
            OMJOPKGJPLG: ::protobuf::MessageField::none(),
            equipment_list: ::std::vec::Vec::new(),
            relic_list: ::std::vec::Vec::new(),
            wait_del_resource_list: ::std::vec::Vec::new(),
            material_list: ::std::vec::Vec::new(),
            multi_path_avatar_info_list: ::std::vec::Vec::new(),
            FCOKFFEAPMI: ::std::vec::Vec::new(),
            playerboard_module_sync: ::protobuf::MessageField::none(),
            sync_status: ::protobuf::MessageField::none(),
            avatar_sync: ::protobuf::MessageField::none(),
            MJOKLHFPGAD: ::protobuf::MessageField::none(),
            quest_list: ::std::vec::Vec::new(),
            del_relic_list: ::std::vec::Vec::new(),
            mission_sync: ::protobuf::MessageField::none(),
            new_item_hint_list: ::std::vec::Vec::new(),
            del_equipment_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerSyncScNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerSyncScNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerSyncScNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerSyncScNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18PlayerSyncScNotify.proto\x1a\x10AvatarSync.proto\x1a\x15BasicModul\
    eSync.proto\x1a\x11DMBMPAHKHLA.proto\x1a\x0fEquipment.proto\x1a\x11GKDIH\
    IFFHFD.proto\x1a\x0eItemList.proto\x1a\x0eMaterial.proto\x1a\x11MissionS\
    ync.proto\x1a\x19MultiPathAvatarInfo.proto\x1a\x11NKDOHHODNNH.proto\x1a\
    \x15PlayerBasicInfo.proto\x1a\x1bPlayerBoardModuleSync.proto\x1a\x0bQues\
    t.proto\x1a\x0bRelic.proto\x1a\x10SyncStatus.proto\x1a\x15WaitDelResourc\
    e.proto\"\xd5\x08\n\x12PlayerSyncScNotify\x12<\n\x11basic_module_sync\
    \x18\n\x20\x01(\x0b2\x10.BasicModuleSyncR\x0fbasicModuleSync\x12/\n\x0bC\
    GLEKFODMAG\x18\x9f\n\x20\x03(\x0b2\x0c.NKDOHHODNNHR\x0bCGLEKFODMAG\x12/\
    \n\x0bIGIPEIMGEAA\x18\xc5\x05\x20\x03(\x0b2\x0c.GKDIHIFFHFDR\x0bIGIPEIMG\
    EAA\x123\n\x15total_achievement_exp\x18\x95\x03\x20\x01(\rR\x13totalAchi\
    evementExp\x12/\n\nbasic_info\x18\x05\x20\x01(\x0b2\x10.PlayerBasicInfoR\
    \tbasicInfo\x12/\n\x0bOMJOPKGJPLG\x18\x99\x01\x20\x01(\x0b2\x0c.DMBMPAHK\
    HLAR\x0bOMJOPKGJPLG\x121\n\x0eequipment_list\x18\x0e\x20\x03(\x0b2\n.Equ\
    ipmentR\requipmentList\x12%\n\nrelic_list\x18\x03\x20\x03(\x0b2\x06.Reli\
    cR\trelicList\x12E\n\x16wait_del_resource_list\x18\x08\x20\x03(\x0b2\x10\
    .WaitDelResourceR\x13waitDelResourceList\x12.\n\rmaterial_list\x18\x04\
    \x20\x03(\x0b2\t.MaterialR\x0cmaterialList\x12S\n\x1bmulti_path_avatar_i\
    nfo_list\x18\xa5\x04\x20\x03(\x0b2\x14.MultiPathAvatarInfoR\x17multiPath\
    AvatarInfoList\x12,\n\x0bFCOKFFEAPMI\x18\xf9\x01\x20\x03(\x0b2\t.Materia\
    lR\x0bFCOKFFEAPMI\x12O\n\x17playerboard_module_sync\x18\xba\x0f\x20\x01(\
    \x0b2\x16.PlayerBoardModuleSyncR\x15playerboardModuleSync\x12-\n\x0bsync\
    _status\x18\x88\t\x20\x01(\x0b2\x0b.SyncStatusR\nsyncStatus\x12,\n\x0bav\
    atar_sync\x18\r\x20\x01(\x0b2\x0b.AvatarSyncR\navatarSync\x12,\n\x0bMJOK\
    LHFPGAD\x18\xfb\x03\x20\x01(\x0b2\t.ItemListR\x0bMJOKLHFPGAD\x12%\n\nque\
    st_list\x18\x01\x20\x03(\x0b2\x06.QuestR\tquestList\x12$\n\x0edel_relic_\
    list\x18\x02\x20\x03(\rR\x0cdelRelicList\x12/\n\x0cmission_sync\x18\x0c\
    \x20\x01(\x0b2\x0c.MissionSyncR\x0bmissionSync\x12,\n\x12new_item_hint_l\
    ist\x18\xa7\x0b\x20\x03(\rR\x0fnewItemHintList\x12,\n\x12del_equipment_l\
    ist\x18\x0b\x20\x03(\rR\x10delEquipmentListb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(16);
            deps.push(super::AvatarSync::file_descriptor().clone());
            deps.push(super::BasicModuleSync::file_descriptor().clone());
            deps.push(super::DMBMPAHKHLA::file_descriptor().clone());
            deps.push(super::Equipment::file_descriptor().clone());
            deps.push(super::GKDIHIFFHFD::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            deps.push(super::Material::file_descriptor().clone());
            deps.push(super::MissionSync::file_descriptor().clone());
            deps.push(super::MultiPathAvatarInfo::file_descriptor().clone());
            deps.push(super::NKDOHHODNNH::file_descriptor().clone());
            deps.push(super::PlayerBasicInfo::file_descriptor().clone());
            deps.push(super::PlayerBoardModuleSync::file_descriptor().clone());
            deps.push(super::Quest::file_descriptor().clone());
            deps.push(super::Relic::file_descriptor().clone());
            deps.push(super::SyncStatus::file_descriptor().clone());
            deps.push(super::WaitDelResource::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerSyncScNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
