// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MEKDNIKFDNA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:MEKDNIKFDNA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MEKDNIKFDNA {
    // message fields
    // @@protoc_insertion_point(field:MEKDNIKFDNA.OGNEPBFPILH)
    pub OGNEPBFPILH: u32,
    // @@protoc_insertion_point(field:MEKDNIKFDNA.hp)
    pub hp: u32,
    // @@protoc_insertion_point(field:MEKDNIKFDNA.score_id)
    pub score_id: u32,
    // @@protoc_insertion_point(field:MEKDNIKFDNA.NMLFFOGBPOC)
    pub NMLFFOGBPOC: u32,
    // @@protoc_insertion_point(field:MEKDNIKFDNA.LDNBEIDJBHI)
    pub LDNBEIDJBHI: u32,
    // @@protoc_insertion_point(field:MEKDNIKFDNA.item_list)
    pub item_list: ::std::vec::Vec<super::BHGPHKLEHEC::BHGPHKLEHEC>,
    // @@protoc_insertion_point(field:MEKDNIKFDNA.state)
    pub state: ::protobuf::EnumOrUnknown<super::NPPNFPPENMC::NPPNFPPENMC>,
    // @@protoc_insertion_point(field:MEKDNIKFDNA.rank)
    pub rank: u32,
    // @@protoc_insertion_point(field:MEKDNIKFDNA.HNJFFFJDGNE)
    pub HNJFFFJDGNE: bool,
    // special fields
    // @@protoc_insertion_point(special_field:MEKDNIKFDNA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MEKDNIKFDNA {
    fn default() -> &'a MEKDNIKFDNA {
        <MEKDNIKFDNA as ::protobuf::Message>::default_instance()
    }
}

impl MEKDNIKFDNA {
    pub fn new() -> MEKDNIKFDNA {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OGNEPBFPILH",
            |m: &MEKDNIKFDNA| { &m.OGNEPBFPILH },
            |m: &mut MEKDNIKFDNA| { &mut m.OGNEPBFPILH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hp",
            |m: &MEKDNIKFDNA| { &m.hp },
            |m: &mut MEKDNIKFDNA| { &mut m.hp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score_id",
            |m: &MEKDNIKFDNA| { &m.score_id },
            |m: &mut MEKDNIKFDNA| { &mut m.score_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NMLFFOGBPOC",
            |m: &MEKDNIKFDNA| { &m.NMLFFOGBPOC },
            |m: &mut MEKDNIKFDNA| { &mut m.NMLFFOGBPOC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LDNBEIDJBHI",
            |m: &MEKDNIKFDNA| { &m.LDNBEIDJBHI },
            |m: &mut MEKDNIKFDNA| { &mut m.LDNBEIDJBHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "item_list",
            |m: &MEKDNIKFDNA| { &m.item_list },
            |m: &mut MEKDNIKFDNA| { &mut m.item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &MEKDNIKFDNA| { &m.state },
            |m: &mut MEKDNIKFDNA| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rank",
            |m: &MEKDNIKFDNA| { &m.rank },
            |m: &mut MEKDNIKFDNA| { &mut m.rank },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HNJFFFJDGNE",
            |m: &MEKDNIKFDNA| { &m.HNJFFFJDGNE },
            |m: &mut MEKDNIKFDNA| { &mut m.HNJFFFJDGNE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MEKDNIKFDNA>(
            "MEKDNIKFDNA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MEKDNIKFDNA {
    const NAME: &'static str = "MEKDNIKFDNA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                40 => {
                    self.OGNEPBFPILH = is.read_uint32()?;
                },
                80 => {
                    self.hp = is.read_uint32()?;
                },
                112 => {
                    self.score_id = is.read_uint32()?;
                },
                8 => {
                    self.NMLFFOGBPOC = is.read_uint32()?;
                },
                32 => {
                    self.LDNBEIDJBHI = is.read_uint32()?;
                },
                106 => {
                    self.item_list.push(is.read_message()?);
                },
                120 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                64 => {
                    self.rank = is.read_uint32()?;
                },
                88 => {
                    self.HNJFFFJDGNE = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OGNEPBFPILH != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.OGNEPBFPILH);
        }
        if self.hp != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.hp);
        }
        if self.score_id != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.score_id);
        }
        if self.NMLFFOGBPOC != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.NMLFFOGBPOC);
        }
        if self.LDNBEIDJBHI != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.LDNBEIDJBHI);
        }
        for value in &self.item_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.state != ::protobuf::EnumOrUnknown::new(super::NPPNFPPENMC::NPPNFPPENMC::MATCH3_PLAYER_STATE_ALIVE) {
            my_size += ::protobuf::rt::int32_size(15, self.state.value());
        }
        if self.rank != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.rank);
        }
        if self.HNJFFFJDGNE != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OGNEPBFPILH != 0 {
            os.write_uint32(5, self.OGNEPBFPILH)?;
        }
        if self.hp != 0 {
            os.write_uint32(10, self.hp)?;
        }
        if self.score_id != 0 {
            os.write_uint32(14, self.score_id)?;
        }
        if self.NMLFFOGBPOC != 0 {
            os.write_uint32(1, self.NMLFFOGBPOC)?;
        }
        if self.LDNBEIDJBHI != 0 {
            os.write_uint32(4, self.LDNBEIDJBHI)?;
        }
        for v in &self.item_list {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        if self.state != ::protobuf::EnumOrUnknown::new(super::NPPNFPPENMC::NPPNFPPENMC::MATCH3_PLAYER_STATE_ALIVE) {
            os.write_enum(15, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if self.rank != 0 {
            os.write_uint32(8, self.rank)?;
        }
        if self.HNJFFFJDGNE != false {
            os.write_bool(11, self.HNJFFFJDGNE)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MEKDNIKFDNA {
        MEKDNIKFDNA::new()
    }

    fn clear(&mut self) {
        self.OGNEPBFPILH = 0;
        self.hp = 0;
        self.score_id = 0;
        self.NMLFFOGBPOC = 0;
        self.LDNBEIDJBHI = 0;
        self.item_list.clear();
        self.state = ::protobuf::EnumOrUnknown::new(super::NPPNFPPENMC::NPPNFPPENMC::MATCH3_PLAYER_STATE_ALIVE);
        self.rank = 0;
        self.HNJFFFJDGNE = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MEKDNIKFDNA {
        static instance: MEKDNIKFDNA = MEKDNIKFDNA {
            OGNEPBFPILH: 0,
            hp: 0,
            score_id: 0,
            NMLFFOGBPOC: 0,
            LDNBEIDJBHI: 0,
            item_list: ::std::vec::Vec::new(),
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            rank: 0,
            HNJFFFJDGNE: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MEKDNIKFDNA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MEKDNIKFDNA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MEKDNIKFDNA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MEKDNIKFDNA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MEKDNIKFDNA.proto\x1a\x11BHGPHKLEHEC.proto\x1a\x11NPPNFPPENMC.prot\
    o\"\xa3\x02\n\x0bMEKDNIKFDNA\x12\x20\n\x0bOGNEPBFPILH\x18\x05\x20\x01(\r\
    R\x0bOGNEPBFPILH\x12\x0e\n\x02hp\x18\n\x20\x01(\rR\x02hp\x12\x19\n\x08sc\
    ore_id\x18\x0e\x20\x01(\rR\x07scoreId\x12\x20\n\x0bNMLFFOGBPOC\x18\x01\
    \x20\x01(\rR\x0bNMLFFOGBPOC\x12\x20\n\x0bLDNBEIDJBHI\x18\x04\x20\x01(\rR\
    \x0bLDNBEIDJBHI\x12)\n\titem_list\x18\r\x20\x03(\x0b2\x0c.BHGPHKLEHECR\
    \x08itemList\x12\"\n\x05state\x18\x0f\x20\x01(\x0e2\x0c.NPPNFPPENMCR\x05\
    state\x12\x12\n\x04rank\x18\x08\x20\x01(\rR\x04rank\x12\x20\n\x0bHNJFFFJ\
    DGNE\x18\x0b\x20\x01(\x08R\x0bHNJFFFJDGNEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::BHGPHKLEHEC::file_descriptor().clone());
            deps.push(super::NPPNFPPENMC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MEKDNIKFDNA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
