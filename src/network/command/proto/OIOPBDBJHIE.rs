// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OIOPBDBJHIE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OIOPBDBJHIE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OIOPBDBJHIE {
    // message fields
    // @@protoc_insertion_point(field:OIOPBDBJHIE.status)
    pub status: ::protobuf::EnumOrUnknown<oiopbdbjhie::IPKPKDCEBKI>,
    // @@protoc_insertion_point(field:OIOPBDBJHIE.index)
    pub index: u32,
    // special fields
    // @@protoc_insertion_point(special_field:OIOPBDBJHIE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OIOPBDBJHIE {
    fn default() -> &'a OIOPBDBJHIE {
        <OIOPBDBJHIE as ::protobuf::Message>::default_instance()
    }
}

impl OIOPBDBJHIE {
    pub fn new() -> OIOPBDBJHIE {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &OIOPBDBJHIE| { &m.status },
            |m: &mut OIOPBDBJHIE| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &OIOPBDBJHIE| { &m.index },
            |m: &mut OIOPBDBJHIE| { &mut m.index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OIOPBDBJHIE>(
            "OIOPBDBJHIE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OIOPBDBJHIE {
    const NAME: &'static str = "OIOPBDBJHIE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                88 => {
                    self.index = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != ::protobuf::EnumOrUnknown::new(oiopbdbjhie::IPKPKDCEBKI::NotReach) {
            my_size += ::protobuf::rt::int32_size(14, self.status.value());
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != ::protobuf::EnumOrUnknown::new(oiopbdbjhie::IPKPKDCEBKI::NotReach) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if self.index != 0 {
            os.write_uint32(11, self.index)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OIOPBDBJHIE {
        OIOPBDBJHIE::new()
    }

    fn clear(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(oiopbdbjhie::IPKPKDCEBKI::NotReach);
        self.index = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OIOPBDBJHIE {
        static instance: OIOPBDBJHIE = OIOPBDBJHIE {
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            index: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OIOPBDBJHIE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OIOPBDBJHIE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OIOPBDBJHIE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OIOPBDBJHIE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OIOPBDBJHIE`
pub mod oiopbdbjhie {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:OIOPBDBJHIE.IPKPKDCEBKI)
    pub enum IPKPKDCEBKI {
        // @@protoc_insertion_point(enum_value:OIOPBDBJHIE.IPKPKDCEBKI.NotReach)
        NotReach = 0,
        // @@protoc_insertion_point(enum_value:OIOPBDBJHIE.IPKPKDCEBKI.Received)
        Received = 1,
        // @@protoc_insertion_point(enum_value:OIOPBDBJHIE.IPKPKDCEBKI.CanReceive)
        CanReceive = 2,
    }

    impl ::protobuf::Enum for IPKPKDCEBKI {
        const NAME: &'static str = "IPKPKDCEBKI";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<IPKPKDCEBKI> {
            match value {
                0 => ::std::option::Option::Some(IPKPKDCEBKI::NotReach),
                1 => ::std::option::Option::Some(IPKPKDCEBKI::Received),
                2 => ::std::option::Option::Some(IPKPKDCEBKI::CanReceive),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<IPKPKDCEBKI> {
            match str {
                "NotReach" => ::std::option::Option::Some(IPKPKDCEBKI::NotReach),
                "Received" => ::std::option::Option::Some(IPKPKDCEBKI::Received),
                "CanReceive" => ::std::option::Option::Some(IPKPKDCEBKI::CanReceive),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [IPKPKDCEBKI] = &[
            IPKPKDCEBKI::NotReach,
            IPKPKDCEBKI::Received,
            IPKPKDCEBKI::CanReceive,
        ];
    }

    impl ::protobuf::EnumFull for IPKPKDCEBKI {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("OIOPBDBJHIE.IPKPKDCEBKI").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for IPKPKDCEBKI {
        fn default() -> Self {
            IPKPKDCEBKI::NotReach
        }
    }

    impl IPKPKDCEBKI {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<IPKPKDCEBKI>("OIOPBDBJHIE.IPKPKDCEBKI")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OIOPBDBJHIE.proto\x1a\x11IPKPKDCEBKI.proto\"\x90\x01\n\x0bOIOPBDBJ\
    HIE\x120\n\x06status\x18\x0e\x20\x01(\x0e2\x18.OIOPBDBJHIE.IPKPKDCEBKIR\
    \x06status\x12\x14\n\x05index\x18\x0b\x20\x01(\rR\x05index\"9\n\x0bIPKPK\
    DCEBKI\x12\x0c\n\x08NotReach\x10\0\x12\x0c\n\x08Received\x10\x01\x12\x0e\
    \n\nCanReceive\x10\x02b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::IPKPKDCEBKI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OIOPBDBJHIE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(oiopbdbjhie::IPKPKDCEBKI::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
