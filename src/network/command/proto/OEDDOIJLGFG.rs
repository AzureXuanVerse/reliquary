// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OEDDOIJLGFG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OEDDOIJLGFG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OEDDOIJLGFG {
    // message oneof groups
    pub EEODDLOHNED: ::std::option::Option<oeddoijlgfg::EEODDLOHNED>,
    // special fields
    // @@protoc_insertion_point(special_field:OEDDOIJLGFG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OEDDOIJLGFG {
    fn default() -> &'a OEDDOIJLGFG {
        <OEDDOIJLGFG as ::protobuf::Message>::default_instance()
    }
}

impl OEDDOIJLGFG {
    pub fn new() -> OEDDOIJLGFG {
        ::std::default::Default::default()
    }

    // uint32 FFBFCCLODKK = 5;

    pub fn FFBFCCLODKK(&self) -> u32 {
        match self.EEODDLOHNED {
            ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FFBFCCLODKK(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_FFBFCCLODKK(&mut self) {
        self.EEODDLOHNED = ::std::option::Option::None;
    }

    pub fn has_FFBFCCLODKK(&self) -> bool {
        match self.EEODDLOHNED {
            ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FFBFCCLODKK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FFBFCCLODKK(&mut self, v: u32) {
        self.EEODDLOHNED = ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FFBFCCLODKK(v))
    }

    // uint32 KACELKGCNEI = 15;

    pub fn KACELKGCNEI(&self) -> u32 {
        match self.EEODDLOHNED {
            ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::KACELKGCNEI(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_KACELKGCNEI(&mut self) {
        self.EEODDLOHNED = ::std::option::Option::None;
    }

    pub fn has_KACELKGCNEI(&self) -> bool {
        match self.EEODDLOHNED {
            ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::KACELKGCNEI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KACELKGCNEI(&mut self, v: u32) {
        self.EEODDLOHNED = ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::KACELKGCNEI(v))
    }

    // .LCMJFEHMCNF FAOMFMMLMHD = 3;

    pub fn FAOMFMMLMHD(&self) -> &super::LCMJFEHMCNF::LCMJFEHMCNF {
        match self.EEODDLOHNED {
            ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(ref v)) => v,
            _ => <super::LCMJFEHMCNF::LCMJFEHMCNF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FAOMFMMLMHD(&mut self) {
        self.EEODDLOHNED = ::std::option::Option::None;
    }

    pub fn has_FAOMFMMLMHD(&self) -> bool {
        match self.EEODDLOHNED {
            ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FAOMFMMLMHD(&mut self, v: super::LCMJFEHMCNF::LCMJFEHMCNF) {
        self.EEODDLOHNED = ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FAOMFMMLMHD(&mut self) -> &mut super::LCMJFEHMCNF::LCMJFEHMCNF {
        if let ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(_)) = self.EEODDLOHNED {
        } else {
            self.EEODDLOHNED = ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(super::LCMJFEHMCNF::LCMJFEHMCNF::new()));
        }
        match self.EEODDLOHNED {
            ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FAOMFMMLMHD(&mut self) -> super::LCMJFEHMCNF::LCMJFEHMCNF {
        if self.has_FAOMFMMLMHD() {
            match self.EEODDLOHNED.take() {
                ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCMJFEHMCNF::LCMJFEHMCNF::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "FFBFCCLODKK",
            OEDDOIJLGFG::has_FFBFCCLODKK,
            OEDDOIJLGFG::FFBFCCLODKK,
            OEDDOIJLGFG::set_FFBFCCLODKK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "KACELKGCNEI",
            OEDDOIJLGFG::has_KACELKGCNEI,
            OEDDOIJLGFG::KACELKGCNEI,
            OEDDOIJLGFG::set_KACELKGCNEI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCMJFEHMCNF::LCMJFEHMCNF>(
            "FAOMFMMLMHD",
            OEDDOIJLGFG::has_FAOMFMMLMHD,
            OEDDOIJLGFG::FAOMFMMLMHD,
            OEDDOIJLGFG::mut_FAOMFMMLMHD,
            OEDDOIJLGFG::set_FAOMFMMLMHD,
        ));
        oneofs.push(oeddoijlgfg::EEODDLOHNED::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OEDDOIJLGFG>(
            "OEDDOIJLGFG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OEDDOIJLGFG {
    const NAME: &'static str = "OEDDOIJLGFG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                40 => {
                    self.EEODDLOHNED = ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FFBFCCLODKK(is.read_uint32()?));
                },
                120 => {
                    self.EEODDLOHNED = ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::KACELKGCNEI(is.read_uint32()?));
                },
                26 => {
                    self.EEODDLOHNED = ::std::option::Option::Some(oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.EEODDLOHNED {
            match v {
                &oeddoijlgfg::EEODDLOHNED::FFBFCCLODKK(v) => {
                    my_size += ::protobuf::rt::uint32_size(5, v);
                },
                &oeddoijlgfg::EEODDLOHNED::KACELKGCNEI(v) => {
                    my_size += ::protobuf::rt::uint32_size(15, v);
                },
                &oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.EEODDLOHNED {
            match v {
                &oeddoijlgfg::EEODDLOHNED::FFBFCCLODKK(v) => {
                    os.write_uint32(5, v)?;
                },
                &oeddoijlgfg::EEODDLOHNED::KACELKGCNEI(v) => {
                    os.write_uint32(15, v)?;
                },
                &oeddoijlgfg::EEODDLOHNED::FAOMFMMLMHD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OEDDOIJLGFG {
        OEDDOIJLGFG::new()
    }

    fn clear(&mut self) {
        self.EEODDLOHNED = ::std::option::Option::None;
        self.EEODDLOHNED = ::std::option::Option::None;
        self.EEODDLOHNED = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OEDDOIJLGFG {
        static instance: OEDDOIJLGFG = OEDDOIJLGFG {
            EEODDLOHNED: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OEDDOIJLGFG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OEDDOIJLGFG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OEDDOIJLGFG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OEDDOIJLGFG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OEDDOIJLGFG`
pub mod oeddoijlgfg {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:OEDDOIJLGFG.EEODDLOHNED)
    pub enum EEODDLOHNED {
        // @@protoc_insertion_point(oneof_field:OEDDOIJLGFG.FFBFCCLODKK)
        FFBFCCLODKK(u32),
        // @@protoc_insertion_point(oneof_field:OEDDOIJLGFG.KACELKGCNEI)
        KACELKGCNEI(u32),
        // @@protoc_insertion_point(oneof_field:OEDDOIJLGFG.FAOMFMMLMHD)
        FAOMFMMLMHD(super::super::LCMJFEHMCNF::LCMJFEHMCNF),
    }

    impl ::protobuf::Oneof for EEODDLOHNED {
    }

    impl ::protobuf::OneofFull for EEODDLOHNED {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OEDDOIJLGFG as ::protobuf::MessageFull>::descriptor().oneof_by_name("EEODDLOHNED").unwrap()).clone()
        }
    }

    impl EEODDLOHNED {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<EEODDLOHNED>("EEODDLOHNED")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OEDDOIJLGFG.proto\x1a\x11LCMJFEHMCNF.proto\"\x96\x01\n\x0bOEDDOIJL\
    GFG\x12\"\n\x0bFFBFCCLODKK\x18\x05\x20\x01(\rH\0R\x0bFFBFCCLODKK\x12\"\n\
    \x0bKACELKGCNEI\x18\x0f\x20\x01(\rH\0R\x0bKACELKGCNEI\x120\n\x0bFAOMFMML\
    MHD\x18\x03\x20\x01(\x0b2\x0c.LCMJFEHMCNFH\0R\x0bFAOMFMMLMHDB\r\n\x0bEEO\
    DDLOHNEDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::LCMJFEHMCNF::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OEDDOIJLGFG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
