// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BPNMJCHEDNL.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:BPNMJCHEDNL)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BPNMJCHEDNL {
    // message fields
    // @@protoc_insertion_point(field:BPNMJCHEDNL.monster_battle_type)
    pub monster_battle_type: u32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.DBADLNFOPAO)
    pub DBADLNFOPAO: u64,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.ACJCPHIFMLN)
    pub ACJCPHIFMLN: u32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.NLIBKABFGCC)
    pub NLIBKABFGCC: u32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.BIECGFIMCFB)
    pub BIECGFIMCFB: ::std::vec::Vec<super::HCJJOOFKCJH::HCJJOOFKCJH>,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.rank)
    pub rank: u32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.EKLDPALNLDC)
    pub EKLDPALNLDC: u64,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.FFFGFCPHBPN)
    pub FFFGFCPHBPN: ::std::vec::Vec<super::HCJJOOFKCJH::HCJJOOFKCJH>,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.JBLMGNPMADM)
    pub JBLMGNPMADM: u32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.IMBCLFCBODJ)
    pub IMBCLFCBODJ: u32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.score_id)
    pub score_id: i32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.NPJEECEDPOK)
    pub NPJEECEDPOK: i32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.PCEAECMKDEH)
    pub PCEAECMKDEH: ::std::vec::Vec<super::LNGMDMIPCKL::LNGMDMIPCKL>,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.IFNMBNGIFPH)
    pub IFNMBNGIFPH: u32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.IEHJGOMBPBI)
    pub IEHJGOMBPBI: u32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.IPHAFKFGNAO)
    pub IPHAFKFGNAO: u32,
    // @@protoc_insertion_point(field:BPNMJCHEDNL.LBPFECLGEFC)
    pub LBPFECLGEFC: u32,
    // special fields
    // @@protoc_insertion_point(special_field:BPNMJCHEDNL.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BPNMJCHEDNL {
    fn default() -> &'a BPNMJCHEDNL {
        <BPNMJCHEDNL as ::protobuf::Message>::default_instance()
    }
}

impl BPNMJCHEDNL {
    pub fn new() -> BPNMJCHEDNL {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(17);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_battle_type",
            |m: &BPNMJCHEDNL| { &m.monster_battle_type },
            |m: &mut BPNMJCHEDNL| { &mut m.monster_battle_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBADLNFOPAO",
            |m: &BPNMJCHEDNL| { &m.DBADLNFOPAO },
            |m: &mut BPNMJCHEDNL| { &mut m.DBADLNFOPAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACJCPHIFMLN",
            |m: &BPNMJCHEDNL| { &m.ACJCPHIFMLN },
            |m: &mut BPNMJCHEDNL| { &mut m.ACJCPHIFMLN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NLIBKABFGCC",
            |m: &BPNMJCHEDNL| { &m.NLIBKABFGCC },
            |m: &mut BPNMJCHEDNL| { &mut m.NLIBKABFGCC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BIECGFIMCFB",
            |m: &BPNMJCHEDNL| { &m.BIECGFIMCFB },
            |m: &mut BPNMJCHEDNL| { &mut m.BIECGFIMCFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rank",
            |m: &BPNMJCHEDNL| { &m.rank },
            |m: &mut BPNMJCHEDNL| { &mut m.rank },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EKLDPALNLDC",
            |m: &BPNMJCHEDNL| { &m.EKLDPALNLDC },
            |m: &mut BPNMJCHEDNL| { &mut m.EKLDPALNLDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FFFGFCPHBPN",
            |m: &BPNMJCHEDNL| { &m.FFFGFCPHBPN },
            |m: &mut BPNMJCHEDNL| { &mut m.FFFGFCPHBPN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JBLMGNPMADM",
            |m: &BPNMJCHEDNL| { &m.JBLMGNPMADM },
            |m: &mut BPNMJCHEDNL| { &mut m.JBLMGNPMADM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IMBCLFCBODJ",
            |m: &BPNMJCHEDNL| { &m.IMBCLFCBODJ },
            |m: &mut BPNMJCHEDNL| { &mut m.IMBCLFCBODJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score_id",
            |m: &BPNMJCHEDNL| { &m.score_id },
            |m: &mut BPNMJCHEDNL| { &mut m.score_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NPJEECEDPOK",
            |m: &BPNMJCHEDNL| { &m.NPJEECEDPOK },
            |m: &mut BPNMJCHEDNL| { &mut m.NPJEECEDPOK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PCEAECMKDEH",
            |m: &BPNMJCHEDNL| { &m.PCEAECMKDEH },
            |m: &mut BPNMJCHEDNL| { &mut m.PCEAECMKDEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IFNMBNGIFPH",
            |m: &BPNMJCHEDNL| { &m.IFNMBNGIFPH },
            |m: &mut BPNMJCHEDNL| { &mut m.IFNMBNGIFPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IEHJGOMBPBI",
            |m: &BPNMJCHEDNL| { &m.IEHJGOMBPBI },
            |m: &mut BPNMJCHEDNL| { &mut m.IEHJGOMBPBI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IPHAFKFGNAO",
            |m: &BPNMJCHEDNL| { &m.IPHAFKFGNAO },
            |m: &mut BPNMJCHEDNL| { &mut m.IPHAFKFGNAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LBPFECLGEFC",
            |m: &BPNMJCHEDNL| { &m.LBPFECLGEFC },
            |m: &mut BPNMJCHEDNL| { &mut m.LBPFECLGEFC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BPNMJCHEDNL>(
            "BPNMJCHEDNL",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BPNMJCHEDNL {
    const NAME: &'static str = "BPNMJCHEDNL";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.monster_battle_type = is.read_uint32()?;
                },
                16 => {
                    self.DBADLNFOPAO = is.read_uint64()?;
                },
                24 => {
                    self.ACJCPHIFMLN = is.read_uint32()?;
                },
                32 => {
                    self.NLIBKABFGCC = is.read_uint32()?;
                },
                42 => {
                    self.BIECGFIMCFB.push(is.read_message()?);
                },
                48 => {
                    self.rank = is.read_uint32()?;
                },
                56 => {
                    self.EKLDPALNLDC = is.read_uint64()?;
                },
                66 => {
                    self.FFFGFCPHBPN.push(is.read_message()?);
                },
                72 => {
                    self.JBLMGNPMADM = is.read_uint32()?;
                },
                80 => {
                    self.IMBCLFCBODJ = is.read_uint32()?;
                },
                88 => {
                    self.score_id = is.read_int32()?;
                },
                96 => {
                    self.NPJEECEDPOK = is.read_int32()?;
                },
                106 => {
                    self.PCEAECMKDEH.push(is.read_message()?);
                },
                112 => {
                    self.IFNMBNGIFPH = is.read_uint32()?;
                },
                120 => {
                    self.IEHJGOMBPBI = is.read_uint32()?;
                },
                128 => {
                    self.IPHAFKFGNAO = is.read_uint32()?;
                },
                136 => {
                    self.LBPFECLGEFC = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.monster_battle_type != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.monster_battle_type);
        }
        if self.DBADLNFOPAO != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.DBADLNFOPAO);
        }
        if self.ACJCPHIFMLN != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.ACJCPHIFMLN);
        }
        if self.NLIBKABFGCC != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.NLIBKABFGCC);
        }
        for value in &self.BIECGFIMCFB {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.rank != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.rank);
        }
        if self.EKLDPALNLDC != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.EKLDPALNLDC);
        }
        for value in &self.FFFGFCPHBPN {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.JBLMGNPMADM != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.JBLMGNPMADM);
        }
        if self.IMBCLFCBODJ != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.IMBCLFCBODJ);
        }
        if self.score_id != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.score_id);
        }
        if self.NPJEECEDPOK != 0 {
            my_size += ::protobuf::rt::int32_size(12, self.NPJEECEDPOK);
        }
        for value in &self.PCEAECMKDEH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.IFNMBNGIFPH != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.IFNMBNGIFPH);
        }
        if self.IEHJGOMBPBI != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.IEHJGOMBPBI);
        }
        if self.IPHAFKFGNAO != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.IPHAFKFGNAO);
        }
        if self.LBPFECLGEFC != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.LBPFECLGEFC);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.monster_battle_type != 0 {
            os.write_uint32(1, self.monster_battle_type)?;
        }
        if self.DBADLNFOPAO != 0 {
            os.write_uint64(2, self.DBADLNFOPAO)?;
        }
        if self.ACJCPHIFMLN != 0 {
            os.write_uint32(3, self.ACJCPHIFMLN)?;
        }
        if self.NLIBKABFGCC != 0 {
            os.write_uint32(4, self.NLIBKABFGCC)?;
        }
        for v in &self.BIECGFIMCFB {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.rank != 0 {
            os.write_uint32(6, self.rank)?;
        }
        if self.EKLDPALNLDC != 0 {
            os.write_uint64(7, self.EKLDPALNLDC)?;
        }
        for v in &self.FFFGFCPHBPN {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.JBLMGNPMADM != 0 {
            os.write_uint32(9, self.JBLMGNPMADM)?;
        }
        if self.IMBCLFCBODJ != 0 {
            os.write_uint32(10, self.IMBCLFCBODJ)?;
        }
        if self.score_id != 0 {
            os.write_int32(11, self.score_id)?;
        }
        if self.NPJEECEDPOK != 0 {
            os.write_int32(12, self.NPJEECEDPOK)?;
        }
        for v in &self.PCEAECMKDEH {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        if self.IFNMBNGIFPH != 0 {
            os.write_uint32(14, self.IFNMBNGIFPH)?;
        }
        if self.IEHJGOMBPBI != 0 {
            os.write_uint32(15, self.IEHJGOMBPBI)?;
        }
        if self.IPHAFKFGNAO != 0 {
            os.write_uint32(16, self.IPHAFKFGNAO)?;
        }
        if self.LBPFECLGEFC != 0 {
            os.write_uint32(17, self.LBPFECLGEFC)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BPNMJCHEDNL {
        BPNMJCHEDNL::new()
    }

    fn clear(&mut self) {
        self.monster_battle_type = 0;
        self.DBADLNFOPAO = 0;
        self.ACJCPHIFMLN = 0;
        self.NLIBKABFGCC = 0;
        self.BIECGFIMCFB.clear();
        self.rank = 0;
        self.EKLDPALNLDC = 0;
        self.FFFGFCPHBPN.clear();
        self.JBLMGNPMADM = 0;
        self.IMBCLFCBODJ = 0;
        self.score_id = 0;
        self.NPJEECEDPOK = 0;
        self.PCEAECMKDEH.clear();
        self.IFNMBNGIFPH = 0;
        self.IEHJGOMBPBI = 0;
        self.IPHAFKFGNAO = 0;
        self.LBPFECLGEFC = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BPNMJCHEDNL {
        static instance: BPNMJCHEDNL = BPNMJCHEDNL {
            monster_battle_type: 0,
            DBADLNFOPAO: 0,
            ACJCPHIFMLN: 0,
            NLIBKABFGCC: 0,
            BIECGFIMCFB: ::std::vec::Vec::new(),
            rank: 0,
            EKLDPALNLDC: 0,
            FFFGFCPHBPN: ::std::vec::Vec::new(),
            JBLMGNPMADM: 0,
            IMBCLFCBODJ: 0,
            score_id: 0,
            NPJEECEDPOK: 0,
            PCEAECMKDEH: ::std::vec::Vec::new(),
            IFNMBNGIFPH: 0,
            IEHJGOMBPBI: 0,
            IPHAFKFGNAO: 0,
            LBPFECLGEFC: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BPNMJCHEDNL {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BPNMJCHEDNL").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BPNMJCHEDNL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BPNMJCHEDNL {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BPNMJCHEDNL.proto\x1a\x11HCJJOOFKCJH.proto\x1a\x11LNGMDMIPCKL.prot\
    o\"\xf2\x04\n\x0bBPNMJCHEDNL\x12.\n\x13monster_battle_type\x18\x01\x20\
    \x01(\rR\x11monsterBattleType\x12\x20\n\x0bDBADLNFOPAO\x18\x02\x20\x01(\
    \x04R\x0bDBADLNFOPAO\x12\x20\n\x0bACJCPHIFMLN\x18\x03\x20\x01(\rR\x0bACJ\
    CPHIFMLN\x12\x20\n\x0bNLIBKABFGCC\x18\x04\x20\x01(\rR\x0bNLIBKABFGCC\x12\
    .\n\x0bBIECGFIMCFB\x18\x05\x20\x03(\x0b2\x0c.HCJJOOFKCJHR\x0bBIECGFIMCFB\
    \x12\x12\n\x04rank\x18\x06\x20\x01(\rR\x04rank\x12\x20\n\x0bEKLDPALNLDC\
    \x18\x07\x20\x01(\x04R\x0bEKLDPALNLDC\x12.\n\x0bFFFGFCPHBPN\x18\x08\x20\
    \x03(\x0b2\x0c.HCJJOOFKCJHR\x0bFFFGFCPHBPN\x12\x20\n\x0bJBLMGNPMADM\x18\
    \t\x20\x01(\rR\x0bJBLMGNPMADM\x12\x20\n\x0bIMBCLFCBODJ\x18\n\x20\x01(\rR\
    \x0bIMBCLFCBODJ\x12\x19\n\x08score_id\x18\x0b\x20\x01(\x05R\x07scoreId\
    \x12\x20\n\x0bNPJEECEDPOK\x18\x0c\x20\x01(\x05R\x0bNPJEECEDPOK\x12.\n\
    \x0bPCEAECMKDEH\x18\r\x20\x03(\x0b2\x0c.LNGMDMIPCKLR\x0bPCEAECMKDEH\x12\
    \x20\n\x0bIFNMBNGIFPH\x18\x0e\x20\x01(\rR\x0bIFNMBNGIFPH\x12\x20\n\x0bIE\
    HJGOMBPBI\x18\x0f\x20\x01(\rR\x0bIEHJGOMBPBI\x12\x20\n\x0bIPHAFKFGNAO\
    \x18\x10\x20\x01(\rR\x0bIPHAFKFGNAO\x12\x20\n\x0bLBPFECLGEFC\x18\x11\x20\
    \x01(\rR\x0bLBPFECLGEFCb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::HCJJOOFKCJH::file_descriptor().clone());
            deps.push(super::LNGMDMIPCKL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BPNMJCHEDNL::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
