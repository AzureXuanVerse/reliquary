// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlanetFesStartMiniGameScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PlanetFesStartMiniGameScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlanetFesStartMiniGameScRsp {
    // message fields
    // @@protoc_insertion_point(field:PlanetFesStartMiniGameScRsp.reward)
    pub reward: ::protobuf::MessageField<super::PlanetFesReward::PlanetFesReward>,
    // @@protoc_insertion_point(field:PlanetFesStartMiniGameScRsp.rogue_current_info)
    pub rogue_current_info: ::protobuf::MessageField<super::HLDHEMLPJNG::HLDHEMLPJNG>,
    // @@protoc_insertion_point(field:PlanetFesStartMiniGameScRsp.retcode)
    pub retcode: u32,
    // message oneof groups
    pub EMPMLAFDHFA: ::std::option::Option<planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA>,
    // special fields
    // @@protoc_insertion_point(special_field:PlanetFesStartMiniGameScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlanetFesStartMiniGameScRsp {
    fn default() -> &'a PlanetFesStartMiniGameScRsp {
        <PlanetFesStartMiniGameScRsp as ::protobuf::Message>::default_instance()
    }
}

impl PlanetFesStartMiniGameScRsp {
    pub fn new() -> PlanetFesStartMiniGameScRsp {
        ::std::default::Default::default()
    }

    // .FMNHLKNJNAH JFMAHMOFJPI = 3;

    pub fn JFMAHMOFJPI(&self) -> &super::FMNHLKNJNAH::FMNHLKNJNAH {
        match self.EMPMLAFDHFA {
            ::std::option::Option::Some(planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(ref v)) => v,
            _ => <super::FMNHLKNJNAH::FMNHLKNJNAH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JFMAHMOFJPI(&mut self) {
        self.EMPMLAFDHFA = ::std::option::Option::None;
    }

    pub fn has_JFMAHMOFJPI(&self) -> bool {
        match self.EMPMLAFDHFA {
            ::std::option::Option::Some(planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JFMAHMOFJPI(&mut self, v: super::FMNHLKNJNAH::FMNHLKNJNAH) {
        self.EMPMLAFDHFA = ::std::option::Option::Some(planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JFMAHMOFJPI(&mut self) -> &mut super::FMNHLKNJNAH::FMNHLKNJNAH {
        if let ::std::option::Option::Some(planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(_)) = self.EMPMLAFDHFA {
        } else {
            self.EMPMLAFDHFA = ::std::option::Option::Some(planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(super::FMNHLKNJNAH::FMNHLKNJNAH::new()));
        }
        match self.EMPMLAFDHFA {
            ::std::option::Option::Some(planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JFMAHMOFJPI(&mut self) -> super::FMNHLKNJNAH::FMNHLKNJNAH {
        if self.has_JFMAHMOFJPI() {
            match self.EMPMLAFDHFA.take() {
                ::std::option::Option::Some(planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FMNHLKNJNAH::FMNHLKNJNAH::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PlanetFesReward::PlanetFesReward>(
            "reward",
            |m: &PlanetFesStartMiniGameScRsp| { &m.reward },
            |m: &mut PlanetFesStartMiniGameScRsp| { &mut m.reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HLDHEMLPJNG::HLDHEMLPJNG>(
            "rogue_current_info",
            |m: &PlanetFesStartMiniGameScRsp| { &m.rogue_current_info },
            |m: &mut PlanetFesStartMiniGameScRsp| { &mut m.rogue_current_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &PlanetFesStartMiniGameScRsp| { &m.retcode },
            |m: &mut PlanetFesStartMiniGameScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FMNHLKNJNAH::FMNHLKNJNAH>(
            "JFMAHMOFJPI",
            PlanetFesStartMiniGameScRsp::has_JFMAHMOFJPI,
            PlanetFesStartMiniGameScRsp::JFMAHMOFJPI,
            PlanetFesStartMiniGameScRsp::mut_JFMAHMOFJPI,
            PlanetFesStartMiniGameScRsp::set_JFMAHMOFJPI,
        ));
        oneofs.push(planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlanetFesStartMiniGameScRsp>(
            "PlanetFesStartMiniGameScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlanetFesStartMiniGameScRsp {
    const NAME: &'static str = "PlanetFesStartMiniGameScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reward)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rogue_current_info)?;
                },
                120 => {
                    self.retcode = is.read_uint32()?;
                },
                26 => {
                    self.EMPMLAFDHFA = ::std::option::Option::Some(planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reward.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rogue_current_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.retcode);
        }
        if let ::std::option::Option::Some(ref v) = self.EMPMLAFDHFA {
            match v {
                &planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reward.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.rogue_current_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.retcode != 0 {
            os.write_uint32(15, self.retcode)?;
        }
        if let ::std::option::Option::Some(ref v) = self.EMPMLAFDHFA {
            match v {
                &planet_fes_start_mini_game_sc_rsp::EMPMLAFDHFA::JFMAHMOFJPI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlanetFesStartMiniGameScRsp {
        PlanetFesStartMiniGameScRsp::new()
    }

    fn clear(&mut self) {
        self.reward.clear();
        self.rogue_current_info.clear();
        self.retcode = 0;
        self.EMPMLAFDHFA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlanetFesStartMiniGameScRsp {
        static instance: PlanetFesStartMiniGameScRsp = PlanetFesStartMiniGameScRsp {
            reward: ::protobuf::MessageField::none(),
            rogue_current_info: ::protobuf::MessageField::none(),
            retcode: 0,
            EMPMLAFDHFA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlanetFesStartMiniGameScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlanetFesStartMiniGameScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlanetFesStartMiniGameScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlanetFesStartMiniGameScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PlanetFesStartMiniGameScRsp`
pub mod planet_fes_start_mini_game_sc_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:PlanetFesStartMiniGameScRsp.EMPMLAFDHFA)
    pub enum EMPMLAFDHFA {
        // @@protoc_insertion_point(oneof_field:PlanetFesStartMiniGameScRsp.JFMAHMOFJPI)
        JFMAHMOFJPI(super::super::FMNHLKNJNAH::FMNHLKNJNAH),
    }

    impl ::protobuf::Oneof for EMPMLAFDHFA {
    }

    impl ::protobuf::OneofFull for EMPMLAFDHFA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PlanetFesStartMiniGameScRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("EMPMLAFDHFA").unwrap()).clone()
        }
    }

    impl EMPMLAFDHFA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<EMPMLAFDHFA>("EMPMLAFDHFA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!PlanetFesStartMiniGameScRsp.proto\x1a\x11FMNHLKNJNAH.proto\x1a\x11HLD\
    HEMLPJNG.proto\x1a\x15PlanetFesReward.proto\"\xde\x01\n\x1bPlanetFesStar\
    tMiniGameScRsp\x12(\n\x06reward\x18\r\x20\x01(\x0b2\x10.PlanetFesRewardR\
    \x06reward\x12:\n\x12rogue_current_info\x18\x01\x20\x01(\x0b2\x0c.HLDHEM\
    LPJNGR\x10rogueCurrentInfo\x12\x18\n\x07retcode\x18\x0f\x20\x01(\rR\x07r\
    etcode\x120\n\x0bJFMAHMOFJPI\x18\x03\x20\x01(\x0b2\x0c.FMNHLKNJNAHH\0R\
    \x0bJFMAHMOFJPIB\r\n\x0bEMPMLAFDHFAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::FMNHLKNJNAH::file_descriptor().clone());
            deps.push(super::HLDHEMLPJNG::file_descriptor().clone());
            deps.push(super::PlanetFesReward::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlanetFesStartMiniGameScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
