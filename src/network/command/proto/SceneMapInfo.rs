// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SceneMapInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:SceneMapInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SceneMapInfo {
    // message fields
    // @@protoc_insertion_point(field:SceneMapInfo.LMNGAHFNAON)
    pub LMNGAHFNAON: ::std::vec::Vec<super::OFCAIGDHPOH::OFCAIGDHPOH>,
    // @@protoc_insertion_point(field:SceneMapInfo.lighten_section_list)
    pub lighten_section_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SceneMapInfo.unlock_teleport_list)
    pub unlock_teleport_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SceneMapInfo.floor_saved_data)
    pub floor_saved_data: ::std::collections::HashMap<::std::string::String, i32>,
    // @@protoc_insertion_point(field:SceneMapInfo.chest_list)
    pub chest_list: ::std::vec::Vec<super::ChestInfo::ChestInfo>,
    // @@protoc_insertion_point(field:SceneMapInfo.maze_prop_list)
    pub maze_prop_list: ::std::vec::Vec<super::MazePropState::MazePropState>,
    // @@protoc_insertion_point(field:SceneMapInfo.floor_id)
    pub floor_id: u32,
    // @@protoc_insertion_point(field:SceneMapInfo.JMLDMOCNMHM)
    pub JMLDMOCNMHM: ::std::vec::Vec<super::NPAOGKFKAAE::NPAOGKFKAAE>,
    // @@protoc_insertion_point(field:SceneMapInfo.maze_group_list)
    pub maze_group_list: ::std::vec::Vec<super::MazeGroup::MazeGroup>,
    // @@protoc_insertion_point(field:SceneMapInfo.cur_map_entry_id)
    pub cur_map_entry_id: u32,
    // @@protoc_insertion_point(field:SceneMapInfo.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:SceneMapInfo.dimension_id)
    pub dimension_id: u32,
    // @@protoc_insertion_point(field:SceneMapInfo.entry_id)
    pub entry_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:SceneMapInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SceneMapInfo {
    fn default() -> &'a SceneMapInfo {
        <SceneMapInfo as ::protobuf::Message>::default_instance()
    }
}

impl SceneMapInfo {
    pub fn new() -> SceneMapInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LMNGAHFNAON",
            |m: &SceneMapInfo| { &m.LMNGAHFNAON },
            |m: &mut SceneMapInfo| { &mut m.LMNGAHFNAON },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "lighten_section_list",
            |m: &SceneMapInfo| { &m.lighten_section_list },
            |m: &mut SceneMapInfo| { &mut m.lighten_section_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unlock_teleport_list",
            |m: &SceneMapInfo| { &m.unlock_teleport_list },
            |m: &mut SceneMapInfo| { &mut m.unlock_teleport_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "floor_saved_data",
            |m: &SceneMapInfo| { &m.floor_saved_data },
            |m: &mut SceneMapInfo| { &mut m.floor_saved_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chest_list",
            |m: &SceneMapInfo| { &m.chest_list },
            |m: &mut SceneMapInfo| { &mut m.chest_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "maze_prop_list",
            |m: &SceneMapInfo| { &m.maze_prop_list },
            |m: &mut SceneMapInfo| { &mut m.maze_prop_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "floor_id",
            |m: &SceneMapInfo| { &m.floor_id },
            |m: &mut SceneMapInfo| { &mut m.floor_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JMLDMOCNMHM",
            |m: &SceneMapInfo| { &m.JMLDMOCNMHM },
            |m: &mut SceneMapInfo| { &mut m.JMLDMOCNMHM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "maze_group_list",
            |m: &SceneMapInfo| { &m.maze_group_list },
            |m: &mut SceneMapInfo| { &mut m.maze_group_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_map_entry_id",
            |m: &SceneMapInfo| { &m.cur_map_entry_id },
            |m: &mut SceneMapInfo| { &mut m.cur_map_entry_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &SceneMapInfo| { &m.retcode },
            |m: &mut SceneMapInfo| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dimension_id",
            |m: &SceneMapInfo| { &m.dimension_id },
            |m: &mut SceneMapInfo| { &mut m.dimension_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entry_id",
            |m: &SceneMapInfo| { &m.entry_id },
            |m: &mut SceneMapInfo| { &mut m.entry_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SceneMapInfo>(
            "SceneMapInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SceneMapInfo {
    const NAME: &'static str = "SceneMapInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                98 => {
                    self.LMNGAHFNAON.push(is.read_message()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.lighten_section_list)?;
                },
                24 => {
                    self.lighten_section_list.push(is.read_uint32()?);
                },
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.unlock_teleport_list)?;
                },
                112 => {
                    self.unlock_teleport_list.push(is.read_uint32()?);
                },
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.floor_saved_data.insert(key, value);
                },
                74 => {
                    self.chest_list.push(is.read_message()?);
                },
                18 => {
                    self.maze_prop_list.push(is.read_message()?);
                },
                48 => {
                    self.floor_id = is.read_uint32()?;
                },
                34 => {
                    self.JMLDMOCNMHM.push(is.read_message()?);
                },
                42 => {
                    self.maze_group_list.push(is.read_message()?);
                },
                104 => {
                    self.cur_map_entry_id = is.read_uint32()?;
                },
                56 => {
                    self.retcode = is.read_uint32()?;
                },
                120 => {
                    self.dimension_id = is.read_uint32()?;
                },
                64 => {
                    self.entry_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.LMNGAHFNAON {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(3, &self.lighten_section_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(14, &self.unlock_teleport_list);
        for (k, v) in &self.floor_saved_data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.chest_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.maze_prop_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.floor_id != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.floor_id);
        }
        for value in &self.JMLDMOCNMHM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.maze_group_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.cur_map_entry_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.cur_map_entry_id);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.retcode);
        }
        if self.dimension_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.dimension_id);
        }
        if self.entry_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.entry_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.LMNGAHFNAON {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        os.write_repeated_packed_uint32(3, &self.lighten_section_list)?;
        os.write_repeated_packed_uint32(14, &self.unlock_teleport_list)?;
        for (k, v) in &self.floor_saved_data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_int32(2, *v)?;
        };
        for v in &self.chest_list {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for v in &self.maze_prop_list {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.floor_id != 0 {
            os.write_uint32(6, self.floor_id)?;
        }
        for v in &self.JMLDMOCNMHM {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.maze_group_list {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.cur_map_entry_id != 0 {
            os.write_uint32(13, self.cur_map_entry_id)?;
        }
        if self.retcode != 0 {
            os.write_uint32(7, self.retcode)?;
        }
        if self.dimension_id != 0 {
            os.write_uint32(15, self.dimension_id)?;
        }
        if self.entry_id != 0 {
            os.write_uint32(8, self.entry_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SceneMapInfo {
        SceneMapInfo::new()
    }

    fn clear(&mut self) {
        self.LMNGAHFNAON.clear();
        self.lighten_section_list.clear();
        self.unlock_teleport_list.clear();
        self.floor_saved_data.clear();
        self.chest_list.clear();
        self.maze_prop_list.clear();
        self.floor_id = 0;
        self.JMLDMOCNMHM.clear();
        self.maze_group_list.clear();
        self.cur_map_entry_id = 0;
        self.retcode = 0;
        self.dimension_id = 0;
        self.entry_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SceneMapInfo {
        static instance: ::protobuf::rt::Lazy<SceneMapInfo> = ::protobuf::rt::Lazy::new();
        instance.get(SceneMapInfo::new)
    }
}

impl ::protobuf::MessageFull for SceneMapInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SceneMapInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SceneMapInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SceneMapInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12SceneMapInfo.proto\x1a\x0fChestInfo.proto\x1a\x0fMazeGroup.proto\
    \x1a\x13MazePropState.proto\x1a\x11NPAOGKFKAAE.proto\x1a\x11OFCAIGDHPOH.\
    proto\"\x93\x05\n\x0cSceneMapInfo\x12.\n\x0bLMNGAHFNAON\x18\x0c\x20\x03(\
    \x0b2\x0c.OFCAIGDHPOHR\x0bLMNGAHFNAON\x120\n\x14lighten_section_list\x18\
    \x03\x20\x03(\rR\x12lightenSectionList\x120\n\x14unlock_teleport_list\
    \x18\x0e\x20\x03(\rR\x12unlockTeleportList\x12K\n\x10floor_saved_data\
    \x18\x01\x20\x03(\x0b2!.SceneMapInfo.FloorSavedDataEntryR\x0efloorSavedD\
    ata\x12)\n\nchest_list\x18\t\x20\x03(\x0b2\n.ChestInfoR\tchestList\x124\
    \n\x0emaze_prop_list\x18\x02\x20\x03(\x0b2\x0e.MazePropStateR\x0cmazePro\
    pList\x12\x19\n\x08floor_id\x18\x06\x20\x01(\rR\x07floorId\x12.\n\x0bJML\
    DMOCNMHM\x18\x04\x20\x03(\x0b2\x0c.NPAOGKFKAAER\x0bJMLDMOCNMHM\x122\n\
    \x0fmaze_group_list\x18\x05\x20\x03(\x0b2\n.MazeGroupR\rmazeGroupList\
    \x12'\n\x10cur_map_entry_id\x18\r\x20\x01(\rR\rcurMapEntryId\x12\x18\n\
    \x07retcode\x18\x07\x20\x01(\rR\x07retcode\x12!\n\x0cdimension_id\x18\
    \x0f\x20\x01(\rR\x0bdimensionId\x12\x19\n\x08entry_id\x18\x08\x20\x01(\r\
    R\x07entryId\x1aA\n\x13FloorSavedDataEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x05R\x05value:\x028\
    \x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::ChestInfo::file_descriptor().clone());
            deps.push(super::MazeGroup::file_descriptor().clone());
            deps.push(super::MazePropState::file_descriptor().clone());
            deps.push(super::NPAOGKFKAAE::file_descriptor().clone());
            deps.push(super::OFCAIGDHPOH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SceneMapInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
