// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AHKANKEPADJ.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:AHKANKEPADJ)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AHKANKEPADJ {
    // message fields
    // @@protoc_insertion_point(field:AHKANKEPADJ.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:AHKANKEPADJ.JHHLPLJAAME)
    pub JHHLPLJAAME: u32,
    // @@protoc_insertion_point(field:AHKANKEPADJ.OBHIDGFGAMD)
    pub OBHIDGFGAMD: bool,
    // @@protoc_insertion_point(field:AHKANKEPADJ.POFHPDGAMKL)
    pub POFHPDGAMKL: u32,
    // @@protoc_insertion_point(field:AHKANKEPADJ.BDNLNMCOHGB)
    pub BDNLNMCOHGB: ::std::string::String,
    // @@protoc_insertion_point(field:AHKANKEPADJ.avatar_list)
    pub avatar_list: ::std::vec::Vec<super::PIGODJNHJML::PIGODJNHJML>,
    // @@protoc_insertion_point(field:AHKANKEPADJ.NCACOCCJNLD)
    pub NCACOCCJNLD: u32,
    // @@protoc_insertion_point(field:AHKANKEPADJ.AHJFPNGDBDO)
    pub AHJFPNGDBDO: u32,
    // @@protoc_insertion_point(field:AHKANKEPADJ.PGOFPNLAPOE)
    pub PGOFPNLAPOE: u32,
    // special fields
    // @@protoc_insertion_point(special_field:AHKANKEPADJ.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AHKANKEPADJ {
    fn default() -> &'a AHKANKEPADJ {
        <AHKANKEPADJ as ::protobuf::Message>::default_instance()
    }
}

impl AHKANKEPADJ {
    pub fn new() -> AHKANKEPADJ {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &AHKANKEPADJ| { &m.uid },
            |m: &mut AHKANKEPADJ| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JHHLPLJAAME",
            |m: &AHKANKEPADJ| { &m.JHHLPLJAAME },
            |m: &mut AHKANKEPADJ| { &mut m.JHHLPLJAAME },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBHIDGFGAMD",
            |m: &AHKANKEPADJ| { &m.OBHIDGFGAMD },
            |m: &mut AHKANKEPADJ| { &mut m.OBHIDGFGAMD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "POFHPDGAMKL",
            |m: &AHKANKEPADJ| { &m.POFHPDGAMKL },
            |m: &mut AHKANKEPADJ| { &mut m.POFHPDGAMKL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BDNLNMCOHGB",
            |m: &AHKANKEPADJ| { &m.BDNLNMCOHGB },
            |m: &mut AHKANKEPADJ| { &mut m.BDNLNMCOHGB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &AHKANKEPADJ| { &m.avatar_list },
            |m: &mut AHKANKEPADJ| { &mut m.avatar_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NCACOCCJNLD",
            |m: &AHKANKEPADJ| { &m.NCACOCCJNLD },
            |m: &mut AHKANKEPADJ| { &mut m.NCACOCCJNLD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AHJFPNGDBDO",
            |m: &AHKANKEPADJ| { &m.AHJFPNGDBDO },
            |m: &mut AHKANKEPADJ| { &mut m.AHJFPNGDBDO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PGOFPNLAPOE",
            |m: &AHKANKEPADJ| { &m.PGOFPNLAPOE },
            |m: &mut AHKANKEPADJ| { &mut m.PGOFPNLAPOE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AHKANKEPADJ>(
            "AHKANKEPADJ",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AHKANKEPADJ {
    const NAME: &'static str = "AHKANKEPADJ";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.uid = is.read_uint32()?;
                },
                16 => {
                    self.JHHLPLJAAME = is.read_uint32()?;
                },
                24 => {
                    self.OBHIDGFGAMD = is.read_bool()?;
                },
                32 => {
                    self.POFHPDGAMKL = is.read_uint32()?;
                },
                42 => {
                    self.BDNLNMCOHGB = is.read_string()?;
                },
                50 => {
                    self.avatar_list.push(is.read_message()?);
                },
                56 => {
                    self.NCACOCCJNLD = is.read_uint32()?;
                },
                64 => {
                    self.AHJFPNGDBDO = is.read_uint32()?;
                },
                72 => {
                    self.PGOFPNLAPOE = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.uid);
        }
        if self.JHHLPLJAAME != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.JHHLPLJAAME);
        }
        if self.OBHIDGFGAMD != false {
            my_size += 1 + 1;
        }
        if self.POFHPDGAMKL != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.POFHPDGAMKL);
        }
        if !self.BDNLNMCOHGB.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.BDNLNMCOHGB);
        }
        for value in &self.avatar_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.NCACOCCJNLD != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.NCACOCCJNLD);
        }
        if self.AHJFPNGDBDO != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.AHJFPNGDBDO);
        }
        if self.PGOFPNLAPOE != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.PGOFPNLAPOE);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uid != 0 {
            os.write_uint32(1, self.uid)?;
        }
        if self.JHHLPLJAAME != 0 {
            os.write_uint32(2, self.JHHLPLJAAME)?;
        }
        if self.OBHIDGFGAMD != false {
            os.write_bool(3, self.OBHIDGFGAMD)?;
        }
        if self.POFHPDGAMKL != 0 {
            os.write_uint32(4, self.POFHPDGAMKL)?;
        }
        if !self.BDNLNMCOHGB.is_empty() {
            os.write_string(5, &self.BDNLNMCOHGB)?;
        }
        for v in &self.avatar_list {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if self.NCACOCCJNLD != 0 {
            os.write_uint32(7, self.NCACOCCJNLD)?;
        }
        if self.AHJFPNGDBDO != 0 {
            os.write_uint32(8, self.AHJFPNGDBDO)?;
        }
        if self.PGOFPNLAPOE != 0 {
            os.write_uint32(9, self.PGOFPNLAPOE)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AHKANKEPADJ {
        AHKANKEPADJ::new()
    }

    fn clear(&mut self) {
        self.uid = 0;
        self.JHHLPLJAAME = 0;
        self.OBHIDGFGAMD = false;
        self.POFHPDGAMKL = 0;
        self.BDNLNMCOHGB.clear();
        self.avatar_list.clear();
        self.NCACOCCJNLD = 0;
        self.AHJFPNGDBDO = 0;
        self.PGOFPNLAPOE = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AHKANKEPADJ {
        static instance: AHKANKEPADJ = AHKANKEPADJ {
            uid: 0,
            JHHLPLJAAME: 0,
            OBHIDGFGAMD: false,
            POFHPDGAMKL: 0,
            BDNLNMCOHGB: ::std::string::String::new(),
            avatar_list: ::std::vec::Vec::new(),
            NCACOCCJNLD: 0,
            AHJFPNGDBDO: 0,
            PGOFPNLAPOE: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AHKANKEPADJ {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AHKANKEPADJ").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AHKANKEPADJ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AHKANKEPADJ {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AHKANKEPADJ.proto\x1a\x11PIGODJNHJML.proto\"\xbc\x02\n\x0bAHKANKEP\
    ADJ\x12\x10\n\x03uid\x18\x01\x20\x01(\rR\x03uid\x12\x20\n\x0bJHHLPLJAAME\
    \x18\x02\x20\x01(\rR\x0bJHHLPLJAAME\x12\x20\n\x0bOBHIDGFGAMD\x18\x03\x20\
    \x01(\x08R\x0bOBHIDGFGAMD\x12\x20\n\x0bPOFHPDGAMKL\x18\x04\x20\x01(\rR\
    \x0bPOFHPDGAMKL\x12\x20\n\x0bBDNLNMCOHGB\x18\x05\x20\x01(\tR\x0bBDNLNMCO\
    HGB\x12-\n\x0bavatar_list\x18\x06\x20\x03(\x0b2\x0c.PIGODJNHJMLR\navatar\
    List\x12\x20\n\x0bNCACOCCJNLD\x18\x07\x20\x01(\rR\x0bNCACOCCJNLD\x12\x20\
    \n\x0bAHJFPNGDBDO\x18\x08\x20\x01(\rR\x0bAHJFPNGDBDO\x12\x20\n\x0bPGOFPN\
    LAPOE\x18\t\x20\x01(\rR\x0bPGOFPNLAPOEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::PIGODJNHJML::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AHKANKEPADJ::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
