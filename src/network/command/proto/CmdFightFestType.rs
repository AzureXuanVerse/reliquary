// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdFightFestType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdFightFestType)
pub enum CmdFightFestType {
    // @@protoc_insertion_point(enum_value:CmdFightFestType.CmdFightFestTypeNone)
    CmdFightFestTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdFightFestType.CmdStartFightFestScRsp)
    CmdStartFightFestScRsp = 7287,
    // @@protoc_insertion_point(enum_value:CmdFightFestType.CmdStartFightFestCsReq)
    CmdStartFightFestCsReq = 7252,
    // @@protoc_insertion_point(enum_value:CmdFightFestType.CmdFightFestUpdateCoinNotify)
    CmdFightFestUpdateCoinNotify = 7265,
    // @@protoc_insertion_point(enum_value:CmdFightFestType.CmdGetFightFestDataScRsp)
    CmdGetFightFestDataScRsp = 7296,
    // @@protoc_insertion_point(enum_value:CmdFightFestType.CmdFightFestScoreUpdateNotify)
    CmdFightFestScoreUpdateNotify = 7286,
    // @@protoc_insertion_point(enum_value:CmdFightFestType.CmdFightFestUnlockSkillNotify)
    CmdFightFestUnlockSkillNotify = 7267,
    // @@protoc_insertion_point(enum_value:CmdFightFestType.CmdFightFestUpdateChallengeRecordNotify)
    CmdFightFestUpdateChallengeRecordNotify = 7277,
    // @@protoc_insertion_point(enum_value:CmdFightFestType.CmdGetFightFestDataCsReq)
    CmdGetFightFestDataCsReq = 7254,
}

impl ::protobuf::Enum for CmdFightFestType {
    const NAME: &'static str = "CmdFightFestType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdFightFestType> {
        match value {
            0 => ::std::option::Option::Some(CmdFightFestType::CmdFightFestTypeNone),
            7287 => ::std::option::Option::Some(CmdFightFestType::CmdStartFightFestScRsp),
            7252 => ::std::option::Option::Some(CmdFightFestType::CmdStartFightFestCsReq),
            7265 => ::std::option::Option::Some(CmdFightFestType::CmdFightFestUpdateCoinNotify),
            7296 => ::std::option::Option::Some(CmdFightFestType::CmdGetFightFestDataScRsp),
            7286 => ::std::option::Option::Some(CmdFightFestType::CmdFightFestScoreUpdateNotify),
            7267 => ::std::option::Option::Some(CmdFightFestType::CmdFightFestUnlockSkillNotify),
            7277 => ::std::option::Option::Some(CmdFightFestType::CmdFightFestUpdateChallengeRecordNotify),
            7254 => ::std::option::Option::Some(CmdFightFestType::CmdGetFightFestDataCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdFightFestType> {
        match str {
            "CmdFightFestTypeNone" => ::std::option::Option::Some(CmdFightFestType::CmdFightFestTypeNone),
            "CmdStartFightFestScRsp" => ::std::option::Option::Some(CmdFightFestType::CmdStartFightFestScRsp),
            "CmdStartFightFestCsReq" => ::std::option::Option::Some(CmdFightFestType::CmdStartFightFestCsReq),
            "CmdFightFestUpdateCoinNotify" => ::std::option::Option::Some(CmdFightFestType::CmdFightFestUpdateCoinNotify),
            "CmdGetFightFestDataScRsp" => ::std::option::Option::Some(CmdFightFestType::CmdGetFightFestDataScRsp),
            "CmdFightFestScoreUpdateNotify" => ::std::option::Option::Some(CmdFightFestType::CmdFightFestScoreUpdateNotify),
            "CmdFightFestUnlockSkillNotify" => ::std::option::Option::Some(CmdFightFestType::CmdFightFestUnlockSkillNotify),
            "CmdFightFestUpdateChallengeRecordNotify" => ::std::option::Option::Some(CmdFightFestType::CmdFightFestUpdateChallengeRecordNotify),
            "CmdGetFightFestDataCsReq" => ::std::option::Option::Some(CmdFightFestType::CmdGetFightFestDataCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdFightFestType] = &[
        CmdFightFestType::CmdFightFestTypeNone,
        CmdFightFestType::CmdStartFightFestScRsp,
        CmdFightFestType::CmdStartFightFestCsReq,
        CmdFightFestType::CmdFightFestUpdateCoinNotify,
        CmdFightFestType::CmdGetFightFestDataScRsp,
        CmdFightFestType::CmdFightFestScoreUpdateNotify,
        CmdFightFestType::CmdFightFestUnlockSkillNotify,
        CmdFightFestType::CmdFightFestUpdateChallengeRecordNotify,
        CmdFightFestType::CmdGetFightFestDataCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdFightFestType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdFightFestType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdFightFestType::CmdFightFestTypeNone => 0,
            CmdFightFestType::CmdStartFightFestScRsp => 1,
            CmdFightFestType::CmdStartFightFestCsReq => 2,
            CmdFightFestType::CmdFightFestUpdateCoinNotify => 3,
            CmdFightFestType::CmdGetFightFestDataScRsp => 4,
            CmdFightFestType::CmdFightFestScoreUpdateNotify => 5,
            CmdFightFestType::CmdFightFestUnlockSkillNotify => 6,
            CmdFightFestType::CmdFightFestUpdateChallengeRecordNotify => 7,
            CmdFightFestType::CmdGetFightFestDataCsReq => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdFightFestType {
    fn default() -> Self {
        CmdFightFestType::CmdFightFestTypeNone
    }
}

impl CmdFightFestType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdFightFestType>("CmdFightFestType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16CmdFightFestType.proto*\xbd\x02\n\x10CmdFightFestType\x12\x18\n\
    \x14CmdFightFestTypeNone\x10\0\x12\x1b\n\x16CmdStartFightFestScRsp\x10\
    \xf78\x12\x1b\n\x16CmdStartFightFestCsReq\x10\xd48\x12!\n\x1cCmdFightFes\
    tUpdateCoinNotify\x10\xe18\x12\x1d\n\x18CmdGetFightFestDataScRsp\x10\x80\
    9\x12\"\n\x1dCmdFightFestScoreUpdateNotify\x10\xf68\x12\"\n\x1dCmdFightF\
    estUnlockSkillNotify\x10\xe38\x12,\n'CmdFightFestUpdateChallengeRecordNo\
    tify\x10\xed8\x12\x1d\n\x18CmdGetFightFestDataCsReq\x10\xd68b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdFightFestType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
