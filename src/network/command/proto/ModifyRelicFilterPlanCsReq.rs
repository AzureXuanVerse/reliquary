// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ModifyRelicFilterPlanCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ModifyRelicFilterPlanCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ModifyRelicFilterPlanCsReq {
    // message fields
    // @@protoc_insertion_point(field:ModifyRelicFilterPlanCsReq.max_times)
    pub max_times: u32,
    // message oneof groups
    pub KFELKJLDKEH: ::std::option::Option<modify_relic_filter_plan_cs_req::KFELKJLDKEH>,
    // special fields
    // @@protoc_insertion_point(special_field:ModifyRelicFilterPlanCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ModifyRelicFilterPlanCsReq {
    fn default() -> &'a ModifyRelicFilterPlanCsReq {
        <ModifyRelicFilterPlanCsReq as ::protobuf::Message>::default_instance()
    }
}

impl ModifyRelicFilterPlanCsReq {
    pub fn new() -> ModifyRelicFilterPlanCsReq {
        ::std::default::Default::default()
    }

    // string name = 8;

    pub fn name(&self) -> &str {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.KFELKJLDKEH = ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(::std::string::String::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        if self.has_name() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .PACFHNEJADB GFIDNAANAFH = 10;

    pub fn GFIDNAANAFH(&self) -> &super::PACFHNEJADB::PACFHNEJADB {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(ref v)) => v,
            _ => <super::PACFHNEJADB::PACFHNEJADB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GFIDNAANAFH(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GFIDNAANAFH(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GFIDNAANAFH(&mut self, v: super::PACFHNEJADB::PACFHNEJADB) {
        self.KFELKJLDKEH = ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GFIDNAANAFH(&mut self) -> &mut super::PACFHNEJADB::PACFHNEJADB {
        if let ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(super::PACFHNEJADB::PACFHNEJADB::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GFIDNAANAFH(&mut self) -> super::PACFHNEJADB::PACFHNEJADB {
        if self.has_GFIDNAANAFH() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PACFHNEJADB::PACFHNEJADB::new()
        }
    }

    // .IIPKANNMLFN IBPDGNOHFPM = 11;

    pub fn IBPDGNOHFPM(&self) -> &super::IIPKANNMLFN::IIPKANNMLFN {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(ref v)) => v,
            _ => <super::IIPKANNMLFN::IIPKANNMLFN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IBPDGNOHFPM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IBPDGNOHFPM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IBPDGNOHFPM(&mut self, v: super::IIPKANNMLFN::IIPKANNMLFN) {
        self.KFELKJLDKEH = ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IBPDGNOHFPM(&mut self) -> &mut super::IIPKANNMLFN::IIPKANNMLFN {
        if let ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(super::IIPKANNMLFN::IIPKANNMLFN::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IBPDGNOHFPM(&mut self) -> super::IIPKANNMLFN::IIPKANNMLFN {
        if self.has_IBPDGNOHFPM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IIPKANNMLFN::IIPKANNMLFN::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_times",
            |m: &ModifyRelicFilterPlanCsReq| { &m.max_times },
            |m: &mut ModifyRelicFilterPlanCsReq| { &mut m.max_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "name",
            ModifyRelicFilterPlanCsReq::has_name,
            ModifyRelicFilterPlanCsReq::name,
            ModifyRelicFilterPlanCsReq::set_name,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PACFHNEJADB::PACFHNEJADB>(
            "GFIDNAANAFH",
            ModifyRelicFilterPlanCsReq::has_GFIDNAANAFH,
            ModifyRelicFilterPlanCsReq::GFIDNAANAFH,
            ModifyRelicFilterPlanCsReq::mut_GFIDNAANAFH,
            ModifyRelicFilterPlanCsReq::set_GFIDNAANAFH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IIPKANNMLFN::IIPKANNMLFN>(
            "IBPDGNOHFPM",
            ModifyRelicFilterPlanCsReq::has_IBPDGNOHFPM,
            ModifyRelicFilterPlanCsReq::IBPDGNOHFPM,
            ModifyRelicFilterPlanCsReq::mut_IBPDGNOHFPM,
            ModifyRelicFilterPlanCsReq::set_IBPDGNOHFPM,
        ));
        oneofs.push(modify_relic_filter_plan_cs_req::KFELKJLDKEH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ModifyRelicFilterPlanCsReq>(
            "ModifyRelicFilterPlanCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ModifyRelicFilterPlanCsReq {
    const NAME: &'static str = "ModifyRelicFilterPlanCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.max_times = is.read_uint32()?;
                },
                66 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(is.read_string()?));
                },
                82 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(is.read_message()?));
                },
                90 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.max_times != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.max_times);
        }
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(ref v) => {
                    my_size += ::protobuf::rt::string_size(8, &v);
                },
                &modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.max_times != 0 {
            os.write_uint32(4, self.max_times)?;
        }
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &modify_relic_filter_plan_cs_req::KFELKJLDKEH::Name(ref v) => {
                    os.write_string(8, v)?;
                },
                &modify_relic_filter_plan_cs_req::KFELKJLDKEH::GFIDNAANAFH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &modify_relic_filter_plan_cs_req::KFELKJLDKEH::IBPDGNOHFPM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ModifyRelicFilterPlanCsReq {
        ModifyRelicFilterPlanCsReq::new()
    }

    fn clear(&mut self) {
        self.max_times = 0;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ModifyRelicFilterPlanCsReq {
        static instance: ModifyRelicFilterPlanCsReq = ModifyRelicFilterPlanCsReq {
            max_times: 0,
            KFELKJLDKEH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ModifyRelicFilterPlanCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ModifyRelicFilterPlanCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ModifyRelicFilterPlanCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModifyRelicFilterPlanCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ModifyRelicFilterPlanCsReq`
pub mod modify_relic_filter_plan_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ModifyRelicFilterPlanCsReq.KFELKJLDKEH)
    pub enum KFELKJLDKEH {
        // @@protoc_insertion_point(oneof_field:ModifyRelicFilterPlanCsReq.name)
        Name(::std::string::String),
        // @@protoc_insertion_point(oneof_field:ModifyRelicFilterPlanCsReq.GFIDNAANAFH)
        GFIDNAANAFH(super::super::PACFHNEJADB::PACFHNEJADB),
        // @@protoc_insertion_point(oneof_field:ModifyRelicFilterPlanCsReq.IBPDGNOHFPM)
        IBPDGNOHFPM(super::super::IIPKANNMLFN::IIPKANNMLFN),
    }

    impl ::protobuf::Oneof for KFELKJLDKEH {
    }

    impl ::protobuf::OneofFull for KFELKJLDKEH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ModifyRelicFilterPlanCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("KFELKJLDKEH").unwrap()).clone()
        }
    }

    impl KFELKJLDKEH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KFELKJLDKEH>("KFELKJLDKEH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20ModifyRelicFilterPlanCsReq.proto\x1a\x11IIPKANNMLFN.proto\x1a\x11P\
    ACFHNEJADB.proto\"\xc2\x01\n\x1aModifyRelicFilterPlanCsReq\x12\x1b\n\tma\
    x_times\x18\x04\x20\x01(\rR\x08maxTimes\x12\x14\n\x04name\x18\x08\x20\
    \x01(\tH\0R\x04name\x120\n\x0bGFIDNAANAFH\x18\n\x20\x01(\x0b2\x0c.PACFHN\
    EJADBH\0R\x0bGFIDNAANAFH\x120\n\x0bIBPDGNOHFPM\x18\x0b\x20\x01(\x0b2\x0c\
    .IIPKANNMLFNH\0R\x0bIBPDGNOHFPMB\r\n\x0bKFELKJLDKEHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::IIPKANNMLFN::file_descriptor().clone());
            deps.push(super::PACFHNEJADB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ModifyRelicFilterPlanCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
