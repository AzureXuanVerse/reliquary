// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OOMGHIBBCBN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OOMGHIBBCBN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OOMGHIBBCBN {
    // message fields
    // @@protoc_insertion_point(field:OOMGHIBBCBN.HMJFCDLCIFD)
    pub HMJFCDLCIFD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OOMGHIBBCBN.HGCGILABNDL)
    pub HGCGILABNDL: ::std::vec::Vec<super::BMPCJDEAIIH::BMPCJDEAIIH>,
    // @@protoc_insertion_point(field:OOMGHIBBCBN.JNCBPDHCAHI)
    pub JNCBPDHCAHI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OOMGHIBBCBN.ACGKFEDNDFH)
    pub ACGKFEDNDFH: u32,
    // @@protoc_insertion_point(field:OOMGHIBBCBN.KAEOJCOBIHC)
    pub KAEOJCOBIHC: u32,
    // @@protoc_insertion_point(field:OOMGHIBBCBN.MKAIFJIBJIK)
    pub MKAIFJIBJIK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OOMGHIBBCBN.AMLDAILBMBO)
    pub AMLDAILBMBO: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:OOMGHIBBCBN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OOMGHIBBCBN {
    fn default() -> &'a OOMGHIBBCBN {
        <OOMGHIBBCBN as ::protobuf::Message>::default_instance()
    }
}

impl OOMGHIBBCBN {
    pub fn new() -> OOMGHIBBCBN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HMJFCDLCIFD",
            |m: &OOMGHIBBCBN| { &m.HMJFCDLCIFD },
            |m: &mut OOMGHIBBCBN| { &mut m.HMJFCDLCIFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HGCGILABNDL",
            |m: &OOMGHIBBCBN| { &m.HGCGILABNDL },
            |m: &mut OOMGHIBBCBN| { &mut m.HGCGILABNDL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JNCBPDHCAHI",
            |m: &OOMGHIBBCBN| { &m.JNCBPDHCAHI },
            |m: &mut OOMGHIBBCBN| { &mut m.JNCBPDHCAHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACGKFEDNDFH",
            |m: &OOMGHIBBCBN| { &m.ACGKFEDNDFH },
            |m: &mut OOMGHIBBCBN| { &mut m.ACGKFEDNDFH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KAEOJCOBIHC",
            |m: &OOMGHIBBCBN| { &m.KAEOJCOBIHC },
            |m: &mut OOMGHIBBCBN| { &mut m.KAEOJCOBIHC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MKAIFJIBJIK",
            |m: &OOMGHIBBCBN| { &m.MKAIFJIBJIK },
            |m: &mut OOMGHIBBCBN| { &mut m.MKAIFJIBJIK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AMLDAILBMBO",
            |m: &OOMGHIBBCBN| { &m.AMLDAILBMBO },
            |m: &mut OOMGHIBBCBN| { &mut m.AMLDAILBMBO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OOMGHIBBCBN>(
            "OOMGHIBBCBN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OOMGHIBBCBN {
    const NAME: &'static str = "OOMGHIBBCBN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.HMJFCDLCIFD)?;
                },
                104 => {
                    self.HMJFCDLCIFD.push(is.read_uint32()?);
                },
                74 => {
                    self.HGCGILABNDL.push(is.read_message()?);
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.JNCBPDHCAHI)?;
                },
                96 => {
                    self.JNCBPDHCAHI.push(is.read_uint32()?);
                },
                120 => {
                    self.ACGKFEDNDFH = is.read_uint32()?;
                },
                64 => {
                    self.KAEOJCOBIHC = is.read_uint32()?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.MKAIFJIBJIK)?;
                },
                16 => {
                    self.MKAIFJIBJIK.push(is.read_uint32()?);
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.AMLDAILBMBO)?;
                },
                88 => {
                    self.AMLDAILBMBO.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(13, &self.HMJFCDLCIFD);
        for value in &self.HGCGILABNDL {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(12, &self.JNCBPDHCAHI);
        if self.ACGKFEDNDFH != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.ACGKFEDNDFH);
        }
        if self.KAEOJCOBIHC != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.KAEOJCOBIHC);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(2, &self.MKAIFJIBJIK);
        my_size += ::protobuf::rt::vec_packed_uint32_size(11, &self.AMLDAILBMBO);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(13, &self.HMJFCDLCIFD)?;
        for v in &self.HGCGILABNDL {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_repeated_packed_uint32(12, &self.JNCBPDHCAHI)?;
        if self.ACGKFEDNDFH != 0 {
            os.write_uint32(15, self.ACGKFEDNDFH)?;
        }
        if self.KAEOJCOBIHC != 0 {
            os.write_uint32(8, self.KAEOJCOBIHC)?;
        }
        os.write_repeated_packed_uint32(2, &self.MKAIFJIBJIK)?;
        os.write_repeated_packed_uint32(11, &self.AMLDAILBMBO)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OOMGHIBBCBN {
        OOMGHIBBCBN::new()
    }

    fn clear(&mut self) {
        self.HMJFCDLCIFD.clear();
        self.HGCGILABNDL.clear();
        self.JNCBPDHCAHI.clear();
        self.ACGKFEDNDFH = 0;
        self.KAEOJCOBIHC = 0;
        self.MKAIFJIBJIK.clear();
        self.AMLDAILBMBO.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OOMGHIBBCBN {
        static instance: OOMGHIBBCBN = OOMGHIBBCBN {
            HMJFCDLCIFD: ::std::vec::Vec::new(),
            HGCGILABNDL: ::std::vec::Vec::new(),
            JNCBPDHCAHI: ::std::vec::Vec::new(),
            ACGKFEDNDFH: 0,
            KAEOJCOBIHC: 0,
            MKAIFJIBJIK: ::std::vec::Vec::new(),
            AMLDAILBMBO: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OOMGHIBBCBN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OOMGHIBBCBN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OOMGHIBBCBN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OOMGHIBBCBN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OOMGHIBBCBN.proto\x1a\x11BMPCJDEAIIH.proto\"\x89\x02\n\x0bOOMGHIBB\
    CBN\x12\x20\n\x0bHMJFCDLCIFD\x18\r\x20\x03(\rR\x0bHMJFCDLCIFD\x12.\n\x0b\
    HGCGILABNDL\x18\t\x20\x03(\x0b2\x0c.BMPCJDEAIIHR\x0bHGCGILABNDL\x12\x20\
    \n\x0bJNCBPDHCAHI\x18\x0c\x20\x03(\rR\x0bJNCBPDHCAHI\x12\x20\n\x0bACGKFE\
    DNDFH\x18\x0f\x20\x01(\rR\x0bACGKFEDNDFH\x12\x20\n\x0bKAEOJCOBIHC\x18\
    \x08\x20\x01(\rR\x0bKAEOJCOBIHC\x12\x20\n\x0bMKAIFJIBJIK\x18\x02\x20\x03\
    (\rR\x0bMKAIFJIBJIK\x12\x20\n\x0bAMLDAILBMBO\x18\x0b\x20\x03(\rR\x0bAMLD\
    AILBMBOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::BMPCJDEAIIH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OOMGHIBBCBN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
