// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FMELHEFCAJB.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FMELHEFCAJB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FMELHEFCAJB {
    // message fields
    // @@protoc_insertion_point(field:FMELHEFCAJB.KEFGBHBPCOO)
    pub KEFGBHBPCOO: i64,
    // @@protoc_insertion_point(field:FMELHEFCAJB.OKFKBJPEDNP)
    pub OKFKBJPEDNP: i64,
    // @@protoc_insertion_point(field:FMELHEFCAJB.GPPMNPLOEHI)
    pub GPPMNPLOEHI: u32,
    // @@protoc_insertion_point(field:FMELHEFCAJB.LIJCLNKPPLP)
    pub LIJCLNKPPLP: u32,
    // @@protoc_insertion_point(field:FMELHEFCAJB.OJBAILGKLBM)
    pub OJBAILGKLBM: ::protobuf::EnumOrUnknown<super::ECJEANMGCDM::ECJEANMGCDM>,
    // @@protoc_insertion_point(field:FMELHEFCAJB.NKECMFCFJAK)
    pub NKECMFCFJAK: bool,
    // @@protoc_insertion_point(field:FMELHEFCAJB.OPJNAPBPHOO)
    pub OPJNAPBPHOO: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FMELHEFCAJB.JAABPACOMBG)
    pub JAABPACOMBG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FMELHEFCAJB.IAGDNEFGGGM)
    pub IAGDNEFGGGM: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FMELHEFCAJB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FMELHEFCAJB {
    fn default() -> &'a FMELHEFCAJB {
        <FMELHEFCAJB as ::protobuf::Message>::default_instance()
    }
}

impl FMELHEFCAJB {
    pub fn new() -> FMELHEFCAJB {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KEFGBHBPCOO",
            |m: &FMELHEFCAJB| { &m.KEFGBHBPCOO },
            |m: &mut FMELHEFCAJB| { &mut m.KEFGBHBPCOO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OKFKBJPEDNP",
            |m: &FMELHEFCAJB| { &m.OKFKBJPEDNP },
            |m: &mut FMELHEFCAJB| { &mut m.OKFKBJPEDNP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GPPMNPLOEHI",
            |m: &FMELHEFCAJB| { &m.GPPMNPLOEHI },
            |m: &mut FMELHEFCAJB| { &mut m.GPPMNPLOEHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LIJCLNKPPLP",
            |m: &FMELHEFCAJB| { &m.LIJCLNKPPLP },
            |m: &mut FMELHEFCAJB| { &mut m.LIJCLNKPPLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OJBAILGKLBM",
            |m: &FMELHEFCAJB| { &m.OJBAILGKLBM },
            |m: &mut FMELHEFCAJB| { &mut m.OJBAILGKLBM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NKECMFCFJAK",
            |m: &FMELHEFCAJB| { &m.NKECMFCFJAK },
            |m: &mut FMELHEFCAJB| { &mut m.NKECMFCFJAK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OPJNAPBPHOO",
            |m: &FMELHEFCAJB| { &m.OPJNAPBPHOO },
            |m: &mut FMELHEFCAJB| { &mut m.OPJNAPBPHOO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JAABPACOMBG",
            |m: &FMELHEFCAJB| { &m.JAABPACOMBG },
            |m: &mut FMELHEFCAJB| { &mut m.JAABPACOMBG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IAGDNEFGGGM",
            |m: &FMELHEFCAJB| { &m.IAGDNEFGGGM },
            |m: &mut FMELHEFCAJB| { &mut m.IAGDNEFGGGM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FMELHEFCAJB>(
            "FMELHEFCAJB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FMELHEFCAJB {
    const NAME: &'static str = "FMELHEFCAJB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.KEFGBHBPCOO = is.read_int64()?;
                },
                56 => {
                    self.OKFKBJPEDNP = is.read_int64()?;
                },
                32 => {
                    self.GPPMNPLOEHI = is.read_uint32()?;
                },
                112 => {
                    self.LIJCLNKPPLP = is.read_uint32()?;
                },
                64 => {
                    self.OJBAILGKLBM = is.read_enum_or_unknown()?;
                },
                80 => {
                    self.NKECMFCFJAK = is.read_bool()?;
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.OPJNAPBPHOO)?;
                },
                88 => {
                    self.OPJNAPBPHOO.push(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.JAABPACOMBG)?;
                },
                48 => {
                    self.JAABPACOMBG.push(is.read_uint32()?);
                },
                120 => {
                    self.IAGDNEFGGGM = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.KEFGBHBPCOO != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.KEFGBHBPCOO);
        }
        if self.OKFKBJPEDNP != 0 {
            my_size += ::protobuf::rt::int64_size(7, self.OKFKBJPEDNP);
        }
        if self.GPPMNPLOEHI != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.GPPMNPLOEHI);
        }
        if self.LIJCLNKPPLP != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.LIJCLNKPPLP);
        }
        if self.OJBAILGKLBM != ::protobuf::EnumOrUnknown::new(super::ECJEANMGCDM::ECJEANMGCDM::PLAYER_RETURN_NONE) {
            my_size += ::protobuf::rt::int32_size(8, self.OJBAILGKLBM.value());
        }
        if self.NKECMFCFJAK != false {
            my_size += 1 + 1;
        }
        for value in &self.OPJNAPBPHOO {
            my_size += ::protobuf::rt::uint32_size(11, *value);
        };
        for value in &self.JAABPACOMBG {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        if self.IAGDNEFGGGM != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.IAGDNEFGGGM);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.KEFGBHBPCOO != 0 {
            os.write_int64(3, self.KEFGBHBPCOO)?;
        }
        if self.OKFKBJPEDNP != 0 {
            os.write_int64(7, self.OKFKBJPEDNP)?;
        }
        if self.GPPMNPLOEHI != 0 {
            os.write_uint32(4, self.GPPMNPLOEHI)?;
        }
        if self.LIJCLNKPPLP != 0 {
            os.write_uint32(14, self.LIJCLNKPPLP)?;
        }
        if self.OJBAILGKLBM != ::protobuf::EnumOrUnknown::new(super::ECJEANMGCDM::ECJEANMGCDM::PLAYER_RETURN_NONE) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.OJBAILGKLBM))?;
        }
        if self.NKECMFCFJAK != false {
            os.write_bool(10, self.NKECMFCFJAK)?;
        }
        for v in &self.OPJNAPBPHOO {
            os.write_uint32(11, *v)?;
        };
        for v in &self.JAABPACOMBG {
            os.write_uint32(6, *v)?;
        };
        if self.IAGDNEFGGGM != 0 {
            os.write_uint32(15, self.IAGDNEFGGGM)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FMELHEFCAJB {
        FMELHEFCAJB::new()
    }

    fn clear(&mut self) {
        self.KEFGBHBPCOO = 0;
        self.OKFKBJPEDNP = 0;
        self.GPPMNPLOEHI = 0;
        self.LIJCLNKPPLP = 0;
        self.OJBAILGKLBM = ::protobuf::EnumOrUnknown::new(super::ECJEANMGCDM::ECJEANMGCDM::PLAYER_RETURN_NONE);
        self.NKECMFCFJAK = false;
        self.OPJNAPBPHOO.clear();
        self.JAABPACOMBG.clear();
        self.IAGDNEFGGGM = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FMELHEFCAJB {
        static instance: FMELHEFCAJB = FMELHEFCAJB {
            KEFGBHBPCOO: 0,
            OKFKBJPEDNP: 0,
            GPPMNPLOEHI: 0,
            LIJCLNKPPLP: 0,
            OJBAILGKLBM: ::protobuf::EnumOrUnknown::from_i32(0),
            NKECMFCFJAK: false,
            OPJNAPBPHOO: ::std::vec::Vec::new(),
            JAABPACOMBG: ::std::vec::Vec::new(),
            IAGDNEFGGGM: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FMELHEFCAJB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FMELHEFCAJB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FMELHEFCAJB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FMELHEFCAJB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FMELHEFCAJB.proto\x1a\x11ECJEANMGCDM.proto\"\xcd\x02\n\x0bFMELHEFC\
    AJB\x12\x20\n\x0bKEFGBHBPCOO\x18\x03\x20\x01(\x03R\x0bKEFGBHBPCOO\x12\
    \x20\n\x0bOKFKBJPEDNP\x18\x07\x20\x01(\x03R\x0bOKFKBJPEDNP\x12\x20\n\x0b\
    GPPMNPLOEHI\x18\x04\x20\x01(\rR\x0bGPPMNPLOEHI\x12\x20\n\x0bLIJCLNKPPLP\
    \x18\x0e\x20\x01(\rR\x0bLIJCLNKPPLP\x12.\n\x0bOJBAILGKLBM\x18\x08\x20\
    \x01(\x0e2\x0c.ECJEANMGCDMR\x0bOJBAILGKLBM\x12\x20\n\x0bNKECMFCFJAK\x18\
    \n\x20\x01(\x08R\x0bNKECMFCFJAK\x12\x20\n\x0bOPJNAPBPHOO\x18\x0b\x20\x03\
    (\rR\x0bOPJNAPBPHOO\x12\x20\n\x0bJAABPACOMBG\x18\x06\x20\x03(\rR\x0bJAAB\
    PACOMBG\x12\x20\n\x0bIAGDNEFGGGM\x18\x0f\x20\x01(\rR\x0bIAGDNEFGGGMb\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ECJEANMGCDM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FMELHEFCAJB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
