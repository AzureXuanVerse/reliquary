// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ACOCEMFFEEE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ACOCEMFFEEE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ACOCEMFFEEE {
    // message fields
    // @@protoc_insertion_point(field:ACOCEMFFEEE.avatar_list)
    pub avatar_list: ::std::vec::Vec<super::EHCKKBFHGBA::EHCKKBFHGBA>,
    // @@protoc_insertion_point(field:ACOCEMFFEEE.LLNGIIGOMKO)
    pub LLNGIIGOMKO: ::std::vec::Vec<super::MHBPPJAGFJC::MHBPPJAGFJC>,
    // @@protoc_insertion_point(field:ACOCEMFFEEE.GABPEMANANE)
    pub GABPEMANANE: ::std::vec::Vec<super::GGLAGEOBBGK::GGLAGEOBBGK>,
    // @@protoc_insertion_point(field:ACOCEMFFEEE.MMMOHAJFMID)
    pub MMMOHAJFMID: u32,
    // @@protoc_insertion_point(field:ACOCEMFFEEE.PMNCCJDMNGH)
    pub PMNCCJDMNGH: ::std::collections::HashMap<u32, super::DEAJKAPPILD::DEAJKAPPILD>,
    // @@protoc_insertion_point(field:ACOCEMFFEEE.CGOBLNLGCMO)
    pub CGOBLNLGCMO: ::protobuf::MessageField<super::GDHEDNKIELE::GDHEDNKIELE>,
    // @@protoc_insertion_point(field:ACOCEMFFEEE.AMDKECNMJMH)
    pub AMDKECNMJMH: ::std::vec::Vec<super::EHCKKBFHGBA::EHCKKBFHGBA>,
    // @@protoc_insertion_point(field:ACOCEMFFEEE.OAHDOLHBPFK)
    pub OAHDOLHBPFK: ::protobuf::MessageField<super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>,
    // @@protoc_insertion_point(field:ACOCEMFFEEE.GIOGKGLBACA)
    pub GIOGKGLBACA: ::protobuf::MessageField<super::NPDPLEMGEFN::NPDPLEMGEFN>,
    // @@protoc_insertion_point(field:ACOCEMFFEEE.DDKIAPDKIDO)
    pub DDKIAPDKIDO: ::protobuf::MessageField<super::LKCBPGELLJJ::LKCBPGELLJJ>,
    // special fields
    // @@protoc_insertion_point(special_field:ACOCEMFFEEE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ACOCEMFFEEE {
    fn default() -> &'a ACOCEMFFEEE {
        <ACOCEMFFEEE as ::protobuf::Message>::default_instance()
    }
}

impl ACOCEMFFEEE {
    pub fn new() -> ACOCEMFFEEE {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &ACOCEMFFEEE| { &m.avatar_list },
            |m: &mut ACOCEMFFEEE| { &mut m.avatar_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LLNGIIGOMKO",
            |m: &ACOCEMFFEEE| { &m.LLNGIIGOMKO },
            |m: &mut ACOCEMFFEEE| { &mut m.LLNGIIGOMKO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GABPEMANANE",
            |m: &ACOCEMFFEEE| { &m.GABPEMANANE },
            |m: &mut ACOCEMFFEEE| { &mut m.GABPEMANANE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MMMOHAJFMID",
            |m: &ACOCEMFFEEE| { &m.MMMOHAJFMID },
            |m: &mut ACOCEMFFEEE| { &mut m.MMMOHAJFMID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "PMNCCJDMNGH",
            |m: &ACOCEMFFEEE| { &m.PMNCCJDMNGH },
            |m: &mut ACOCEMFFEEE| { &mut m.PMNCCJDMNGH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GDHEDNKIELE::GDHEDNKIELE>(
            "CGOBLNLGCMO",
            |m: &ACOCEMFFEEE| { &m.CGOBLNLGCMO },
            |m: &mut ACOCEMFFEEE| { &mut m.CGOBLNLGCMO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AMDKECNMJMH",
            |m: &ACOCEMFFEEE| { &m.AMDKECNMJMH },
            |m: &mut ACOCEMFFEEE| { &mut m.AMDKECNMJMH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>(
            "OAHDOLHBPFK",
            |m: &ACOCEMFFEEE| { &m.OAHDOLHBPFK },
            |m: &mut ACOCEMFFEEE| { &mut m.OAHDOLHBPFK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NPDPLEMGEFN::NPDPLEMGEFN>(
            "GIOGKGLBACA",
            |m: &ACOCEMFFEEE| { &m.GIOGKGLBACA },
            |m: &mut ACOCEMFFEEE| { &mut m.GIOGKGLBACA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LKCBPGELLJJ::LKCBPGELLJJ>(
            "DDKIAPDKIDO",
            |m: &ACOCEMFFEEE| { &m.DDKIAPDKIDO },
            |m: &mut ACOCEMFFEEE| { &mut m.DDKIAPDKIDO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ACOCEMFFEEE>(
            "ACOCEMFFEEE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ACOCEMFFEEE {
    const NAME: &'static str = "ACOCEMFFEEE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.avatar_list.push(is.read_message()?);
                },
                18 => {
                    self.LLNGIIGOMKO.push(is.read_message()?);
                },
                26 => {
                    self.GABPEMANANE.push(is.read_message()?);
                },
                56 => {
                    self.MMMOHAJFMID = is.read_uint32()?;
                },
                74 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.PMNCCJDMNGH.insert(key, value);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CGOBLNLGCMO)?;
                },
                90 => {
                    self.AMDKECNMJMH.push(is.read_message()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OAHDOLHBPFK)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GIOGKGLBACA)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DDKIAPDKIDO)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.avatar_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.LLNGIIGOMKO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.GABPEMANANE {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.MMMOHAJFMID != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.MMMOHAJFMID);
        }
        for (k, v) in &self.PMNCCJDMNGH {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.CGOBLNLGCMO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.AMDKECNMJMH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.OAHDOLHBPFK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.GIOGKGLBACA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DDKIAPDKIDO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.avatar_list {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.LLNGIIGOMKO {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.GABPEMANANE {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.MMMOHAJFMID != 0 {
            os.write_uint32(7, self.MMMOHAJFMID)?;
        }
        for (k, v) in &self.PMNCCJDMNGH {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(74)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.CGOBLNLGCMO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.AMDKECNMJMH {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if let Some(v) = self.OAHDOLHBPFK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.GIOGKGLBACA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.DDKIAPDKIDO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ACOCEMFFEEE {
        ACOCEMFFEEE::new()
    }

    fn clear(&mut self) {
        self.avatar_list.clear();
        self.LLNGIIGOMKO.clear();
        self.GABPEMANANE.clear();
        self.MMMOHAJFMID = 0;
        self.PMNCCJDMNGH.clear();
        self.CGOBLNLGCMO.clear();
        self.AMDKECNMJMH.clear();
        self.OAHDOLHBPFK.clear();
        self.GIOGKGLBACA.clear();
        self.DDKIAPDKIDO.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ACOCEMFFEEE {
        static instance: ::protobuf::rt::Lazy<ACOCEMFFEEE> = ::protobuf::rt::Lazy::new();
        instance.get(ACOCEMFFEEE::new)
    }
}

impl ::protobuf::MessageFull for ACOCEMFFEEE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ACOCEMFFEEE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ACOCEMFFEEE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ACOCEMFFEEE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ACOCEMFFEEE.proto\x1a\x11DEAJKAPPILD.proto\x1a\x11EHCKKBFHGBA.prot\
    o\x1a\x1bEvolveBuildBattleInfo.proto\x1a\x11GDHEDNKIELE.proto\x1a\x11GGL\
    AGEOBBGK.proto\x1a\x11LKCBPGELLJJ.proto\x1a\x11MHBPPJAGFJC.proto\x1a\x11\
    NPDPLEMGEFN.proto\"\xc7\x04\n\x0bACOCEMFFEEE\x12-\n\x0bavatar_list\x18\
    \x01\x20\x03(\x0b2\x0c.EHCKKBFHGBAR\navatarList\x12.\n\x0bLLNGIIGOMKO\
    \x18\x02\x20\x03(\x0b2\x0c.MHBPPJAGFJCR\x0bLLNGIIGOMKO\x12.\n\x0bGABPEMA\
    NANE\x18\x03\x20\x03(\x0b2\x0c.GGLAGEOBBGKR\x0bGABPEMANANE\x12\x20\n\x0b\
    MMMOHAJFMID\x18\x07\x20\x01(\rR\x0bMMMOHAJFMID\x12?\n\x0bPMNCCJDMNGH\x18\
    \t\x20\x03(\x0b2\x1d.ACOCEMFFEEE.PMNCCJDMNGHEntryR\x0bPMNCCJDMNGH\x12.\n\
    \x0bCGOBLNLGCMO\x18\n\x20\x01(\x0b2\x0c.GDHEDNKIELER\x0bCGOBLNLGCMO\x12.\
    \n\x0bAMDKECNMJMH\x18\x0b\x20\x03(\x0b2\x0c.EHCKKBFHGBAR\x0bAMDKECNMJMH\
    \x128\n\x0bOAHDOLHBPFK\x18\x0c\x20\x01(\x0b2\x16.EvolveBuildBattleInfoR\
    \x0bOAHDOLHBPFK\x12.\n\x0bGIOGKGLBACA\x18\r\x20\x01(\x0b2\x0c.NPDPLEMGEF\
    NR\x0bGIOGKGLBACA\x12.\n\x0bDDKIAPDKIDO\x18\x0e\x20\x01(\x0b2\x0c.LKCBPG\
    ELLJJR\x0bDDKIAPDKIDO\x1aL\n\x10PMNCCJDMNGHEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\rR\x03key\x12\"\n\x05value\x18\x02\x20\x01(\x0b2\x0c.DEAJK\
    APPILDR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::DEAJKAPPILD::file_descriptor().clone());
            deps.push(super::EHCKKBFHGBA::file_descriptor().clone());
            deps.push(super::EvolveBuildBattleInfo::file_descriptor().clone());
            deps.push(super::GDHEDNKIELE::file_descriptor().clone());
            deps.push(super::GGLAGEOBBGK::file_descriptor().clone());
            deps.push(super::LKCBPGELLJJ::file_descriptor().clone());
            deps.push(super::MHBPPJAGFJC::file_descriptor().clone());
            deps.push(super::NPDPLEMGEFN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ACOCEMFFEEE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
