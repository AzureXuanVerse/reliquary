// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GKOBEBCEHHJ.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GKOBEBCEHHJ)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GKOBEBCEHHJ {
    // message fields
    // @@protoc_insertion_point(field:GKOBEBCEHHJ.INKHHPLJBND)
    pub INKHHPLJBND: bool,
    // @@protoc_insertion_point(field:GKOBEBCEHHJ.HFEFMIPOLOJ)
    pub HFEFMIPOLOJ: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GKOBEBCEHHJ.OMBLHJDKEJA)
    pub OMBLHJDKEJA: u32,
    // @@protoc_insertion_point(field:GKOBEBCEHHJ.OLFJFJOJNAP)
    pub OLFJFJOJNAP: u32,
    // @@protoc_insertion_point(field:GKOBEBCEHHJ.NKECMFCFJAK)
    pub NKECMFCFJAK: bool,
    // @@protoc_insertion_point(field:GKOBEBCEHHJ.AEBICNOMFBH)
    pub AEBICNOMFBH: bool,
    // @@protoc_insertion_point(field:GKOBEBCEHHJ.HCNNCHHGMDF)
    pub HCNNCHHGMDF: ::protobuf::MessageField<super::EINJOJNHBDO::EINJOJNHBDO>,
    // @@protoc_insertion_point(field:GKOBEBCEHHJ.DJEOIECOFJM)
    pub DJEOIECOFJM: ::protobuf::MessageField<super::IPKCDKHDIPI::IPKCDKHDIPI>,
    // special fields
    // @@protoc_insertion_point(special_field:GKOBEBCEHHJ.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GKOBEBCEHHJ {
    fn default() -> &'a GKOBEBCEHHJ {
        <GKOBEBCEHHJ as ::protobuf::Message>::default_instance()
    }
}

impl GKOBEBCEHHJ {
    pub fn new() -> GKOBEBCEHHJ {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "INKHHPLJBND",
            |m: &GKOBEBCEHHJ| { &m.INKHHPLJBND },
            |m: &mut GKOBEBCEHHJ| { &mut m.INKHHPLJBND },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HFEFMIPOLOJ",
            |m: &GKOBEBCEHHJ| { &m.HFEFMIPOLOJ },
            |m: &mut GKOBEBCEHHJ| { &mut m.HFEFMIPOLOJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OMBLHJDKEJA",
            |m: &GKOBEBCEHHJ| { &m.OMBLHJDKEJA },
            |m: &mut GKOBEBCEHHJ| { &mut m.OMBLHJDKEJA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OLFJFJOJNAP",
            |m: &GKOBEBCEHHJ| { &m.OLFJFJOJNAP },
            |m: &mut GKOBEBCEHHJ| { &mut m.OLFJFJOJNAP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NKECMFCFJAK",
            |m: &GKOBEBCEHHJ| { &m.NKECMFCFJAK },
            |m: &mut GKOBEBCEHHJ| { &mut m.NKECMFCFJAK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AEBICNOMFBH",
            |m: &GKOBEBCEHHJ| { &m.AEBICNOMFBH },
            |m: &mut GKOBEBCEHHJ| { &mut m.AEBICNOMFBH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EINJOJNHBDO::EINJOJNHBDO>(
            "HCNNCHHGMDF",
            |m: &GKOBEBCEHHJ| { &m.HCNNCHHGMDF },
            |m: &mut GKOBEBCEHHJ| { &mut m.HCNNCHHGMDF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IPKCDKHDIPI::IPKCDKHDIPI>(
            "DJEOIECOFJM",
            |m: &GKOBEBCEHHJ| { &m.DJEOIECOFJM },
            |m: &mut GKOBEBCEHHJ| { &mut m.DJEOIECOFJM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GKOBEBCEHHJ>(
            "GKOBEBCEHHJ",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GKOBEBCEHHJ {
    const NAME: &'static str = "GKOBEBCEHHJ";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.INKHHPLJBND = is.read_bool()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.HFEFMIPOLOJ)?;
                },
                40 => {
                    self.HFEFMIPOLOJ.push(is.read_uint32()?);
                },
                64 => {
                    self.OMBLHJDKEJA = is.read_uint32()?;
                },
                120 => {
                    self.OLFJFJOJNAP = is.read_uint32()?;
                },
                80 => {
                    self.NKECMFCFJAK = is.read_bool()?;
                },
                96 => {
                    self.AEBICNOMFBH = is.read_bool()?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HCNNCHHGMDF)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DJEOIECOFJM)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.INKHHPLJBND != false {
            my_size += 1 + 1;
        }
        for value in &self.HFEFMIPOLOJ {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        if self.OMBLHJDKEJA != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.OMBLHJDKEJA);
        }
        if self.OLFJFJOJNAP != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.OLFJFJOJNAP);
        }
        if self.NKECMFCFJAK != false {
            my_size += 1 + 1;
        }
        if self.AEBICNOMFBH != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.HCNNCHHGMDF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DJEOIECOFJM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.INKHHPLJBND != false {
            os.write_bool(9, self.INKHHPLJBND)?;
        }
        for v in &self.HFEFMIPOLOJ {
            os.write_uint32(5, *v)?;
        };
        if self.OMBLHJDKEJA != 0 {
            os.write_uint32(8, self.OMBLHJDKEJA)?;
        }
        if self.OLFJFJOJNAP != 0 {
            os.write_uint32(15, self.OLFJFJOJNAP)?;
        }
        if self.NKECMFCFJAK != false {
            os.write_bool(10, self.NKECMFCFJAK)?;
        }
        if self.AEBICNOMFBH != false {
            os.write_bool(12, self.AEBICNOMFBH)?;
        }
        if let Some(v) = self.HCNNCHHGMDF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.DJEOIECOFJM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GKOBEBCEHHJ {
        GKOBEBCEHHJ::new()
    }

    fn clear(&mut self) {
        self.INKHHPLJBND = false;
        self.HFEFMIPOLOJ.clear();
        self.OMBLHJDKEJA = 0;
        self.OLFJFJOJNAP = 0;
        self.NKECMFCFJAK = false;
        self.AEBICNOMFBH = false;
        self.HCNNCHHGMDF.clear();
        self.DJEOIECOFJM.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GKOBEBCEHHJ {
        static instance: GKOBEBCEHHJ = GKOBEBCEHHJ {
            INKHHPLJBND: false,
            HFEFMIPOLOJ: ::std::vec::Vec::new(),
            OMBLHJDKEJA: 0,
            OLFJFJOJNAP: 0,
            NKECMFCFJAK: false,
            AEBICNOMFBH: false,
            HCNNCHHGMDF: ::protobuf::MessageField::none(),
            DJEOIECOFJM: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GKOBEBCEHHJ {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GKOBEBCEHHJ").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GKOBEBCEHHJ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GKOBEBCEHHJ {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GKOBEBCEHHJ.proto\x1a\x11EINJOJNHBDO.proto\x1a\x11IPKCDKHDIPI.prot\
    o\"\xb9\x02\n\x0bGKOBEBCEHHJ\x12\x20\n\x0bINKHHPLJBND\x18\t\x20\x01(\x08\
    R\x0bINKHHPLJBND\x12\x20\n\x0bHFEFMIPOLOJ\x18\x05\x20\x03(\rR\x0bHFEFMIP\
    OLOJ\x12\x20\n\x0bOMBLHJDKEJA\x18\x08\x20\x01(\rR\x0bOMBLHJDKEJA\x12\x20\
    \n\x0bOLFJFJOJNAP\x18\x0f\x20\x01(\rR\x0bOLFJFJOJNAP\x12\x20\n\x0bNKECMF\
    CFJAK\x18\n\x20\x01(\x08R\x0bNKECMFCFJAK\x12\x20\n\x0bAEBICNOMFBH\x18\
    \x0c\x20\x01(\x08R\x0bAEBICNOMFBH\x12.\n\x0bHCNNCHHGMDF\x18\x0e\x20\x01(\
    \x0b2\x0c.EINJOJNHBDOR\x0bHCNNCHHGMDF\x12.\n\x0bDJEOIECOFJM\x18\x07\x20\
    \x01(\x0b2\x0c.IPKCDKHDIPIR\x0bDJEOIECOFJMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::EINJOJNHBDO::file_descriptor().clone());
            deps.push(super::IPKCDKHDIPI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GKOBEBCEHHJ::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
