// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChessRogueCell.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChessRogueCell)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChessRogueCell {
    // message fields
    // @@protoc_insertion_point(field:ChessRogueCell.JLOBGDKNJLN)
    pub JLOBGDKNJLN: u32,
    // @@protoc_insertion_point(field:ChessRogueCell.NNMNHHPJBDB)
    pub NNMNHHPJBDB: u32,
    // @@protoc_insertion_point(field:ChessRogueCell.is_unlocked)
    pub is_unlocked: bool,
    // @@protoc_insertion_point(field:ChessRogueCell.PNKFAINKKCE)
    pub PNKFAINKKCE: u32,
    // @@protoc_insertion_point(field:ChessRogueCell.FOKKJJADPEA)
    pub FOKKJJADPEA: u32,
    // @@protoc_insertion_point(field:ChessRogueCell.NLBGDNLIONI)
    pub NLBGDNLIONI: u32,
    // @@protoc_insertion_point(field:ChessRogueCell.IIJOCONHKND)
    pub IIJOCONHKND: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueCell.entrance_id)
    pub entrance_id: u32,
    // @@protoc_insertion_point(field:ChessRogueCell.new_room_id)
    pub new_room_id: u32,
    // @@protoc_insertion_point(field:ChessRogueCell.cell_id)
    pub cell_id: u32,
    // @@protoc_insertion_point(field:ChessRogueCell.PMBLMGDFGAN)
    pub PMBLMGDFGAN: bool,
    // special fields
    // @@protoc_insertion_point(special_field:ChessRogueCell.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChessRogueCell {
    fn default() -> &'a ChessRogueCell {
        <ChessRogueCell as ::protobuf::Message>::default_instance()
    }
}

impl ChessRogueCell {
    pub fn new() -> ChessRogueCell {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JLOBGDKNJLN",
            |m: &ChessRogueCell| { &m.JLOBGDKNJLN },
            |m: &mut ChessRogueCell| { &mut m.JLOBGDKNJLN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NNMNHHPJBDB",
            |m: &ChessRogueCell| { &m.NNMNHHPJBDB },
            |m: &mut ChessRogueCell| { &mut m.NNMNHHPJBDB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_unlocked",
            |m: &ChessRogueCell| { &m.is_unlocked },
            |m: &mut ChessRogueCell| { &mut m.is_unlocked },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PNKFAINKKCE",
            |m: &ChessRogueCell| { &m.PNKFAINKKCE },
            |m: &mut ChessRogueCell| { &mut m.PNKFAINKKCE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FOKKJJADPEA",
            |m: &ChessRogueCell| { &m.FOKKJJADPEA },
            |m: &mut ChessRogueCell| { &mut m.FOKKJJADPEA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NLBGDNLIONI",
            |m: &ChessRogueCell| { &m.NLBGDNLIONI },
            |m: &mut ChessRogueCell| { &mut m.NLBGDNLIONI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IIJOCONHKND",
            |m: &ChessRogueCell| { &m.IIJOCONHKND },
            |m: &mut ChessRogueCell| { &mut m.IIJOCONHKND },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entrance_id",
            |m: &ChessRogueCell| { &m.entrance_id },
            |m: &mut ChessRogueCell| { &mut m.entrance_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "new_room_id",
            |m: &ChessRogueCell| { &m.new_room_id },
            |m: &mut ChessRogueCell| { &mut m.new_room_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cell_id",
            |m: &ChessRogueCell| { &m.cell_id },
            |m: &mut ChessRogueCell| { &mut m.cell_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PMBLMGDFGAN",
            |m: &ChessRogueCell| { &m.PMBLMGDFGAN },
            |m: &mut ChessRogueCell| { &mut m.PMBLMGDFGAN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChessRogueCell>(
            "ChessRogueCell",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChessRogueCell {
    const NAME: &'static str = "ChessRogueCell";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                80 => {
                    self.JLOBGDKNJLN = is.read_uint32()?;
                },
                16 => {
                    self.NNMNHHPJBDB = is.read_uint32()?;
                },
                64 => {
                    self.is_unlocked = is.read_bool()?;
                },
                56 => {
                    self.PNKFAINKKCE = is.read_uint32()?;
                },
                40 => {
                    self.FOKKJJADPEA = is.read_uint32()?;
                },
                24 => {
                    self.NLBGDNLIONI = is.read_uint32()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.IIJOCONHKND)?;
                },
                32 => {
                    self.IIJOCONHKND.push(is.read_uint32()?);
                },
                8 => {
                    self.entrance_id = is.read_uint32()?;
                },
                88 => {
                    self.new_room_id = is.read_uint32()?;
                },
                72 => {
                    self.cell_id = is.read_uint32()?;
                },
                48 => {
                    self.PMBLMGDFGAN = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.JLOBGDKNJLN != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.JLOBGDKNJLN);
        }
        if self.NNMNHHPJBDB != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.NNMNHHPJBDB);
        }
        if self.is_unlocked != false {
            my_size += 1 + 1;
        }
        if self.PNKFAINKKCE != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.PNKFAINKKCE);
        }
        if self.FOKKJJADPEA != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.FOKKJJADPEA);
        }
        if self.NLBGDNLIONI != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.NLBGDNLIONI);
        }
        for value in &self.IIJOCONHKND {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        if self.entrance_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.entrance_id);
        }
        if self.new_room_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.new_room_id);
        }
        if self.cell_id != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.cell_id);
        }
        if self.PMBLMGDFGAN != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.JLOBGDKNJLN != 0 {
            os.write_uint32(10, self.JLOBGDKNJLN)?;
        }
        if self.NNMNHHPJBDB != 0 {
            os.write_uint32(2, self.NNMNHHPJBDB)?;
        }
        if self.is_unlocked != false {
            os.write_bool(8, self.is_unlocked)?;
        }
        if self.PNKFAINKKCE != 0 {
            os.write_uint32(7, self.PNKFAINKKCE)?;
        }
        if self.FOKKJJADPEA != 0 {
            os.write_uint32(5, self.FOKKJJADPEA)?;
        }
        if self.NLBGDNLIONI != 0 {
            os.write_uint32(3, self.NLBGDNLIONI)?;
        }
        for v in &self.IIJOCONHKND {
            os.write_uint32(4, *v)?;
        };
        if self.entrance_id != 0 {
            os.write_uint32(1, self.entrance_id)?;
        }
        if self.new_room_id != 0 {
            os.write_uint32(11, self.new_room_id)?;
        }
        if self.cell_id != 0 {
            os.write_uint32(9, self.cell_id)?;
        }
        if self.PMBLMGDFGAN != false {
            os.write_bool(6, self.PMBLMGDFGAN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChessRogueCell {
        ChessRogueCell::new()
    }

    fn clear(&mut self) {
        self.JLOBGDKNJLN = 0;
        self.NNMNHHPJBDB = 0;
        self.is_unlocked = false;
        self.PNKFAINKKCE = 0;
        self.FOKKJJADPEA = 0;
        self.NLBGDNLIONI = 0;
        self.IIJOCONHKND.clear();
        self.entrance_id = 0;
        self.new_room_id = 0;
        self.cell_id = 0;
        self.PMBLMGDFGAN = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChessRogueCell {
        static instance: ChessRogueCell = ChessRogueCell {
            JLOBGDKNJLN: 0,
            NNMNHHPJBDB: 0,
            is_unlocked: false,
            PNKFAINKKCE: 0,
            FOKKJJADPEA: 0,
            NLBGDNLIONI: 0,
            IIJOCONHKND: ::std::vec::Vec::new(),
            entrance_id: 0,
            new_room_id: 0,
            cell_id: 0,
            PMBLMGDFGAN: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChessRogueCell {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChessRogueCell").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChessRogueCell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChessRogueCell {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14ChessRogueCell.proto\"\xf9\x02\n\x0eChessRogueCell\x12\x20\n\x0bJL\
    OBGDKNJLN\x18\n\x20\x01(\rR\x0bJLOBGDKNJLN\x12\x20\n\x0bNNMNHHPJBDB\x18\
    \x02\x20\x01(\rR\x0bNNMNHHPJBDB\x12\x1f\n\x0bis_unlocked\x18\x08\x20\x01\
    (\x08R\nisUnlocked\x12\x20\n\x0bPNKFAINKKCE\x18\x07\x20\x01(\rR\x0bPNKFA\
    INKKCE\x12\x20\n\x0bFOKKJJADPEA\x18\x05\x20\x01(\rR\x0bFOKKJJADPEA\x12\
    \x20\n\x0bNLBGDNLIONI\x18\x03\x20\x01(\rR\x0bNLBGDNLIONI\x12\x20\n\x0bII\
    JOCONHKND\x18\x04\x20\x03(\rR\x0bIIJOCONHKND\x12\x1f\n\x0bentrance_id\
    \x18\x01\x20\x01(\rR\nentranceId\x12\x1e\n\x0bnew_room_id\x18\x0b\x20\
    \x01(\rR\tnewRoomId\x12\x17\n\x07cell_id\x18\t\x20\x01(\rR\x06cellId\x12\
    \x20\n\x0bPMBLMGDFGAN\x18\x06\x20\x01(\x08R\x0bPMBLMGDFGANB\x15\n\x13emu\
    .lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChessRogueCell::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
