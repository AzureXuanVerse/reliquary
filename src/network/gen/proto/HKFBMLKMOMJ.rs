// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HKFBMLKMOMJ.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HKFBMLKMOMJ)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HKFBMLKMOMJ {
    // message fields
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.GDGHFKMDIBB)
    pub GDGHFKMDIBB: u32,
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.AFJEDLHMOHA)
    pub AFJEDLHMOHA: bool,
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.FIGBHJOFBNE)
    pub FIGBHJOFBNE: u32,
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.INJIEFFNELN)
    pub INJIEFFNELN: u32,
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.EMALNMLGANJ)
    pub EMALNMLGANJ: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.GPPHJGGFMCB)
    pub GPPHJGGFMCB: ::std::vec::Vec<super::MMLBIBPHBPL::MMLBIBPHBPL>,
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.BNPOOOEJBMA)
    pub BNPOOOEJBMA: u32,
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.CIHNMECIFNI)
    pub CIHNMECIFNI: u32,
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.FCMILJBOHLP)
    pub FCMILJBOHLP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HKFBMLKMOMJ.GPKEAKPHIPA)
    pub GPKEAKPHIPA: u32,
    // special fields
    // @@protoc_insertion_point(special_field:HKFBMLKMOMJ.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HKFBMLKMOMJ {
    fn default() -> &'a HKFBMLKMOMJ {
        <HKFBMLKMOMJ as ::protobuf::Message>::default_instance()
    }
}

impl HKFBMLKMOMJ {
    pub fn new() -> HKFBMLKMOMJ {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GDGHFKMDIBB",
            |m: &HKFBMLKMOMJ| { &m.GDGHFKMDIBB },
            |m: &mut HKFBMLKMOMJ| { &mut m.GDGHFKMDIBB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AFJEDLHMOHA",
            |m: &HKFBMLKMOMJ| { &m.AFJEDLHMOHA },
            |m: &mut HKFBMLKMOMJ| { &mut m.AFJEDLHMOHA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FIGBHJOFBNE",
            |m: &HKFBMLKMOMJ| { &m.FIGBHJOFBNE },
            |m: &mut HKFBMLKMOMJ| { &mut m.FIGBHJOFBNE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "INJIEFFNELN",
            |m: &HKFBMLKMOMJ| { &m.INJIEFFNELN },
            |m: &mut HKFBMLKMOMJ| { &mut m.INJIEFFNELN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EMALNMLGANJ",
            |m: &HKFBMLKMOMJ| { &m.EMALNMLGANJ },
            |m: &mut HKFBMLKMOMJ| { &mut m.EMALNMLGANJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GPPHJGGFMCB",
            |m: &HKFBMLKMOMJ| { &m.GPPHJGGFMCB },
            |m: &mut HKFBMLKMOMJ| { &mut m.GPPHJGGFMCB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BNPOOOEJBMA",
            |m: &HKFBMLKMOMJ| { &m.BNPOOOEJBMA },
            |m: &mut HKFBMLKMOMJ| { &mut m.BNPOOOEJBMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CIHNMECIFNI",
            |m: &HKFBMLKMOMJ| { &m.CIHNMECIFNI },
            |m: &mut HKFBMLKMOMJ| { &mut m.CIHNMECIFNI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FCMILJBOHLP",
            |m: &HKFBMLKMOMJ| { &m.FCMILJBOHLP },
            |m: &mut HKFBMLKMOMJ| { &mut m.FCMILJBOHLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GPKEAKPHIPA",
            |m: &HKFBMLKMOMJ| { &m.GPKEAKPHIPA },
            |m: &mut HKFBMLKMOMJ| { &mut m.GPKEAKPHIPA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HKFBMLKMOMJ>(
            "HKFBMLKMOMJ",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HKFBMLKMOMJ {
    const NAME: &'static str = "HKFBMLKMOMJ";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.GDGHFKMDIBB = is.read_uint32()?;
                },
                8 => {
                    self.AFJEDLHMOHA = is.read_bool()?;
                },
                40 => {
                    self.FIGBHJOFBNE = is.read_uint32()?;
                },
                88 => {
                    self.INJIEFFNELN = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.EMALNMLGANJ)?;
                },
                72 => {
                    self.EMALNMLGANJ.push(is.read_uint32()?);
                },
                26 => {
                    self.GPPHJGGFMCB.push(is.read_message()?);
                },
                120 => {
                    self.BNPOOOEJBMA = is.read_uint32()?;
                },
                96 => {
                    self.CIHNMECIFNI = is.read_uint32()?;
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.FCMILJBOHLP)?;
                },
                104 => {
                    self.FCMILJBOHLP.push(is.read_uint32()?);
                },
                80 => {
                    self.GPKEAKPHIPA = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.GDGHFKMDIBB != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.GDGHFKMDIBB);
        }
        if self.AFJEDLHMOHA != false {
            my_size += 1 + 1;
        }
        if self.FIGBHJOFBNE != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.FIGBHJOFBNE);
        }
        if self.INJIEFFNELN != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.INJIEFFNELN);
        }
        for value in &self.EMALNMLGANJ {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        for value in &self.GPPHJGGFMCB {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.BNPOOOEJBMA != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.BNPOOOEJBMA);
        }
        if self.CIHNMECIFNI != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.CIHNMECIFNI);
        }
        for value in &self.FCMILJBOHLP {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        if self.GPKEAKPHIPA != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.GPKEAKPHIPA);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.GDGHFKMDIBB != 0 {
            os.write_uint32(6, self.GDGHFKMDIBB)?;
        }
        if self.AFJEDLHMOHA != false {
            os.write_bool(1, self.AFJEDLHMOHA)?;
        }
        if self.FIGBHJOFBNE != 0 {
            os.write_uint32(5, self.FIGBHJOFBNE)?;
        }
        if self.INJIEFFNELN != 0 {
            os.write_uint32(11, self.INJIEFFNELN)?;
        }
        for v in &self.EMALNMLGANJ {
            os.write_uint32(9, *v)?;
        };
        for v in &self.GPPHJGGFMCB {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.BNPOOOEJBMA != 0 {
            os.write_uint32(15, self.BNPOOOEJBMA)?;
        }
        if self.CIHNMECIFNI != 0 {
            os.write_uint32(12, self.CIHNMECIFNI)?;
        }
        for v in &self.FCMILJBOHLP {
            os.write_uint32(13, *v)?;
        };
        if self.GPKEAKPHIPA != 0 {
            os.write_uint32(10, self.GPKEAKPHIPA)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HKFBMLKMOMJ {
        HKFBMLKMOMJ::new()
    }

    fn clear(&mut self) {
        self.GDGHFKMDIBB = 0;
        self.AFJEDLHMOHA = false;
        self.FIGBHJOFBNE = 0;
        self.INJIEFFNELN = 0;
        self.EMALNMLGANJ.clear();
        self.GPPHJGGFMCB.clear();
        self.BNPOOOEJBMA = 0;
        self.CIHNMECIFNI = 0;
        self.FCMILJBOHLP.clear();
        self.GPKEAKPHIPA = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HKFBMLKMOMJ {
        static instance: HKFBMLKMOMJ = HKFBMLKMOMJ {
            GDGHFKMDIBB: 0,
            AFJEDLHMOHA: false,
            FIGBHJOFBNE: 0,
            INJIEFFNELN: 0,
            EMALNMLGANJ: ::std::vec::Vec::new(),
            GPPHJGGFMCB: ::std::vec::Vec::new(),
            BNPOOOEJBMA: 0,
            CIHNMECIFNI: 0,
            FCMILJBOHLP: ::std::vec::Vec::new(),
            GPKEAKPHIPA: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HKFBMLKMOMJ {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HKFBMLKMOMJ").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HKFBMLKMOMJ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HKFBMLKMOMJ {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HKFBMLKMOMJ.proto\x1a\x11MMLBIBPHBPL.proto\"\xef\x02\n\x0bHKFBMLKM\
    OMJ\x12\x20\n\x0bGDGHFKMDIBB\x18\x06\x20\x01(\rR\x0bGDGHFKMDIBB\x12\x20\
    \n\x0bAFJEDLHMOHA\x18\x01\x20\x01(\x08R\x0bAFJEDLHMOHA\x12\x20\n\x0bFIGB\
    HJOFBNE\x18\x05\x20\x01(\rR\x0bFIGBHJOFBNE\x12\x20\n\x0bINJIEFFNELN\x18\
    \x0b\x20\x01(\rR\x0bINJIEFFNELN\x12\x20\n\x0bEMALNMLGANJ\x18\t\x20\x03(\
    \rR\x0bEMALNMLGANJ\x12.\n\x0bGPPHJGGFMCB\x18\x03\x20\x03(\x0b2\x0c.MMLBI\
    BPHBPLR\x0bGPPHJGGFMCB\x12\x20\n\x0bBNPOOOEJBMA\x18\x0f\x20\x01(\rR\x0bB\
    NPOOOEJBMA\x12\x20\n\x0bCIHNMECIFNI\x18\x0c\x20\x01(\rR\x0bCIHNMECIFNI\
    \x12\x20\n\x0bFCMILJBOHLP\x18\r\x20\x03(\rR\x0bFCMILJBOHLP\x12\x20\n\x0b\
    GPKEAKPHIPA\x18\n\x20\x01(\rR\x0bGPKEAKPHIPAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::MMLBIBPHBPL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HKFBMLKMOMJ::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
