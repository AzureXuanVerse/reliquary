// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MAOGFDKDCKM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:MAOGFDKDCKM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MAOGFDKDCKM {
    // message fields
    // @@protoc_insertion_point(field:MAOGFDKDCKM.DPLGCEKJACK)
    pub DPLGCEKJACK: f32,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.KNCHEHIIJNN)
    pub KNCHEHIIJNN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.HALGPJMCMFP)
    pub HALGPJMCMFP: ::protobuf::EnumOrUnknown<super::PPIFFKJEJJA::PPIFFKJEJJA>,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.LGPIEMDLHJM)
    pub LGPIEMDLHJM: ::protobuf::MessageField<super::LBAOGIBPJOP::LBAOGIBPJOP>,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.OMKKPGFJHFE)
    pub OMKKPGFJHFE: bool,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.OLKMCBJFLEJ)
    pub OLKMCBJFLEJ: ::std::vec::Vec<super::HBGHAOPBKJP::HBGHAOPBKJP>,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.IEHFHKMDAGC)
    pub IEHFHKMDAGC: u32,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.CHLLMFJGPPA)
    pub CHLLMFJGPPA: u32,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.BBDOPLEKIAC)
    pub BBDOPLEKIAC: ::protobuf::MessageField<super::EOJLNGDDLNN::EOJLNGDDLNN>,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.DIBPGGOOGPK)
    pub DIBPGGOOGPK: ::std::vec::Vec<super::HBGHAOPBKJP::HBGHAOPBKJP>,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.KHCMOFPFOAK)
    pub KHCMOFPFOAK: ::protobuf::MessageField<super::EOJLNGDDLNN::EOJLNGDDLNN>,
    // @@protoc_insertion_point(field:MAOGFDKDCKM.HMFFHGBKOGL)
    pub HMFFHGBKOGL: u32,
    // special fields
    // @@protoc_insertion_point(special_field:MAOGFDKDCKM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MAOGFDKDCKM {
    fn default() -> &'a MAOGFDKDCKM {
        <MAOGFDKDCKM as ::protobuf::Message>::default_instance()
    }
}

impl MAOGFDKDCKM {
    pub fn new() -> MAOGFDKDCKM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DPLGCEKJACK",
            |m: &MAOGFDKDCKM| { &m.DPLGCEKJACK },
            |m: &mut MAOGFDKDCKM| { &mut m.DPLGCEKJACK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KNCHEHIIJNN",
            |m: &MAOGFDKDCKM| { &m.KNCHEHIIJNN },
            |m: &mut MAOGFDKDCKM| { &mut m.KNCHEHIIJNN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HALGPJMCMFP",
            |m: &MAOGFDKDCKM| { &m.HALGPJMCMFP },
            |m: &mut MAOGFDKDCKM| { &mut m.HALGPJMCMFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LBAOGIBPJOP::LBAOGIBPJOP>(
            "LGPIEMDLHJM",
            |m: &MAOGFDKDCKM| { &m.LGPIEMDLHJM },
            |m: &mut MAOGFDKDCKM| { &mut m.LGPIEMDLHJM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OMKKPGFJHFE",
            |m: &MAOGFDKDCKM| { &m.OMKKPGFJHFE },
            |m: &mut MAOGFDKDCKM| { &mut m.OMKKPGFJHFE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OLKMCBJFLEJ",
            |m: &MAOGFDKDCKM| { &m.OLKMCBJFLEJ },
            |m: &mut MAOGFDKDCKM| { &mut m.OLKMCBJFLEJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IEHFHKMDAGC",
            |m: &MAOGFDKDCKM| { &m.IEHFHKMDAGC },
            |m: &mut MAOGFDKDCKM| { &mut m.IEHFHKMDAGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CHLLMFJGPPA",
            |m: &MAOGFDKDCKM| { &m.CHLLMFJGPPA },
            |m: &mut MAOGFDKDCKM| { &mut m.CHLLMFJGPPA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EOJLNGDDLNN::EOJLNGDDLNN>(
            "BBDOPLEKIAC",
            |m: &MAOGFDKDCKM| { &m.BBDOPLEKIAC },
            |m: &mut MAOGFDKDCKM| { &mut m.BBDOPLEKIAC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DIBPGGOOGPK",
            |m: &MAOGFDKDCKM| { &m.DIBPGGOOGPK },
            |m: &mut MAOGFDKDCKM| { &mut m.DIBPGGOOGPK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EOJLNGDDLNN::EOJLNGDDLNN>(
            "KHCMOFPFOAK",
            |m: &MAOGFDKDCKM| { &m.KHCMOFPFOAK },
            |m: &mut MAOGFDKDCKM| { &mut m.KHCMOFPFOAK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HMFFHGBKOGL",
            |m: &MAOGFDKDCKM| { &m.HMFFHGBKOGL },
            |m: &mut MAOGFDKDCKM| { &mut m.HMFFHGBKOGL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MAOGFDKDCKM>(
            "MAOGFDKDCKM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MAOGFDKDCKM {
    const NAME: &'static str = "MAOGFDKDCKM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                109 => {
                    self.DPLGCEKJACK = is.read_float()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.KNCHEHIIJNN)?;
                },
                96 => {
                    self.KNCHEHIIJNN.push(is.read_uint32()?);
                },
                112 => {
                    self.HALGPJMCMFP = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LGPIEMDLHJM)?;
                },
                32 => {
                    self.OMKKPGFJHFE = is.read_bool()?;
                },
                74 => {
                    self.OLKMCBJFLEJ.push(is.read_message()?);
                },
                24 => {
                    self.IEHFHKMDAGC = is.read_uint32()?;
                },
                40 => {
                    self.CHLLMFJGPPA = is.read_uint32()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BBDOPLEKIAC)?;
                },
                50 => {
                    self.DIBPGGOOGPK.push(is.read_message()?);
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KHCMOFPFOAK)?;
                },
                56 => {
                    self.HMFFHGBKOGL = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.DPLGCEKJACK != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(12, &self.KNCHEHIIJNN);
        if self.HALGPJMCMFP != ::protobuf::EnumOrUnknown::new(super::PPIFFKJEJJA::PPIFFKJEJJA::Marble_Game_Phase_None) {
            my_size += ::protobuf::rt::int32_size(14, self.HALGPJMCMFP.value());
        }
        if let Some(v) = self.LGPIEMDLHJM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.OMKKPGFJHFE != false {
            my_size += 1 + 1;
        }
        for value in &self.OLKMCBJFLEJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.IEHFHKMDAGC != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.IEHFHKMDAGC);
        }
        if self.CHLLMFJGPPA != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.CHLLMFJGPPA);
        }
        if let Some(v) = self.BBDOPLEKIAC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.DIBPGGOOGPK {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.KHCMOFPFOAK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.HMFFHGBKOGL != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.HMFFHGBKOGL);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.DPLGCEKJACK != 0. {
            os.write_float(13, self.DPLGCEKJACK)?;
        }
        os.write_repeated_packed_uint32(12, &self.KNCHEHIIJNN)?;
        if self.HALGPJMCMFP != ::protobuf::EnumOrUnknown::new(super::PPIFFKJEJJA::PPIFFKJEJJA::Marble_Game_Phase_None) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.HALGPJMCMFP))?;
        }
        if let Some(v) = self.LGPIEMDLHJM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.OMKKPGFJHFE != false {
            os.write_bool(4, self.OMKKPGFJHFE)?;
        }
        for v in &self.OLKMCBJFLEJ {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if self.IEHFHKMDAGC != 0 {
            os.write_uint32(3, self.IEHFHKMDAGC)?;
        }
        if self.CHLLMFJGPPA != 0 {
            os.write_uint32(5, self.CHLLMFJGPPA)?;
        }
        if let Some(v) = self.BBDOPLEKIAC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        for v in &self.DIBPGGOOGPK {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.KHCMOFPFOAK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.HMFFHGBKOGL != 0 {
            os.write_uint32(7, self.HMFFHGBKOGL)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MAOGFDKDCKM {
        MAOGFDKDCKM::new()
    }

    fn clear(&mut self) {
        self.DPLGCEKJACK = 0.;
        self.KNCHEHIIJNN.clear();
        self.HALGPJMCMFP = ::protobuf::EnumOrUnknown::new(super::PPIFFKJEJJA::PPIFFKJEJJA::Marble_Game_Phase_None);
        self.LGPIEMDLHJM.clear();
        self.OMKKPGFJHFE = false;
        self.OLKMCBJFLEJ.clear();
        self.IEHFHKMDAGC = 0;
        self.CHLLMFJGPPA = 0;
        self.BBDOPLEKIAC.clear();
        self.DIBPGGOOGPK.clear();
        self.KHCMOFPFOAK.clear();
        self.HMFFHGBKOGL = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MAOGFDKDCKM {
        static instance: MAOGFDKDCKM = MAOGFDKDCKM {
            DPLGCEKJACK: 0.,
            KNCHEHIIJNN: ::std::vec::Vec::new(),
            HALGPJMCMFP: ::protobuf::EnumOrUnknown::from_i32(0),
            LGPIEMDLHJM: ::protobuf::MessageField::none(),
            OMKKPGFJHFE: false,
            OLKMCBJFLEJ: ::std::vec::Vec::new(),
            IEHFHKMDAGC: 0,
            CHLLMFJGPPA: 0,
            BBDOPLEKIAC: ::protobuf::MessageField::none(),
            DIBPGGOOGPK: ::std::vec::Vec::new(),
            KHCMOFPFOAK: ::protobuf::MessageField::none(),
            HMFFHGBKOGL: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MAOGFDKDCKM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MAOGFDKDCKM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MAOGFDKDCKM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MAOGFDKDCKM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MAOGFDKDCKM.proto\x1a\x11EOJLNGDDLNN.proto\x1a\x11HBGHAOPBKJP.prot\
    o\x1a\x11LBAOGIBPJOP.proto\x1a\x11PPIFFKJEJJA.proto\"\xf9\x03\n\x0bMAOGF\
    DKDCKM\x12\x20\n\x0bDPLGCEKJACK\x18\r\x20\x01(\x02R\x0bDPLGCEKJACK\x12\
    \x20\n\x0bKNCHEHIIJNN\x18\x0c\x20\x03(\rR\x0bKNCHEHIIJNN\x12.\n\x0bHALGP\
    JMCMFP\x18\x0e\x20\x01(\x0e2\x0c.PPIFFKJEJJAR\x0bHALGPJMCMFP\x12.\n\x0bL\
    GPIEMDLHJM\x18\x02\x20\x01(\x0b2\x0c.LBAOGIBPJOPR\x0bLGPIEMDLHJM\x12\x20\
    \n\x0bOMKKPGFJHFE\x18\x04\x20\x01(\x08R\x0bOMKKPGFJHFE\x12.\n\x0bOLKMCBJ\
    FLEJ\x18\t\x20\x03(\x0b2\x0c.HBGHAOPBKJPR\x0bOLKMCBJFLEJ\x12\x20\n\x0bIE\
    HFHKMDAGC\x18\x03\x20\x01(\rR\x0bIEHFHKMDAGC\x12\x20\n\x0bCHLLMFJGPPA\
    \x18\x05\x20\x01(\rR\x0bCHLLMFJGPPA\x12.\n\x0bBBDOPLEKIAC\x18\x0f\x20\
    \x01(\x0b2\x0c.EOJLNGDDLNNR\x0bBBDOPLEKIAC\x12.\n\x0bDIBPGGOOGPK\x18\x06\
    \x20\x03(\x0b2\x0c.HBGHAOPBKJPR\x0bDIBPGGOOGPK\x12.\n\x0bKHCMOFPFOAK\x18\
    \x0b\x20\x01(\x0b2\x0c.EOJLNGDDLNNR\x0bKHCMOFPFOAK\x12\x20\n\x0bHMFFHGBK\
    OGL\x18\x07\x20\x01(\rR\x0bHMFFHGBKOGLb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::EOJLNGDDLNN::file_descriptor().clone());
            deps.push(super::HBGHAOPBKJP::file_descriptor().clone());
            deps.push(super::LBAOGIBPJOP::file_descriptor().clone());
            deps.push(super::PPIFFKJEJJA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MAOGFDKDCKM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
