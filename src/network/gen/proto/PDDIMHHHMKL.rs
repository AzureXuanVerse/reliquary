// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PDDIMHHHMKL.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PDDIMHHHMKL)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PDDIMHHHMKL {
    // message fields
    // @@protoc_insertion_point(field:PDDIMHHHMKL.IJIIPGAFKJN)
    pub IJIIPGAFKJN: u32,
    // @@protoc_insertion_point(field:PDDIMHHHMKL.KGKNFEMHJCB)
    pub KGKNFEMHJCB: bool,
    // @@protoc_insertion_point(field:PDDIMHHHMKL.DJOAKHGKPDJ)
    pub DJOAKHGKPDJ: ::std::vec::Vec<super::HJCJJCHALLC::HJCJJCHALLC>,
    // @@protoc_insertion_point(field:PDDIMHHHMKL.LLHPHFMCAEB)
    pub LLHPHFMCAEB: u32,
    // @@protoc_insertion_point(field:PDDIMHHHMKL.JHAKINEOKKN)
    pub JHAKINEOKKN: u32,
    // @@protoc_insertion_point(field:PDDIMHHHMKL.LBJBEICKMIK)
    pub LBJBEICKMIK: u32,
    // @@protoc_insertion_point(field:PDDIMHHHMKL.MPBHAMOOBBP)
    pub MPBHAMOOBBP: u32,
    // @@protoc_insertion_point(field:PDDIMHHHMKL.MPFLOFNAPNJ)
    pub MPFLOFNAPNJ: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PDDIMHHHMKL.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PDDIMHHHMKL {
    fn default() -> &'a PDDIMHHHMKL {
        <PDDIMHHHMKL as ::protobuf::Message>::default_instance()
    }
}

impl PDDIMHHHMKL {
    pub fn new() -> PDDIMHHHMKL {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IJIIPGAFKJN",
            |m: &PDDIMHHHMKL| { &m.IJIIPGAFKJN },
            |m: &mut PDDIMHHHMKL| { &mut m.IJIIPGAFKJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KGKNFEMHJCB",
            |m: &PDDIMHHHMKL| { &m.KGKNFEMHJCB },
            |m: &mut PDDIMHHHMKL| { &mut m.KGKNFEMHJCB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DJOAKHGKPDJ",
            |m: &PDDIMHHHMKL| { &m.DJOAKHGKPDJ },
            |m: &mut PDDIMHHHMKL| { &mut m.DJOAKHGKPDJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LLHPHFMCAEB",
            |m: &PDDIMHHHMKL| { &m.LLHPHFMCAEB },
            |m: &mut PDDIMHHHMKL| { &mut m.LLHPHFMCAEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JHAKINEOKKN",
            |m: &PDDIMHHHMKL| { &m.JHAKINEOKKN },
            |m: &mut PDDIMHHHMKL| { &mut m.JHAKINEOKKN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LBJBEICKMIK",
            |m: &PDDIMHHHMKL| { &m.LBJBEICKMIK },
            |m: &mut PDDIMHHHMKL| { &mut m.LBJBEICKMIK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPBHAMOOBBP",
            |m: &PDDIMHHHMKL| { &m.MPBHAMOOBBP },
            |m: &mut PDDIMHHHMKL| { &mut m.MPBHAMOOBBP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPFLOFNAPNJ",
            |m: &PDDIMHHHMKL| { &m.MPFLOFNAPNJ },
            |m: &mut PDDIMHHHMKL| { &mut m.MPFLOFNAPNJ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PDDIMHHHMKL>(
            "PDDIMHHHMKL",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PDDIMHHHMKL {
    const NAME: &'static str = "PDDIMHHHMKL";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.IJIIPGAFKJN = is.read_uint32()?;
                },
                8 => {
                    self.KGKNFEMHJCB = is.read_bool()?;
                },
                90 => {
                    self.DJOAKHGKPDJ.push(is.read_message()?);
                },
                120 => {
                    self.LLHPHFMCAEB = is.read_uint32()?;
                },
                96 => {
                    self.JHAKINEOKKN = is.read_uint32()?;
                },
                56 => {
                    self.LBJBEICKMIK = is.read_uint32()?;
                },
                112 => {
                    self.MPBHAMOOBBP = is.read_uint32()?;
                },
                40 => {
                    self.MPFLOFNAPNJ = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.IJIIPGAFKJN != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.IJIIPGAFKJN);
        }
        if self.KGKNFEMHJCB != false {
            my_size += 1 + 1;
        }
        for value in &self.DJOAKHGKPDJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.LLHPHFMCAEB != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.LLHPHFMCAEB);
        }
        if self.JHAKINEOKKN != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.JHAKINEOKKN);
        }
        if self.LBJBEICKMIK != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.LBJBEICKMIK);
        }
        if self.MPBHAMOOBBP != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.MPBHAMOOBBP);
        }
        if self.MPFLOFNAPNJ != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.IJIIPGAFKJN != 0 {
            os.write_uint32(3, self.IJIIPGAFKJN)?;
        }
        if self.KGKNFEMHJCB != false {
            os.write_bool(1, self.KGKNFEMHJCB)?;
        }
        for v in &self.DJOAKHGKPDJ {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if self.LLHPHFMCAEB != 0 {
            os.write_uint32(15, self.LLHPHFMCAEB)?;
        }
        if self.JHAKINEOKKN != 0 {
            os.write_uint32(12, self.JHAKINEOKKN)?;
        }
        if self.LBJBEICKMIK != 0 {
            os.write_uint32(7, self.LBJBEICKMIK)?;
        }
        if self.MPBHAMOOBBP != 0 {
            os.write_uint32(14, self.MPBHAMOOBBP)?;
        }
        if self.MPFLOFNAPNJ != false {
            os.write_bool(5, self.MPFLOFNAPNJ)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PDDIMHHHMKL {
        PDDIMHHHMKL::new()
    }

    fn clear(&mut self) {
        self.IJIIPGAFKJN = 0;
        self.KGKNFEMHJCB = false;
        self.DJOAKHGKPDJ.clear();
        self.LLHPHFMCAEB = 0;
        self.JHAKINEOKKN = 0;
        self.LBJBEICKMIK = 0;
        self.MPBHAMOOBBP = 0;
        self.MPFLOFNAPNJ = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PDDIMHHHMKL {
        static instance: PDDIMHHHMKL = PDDIMHHHMKL {
            IJIIPGAFKJN: 0,
            KGKNFEMHJCB: false,
            DJOAKHGKPDJ: ::std::vec::Vec::new(),
            LLHPHFMCAEB: 0,
            JHAKINEOKKN: 0,
            LBJBEICKMIK: 0,
            MPBHAMOOBBP: 0,
            MPFLOFNAPNJ: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PDDIMHHHMKL {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PDDIMHHHMKL").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PDDIMHHHMKL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PDDIMHHHMKL {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11PDDIMHHHMKL.proto\x1a\x11HJCJJCHALLC.proto\"\xab\x02\n\x0bPDDIMHHH\
    MKL\x12\x20\n\x0bIJIIPGAFKJN\x18\x03\x20\x01(\rR\x0bIJIIPGAFKJN\x12\x20\
    \n\x0bKGKNFEMHJCB\x18\x01\x20\x01(\x08R\x0bKGKNFEMHJCB\x12.\n\x0bDJOAKHG\
    KPDJ\x18\x0b\x20\x03(\x0b2\x0c.HJCJJCHALLCR\x0bDJOAKHGKPDJ\x12\x20\n\x0b\
    LLHPHFMCAEB\x18\x0f\x20\x01(\rR\x0bLLHPHFMCAEB\x12\x20\n\x0bJHAKINEOKKN\
    \x18\x0c\x20\x01(\rR\x0bJHAKINEOKKN\x12\x20\n\x0bLBJBEICKMIK\x18\x07\x20\
    \x01(\rR\x0bLBJBEICKMIK\x12\x20\n\x0bMPBHAMOOBBP\x18\x0e\x20\x01(\rR\x0b\
    MPBHAMOOBBP\x12\x20\n\x0bMPFLOFNAPNJ\x18\x05\x20\x01(\x08R\x0bMPFLOFNAPN\
    Jb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::HJCJJCHALLC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PDDIMHHHMKL::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
