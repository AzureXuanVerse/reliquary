// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GIBBJHPOHGE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GIBBJHPOHGE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GIBBJHPOHGE {
    // message oneof groups
    pub LLCAAGFBFAC: ::std::option::Option<gibbjhpohge::LLCAAGFBFAC>,
    // special fields
    // @@protoc_insertion_point(special_field:GIBBJHPOHGE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GIBBJHPOHGE {
    fn default() -> &'a GIBBJHPOHGE {
        <GIBBJHPOHGE as ::protobuf::Message>::default_instance()
    }
}

impl GIBBJHPOHGE {
    pub fn new() -> GIBBJHPOHGE {
        ::std::default::Default::default()
    }

    // bool BKGINDBGDLO = 1519;

    pub fn BKGINDBGDLO(&self) -> bool {
        match self.LLCAAGFBFAC {
            ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::BKGINDBGDLO(v)) => v,
            _ => false,
        }
    }

    pub fn clear_BKGINDBGDLO(&mut self) {
        self.LLCAAGFBFAC = ::std::option::Option::None;
    }

    pub fn has_BKGINDBGDLO(&self) -> bool {
        match self.LLCAAGFBFAC {
            ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::BKGINDBGDLO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BKGINDBGDLO(&mut self, v: bool) {
        self.LLCAAGFBFAC = ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::BKGINDBGDLO(v))
    }

    // .KNOKJFOBIME LNEOAGBEIME = 1649;

    pub fn LNEOAGBEIME(&self) -> &super::KNOKJFOBIME::KNOKJFOBIME {
        match self.LLCAAGFBFAC {
            ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(ref v)) => v,
            _ => <super::KNOKJFOBIME::KNOKJFOBIME as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LNEOAGBEIME(&mut self) {
        self.LLCAAGFBFAC = ::std::option::Option::None;
    }

    pub fn has_LNEOAGBEIME(&self) -> bool {
        match self.LLCAAGFBFAC {
            ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LNEOAGBEIME(&mut self, v: super::KNOKJFOBIME::KNOKJFOBIME) {
        self.LLCAAGFBFAC = ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LNEOAGBEIME(&mut self) -> &mut super::KNOKJFOBIME::KNOKJFOBIME {
        if let ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(_)) = self.LLCAAGFBFAC {
        } else {
            self.LLCAAGFBFAC = ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(super::KNOKJFOBIME::KNOKJFOBIME::new()));
        }
        match self.LLCAAGFBFAC {
            ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LNEOAGBEIME(&mut self) -> super::KNOKJFOBIME::KNOKJFOBIME {
        if self.has_LNEOAGBEIME() {
            match self.LLCAAGFBFAC.take() {
                ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KNOKJFOBIME::KNOKJFOBIME::new()
        }
    }

    // .KNOKJFOBIME GPNOPGOLLBI = 708;

    pub fn GPNOPGOLLBI(&self) -> &super::KNOKJFOBIME::KNOKJFOBIME {
        match self.LLCAAGFBFAC {
            ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(ref v)) => v,
            _ => <super::KNOKJFOBIME::KNOKJFOBIME as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GPNOPGOLLBI(&mut self) {
        self.LLCAAGFBFAC = ::std::option::Option::None;
    }

    pub fn has_GPNOPGOLLBI(&self) -> bool {
        match self.LLCAAGFBFAC {
            ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GPNOPGOLLBI(&mut self, v: super::KNOKJFOBIME::KNOKJFOBIME) {
        self.LLCAAGFBFAC = ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GPNOPGOLLBI(&mut self) -> &mut super::KNOKJFOBIME::KNOKJFOBIME {
        if let ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(_)) = self.LLCAAGFBFAC {
        } else {
            self.LLCAAGFBFAC = ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(super::KNOKJFOBIME::KNOKJFOBIME::new()));
        }
        match self.LLCAAGFBFAC {
            ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GPNOPGOLLBI(&mut self) -> super::KNOKJFOBIME::KNOKJFOBIME {
        if self.has_GPNOPGOLLBI() {
            match self.LLCAAGFBFAC.take() {
                ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KNOKJFOBIME::KNOKJFOBIME::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "BKGINDBGDLO",
            GIBBJHPOHGE::has_BKGINDBGDLO,
            GIBBJHPOHGE::BKGINDBGDLO,
            GIBBJHPOHGE::set_BKGINDBGDLO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KNOKJFOBIME::KNOKJFOBIME>(
            "LNEOAGBEIME",
            GIBBJHPOHGE::has_LNEOAGBEIME,
            GIBBJHPOHGE::LNEOAGBEIME,
            GIBBJHPOHGE::mut_LNEOAGBEIME,
            GIBBJHPOHGE::set_LNEOAGBEIME,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KNOKJFOBIME::KNOKJFOBIME>(
            "GPNOPGOLLBI",
            GIBBJHPOHGE::has_GPNOPGOLLBI,
            GIBBJHPOHGE::GPNOPGOLLBI,
            GIBBJHPOHGE::mut_GPNOPGOLLBI,
            GIBBJHPOHGE::set_GPNOPGOLLBI,
        ));
        oneofs.push(gibbjhpohge::LLCAAGFBFAC::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GIBBJHPOHGE>(
            "GIBBJHPOHGE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GIBBJHPOHGE {
    const NAME: &'static str = "GIBBJHPOHGE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                12152 => {
                    self.LLCAAGFBFAC = ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::BKGINDBGDLO(is.read_bool()?));
                },
                13194 => {
                    self.LLCAAGFBFAC = ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(is.read_message()?));
                },
                5666 => {
                    self.LLCAAGFBFAC = ::std::option::Option::Some(gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.LLCAAGFBFAC {
            match v {
                &gibbjhpohge::LLCAAGFBFAC::BKGINDBGDLO(v) => {
                    my_size += 2 + 1;
                },
                &gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.LLCAAGFBFAC {
            match v {
                &gibbjhpohge::LLCAAGFBFAC::BKGINDBGDLO(v) => {
                    os.write_bool(1519, v)?;
                },
                &gibbjhpohge::LLCAAGFBFAC::LNEOAGBEIME(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1649, v, os)?;
                },
                &gibbjhpohge::LLCAAGFBFAC::GPNOPGOLLBI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(708, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GIBBJHPOHGE {
        GIBBJHPOHGE::new()
    }

    fn clear(&mut self) {
        self.LLCAAGFBFAC = ::std::option::Option::None;
        self.LLCAAGFBFAC = ::std::option::Option::None;
        self.LLCAAGFBFAC = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GIBBJHPOHGE {
        static instance: GIBBJHPOHGE = GIBBJHPOHGE {
            LLCAAGFBFAC: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GIBBJHPOHGE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GIBBJHPOHGE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GIBBJHPOHGE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GIBBJHPOHGE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GIBBJHPOHGE`
pub mod gibbjhpohge {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:GIBBJHPOHGE.LLCAAGFBFAC)
    pub enum LLCAAGFBFAC {
        // @@protoc_insertion_point(oneof_field:GIBBJHPOHGE.BKGINDBGDLO)
        BKGINDBGDLO(bool),
        // @@protoc_insertion_point(oneof_field:GIBBJHPOHGE.LNEOAGBEIME)
        LNEOAGBEIME(super::super::KNOKJFOBIME::KNOKJFOBIME),
        // @@protoc_insertion_point(oneof_field:GIBBJHPOHGE.GPNOPGOLLBI)
        GPNOPGOLLBI(super::super::KNOKJFOBIME::KNOKJFOBIME),
    }

    impl ::protobuf::Oneof for LLCAAGFBFAC {
    }

    impl ::protobuf::OneofFull for LLCAAGFBFAC {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GIBBJHPOHGE as ::protobuf::MessageFull>::descriptor().oneof_by_name("LLCAAGFBFAC").unwrap()).clone()
        }
    }

    impl LLCAAGFBFAC {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<LLCAAGFBFAC>("LLCAAGFBFAC")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GIBBJHPOHGE.proto\x1a\x11KNOKJFOBIME.proto\"\xa7\x01\n\x0bGIBBJHPO\
    HGE\x12#\n\x0bBKGINDBGDLO\x18\xef\x0b\x20\x01(\x08H\0R\x0bBKGINDBGDLO\
    \x121\n\x0bLNEOAGBEIME\x18\xf1\x0c\x20\x01(\x0b2\x0c.KNOKJFOBIMEH\0R\x0b\
    LNEOAGBEIME\x121\n\x0bGPNOPGOLLBI\x18\xc4\x05\x20\x01(\x0b2\x0c.KNOKJFOB\
    IMEH\0R\x0bGPNOPGOLLBIB\r\n\x0bLLCAAGFBFACb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::KNOKJFOBIME::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GIBBJHPOHGE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
