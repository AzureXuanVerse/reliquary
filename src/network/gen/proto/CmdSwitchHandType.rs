// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdSwitchHandType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdSwitchHandType)
pub enum CmdSwitchHandType {
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandTypeNone)
    CmdSwitchHandTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandDataCsReq)
    CmdSwitchHandDataCsReq = 8120,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandFinishScRsp)
    CmdSwitchHandFinishScRsp = 8106,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandCoinUpdateCsReq)
    CmdSwitchHandCoinUpdateCsReq = 8102,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandDataScRsp)
    CmdSwitchHandDataScRsp = 8115,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandFinishCsReq)
    CmdSwitchHandFinishCsReq = 8117,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandUpdateScRsp)
    CmdSwitchHandUpdateScRsp = 8110,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandStartScRsp)
    CmdSwitchHandStartScRsp = 8103,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandStartCsReq)
    CmdSwitchHandStartCsReq = 8107,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandUpdateCsReq)
    CmdSwitchHandUpdateCsReq = 8105,
    // @@protoc_insertion_point(enum_value:CmdSwitchHandType.CmdSwitchHandCoinUpdateScRsp)
    CmdSwitchHandCoinUpdateScRsp = 8108,
}

impl ::protobuf::Enum for CmdSwitchHandType {
    const NAME: &'static str = "CmdSwitchHandType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdSwitchHandType> {
        match value {
            0 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandTypeNone),
            8120 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandDataCsReq),
            8106 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandFinishScRsp),
            8102 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandCoinUpdateCsReq),
            8115 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandDataScRsp),
            8117 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandFinishCsReq),
            8110 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandUpdateScRsp),
            8103 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandStartScRsp),
            8107 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandStartCsReq),
            8105 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandUpdateCsReq),
            8108 => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandCoinUpdateScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdSwitchHandType> {
        match str {
            "CmdSwitchHandTypeNone" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandTypeNone),
            "CmdSwitchHandDataCsReq" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandDataCsReq),
            "CmdSwitchHandFinishScRsp" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandFinishScRsp),
            "CmdSwitchHandCoinUpdateCsReq" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandCoinUpdateCsReq),
            "CmdSwitchHandDataScRsp" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandDataScRsp),
            "CmdSwitchHandFinishCsReq" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandFinishCsReq),
            "CmdSwitchHandUpdateScRsp" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandUpdateScRsp),
            "CmdSwitchHandStartScRsp" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandStartScRsp),
            "CmdSwitchHandStartCsReq" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandStartCsReq),
            "CmdSwitchHandUpdateCsReq" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandUpdateCsReq),
            "CmdSwitchHandCoinUpdateScRsp" => ::std::option::Option::Some(CmdSwitchHandType::CmdSwitchHandCoinUpdateScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdSwitchHandType] = &[
        CmdSwitchHandType::CmdSwitchHandTypeNone,
        CmdSwitchHandType::CmdSwitchHandDataCsReq,
        CmdSwitchHandType::CmdSwitchHandFinishScRsp,
        CmdSwitchHandType::CmdSwitchHandCoinUpdateCsReq,
        CmdSwitchHandType::CmdSwitchHandDataScRsp,
        CmdSwitchHandType::CmdSwitchHandFinishCsReq,
        CmdSwitchHandType::CmdSwitchHandUpdateScRsp,
        CmdSwitchHandType::CmdSwitchHandStartScRsp,
        CmdSwitchHandType::CmdSwitchHandStartCsReq,
        CmdSwitchHandType::CmdSwitchHandUpdateCsReq,
        CmdSwitchHandType::CmdSwitchHandCoinUpdateScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdSwitchHandType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdSwitchHandType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdSwitchHandType::CmdSwitchHandTypeNone => 0,
            CmdSwitchHandType::CmdSwitchHandDataCsReq => 1,
            CmdSwitchHandType::CmdSwitchHandFinishScRsp => 2,
            CmdSwitchHandType::CmdSwitchHandCoinUpdateCsReq => 3,
            CmdSwitchHandType::CmdSwitchHandDataScRsp => 4,
            CmdSwitchHandType::CmdSwitchHandFinishCsReq => 5,
            CmdSwitchHandType::CmdSwitchHandUpdateScRsp => 6,
            CmdSwitchHandType::CmdSwitchHandStartScRsp => 7,
            CmdSwitchHandType::CmdSwitchHandStartCsReq => 8,
            CmdSwitchHandType::CmdSwitchHandUpdateCsReq => 9,
            CmdSwitchHandType::CmdSwitchHandCoinUpdateScRsp => 10,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdSwitchHandType {
    fn default() -> Self {
        CmdSwitchHandType::CmdSwitchHandTypeNone
    }
}

impl CmdSwitchHandType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdSwitchHandType>("CmdSwitchHandType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17CmdSwitchHandType.proto*\xe6\x02\n\x11CmdSwitchHandType\x12\x19\n\
    \x15CmdSwitchHandTypeNone\x10\0\x12\x1b\n\x16CmdSwitchHandDataCsReq\x10\
    \xb8?\x12\x1d\n\x18CmdSwitchHandFinishScRsp\x10\xaa?\x12!\n\x1cCmdSwitch\
    HandCoinUpdateCsReq\x10\xa6?\x12\x1b\n\x16CmdSwitchHandDataScRsp\x10\xb3\
    ?\x12\x1d\n\x18CmdSwitchHandFinishCsReq\x10\xb5?\x12\x1d\n\x18CmdSwitchH\
    andUpdateScRsp\x10\xae?\x12\x1c\n\x17CmdSwitchHandStartScRsp\x10\xa7?\
    \x12\x1c\n\x17CmdSwitchHandStartCsReq\x10\xab?\x12\x1d\n\x18CmdSwitchHan\
    dUpdateCsReq\x10\xa9?\x12!\n\x1cCmdSwitchHandCoinUpdateScRsp\x10\xac?b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdSwitchHandType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
