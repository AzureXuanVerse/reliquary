// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdPhoneType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdPhoneType)
pub enum CmdPhoneType {
    // @@protoc_insertion_point(enum_value:CmdPhoneType.CmdPhoneTypeNone)
    CmdPhoneTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdPhoneType.CmdGetPhoneDataScRsp)
    CmdGetPhoneDataScRsp = 5120,
    // @@protoc_insertion_point(enum_value:CmdPhoneType.CmdSelectChatBubbleCsReq)
    CmdSelectChatBubbleCsReq = 5103,
    // @@protoc_insertion_point(enum_value:CmdPhoneType.CmdGetPhoneDataCsReq)
    CmdGetPhoneDataCsReq = 5159,
    // @@protoc_insertion_point(enum_value:CmdPhoneType.CmdSelectPhoneThemeScRsp)
    CmdSelectPhoneThemeScRsp = 5134,
    // @@protoc_insertion_point(enum_value:CmdPhoneType.CmdSelectPhoneThemeCsReq)
    CmdSelectPhoneThemeCsReq = 5153,
    // @@protoc_insertion_point(enum_value:CmdPhoneType.CmdSelectChatBubbleScRsp)
    CmdSelectChatBubbleScRsp = 5146,
    // @@protoc_insertion_point(enum_value:CmdPhoneType.CmdUnlockPhoneThemeScNotify)
    CmdUnlockPhoneThemeScNotify = 5137,
    // @@protoc_insertion_point(enum_value:CmdPhoneType.CmdUnlockChatBubbleScNotify)
    CmdUnlockChatBubbleScNotify = 5139,
}

impl ::protobuf::Enum for CmdPhoneType {
    const NAME: &'static str = "CmdPhoneType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdPhoneType> {
        match value {
            0 => ::std::option::Option::Some(CmdPhoneType::CmdPhoneTypeNone),
            5120 => ::std::option::Option::Some(CmdPhoneType::CmdGetPhoneDataScRsp),
            5103 => ::std::option::Option::Some(CmdPhoneType::CmdSelectChatBubbleCsReq),
            5159 => ::std::option::Option::Some(CmdPhoneType::CmdGetPhoneDataCsReq),
            5134 => ::std::option::Option::Some(CmdPhoneType::CmdSelectPhoneThemeScRsp),
            5153 => ::std::option::Option::Some(CmdPhoneType::CmdSelectPhoneThemeCsReq),
            5146 => ::std::option::Option::Some(CmdPhoneType::CmdSelectChatBubbleScRsp),
            5137 => ::std::option::Option::Some(CmdPhoneType::CmdUnlockPhoneThemeScNotify),
            5139 => ::std::option::Option::Some(CmdPhoneType::CmdUnlockChatBubbleScNotify),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdPhoneType> {
        match str {
            "CmdPhoneTypeNone" => ::std::option::Option::Some(CmdPhoneType::CmdPhoneTypeNone),
            "CmdGetPhoneDataScRsp" => ::std::option::Option::Some(CmdPhoneType::CmdGetPhoneDataScRsp),
            "CmdSelectChatBubbleCsReq" => ::std::option::Option::Some(CmdPhoneType::CmdSelectChatBubbleCsReq),
            "CmdGetPhoneDataCsReq" => ::std::option::Option::Some(CmdPhoneType::CmdGetPhoneDataCsReq),
            "CmdSelectPhoneThemeScRsp" => ::std::option::Option::Some(CmdPhoneType::CmdSelectPhoneThemeScRsp),
            "CmdSelectPhoneThemeCsReq" => ::std::option::Option::Some(CmdPhoneType::CmdSelectPhoneThemeCsReq),
            "CmdSelectChatBubbleScRsp" => ::std::option::Option::Some(CmdPhoneType::CmdSelectChatBubbleScRsp),
            "CmdUnlockPhoneThemeScNotify" => ::std::option::Option::Some(CmdPhoneType::CmdUnlockPhoneThemeScNotify),
            "CmdUnlockChatBubbleScNotify" => ::std::option::Option::Some(CmdPhoneType::CmdUnlockChatBubbleScNotify),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdPhoneType] = &[
        CmdPhoneType::CmdPhoneTypeNone,
        CmdPhoneType::CmdGetPhoneDataScRsp,
        CmdPhoneType::CmdSelectChatBubbleCsReq,
        CmdPhoneType::CmdGetPhoneDataCsReq,
        CmdPhoneType::CmdSelectPhoneThemeScRsp,
        CmdPhoneType::CmdSelectPhoneThemeCsReq,
        CmdPhoneType::CmdSelectChatBubbleScRsp,
        CmdPhoneType::CmdUnlockPhoneThemeScNotify,
        CmdPhoneType::CmdUnlockChatBubbleScNotify,
    ];
}

impl ::protobuf::EnumFull for CmdPhoneType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdPhoneType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdPhoneType::CmdPhoneTypeNone => 0,
            CmdPhoneType::CmdGetPhoneDataScRsp => 1,
            CmdPhoneType::CmdSelectChatBubbleCsReq => 2,
            CmdPhoneType::CmdGetPhoneDataCsReq => 3,
            CmdPhoneType::CmdSelectPhoneThemeScRsp => 4,
            CmdPhoneType::CmdSelectPhoneThemeCsReq => 5,
            CmdPhoneType::CmdSelectChatBubbleScRsp => 6,
            CmdPhoneType::CmdUnlockPhoneThemeScNotify => 7,
            CmdPhoneType::CmdUnlockChatBubbleScNotify => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdPhoneType {
    fn default() -> Self {
        CmdPhoneType::CmdPhoneTypeNone
    }
}

impl CmdPhoneType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdPhoneType>("CmdPhoneType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12CmdPhoneType.proto*\x9a\x02\n\x0cCmdPhoneType\x12\x14\n\x10CmdPhon\
    eTypeNone\x10\0\x12\x19\n\x14CmdGetPhoneDataScRsp\x10\x80(\x12\x1d\n\x18\
    CmdSelectChatBubbleCsReq\x10\xef'\x12\x19\n\x14CmdGetPhoneDataCsReq\x10\
    \xa7(\x12\x1d\n\x18CmdSelectPhoneThemeScRsp\x10\x8e(\x12\x1d\n\x18CmdSel\
    ectPhoneThemeCsReq\x10\xa1(\x12\x1d\n\x18CmdSelectChatBubbleScRsp\x10\
    \x9a(\x12\x20\n\x1bCmdUnlockPhoneThemeScNotify\x10\x91(\x12\x20\n\x1bCmd\
    UnlockChatBubbleScNotify\x10\x93(b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdPhoneType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
