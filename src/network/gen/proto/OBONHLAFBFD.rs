// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OBONHLAFBFD.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:OBONHLAFBFD)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OBONHLAFBFD {
    // message oneof groups
    pub KIDEBHIPICE: ::std::option::Option<obonhlafbfd::KIDEBHIPICE>,
    // special fields
    // @@protoc_insertion_point(special_field:OBONHLAFBFD.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OBONHLAFBFD {
    fn default() -> &'a OBONHLAFBFD {
        <OBONHLAFBFD as ::protobuf::Message>::default_instance()
    }
}

impl OBONHLAFBFD {
    pub fn new() -> OBONHLAFBFD {
        ::std::default::Default::default()
    }

    // bool JMBAGBFIKCM = 9;

    pub fn JMBAGBFIKCM(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::JMBAGBFIKCM(v)) => v,
            _ => false,
        }
    }

    pub fn clear_JMBAGBFIKCM(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
    }

    pub fn has_JMBAGBFIKCM(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::JMBAGBFIKCM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JMBAGBFIKCM(&mut self, v: bool) {
        self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::JMBAGBFIKCM(v))
    }

    // bool MCLJBLKACMP = 15;

    pub fn MCLJBLKACMP(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::MCLJBLKACMP(v)) => v,
            _ => false,
        }
    }

    pub fn clear_MCLJBLKACMP(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
    }

    pub fn has_MCLJBLKACMP(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::MCLJBLKACMP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MCLJBLKACMP(&mut self, v: bool) {
        self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::MCLJBLKACMP(v))
    }

    // bool ANEAAKIDPFL = 1;

    pub fn ANEAAKIDPFL(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::ANEAAKIDPFL(v)) => v,
            _ => false,
        }
    }

    pub fn clear_ANEAAKIDPFL(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
    }

    pub fn has_ANEAAKIDPFL(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::ANEAAKIDPFL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ANEAAKIDPFL(&mut self, v: bool) {
        self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::ANEAAKIDPFL(v))
    }

    // bool CPEEEPDBBPH = 6;

    pub fn CPEEEPDBBPH(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::CPEEEPDBBPH(v)) => v,
            _ => false,
        }
    }

    pub fn clear_CPEEEPDBBPH(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
    }

    pub fn has_CPEEEPDBBPH(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::CPEEEPDBBPH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CPEEEPDBBPH(&mut self, v: bool) {
        self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::CPEEEPDBBPH(v))
    }

    // bool GNOHNPJBFJC = 8;

    pub fn GNOHNPJBFJC(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::GNOHNPJBFJC(v)) => v,
            _ => false,
        }
    }

    pub fn clear_GNOHNPJBFJC(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
    }

    pub fn has_GNOHNPJBFJC(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::GNOHNPJBFJC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GNOHNPJBFJC(&mut self, v: bool) {
        self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::GNOHNPJBFJC(v))
    }

    // bool PJILEMMBLFG = 5;

    pub fn PJILEMMBLFG(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::PJILEMMBLFG(v)) => v,
            _ => false,
        }
    }

    pub fn clear_PJILEMMBLFG(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
    }

    pub fn has_PJILEMMBLFG(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::PJILEMMBLFG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PJILEMMBLFG(&mut self, v: bool) {
        self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::PJILEMMBLFG(v))
    }

    // bool NENGEIIJJCB = 7;

    pub fn NENGEIIJJCB(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::NENGEIIJJCB(v)) => v,
            _ => false,
        }
    }

    pub fn clear_NENGEIIJJCB(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
    }

    pub fn has_NENGEIIJJCB(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::NENGEIIJJCB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NENGEIIJJCB(&mut self, v: bool) {
        self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::NENGEIIJJCB(v))
    }

    // bool NMJDBOIPFIC = 4;

    pub fn NMJDBOIPFIC(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::NMJDBOIPFIC(v)) => v,
            _ => false,
        }
    }

    pub fn clear_NMJDBOIPFIC(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
    }

    pub fn has_NMJDBOIPFIC(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::NMJDBOIPFIC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NMJDBOIPFIC(&mut self, v: bool) {
        self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::NMJDBOIPFIC(v))
    }

    // bool CGADMDEKIAC = 11;

    pub fn CGADMDEKIAC(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::CGADMDEKIAC(v)) => v,
            _ => false,
        }
    }

    pub fn clear_CGADMDEKIAC(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
    }

    pub fn has_CGADMDEKIAC(&self) -> bool {
        match self.KIDEBHIPICE {
            ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::CGADMDEKIAC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CGADMDEKIAC(&mut self, v: bool) {
        self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::CGADMDEKIAC(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "JMBAGBFIKCM",
            OBONHLAFBFD::has_JMBAGBFIKCM,
            OBONHLAFBFD::JMBAGBFIKCM,
            OBONHLAFBFD::set_JMBAGBFIKCM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "MCLJBLKACMP",
            OBONHLAFBFD::has_MCLJBLKACMP,
            OBONHLAFBFD::MCLJBLKACMP,
            OBONHLAFBFD::set_MCLJBLKACMP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ANEAAKIDPFL",
            OBONHLAFBFD::has_ANEAAKIDPFL,
            OBONHLAFBFD::ANEAAKIDPFL,
            OBONHLAFBFD::set_ANEAAKIDPFL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "CPEEEPDBBPH",
            OBONHLAFBFD::has_CPEEEPDBBPH,
            OBONHLAFBFD::CPEEEPDBBPH,
            OBONHLAFBFD::set_CPEEEPDBBPH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "GNOHNPJBFJC",
            OBONHLAFBFD::has_GNOHNPJBFJC,
            OBONHLAFBFD::GNOHNPJBFJC,
            OBONHLAFBFD::set_GNOHNPJBFJC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "PJILEMMBLFG",
            OBONHLAFBFD::has_PJILEMMBLFG,
            OBONHLAFBFD::PJILEMMBLFG,
            OBONHLAFBFD::set_PJILEMMBLFG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "NENGEIIJJCB",
            OBONHLAFBFD::has_NENGEIIJJCB,
            OBONHLAFBFD::NENGEIIJJCB,
            OBONHLAFBFD::set_NENGEIIJJCB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "NMJDBOIPFIC",
            OBONHLAFBFD::has_NMJDBOIPFIC,
            OBONHLAFBFD::NMJDBOIPFIC,
            OBONHLAFBFD::set_NMJDBOIPFIC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "CGADMDEKIAC",
            OBONHLAFBFD::has_CGADMDEKIAC,
            OBONHLAFBFD::CGADMDEKIAC,
            OBONHLAFBFD::set_CGADMDEKIAC,
        ));
        oneofs.push(obonhlafbfd::KIDEBHIPICE::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OBONHLAFBFD>(
            "OBONHLAFBFD",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OBONHLAFBFD {
    const NAME: &'static str = "OBONHLAFBFD";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::JMBAGBFIKCM(is.read_bool()?));
                },
                120 => {
                    self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::MCLJBLKACMP(is.read_bool()?));
                },
                8 => {
                    self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::ANEAAKIDPFL(is.read_bool()?));
                },
                48 => {
                    self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::CPEEEPDBBPH(is.read_bool()?));
                },
                64 => {
                    self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::GNOHNPJBFJC(is.read_bool()?));
                },
                40 => {
                    self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::PJILEMMBLFG(is.read_bool()?));
                },
                56 => {
                    self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::NENGEIIJJCB(is.read_bool()?));
                },
                32 => {
                    self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::NMJDBOIPFIC(is.read_bool()?));
                },
                88 => {
                    self.KIDEBHIPICE = ::std::option::Option::Some(obonhlafbfd::KIDEBHIPICE::CGADMDEKIAC(is.read_bool()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.KIDEBHIPICE {
            match v {
                &obonhlafbfd::KIDEBHIPICE::JMBAGBFIKCM(v) => {
                    my_size += 1 + 1;
                },
                &obonhlafbfd::KIDEBHIPICE::MCLJBLKACMP(v) => {
                    my_size += 1 + 1;
                },
                &obonhlafbfd::KIDEBHIPICE::ANEAAKIDPFL(v) => {
                    my_size += 1 + 1;
                },
                &obonhlafbfd::KIDEBHIPICE::CPEEEPDBBPH(v) => {
                    my_size += 1 + 1;
                },
                &obonhlafbfd::KIDEBHIPICE::GNOHNPJBFJC(v) => {
                    my_size += 1 + 1;
                },
                &obonhlafbfd::KIDEBHIPICE::PJILEMMBLFG(v) => {
                    my_size += 1 + 1;
                },
                &obonhlafbfd::KIDEBHIPICE::NENGEIIJJCB(v) => {
                    my_size += 1 + 1;
                },
                &obonhlafbfd::KIDEBHIPICE::NMJDBOIPFIC(v) => {
                    my_size += 1 + 1;
                },
                &obonhlafbfd::KIDEBHIPICE::CGADMDEKIAC(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.KIDEBHIPICE {
            match v {
                &obonhlafbfd::KIDEBHIPICE::JMBAGBFIKCM(v) => {
                    os.write_bool(9, v)?;
                },
                &obonhlafbfd::KIDEBHIPICE::MCLJBLKACMP(v) => {
                    os.write_bool(15, v)?;
                },
                &obonhlafbfd::KIDEBHIPICE::ANEAAKIDPFL(v) => {
                    os.write_bool(1, v)?;
                },
                &obonhlafbfd::KIDEBHIPICE::CPEEEPDBBPH(v) => {
                    os.write_bool(6, v)?;
                },
                &obonhlafbfd::KIDEBHIPICE::GNOHNPJBFJC(v) => {
                    os.write_bool(8, v)?;
                },
                &obonhlafbfd::KIDEBHIPICE::PJILEMMBLFG(v) => {
                    os.write_bool(5, v)?;
                },
                &obonhlafbfd::KIDEBHIPICE::NENGEIIJJCB(v) => {
                    os.write_bool(7, v)?;
                },
                &obonhlafbfd::KIDEBHIPICE::NMJDBOIPFIC(v) => {
                    os.write_bool(4, v)?;
                },
                &obonhlafbfd::KIDEBHIPICE::CGADMDEKIAC(v) => {
                    os.write_bool(11, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OBONHLAFBFD {
        OBONHLAFBFD::new()
    }

    fn clear(&mut self) {
        self.KIDEBHIPICE = ::std::option::Option::None;
        self.KIDEBHIPICE = ::std::option::Option::None;
        self.KIDEBHIPICE = ::std::option::Option::None;
        self.KIDEBHIPICE = ::std::option::Option::None;
        self.KIDEBHIPICE = ::std::option::Option::None;
        self.KIDEBHIPICE = ::std::option::Option::None;
        self.KIDEBHIPICE = ::std::option::Option::None;
        self.KIDEBHIPICE = ::std::option::Option::None;
        self.KIDEBHIPICE = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OBONHLAFBFD {
        static instance: OBONHLAFBFD = OBONHLAFBFD {
            KIDEBHIPICE: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OBONHLAFBFD {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OBONHLAFBFD").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OBONHLAFBFD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OBONHLAFBFD {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OBONHLAFBFD`
pub mod obonhlafbfd {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:OBONHLAFBFD.KIDEBHIPICE)
    pub enum KIDEBHIPICE {
        // @@protoc_insertion_point(oneof_field:OBONHLAFBFD.JMBAGBFIKCM)
        JMBAGBFIKCM(bool),
        // @@protoc_insertion_point(oneof_field:OBONHLAFBFD.MCLJBLKACMP)
        MCLJBLKACMP(bool),
        // @@protoc_insertion_point(oneof_field:OBONHLAFBFD.ANEAAKIDPFL)
        ANEAAKIDPFL(bool),
        // @@protoc_insertion_point(oneof_field:OBONHLAFBFD.CPEEEPDBBPH)
        CPEEEPDBBPH(bool),
        // @@protoc_insertion_point(oneof_field:OBONHLAFBFD.GNOHNPJBFJC)
        GNOHNPJBFJC(bool),
        // @@protoc_insertion_point(oneof_field:OBONHLAFBFD.PJILEMMBLFG)
        PJILEMMBLFG(bool),
        // @@protoc_insertion_point(oneof_field:OBONHLAFBFD.NENGEIIJJCB)
        NENGEIIJJCB(bool),
        // @@protoc_insertion_point(oneof_field:OBONHLAFBFD.NMJDBOIPFIC)
        NMJDBOIPFIC(bool),
        // @@protoc_insertion_point(oneof_field:OBONHLAFBFD.CGADMDEKIAC)
        CGADMDEKIAC(bool),
    }

    impl ::protobuf::Oneof for KIDEBHIPICE {
    }

    impl ::protobuf::OneofFull for KIDEBHIPICE {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OBONHLAFBFD as ::protobuf::MessageFull>::descriptor().oneof_by_name("KIDEBHIPICE").unwrap()).clone()
        }
    }

    impl KIDEBHIPICE {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KIDEBHIPICE>("KIDEBHIPICE")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OBONHLAFBFD.proto\"\xe0\x02\n\x0bOBONHLAFBFD\x12\"\n\x0bJMBAGBFIKC\
    M\x18\t\x20\x01(\x08H\0R\x0bJMBAGBFIKCM\x12\"\n\x0bMCLJBLKACMP\x18\x0f\
    \x20\x01(\x08H\0R\x0bMCLJBLKACMP\x12\"\n\x0bANEAAKIDPFL\x18\x01\x20\x01(\
    \x08H\0R\x0bANEAAKIDPFL\x12\"\n\x0bCPEEEPDBBPH\x18\x06\x20\x01(\x08H\0R\
    \x0bCPEEEPDBBPH\x12\"\n\x0bGNOHNPJBFJC\x18\x08\x20\x01(\x08H\0R\x0bGNOHN\
    PJBFJC\x12\"\n\x0bPJILEMMBLFG\x18\x05\x20\x01(\x08H\0R\x0bPJILEMMBLFG\
    \x12\"\n\x0bNENGEIIJJCB\x18\x07\x20\x01(\x08H\0R\x0bNENGEIIJJCB\x12\"\n\
    \x0bNMJDBOIPFIC\x18\x04\x20\x01(\x08H\0R\x0bNMJDBOIPFIC\x12\"\n\x0bCGADM\
    DEKIAC\x18\x0b\x20\x01(\x08H\0R\x0bCGADMDEKIACB\r\n\x0bKIDEBHIPICEb\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OBONHLAFBFD::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
