// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EIFLAIKEPDH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EIFLAIKEPDH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EIFLAIKEPDH {
    // message oneof groups
    pub DKFKPIPNNLF: ::std::option::Option<eiflaikepdh::DKFKPIPNNLF>,
    // special fields
    // @@protoc_insertion_point(special_field:EIFLAIKEPDH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EIFLAIKEPDH {
    fn default() -> &'a EIFLAIKEPDH {
        <EIFLAIKEPDH as ::protobuf::Message>::default_instance()
    }
}

impl EIFLAIKEPDH {
    pub fn new() -> EIFLAIKEPDH {
        ::std::default::Default::default()
    }

    // .BIBHGKHBPKI DIBMGHFDHJB = 11;

    pub fn DIBMGHFDHJB(&self) -> &super::BIBHGKHBPKI::BIBHGKHBPKI {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(ref v)) => v,
            _ => <super::BIBHGKHBPKI::BIBHGKHBPKI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DIBMGHFDHJB(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_DIBMGHFDHJB(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DIBMGHFDHJB(&mut self, v: super::BIBHGKHBPKI::BIBHGKHBPKI) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DIBMGHFDHJB(&mut self) -> &mut super::BIBHGKHBPKI::BIBHGKHBPKI {
        if let ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(super::BIBHGKHBPKI::BIBHGKHBPKI::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DIBMGHFDHJB(&mut self) -> super::BIBHGKHBPKI::BIBHGKHBPKI {
        if self.has_DIBMGHFDHJB() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BIBHGKHBPKI::BIBHGKHBPKI::new()
        }
    }

    // .MPGLNOEOCIF JLLPDPFOGDN = 6;

    pub fn JLLPDPFOGDN(&self) -> &super::MPGLNOEOCIF::MPGLNOEOCIF {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(ref v)) => v,
            _ => <super::MPGLNOEOCIF::MPGLNOEOCIF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JLLPDPFOGDN(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_JLLPDPFOGDN(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JLLPDPFOGDN(&mut self, v: super::MPGLNOEOCIF::MPGLNOEOCIF) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JLLPDPFOGDN(&mut self) -> &mut super::MPGLNOEOCIF::MPGLNOEOCIF {
        if let ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(super::MPGLNOEOCIF::MPGLNOEOCIF::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JLLPDPFOGDN(&mut self) -> super::MPGLNOEOCIF::MPGLNOEOCIF {
        if self.has_JLLPDPFOGDN() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MPGLNOEOCIF::MPGLNOEOCIF::new()
        }
    }

    // .MPGLNOEOCIF HBFMOCHINAI = 2;

    pub fn HBFMOCHINAI(&self) -> &super::MPGLNOEOCIF::MPGLNOEOCIF {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(ref v)) => v,
            _ => <super::MPGLNOEOCIF::MPGLNOEOCIF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HBFMOCHINAI(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_HBFMOCHINAI(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HBFMOCHINAI(&mut self, v: super::MPGLNOEOCIF::MPGLNOEOCIF) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HBFMOCHINAI(&mut self) -> &mut super::MPGLNOEOCIF::MPGLNOEOCIF {
        if let ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(super::MPGLNOEOCIF::MPGLNOEOCIF::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HBFMOCHINAI(&mut self) -> super::MPGLNOEOCIF::MPGLNOEOCIF {
        if self.has_HBFMOCHINAI() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MPGLNOEOCIF::MPGLNOEOCIF::new()
        }
    }

    // .HGJFIONFMBG NCDGIDPMNAL = 1;

    pub fn NCDGIDPMNAL(&self) -> &super::HGJFIONFMBG::HGJFIONFMBG {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(ref v)) => v,
            _ => <super::HGJFIONFMBG::HGJFIONFMBG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NCDGIDPMNAL(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_NCDGIDPMNAL(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NCDGIDPMNAL(&mut self, v: super::HGJFIONFMBG::HGJFIONFMBG) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NCDGIDPMNAL(&mut self) -> &mut super::HGJFIONFMBG::HGJFIONFMBG {
        if let ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(super::HGJFIONFMBG::HGJFIONFMBG::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NCDGIDPMNAL(&mut self) -> super::HGJFIONFMBG::HGJFIONFMBG {
        if self.has_NCDGIDPMNAL() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HGJFIONFMBG::HGJFIONFMBG::new()
        }
    }

    // .FCFPNMGMLEB LPKOCEBHBGD = 8;

    pub fn LPKOCEBHBGD(&self) -> &super::FCFPNMGMLEB::FCFPNMGMLEB {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(ref v)) => v,
            _ => <super::FCFPNMGMLEB::FCFPNMGMLEB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LPKOCEBHBGD(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_LPKOCEBHBGD(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LPKOCEBHBGD(&mut self, v: super::FCFPNMGMLEB::FCFPNMGMLEB) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LPKOCEBHBGD(&mut self) -> &mut super::FCFPNMGMLEB::FCFPNMGMLEB {
        if let ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(super::FCFPNMGMLEB::FCFPNMGMLEB::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LPKOCEBHBGD(&mut self) -> super::FCFPNMGMLEB::FCFPNMGMLEB {
        if self.has_LPKOCEBHBGD() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FCFPNMGMLEB::FCFPNMGMLEB::new()
        }
    }

    // .PHFDOEOEGBL NJDBGKBJMMH = 7;

    pub fn NJDBGKBJMMH(&self) -> &super::PHFDOEOEGBL::PHFDOEOEGBL {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(ref v)) => v,
            _ => <super::PHFDOEOEGBL::PHFDOEOEGBL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NJDBGKBJMMH(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_NJDBGKBJMMH(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NJDBGKBJMMH(&mut self, v: super::PHFDOEOEGBL::PHFDOEOEGBL) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NJDBGKBJMMH(&mut self) -> &mut super::PHFDOEOEGBL::PHFDOEOEGBL {
        if let ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(super::PHFDOEOEGBL::PHFDOEOEGBL::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NJDBGKBJMMH(&mut self) -> super::PHFDOEOEGBL::PHFDOEOEGBL {
        if self.has_NJDBGKBJMMH() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PHFDOEOEGBL::PHFDOEOEGBL::new()
        }
    }

    // .EIKNBAHBBDF NAMMECPAODB = 4;

    pub fn NAMMECPAODB(&self) -> &super::EIKNBAHBBDF::EIKNBAHBBDF {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(ref v)) => v,
            _ => <super::EIKNBAHBBDF::EIKNBAHBBDF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NAMMECPAODB(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_NAMMECPAODB(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NAMMECPAODB(&mut self, v: super::EIKNBAHBBDF::EIKNBAHBBDF) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NAMMECPAODB(&mut self) -> &mut super::EIKNBAHBBDF::EIKNBAHBBDF {
        if let ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(super::EIKNBAHBBDF::EIKNBAHBBDF::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NAMMECPAODB(&mut self) -> super::EIKNBAHBBDF::EIKNBAHBBDF {
        if self.has_NAMMECPAODB() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EIKNBAHBBDF::EIKNBAHBBDF::new()
        }
    }

    // uint32 FEGBALAAPDC = 10;

    pub fn FEGBALAAPDC(&self) -> u32 {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::FEGBALAAPDC(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_FEGBALAAPDC(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_FEGBALAAPDC(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::FEGBALAAPDC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FEGBALAAPDC(&mut self, v: u32) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::FEGBALAAPDC(v))
    }

    // uint32 JFCGODDABIA = 1109;

    pub fn JFCGODDABIA(&self) -> u32 {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JFCGODDABIA(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_JFCGODDABIA(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_JFCGODDABIA(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JFCGODDABIA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JFCGODDABIA(&mut self, v: u32) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JFCGODDABIA(v))
    }

    // .DKLPPHOPHFA CCOMBDFFEKE = 1852;

    pub fn CCOMBDFFEKE(&self) -> &super::DKLPPHOPHFA::DKLPPHOPHFA {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(ref v)) => v,
            _ => <super::DKLPPHOPHFA::DKLPPHOPHFA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CCOMBDFFEKE(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_CCOMBDFFEKE(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CCOMBDFFEKE(&mut self, v: super::DKLPPHOPHFA::DKLPPHOPHFA) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CCOMBDFFEKE(&mut self) -> &mut super::DKLPPHOPHFA::DKLPPHOPHFA {
        if let ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(super::DKLPPHOPHFA::DKLPPHOPHFA::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CCOMBDFFEKE(&mut self) -> super::DKLPPHOPHFA::DKLPPHOPHFA {
        if self.has_CCOMBDFFEKE() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DKLPPHOPHFA::DKLPPHOPHFA::new()
        }
    }

    // .AGIOJLEAMKK GJDLHHKEPOH = 2026;

    pub fn GJDLHHKEPOH(&self) -> &super::AGIOJLEAMKK::AGIOJLEAMKK {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(ref v)) => v,
            _ => <super::AGIOJLEAMKK::AGIOJLEAMKK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GJDLHHKEPOH(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_GJDLHHKEPOH(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GJDLHHKEPOH(&mut self, v: super::AGIOJLEAMKK::AGIOJLEAMKK) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GJDLHHKEPOH(&mut self) -> &mut super::AGIOJLEAMKK::AGIOJLEAMKK {
        if let ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(super::AGIOJLEAMKK::AGIOJLEAMKK::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GJDLHHKEPOH(&mut self) -> super::AGIOJLEAMKK::AGIOJLEAMKK {
        if self.has_GJDLHHKEPOH() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AGIOJLEAMKK::AGIOJLEAMKK::new()
        }
    }

    // uint32 CEKIBMFCCBB = 185;

    pub fn CEKIBMFCCBB(&self) -> u32 {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CEKIBMFCCBB(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_CEKIBMFCCBB(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_CEKIBMFCCBB(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CEKIBMFCCBB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CEKIBMFCCBB(&mut self, v: u32) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CEKIBMFCCBB(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BIBHGKHBPKI::BIBHGKHBPKI>(
            "DIBMGHFDHJB",
            EIFLAIKEPDH::has_DIBMGHFDHJB,
            EIFLAIKEPDH::DIBMGHFDHJB,
            EIFLAIKEPDH::mut_DIBMGHFDHJB,
            EIFLAIKEPDH::set_DIBMGHFDHJB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MPGLNOEOCIF::MPGLNOEOCIF>(
            "JLLPDPFOGDN",
            EIFLAIKEPDH::has_JLLPDPFOGDN,
            EIFLAIKEPDH::JLLPDPFOGDN,
            EIFLAIKEPDH::mut_JLLPDPFOGDN,
            EIFLAIKEPDH::set_JLLPDPFOGDN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MPGLNOEOCIF::MPGLNOEOCIF>(
            "HBFMOCHINAI",
            EIFLAIKEPDH::has_HBFMOCHINAI,
            EIFLAIKEPDH::HBFMOCHINAI,
            EIFLAIKEPDH::mut_HBFMOCHINAI,
            EIFLAIKEPDH::set_HBFMOCHINAI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HGJFIONFMBG::HGJFIONFMBG>(
            "NCDGIDPMNAL",
            EIFLAIKEPDH::has_NCDGIDPMNAL,
            EIFLAIKEPDH::NCDGIDPMNAL,
            EIFLAIKEPDH::mut_NCDGIDPMNAL,
            EIFLAIKEPDH::set_NCDGIDPMNAL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FCFPNMGMLEB::FCFPNMGMLEB>(
            "LPKOCEBHBGD",
            EIFLAIKEPDH::has_LPKOCEBHBGD,
            EIFLAIKEPDH::LPKOCEBHBGD,
            EIFLAIKEPDH::mut_LPKOCEBHBGD,
            EIFLAIKEPDH::set_LPKOCEBHBGD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PHFDOEOEGBL::PHFDOEOEGBL>(
            "NJDBGKBJMMH",
            EIFLAIKEPDH::has_NJDBGKBJMMH,
            EIFLAIKEPDH::NJDBGKBJMMH,
            EIFLAIKEPDH::mut_NJDBGKBJMMH,
            EIFLAIKEPDH::set_NJDBGKBJMMH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EIKNBAHBBDF::EIKNBAHBBDF>(
            "NAMMECPAODB",
            EIFLAIKEPDH::has_NAMMECPAODB,
            EIFLAIKEPDH::NAMMECPAODB,
            EIFLAIKEPDH::mut_NAMMECPAODB,
            EIFLAIKEPDH::set_NAMMECPAODB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "FEGBALAAPDC",
            EIFLAIKEPDH::has_FEGBALAAPDC,
            EIFLAIKEPDH::FEGBALAAPDC,
            EIFLAIKEPDH::set_FEGBALAAPDC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "JFCGODDABIA",
            EIFLAIKEPDH::has_JFCGODDABIA,
            EIFLAIKEPDH::JFCGODDABIA,
            EIFLAIKEPDH::set_JFCGODDABIA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DKLPPHOPHFA::DKLPPHOPHFA>(
            "CCOMBDFFEKE",
            EIFLAIKEPDH::has_CCOMBDFFEKE,
            EIFLAIKEPDH::CCOMBDFFEKE,
            EIFLAIKEPDH::mut_CCOMBDFFEKE,
            EIFLAIKEPDH::set_CCOMBDFFEKE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AGIOJLEAMKK::AGIOJLEAMKK>(
            "GJDLHHKEPOH",
            EIFLAIKEPDH::has_GJDLHHKEPOH,
            EIFLAIKEPDH::GJDLHHKEPOH,
            EIFLAIKEPDH::mut_GJDLHHKEPOH,
            EIFLAIKEPDH::set_GJDLHHKEPOH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "CEKIBMFCCBB",
            EIFLAIKEPDH::has_CEKIBMFCCBB,
            EIFLAIKEPDH::CEKIBMFCCBB,
            EIFLAIKEPDH::set_CEKIBMFCCBB,
        ));
        oneofs.push(eiflaikepdh::DKFKPIPNNLF::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EIFLAIKEPDH>(
            "EIFLAIKEPDH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EIFLAIKEPDH {
    const NAME: &'static str = "EIFLAIKEPDH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                90 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(is.read_message()?));
                },
                50 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(is.read_message()?));
                },
                18 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(is.read_message()?));
                },
                10 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(is.read_message()?));
                },
                66 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(is.read_message()?));
                },
                58 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(is.read_message()?));
                },
                34 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(is.read_message()?));
                },
                80 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::FEGBALAAPDC(is.read_uint32()?));
                },
                8872 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::JFCGODDABIA(is.read_uint32()?));
                },
                14818 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(is.read_message()?));
                },
                16210 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(is.read_message()?));
                },
                1480 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(eiflaikepdh::DKFKPIPNNLF::CEKIBMFCCBB(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.DKFKPIPNNLF {
            match v {
                &eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiflaikepdh::DKFKPIPNNLF::FEGBALAAPDC(v) => {
                    my_size += ::protobuf::rt::uint32_size(10, v);
                },
                &eiflaikepdh::DKFKPIPNNLF::JFCGODDABIA(v) => {
                    my_size += ::protobuf::rt::uint32_size(1109, v);
                },
                &eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiflaikepdh::DKFKPIPNNLF::CEKIBMFCCBB(v) => {
                    my_size += ::protobuf::rt::uint32_size(185, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.DKFKPIPNNLF {
            match v {
                &eiflaikepdh::DKFKPIPNNLF::DIBMGHFDHJB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::JLLPDPFOGDN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::HBFMOCHINAI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::NCDGIDPMNAL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::LPKOCEBHBGD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::NJDBGKBJMMH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::NAMMECPAODB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::FEGBALAAPDC(v) => {
                    os.write_uint32(10, v)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::JFCGODDABIA(v) => {
                    os.write_uint32(1109, v)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::CCOMBDFFEKE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1852, v, os)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::GJDLHHKEPOH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2026, v, os)?;
                },
                &eiflaikepdh::DKFKPIPNNLF::CEKIBMFCCBB(v) => {
                    os.write_uint32(185, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EIFLAIKEPDH {
        EIFLAIKEPDH::new()
    }

    fn clear(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EIFLAIKEPDH {
        static instance: EIFLAIKEPDH = EIFLAIKEPDH {
            DKFKPIPNNLF: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EIFLAIKEPDH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EIFLAIKEPDH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EIFLAIKEPDH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EIFLAIKEPDH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EIFLAIKEPDH`
pub mod eiflaikepdh {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:EIFLAIKEPDH.DKFKPIPNNLF)
    pub enum DKFKPIPNNLF {
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.DIBMGHFDHJB)
        DIBMGHFDHJB(super::super::BIBHGKHBPKI::BIBHGKHBPKI),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.JLLPDPFOGDN)
        JLLPDPFOGDN(super::super::MPGLNOEOCIF::MPGLNOEOCIF),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.HBFMOCHINAI)
        HBFMOCHINAI(super::super::MPGLNOEOCIF::MPGLNOEOCIF),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.NCDGIDPMNAL)
        NCDGIDPMNAL(super::super::HGJFIONFMBG::HGJFIONFMBG),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.LPKOCEBHBGD)
        LPKOCEBHBGD(super::super::FCFPNMGMLEB::FCFPNMGMLEB),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.NJDBGKBJMMH)
        NJDBGKBJMMH(super::super::PHFDOEOEGBL::PHFDOEOEGBL),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.NAMMECPAODB)
        NAMMECPAODB(super::super::EIKNBAHBBDF::EIKNBAHBBDF),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.FEGBALAAPDC)
        FEGBALAAPDC(u32),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.JFCGODDABIA)
        JFCGODDABIA(u32),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.CCOMBDFFEKE)
        CCOMBDFFEKE(super::super::DKLPPHOPHFA::DKLPPHOPHFA),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.GJDLHHKEPOH)
        GJDLHHKEPOH(super::super::AGIOJLEAMKK::AGIOJLEAMKK),
        // @@protoc_insertion_point(oneof_field:EIFLAIKEPDH.CEKIBMFCCBB)
        CEKIBMFCCBB(u32),
    }

    impl ::protobuf::Oneof for DKFKPIPNNLF {
    }

    impl ::protobuf::OneofFull for DKFKPIPNNLF {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EIFLAIKEPDH as ::protobuf::MessageFull>::descriptor().oneof_by_name("DKFKPIPNNLF").unwrap()).clone()
        }
    }

    impl DKFKPIPNNLF {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DKFKPIPNNLF>("DKFKPIPNNLF")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EIFLAIKEPDH.proto\x1a\x11AGIOJLEAMKK.proto\x1a\x11BIBHGKHBPKI.prot\
    o\x1a\x11DKLPPHOPHFA.proto\x1a\x11EIKNBAHBBDF.proto\x1a\x11FCFPNMGMLEB.p\
    roto\x1a\x11HGJFIONFMBG.proto\x1a\x11MPGLNOEOCIF.proto\x1a\x11PHFDOEOEGB\
    L.proto\"\xce\x04\n\x0bEIFLAIKEPDH\x120\n\x0bDIBMGHFDHJB\x18\x0b\x20\x01\
    (\x0b2\x0c.BIBHGKHBPKIH\0R\x0bDIBMGHFDHJB\x120\n\x0bJLLPDPFOGDN\x18\x06\
    \x20\x01(\x0b2\x0c.MPGLNOEOCIFH\0R\x0bJLLPDPFOGDN\x120\n\x0bHBFMOCHINAI\
    \x18\x02\x20\x01(\x0b2\x0c.MPGLNOEOCIFH\0R\x0bHBFMOCHINAI\x120\n\x0bNCDG\
    IDPMNAL\x18\x01\x20\x01(\x0b2\x0c.HGJFIONFMBGH\0R\x0bNCDGIDPMNAL\x120\n\
    \x0bLPKOCEBHBGD\x18\x08\x20\x01(\x0b2\x0c.FCFPNMGMLEBH\0R\x0bLPKOCEBHBGD\
    \x120\n\x0bNJDBGKBJMMH\x18\x07\x20\x01(\x0b2\x0c.PHFDOEOEGBLH\0R\x0bNJDB\
    GKBJMMH\x120\n\x0bNAMMECPAODB\x18\x04\x20\x01(\x0b2\x0c.EIKNBAHBBDFH\0R\
    \x0bNAMMECPAODB\x12\"\n\x0bFEGBALAAPDC\x18\n\x20\x01(\rH\0R\x0bFEGBALAAP\
    DC\x12#\n\x0bJFCGODDABIA\x18\xd5\x08\x20\x01(\rH\0R\x0bJFCGODDABIA\x121\
    \n\x0bCCOMBDFFEKE\x18\xbc\x0e\x20\x01(\x0b2\x0c.DKLPPHOPHFAH\0R\x0bCCOMB\
    DFFEKE\x121\n\x0bGJDLHHKEPOH\x18\xea\x0f\x20\x01(\x0b2\x0c.AGIOJLEAMKKH\
    \0R\x0bGJDLHHKEPOH\x12#\n\x0bCEKIBMFCCBB\x18\xb9\x01\x20\x01(\rH\0R\x0bC\
    EKIBMFCCBBB\r\n\x0bDKFKPIPNNLFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::AGIOJLEAMKK::file_descriptor().clone());
            deps.push(super::BIBHGKHBPKI::file_descriptor().clone());
            deps.push(super::DKLPPHOPHFA::file_descriptor().clone());
            deps.push(super::EIKNBAHBBDF::file_descriptor().clone());
            deps.push(super::FCFPNMGMLEB::file_descriptor().clone());
            deps.push(super::HGJFIONFMBG::file_descriptor().clone());
            deps.push(super::MPGLNOEOCIF::file_descriptor().clone());
            deps.push(super::PHFDOEOEGBL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EIFLAIKEPDH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
