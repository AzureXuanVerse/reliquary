// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HPPHNMBHEEJ.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HPPHNMBHEEJ)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HPPHNMBHEEJ {
    // message fields
    // @@protoc_insertion_point(field:HPPHNMBHEEJ.EACCGOKFCDH)
    pub EACCGOKFCDH: ::protobuf::MessageField<super::ELEJIEDDFHL::ELEJIEDDFHL>,
    // @@protoc_insertion_point(field:HPPHNMBHEEJ.CKGCGAKOBIO)
    pub CKGCGAKOBIO: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HPPHNMBHEEJ.FDDLABHFDED)
    pub FDDLABHFDED: ::protobuf::MessageField<super::PAJMDOHPIIK::PAJMDOHPIIK>,
    // @@protoc_insertion_point(field:HPPHNMBHEEJ.GLPBIBPFLDB)
    pub GLPBIBPFLDB: ::protobuf::MessageField<super::MKACCPKNCKI::MKACCPKNCKI>,
    // @@protoc_insertion_point(field:HPPHNMBHEEJ.JGKJJKFBLCF)
    pub JGKJJKFBLCF: u32,
    // @@protoc_insertion_point(field:HPPHNMBHEEJ.NNMAEGJLIMK)
    pub NNMAEGJLIMK: ::protobuf::MessageField<super::MKFEGNBJLGI::MKFEGNBJLGI>,
    // @@protoc_insertion_point(field:HPPHNMBHEEJ.FFLNPGHOJDD)
    pub FFLNPGHOJDD: ::protobuf::MessageField<super::HNPELFOBMFO::HNPELFOBMFO>,
    // @@protoc_insertion_point(field:HPPHNMBHEEJ.NJCHCICPMNO)
    pub NJCHCICPMNO: ::protobuf::MessageField<super::HPACKIIECGI::HPACKIIECGI>,
    // special fields
    // @@protoc_insertion_point(special_field:HPPHNMBHEEJ.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HPPHNMBHEEJ {
    fn default() -> &'a HPPHNMBHEEJ {
        <HPPHNMBHEEJ as ::protobuf::Message>::default_instance()
    }
}

impl HPPHNMBHEEJ {
    pub fn new() -> HPPHNMBHEEJ {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ELEJIEDDFHL::ELEJIEDDFHL>(
            "EACCGOKFCDH",
            |m: &HPPHNMBHEEJ| { &m.EACCGOKFCDH },
            |m: &mut HPPHNMBHEEJ| { &mut m.EACCGOKFCDH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CKGCGAKOBIO",
            |m: &HPPHNMBHEEJ| { &m.CKGCGAKOBIO },
            |m: &mut HPPHNMBHEEJ| { &mut m.CKGCGAKOBIO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PAJMDOHPIIK::PAJMDOHPIIK>(
            "FDDLABHFDED",
            |m: &HPPHNMBHEEJ| { &m.FDDLABHFDED },
            |m: &mut HPPHNMBHEEJ| { &mut m.FDDLABHFDED },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MKACCPKNCKI::MKACCPKNCKI>(
            "GLPBIBPFLDB",
            |m: &HPPHNMBHEEJ| { &m.GLPBIBPFLDB },
            |m: &mut HPPHNMBHEEJ| { &mut m.GLPBIBPFLDB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JGKJJKFBLCF",
            |m: &HPPHNMBHEEJ| { &m.JGKJJKFBLCF },
            |m: &mut HPPHNMBHEEJ| { &mut m.JGKJJKFBLCF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MKFEGNBJLGI::MKFEGNBJLGI>(
            "NNMAEGJLIMK",
            |m: &HPPHNMBHEEJ| { &m.NNMAEGJLIMK },
            |m: &mut HPPHNMBHEEJ| { &mut m.NNMAEGJLIMK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HNPELFOBMFO::HNPELFOBMFO>(
            "FFLNPGHOJDD",
            |m: &HPPHNMBHEEJ| { &m.FFLNPGHOJDD },
            |m: &mut HPPHNMBHEEJ| { &mut m.FFLNPGHOJDD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HPACKIIECGI::HPACKIIECGI>(
            "NJCHCICPMNO",
            |m: &HPPHNMBHEEJ| { &m.NJCHCICPMNO },
            |m: &mut HPPHNMBHEEJ| { &mut m.NJCHCICPMNO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HPPHNMBHEEJ>(
            "HPPHNMBHEEJ",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HPPHNMBHEEJ {
    const NAME: &'static str = "HPPHNMBHEEJ";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EACCGOKFCDH)?;
                },
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.CKGCGAKOBIO)?;
                },
                8 => {
                    self.CKGCGAKOBIO.push(is.read_uint32()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FDDLABHFDED)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GLPBIBPFLDB)?;
                },
                88 => {
                    self.JGKJJKFBLCF = is.read_uint32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NNMAEGJLIMK)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FFLNPGHOJDD)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NJCHCICPMNO)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.EACCGOKFCDH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.CKGCGAKOBIO {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.FDDLABHFDED.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.GLPBIBPFLDB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.JGKJJKFBLCF != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.JGKJJKFBLCF);
        }
        if let Some(v) = self.NNMAEGJLIMK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.FFLNPGHOJDD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NJCHCICPMNO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.EACCGOKFCDH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        for v in &self.CKGCGAKOBIO {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.FDDLABHFDED.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.GLPBIBPFLDB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.JGKJJKFBLCF != 0 {
            os.write_uint32(11, self.JGKJJKFBLCF)?;
        }
        if let Some(v) = self.NNMAEGJLIMK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.FFLNPGHOJDD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.NJCHCICPMNO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HPPHNMBHEEJ {
        HPPHNMBHEEJ::new()
    }

    fn clear(&mut self) {
        self.EACCGOKFCDH.clear();
        self.CKGCGAKOBIO.clear();
        self.FDDLABHFDED.clear();
        self.GLPBIBPFLDB.clear();
        self.JGKJJKFBLCF = 0;
        self.NNMAEGJLIMK.clear();
        self.FFLNPGHOJDD.clear();
        self.NJCHCICPMNO.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HPPHNMBHEEJ {
        static instance: HPPHNMBHEEJ = HPPHNMBHEEJ {
            EACCGOKFCDH: ::protobuf::MessageField::none(),
            CKGCGAKOBIO: ::std::vec::Vec::new(),
            FDDLABHFDED: ::protobuf::MessageField::none(),
            GLPBIBPFLDB: ::protobuf::MessageField::none(),
            JGKJJKFBLCF: 0,
            NNMAEGJLIMK: ::protobuf::MessageField::none(),
            FFLNPGHOJDD: ::protobuf::MessageField::none(),
            NJCHCICPMNO: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HPPHNMBHEEJ {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HPPHNMBHEEJ").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HPPHNMBHEEJ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HPPHNMBHEEJ {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HPPHNMBHEEJ.proto\x1a\x11ELEJIEDDFHL.proto\x1a\x11HNPELFOBMFO.prot\
    o\x1a\x11HPACKIIECGI.proto\x1a\x11MKACCPKNCKI.proto\x1a\x11MKFEGNBJLGI.p\
    roto\x1a\x11PAJMDOHPIIK.proto\"\xf1\x02\n\x0bHPPHNMBHEEJ\x12.\n\x0bEACCG\
    OKFCDH\x18\x0e\x20\x01(\x0b2\x0c.ELEJIEDDFHLR\x0bEACCGOKFCDH\x12\x20\n\
    \x0bCKGCGAKOBIO\x18\x01\x20\x03(\rR\x0bCKGCGAKOBIO\x12.\n\x0bFDDLABHFDED\
    \x18\x0c\x20\x01(\x0b2\x0c.PAJMDOHPIIKR\x0bFDDLABHFDED\x12.\n\x0bGLPBIBP\
    FLDB\x18\n\x20\x01(\x0b2\x0c.MKACCPKNCKIR\x0bGLPBIBPFLDB\x12\x20\n\x0bJG\
    KJJKFBLCF\x18\x0b\x20\x01(\rR\x0bJGKJJKFBLCF\x12.\n\x0bNNMAEGJLIMK\x18\
    \x08\x20\x01(\x0b2\x0c.MKFEGNBJLGIR\x0bNNMAEGJLIMK\x12.\n\x0bFFLNPGHOJDD\
    \x18\x05\x20\x01(\x0b2\x0c.HNPELFOBMFOR\x0bFFLNPGHOJDD\x12.\n\x0bNJCHCIC\
    PMNO\x18\x03\x20\x01(\x0b2\x0c.HPACKIIECGIR\x0bNJCHCICPMNOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::ELEJIEDDFHL::file_descriptor().clone());
            deps.push(super::HNPELFOBMFO::file_descriptor().clone());
            deps.push(super::HPACKIIECGI::file_descriptor().clone());
            deps.push(super::MKACCPKNCKI::file_descriptor().clone());
            deps.push(super::MKFEGNBJLGI::file_descriptor().clone());
            deps.push(super::PAJMDOHPIIK::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HPPHNMBHEEJ::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
