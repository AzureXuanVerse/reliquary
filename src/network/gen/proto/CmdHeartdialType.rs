// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdHeartdialType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdHeartdialType)
pub enum CmdHeartdialType {
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdHeartdialTypeNone)
    CmdHeartdialTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdFinishEmotionDialoguePerformanceScRsp)
    CmdFinishEmotionDialoguePerformanceScRsp = 6374,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdSubmitEmotionItemScRsp)
    CmdSubmitEmotionItemScRsp = 6328,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdHeartDialScriptChangeScNotify)
    CmdHeartDialScriptChangeScNotify = 6324,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdHeartDialTraceScriptScRsp)
    CmdHeartDialTraceScriptScRsp = 6334,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdGetHeartDialInfoScRsp)
    CmdGetHeartDialInfoScRsp = 6395,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdChangeScriptEmotionScRsp)
    CmdChangeScriptEmotionScRsp = 6327,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdGetHeartDialInfoCsReq)
    CmdGetHeartDialInfoCsReq = 6336,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdHeartDialTraceScriptCsReq)
    CmdHeartDialTraceScriptCsReq = 6393,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdChangeScriptEmotionCsReq)
    CmdChangeScriptEmotionCsReq = 6384,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdFinishEmotionDialoguePerformanceCsReq)
    CmdFinishEmotionDialoguePerformanceCsReq = 6352,
    // @@protoc_insertion_point(enum_value:CmdHeartdialType.CmdSubmitEmotionItemCsReq)
    CmdSubmitEmotionItemCsReq = 6367,
}

impl ::protobuf::Enum for CmdHeartdialType {
    const NAME: &'static str = "CmdHeartdialType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdHeartdialType> {
        match value {
            0 => ::std::option::Option::Some(CmdHeartdialType::CmdHeartdialTypeNone),
            6374 => ::std::option::Option::Some(CmdHeartdialType::CmdFinishEmotionDialoguePerformanceScRsp),
            6328 => ::std::option::Option::Some(CmdHeartdialType::CmdSubmitEmotionItemScRsp),
            6324 => ::std::option::Option::Some(CmdHeartdialType::CmdHeartDialScriptChangeScNotify),
            6334 => ::std::option::Option::Some(CmdHeartdialType::CmdHeartDialTraceScriptScRsp),
            6395 => ::std::option::Option::Some(CmdHeartdialType::CmdGetHeartDialInfoScRsp),
            6327 => ::std::option::Option::Some(CmdHeartdialType::CmdChangeScriptEmotionScRsp),
            6336 => ::std::option::Option::Some(CmdHeartdialType::CmdGetHeartDialInfoCsReq),
            6393 => ::std::option::Option::Some(CmdHeartdialType::CmdHeartDialTraceScriptCsReq),
            6384 => ::std::option::Option::Some(CmdHeartdialType::CmdChangeScriptEmotionCsReq),
            6352 => ::std::option::Option::Some(CmdHeartdialType::CmdFinishEmotionDialoguePerformanceCsReq),
            6367 => ::std::option::Option::Some(CmdHeartdialType::CmdSubmitEmotionItemCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdHeartdialType> {
        match str {
            "CmdHeartdialTypeNone" => ::std::option::Option::Some(CmdHeartdialType::CmdHeartdialTypeNone),
            "CmdFinishEmotionDialoguePerformanceScRsp" => ::std::option::Option::Some(CmdHeartdialType::CmdFinishEmotionDialoguePerformanceScRsp),
            "CmdSubmitEmotionItemScRsp" => ::std::option::Option::Some(CmdHeartdialType::CmdSubmitEmotionItemScRsp),
            "CmdHeartDialScriptChangeScNotify" => ::std::option::Option::Some(CmdHeartdialType::CmdHeartDialScriptChangeScNotify),
            "CmdHeartDialTraceScriptScRsp" => ::std::option::Option::Some(CmdHeartdialType::CmdHeartDialTraceScriptScRsp),
            "CmdGetHeartDialInfoScRsp" => ::std::option::Option::Some(CmdHeartdialType::CmdGetHeartDialInfoScRsp),
            "CmdChangeScriptEmotionScRsp" => ::std::option::Option::Some(CmdHeartdialType::CmdChangeScriptEmotionScRsp),
            "CmdGetHeartDialInfoCsReq" => ::std::option::Option::Some(CmdHeartdialType::CmdGetHeartDialInfoCsReq),
            "CmdHeartDialTraceScriptCsReq" => ::std::option::Option::Some(CmdHeartdialType::CmdHeartDialTraceScriptCsReq),
            "CmdChangeScriptEmotionCsReq" => ::std::option::Option::Some(CmdHeartdialType::CmdChangeScriptEmotionCsReq),
            "CmdFinishEmotionDialoguePerformanceCsReq" => ::std::option::Option::Some(CmdHeartdialType::CmdFinishEmotionDialoguePerformanceCsReq),
            "CmdSubmitEmotionItemCsReq" => ::std::option::Option::Some(CmdHeartdialType::CmdSubmitEmotionItemCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdHeartdialType] = &[
        CmdHeartdialType::CmdHeartdialTypeNone,
        CmdHeartdialType::CmdFinishEmotionDialoguePerformanceScRsp,
        CmdHeartdialType::CmdSubmitEmotionItemScRsp,
        CmdHeartdialType::CmdHeartDialScriptChangeScNotify,
        CmdHeartdialType::CmdHeartDialTraceScriptScRsp,
        CmdHeartdialType::CmdGetHeartDialInfoScRsp,
        CmdHeartdialType::CmdChangeScriptEmotionScRsp,
        CmdHeartdialType::CmdGetHeartDialInfoCsReq,
        CmdHeartdialType::CmdHeartDialTraceScriptCsReq,
        CmdHeartdialType::CmdChangeScriptEmotionCsReq,
        CmdHeartdialType::CmdFinishEmotionDialoguePerformanceCsReq,
        CmdHeartdialType::CmdSubmitEmotionItemCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdHeartdialType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdHeartdialType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdHeartdialType::CmdHeartdialTypeNone => 0,
            CmdHeartdialType::CmdFinishEmotionDialoguePerformanceScRsp => 1,
            CmdHeartdialType::CmdSubmitEmotionItemScRsp => 2,
            CmdHeartdialType::CmdHeartDialScriptChangeScNotify => 3,
            CmdHeartdialType::CmdHeartDialTraceScriptScRsp => 4,
            CmdHeartdialType::CmdGetHeartDialInfoScRsp => 5,
            CmdHeartdialType::CmdChangeScriptEmotionScRsp => 6,
            CmdHeartdialType::CmdGetHeartDialInfoCsReq => 7,
            CmdHeartdialType::CmdHeartDialTraceScriptCsReq => 8,
            CmdHeartdialType::CmdChangeScriptEmotionCsReq => 9,
            CmdHeartdialType::CmdFinishEmotionDialoguePerformanceCsReq => 10,
            CmdHeartdialType::CmdSubmitEmotionItemCsReq => 11,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdHeartdialType {
    fn default() -> Self {
        CmdHeartdialType::CmdHeartdialTypeNone
    }
}

impl CmdHeartdialType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdHeartdialType>("CmdHeartdialType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16CmdHeartdialType.proto*\xb9\x03\n\x10CmdHeartdialType\x12\x18\n\
    \x14CmdHeartdialTypeNone\x10\0\x12-\n(CmdFinishEmotionDialoguePerformanc\
    eScRsp\x10\xe61\x12\x1e\n\x19CmdSubmitEmotionItemScRsp\x10\xb81\x12%\n\
    \x20CmdHeartDialScriptChangeScNotify\x10\xb41\x12!\n\x1cCmdHeartDialTrac\
    eScriptScRsp\x10\xbe1\x12\x1d\n\x18CmdGetHeartDialInfoScRsp\x10\xfb1\x12\
    \x20\n\x1bCmdChangeScriptEmotionScRsp\x10\xb71\x12\x1d\n\x18CmdGetHeartD\
    ialInfoCsReq\x10\xc01\x12!\n\x1cCmdHeartDialTraceScriptCsReq\x10\xf91\
    \x12\x20\n\x1bCmdChangeScriptEmotionCsReq\x10\xf01\x12-\n(CmdFinishEmoti\
    onDialoguePerformanceCsReq\x10\xd01\x12\x1e\n\x19CmdSubmitEmotionItemCsR\
    eq\x10\xdf1b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdHeartdialType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
