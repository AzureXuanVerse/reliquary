// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ECFCOOLMBAB.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ECFCOOLMBAB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ECFCOOLMBAB {
    // message fields
    // @@protoc_insertion_point(field:ECFCOOLMBAB.LNEDFBLNHEN)
    pub LNEDFBLNHEN: u32,
    // @@protoc_insertion_point(field:ECFCOOLMBAB.AEOFHBEPGOO)
    pub AEOFHBEPGOO: ::std::string::String,
    // @@protoc_insertion_point(field:ECFCOOLMBAB.GMIIJHGAFCE)
    pub GMIIJHGAFCE: u32,
    // @@protoc_insertion_point(field:ECFCOOLMBAB.BJLAFKJOMKH)
    pub BJLAFKJOMKH: u32,
    // @@protoc_insertion_point(field:ECFCOOLMBAB.EKCKCPEEOPM)
    pub EKCKCPEEOPM: u32,
    // @@protoc_insertion_point(field:ECFCOOLMBAB.KHCMDHBLHFO)
    pub KHCMDHBLHFO: u32,
    // @@protoc_insertion_point(field:ECFCOOLMBAB.MPHKEOMGHKD)
    pub MPHKEOMGHKD: u32,
    // @@protoc_insertion_point(field:ECFCOOLMBAB.CHJCDMJNCED)
    pub CHJCDMJNCED: u32,
    // @@protoc_insertion_point(field:ECFCOOLMBAB.EGEPPOIHFLG)
    pub EGEPPOIHFLG: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ECFCOOLMBAB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ECFCOOLMBAB {
    fn default() -> &'a ECFCOOLMBAB {
        <ECFCOOLMBAB as ::protobuf::Message>::default_instance()
    }
}

impl ECFCOOLMBAB {
    pub fn new() -> ECFCOOLMBAB {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LNEDFBLNHEN",
            |m: &ECFCOOLMBAB| { &m.LNEDFBLNHEN },
            |m: &mut ECFCOOLMBAB| { &mut m.LNEDFBLNHEN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AEOFHBEPGOO",
            |m: &ECFCOOLMBAB| { &m.AEOFHBEPGOO },
            |m: &mut ECFCOOLMBAB| { &mut m.AEOFHBEPGOO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GMIIJHGAFCE",
            |m: &ECFCOOLMBAB| { &m.GMIIJHGAFCE },
            |m: &mut ECFCOOLMBAB| { &mut m.GMIIJHGAFCE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BJLAFKJOMKH",
            |m: &ECFCOOLMBAB| { &m.BJLAFKJOMKH },
            |m: &mut ECFCOOLMBAB| { &mut m.BJLAFKJOMKH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EKCKCPEEOPM",
            |m: &ECFCOOLMBAB| { &m.EKCKCPEEOPM },
            |m: &mut ECFCOOLMBAB| { &mut m.EKCKCPEEOPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KHCMDHBLHFO",
            |m: &ECFCOOLMBAB| { &m.KHCMDHBLHFO },
            |m: &mut ECFCOOLMBAB| { &mut m.KHCMDHBLHFO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPHKEOMGHKD",
            |m: &ECFCOOLMBAB| { &m.MPHKEOMGHKD },
            |m: &mut ECFCOOLMBAB| { &mut m.MPHKEOMGHKD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CHJCDMJNCED",
            |m: &ECFCOOLMBAB| { &m.CHJCDMJNCED },
            |m: &mut ECFCOOLMBAB| { &mut m.CHJCDMJNCED },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EGEPPOIHFLG",
            |m: &ECFCOOLMBAB| { &m.EGEPPOIHFLG },
            |m: &mut ECFCOOLMBAB| { &mut m.EGEPPOIHFLG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ECFCOOLMBAB>(
            "ECFCOOLMBAB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ECFCOOLMBAB {
    const NAME: &'static str = "ECFCOOLMBAB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.LNEDFBLNHEN = is.read_uint32()?;
                },
                18 => {
                    self.AEOFHBEPGOO = is.read_string()?;
                },
                24 => {
                    self.GMIIJHGAFCE = is.read_uint32()?;
                },
                32 => {
                    self.BJLAFKJOMKH = is.read_uint32()?;
                },
                40 => {
                    self.EKCKCPEEOPM = is.read_uint32()?;
                },
                48 => {
                    self.KHCMDHBLHFO = is.read_uint32()?;
                },
                56 => {
                    self.MPHKEOMGHKD = is.read_uint32()?;
                },
                64 => {
                    self.CHJCDMJNCED = is.read_uint32()?;
                },
                72 => {
                    self.EGEPPOIHFLG = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.LNEDFBLNHEN != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.LNEDFBLNHEN);
        }
        if !self.AEOFHBEPGOO.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.AEOFHBEPGOO);
        }
        if self.GMIIJHGAFCE != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.GMIIJHGAFCE);
        }
        if self.BJLAFKJOMKH != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.BJLAFKJOMKH);
        }
        if self.EKCKCPEEOPM != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.EKCKCPEEOPM);
        }
        if self.KHCMDHBLHFO != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.KHCMDHBLHFO);
        }
        if self.MPHKEOMGHKD != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.MPHKEOMGHKD);
        }
        if self.CHJCDMJNCED != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.CHJCDMJNCED);
        }
        if self.EGEPPOIHFLG != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.EGEPPOIHFLG);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.LNEDFBLNHEN != 0 {
            os.write_uint32(1, self.LNEDFBLNHEN)?;
        }
        if !self.AEOFHBEPGOO.is_empty() {
            os.write_string(2, &self.AEOFHBEPGOO)?;
        }
        if self.GMIIJHGAFCE != 0 {
            os.write_uint32(3, self.GMIIJHGAFCE)?;
        }
        if self.BJLAFKJOMKH != 0 {
            os.write_uint32(4, self.BJLAFKJOMKH)?;
        }
        if self.EKCKCPEEOPM != 0 {
            os.write_uint32(5, self.EKCKCPEEOPM)?;
        }
        if self.KHCMDHBLHFO != 0 {
            os.write_uint32(6, self.KHCMDHBLHFO)?;
        }
        if self.MPHKEOMGHKD != 0 {
            os.write_uint32(7, self.MPHKEOMGHKD)?;
        }
        if self.CHJCDMJNCED != 0 {
            os.write_uint32(8, self.CHJCDMJNCED)?;
        }
        if self.EGEPPOIHFLG != 0 {
            os.write_uint32(9, self.EGEPPOIHFLG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ECFCOOLMBAB {
        ECFCOOLMBAB::new()
    }

    fn clear(&mut self) {
        self.LNEDFBLNHEN = 0;
        self.AEOFHBEPGOO.clear();
        self.GMIIJHGAFCE = 0;
        self.BJLAFKJOMKH = 0;
        self.EKCKCPEEOPM = 0;
        self.KHCMDHBLHFO = 0;
        self.MPHKEOMGHKD = 0;
        self.CHJCDMJNCED = 0;
        self.EGEPPOIHFLG = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ECFCOOLMBAB {
        static instance: ECFCOOLMBAB = ECFCOOLMBAB {
            LNEDFBLNHEN: 0,
            AEOFHBEPGOO: ::std::string::String::new(),
            GMIIJHGAFCE: 0,
            BJLAFKJOMKH: 0,
            EKCKCPEEOPM: 0,
            KHCMDHBLHFO: 0,
            MPHKEOMGHKD: 0,
            CHJCDMJNCED: 0,
            EGEPPOIHFLG: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ECFCOOLMBAB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ECFCOOLMBAB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ECFCOOLMBAB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ECFCOOLMBAB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ECFCOOLMBAB.proto\"\xbf\x02\n\x0bECFCOOLMBAB\x12\x20\n\x0bLNEDFBLN\
    HEN\x18\x01\x20\x01(\rR\x0bLNEDFBLNHEN\x12\x20\n\x0bAEOFHBEPGOO\x18\x02\
    \x20\x01(\tR\x0bAEOFHBEPGOO\x12\x20\n\x0bGMIIJHGAFCE\x18\x03\x20\x01(\rR\
    \x0bGMIIJHGAFCE\x12\x20\n\x0bBJLAFKJOMKH\x18\x04\x20\x01(\rR\x0bBJLAFKJO\
    MKH\x12\x20\n\x0bEKCKCPEEOPM\x18\x05\x20\x01(\rR\x0bEKCKCPEEOPM\x12\x20\
    \n\x0bKHCMDHBLHFO\x18\x06\x20\x01(\rR\x0bKHCMDHBLHFO\x12\x20\n\x0bMPHKEO\
    MGHKD\x18\x07\x20\x01(\rR\x0bMPHKEOMGHKD\x12\x20\n\x0bCHJCDMJNCED\x18\
    \x08\x20\x01(\rR\x0bCHJCDMJNCED\x12\x20\n\x0bEGEPPOIHFLG\x18\t\x20\x01(\
    \rR\x0bEGEPPOIHFLGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ECFCOOLMBAB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
