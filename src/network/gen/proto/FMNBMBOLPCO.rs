// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FMNBMBOLPCO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FMNBMBOLPCO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FMNBMBOLPCO {
    // message fields
    // @@protoc_insertion_point(field:FMNBMBOLPCO.DDLNILFNKEK)
    pub DDLNILFNKEK: u32,
    // @@protoc_insertion_point(field:FMNBMBOLPCO.ADOIBFBFCMF)
    pub ADOIBFBFCMF: bool,
    // @@protoc_insertion_point(field:FMNBMBOLPCO.HHBKKDDGMJH)
    pub HHBKKDDGMJH: i64,
    // @@protoc_insertion_point(field:FMNBMBOLPCO.IACHMPHHIPG)
    pub IACHMPHHIPG: bool,
    // @@protoc_insertion_point(field:FMNBMBOLPCO.GNILCGBHAMM)
    pub GNILCGBHAMM: u32,
    // @@protoc_insertion_point(field:FMNBMBOLPCO.FOMEOIPDFMF)
    pub FOMEOIPDFMF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FMNBMBOLPCO.BJINLONFIDD)
    pub BJINLONFIDD: i64,
    // special fields
    // @@protoc_insertion_point(special_field:FMNBMBOLPCO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FMNBMBOLPCO {
    fn default() -> &'a FMNBMBOLPCO {
        <FMNBMBOLPCO as ::protobuf::Message>::default_instance()
    }
}

impl FMNBMBOLPCO {
    pub fn new() -> FMNBMBOLPCO {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DDLNILFNKEK",
            |m: &FMNBMBOLPCO| { &m.DDLNILFNKEK },
            |m: &mut FMNBMBOLPCO| { &mut m.DDLNILFNKEK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADOIBFBFCMF",
            |m: &FMNBMBOLPCO| { &m.ADOIBFBFCMF },
            |m: &mut FMNBMBOLPCO| { &mut m.ADOIBFBFCMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HHBKKDDGMJH",
            |m: &FMNBMBOLPCO| { &m.HHBKKDDGMJH },
            |m: &mut FMNBMBOLPCO| { &mut m.HHBKKDDGMJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IACHMPHHIPG",
            |m: &FMNBMBOLPCO| { &m.IACHMPHHIPG },
            |m: &mut FMNBMBOLPCO| { &mut m.IACHMPHHIPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GNILCGBHAMM",
            |m: &FMNBMBOLPCO| { &m.GNILCGBHAMM },
            |m: &mut FMNBMBOLPCO| { &mut m.GNILCGBHAMM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FOMEOIPDFMF",
            |m: &FMNBMBOLPCO| { &m.FOMEOIPDFMF },
            |m: &mut FMNBMBOLPCO| { &mut m.FOMEOIPDFMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BJINLONFIDD",
            |m: &FMNBMBOLPCO| { &m.BJINLONFIDD },
            |m: &mut FMNBMBOLPCO| { &mut m.BJINLONFIDD },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FMNBMBOLPCO>(
            "FMNBMBOLPCO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FMNBMBOLPCO {
    const NAME: &'static str = "FMNBMBOLPCO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.DDLNILFNKEK = is.read_uint32()?;
                },
                40 => {
                    self.ADOIBFBFCMF = is.read_bool()?;
                },
                96 => {
                    self.HHBKKDDGMJH = is.read_int64()?;
                },
                104 => {
                    self.IACHMPHHIPG = is.read_bool()?;
                },
                32 => {
                    self.GNILCGBHAMM = is.read_uint32()?;
                },
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.FOMEOIPDFMF)?;
                },
                8 => {
                    self.FOMEOIPDFMF.push(is.read_uint32()?);
                },
                112 => {
                    self.BJINLONFIDD = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.DDLNILFNKEK != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.DDLNILFNKEK);
        }
        if self.ADOIBFBFCMF != false {
            my_size += 1 + 1;
        }
        if self.HHBKKDDGMJH != 0 {
            my_size += ::protobuf::rt::int64_size(12, self.HHBKKDDGMJH);
        }
        if self.IACHMPHHIPG != false {
            my_size += 1 + 1;
        }
        if self.GNILCGBHAMM != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.GNILCGBHAMM);
        }
        for value in &self.FOMEOIPDFMF {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if self.BJINLONFIDD != 0 {
            my_size += ::protobuf::rt::int64_size(14, self.BJINLONFIDD);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.DDLNILFNKEK != 0 {
            os.write_uint32(7, self.DDLNILFNKEK)?;
        }
        if self.ADOIBFBFCMF != false {
            os.write_bool(5, self.ADOIBFBFCMF)?;
        }
        if self.HHBKKDDGMJH != 0 {
            os.write_int64(12, self.HHBKKDDGMJH)?;
        }
        if self.IACHMPHHIPG != false {
            os.write_bool(13, self.IACHMPHHIPG)?;
        }
        if self.GNILCGBHAMM != 0 {
            os.write_uint32(4, self.GNILCGBHAMM)?;
        }
        for v in &self.FOMEOIPDFMF {
            os.write_uint32(1, *v)?;
        };
        if self.BJINLONFIDD != 0 {
            os.write_int64(14, self.BJINLONFIDD)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FMNBMBOLPCO {
        FMNBMBOLPCO::new()
    }

    fn clear(&mut self) {
        self.DDLNILFNKEK = 0;
        self.ADOIBFBFCMF = false;
        self.HHBKKDDGMJH = 0;
        self.IACHMPHHIPG = false;
        self.GNILCGBHAMM = 0;
        self.FOMEOIPDFMF.clear();
        self.BJINLONFIDD = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FMNBMBOLPCO {
        static instance: FMNBMBOLPCO = FMNBMBOLPCO {
            DDLNILFNKEK: 0,
            ADOIBFBFCMF: false,
            HHBKKDDGMJH: 0,
            IACHMPHHIPG: false,
            GNILCGBHAMM: 0,
            FOMEOIPDFMF: ::std::vec::Vec::new(),
            BJINLONFIDD: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FMNBMBOLPCO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FMNBMBOLPCO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FMNBMBOLPCO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FMNBMBOLPCO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FMNBMBOLPCO.proto\"\xfb\x01\n\x0bFMNBMBOLPCO\x12\x20\n\x0bDDLNILFN\
    KEK\x18\x07\x20\x01(\rR\x0bDDLNILFNKEK\x12\x20\n\x0bADOIBFBFCMF\x18\x05\
    \x20\x01(\x08R\x0bADOIBFBFCMF\x12\x20\n\x0bHHBKKDDGMJH\x18\x0c\x20\x01(\
    \x03R\x0bHHBKKDDGMJH\x12\x20\n\x0bIACHMPHHIPG\x18\r\x20\x01(\x08R\x0bIAC\
    HMPHHIPG\x12\x20\n\x0bGNILCGBHAMM\x18\x04\x20\x01(\rR\x0bGNILCGBHAMM\x12\
    \x20\n\x0bFOMEOIPDFMF\x18\x01\x20\x03(\rR\x0bFOMEOIPDFMF\x12\x20\n\x0bBJ\
    INLONFIDD\x18\x0e\x20\x01(\x03R\x0bBJINLONFIDDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FMNBMBOLPCO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
