// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FJNMNNFEPGJ.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FJNMNNFEPGJ)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FJNMNNFEPGJ {
    // message fields
    // @@protoc_insertion_point(field:FJNMNNFEPGJ.JGKIJCJPFAA)
    pub JGKIJCJPFAA: u32,
    // @@protoc_insertion_point(field:FJNMNNFEPGJ.MCEIJNNCMFB)
    pub MCEIJNNCMFB: ::protobuf::MessageField<super::HKGKMGODFNN::HKGKMGODFNN>,
    // @@protoc_insertion_point(field:FJNMNNFEPGJ.MNDJLCMGMHJ)
    pub MNDJLCMGMHJ: u32,
    // @@protoc_insertion_point(field:FJNMNNFEPGJ.ABHGDMEMFMA)
    pub ABHGDMEMFMA: u32,
    // @@protoc_insertion_point(field:FJNMNNFEPGJ.EEKFJOLDHLK)
    pub EEKFJOLDHLK: u32,
    // @@protoc_insertion_point(field:FJNMNNFEPGJ.CPBBNJNMNHG)
    pub CPBBNJNMNHG: u32,
    // @@protoc_insertion_point(field:FJNMNNFEPGJ.BANBDLIPJFP)
    pub BANBDLIPJFP: u32,
    // @@protoc_insertion_point(field:FJNMNNFEPGJ.EBPDGIFICNH)
    pub EBPDGIFICNH: u32,
    // @@protoc_insertion_point(field:FJNMNNFEPGJ.AODKPOPJEAF)
    pub AODKPOPJEAF: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FJNMNNFEPGJ.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FJNMNNFEPGJ {
    fn default() -> &'a FJNMNNFEPGJ {
        <FJNMNNFEPGJ as ::protobuf::Message>::default_instance()
    }
}

impl FJNMNNFEPGJ {
    pub fn new() -> FJNMNNFEPGJ {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JGKIJCJPFAA",
            |m: &FJNMNNFEPGJ| { &m.JGKIJCJPFAA },
            |m: &mut FJNMNNFEPGJ| { &mut m.JGKIJCJPFAA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HKGKMGODFNN::HKGKMGODFNN>(
            "MCEIJNNCMFB",
            |m: &FJNMNNFEPGJ| { &m.MCEIJNNCMFB },
            |m: &mut FJNMNNFEPGJ| { &mut m.MCEIJNNCMFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MNDJLCMGMHJ",
            |m: &FJNMNNFEPGJ| { &m.MNDJLCMGMHJ },
            |m: &mut FJNMNNFEPGJ| { &mut m.MNDJLCMGMHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ABHGDMEMFMA",
            |m: &FJNMNNFEPGJ| { &m.ABHGDMEMFMA },
            |m: &mut FJNMNNFEPGJ| { &mut m.ABHGDMEMFMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EEKFJOLDHLK",
            |m: &FJNMNNFEPGJ| { &m.EEKFJOLDHLK },
            |m: &mut FJNMNNFEPGJ| { &mut m.EEKFJOLDHLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPBBNJNMNHG",
            |m: &FJNMNNFEPGJ| { &m.CPBBNJNMNHG },
            |m: &mut FJNMNNFEPGJ| { &mut m.CPBBNJNMNHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BANBDLIPJFP",
            |m: &FJNMNNFEPGJ| { &m.BANBDLIPJFP },
            |m: &mut FJNMNNFEPGJ| { &mut m.BANBDLIPJFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EBPDGIFICNH",
            |m: &FJNMNNFEPGJ| { &m.EBPDGIFICNH },
            |m: &mut FJNMNNFEPGJ| { &mut m.EBPDGIFICNH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AODKPOPJEAF",
            |m: &FJNMNNFEPGJ| { &m.AODKPOPJEAF },
            |m: &mut FJNMNNFEPGJ| { &mut m.AODKPOPJEAF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FJNMNNFEPGJ>(
            "FJNMNNFEPGJ",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FJNMNNFEPGJ {
    const NAME: &'static str = "FJNMNNFEPGJ";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.JGKIJCJPFAA = is.read_uint32()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MCEIJNNCMFB)?;
                },
                104 => {
                    self.MNDJLCMGMHJ = is.read_uint32()?;
                },
                80 => {
                    self.ABHGDMEMFMA = is.read_uint32()?;
                },
                64 => {
                    self.EEKFJOLDHLK = is.read_uint32()?;
                },
                120 => {
                    self.CPBBNJNMNHG = is.read_uint32()?;
                },
                56 => {
                    self.BANBDLIPJFP = is.read_uint32()?;
                },
                112 => {
                    self.EBPDGIFICNH = is.read_uint32()?;
                },
                32 => {
                    self.AODKPOPJEAF = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.JGKIJCJPFAA != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.JGKIJCJPFAA);
        }
        if let Some(v) = self.MCEIJNNCMFB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.MNDJLCMGMHJ != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.MNDJLCMGMHJ);
        }
        if self.ABHGDMEMFMA != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.ABHGDMEMFMA);
        }
        if self.EEKFJOLDHLK != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.EEKFJOLDHLK);
        }
        if self.CPBBNJNMNHG != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.CPBBNJNMNHG);
        }
        if self.BANBDLIPJFP != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.BANBDLIPJFP);
        }
        if self.EBPDGIFICNH != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.EBPDGIFICNH);
        }
        if self.AODKPOPJEAF != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.AODKPOPJEAF);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.JGKIJCJPFAA != 0 {
            os.write_uint32(3, self.JGKIJCJPFAA)?;
        }
        if let Some(v) = self.MCEIJNNCMFB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.MNDJLCMGMHJ != 0 {
            os.write_uint32(13, self.MNDJLCMGMHJ)?;
        }
        if self.ABHGDMEMFMA != 0 {
            os.write_uint32(10, self.ABHGDMEMFMA)?;
        }
        if self.EEKFJOLDHLK != 0 {
            os.write_uint32(8, self.EEKFJOLDHLK)?;
        }
        if self.CPBBNJNMNHG != 0 {
            os.write_uint32(15, self.CPBBNJNMNHG)?;
        }
        if self.BANBDLIPJFP != 0 {
            os.write_uint32(7, self.BANBDLIPJFP)?;
        }
        if self.EBPDGIFICNH != 0 {
            os.write_uint32(14, self.EBPDGIFICNH)?;
        }
        if self.AODKPOPJEAF != 0 {
            os.write_uint32(4, self.AODKPOPJEAF)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FJNMNNFEPGJ {
        FJNMNNFEPGJ::new()
    }

    fn clear(&mut self) {
        self.JGKIJCJPFAA = 0;
        self.MCEIJNNCMFB.clear();
        self.MNDJLCMGMHJ = 0;
        self.ABHGDMEMFMA = 0;
        self.EEKFJOLDHLK = 0;
        self.CPBBNJNMNHG = 0;
        self.BANBDLIPJFP = 0;
        self.EBPDGIFICNH = 0;
        self.AODKPOPJEAF = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FJNMNNFEPGJ {
        static instance: FJNMNNFEPGJ = FJNMNNFEPGJ {
            JGKIJCJPFAA: 0,
            MCEIJNNCMFB: ::protobuf::MessageField::none(),
            MNDJLCMGMHJ: 0,
            ABHGDMEMFMA: 0,
            EEKFJOLDHLK: 0,
            CPBBNJNMNHG: 0,
            BANBDLIPJFP: 0,
            EBPDGIFICNH: 0,
            AODKPOPJEAF: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FJNMNNFEPGJ {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FJNMNNFEPGJ").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FJNMNNFEPGJ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FJNMNNFEPGJ {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FJNMNNFEPGJ.proto\x1a\x11HKGKMGODFNN.proto\"\xcd\x02\n\x0bFJNMNNFE\
    PGJ\x12\x20\n\x0bJGKIJCJPFAA\x18\x03\x20\x01(\rR\x0bJGKIJCJPFAA\x12.\n\
    \x0bMCEIJNNCMFB\x18\x05\x20\x01(\x0b2\x0c.HKGKMGODFNNR\x0bMCEIJNNCMFB\
    \x12\x20\n\x0bMNDJLCMGMHJ\x18\r\x20\x01(\rR\x0bMNDJLCMGMHJ\x12\x20\n\x0b\
    ABHGDMEMFMA\x18\n\x20\x01(\rR\x0bABHGDMEMFMA\x12\x20\n\x0bEEKFJOLDHLK\
    \x18\x08\x20\x01(\rR\x0bEEKFJOLDHLK\x12\x20\n\x0bCPBBNJNMNHG\x18\x0f\x20\
    \x01(\rR\x0bCPBBNJNMNHG\x12\x20\n\x0bBANBDLIPJFP\x18\x07\x20\x01(\rR\x0b\
    BANBDLIPJFP\x12\x20\n\x0bEBPDGIFICNH\x18\x0e\x20\x01(\rR\x0bEBPDGIFICNH\
    \x12\x20\n\x0bAODKPOPJEAF\x18\x04\x20\x01(\rR\x0bAODKPOPJEAFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::HKGKMGODFNN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FJNMNNFEPGJ::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
