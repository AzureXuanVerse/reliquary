// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GJODAPFIFML.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GJODAPFIFML)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GJODAPFIFML {
    // message oneof groups
    pub ECMJGOKIKOM: ::std::option::Option<gjodapfifml::ECMJGOKIKOM>,
    // special fields
    // @@protoc_insertion_point(special_field:GJODAPFIFML.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GJODAPFIFML {
    fn default() -> &'a GJODAPFIFML {
        <GJODAPFIFML as ::protobuf::Message>::default_instance()
    }
}

impl GJODAPFIFML {
    pub fn new() -> GJODAPFIFML {
        ::std::default::Default::default()
    }

    // bool MEFFKCAPBFJ = 13;

    pub fn MEFFKCAPBFJ(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::MEFFKCAPBFJ(v)) => v,
            _ => false,
        }
    }

    pub fn clear_MEFFKCAPBFJ(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_MEFFKCAPBFJ(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::MEFFKCAPBFJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MEFFKCAPBFJ(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::MEFFKCAPBFJ(v))
    }

    // bool KOFDEOAGLGK = 12;

    pub fn KOFDEOAGLGK(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KOFDEOAGLGK(v)) => v,
            _ => false,
        }
    }

    pub fn clear_KOFDEOAGLGK(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_KOFDEOAGLGK(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KOFDEOAGLGK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KOFDEOAGLGK(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KOFDEOAGLGK(v))
    }

    // bool DENFLJKHNFO = 8;

    pub fn DENFLJKHNFO(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::DENFLJKHNFO(v)) => v,
            _ => false,
        }
    }

    pub fn clear_DENFLJKHNFO(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_DENFLJKHNFO(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::DENFLJKHNFO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DENFLJKHNFO(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::DENFLJKHNFO(v))
    }

    // bool KHKAAPACGJF = 7;

    pub fn KHKAAPACGJF(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KHKAAPACGJF(v)) => v,
            _ => false,
        }
    }

    pub fn clear_KHKAAPACGJF(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_KHKAAPACGJF(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KHKAAPACGJF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KHKAAPACGJF(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KHKAAPACGJF(v))
    }

    // bool KKHHCOPENGM = 6;

    pub fn KKHHCOPENGM(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KKHHCOPENGM(v)) => v,
            _ => false,
        }
    }

    pub fn clear_KKHHCOPENGM(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_KKHHCOPENGM(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KKHHCOPENGM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KKHHCOPENGM(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KKHHCOPENGM(v))
    }

    // bool KMCCKIMHBBJ = 11;

    pub fn KMCCKIMHBBJ(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KMCCKIMHBBJ(v)) => v,
            _ => false,
        }
    }

    pub fn clear_KMCCKIMHBBJ(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_KMCCKIMHBBJ(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KMCCKIMHBBJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KMCCKIMHBBJ(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KMCCKIMHBBJ(v))
    }

    // bool OIGIPMEOEKB = 1;

    pub fn OIGIPMEOEKB(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::OIGIPMEOEKB(v)) => v,
            _ => false,
        }
    }

    pub fn clear_OIGIPMEOEKB(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_OIGIPMEOEKB(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::OIGIPMEOEKB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OIGIPMEOEKB(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::OIGIPMEOEKB(v))
    }

    // bool KMACDMAFFFN = 15;

    pub fn KMACDMAFFFN(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KMACDMAFFFN(v)) => v,
            _ => false,
        }
    }

    pub fn clear_KMACDMAFFFN(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_KMACDMAFFFN(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KMACDMAFFFN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KMACDMAFFFN(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KMACDMAFFFN(v))
    }

    // bool EFCCDDMNMLP = 2;

    pub fn EFCCDDMNMLP(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::EFCCDDMNMLP(v)) => v,
            _ => false,
        }
    }

    pub fn clear_EFCCDDMNMLP(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_EFCCDDMNMLP(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::EFCCDDMNMLP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EFCCDDMNMLP(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::EFCCDDMNMLP(v))
    }

    // bool EBEPHGLDCNH = 10;

    pub fn EBEPHGLDCNH(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::EBEPHGLDCNH(v)) => v,
            _ => false,
        }
    }

    pub fn clear_EBEPHGLDCNH(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
    }

    pub fn has_EBEPHGLDCNH(&self) -> bool {
        match self.ECMJGOKIKOM {
            ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::EBEPHGLDCNH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EBEPHGLDCNH(&mut self, v: bool) {
        self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::EBEPHGLDCNH(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "MEFFKCAPBFJ",
            GJODAPFIFML::has_MEFFKCAPBFJ,
            GJODAPFIFML::MEFFKCAPBFJ,
            GJODAPFIFML::set_MEFFKCAPBFJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "KOFDEOAGLGK",
            GJODAPFIFML::has_KOFDEOAGLGK,
            GJODAPFIFML::KOFDEOAGLGK,
            GJODAPFIFML::set_KOFDEOAGLGK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "DENFLJKHNFO",
            GJODAPFIFML::has_DENFLJKHNFO,
            GJODAPFIFML::DENFLJKHNFO,
            GJODAPFIFML::set_DENFLJKHNFO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "KHKAAPACGJF",
            GJODAPFIFML::has_KHKAAPACGJF,
            GJODAPFIFML::KHKAAPACGJF,
            GJODAPFIFML::set_KHKAAPACGJF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "KKHHCOPENGM",
            GJODAPFIFML::has_KKHHCOPENGM,
            GJODAPFIFML::KKHHCOPENGM,
            GJODAPFIFML::set_KKHHCOPENGM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "KMCCKIMHBBJ",
            GJODAPFIFML::has_KMCCKIMHBBJ,
            GJODAPFIFML::KMCCKIMHBBJ,
            GJODAPFIFML::set_KMCCKIMHBBJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "OIGIPMEOEKB",
            GJODAPFIFML::has_OIGIPMEOEKB,
            GJODAPFIFML::OIGIPMEOEKB,
            GJODAPFIFML::set_OIGIPMEOEKB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "KMACDMAFFFN",
            GJODAPFIFML::has_KMACDMAFFFN,
            GJODAPFIFML::KMACDMAFFFN,
            GJODAPFIFML::set_KMACDMAFFFN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "EFCCDDMNMLP",
            GJODAPFIFML::has_EFCCDDMNMLP,
            GJODAPFIFML::EFCCDDMNMLP,
            GJODAPFIFML::set_EFCCDDMNMLP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "EBEPHGLDCNH",
            GJODAPFIFML::has_EBEPHGLDCNH,
            GJODAPFIFML::EBEPHGLDCNH,
            GJODAPFIFML::set_EBEPHGLDCNH,
        ));
        oneofs.push(gjodapfifml::ECMJGOKIKOM::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GJODAPFIFML>(
            "GJODAPFIFML",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GJODAPFIFML {
    const NAME: &'static str = "GJODAPFIFML";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::MEFFKCAPBFJ(is.read_bool()?));
                },
                96 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KOFDEOAGLGK(is.read_bool()?));
                },
                64 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::DENFLJKHNFO(is.read_bool()?));
                },
                56 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KHKAAPACGJF(is.read_bool()?));
                },
                48 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KKHHCOPENGM(is.read_bool()?));
                },
                88 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KMCCKIMHBBJ(is.read_bool()?));
                },
                8 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::OIGIPMEOEKB(is.read_bool()?));
                },
                120 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::KMACDMAFFFN(is.read_bool()?));
                },
                16 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::EFCCDDMNMLP(is.read_bool()?));
                },
                80 => {
                    self.ECMJGOKIKOM = ::std::option::Option::Some(gjodapfifml::ECMJGOKIKOM::EBEPHGLDCNH(is.read_bool()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ECMJGOKIKOM {
            match v {
                &gjodapfifml::ECMJGOKIKOM::MEFFKCAPBFJ(v) => {
                    my_size += 1 + 1;
                },
                &gjodapfifml::ECMJGOKIKOM::KOFDEOAGLGK(v) => {
                    my_size += 1 + 1;
                },
                &gjodapfifml::ECMJGOKIKOM::DENFLJKHNFO(v) => {
                    my_size += 1 + 1;
                },
                &gjodapfifml::ECMJGOKIKOM::KHKAAPACGJF(v) => {
                    my_size += 1 + 1;
                },
                &gjodapfifml::ECMJGOKIKOM::KKHHCOPENGM(v) => {
                    my_size += 1 + 1;
                },
                &gjodapfifml::ECMJGOKIKOM::KMCCKIMHBBJ(v) => {
                    my_size += 1 + 1;
                },
                &gjodapfifml::ECMJGOKIKOM::OIGIPMEOEKB(v) => {
                    my_size += 1 + 1;
                },
                &gjodapfifml::ECMJGOKIKOM::KMACDMAFFFN(v) => {
                    my_size += 1 + 1;
                },
                &gjodapfifml::ECMJGOKIKOM::EFCCDDMNMLP(v) => {
                    my_size += 1 + 1;
                },
                &gjodapfifml::ECMJGOKIKOM::EBEPHGLDCNH(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ECMJGOKIKOM {
            match v {
                &gjodapfifml::ECMJGOKIKOM::MEFFKCAPBFJ(v) => {
                    os.write_bool(13, v)?;
                },
                &gjodapfifml::ECMJGOKIKOM::KOFDEOAGLGK(v) => {
                    os.write_bool(12, v)?;
                },
                &gjodapfifml::ECMJGOKIKOM::DENFLJKHNFO(v) => {
                    os.write_bool(8, v)?;
                },
                &gjodapfifml::ECMJGOKIKOM::KHKAAPACGJF(v) => {
                    os.write_bool(7, v)?;
                },
                &gjodapfifml::ECMJGOKIKOM::KKHHCOPENGM(v) => {
                    os.write_bool(6, v)?;
                },
                &gjodapfifml::ECMJGOKIKOM::KMCCKIMHBBJ(v) => {
                    os.write_bool(11, v)?;
                },
                &gjodapfifml::ECMJGOKIKOM::OIGIPMEOEKB(v) => {
                    os.write_bool(1, v)?;
                },
                &gjodapfifml::ECMJGOKIKOM::KMACDMAFFFN(v) => {
                    os.write_bool(15, v)?;
                },
                &gjodapfifml::ECMJGOKIKOM::EFCCDDMNMLP(v) => {
                    os.write_bool(2, v)?;
                },
                &gjodapfifml::ECMJGOKIKOM::EBEPHGLDCNH(v) => {
                    os.write_bool(10, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GJODAPFIFML {
        GJODAPFIFML::new()
    }

    fn clear(&mut self) {
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.ECMJGOKIKOM = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GJODAPFIFML {
        static instance: GJODAPFIFML = GJODAPFIFML {
            ECMJGOKIKOM: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GJODAPFIFML {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GJODAPFIFML").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GJODAPFIFML {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GJODAPFIFML {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GJODAPFIFML`
pub mod gjodapfifml {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:GJODAPFIFML.ECMJGOKIKOM)
    pub enum ECMJGOKIKOM {
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.MEFFKCAPBFJ)
        MEFFKCAPBFJ(bool),
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.KOFDEOAGLGK)
        KOFDEOAGLGK(bool),
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.DENFLJKHNFO)
        DENFLJKHNFO(bool),
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.KHKAAPACGJF)
        KHKAAPACGJF(bool),
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.KKHHCOPENGM)
        KKHHCOPENGM(bool),
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.KMCCKIMHBBJ)
        KMCCKIMHBBJ(bool),
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.OIGIPMEOEKB)
        OIGIPMEOEKB(bool),
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.KMACDMAFFFN)
        KMACDMAFFFN(bool),
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.EFCCDDMNMLP)
        EFCCDDMNMLP(bool),
        // @@protoc_insertion_point(oneof_field:GJODAPFIFML.EBEPHGLDCNH)
        EBEPHGLDCNH(bool),
    }

    impl ::protobuf::Oneof for ECMJGOKIKOM {
    }

    impl ::protobuf::OneofFull for ECMJGOKIKOM {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GJODAPFIFML as ::protobuf::MessageFull>::descriptor().oneof_by_name("ECMJGOKIKOM").unwrap()).clone()
        }
    }

    impl ECMJGOKIKOM {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ECMJGOKIKOM>("ECMJGOKIKOM")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GJODAPFIFML.proto\"\x84\x03\n\x0bGJODAPFIFML\x12\"\n\x0bMEFFKCAPBF\
    J\x18\r\x20\x01(\x08H\0R\x0bMEFFKCAPBFJ\x12\"\n\x0bKOFDEOAGLGK\x18\x0c\
    \x20\x01(\x08H\0R\x0bKOFDEOAGLGK\x12\"\n\x0bDENFLJKHNFO\x18\x08\x20\x01(\
    \x08H\0R\x0bDENFLJKHNFO\x12\"\n\x0bKHKAAPACGJF\x18\x07\x20\x01(\x08H\0R\
    \x0bKHKAAPACGJF\x12\"\n\x0bKKHHCOPENGM\x18\x06\x20\x01(\x08H\0R\x0bKKHHC\
    OPENGM\x12\"\n\x0bKMCCKIMHBBJ\x18\x0b\x20\x01(\x08H\0R\x0bKMCCKIMHBBJ\
    \x12\"\n\x0bOIGIPMEOEKB\x18\x01\x20\x01(\x08H\0R\x0bOIGIPMEOEKB\x12\"\n\
    \x0bKMACDMAFFFN\x18\x0f\x20\x01(\x08H\0R\x0bKMACDMAFFFN\x12\"\n\x0bEFCCD\
    DMNMLP\x18\x02\x20\x01(\x08H\0R\x0bEFCCDDMNMLP\x12\"\n\x0bEBEPHGLDCNH\
    \x18\n\x20\x01(\x08H\0R\x0bEBEPHGLDCNHB\r\n\x0bECMJGOKIKOMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GJODAPFIFML::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
