// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AGCPKKEONOO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AGCPKKEONOO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AGCPKKEONOO {
    // message fields
    // @@protoc_insertion_point(field:AGCPKKEONOO.JNILGIBNCAO)
    pub JNILGIBNCAO: ::protobuf::MessageField<super::KIIGOOGKAGC::KIIGOOGKAGC>,
    // @@protoc_insertion_point(field:AGCPKKEONOO.EGOHGFDMFBF)
    pub EGOHGFDMFBF: ::protobuf::MessageField<super::FOBDDFLBEBP::FOBDDFLBEBP>,
    // @@protoc_insertion_point(field:AGCPKKEONOO.CLMNPBBLEKL)
    pub CLMNPBBLEKL: ::protobuf::MessageField<super::MLHHEHMBHFD::MLHHEHMBHFD>,
    // message oneof groups
    pub ODHCOHJKAAJ: ::std::option::Option<agcpkkeonoo::ODHCOHJKAAJ>,
    // special fields
    // @@protoc_insertion_point(special_field:AGCPKKEONOO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AGCPKKEONOO {
    fn default() -> &'a AGCPKKEONOO {
        <AGCPKKEONOO as ::protobuf::Message>::default_instance()
    }
}

impl AGCPKKEONOO {
    pub fn new() -> AGCPKKEONOO {
        ::std::default::Default::default()
    }

    // .FFOOKABHHFF BNCKKFJMGAI = 1221;

    pub fn BNCKKFJMGAI(&self) -> &super::FFOOKABHHFF::FFOOKABHHFF {
        match self.ODHCOHJKAAJ {
            ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(ref v)) => v,
            _ => <super::FFOOKABHHFF::FFOOKABHHFF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BNCKKFJMGAI(&mut self) {
        self.ODHCOHJKAAJ = ::std::option::Option::None;
    }

    pub fn has_BNCKKFJMGAI(&self) -> bool {
        match self.ODHCOHJKAAJ {
            ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BNCKKFJMGAI(&mut self, v: super::FFOOKABHHFF::FFOOKABHHFF) {
        self.ODHCOHJKAAJ = ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BNCKKFJMGAI(&mut self) -> &mut super::FFOOKABHHFF::FFOOKABHHFF {
        if let ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(_)) = self.ODHCOHJKAAJ {
        } else {
            self.ODHCOHJKAAJ = ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(super::FFOOKABHHFF::FFOOKABHHFF::new()));
        }
        match self.ODHCOHJKAAJ {
            ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BNCKKFJMGAI(&mut self) -> super::FFOOKABHHFF::FFOOKABHHFF {
        if self.has_BNCKKFJMGAI() {
            match self.ODHCOHJKAAJ.take() {
                ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FFOOKABHHFF::FFOOKABHHFF::new()
        }
    }

    // .EBFJCBGDCFL MOBPGIDPGAG = 1682;

    pub fn MOBPGIDPGAG(&self) -> &super::EBFJCBGDCFL::EBFJCBGDCFL {
        match self.ODHCOHJKAAJ {
            ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(ref v)) => v,
            _ => <super::EBFJCBGDCFL::EBFJCBGDCFL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MOBPGIDPGAG(&mut self) {
        self.ODHCOHJKAAJ = ::std::option::Option::None;
    }

    pub fn has_MOBPGIDPGAG(&self) -> bool {
        match self.ODHCOHJKAAJ {
            ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MOBPGIDPGAG(&mut self, v: super::EBFJCBGDCFL::EBFJCBGDCFL) {
        self.ODHCOHJKAAJ = ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MOBPGIDPGAG(&mut self) -> &mut super::EBFJCBGDCFL::EBFJCBGDCFL {
        if let ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(_)) = self.ODHCOHJKAAJ {
        } else {
            self.ODHCOHJKAAJ = ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(super::EBFJCBGDCFL::EBFJCBGDCFL::new()));
        }
        match self.ODHCOHJKAAJ {
            ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MOBPGIDPGAG(&mut self) -> super::EBFJCBGDCFL::EBFJCBGDCFL {
        if self.has_MOBPGIDPGAG() {
            match self.ODHCOHJKAAJ.take() {
                ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EBFJCBGDCFL::EBFJCBGDCFL::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KIIGOOGKAGC::KIIGOOGKAGC>(
            "JNILGIBNCAO",
            |m: &AGCPKKEONOO| { &m.JNILGIBNCAO },
            |m: &mut AGCPKKEONOO| { &mut m.JNILGIBNCAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FOBDDFLBEBP::FOBDDFLBEBP>(
            "EGOHGFDMFBF",
            |m: &AGCPKKEONOO| { &m.EGOHGFDMFBF },
            |m: &mut AGCPKKEONOO| { &mut m.EGOHGFDMFBF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MLHHEHMBHFD::MLHHEHMBHFD>(
            "CLMNPBBLEKL",
            |m: &AGCPKKEONOO| { &m.CLMNPBBLEKL },
            |m: &mut AGCPKKEONOO| { &mut m.CLMNPBBLEKL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FFOOKABHHFF::FFOOKABHHFF>(
            "BNCKKFJMGAI",
            AGCPKKEONOO::has_BNCKKFJMGAI,
            AGCPKKEONOO::BNCKKFJMGAI,
            AGCPKKEONOO::mut_BNCKKFJMGAI,
            AGCPKKEONOO::set_BNCKKFJMGAI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EBFJCBGDCFL::EBFJCBGDCFL>(
            "MOBPGIDPGAG",
            AGCPKKEONOO::has_MOBPGIDPGAG,
            AGCPKKEONOO::MOBPGIDPGAG,
            AGCPKKEONOO::mut_MOBPGIDPGAG,
            AGCPKKEONOO::set_MOBPGIDPGAG,
        ));
        oneofs.push(agcpkkeonoo::ODHCOHJKAAJ::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AGCPKKEONOO>(
            "AGCPKKEONOO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AGCPKKEONOO {
    const NAME: &'static str = "AGCPKKEONOO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JNILGIBNCAO)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EGOHGFDMFBF)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CLMNPBBLEKL)?;
                },
                9770 => {
                    self.ODHCOHJKAAJ = ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(is.read_message()?));
                },
                13458 => {
                    self.ODHCOHJKAAJ = ::std::option::Option::Some(agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.JNILGIBNCAO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.EGOHGFDMFBF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CLMNPBBLEKL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.ODHCOHJKAAJ {
            match v {
                &agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.JNILGIBNCAO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.EGOHGFDMFBF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.CLMNPBBLEKL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.ODHCOHJKAAJ {
            match v {
                &agcpkkeonoo::ODHCOHJKAAJ::BNCKKFJMGAI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1221, v, os)?;
                },
                &agcpkkeonoo::ODHCOHJKAAJ::MOBPGIDPGAG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1682, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AGCPKKEONOO {
        AGCPKKEONOO::new()
    }

    fn clear(&mut self) {
        self.JNILGIBNCAO.clear();
        self.EGOHGFDMFBF.clear();
        self.CLMNPBBLEKL.clear();
        self.ODHCOHJKAAJ = ::std::option::Option::None;
        self.ODHCOHJKAAJ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AGCPKKEONOO {
        static instance: AGCPKKEONOO = AGCPKKEONOO {
            JNILGIBNCAO: ::protobuf::MessageField::none(),
            EGOHGFDMFBF: ::protobuf::MessageField::none(),
            CLMNPBBLEKL: ::protobuf::MessageField::none(),
            ODHCOHJKAAJ: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AGCPKKEONOO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AGCPKKEONOO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AGCPKKEONOO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AGCPKKEONOO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AGCPKKEONOO`
pub mod agcpkkeonoo {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AGCPKKEONOO.ODHCOHJKAAJ)
    pub enum ODHCOHJKAAJ {
        // @@protoc_insertion_point(oneof_field:AGCPKKEONOO.BNCKKFJMGAI)
        BNCKKFJMGAI(super::super::FFOOKABHHFF::FFOOKABHHFF),
        // @@protoc_insertion_point(oneof_field:AGCPKKEONOO.MOBPGIDPGAG)
        MOBPGIDPGAG(super::super::EBFJCBGDCFL::EBFJCBGDCFL),
    }

    impl ::protobuf::Oneof for ODHCOHJKAAJ {
    }

    impl ::protobuf::OneofFull for ODHCOHJKAAJ {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AGCPKKEONOO as ::protobuf::MessageFull>::descriptor().oneof_by_name("ODHCOHJKAAJ").unwrap()).clone()
        }
    }

    impl ODHCOHJKAAJ {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ODHCOHJKAAJ>("ODHCOHJKAAJ")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AGCPKKEONOO.proto\x1a\x11EBFJCBGDCFL.proto\x1a\x11FFOOKABHHFF.prot\
    o\x1a\x11FOBDDFLBEBP.proto\x1a\x11KIIGOOGKAGC.proto\x1a\x11MLHHEHMBHFD.p\
    roto\"\x92\x02\n\x0bAGCPKKEONOO\x12.\n\x0bJNILGIBNCAO\x18\x03\x20\x01(\
    \x0b2\x0c.KIIGOOGKAGCR\x0bJNILGIBNCAO\x12.\n\x0bEGOHGFDMFBF\x18\x07\x20\
    \x01(\x0b2\x0c.FOBDDFLBEBPR\x0bEGOHGFDMFBF\x12.\n\x0bCLMNPBBLEKL\x18\x04\
    \x20\x01(\x0b2\x0c.MLHHEHMBHFDR\x0bCLMNPBBLEKL\x121\n\x0bBNCKKFJMGAI\x18\
    \xc5\t\x20\x01(\x0b2\x0c.FFOOKABHHFFH\0R\x0bBNCKKFJMGAI\x121\n\x0bMOBPGI\
    DPGAG\x18\x92\r\x20\x01(\x0b2\x0c.EBFJCBGDCFLH\0R\x0bMOBPGIDPGAGB\r\n\
    \x0bODHCOHJKAAJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::EBFJCBGDCFL::file_descriptor().clone());
            deps.push(super::FFOOKABHHFF::file_descriptor().clone());
            deps.push(super::FOBDDFLBEBP::file_descriptor().clone());
            deps.push(super::KIIGOOGKAGC::file_descriptor().clone());
            deps.push(super::MLHHEHMBHFD::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AGCPKKEONOO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
