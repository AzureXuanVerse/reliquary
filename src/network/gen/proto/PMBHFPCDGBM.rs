// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PMBHFPCDGBM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PMBHFPCDGBM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PMBHFPCDGBM {
    // message fields
    // @@protoc_insertion_point(field:PMBHFPCDGBM.PJBJNFNBJON)
    pub PJBJNFNBJON: bool,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.JNMDGCJHCJJ)
    pub JNMDGCJHCJJ: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.IDDNDGKOILC)
    pub IDDNDGKOILC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.ICCIODCOABK)
    pub ICCIODCOABK: u32,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.BHONGJMFKIM)
    pub BHONGJMFKIM: u32,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.CCCEDBIGCDG)
    pub CCCEDBIGCDG: u32,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.OMAGMOKJHNM)
    pub OMAGMOKJHNM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.IPMBAIAICCN)
    pub IPMBAIAICCN: bool,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.FHHFLHBHBLE)
    pub FHHFLHBHBLE: ::protobuf::EnumOrUnknown<super::ExtraLineupType::ExtraLineupType>,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.EEAILFBOOAD)
    pub EEAILFBOOAD: u32,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.CMFELFNANEB)
    pub CMFELFNANEB: u32,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.JALCDONPFMC)
    pub JALCDONPFMC: ::std::string::String,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.GCPMCNPGDAK)
    pub GCPMCNPGDAK: u32,
    // @@protoc_insertion_point(field:PMBHFPCDGBM.avatar_list)
    pub avatar_list: ::std::vec::Vec<super::KCPIIFBINDE::KCPIIFBINDE>,
    // special fields
    // @@protoc_insertion_point(special_field:PMBHFPCDGBM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PMBHFPCDGBM {
    fn default() -> &'a PMBHFPCDGBM {
        <PMBHFPCDGBM as ::protobuf::Message>::default_instance()
    }
}

impl PMBHFPCDGBM {
    pub fn new() -> PMBHFPCDGBM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PJBJNFNBJON",
            |m: &PMBHFPCDGBM| { &m.PJBJNFNBJON },
            |m: &mut PMBHFPCDGBM| { &mut m.PJBJNFNBJON },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JNMDGCJHCJJ",
            |m: &PMBHFPCDGBM| { &m.JNMDGCJHCJJ },
            |m: &mut PMBHFPCDGBM| { &mut m.JNMDGCJHCJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IDDNDGKOILC",
            |m: &PMBHFPCDGBM| { &m.IDDNDGKOILC },
            |m: &mut PMBHFPCDGBM| { &mut m.IDDNDGKOILC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ICCIODCOABK",
            |m: &PMBHFPCDGBM| { &m.ICCIODCOABK },
            |m: &mut PMBHFPCDGBM| { &mut m.ICCIODCOABK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BHONGJMFKIM",
            |m: &PMBHFPCDGBM| { &m.BHONGJMFKIM },
            |m: &mut PMBHFPCDGBM| { &mut m.BHONGJMFKIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CCCEDBIGCDG",
            |m: &PMBHFPCDGBM| { &m.CCCEDBIGCDG },
            |m: &mut PMBHFPCDGBM| { &mut m.CCCEDBIGCDG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OMAGMOKJHNM",
            |m: &PMBHFPCDGBM| { &m.OMAGMOKJHNM },
            |m: &mut PMBHFPCDGBM| { &mut m.OMAGMOKJHNM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IPMBAIAICCN",
            |m: &PMBHFPCDGBM| { &m.IPMBAIAICCN },
            |m: &mut PMBHFPCDGBM| { &mut m.IPMBAIAICCN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FHHFLHBHBLE",
            |m: &PMBHFPCDGBM| { &m.FHHFLHBHBLE },
            |m: &mut PMBHFPCDGBM| { &mut m.FHHFLHBHBLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EEAILFBOOAD",
            |m: &PMBHFPCDGBM| { &m.EEAILFBOOAD },
            |m: &mut PMBHFPCDGBM| { &mut m.EEAILFBOOAD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMFELFNANEB",
            |m: &PMBHFPCDGBM| { &m.CMFELFNANEB },
            |m: &mut PMBHFPCDGBM| { &mut m.CMFELFNANEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JALCDONPFMC",
            |m: &PMBHFPCDGBM| { &m.JALCDONPFMC },
            |m: &mut PMBHFPCDGBM| { &mut m.JALCDONPFMC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GCPMCNPGDAK",
            |m: &PMBHFPCDGBM| { &m.GCPMCNPGDAK },
            |m: &mut PMBHFPCDGBM| { &mut m.GCPMCNPGDAK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &PMBHFPCDGBM| { &m.avatar_list },
            |m: &mut PMBHFPCDGBM| { &mut m.avatar_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PMBHFPCDGBM>(
            "PMBHFPCDGBM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PMBHFPCDGBM {
    const NAME: &'static str = "PMBHFPCDGBM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.PJBJNFNBJON = is.read_bool()?;
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.JNMDGCJHCJJ)?;
                },
                80 => {
                    self.JNMDGCJHCJJ.push(is.read_uint32()?);
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.IDDNDGKOILC)?;
                },
                64 => {
                    self.IDDNDGKOILC.push(is.read_uint32()?);
                },
                40 => {
                    self.ICCIODCOABK = is.read_uint32()?;
                },
                56 => {
                    self.BHONGJMFKIM = is.read_uint32()?;
                },
                104 => {
                    self.CCCEDBIGCDG = is.read_uint32()?;
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.OMAGMOKJHNM)?;
                },
                88 => {
                    self.OMAGMOKJHNM.push(is.read_uint32()?);
                },
                8 => {
                    self.IPMBAIAICCN = is.read_bool()?;
                },
                112 => {
                    self.FHHFLHBHBLE = is.read_enum_or_unknown()?;
                },
                96 => {
                    self.EEAILFBOOAD = is.read_uint32()?;
                },
                24 => {
                    self.CMFELFNANEB = is.read_uint32()?;
                },
                122 => {
                    self.JALCDONPFMC = is.read_string()?;
                },
                72 => {
                    self.GCPMCNPGDAK = is.read_uint32()?;
                },
                34 => {
                    self.avatar_list.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.PJBJNFNBJON != false {
            my_size += 1 + 1;
        }
        for value in &self.JNMDGCJHCJJ {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        for value in &self.IDDNDGKOILC {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if self.ICCIODCOABK != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.ICCIODCOABK);
        }
        if self.BHONGJMFKIM != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.BHONGJMFKIM);
        }
        if self.CCCEDBIGCDG != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.CCCEDBIGCDG);
        }
        for value in &self.OMAGMOKJHNM {
            my_size += ::protobuf::rt::uint32_size(11, *value);
        };
        if self.IPMBAIAICCN != false {
            my_size += 1 + 1;
        }
        if self.FHHFLHBHBLE != ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE) {
            my_size += ::protobuf::rt::int32_size(14, self.FHHFLHBHBLE.value());
        }
        if self.EEAILFBOOAD != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.EEAILFBOOAD);
        }
        if self.CMFELFNANEB != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.CMFELFNANEB);
        }
        if !self.JALCDONPFMC.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.JALCDONPFMC);
        }
        if self.GCPMCNPGDAK != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.GCPMCNPGDAK);
        }
        for value in &self.avatar_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.PJBJNFNBJON != false {
            os.write_bool(6, self.PJBJNFNBJON)?;
        }
        for v in &self.JNMDGCJHCJJ {
            os.write_uint32(10, *v)?;
        };
        for v in &self.IDDNDGKOILC {
            os.write_uint32(8, *v)?;
        };
        if self.ICCIODCOABK != 0 {
            os.write_uint32(5, self.ICCIODCOABK)?;
        }
        if self.BHONGJMFKIM != 0 {
            os.write_uint32(7, self.BHONGJMFKIM)?;
        }
        if self.CCCEDBIGCDG != 0 {
            os.write_uint32(13, self.CCCEDBIGCDG)?;
        }
        for v in &self.OMAGMOKJHNM {
            os.write_uint32(11, *v)?;
        };
        if self.IPMBAIAICCN != false {
            os.write_bool(1, self.IPMBAIAICCN)?;
        }
        if self.FHHFLHBHBLE != ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.FHHFLHBHBLE))?;
        }
        if self.EEAILFBOOAD != 0 {
            os.write_uint32(12, self.EEAILFBOOAD)?;
        }
        if self.CMFELFNANEB != 0 {
            os.write_uint32(3, self.CMFELFNANEB)?;
        }
        if !self.JALCDONPFMC.is_empty() {
            os.write_string(15, &self.JALCDONPFMC)?;
        }
        if self.GCPMCNPGDAK != 0 {
            os.write_uint32(9, self.GCPMCNPGDAK)?;
        }
        for v in &self.avatar_list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PMBHFPCDGBM {
        PMBHFPCDGBM::new()
    }

    fn clear(&mut self) {
        self.PJBJNFNBJON = false;
        self.JNMDGCJHCJJ.clear();
        self.IDDNDGKOILC.clear();
        self.ICCIODCOABK = 0;
        self.BHONGJMFKIM = 0;
        self.CCCEDBIGCDG = 0;
        self.OMAGMOKJHNM.clear();
        self.IPMBAIAICCN = false;
        self.FHHFLHBHBLE = ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE);
        self.EEAILFBOOAD = 0;
        self.CMFELFNANEB = 0;
        self.JALCDONPFMC.clear();
        self.GCPMCNPGDAK = 0;
        self.avatar_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PMBHFPCDGBM {
        static instance: PMBHFPCDGBM = PMBHFPCDGBM {
            PJBJNFNBJON: false,
            JNMDGCJHCJJ: ::std::vec::Vec::new(),
            IDDNDGKOILC: ::std::vec::Vec::new(),
            ICCIODCOABK: 0,
            BHONGJMFKIM: 0,
            CCCEDBIGCDG: 0,
            OMAGMOKJHNM: ::std::vec::Vec::new(),
            IPMBAIAICCN: false,
            FHHFLHBHBLE: ::protobuf::EnumOrUnknown::from_i32(0),
            EEAILFBOOAD: 0,
            CMFELFNANEB: 0,
            JALCDONPFMC: ::std::string::String::new(),
            GCPMCNPGDAK: 0,
            avatar_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PMBHFPCDGBM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PMBHFPCDGBM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PMBHFPCDGBM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PMBHFPCDGBM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11PMBHFPCDGBM.proto\x1a\x15ExtraLineupType.proto\x1a\x11KCPIIFBINDE.\
    proto\"\x88\x04\n\x0bPMBHFPCDGBM\x12\x20\n\x0bPJBJNFNBJON\x18\x06\x20\
    \x01(\x08R\x0bPJBJNFNBJON\x12\x20\n\x0bJNMDGCJHCJJ\x18\n\x20\x03(\rR\x0b\
    JNMDGCJHCJJ\x12\x20\n\x0bIDDNDGKOILC\x18\x08\x20\x03(\rR\x0bIDDNDGKOILC\
    \x12\x20\n\x0bICCIODCOABK\x18\x05\x20\x01(\rR\x0bICCIODCOABK\x12\x20\n\
    \x0bBHONGJMFKIM\x18\x07\x20\x01(\rR\x0bBHONGJMFKIM\x12\x20\n\x0bCCCEDBIG\
    CDG\x18\r\x20\x01(\rR\x0bCCCEDBIGCDG\x12\x20\n\x0bOMAGMOKJHNM\x18\x0b\
    \x20\x03(\rR\x0bOMAGMOKJHNM\x12\x20\n\x0bIPMBAIAICCN\x18\x01\x20\x01(\
    \x08R\x0bIPMBAIAICCN\x122\n\x0bFHHFLHBHBLE\x18\x0e\x20\x01(\x0e2\x10.Ext\
    raLineupTypeR\x0bFHHFLHBHBLE\x12\x20\n\x0bEEAILFBOOAD\x18\x0c\x20\x01(\r\
    R\x0bEEAILFBOOAD\x12\x20\n\x0bCMFELFNANEB\x18\x03\x20\x01(\rR\x0bCMFELFN\
    ANEB\x12\x20\n\x0bJALCDONPFMC\x18\x0f\x20\x01(\tR\x0bJALCDONPFMC\x12\x20\
    \n\x0bGCPMCNPGDAK\x18\t\x20\x01(\rR\x0bGCPMCNPGDAK\x12-\n\x0bavatar_list\
    \x18\x04\x20\x03(\x0b2\x0c.KCPIIFBINDER\navatarListb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ExtraLineupType::file_descriptor().clone());
            deps.push(super::KCPIIFBINDE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PMBHFPCDGBM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
