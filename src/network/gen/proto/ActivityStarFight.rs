// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ActivityStarFight.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:StarFightData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StarFightData {
    // message fields
    // @@protoc_insertion_point(field:StarFightData.HNHNAALIFLO)
    pub HNHNAALIFLO: u32,
    // @@protoc_insertion_point(field:StarFightData.IIDFJHPDKMN)
    pub IIDFJHPDKMN: u32,
    // @@protoc_insertion_point(field:StarFightData.CDIGDPFEGIC)
    pub CDIGDPFEGIC: u32,
    // @@protoc_insertion_point(field:StarFightData.group_id)
    pub group_id: u32,
    // @@protoc_insertion_point(field:StarFightData.MKBHPJNPEKJ)
    pub MKBHPJNPEKJ: bool,
    // special fields
    // @@protoc_insertion_point(special_field:StarFightData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StarFightData {
    fn default() -> &'a StarFightData {
        <StarFightData as ::protobuf::Message>::default_instance()
    }
}

impl StarFightData {
    pub fn new() -> StarFightData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HNHNAALIFLO",
            |m: &StarFightData| { &m.HNHNAALIFLO },
            |m: &mut StarFightData| { &mut m.HNHNAALIFLO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IIDFJHPDKMN",
            |m: &StarFightData| { &m.IIDFJHPDKMN },
            |m: &mut StarFightData| { &mut m.IIDFJHPDKMN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CDIGDPFEGIC",
            |m: &StarFightData| { &m.CDIGDPFEGIC },
            |m: &mut StarFightData| { &mut m.CDIGDPFEGIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &StarFightData| { &m.group_id },
            |m: &mut StarFightData| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MKBHPJNPEKJ",
            |m: &StarFightData| { &m.MKBHPJNPEKJ },
            |m: &mut StarFightData| { &mut m.MKBHPJNPEKJ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StarFightData>(
            "StarFightData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StarFightData {
    const NAME: &'static str = "StarFightData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.HNHNAALIFLO = is.read_uint32()?;
                },
                32 => {
                    self.IIDFJHPDKMN = is.read_uint32()?;
                },
                48 => {
                    self.CDIGDPFEGIC = is.read_uint32()?;
                },
                16 => {
                    self.group_id = is.read_uint32()?;
                },
                96 => {
                    self.MKBHPJNPEKJ = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HNHNAALIFLO != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.HNHNAALIFLO);
        }
        if self.IIDFJHPDKMN != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.IIDFJHPDKMN);
        }
        if self.CDIGDPFEGIC != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.CDIGDPFEGIC);
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.group_id);
        }
        if self.MKBHPJNPEKJ != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HNHNAALIFLO != 0 {
            os.write_uint32(15, self.HNHNAALIFLO)?;
        }
        if self.IIDFJHPDKMN != 0 {
            os.write_uint32(4, self.IIDFJHPDKMN)?;
        }
        if self.CDIGDPFEGIC != 0 {
            os.write_uint32(6, self.CDIGDPFEGIC)?;
        }
        if self.group_id != 0 {
            os.write_uint32(2, self.group_id)?;
        }
        if self.MKBHPJNPEKJ != false {
            os.write_bool(12, self.MKBHPJNPEKJ)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StarFightData {
        StarFightData::new()
    }

    fn clear(&mut self) {
        self.HNHNAALIFLO = 0;
        self.IIDFJHPDKMN = 0;
        self.CDIGDPFEGIC = 0;
        self.group_id = 0;
        self.MKBHPJNPEKJ = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StarFightData {
        static instance: StarFightData = StarFightData {
            HNHNAALIFLO: 0,
            IIDFJHPDKMN: 0,
            CDIGDPFEGIC: 0,
            group_id: 0,
            MKBHPJNPEKJ: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StarFightData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StarFightData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StarFightData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StarFightData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetStarFightDataCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetStarFightDataCsReq {
    // special fields
    // @@protoc_insertion_point(special_field:GetStarFightDataCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetStarFightDataCsReq {
    fn default() -> &'a GetStarFightDataCsReq {
        <GetStarFightDataCsReq as ::protobuf::Message>::default_instance()
    }
}

impl GetStarFightDataCsReq {
    pub fn new() -> GetStarFightDataCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetStarFightDataCsReq>(
            "GetStarFightDataCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetStarFightDataCsReq {
    const NAME: &'static str = "GetStarFightDataCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetStarFightDataCsReq {
        GetStarFightDataCsReq::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetStarFightDataCsReq {
        static instance: GetStarFightDataCsReq = GetStarFightDataCsReq {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetStarFightDataCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetStarFightDataCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetStarFightDataCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetStarFightDataCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetStarFightDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetStarFightDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetStarFightDataScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetStarFightDataScRsp.star_fight_data_list)
    pub star_fight_data_list: ::std::vec::Vec<StarFightData>,
    // special fields
    // @@protoc_insertion_point(special_field:GetStarFightDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetStarFightDataScRsp {
    fn default() -> &'a GetStarFightDataScRsp {
        <GetStarFightDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetStarFightDataScRsp {
    pub fn new() -> GetStarFightDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetStarFightDataScRsp| { &m.retcode },
            |m: &mut GetStarFightDataScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "star_fight_data_list",
            |m: &GetStarFightDataScRsp| { &m.star_fight_data_list },
            |m: &mut GetStarFightDataScRsp| { &mut m.star_fight_data_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetStarFightDataScRsp>(
            "GetStarFightDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetStarFightDataScRsp {
    const NAME: &'static str = "GetStarFightDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.retcode = is.read_uint32()?;
                },
                82 => {
                    self.star_fight_data_list.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.retcode);
        }
        for value in &self.star_fight_data_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(11, self.retcode)?;
        }
        for v in &self.star_fight_data_list {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetStarFightDataScRsp {
        GetStarFightDataScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.star_fight_data_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetStarFightDataScRsp {
        static instance: GetStarFightDataScRsp = GetStarFightDataScRsp {
            retcode: 0,
            star_fight_data_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetStarFightDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetStarFightDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetStarFightDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetStarFightDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:StarFightAvatar)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StarFightAvatar {
    // message fields
    // @@protoc_insertion_point(field:StarFightAvatar.avatar_id)
    pub avatar_id: u32,
    // @@protoc_insertion_point(field:StarFightAvatar.avatar_type)
    pub avatar_type: ::protobuf::EnumOrUnknown<super::AvatarType::AvatarType>,
    // special fields
    // @@protoc_insertion_point(special_field:StarFightAvatar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StarFightAvatar {
    fn default() -> &'a StarFightAvatar {
        <StarFightAvatar as ::protobuf::Message>::default_instance()
    }
}

impl StarFightAvatar {
    pub fn new() -> StarFightAvatar {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_id",
            |m: &StarFightAvatar| { &m.avatar_id },
            |m: &mut StarFightAvatar| { &mut m.avatar_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_type",
            |m: &StarFightAvatar| { &m.avatar_type },
            |m: &mut StarFightAvatar| { &mut m.avatar_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StarFightAvatar>(
            "StarFightAvatar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StarFightAvatar {
    const NAME: &'static str = "StarFightAvatar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                80 => {
                    self.avatar_id = is.read_uint32()?;
                },
                96 => {
                    self.avatar_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.avatar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.avatar_id);
        }
        if self.avatar_type != ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(12, self.avatar_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.avatar_id != 0 {
            os.write_uint32(10, self.avatar_id)?;
        }
        if self.avatar_type != ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.avatar_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StarFightAvatar {
        StarFightAvatar::new()
    }

    fn clear(&mut self) {
        self.avatar_id = 0;
        self.avatar_type = ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StarFightAvatar {
        static instance: StarFightAvatar = StarFightAvatar {
            avatar_id: 0,
            avatar_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StarFightAvatar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StarFightAvatar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StarFightAvatar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StarFightAvatar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:StartStarFightLevelCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StartStarFightLevelCsReq {
    // message fields
    // @@protoc_insertion_point(field:StartStarFightLevelCsReq.avatar_list)
    pub avatar_list: ::std::vec::Vec<StarFightAvatar>,
    // @@protoc_insertion_point(field:StartStarFightLevelCsReq.difficulty)
    pub difficulty: u32,
    // @@protoc_insertion_point(field:StartStarFightLevelCsReq.group_id)
    pub group_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:StartStarFightLevelCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartStarFightLevelCsReq {
    fn default() -> &'a StartStarFightLevelCsReq {
        <StartStarFightLevelCsReq as ::protobuf::Message>::default_instance()
    }
}

impl StartStarFightLevelCsReq {
    pub fn new() -> StartStarFightLevelCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &StartStarFightLevelCsReq| { &m.avatar_list },
            |m: &mut StartStarFightLevelCsReq| { &mut m.avatar_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "difficulty",
            |m: &StartStarFightLevelCsReq| { &m.difficulty },
            |m: &mut StartStarFightLevelCsReq| { &mut m.difficulty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &StartStarFightLevelCsReq| { &m.group_id },
            |m: &mut StartStarFightLevelCsReq| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StartStarFightLevelCsReq>(
            "StartStarFightLevelCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StartStarFightLevelCsReq {
    const NAME: &'static str = "StartStarFightLevelCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.avatar_list.push(is.read_message()?);
                },
                48 => {
                    self.difficulty = is.read_uint32()?;
                },
                64 => {
                    self.group_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.avatar_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.difficulty != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.difficulty);
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.avatar_list {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.difficulty != 0 {
            os.write_uint32(6, self.difficulty)?;
        }
        if self.group_id != 0 {
            os.write_uint32(8, self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StartStarFightLevelCsReq {
        StartStarFightLevelCsReq::new()
    }

    fn clear(&mut self) {
        self.avatar_list.clear();
        self.difficulty = 0;
        self.group_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartStarFightLevelCsReq {
        static instance: StartStarFightLevelCsReq = StartStarFightLevelCsReq {
            avatar_list: ::std::vec::Vec::new(),
            difficulty: 0,
            group_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StartStarFightLevelCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StartStarFightLevelCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StartStarFightLevelCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartStarFightLevelCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:StartStarFightLevelScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StartStarFightLevelScRsp {
    // message fields
    // @@protoc_insertion_point(field:StartStarFightLevelScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:StartStarFightLevelScRsp.difficulty)
    pub difficulty: u32,
    // @@protoc_insertion_point(field:StartStarFightLevelScRsp.group_id)
    pub group_id: u32,
    // @@protoc_insertion_point(field:StartStarFightLevelScRsp.battle_info)
    pub battle_info: ::protobuf::MessageField<super::SceneBattleInfo::SceneBattleInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:StartStarFightLevelScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartStarFightLevelScRsp {
    fn default() -> &'a StartStarFightLevelScRsp {
        <StartStarFightLevelScRsp as ::protobuf::Message>::default_instance()
    }
}

impl StartStarFightLevelScRsp {
    pub fn new() -> StartStarFightLevelScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &StartStarFightLevelScRsp| { &m.retcode },
            |m: &mut StartStarFightLevelScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "difficulty",
            |m: &StartStarFightLevelScRsp| { &m.difficulty },
            |m: &mut StartStarFightLevelScRsp| { &mut m.difficulty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &StartStarFightLevelScRsp| { &m.group_id },
            |m: &mut StartStarFightLevelScRsp| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SceneBattleInfo::SceneBattleInfo>(
            "battle_info",
            |m: &StartStarFightLevelScRsp| { &m.battle_info },
            |m: &mut StartStarFightLevelScRsp| { &mut m.battle_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StartStarFightLevelScRsp>(
            "StartStarFightLevelScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StartStarFightLevelScRsp {
    const NAME: &'static str = "StartStarFightLevelScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.retcode = is.read_uint32()?;
                },
                32 => {
                    self.difficulty = is.read_uint32()?;
                },
                24 => {
                    self.group_id = is.read_uint32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.battle_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.retcode);
        }
        if self.difficulty != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.difficulty);
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.group_id);
        }
        if let Some(v) = self.battle_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(15, self.retcode)?;
        }
        if self.difficulty != 0 {
            os.write_uint32(4, self.difficulty)?;
        }
        if self.group_id != 0 {
            os.write_uint32(3, self.group_id)?;
        }
        if let Some(v) = self.battle_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StartStarFightLevelScRsp {
        StartStarFightLevelScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.difficulty = 0;
        self.group_id = 0;
        self.battle_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartStarFightLevelScRsp {
        static instance: StartStarFightLevelScRsp = StartStarFightLevelScRsp {
            retcode: 0,
            difficulty: 0,
            group_id: 0,
            battle_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StartStarFightLevelScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StartStarFightLevelScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StartStarFightLevelScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartStarFightLevelScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:StarFightDataChangeNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StarFightDataChangeNotify {
    // message fields
    // @@protoc_insertion_point(field:StarFightDataChangeNotify.star_fight_data)
    pub star_fight_data: ::protobuf::MessageField<StarFightData>,
    // @@protoc_insertion_point(field:StarFightDataChangeNotify.group_id)
    pub group_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:StarFightDataChangeNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StarFightDataChangeNotify {
    fn default() -> &'a StarFightDataChangeNotify {
        <StarFightDataChangeNotify as ::protobuf::Message>::default_instance()
    }
}

impl StarFightDataChangeNotify {
    pub fn new() -> StarFightDataChangeNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StarFightData>(
            "star_fight_data",
            |m: &StarFightDataChangeNotify| { &m.star_fight_data },
            |m: &mut StarFightDataChangeNotify| { &mut m.star_fight_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &StarFightDataChangeNotify| { &m.group_id },
            |m: &mut StarFightDataChangeNotify| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StarFightDataChangeNotify>(
            "StarFightDataChangeNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StarFightDataChangeNotify {
    const NAME: &'static str = "StarFightDataChangeNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.star_fight_data)?;
                },
                88 => {
                    self.group_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.star_fight_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.star_fight_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.group_id != 0 {
            os.write_uint32(11, self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StarFightDataChangeNotify {
        StarFightDataChangeNotify::new()
    }

    fn clear(&mut self) {
        self.star_fight_data.clear();
        self.group_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StarFightDataChangeNotify {
        static instance: StarFightDataChangeNotify = StarFightDataChangeNotify {
            star_fight_data: ::protobuf::MessageField::none(),
            group_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StarFightDataChangeNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StarFightDataChangeNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StarFightDataChangeNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StarFightDataChangeNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17ActivityStarFight.proto\x1a\x10AvatarType.proto\x1a\x15SceneBattle\
    Info.proto\"\xb2\x01\n\rStarFightData\x12\x20\n\x0bHNHNAALIFLO\x18\x0f\
    \x20\x01(\rR\x0bHNHNAALIFLO\x12\x20\n\x0bIIDFJHPDKMN\x18\x04\x20\x01(\rR\
    \x0bIIDFJHPDKMN\x12\x20\n\x0bCDIGDPFEGIC\x18\x06\x20\x01(\rR\x0bCDIGDPFE\
    GIC\x12\x19\n\x08group_id\x18\x02\x20\x01(\rR\x07groupId\x12\x20\n\x0bMK\
    BHPJNPEKJ\x18\x0c\x20\x01(\x08R\x0bMKBHPJNPEKJ\"\x17\n\x15GetStarFightDa\
    taCsReq\"r\n\x15GetStarFightDataScRsp\x12\x18\n\x07retcode\x18\x0b\x20\
    \x01(\rR\x07retcode\x12?\n\x14star_fight_data_list\x18\n\x20\x03(\x0b2\
    \x0e.StarFightDataR\x11starFightDataList\"\\\n\x0fStarFightAvatar\x12\
    \x1b\n\tavatar_id\x18\n\x20\x01(\rR\x08avatarId\x12,\n\x0bavatar_type\
    \x18\x0c\x20\x01(\x0e2\x0b.AvatarTypeR\navatarType\"\x88\x01\n\x18StartS\
    tarFightLevelCsReq\x121\n\x0bavatar_list\x18\x01\x20\x03(\x0b2\x10.StarF\
    ightAvatarR\navatarList\x12\x1e\n\ndifficulty\x18\x06\x20\x01(\rR\ndiffi\
    culty\x12\x19\n\x08group_id\x18\x08\x20\x01(\rR\x07groupId\"\xa2\x01\n\
    \x18StartStarFightLevelScRsp\x12\x18\n\x07retcode\x18\x0f\x20\x01(\rR\
    \x07retcode\x12\x1e\n\ndifficulty\x18\x04\x20\x01(\rR\ndifficulty\x12\
    \x19\n\x08group_id\x18\x03\x20\x01(\rR\x07groupId\x121\n\x0bbattle_info\
    \x18\x08\x20\x01(\x0b2\x10.SceneBattleInfoR\nbattleInfo\"n\n\x19StarFigh\
    tDataChangeNotify\x126\n\x0fstar_fight_data\x18\x01\x20\x01(\x0b2\x0e.St\
    arFightDataR\rstarFightData\x12\x19\n\x08group_id\x18\x0b\x20\x01(\rR\
    \x07groupIdB\x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::AvatarType::file_descriptor().clone());
            deps.push(super::SceneBattleInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(StarFightData::generated_message_descriptor_data());
            messages.push(GetStarFightDataCsReq::generated_message_descriptor_data());
            messages.push(GetStarFightDataScRsp::generated_message_descriptor_data());
            messages.push(StarFightAvatar::generated_message_descriptor_data());
            messages.push(StartStarFightLevelCsReq::generated_message_descriptor_data());
            messages.push(StartStarFightLevelScRsp::generated_message_descriptor_data());
            messages.push(StarFightDataChangeNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
