// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ANCKJOIOKJK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ANCKJOIOKJK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ANCKJOIOKJK {
    // message fields
    // @@protoc_insertion_point(field:ANCKJOIOKJK.MFFOKHAHJIA)
    pub MFFOKHAHJIA: ::std::string::String,
    // @@protoc_insertion_point(field:ANCKJOIOKJK.NOKIJJLIBKJ)
    pub NOKIJJLIBKJ: f32,
    // @@protoc_insertion_point(field:ANCKJOIOKJK.MBCODMMADOG)
    pub MBCODMMADOG: f32,
    // @@protoc_insertion_point(field:ANCKJOIOKJK.KAOBPGAEIKD)
    pub KAOBPGAEIKD: u32,
    // @@protoc_insertion_point(field:ANCKJOIOKJK.NEAFNCHEFJB)
    pub NEAFNCHEFJB: u32,
    // @@protoc_insertion_point(field:ANCKJOIOKJK.PAFAONMDCHF)
    pub PAFAONMDCHF: u32,
    // @@protoc_insertion_point(field:ANCKJOIOKJK.KMHPDJFMLON)
    pub KMHPDJFMLON: u32,
    // @@protoc_insertion_point(field:ANCKJOIOKJK.NBAFMIIBHLF)
    pub NBAFMIIBHLF: u32,
    // @@protoc_insertion_point(field:ANCKJOIOKJK.DAIFCBEFKEB)
    pub DAIFCBEFKEB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ANCKJOIOKJK.KEEMNKHDIFJ)
    pub KEEMNKHDIFJ: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ANCKJOIOKJK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ANCKJOIOKJK {
    fn default() -> &'a ANCKJOIOKJK {
        <ANCKJOIOKJK as ::protobuf::Message>::default_instance()
    }
}

impl ANCKJOIOKJK {
    pub fn new() -> ANCKJOIOKJK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MFFOKHAHJIA",
            |m: &ANCKJOIOKJK| { &m.MFFOKHAHJIA },
            |m: &mut ANCKJOIOKJK| { &mut m.MFFOKHAHJIA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NOKIJJLIBKJ",
            |m: &ANCKJOIOKJK| { &m.NOKIJJLIBKJ },
            |m: &mut ANCKJOIOKJK| { &mut m.NOKIJJLIBKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MBCODMMADOG",
            |m: &ANCKJOIOKJK| { &m.MBCODMMADOG },
            |m: &mut ANCKJOIOKJK| { &mut m.MBCODMMADOG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KAOBPGAEIKD",
            |m: &ANCKJOIOKJK| { &m.KAOBPGAEIKD },
            |m: &mut ANCKJOIOKJK| { &mut m.KAOBPGAEIKD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NEAFNCHEFJB",
            |m: &ANCKJOIOKJK| { &m.NEAFNCHEFJB },
            |m: &mut ANCKJOIOKJK| { &mut m.NEAFNCHEFJB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PAFAONMDCHF",
            |m: &ANCKJOIOKJK| { &m.PAFAONMDCHF },
            |m: &mut ANCKJOIOKJK| { &mut m.PAFAONMDCHF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KMHPDJFMLON",
            |m: &ANCKJOIOKJK| { &m.KMHPDJFMLON },
            |m: &mut ANCKJOIOKJK| { &mut m.KMHPDJFMLON },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NBAFMIIBHLF",
            |m: &ANCKJOIOKJK| { &m.NBAFMIIBHLF },
            |m: &mut ANCKJOIOKJK| { &mut m.NBAFMIIBHLF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DAIFCBEFKEB",
            |m: &ANCKJOIOKJK| { &m.DAIFCBEFKEB },
            |m: &mut ANCKJOIOKJK| { &mut m.DAIFCBEFKEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KEEMNKHDIFJ",
            |m: &ANCKJOIOKJK| { &m.KEEMNKHDIFJ },
            |m: &mut ANCKJOIOKJK| { &mut m.KEEMNKHDIFJ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ANCKJOIOKJK>(
            "ANCKJOIOKJK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ANCKJOIOKJK {
    const NAME: &'static str = "ANCKJOIOKJK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.MFFOKHAHJIA = is.read_string()?;
                },
                21 => {
                    self.NOKIJJLIBKJ = is.read_float()?;
                },
                29 => {
                    self.MBCODMMADOG = is.read_float()?;
                },
                32 => {
                    self.KAOBPGAEIKD = is.read_uint32()?;
                },
                40 => {
                    self.NEAFNCHEFJB = is.read_uint32()?;
                },
                48 => {
                    self.PAFAONMDCHF = is.read_uint32()?;
                },
                56 => {
                    self.KMHPDJFMLON = is.read_uint32()?;
                },
                64 => {
                    self.NBAFMIIBHLF = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.DAIFCBEFKEB)?;
                },
                72 => {
                    self.DAIFCBEFKEB.push(is.read_uint32()?);
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.KEEMNKHDIFJ)?;
                },
                80 => {
                    self.KEEMNKHDIFJ.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.MFFOKHAHJIA.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.MFFOKHAHJIA);
        }
        if self.NOKIJJLIBKJ != 0. {
            my_size += 1 + 4;
        }
        if self.MBCODMMADOG != 0. {
            my_size += 1 + 4;
        }
        if self.KAOBPGAEIKD != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.KAOBPGAEIKD);
        }
        if self.NEAFNCHEFJB != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.NEAFNCHEFJB);
        }
        if self.PAFAONMDCHF != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.PAFAONMDCHF);
        }
        if self.KMHPDJFMLON != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.KMHPDJFMLON);
        }
        if self.NBAFMIIBHLF != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.NBAFMIIBHLF);
        }
        for value in &self.DAIFCBEFKEB {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        for value in &self.KEEMNKHDIFJ {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.MFFOKHAHJIA.is_empty() {
            os.write_string(1, &self.MFFOKHAHJIA)?;
        }
        if self.NOKIJJLIBKJ != 0. {
            os.write_float(2, self.NOKIJJLIBKJ)?;
        }
        if self.MBCODMMADOG != 0. {
            os.write_float(3, self.MBCODMMADOG)?;
        }
        if self.KAOBPGAEIKD != 0 {
            os.write_uint32(4, self.KAOBPGAEIKD)?;
        }
        if self.NEAFNCHEFJB != 0 {
            os.write_uint32(5, self.NEAFNCHEFJB)?;
        }
        if self.PAFAONMDCHF != 0 {
            os.write_uint32(6, self.PAFAONMDCHF)?;
        }
        if self.KMHPDJFMLON != 0 {
            os.write_uint32(7, self.KMHPDJFMLON)?;
        }
        if self.NBAFMIIBHLF != 0 {
            os.write_uint32(8, self.NBAFMIIBHLF)?;
        }
        for v in &self.DAIFCBEFKEB {
            os.write_uint32(9, *v)?;
        };
        for v in &self.KEEMNKHDIFJ {
            os.write_uint32(10, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ANCKJOIOKJK {
        ANCKJOIOKJK::new()
    }

    fn clear(&mut self) {
        self.MFFOKHAHJIA.clear();
        self.NOKIJJLIBKJ = 0.;
        self.MBCODMMADOG = 0.;
        self.KAOBPGAEIKD = 0;
        self.NEAFNCHEFJB = 0;
        self.PAFAONMDCHF = 0;
        self.KMHPDJFMLON = 0;
        self.NBAFMIIBHLF = 0;
        self.DAIFCBEFKEB.clear();
        self.KEEMNKHDIFJ.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ANCKJOIOKJK {
        static instance: ANCKJOIOKJK = ANCKJOIOKJK {
            MFFOKHAHJIA: ::std::string::String::new(),
            NOKIJJLIBKJ: 0.,
            MBCODMMADOG: 0.,
            KAOBPGAEIKD: 0,
            NEAFNCHEFJB: 0,
            PAFAONMDCHF: 0,
            KMHPDJFMLON: 0,
            NBAFMIIBHLF: 0,
            DAIFCBEFKEB: ::std::vec::Vec::new(),
            KEEMNKHDIFJ: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ANCKJOIOKJK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ANCKJOIOKJK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ANCKJOIOKJK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ANCKJOIOKJK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ANCKJOIOKJK.proto\"\xe1\x02\n\x0bANCKJOIOKJK\x12\x20\n\x0bMFFOKHAH\
    JIA\x18\x01\x20\x01(\tR\x0bMFFOKHAHJIA\x12\x20\n\x0bNOKIJJLIBKJ\x18\x02\
    \x20\x01(\x02R\x0bNOKIJJLIBKJ\x12\x20\n\x0bMBCODMMADOG\x18\x03\x20\x01(\
    \x02R\x0bMBCODMMADOG\x12\x20\n\x0bKAOBPGAEIKD\x18\x04\x20\x01(\rR\x0bKAO\
    BPGAEIKD\x12\x20\n\x0bNEAFNCHEFJB\x18\x05\x20\x01(\rR\x0bNEAFNCHEFJB\x12\
    \x20\n\x0bPAFAONMDCHF\x18\x06\x20\x01(\rR\x0bPAFAONMDCHF\x12\x20\n\x0bKM\
    HPDJFMLON\x18\x07\x20\x01(\rR\x0bKMHPDJFMLON\x12\x20\n\x0bNBAFMIIBHLF\
    \x18\x08\x20\x01(\rR\x0bNBAFMIIBHLF\x12\x20\n\x0bDAIFCBEFKEB\x18\t\x20\
    \x03(\rR\x0bDAIFCBEFKEB\x12\x20\n\x0bKEEMNKHDIFJ\x18\n\x20\x03(\rR\x0bKE\
    EMNKHDIFJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ANCKJOIOKJK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
