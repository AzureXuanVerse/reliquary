// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EMKPHPFBING.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EMKPHPFBING)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EMKPHPFBING {
    // message oneof groups
    pub CGCIGBDMBBJ: ::std::option::Option<emkphpfbing::CGCIGBDMBBJ>,
    // special fields
    // @@protoc_insertion_point(special_field:EMKPHPFBING.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EMKPHPFBING {
    fn default() -> &'a EMKPHPFBING {
        <EMKPHPFBING as ::protobuf::Message>::default_instance()
    }
}

impl EMKPHPFBING {
    pub fn new() -> EMKPHPFBING {
        ::std::default::Default::default()
    }

    // .ACFPFOAKMIP ENNABLPIAEE = 7;

    pub fn ENNABLPIAEE(&self) -> &super::ACFPFOAKMIP::ACFPFOAKMIP {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(ref v)) => v,
            _ => <super::ACFPFOAKMIP::ACFPFOAKMIP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ENNABLPIAEE(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_ENNABLPIAEE(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ENNABLPIAEE(&mut self, v: super::ACFPFOAKMIP::ACFPFOAKMIP) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ENNABLPIAEE(&mut self) -> &mut super::ACFPFOAKMIP::ACFPFOAKMIP {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(super::ACFPFOAKMIP::ACFPFOAKMIP::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ENNABLPIAEE(&mut self) -> super::ACFPFOAKMIP::ACFPFOAKMIP {
        if self.has_ENNABLPIAEE() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ACFPFOAKMIP::ACFPFOAKMIP::new()
        }
    }

    // .CPGMGBDBJFF EKDHJFNNNNB = 6;

    pub fn EKDHJFNNNNB(&self) -> &super::CPGMGBDBJFF::CPGMGBDBJFF {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(ref v)) => v,
            _ => <super::CPGMGBDBJFF::CPGMGBDBJFF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EKDHJFNNNNB(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_EKDHJFNNNNB(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EKDHJFNNNNB(&mut self, v: super::CPGMGBDBJFF::CPGMGBDBJFF) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EKDHJFNNNNB(&mut self) -> &mut super::CPGMGBDBJFF::CPGMGBDBJFF {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(super::CPGMGBDBJFF::CPGMGBDBJFF::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EKDHJFNNNNB(&mut self) -> super::CPGMGBDBJFF::CPGMGBDBJFF {
        if self.has_EKDHJFNNNNB() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CPGMGBDBJFF::CPGMGBDBJFF::new()
        }
    }

    // .DJEGFJILPAA BCLCJEJHGAE = 14;

    pub fn BCLCJEJHGAE(&self) -> &super::DJEGFJILPAA::DJEGFJILPAA {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(ref v)) => v,
            _ => <super::DJEGFJILPAA::DJEGFJILPAA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BCLCJEJHGAE(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_BCLCJEJHGAE(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BCLCJEJHGAE(&mut self, v: super::DJEGFJILPAA::DJEGFJILPAA) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BCLCJEJHGAE(&mut self) -> &mut super::DJEGFJILPAA::DJEGFJILPAA {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(super::DJEGFJILPAA::DJEGFJILPAA::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BCLCJEJHGAE(&mut self) -> super::DJEGFJILPAA::DJEGFJILPAA {
        if self.has_BCLCJEJHGAE() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DJEGFJILPAA::DJEGFJILPAA::new()
        }
    }

    // .LKPPLDDCFJK MACIMGBEBDD = 2;

    pub fn MACIMGBEBDD(&self) -> &super::LKPPLDDCFJK::LKPPLDDCFJK {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(ref v)) => v,
            _ => <super::LKPPLDDCFJK::LKPPLDDCFJK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MACIMGBEBDD(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_MACIMGBEBDD(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MACIMGBEBDD(&mut self, v: super::LKPPLDDCFJK::LKPPLDDCFJK) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MACIMGBEBDD(&mut self) -> &mut super::LKPPLDDCFJK::LKPPLDDCFJK {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(super::LKPPLDDCFJK::LKPPLDDCFJK::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MACIMGBEBDD(&mut self) -> super::LKPPLDDCFJK::LKPPLDDCFJK {
        if self.has_MACIMGBEBDD() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LKPPLDDCFJK::LKPPLDDCFJK::new()
        }
    }

    // .IGDKDCKMPFJ CBBDBJGJAMO = 4;

    pub fn CBBDBJGJAMO(&self) -> &super::IGDKDCKMPFJ::IGDKDCKMPFJ {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(ref v)) => v,
            _ => <super::IGDKDCKMPFJ::IGDKDCKMPFJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CBBDBJGJAMO(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_CBBDBJGJAMO(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CBBDBJGJAMO(&mut self, v: super::IGDKDCKMPFJ::IGDKDCKMPFJ) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CBBDBJGJAMO(&mut self) -> &mut super::IGDKDCKMPFJ::IGDKDCKMPFJ {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(super::IGDKDCKMPFJ::IGDKDCKMPFJ::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CBBDBJGJAMO(&mut self) -> super::IGDKDCKMPFJ::IGDKDCKMPFJ {
        if self.has_CBBDBJGJAMO() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IGDKDCKMPFJ::IGDKDCKMPFJ::new()
        }
    }

    // .MEJJNDLFMPP FKOEDJJOJGB = 12;

    pub fn FKOEDJJOJGB(&self) -> &super::MEJJNDLFMPP::MEJJNDLFMPP {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(ref v)) => v,
            _ => <super::MEJJNDLFMPP::MEJJNDLFMPP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FKOEDJJOJGB(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_FKOEDJJOJGB(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FKOEDJJOJGB(&mut self, v: super::MEJJNDLFMPP::MEJJNDLFMPP) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FKOEDJJOJGB(&mut self) -> &mut super::MEJJNDLFMPP::MEJJNDLFMPP {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(super::MEJJNDLFMPP::MEJJNDLFMPP::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FKOEDJJOJGB(&mut self) -> super::MEJJNDLFMPP::MEJJNDLFMPP {
        if self.has_FKOEDJJOJGB() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MEJJNDLFMPP::MEJJNDLFMPP::new()
        }
    }

    // .OPGHBOBAMCI GJOAKDGLLLL = 13;

    pub fn GJOAKDGLLLL(&self) -> &super::OPGHBOBAMCI::OPGHBOBAMCI {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(ref v)) => v,
            _ => <super::OPGHBOBAMCI::OPGHBOBAMCI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GJOAKDGLLLL(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_GJOAKDGLLLL(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GJOAKDGLLLL(&mut self, v: super::OPGHBOBAMCI::OPGHBOBAMCI) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GJOAKDGLLLL(&mut self) -> &mut super::OPGHBOBAMCI::OPGHBOBAMCI {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(super::OPGHBOBAMCI::OPGHBOBAMCI::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GJOAKDGLLLL(&mut self) -> super::OPGHBOBAMCI::OPGHBOBAMCI {
        if self.has_GJOAKDGLLLL() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OPGHBOBAMCI::OPGHBOBAMCI::new()
        }
    }

    // .JBPJHLMNHEG CEPLFBBJIGK = 15;

    pub fn CEPLFBBJIGK(&self) -> &super::JBPJHLMNHEG::JBPJHLMNHEG {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(ref v)) => v,
            _ => <super::JBPJHLMNHEG::JBPJHLMNHEG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CEPLFBBJIGK(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_CEPLFBBJIGK(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CEPLFBBJIGK(&mut self, v: super::JBPJHLMNHEG::JBPJHLMNHEG) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CEPLFBBJIGK(&mut self) -> &mut super::JBPJHLMNHEG::JBPJHLMNHEG {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(super::JBPJHLMNHEG::JBPJHLMNHEG::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CEPLFBBJIGK(&mut self) -> super::JBPJHLMNHEG::JBPJHLMNHEG {
        if self.has_CEPLFBBJIGK() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JBPJHLMNHEG::JBPJHLMNHEG::new()
        }
    }

    // .PKHPNIINCLD MOJKOEDKGAO = 9;

    pub fn MOJKOEDKGAO(&self) -> &super::PKHPNIINCLD::PKHPNIINCLD {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(ref v)) => v,
            _ => <super::PKHPNIINCLD::PKHPNIINCLD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MOJKOEDKGAO(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_MOJKOEDKGAO(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MOJKOEDKGAO(&mut self, v: super::PKHPNIINCLD::PKHPNIINCLD) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MOJKOEDKGAO(&mut self) -> &mut super::PKHPNIINCLD::PKHPNIINCLD {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(super::PKHPNIINCLD::PKHPNIINCLD::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MOJKOEDKGAO(&mut self) -> super::PKHPNIINCLD::PKHPNIINCLD {
        if self.has_MOJKOEDKGAO() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PKHPNIINCLD::PKHPNIINCLD::new()
        }
    }

    // .LJHGBBKHAHO DCPPMNOKCOC = 8;

    pub fn DCPPMNOKCOC(&self) -> &super::LJHGBBKHAHO::LJHGBBKHAHO {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(ref v)) => v,
            _ => <super::LJHGBBKHAHO::LJHGBBKHAHO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DCPPMNOKCOC(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
    }

    pub fn has_DCPPMNOKCOC(&self) -> bool {
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DCPPMNOKCOC(&mut self, v: super::LJHGBBKHAHO::LJHGBBKHAHO) {
        self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DCPPMNOKCOC(&mut self) -> &mut super::LJHGBBKHAHO::LJHGBBKHAHO {
        if let ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(_)) = self.CGCIGBDMBBJ {
        } else {
            self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(super::LJHGBBKHAHO::LJHGBBKHAHO::new()));
        }
        match self.CGCIGBDMBBJ {
            ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DCPPMNOKCOC(&mut self) -> super::LJHGBBKHAHO::LJHGBBKHAHO {
        if self.has_DCPPMNOKCOC() {
            match self.CGCIGBDMBBJ.take() {
                ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LJHGBBKHAHO::LJHGBBKHAHO::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ACFPFOAKMIP::ACFPFOAKMIP>(
            "ENNABLPIAEE",
            EMKPHPFBING::has_ENNABLPIAEE,
            EMKPHPFBING::ENNABLPIAEE,
            EMKPHPFBING::mut_ENNABLPIAEE,
            EMKPHPFBING::set_ENNABLPIAEE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CPGMGBDBJFF::CPGMGBDBJFF>(
            "EKDHJFNNNNB",
            EMKPHPFBING::has_EKDHJFNNNNB,
            EMKPHPFBING::EKDHJFNNNNB,
            EMKPHPFBING::mut_EKDHJFNNNNB,
            EMKPHPFBING::set_EKDHJFNNNNB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DJEGFJILPAA::DJEGFJILPAA>(
            "BCLCJEJHGAE",
            EMKPHPFBING::has_BCLCJEJHGAE,
            EMKPHPFBING::BCLCJEJHGAE,
            EMKPHPFBING::mut_BCLCJEJHGAE,
            EMKPHPFBING::set_BCLCJEJHGAE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LKPPLDDCFJK::LKPPLDDCFJK>(
            "MACIMGBEBDD",
            EMKPHPFBING::has_MACIMGBEBDD,
            EMKPHPFBING::MACIMGBEBDD,
            EMKPHPFBING::mut_MACIMGBEBDD,
            EMKPHPFBING::set_MACIMGBEBDD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IGDKDCKMPFJ::IGDKDCKMPFJ>(
            "CBBDBJGJAMO",
            EMKPHPFBING::has_CBBDBJGJAMO,
            EMKPHPFBING::CBBDBJGJAMO,
            EMKPHPFBING::mut_CBBDBJGJAMO,
            EMKPHPFBING::set_CBBDBJGJAMO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MEJJNDLFMPP::MEJJNDLFMPP>(
            "FKOEDJJOJGB",
            EMKPHPFBING::has_FKOEDJJOJGB,
            EMKPHPFBING::FKOEDJJOJGB,
            EMKPHPFBING::mut_FKOEDJJOJGB,
            EMKPHPFBING::set_FKOEDJJOJGB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OPGHBOBAMCI::OPGHBOBAMCI>(
            "GJOAKDGLLLL",
            EMKPHPFBING::has_GJOAKDGLLLL,
            EMKPHPFBING::GJOAKDGLLLL,
            EMKPHPFBING::mut_GJOAKDGLLLL,
            EMKPHPFBING::set_GJOAKDGLLLL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JBPJHLMNHEG::JBPJHLMNHEG>(
            "CEPLFBBJIGK",
            EMKPHPFBING::has_CEPLFBBJIGK,
            EMKPHPFBING::CEPLFBBJIGK,
            EMKPHPFBING::mut_CEPLFBBJIGK,
            EMKPHPFBING::set_CEPLFBBJIGK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PKHPNIINCLD::PKHPNIINCLD>(
            "MOJKOEDKGAO",
            EMKPHPFBING::has_MOJKOEDKGAO,
            EMKPHPFBING::MOJKOEDKGAO,
            EMKPHPFBING::mut_MOJKOEDKGAO,
            EMKPHPFBING::set_MOJKOEDKGAO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LJHGBBKHAHO::LJHGBBKHAHO>(
            "DCPPMNOKCOC",
            EMKPHPFBING::has_DCPPMNOKCOC,
            EMKPHPFBING::DCPPMNOKCOC,
            EMKPHPFBING::mut_DCPPMNOKCOC,
            EMKPHPFBING::set_DCPPMNOKCOC,
        ));
        oneofs.push(emkphpfbing::CGCIGBDMBBJ::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EMKPHPFBING>(
            "EMKPHPFBING",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EMKPHPFBING {
    const NAME: &'static str = "EMKPHPFBING";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(is.read_message()?));
                },
                50 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(is.read_message()?));
                },
                114 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(is.read_message()?));
                },
                18 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(is.read_message()?));
                },
                34 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(is.read_message()?));
                },
                98 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(is.read_message()?));
                },
                106 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(is.read_message()?));
                },
                122 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(is.read_message()?));
                },
                74 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(is.read_message()?));
                },
                66 => {
                    self.CGCIGBDMBBJ = ::std::option::Option::Some(emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.CGCIGBDMBBJ {
            match v {
                &emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.CGCIGBDMBBJ {
            match v {
                &emkphpfbing::CGCIGBDMBBJ::ENNABLPIAEE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &emkphpfbing::CGCIGBDMBBJ::EKDHJFNNNNB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &emkphpfbing::CGCIGBDMBBJ::BCLCJEJHGAE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &emkphpfbing::CGCIGBDMBBJ::MACIMGBEBDD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &emkphpfbing::CGCIGBDMBBJ::CBBDBJGJAMO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &emkphpfbing::CGCIGBDMBBJ::FKOEDJJOJGB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &emkphpfbing::CGCIGBDMBBJ::GJOAKDGLLLL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &emkphpfbing::CGCIGBDMBBJ::CEPLFBBJIGK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &emkphpfbing::CGCIGBDMBBJ::MOJKOEDKGAO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &emkphpfbing::CGCIGBDMBBJ::DCPPMNOKCOC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EMKPHPFBING {
        EMKPHPFBING::new()
    }

    fn clear(&mut self) {
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.CGCIGBDMBBJ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EMKPHPFBING {
        static instance: EMKPHPFBING = EMKPHPFBING {
            CGCIGBDMBBJ: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EMKPHPFBING {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EMKPHPFBING").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EMKPHPFBING {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EMKPHPFBING {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EMKPHPFBING`
pub mod emkphpfbing {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:EMKPHPFBING.CGCIGBDMBBJ)
    pub enum CGCIGBDMBBJ {
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.ENNABLPIAEE)
        ENNABLPIAEE(super::super::ACFPFOAKMIP::ACFPFOAKMIP),
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.EKDHJFNNNNB)
        EKDHJFNNNNB(super::super::CPGMGBDBJFF::CPGMGBDBJFF),
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.BCLCJEJHGAE)
        BCLCJEJHGAE(super::super::DJEGFJILPAA::DJEGFJILPAA),
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.MACIMGBEBDD)
        MACIMGBEBDD(super::super::LKPPLDDCFJK::LKPPLDDCFJK),
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.CBBDBJGJAMO)
        CBBDBJGJAMO(super::super::IGDKDCKMPFJ::IGDKDCKMPFJ),
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.FKOEDJJOJGB)
        FKOEDJJOJGB(super::super::MEJJNDLFMPP::MEJJNDLFMPP),
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.GJOAKDGLLLL)
        GJOAKDGLLLL(super::super::OPGHBOBAMCI::OPGHBOBAMCI),
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.CEPLFBBJIGK)
        CEPLFBBJIGK(super::super::JBPJHLMNHEG::JBPJHLMNHEG),
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.MOJKOEDKGAO)
        MOJKOEDKGAO(super::super::PKHPNIINCLD::PKHPNIINCLD),
        // @@protoc_insertion_point(oneof_field:EMKPHPFBING.DCPPMNOKCOC)
        DCPPMNOKCOC(super::super::LJHGBBKHAHO::LJHGBBKHAHO),
    }

    impl ::protobuf::Oneof for CGCIGBDMBBJ {
    }

    impl ::protobuf::OneofFull for CGCIGBDMBBJ {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EMKPHPFBING as ::protobuf::MessageFull>::descriptor().oneof_by_name("CGCIGBDMBBJ").unwrap()).clone()
        }
    }

    impl CGCIGBDMBBJ {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<CGCIGBDMBBJ>("CGCIGBDMBBJ")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EMKPHPFBING.proto\x1a\x11ACFPFOAKMIP.proto\x1a\x11CPGMGBDBJFF.prot\
    o\x1a\x11DJEGFJILPAA.proto\x1a\x11IGDKDCKMPFJ.proto\x1a\x11JBPJHLMNHEG.p\
    roto\x1a\x11LJHGBBKHAHO.proto\x1a\x11LKPPLDDCFJK.proto\x1a\x11MEJJNDLFMP\
    P.proto\x1a\x11OPGHBOBAMCI.proto\x1a\x11PKHPNIINCLD.proto\"\x90\x04\n\
    \x0bEMKPHPFBING\x120\n\x0bENNABLPIAEE\x18\x07\x20\x01(\x0b2\x0c.ACFPFOAK\
    MIPH\0R\x0bENNABLPIAEE\x120\n\x0bEKDHJFNNNNB\x18\x06\x20\x01(\x0b2\x0c.C\
    PGMGBDBJFFH\0R\x0bEKDHJFNNNNB\x120\n\x0bBCLCJEJHGAE\x18\x0e\x20\x01(\x0b\
    2\x0c.DJEGFJILPAAH\0R\x0bBCLCJEJHGAE\x120\n\x0bMACIMGBEBDD\x18\x02\x20\
    \x01(\x0b2\x0c.LKPPLDDCFJKH\0R\x0bMACIMGBEBDD\x120\n\x0bCBBDBJGJAMO\x18\
    \x04\x20\x01(\x0b2\x0c.IGDKDCKMPFJH\0R\x0bCBBDBJGJAMO\x120\n\x0bFKOEDJJO\
    JGB\x18\x0c\x20\x01(\x0b2\x0c.MEJJNDLFMPPH\0R\x0bFKOEDJJOJGB\x120\n\x0bG\
    JOAKDGLLLL\x18\r\x20\x01(\x0b2\x0c.OPGHBOBAMCIH\0R\x0bGJOAKDGLLLL\x120\n\
    \x0bCEPLFBBJIGK\x18\x0f\x20\x01(\x0b2\x0c.JBPJHLMNHEGH\0R\x0bCEPLFBBJIGK\
    \x120\n\x0bMOJKOEDKGAO\x18\t\x20\x01(\x0b2\x0c.PKHPNIINCLDH\0R\x0bMOJKOE\
    DKGAO\x120\n\x0bDCPPMNOKCOC\x18\x08\x20\x01(\x0b2\x0c.LJHGBBKHAHOH\0R\
    \x0bDCPPMNOKCOCB\r\n\x0bCGCIGBDMBBJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::ACFPFOAKMIP::file_descriptor().clone());
            deps.push(super::CPGMGBDBJFF::file_descriptor().clone());
            deps.push(super::DJEGFJILPAA::file_descriptor().clone());
            deps.push(super::IGDKDCKMPFJ::file_descriptor().clone());
            deps.push(super::JBPJHLMNHEG::file_descriptor().clone());
            deps.push(super::LJHGBBKHAHO::file_descriptor().clone());
            deps.push(super::LKPPLDDCFJK::file_descriptor().clone());
            deps.push(super::MEJJNDLFMPP::file_descriptor().clone());
            deps.push(super::OPGHBOBAMCI::file_descriptor().clone());
            deps.push(super::PKHPNIINCLD::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EMKPHPFBING::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
