// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HKJACOBACDL.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HKJACOBACDL)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HKJACOBACDL {
    // message fields
    // @@protoc_insertion_point(field:HKJACOBACDL.AAHLHAGLANP)
    pub AAHLHAGLANP: ::std::vec::Vec<super::JFNDBKOGAAC::JFNDBKOGAAC>,
    // @@protoc_insertion_point(field:HKJACOBACDL.EGPPEOIOPBH)
    pub EGPPEOIOPBH: ::protobuf::EnumOrUnknown<super::OBOICHHNOAA::OBOICHHNOAA>,
    // @@protoc_insertion_point(field:HKJACOBACDL.DBCEMIIFOMI)
    pub DBCEMIIFOMI: u32,
    // @@protoc_insertion_point(field:HKJACOBACDL.OHJNDOKPONF)
    pub OHJNDOKPONF: u64,
    // @@protoc_insertion_point(field:HKJACOBACDL.FAADIIGPGED)
    pub FAADIIGPGED: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HKJACOBACDL.IOHAOOIALBO)
    pub IOHAOOIALBO: ::protobuf::MessageField<super::ABOIFBHJJJH::ABOIFBHJJJH>,
    // @@protoc_insertion_point(field:HKJACOBACDL.MIGJLAJOGIL)
    pub MIGJLAJOGIL: i32,
    // special fields
    // @@protoc_insertion_point(special_field:HKJACOBACDL.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HKJACOBACDL {
    fn default() -> &'a HKJACOBACDL {
        <HKJACOBACDL as ::protobuf::Message>::default_instance()
    }
}

impl HKJACOBACDL {
    pub fn new() -> HKJACOBACDL {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AAHLHAGLANP",
            |m: &HKJACOBACDL| { &m.AAHLHAGLANP },
            |m: &mut HKJACOBACDL| { &mut m.AAHLHAGLANP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EGPPEOIOPBH",
            |m: &HKJACOBACDL| { &m.EGPPEOIOPBH },
            |m: &mut HKJACOBACDL| { &mut m.EGPPEOIOPBH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBCEMIIFOMI",
            |m: &HKJACOBACDL| { &m.DBCEMIIFOMI },
            |m: &mut HKJACOBACDL| { &mut m.DBCEMIIFOMI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OHJNDOKPONF",
            |m: &HKJACOBACDL| { &m.OHJNDOKPONF },
            |m: &mut HKJACOBACDL| { &mut m.OHJNDOKPONF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FAADIIGPGED",
            |m: &HKJACOBACDL| { &m.FAADIIGPGED },
            |m: &mut HKJACOBACDL| { &mut m.FAADIIGPGED },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ABOIFBHJJJH::ABOIFBHJJJH>(
            "IOHAOOIALBO",
            |m: &HKJACOBACDL| { &m.IOHAOOIALBO },
            |m: &mut HKJACOBACDL| { &mut m.IOHAOOIALBO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MIGJLAJOGIL",
            |m: &HKJACOBACDL| { &m.MIGJLAJOGIL },
            |m: &mut HKJACOBACDL| { &mut m.MIGJLAJOGIL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HKJACOBACDL>(
            "HKJACOBACDL",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HKJACOBACDL {
    const NAME: &'static str = "HKJACOBACDL";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.AAHLHAGLANP.push(is.read_message()?);
                },
                40 => {
                    self.EGPPEOIOPBH = is.read_enum_or_unknown()?;
                },
                56 => {
                    self.DBCEMIIFOMI = is.read_uint32()?;
                },
                104 => {
                    self.OHJNDOKPONF = is.read_uint64()?;
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.FAADIIGPGED)?;
                },
                88 => {
                    self.FAADIIGPGED.push(is.read_uint32()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IOHAOOIALBO)?;
                },
                16 => {
                    self.MIGJLAJOGIL = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.AAHLHAGLANP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.EGPPEOIOPBH != ::protobuf::EnumOrUnknown::new(super::OBOICHHNOAA::OBOICHHNOAA::MATCH3_STATE_IDLE) {
            my_size += ::protobuf::rt::int32_size(5, self.EGPPEOIOPBH.value());
        }
        if self.DBCEMIIFOMI != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.DBCEMIIFOMI);
        }
        if self.OHJNDOKPONF != 0 {
            my_size += ::protobuf::rt::uint64_size(13, self.OHJNDOKPONF);
        }
        for value in &self.FAADIIGPGED {
            my_size += ::protobuf::rt::uint32_size(11, *value);
        };
        if let Some(v) = self.IOHAOOIALBO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.MIGJLAJOGIL != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.MIGJLAJOGIL);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.AAHLHAGLANP {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.EGPPEOIOPBH != ::protobuf::EnumOrUnknown::new(super::OBOICHHNOAA::OBOICHHNOAA::MATCH3_STATE_IDLE) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.EGPPEOIOPBH))?;
        }
        if self.DBCEMIIFOMI != 0 {
            os.write_uint32(7, self.DBCEMIIFOMI)?;
        }
        if self.OHJNDOKPONF != 0 {
            os.write_uint64(13, self.OHJNDOKPONF)?;
        }
        for v in &self.FAADIIGPGED {
            os.write_uint32(11, *v)?;
        };
        if let Some(v) = self.IOHAOOIALBO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.MIGJLAJOGIL != 0 {
            os.write_int32(2, self.MIGJLAJOGIL)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HKJACOBACDL {
        HKJACOBACDL::new()
    }

    fn clear(&mut self) {
        self.AAHLHAGLANP.clear();
        self.EGPPEOIOPBH = ::protobuf::EnumOrUnknown::new(super::OBOICHHNOAA::OBOICHHNOAA::MATCH3_STATE_IDLE);
        self.DBCEMIIFOMI = 0;
        self.OHJNDOKPONF = 0;
        self.FAADIIGPGED.clear();
        self.IOHAOOIALBO.clear();
        self.MIGJLAJOGIL = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HKJACOBACDL {
        static instance: HKJACOBACDL = HKJACOBACDL {
            AAHLHAGLANP: ::std::vec::Vec::new(),
            EGPPEOIOPBH: ::protobuf::EnumOrUnknown::from_i32(0),
            DBCEMIIFOMI: 0,
            OHJNDOKPONF: 0,
            FAADIIGPGED: ::std::vec::Vec::new(),
            IOHAOOIALBO: ::protobuf::MessageField::none(),
            MIGJLAJOGIL: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HKJACOBACDL {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HKJACOBACDL").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HKJACOBACDL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HKJACOBACDL {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HKJACOBACDL.proto\x1a\x11ABOIFBHJJJH.proto\x1a\x11JFNDBKOGAAC.prot\
    o\x1a\x11OBOICHHNOAA.proto\"\xa5\x02\n\x0bHKJACOBACDL\x12.\n\x0bAAHLHAGL\
    ANP\x18\x03\x20\x03(\x0b2\x0c.JFNDBKOGAACR\x0bAAHLHAGLANP\x12.\n\x0bEGPP\
    EOIOPBH\x18\x05\x20\x01(\x0e2\x0c.OBOICHHNOAAR\x0bEGPPEOIOPBH\x12\x20\n\
    \x0bDBCEMIIFOMI\x18\x07\x20\x01(\rR\x0bDBCEMIIFOMI\x12\x20\n\x0bOHJNDOKP\
    ONF\x18\r\x20\x01(\x04R\x0bOHJNDOKPONF\x12\x20\n\x0bFAADIIGPGED\x18\x0b\
    \x20\x03(\rR\x0bFAADIIGPGED\x12.\n\x0bIOHAOOIALBO\x18\n\x20\x01(\x0b2\
    \x0c.ABOIFBHJJJHR\x0bIOHAOOIALBO\x12\x20\n\x0bMIGJLAJOGIL\x18\x02\x20\
    \x01(\x05R\x0bMIGJLAJOGILb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ABOIFBHJJJH::file_descriptor().clone());
            deps.push(super::JFNDBKOGAAC::file_descriptor().clone());
            deps.push(super::OBOICHHNOAA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HKJACOBACDL::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
