// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BOHJMDPLICI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BOHJMDPLICI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BOHJMDPLICI {
    // message fields
    // @@protoc_insertion_point(field:BOHJMDPLICI.JDDKJPPCCOK)
    pub JDDKJPPCCOK: i64,
    // @@protoc_insertion_point(field:BOHJMDPLICI.ILIPNKLGCMB)
    pub ILIPNKLGCMB: ::protobuf::EnumOrUnknown<super::DevelopmentType::DevelopmentType>,
    // message oneof groups
    pub CLAEMHMNNED: ::std::option::Option<bohjmdplici::CLAEMHMNNED>,
    // special fields
    // @@protoc_insertion_point(special_field:BOHJMDPLICI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BOHJMDPLICI {
    fn default() -> &'a BOHJMDPLICI {
        <BOHJMDPLICI as ::protobuf::Message>::default_instance()
    }
}

impl BOHJMDPLICI {
    pub fn new() -> BOHJMDPLICI {
        ::std::default::Default::default()
    }

    // .OJNAHKPKPCD EGKBAHCKPII = 1730;

    pub fn EGKBAHCKPII(&self) -> &super::OJNAHKPKPCD::OJNAHKPKPCD {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(ref v)) => v,
            _ => <super::OJNAHKPKPCD::OJNAHKPKPCD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EGKBAHCKPII(&mut self) {
        self.CLAEMHMNNED = ::std::option::Option::None;
    }

    pub fn has_EGKBAHCKPII(&self) -> bool {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EGKBAHCKPII(&mut self, v: super::OJNAHKPKPCD::OJNAHKPKPCD) {
        self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EGKBAHCKPII(&mut self) -> &mut super::OJNAHKPKPCD::OJNAHKPKPCD {
        if let ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(_)) = self.CLAEMHMNNED {
        } else {
            self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(super::OJNAHKPKPCD::OJNAHKPKPCD::new()));
        }
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EGKBAHCKPII(&mut self) -> super::OJNAHKPKPCD::OJNAHKPKPCD {
        if self.has_EGKBAHCKPII() {
            match self.CLAEMHMNNED.take() {
                ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OJNAHKPKPCD::OJNAHKPKPCD::new()
        }
    }

    // .LACEKNKGBLD FNGCHIIKIGN = 1372;

    pub fn FNGCHIIKIGN(&self) -> &super::LACEKNKGBLD::LACEKNKGBLD {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(ref v)) => v,
            _ => <super::LACEKNKGBLD::LACEKNKGBLD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FNGCHIIKIGN(&mut self) {
        self.CLAEMHMNNED = ::std::option::Option::None;
    }

    pub fn has_FNGCHIIKIGN(&self) -> bool {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FNGCHIIKIGN(&mut self, v: super::LACEKNKGBLD::LACEKNKGBLD) {
        self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FNGCHIIKIGN(&mut self) -> &mut super::LACEKNKGBLD::LACEKNKGBLD {
        if let ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(_)) = self.CLAEMHMNNED {
        } else {
            self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(super::LACEKNKGBLD::LACEKNKGBLD::new()));
        }
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FNGCHIIKIGN(&mut self) -> super::LACEKNKGBLD::LACEKNKGBLD {
        if self.has_FNGCHIIKIGN() {
            match self.CLAEMHMNNED.take() {
                ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LACEKNKGBLD::LACEKNKGBLD::new()
        }
    }

    // uint32 DHPDHGHAEOP = 982;

    pub fn DHPDHGHAEOP(&self) -> u32 {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DHPDHGHAEOP(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_DHPDHGHAEOP(&mut self) {
        self.CLAEMHMNNED = ::std::option::Option::None;
    }

    pub fn has_DHPDHGHAEOP(&self) -> bool {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DHPDHGHAEOP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DHPDHGHAEOP(&mut self, v: u32) {
        self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DHPDHGHAEOP(v))
    }

    // uint32 DCMFEJJJFIA = 367;

    pub fn DCMFEJJJFIA(&self) -> u32 {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DCMFEJJJFIA(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_DCMFEJJJFIA(&mut self) {
        self.CLAEMHMNNED = ::std::option::Option::None;
    }

    pub fn has_DCMFEJJJFIA(&self) -> bool {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DCMFEJJJFIA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DCMFEJJJFIA(&mut self, v: u32) {
        self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DCMFEJJJFIA(v))
    }

    // uint32 BBLHFLGOCOJ = 1036;

    pub fn BBLHFLGOCOJ(&self) -> u32 {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BBLHFLGOCOJ(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_BBLHFLGOCOJ(&mut self) {
        self.CLAEMHMNNED = ::std::option::Option::None;
    }

    pub fn has_BBLHFLGOCOJ(&self) -> bool {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BBLHFLGOCOJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BBLHFLGOCOJ(&mut self, v: u32) {
        self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BBLHFLGOCOJ(v))
    }

    // .KFFFLJHIFNA BPGFFNCJMGD = 780;

    pub fn BPGFFNCJMGD(&self) -> &super::KFFFLJHIFNA::KFFFLJHIFNA {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(ref v)) => v,
            _ => <super::KFFFLJHIFNA::KFFFLJHIFNA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BPGFFNCJMGD(&mut self) {
        self.CLAEMHMNNED = ::std::option::Option::None;
    }

    pub fn has_BPGFFNCJMGD(&self) -> bool {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BPGFFNCJMGD(&mut self, v: super::KFFFLJHIFNA::KFFFLJHIFNA) {
        self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BPGFFNCJMGD(&mut self) -> &mut super::KFFFLJHIFNA::KFFFLJHIFNA {
        if let ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(_)) = self.CLAEMHMNNED {
        } else {
            self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(super::KFFFLJHIFNA::KFFFLJHIFNA::new()));
        }
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BPGFFNCJMGD(&mut self) -> super::KFFFLJHIFNA::KFFFLJHIFNA {
        if self.has_BPGFFNCJMGD() {
            match self.CLAEMHMNNED.take() {
                ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KFFFLJHIFNA::KFFFLJHIFNA::new()
        }
    }

    // uint32 DDMDPBEGKHC = 1059;

    pub fn DDMDPBEGKHC(&self) -> u32 {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DDMDPBEGKHC(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_DDMDPBEGKHC(&mut self) {
        self.CLAEMHMNNED = ::std::option::Option::None;
    }

    pub fn has_DDMDPBEGKHC(&self) -> bool {
        match self.CLAEMHMNNED {
            ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DDMDPBEGKHC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DDMDPBEGKHC(&mut self, v: u32) {
        self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DDMDPBEGKHC(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JDDKJPPCCOK",
            |m: &BOHJMDPLICI| { &m.JDDKJPPCCOK },
            |m: &mut BOHJMDPLICI| { &mut m.JDDKJPPCCOK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ILIPNKLGCMB",
            |m: &BOHJMDPLICI| { &m.ILIPNKLGCMB },
            |m: &mut BOHJMDPLICI| { &mut m.ILIPNKLGCMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OJNAHKPKPCD::OJNAHKPKPCD>(
            "EGKBAHCKPII",
            BOHJMDPLICI::has_EGKBAHCKPII,
            BOHJMDPLICI::EGKBAHCKPII,
            BOHJMDPLICI::mut_EGKBAHCKPII,
            BOHJMDPLICI::set_EGKBAHCKPII,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LACEKNKGBLD::LACEKNKGBLD>(
            "FNGCHIIKIGN",
            BOHJMDPLICI::has_FNGCHIIKIGN,
            BOHJMDPLICI::FNGCHIIKIGN,
            BOHJMDPLICI::mut_FNGCHIIKIGN,
            BOHJMDPLICI::set_FNGCHIIKIGN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "DHPDHGHAEOP",
            BOHJMDPLICI::has_DHPDHGHAEOP,
            BOHJMDPLICI::DHPDHGHAEOP,
            BOHJMDPLICI::set_DHPDHGHAEOP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "DCMFEJJJFIA",
            BOHJMDPLICI::has_DCMFEJJJFIA,
            BOHJMDPLICI::DCMFEJJJFIA,
            BOHJMDPLICI::set_DCMFEJJJFIA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "BBLHFLGOCOJ",
            BOHJMDPLICI::has_BBLHFLGOCOJ,
            BOHJMDPLICI::BBLHFLGOCOJ,
            BOHJMDPLICI::set_BBLHFLGOCOJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KFFFLJHIFNA::KFFFLJHIFNA>(
            "BPGFFNCJMGD",
            BOHJMDPLICI::has_BPGFFNCJMGD,
            BOHJMDPLICI::BPGFFNCJMGD,
            BOHJMDPLICI::mut_BPGFFNCJMGD,
            BOHJMDPLICI::set_BPGFFNCJMGD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "DDMDPBEGKHC",
            BOHJMDPLICI::has_DDMDPBEGKHC,
            BOHJMDPLICI::DDMDPBEGKHC,
            BOHJMDPLICI::set_DDMDPBEGKHC,
        ));
        oneofs.push(bohjmdplici::CLAEMHMNNED::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BOHJMDPLICI>(
            "BOHJMDPLICI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BOHJMDPLICI {
    const NAME: &'static str = "BOHJMDPLICI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                40 => {
                    self.JDDKJPPCCOK = is.read_int64()?;
                },
                120 => {
                    self.ILIPNKLGCMB = is.read_enum_or_unknown()?;
                },
                13842 => {
                    self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(is.read_message()?));
                },
                10978 => {
                    self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(is.read_message()?));
                },
                7856 => {
                    self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DHPDHGHAEOP(is.read_uint32()?));
                },
                2936 => {
                    self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DCMFEJJJFIA(is.read_uint32()?));
                },
                8288 => {
                    self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BBLHFLGOCOJ(is.read_uint32()?));
                },
                6242 => {
                    self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(is.read_message()?));
                },
                8472 => {
                    self.CLAEMHMNNED = ::std::option::Option::Some(bohjmdplici::CLAEMHMNNED::DDMDPBEGKHC(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.JDDKJPPCCOK != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.JDDKJPPCCOK);
        }
        if self.ILIPNKLGCMB != ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE) {
            my_size += ::protobuf::rt::int32_size(15, self.ILIPNKLGCMB.value());
        }
        if let ::std::option::Option::Some(ref v) = self.CLAEMHMNNED {
            match v {
                &bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bohjmdplici::CLAEMHMNNED::DHPDHGHAEOP(v) => {
                    my_size += ::protobuf::rt::uint32_size(982, v);
                },
                &bohjmdplici::CLAEMHMNNED::DCMFEJJJFIA(v) => {
                    my_size += ::protobuf::rt::uint32_size(367, v);
                },
                &bohjmdplici::CLAEMHMNNED::BBLHFLGOCOJ(v) => {
                    my_size += ::protobuf::rt::uint32_size(1036, v);
                },
                &bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bohjmdplici::CLAEMHMNNED::DDMDPBEGKHC(v) => {
                    my_size += ::protobuf::rt::uint32_size(1059, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.JDDKJPPCCOK != 0 {
            os.write_int64(5, self.JDDKJPPCCOK)?;
        }
        if self.ILIPNKLGCMB != ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE) {
            os.write_enum(15, ::protobuf::EnumOrUnknown::value(&self.ILIPNKLGCMB))?;
        }
        if let ::std::option::Option::Some(ref v) = self.CLAEMHMNNED {
            match v {
                &bohjmdplici::CLAEMHMNNED::EGKBAHCKPII(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1730, v, os)?;
                },
                &bohjmdplici::CLAEMHMNNED::FNGCHIIKIGN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1372, v, os)?;
                },
                &bohjmdplici::CLAEMHMNNED::DHPDHGHAEOP(v) => {
                    os.write_uint32(982, v)?;
                },
                &bohjmdplici::CLAEMHMNNED::DCMFEJJJFIA(v) => {
                    os.write_uint32(367, v)?;
                },
                &bohjmdplici::CLAEMHMNNED::BBLHFLGOCOJ(v) => {
                    os.write_uint32(1036, v)?;
                },
                &bohjmdplici::CLAEMHMNNED::BPGFFNCJMGD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(780, v, os)?;
                },
                &bohjmdplici::CLAEMHMNNED::DDMDPBEGKHC(v) => {
                    os.write_uint32(1059, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BOHJMDPLICI {
        BOHJMDPLICI::new()
    }

    fn clear(&mut self) {
        self.JDDKJPPCCOK = 0;
        self.ILIPNKLGCMB = ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE);
        self.CLAEMHMNNED = ::std::option::Option::None;
        self.CLAEMHMNNED = ::std::option::Option::None;
        self.CLAEMHMNNED = ::std::option::Option::None;
        self.CLAEMHMNNED = ::std::option::Option::None;
        self.CLAEMHMNNED = ::std::option::Option::None;
        self.CLAEMHMNNED = ::std::option::Option::None;
        self.CLAEMHMNNED = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BOHJMDPLICI {
        static instance: BOHJMDPLICI = BOHJMDPLICI {
            JDDKJPPCCOK: 0,
            ILIPNKLGCMB: ::protobuf::EnumOrUnknown::from_i32(0),
            CLAEMHMNNED: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BOHJMDPLICI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BOHJMDPLICI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BOHJMDPLICI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BOHJMDPLICI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BOHJMDPLICI`
pub mod bohjmdplici {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:BOHJMDPLICI.CLAEMHMNNED)
    pub enum CLAEMHMNNED {
        // @@protoc_insertion_point(oneof_field:BOHJMDPLICI.EGKBAHCKPII)
        EGKBAHCKPII(super::super::OJNAHKPKPCD::OJNAHKPKPCD),
        // @@protoc_insertion_point(oneof_field:BOHJMDPLICI.FNGCHIIKIGN)
        FNGCHIIKIGN(super::super::LACEKNKGBLD::LACEKNKGBLD),
        // @@protoc_insertion_point(oneof_field:BOHJMDPLICI.DHPDHGHAEOP)
        DHPDHGHAEOP(u32),
        // @@protoc_insertion_point(oneof_field:BOHJMDPLICI.DCMFEJJJFIA)
        DCMFEJJJFIA(u32),
        // @@protoc_insertion_point(oneof_field:BOHJMDPLICI.BBLHFLGOCOJ)
        BBLHFLGOCOJ(u32),
        // @@protoc_insertion_point(oneof_field:BOHJMDPLICI.BPGFFNCJMGD)
        BPGFFNCJMGD(super::super::KFFFLJHIFNA::KFFFLJHIFNA),
        // @@protoc_insertion_point(oneof_field:BOHJMDPLICI.DDMDPBEGKHC)
        DDMDPBEGKHC(u32),
    }

    impl ::protobuf::Oneof for CLAEMHMNNED {
    }

    impl ::protobuf::OneofFull for CLAEMHMNNED {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BOHJMDPLICI as ::protobuf::MessageFull>::descriptor().oneof_by_name("CLAEMHMNNED").unwrap()).clone()
        }
    }

    impl CLAEMHMNNED {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<CLAEMHMNNED>("CLAEMHMNNED")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BOHJMDPLICI.proto\x1a\x15DevelopmentType.proto\x1a\x11KFFFLJHIFNA.\
    proto\x1a\x11LACEKNKGBLD.proto\x1a\x11OJNAHKPKPCD.proto\"\x9f\x03\n\x0bB\
    OHJMDPLICI\x12\x20\n\x0bJDDKJPPCCOK\x18\x05\x20\x01(\x03R\x0bJDDKJPPCCOK\
    \x122\n\x0bILIPNKLGCMB\x18\x0f\x20\x01(\x0e2\x10.DevelopmentTypeR\x0bILI\
    PNKLGCMB\x121\n\x0bEGKBAHCKPII\x18\xc2\r\x20\x01(\x0b2\x0c.OJNAHKPKPCDH\
    \0R\x0bEGKBAHCKPII\x121\n\x0bFNGCHIIKIGN\x18\xdc\n\x20\x01(\x0b2\x0c.LAC\
    EKNKGBLDH\0R\x0bFNGCHIIKIGN\x12#\n\x0bDHPDHGHAEOP\x18\xd6\x07\x20\x01(\r\
    H\0R\x0bDHPDHGHAEOP\x12#\n\x0bDCMFEJJJFIA\x18\xef\x02\x20\x01(\rH\0R\x0b\
    DCMFEJJJFIA\x12#\n\x0bBBLHFLGOCOJ\x18\x8c\x08\x20\x01(\rH\0R\x0bBBLHFLGO\
    COJ\x121\n\x0bBPGFFNCJMGD\x18\x8c\x06\x20\x01(\x0b2\x0c.KFFFLJHIFNAH\0R\
    \x0bBPGFFNCJMGD\x12#\n\x0bDDMDPBEGKHC\x18\xa3\x08\x20\x01(\rH\0R\x0bDDMD\
    PBEGKHCB\r\n\x0bCLAEMHMNNEDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::DevelopmentType::file_descriptor().clone());
            deps.push(super::KFFFLJHIFNA::file_descriptor().clone());
            deps.push(super::LACEKNKGBLD::file_descriptor().clone());
            deps.push(super::OJNAHKPKPCD::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BOHJMDPLICI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
