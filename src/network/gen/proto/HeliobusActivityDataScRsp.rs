// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HeliobusActivityDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HeliobusActivityDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HeliobusActivityDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.FFLNPGHOJDD)
    pub FFLNPGHOJDD: ::protobuf::MessageField<super::NCIHLLAEJJK::NCIHLLAEJJK>,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.FMAJFICFMFO)
    pub FMAJFICFMFO: ::std::vec::Vec<super::HeliobusChallengeLineup::HeliobusChallengeLineup>,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.AIJHHHCOBFF)
    pub AIJHHHCOBFF: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.MGGDEINKDMH)
    pub MGGDEINKDMH: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.CBHOAPIBCJM)
    pub CBHOAPIBCJM: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.AHBEKNBEGDL)
    pub AHBEKNBEGDL: ::std::vec::Vec<super::JNAMGFCADDN::JNAMGFCADDN>,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.JGKJJKFBLCF)
    pub JGKJJKFBLCF: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.IBNHFLHJFEO)
    pub IBNHFLHJFEO: ::std::vec::Vec<super::PCMDGDLANFF::PCMDGDLANFF>,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.level)
    pub level: u32,
    // special fields
    // @@protoc_insertion_point(special_field:HeliobusActivityDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HeliobusActivityDataScRsp {
    fn default() -> &'a HeliobusActivityDataScRsp {
        <HeliobusActivityDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl HeliobusActivityDataScRsp {
    pub fn new() -> HeliobusActivityDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NCIHLLAEJJK::NCIHLLAEJJK>(
            "FFLNPGHOJDD",
            |m: &HeliobusActivityDataScRsp| { &m.FFLNPGHOJDD },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.FFLNPGHOJDD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FMAJFICFMFO",
            |m: &HeliobusActivityDataScRsp| { &m.FMAJFICFMFO },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.FMAJFICFMFO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AIJHHHCOBFF",
            |m: &HeliobusActivityDataScRsp| { &m.AIJHHHCOBFF },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.AIJHHHCOBFF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MGGDEINKDMH",
            |m: &HeliobusActivityDataScRsp| { &m.MGGDEINKDMH },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.MGGDEINKDMH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &HeliobusActivityDataScRsp| { &m.retcode },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CBHOAPIBCJM",
            |m: &HeliobusActivityDataScRsp| { &m.CBHOAPIBCJM },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.CBHOAPIBCJM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AHBEKNBEGDL",
            |m: &HeliobusActivityDataScRsp| { &m.AHBEKNBEGDL },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.AHBEKNBEGDL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JGKJJKFBLCF",
            |m: &HeliobusActivityDataScRsp| { &m.JGKJJKFBLCF },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.JGKJJKFBLCF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IBNHFLHJFEO",
            |m: &HeliobusActivityDataScRsp| { &m.IBNHFLHJFEO },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.IBNHFLHJFEO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &HeliobusActivityDataScRsp| { &m.level },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.level },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HeliobusActivityDataScRsp>(
            "HeliobusActivityDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HeliobusActivityDataScRsp {
    const NAME: &'static str = "HeliobusActivityDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FFLNPGHOJDD)?;
                },
                58 => {
                    self.FMAJFICFMFO.push(is.read_message()?);
                },
                40 => {
                    self.AIJHHHCOBFF = is.read_uint32()?;
                },
                64 => {
                    self.MGGDEINKDMH = is.read_uint32()?;
                },
                8 => {
                    self.retcode = is.read_uint32()?;
                },
                48 => {
                    self.CBHOAPIBCJM = is.read_uint32()?;
                },
                122 => {
                    self.AHBEKNBEGDL.push(is.read_message()?);
                },
                96 => {
                    self.JGKJJKFBLCF = is.read_uint32()?;
                },
                34 => {
                    self.IBNHFLHJFEO.push(is.read_message()?);
                },
                112 => {
                    self.level = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.FFLNPGHOJDD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.FMAJFICFMFO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.AIJHHHCOBFF != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.AIJHHHCOBFF);
        }
        if self.MGGDEINKDMH != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.MGGDEINKDMH);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.retcode);
        }
        if self.CBHOAPIBCJM != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.CBHOAPIBCJM);
        }
        for value in &self.AHBEKNBEGDL {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.JGKJJKFBLCF != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.JGKJJKFBLCF);
        }
        for value in &self.IBNHFLHJFEO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.level);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.FFLNPGHOJDD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        for v in &self.FMAJFICFMFO {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.AIJHHHCOBFF != 0 {
            os.write_uint32(5, self.AIJHHHCOBFF)?;
        }
        if self.MGGDEINKDMH != 0 {
            os.write_uint32(8, self.MGGDEINKDMH)?;
        }
        if self.retcode != 0 {
            os.write_uint32(1, self.retcode)?;
        }
        if self.CBHOAPIBCJM != 0 {
            os.write_uint32(6, self.CBHOAPIBCJM)?;
        }
        for v in &self.AHBEKNBEGDL {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if self.JGKJJKFBLCF != 0 {
            os.write_uint32(12, self.JGKJJKFBLCF)?;
        }
        for v in &self.IBNHFLHJFEO {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.level != 0 {
            os.write_uint32(14, self.level)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HeliobusActivityDataScRsp {
        HeliobusActivityDataScRsp::new()
    }

    fn clear(&mut self) {
        self.FFLNPGHOJDD.clear();
        self.FMAJFICFMFO.clear();
        self.AIJHHHCOBFF = 0;
        self.MGGDEINKDMH = 0;
        self.retcode = 0;
        self.CBHOAPIBCJM = 0;
        self.AHBEKNBEGDL.clear();
        self.JGKJJKFBLCF = 0;
        self.IBNHFLHJFEO.clear();
        self.level = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HeliobusActivityDataScRsp {
        static instance: HeliobusActivityDataScRsp = HeliobusActivityDataScRsp {
            FFLNPGHOJDD: ::protobuf::MessageField::none(),
            FMAJFICFMFO: ::std::vec::Vec::new(),
            AIJHHHCOBFF: 0,
            MGGDEINKDMH: 0,
            retcode: 0,
            CBHOAPIBCJM: 0,
            AHBEKNBEGDL: ::std::vec::Vec::new(),
            JGKJJKFBLCF: 0,
            IBNHFLHJFEO: ::std::vec::Vec::new(),
            level: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HeliobusActivityDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HeliobusActivityDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HeliobusActivityDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeliobusActivityDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fHeliobusActivityDataScRsp.proto\x1a\x1dHeliobusChallengeLineup.pro\
    to\x1a\x11JNAMGFCADDN.proto\x1a\x11NCIHLLAEJJK.proto\x1a\x11PCMDGDLANFF.\
    proto\"\x9f\x03\n\x19HeliobusActivityDataScRsp\x12.\n\x0bFFLNPGHOJDD\x18\
    \r\x20\x01(\x0b2\x0c.NCIHLLAEJJKR\x0bFFLNPGHOJDD\x12:\n\x0bFMAJFICFMFO\
    \x18\x07\x20\x03(\x0b2\x18.HeliobusChallengeLineupR\x0bFMAJFICFMFO\x12\
    \x20\n\x0bAIJHHHCOBFF\x18\x05\x20\x01(\rR\x0bAIJHHHCOBFF\x12\x20\n\x0bMG\
    GDEINKDMH\x18\x08\x20\x01(\rR\x0bMGGDEINKDMH\x12\x18\n\x07retcode\x18\
    \x01\x20\x01(\rR\x07retcode\x12\x20\n\x0bCBHOAPIBCJM\x18\x06\x20\x01(\rR\
    \x0bCBHOAPIBCJM\x12.\n\x0bAHBEKNBEGDL\x18\x0f\x20\x03(\x0b2\x0c.JNAMGFCA\
    DDNR\x0bAHBEKNBEGDL\x12\x20\n\x0bJGKJJKFBLCF\x18\x0c\x20\x01(\rR\x0bJGKJ\
    JKFBLCF\x12.\n\x0bIBNHFLHJFEO\x18\x04\x20\x03(\x0b2\x0c.PCMDGDLANFFR\x0b\
    IBNHFLHJFEO\x12\x14\n\x05level\x18\x0e\x20\x01(\rR\x05levelb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::HeliobusChallengeLineup::file_descriptor().clone());
            deps.push(super::JNAMGFCADDN::file_descriptor().clone());
            deps.push(super::NCIHLLAEJJK::file_descriptor().clone());
            deps.push(super::PCMDGDLANFF::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HeliobusActivityDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
