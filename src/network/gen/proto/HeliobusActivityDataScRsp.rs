// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HeliobusActivityDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HeliobusActivityDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HeliobusActivityDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.BKLHFMKEHPF)
    pub BKLHFMKEHPF: ::std::vec::Vec<super::HeliobusChallengeLineup::HeliobusChallengeLineup>,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.HMOEGPGDMPO)
    pub HMOEGPGDMPO: ::std::vec::Vec<super::NKDIAIDLGPP::NKDIAIDLGPP>,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.LMBPKEOBMHK)
    pub LMBPKEOBMHK: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.DLOCFNANKAI)
    pub DLOCFNANKAI: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.DHGIPOHDOPM)
    pub DHGIPOHDOPM: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.level)
    pub level: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.KMIOCEODNOM)
    pub KMIOCEODNOM: u32,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.ODDEPLIMDDD)
    pub ODDEPLIMDDD: ::protobuf::MessageField<super::NJONFDLNKCM::NJONFDLNKCM>,
    // @@protoc_insertion_point(field:HeliobusActivityDataScRsp.MCPEJLDGGGH)
    pub MCPEJLDGGGH: ::std::vec::Vec<super::FHHCIFJOCBP::FHHCIFJOCBP>,
    // special fields
    // @@protoc_insertion_point(special_field:HeliobusActivityDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HeliobusActivityDataScRsp {
    fn default() -> &'a HeliobusActivityDataScRsp {
        <HeliobusActivityDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl HeliobusActivityDataScRsp {
    pub fn new() -> HeliobusActivityDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BKLHFMKEHPF",
            |m: &HeliobusActivityDataScRsp| { &m.BKLHFMKEHPF },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.BKLHFMKEHPF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HMOEGPGDMPO",
            |m: &HeliobusActivityDataScRsp| { &m.HMOEGPGDMPO },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.HMOEGPGDMPO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &HeliobusActivityDataScRsp| { &m.retcode },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LMBPKEOBMHK",
            |m: &HeliobusActivityDataScRsp| { &m.LMBPKEOBMHK },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.LMBPKEOBMHK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DLOCFNANKAI",
            |m: &HeliobusActivityDataScRsp| { &m.DLOCFNANKAI },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.DLOCFNANKAI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DHGIPOHDOPM",
            |m: &HeliobusActivityDataScRsp| { &m.DHGIPOHDOPM },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.DHGIPOHDOPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &HeliobusActivityDataScRsp| { &m.level },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KMIOCEODNOM",
            |m: &HeliobusActivityDataScRsp| { &m.KMIOCEODNOM },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.KMIOCEODNOM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NJONFDLNKCM::NJONFDLNKCM>(
            "ODDEPLIMDDD",
            |m: &HeliobusActivityDataScRsp| { &m.ODDEPLIMDDD },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.ODDEPLIMDDD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MCPEJLDGGGH",
            |m: &HeliobusActivityDataScRsp| { &m.MCPEJLDGGGH },
            |m: &mut HeliobusActivityDataScRsp| { &mut m.MCPEJLDGGGH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HeliobusActivityDataScRsp>(
            "HeliobusActivityDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HeliobusActivityDataScRsp {
    const NAME: &'static str = "HeliobusActivityDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    self.BKLHFMKEHPF.push(is.read_message()?);
                },
                18 => {
                    self.HMOEGPGDMPO.push(is.read_message()?);
                },
                8 => {
                    self.retcode = is.read_uint32()?;
                },
                72 => {
                    self.LMBPKEOBMHK = is.read_uint32()?;
                },
                48 => {
                    self.DLOCFNANKAI = is.read_uint32()?;
                },
                80 => {
                    self.DHGIPOHDOPM = is.read_uint32()?;
                },
                40 => {
                    self.level = is.read_uint32()?;
                },
                64 => {
                    self.KMIOCEODNOM = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ODDEPLIMDDD)?;
                },
                122 => {
                    self.MCPEJLDGGGH.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.BKLHFMKEHPF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.HMOEGPGDMPO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.retcode);
        }
        if self.LMBPKEOBMHK != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.LMBPKEOBMHK);
        }
        if self.DLOCFNANKAI != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.DLOCFNANKAI);
        }
        if self.DHGIPOHDOPM != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.DHGIPOHDOPM);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.level);
        }
        if self.KMIOCEODNOM != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.KMIOCEODNOM);
        }
        if let Some(v) = self.ODDEPLIMDDD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.MCPEJLDGGGH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.BKLHFMKEHPF {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        for v in &self.HMOEGPGDMPO {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(1, self.retcode)?;
        }
        if self.LMBPKEOBMHK != 0 {
            os.write_uint32(9, self.LMBPKEOBMHK)?;
        }
        if self.DLOCFNANKAI != 0 {
            os.write_uint32(6, self.DLOCFNANKAI)?;
        }
        if self.DHGIPOHDOPM != 0 {
            os.write_uint32(10, self.DHGIPOHDOPM)?;
        }
        if self.level != 0 {
            os.write_uint32(5, self.level)?;
        }
        if self.KMIOCEODNOM != 0 {
            os.write_uint32(8, self.KMIOCEODNOM)?;
        }
        if let Some(v) = self.ODDEPLIMDDD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        for v in &self.MCPEJLDGGGH {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HeliobusActivityDataScRsp {
        HeliobusActivityDataScRsp::new()
    }

    fn clear(&mut self) {
        self.BKLHFMKEHPF.clear();
        self.HMOEGPGDMPO.clear();
        self.retcode = 0;
        self.LMBPKEOBMHK = 0;
        self.DLOCFNANKAI = 0;
        self.DHGIPOHDOPM = 0;
        self.level = 0;
        self.KMIOCEODNOM = 0;
        self.ODDEPLIMDDD.clear();
        self.MCPEJLDGGGH.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HeliobusActivityDataScRsp {
        static instance: HeliobusActivityDataScRsp = HeliobusActivityDataScRsp {
            BKLHFMKEHPF: ::std::vec::Vec::new(),
            HMOEGPGDMPO: ::std::vec::Vec::new(),
            retcode: 0,
            LMBPKEOBMHK: 0,
            DLOCFNANKAI: 0,
            DHGIPOHDOPM: 0,
            level: 0,
            KMIOCEODNOM: 0,
            ODDEPLIMDDD: ::protobuf::MessageField::none(),
            MCPEJLDGGGH: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HeliobusActivityDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HeliobusActivityDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HeliobusActivityDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeliobusActivityDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fHeliobusActivityDataScRsp.proto\x1a\x11FHHCIFJOCBP.proto\x1a\x1dHe\
    liobusChallengeLineup.proto\x1a\x11NJONFDLNKCM.proto\x1a\x11NKDIAIDLGPP.\
    proto\"\x9f\x03\n\x19HeliobusActivityDataScRsp\x12:\n\x0bBKLHFMKEHPF\x18\
    \x0e\x20\x03(\x0b2\x18.HeliobusChallengeLineupR\x0bBKLHFMKEHPF\x12.\n\
    \x0bHMOEGPGDMPO\x18\x02\x20\x03(\x0b2\x0c.NKDIAIDLGPPR\x0bHMOEGPGDMPO\
    \x12\x18\n\x07retcode\x18\x01\x20\x01(\rR\x07retcode\x12\x20\n\x0bLMBPKE\
    OBMHK\x18\t\x20\x01(\rR\x0bLMBPKEOBMHK\x12\x20\n\x0bDLOCFNANKAI\x18\x06\
    \x20\x01(\rR\x0bDLOCFNANKAI\x12\x20\n\x0bDHGIPOHDOPM\x18\n\x20\x01(\rR\
    \x0bDHGIPOHDOPM\x12\x14\n\x05level\x18\x05\x20\x01(\rR\x05level\x12\x20\
    \n\x0bKMIOCEODNOM\x18\x08\x20\x01(\rR\x0bKMIOCEODNOM\x12.\n\x0bODDEPLIMD\
    DD\x18\r\x20\x01(\x0b2\x0c.NJONFDLNKCMR\x0bODDEPLIMDDD\x12.\n\x0bMCPEJLD\
    GGGH\x18\x0f\x20\x03(\x0b2\x0c.FHHCIFJOCBPR\x0bMCPEJLDGGGHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::FHHCIFJOCBP::file_descriptor().clone());
            deps.push(super::HeliobusChallengeLineup::file_descriptor().clone());
            deps.push(super::NJONFDLNKCM::file_descriptor().clone());
            deps.push(super::NKDIAIDLGPP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HeliobusActivityDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
