// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ECEOEEEJIOC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ECEOEEEJIOC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ECEOEEEJIOC {
    // message oneof groups
    pub OAHCMPDEGGK: ::std::option::Option<eceoeeejioc::OAHCMPDEGGK>,
    // special fields
    // @@protoc_insertion_point(special_field:ECEOEEEJIOC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ECEOEEEJIOC {
    fn default() -> &'a ECEOEEEJIOC {
        <ECEOEEEJIOC as ::protobuf::Message>::default_instance()
    }
}

impl ECEOEEEJIOC {
    pub fn new() -> ECEOEEEJIOC {
        ::std::default::Default::default()
    }

    // .GOIBHEOAHNG LOFHHANCPBG = 1748;

    pub fn LOFHHANCPBG(&self) -> &super::GOIBHEOAHNG::GOIBHEOAHNG {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(ref v)) => v,
            _ => <super::GOIBHEOAHNG::GOIBHEOAHNG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LOFHHANCPBG(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_LOFHHANCPBG(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LOFHHANCPBG(&mut self, v: super::GOIBHEOAHNG::GOIBHEOAHNG) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LOFHHANCPBG(&mut self) -> &mut super::GOIBHEOAHNG::GOIBHEOAHNG {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(super::GOIBHEOAHNG::GOIBHEOAHNG::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LOFHHANCPBG(&mut self) -> super::GOIBHEOAHNG::GOIBHEOAHNG {
        if self.has_LOFHHANCPBG() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GOIBHEOAHNG::GOIBHEOAHNG::new()
        }
    }

    // .BFIHFFONJIH KIJLCJBJICP = 671;

    pub fn KIJLCJBJICP(&self) -> &super::BFIHFFONJIH::BFIHFFONJIH {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(ref v)) => v,
            _ => <super::BFIHFFONJIH::BFIHFFONJIH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KIJLCJBJICP(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_KIJLCJBJICP(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KIJLCJBJICP(&mut self, v: super::BFIHFFONJIH::BFIHFFONJIH) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KIJLCJBJICP(&mut self) -> &mut super::BFIHFFONJIH::BFIHFFONJIH {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(super::BFIHFFONJIH::BFIHFFONJIH::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KIJLCJBJICP(&mut self) -> super::BFIHFFONJIH::BFIHFFONJIH {
        if self.has_KIJLCJBJICP() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BFIHFFONJIH::BFIHFFONJIH::new()
        }
    }

    // .HHCFGIJPHLC JHJHDIHDJIM = 1489;

    pub fn JHJHDIHDJIM(&self) -> &super::HHCFGIJPHLC::HHCFGIJPHLC {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(ref v)) => v,
            _ => <super::HHCFGIJPHLC::HHCFGIJPHLC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JHJHDIHDJIM(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_JHJHDIHDJIM(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JHJHDIHDJIM(&mut self, v: super::HHCFGIJPHLC::HHCFGIJPHLC) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JHJHDIHDJIM(&mut self) -> &mut super::HHCFGIJPHLC::HHCFGIJPHLC {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(super::HHCFGIJPHLC::HHCFGIJPHLC::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JHJHDIHDJIM(&mut self) -> super::HHCFGIJPHLC::HHCFGIJPHLC {
        if self.has_JHJHDIHDJIM() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HHCFGIJPHLC::HHCFGIJPHLC::new()
        }
    }

    // .NKFHBMJAOBM JFBBLDGBEDH = 98;

    pub fn JFBBLDGBEDH(&self) -> &super::NKFHBMJAOBM::NKFHBMJAOBM {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(ref v)) => v,
            _ => <super::NKFHBMJAOBM::NKFHBMJAOBM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JFBBLDGBEDH(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_JFBBLDGBEDH(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JFBBLDGBEDH(&mut self, v: super::NKFHBMJAOBM::NKFHBMJAOBM) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JFBBLDGBEDH(&mut self) -> &mut super::NKFHBMJAOBM::NKFHBMJAOBM {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(super::NKFHBMJAOBM::NKFHBMJAOBM::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JFBBLDGBEDH(&mut self) -> super::NKFHBMJAOBM::NKFHBMJAOBM {
        if self.has_JFBBLDGBEDH() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NKFHBMJAOBM::NKFHBMJAOBM::new()
        }
    }

    // .IFDLBAFMEKG EBOJDHDENKA = 791;

    pub fn EBOJDHDENKA(&self) -> &super::IFDLBAFMEKG::IFDLBAFMEKG {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(ref v)) => v,
            _ => <super::IFDLBAFMEKG::IFDLBAFMEKG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EBOJDHDENKA(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_EBOJDHDENKA(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EBOJDHDENKA(&mut self, v: super::IFDLBAFMEKG::IFDLBAFMEKG) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EBOJDHDENKA(&mut self) -> &mut super::IFDLBAFMEKG::IFDLBAFMEKG {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(super::IFDLBAFMEKG::IFDLBAFMEKG::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EBOJDHDENKA(&mut self) -> super::IFDLBAFMEKG::IFDLBAFMEKG {
        if self.has_EBOJDHDENKA() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IFDLBAFMEKG::IFDLBAFMEKG::new()
        }
    }

    // .EIMDBGMFDOB BIIMCNKIEPD = 1938;

    pub fn BIIMCNKIEPD(&self) -> &super::EIMDBGMFDOB::EIMDBGMFDOB {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(ref v)) => v,
            _ => <super::EIMDBGMFDOB::EIMDBGMFDOB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BIIMCNKIEPD(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_BIIMCNKIEPD(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BIIMCNKIEPD(&mut self, v: super::EIMDBGMFDOB::EIMDBGMFDOB) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BIIMCNKIEPD(&mut self) -> &mut super::EIMDBGMFDOB::EIMDBGMFDOB {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(super::EIMDBGMFDOB::EIMDBGMFDOB::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BIIMCNKIEPD(&mut self) -> super::EIMDBGMFDOB::EIMDBGMFDOB {
        if self.has_BIIMCNKIEPD() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EIMDBGMFDOB::EIMDBGMFDOB::new()
        }
    }

    // .AICEBLJDHJL BFKEEKCOODN = 447;

    pub fn BFKEEKCOODN(&self) -> &super::AICEBLJDHJL::AICEBLJDHJL {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(ref v)) => v,
            _ => <super::AICEBLJDHJL::AICEBLJDHJL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BFKEEKCOODN(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_BFKEEKCOODN(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BFKEEKCOODN(&mut self, v: super::AICEBLJDHJL::AICEBLJDHJL) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BFKEEKCOODN(&mut self) -> &mut super::AICEBLJDHJL::AICEBLJDHJL {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(super::AICEBLJDHJL::AICEBLJDHJL::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BFKEEKCOODN(&mut self) -> super::AICEBLJDHJL::AICEBLJDHJL {
        if self.has_BFKEEKCOODN() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AICEBLJDHJL::AICEBLJDHJL::new()
        }
    }

    // .IGNFNKHNIEL PMNEMJCNFEJ = 520;

    pub fn PMNEMJCNFEJ(&self) -> &super::IGNFNKHNIEL::IGNFNKHNIEL {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(ref v)) => v,
            _ => <super::IGNFNKHNIEL::IGNFNKHNIEL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMNEMJCNFEJ(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_PMNEMJCNFEJ(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMNEMJCNFEJ(&mut self, v: super::IGNFNKHNIEL::IGNFNKHNIEL) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMNEMJCNFEJ(&mut self) -> &mut super::IGNFNKHNIEL::IGNFNKHNIEL {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(super::IGNFNKHNIEL::IGNFNKHNIEL::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMNEMJCNFEJ(&mut self) -> super::IGNFNKHNIEL::IGNFNKHNIEL {
        if self.has_PMNEMJCNFEJ() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IGNFNKHNIEL::IGNFNKHNIEL::new()
        }
    }

    // .BAEECFDDJCH MMEGPPCJFGG = 1407;

    pub fn MMEGPPCJFGG(&self) -> &super::BAEECFDDJCH::BAEECFDDJCH {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(ref v)) => v,
            _ => <super::BAEECFDDJCH::BAEECFDDJCH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MMEGPPCJFGG(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_MMEGPPCJFGG(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MMEGPPCJFGG(&mut self, v: super::BAEECFDDJCH::BAEECFDDJCH) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MMEGPPCJFGG(&mut self) -> &mut super::BAEECFDDJCH::BAEECFDDJCH {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(super::BAEECFDDJCH::BAEECFDDJCH::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MMEGPPCJFGG(&mut self) -> super::BAEECFDDJCH::BAEECFDDJCH {
        if self.has_MMEGPPCJFGG() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BAEECFDDJCH::BAEECFDDJCH::new()
        }
    }

    // .ACJOMKMLBOO MCEEKAJKCIG = 844;

    pub fn MCEEKAJKCIG(&self) -> &super::ACJOMKMLBOO::ACJOMKMLBOO {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(ref v)) => v,
            _ => <super::ACJOMKMLBOO::ACJOMKMLBOO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MCEEKAJKCIG(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_MCEEKAJKCIG(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MCEEKAJKCIG(&mut self, v: super::ACJOMKMLBOO::ACJOMKMLBOO) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MCEEKAJKCIG(&mut self) -> &mut super::ACJOMKMLBOO::ACJOMKMLBOO {
        if let ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(super::ACJOMKMLBOO::ACJOMKMLBOO::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MCEEKAJKCIG(&mut self) -> super::ACJOMKMLBOO::ACJOMKMLBOO {
        if self.has_MCEEKAJKCIG() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ACJOMKMLBOO::ACJOMKMLBOO::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GOIBHEOAHNG::GOIBHEOAHNG>(
            "LOFHHANCPBG",
            ECEOEEEJIOC::has_LOFHHANCPBG,
            ECEOEEEJIOC::LOFHHANCPBG,
            ECEOEEEJIOC::mut_LOFHHANCPBG,
            ECEOEEEJIOC::set_LOFHHANCPBG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BFIHFFONJIH::BFIHFFONJIH>(
            "KIJLCJBJICP",
            ECEOEEEJIOC::has_KIJLCJBJICP,
            ECEOEEEJIOC::KIJLCJBJICP,
            ECEOEEEJIOC::mut_KIJLCJBJICP,
            ECEOEEEJIOC::set_KIJLCJBJICP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HHCFGIJPHLC::HHCFGIJPHLC>(
            "JHJHDIHDJIM",
            ECEOEEEJIOC::has_JHJHDIHDJIM,
            ECEOEEEJIOC::JHJHDIHDJIM,
            ECEOEEEJIOC::mut_JHJHDIHDJIM,
            ECEOEEEJIOC::set_JHJHDIHDJIM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NKFHBMJAOBM::NKFHBMJAOBM>(
            "JFBBLDGBEDH",
            ECEOEEEJIOC::has_JFBBLDGBEDH,
            ECEOEEEJIOC::JFBBLDGBEDH,
            ECEOEEEJIOC::mut_JFBBLDGBEDH,
            ECEOEEEJIOC::set_JFBBLDGBEDH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IFDLBAFMEKG::IFDLBAFMEKG>(
            "EBOJDHDENKA",
            ECEOEEEJIOC::has_EBOJDHDENKA,
            ECEOEEEJIOC::EBOJDHDENKA,
            ECEOEEEJIOC::mut_EBOJDHDENKA,
            ECEOEEEJIOC::set_EBOJDHDENKA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EIMDBGMFDOB::EIMDBGMFDOB>(
            "BIIMCNKIEPD",
            ECEOEEEJIOC::has_BIIMCNKIEPD,
            ECEOEEEJIOC::BIIMCNKIEPD,
            ECEOEEEJIOC::mut_BIIMCNKIEPD,
            ECEOEEEJIOC::set_BIIMCNKIEPD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AICEBLJDHJL::AICEBLJDHJL>(
            "BFKEEKCOODN",
            ECEOEEEJIOC::has_BFKEEKCOODN,
            ECEOEEEJIOC::BFKEEKCOODN,
            ECEOEEEJIOC::mut_BFKEEKCOODN,
            ECEOEEEJIOC::set_BFKEEKCOODN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IGNFNKHNIEL::IGNFNKHNIEL>(
            "PMNEMJCNFEJ",
            ECEOEEEJIOC::has_PMNEMJCNFEJ,
            ECEOEEEJIOC::PMNEMJCNFEJ,
            ECEOEEEJIOC::mut_PMNEMJCNFEJ,
            ECEOEEEJIOC::set_PMNEMJCNFEJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BAEECFDDJCH::BAEECFDDJCH>(
            "MMEGPPCJFGG",
            ECEOEEEJIOC::has_MMEGPPCJFGG,
            ECEOEEEJIOC::MMEGPPCJFGG,
            ECEOEEEJIOC::mut_MMEGPPCJFGG,
            ECEOEEEJIOC::set_MMEGPPCJFGG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ACJOMKMLBOO::ACJOMKMLBOO>(
            "MCEEKAJKCIG",
            ECEOEEEJIOC::has_MCEEKAJKCIG,
            ECEOEEEJIOC::MCEEKAJKCIG,
            ECEOEEEJIOC::mut_MCEEKAJKCIG,
            ECEOEEEJIOC::set_MCEEKAJKCIG,
        ));
        oneofs.push(eceoeeejioc::OAHCMPDEGGK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ECEOEEEJIOC>(
            "ECEOEEEJIOC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ECEOEEEJIOC {
    const NAME: &'static str = "ECEOEEEJIOC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13986 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(is.read_message()?));
                },
                5370 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(is.read_message()?));
                },
                11914 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(is.read_message()?));
                },
                786 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(is.read_message()?));
                },
                6330 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(is.read_message()?));
                },
                15506 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(is.read_message()?));
                },
                3578 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(is.read_message()?));
                },
                4162 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(is.read_message()?));
                },
                11258 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(is.read_message()?));
                },
                6754 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.OAHCMPDEGGK {
            match v {
                &eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.OAHCMPDEGGK {
            match v {
                &eceoeeejioc::OAHCMPDEGGK::LOFHHANCPBG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1748, v, os)?;
                },
                &eceoeeejioc::OAHCMPDEGGK::KIJLCJBJICP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(671, v, os)?;
                },
                &eceoeeejioc::OAHCMPDEGGK::JHJHDIHDJIM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1489, v, os)?;
                },
                &eceoeeejioc::OAHCMPDEGGK::JFBBLDGBEDH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(98, v, os)?;
                },
                &eceoeeejioc::OAHCMPDEGGK::EBOJDHDENKA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(791, v, os)?;
                },
                &eceoeeejioc::OAHCMPDEGGK::BIIMCNKIEPD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1938, v, os)?;
                },
                &eceoeeejioc::OAHCMPDEGGK::BFKEEKCOODN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(447, v, os)?;
                },
                &eceoeeejioc::OAHCMPDEGGK::PMNEMJCNFEJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(520, v, os)?;
                },
                &eceoeeejioc::OAHCMPDEGGK::MMEGPPCJFGG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1407, v, os)?;
                },
                &eceoeeejioc::OAHCMPDEGGK::MCEEKAJKCIG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(844, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ECEOEEEJIOC {
        ECEOEEEJIOC::new()
    }

    fn clear(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ECEOEEEJIOC {
        static instance: ECEOEEEJIOC = ECEOEEEJIOC {
            OAHCMPDEGGK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ECEOEEEJIOC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ECEOEEEJIOC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ECEOEEEJIOC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ECEOEEEJIOC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ECEOEEEJIOC`
pub mod eceoeeejioc {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ECEOEEEJIOC.OAHCMPDEGGK)
    pub enum OAHCMPDEGGK {
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.LOFHHANCPBG)
        LOFHHANCPBG(super::super::GOIBHEOAHNG::GOIBHEOAHNG),
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.KIJLCJBJICP)
        KIJLCJBJICP(super::super::BFIHFFONJIH::BFIHFFONJIH),
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.JHJHDIHDJIM)
        JHJHDIHDJIM(super::super::HHCFGIJPHLC::HHCFGIJPHLC),
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.JFBBLDGBEDH)
        JFBBLDGBEDH(super::super::NKFHBMJAOBM::NKFHBMJAOBM),
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.EBOJDHDENKA)
        EBOJDHDENKA(super::super::IFDLBAFMEKG::IFDLBAFMEKG),
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.BIIMCNKIEPD)
        BIIMCNKIEPD(super::super::EIMDBGMFDOB::EIMDBGMFDOB),
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.BFKEEKCOODN)
        BFKEEKCOODN(super::super::AICEBLJDHJL::AICEBLJDHJL),
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.PMNEMJCNFEJ)
        PMNEMJCNFEJ(super::super::IGNFNKHNIEL::IGNFNKHNIEL),
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.MMEGPPCJFGG)
        MMEGPPCJFGG(super::super::BAEECFDDJCH::BAEECFDDJCH),
        // @@protoc_insertion_point(oneof_field:ECEOEEEJIOC.MCEEKAJKCIG)
        MCEEKAJKCIG(super::super::ACJOMKMLBOO::ACJOMKMLBOO),
    }

    impl ::protobuf::Oneof for OAHCMPDEGGK {
    }

    impl ::protobuf::OneofFull for OAHCMPDEGGK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ECEOEEEJIOC as ::protobuf::MessageFull>::descriptor().oneof_by_name("OAHCMPDEGGK").unwrap()).clone()
        }
    }

    impl OAHCMPDEGGK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<OAHCMPDEGGK>("OAHCMPDEGGK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ECEOEEEJIOC.proto\x1a\x11ACJOMKMLBOO.proto\x1a\x11AICEBLJDHJL.prot\
    o\x1a\x11BAEECFDDJCH.proto\x1a\x11BFIHFFONJIH.proto\x1a\x11EIMDBGMFDOB.p\
    roto\x1a\x11GOIBHEOAHNG.proto\x1a\x11HHCFGIJPHLC.proto\x1a\x11IFDLBAFMEK\
    G.proto\x1a\x11IGNFNKHNIEL.proto\x1a\x11NKFHBMJAOBM.proto\"\x99\x04\n\
    \x0bECEOEEEJIOC\x121\n\x0bLOFHHANCPBG\x18\xd4\r\x20\x01(\x0b2\x0c.GOIBHE\
    OAHNGH\0R\x0bLOFHHANCPBG\x121\n\x0bKIJLCJBJICP\x18\x9f\x05\x20\x01(\x0b2\
    \x0c.BFIHFFONJIHH\0R\x0bKIJLCJBJICP\x121\n\x0bJHJHDIHDJIM\x18\xd1\x0b\
    \x20\x01(\x0b2\x0c.HHCFGIJPHLCH\0R\x0bJHJHDIHDJIM\x120\n\x0bJFBBLDGBEDH\
    \x18b\x20\x01(\x0b2\x0c.NKFHBMJAOBMH\0R\x0bJFBBLDGBEDH\x121\n\x0bEBOJDHD\
    ENKA\x18\x97\x06\x20\x01(\x0b2\x0c.IFDLBAFMEKGH\0R\x0bEBOJDHDENKA\x121\n\
    \x0bBIIMCNKIEPD\x18\x92\x0f\x20\x01(\x0b2\x0c.EIMDBGMFDOBH\0R\x0bBIIMCNK\
    IEPD\x121\n\x0bBFKEEKCOODN\x18\xbf\x03\x20\x01(\x0b2\x0c.AICEBLJDHJLH\0R\
    \x0bBFKEEKCOODN\x121\n\x0bPMNEMJCNFEJ\x18\x88\x04\x20\x01(\x0b2\x0c.IGNF\
    NKHNIELH\0R\x0bPMNEMJCNFEJ\x121\n\x0bMMEGPPCJFGG\x18\xff\n\x20\x01(\x0b2\
    \x0c.BAEECFDDJCHH\0R\x0bMMEGPPCJFGG\x121\n\x0bMCEEKAJKCIG\x18\xcc\x06\
    \x20\x01(\x0b2\x0c.ACJOMKMLBOOH\0R\x0bMCEEKAJKCIGB\r\n\x0bOAHCMPDEGGKb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::ACJOMKMLBOO::file_descriptor().clone());
            deps.push(super::AICEBLJDHJL::file_descriptor().clone());
            deps.push(super::BAEECFDDJCH::file_descriptor().clone());
            deps.push(super::BFIHFFONJIH::file_descriptor().clone());
            deps.push(super::EIMDBGMFDOB::file_descriptor().clone());
            deps.push(super::GOIBHEOAHNG::file_descriptor().clone());
            deps.push(super::HHCFGIJPHLC::file_descriptor().clone());
            deps.push(super::IFDLBAFMEKG::file_descriptor().clone());
            deps.push(super::IGNFNKHNIEL::file_descriptor().clone());
            deps.push(super::NKFHBMJAOBM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ECEOEEEJIOC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
