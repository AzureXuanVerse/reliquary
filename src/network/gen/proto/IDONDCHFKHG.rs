// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `IDONDCHFKHG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:IDONDCHFKHG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IDONDCHFKHG {
    // message oneof groups
    pub OOLLKBJMPJF: ::std::option::Option<idondchfkhg::OOLLKBJMPJF>,
    // special fields
    // @@protoc_insertion_point(special_field:IDONDCHFKHG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IDONDCHFKHG {
    fn default() -> &'a IDONDCHFKHG {
        <IDONDCHFKHG as ::protobuf::Message>::default_instance()
    }
}

impl IDONDCHFKHG {
    pub fn new() -> IDONDCHFKHG {
        ::std::default::Default::default()
    }

    // .EAAMMPJFKIB OBNMBPEKKIN = 6;

    pub fn OBNMBPEKKIN(&self) -> &super::EAAMMPJFKIB::EAAMMPJFKIB {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(ref v)) => v,
            _ => <super::EAAMMPJFKIB::EAAMMPJFKIB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OBNMBPEKKIN(&mut self) {
        self.OOLLKBJMPJF = ::std::option::Option::None;
    }

    pub fn has_OBNMBPEKKIN(&self) -> bool {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OBNMBPEKKIN(&mut self, v: super::EAAMMPJFKIB::EAAMMPJFKIB) {
        self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OBNMBPEKKIN(&mut self) -> &mut super::EAAMMPJFKIB::EAAMMPJFKIB {
        if let ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(_)) = self.OOLLKBJMPJF {
        } else {
            self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(super::EAAMMPJFKIB::EAAMMPJFKIB::new()));
        }
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OBNMBPEKKIN(&mut self) -> super::EAAMMPJFKIB::EAAMMPJFKIB {
        if self.has_OBNMBPEKKIN() {
            match self.OOLLKBJMPJF.take() {
                ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EAAMMPJFKIB::EAAMMPJFKIB::new()
        }
    }

    // .GFMELEMCJNA JMELHEKBPBL = 15;

    pub fn JMELHEKBPBL(&self) -> &super::GFMELEMCJNA::GFMELEMCJNA {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(ref v)) => v,
            _ => <super::GFMELEMCJNA::GFMELEMCJNA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JMELHEKBPBL(&mut self) {
        self.OOLLKBJMPJF = ::std::option::Option::None;
    }

    pub fn has_JMELHEKBPBL(&self) -> bool {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JMELHEKBPBL(&mut self, v: super::GFMELEMCJNA::GFMELEMCJNA) {
        self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JMELHEKBPBL(&mut self) -> &mut super::GFMELEMCJNA::GFMELEMCJNA {
        if let ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(_)) = self.OOLLKBJMPJF {
        } else {
            self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(super::GFMELEMCJNA::GFMELEMCJNA::new()));
        }
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JMELHEKBPBL(&mut self) -> super::GFMELEMCJNA::GFMELEMCJNA {
        if self.has_JMELHEKBPBL() {
            match self.OOLLKBJMPJF.take() {
                ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GFMELEMCJNA::GFMELEMCJNA::new()
        }
    }

    // .MJJAIIIDPPD GJFHLPNAJEE = 10;

    pub fn GJFHLPNAJEE(&self) -> &super::MJJAIIIDPPD::MJJAIIIDPPD {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(ref v)) => v,
            _ => <super::MJJAIIIDPPD::MJJAIIIDPPD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GJFHLPNAJEE(&mut self) {
        self.OOLLKBJMPJF = ::std::option::Option::None;
    }

    pub fn has_GJFHLPNAJEE(&self) -> bool {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GJFHLPNAJEE(&mut self, v: super::MJJAIIIDPPD::MJJAIIIDPPD) {
        self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GJFHLPNAJEE(&mut self) -> &mut super::MJJAIIIDPPD::MJJAIIIDPPD {
        if let ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(_)) = self.OOLLKBJMPJF {
        } else {
            self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(super::MJJAIIIDPPD::MJJAIIIDPPD::new()));
        }
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GJFHLPNAJEE(&mut self) -> super::MJJAIIIDPPD::MJJAIIIDPPD {
        if self.has_GJFHLPNAJEE() {
            match self.OOLLKBJMPJF.take() {
                ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MJJAIIIDPPD::MJJAIIIDPPD::new()
        }
    }

    // .DLIJGIEGJKP IJOPANKCEKJ = 2;

    pub fn IJOPANKCEKJ(&self) -> &super::DLIJGIEGJKP::DLIJGIEGJKP {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(ref v)) => v,
            _ => <super::DLIJGIEGJKP::DLIJGIEGJKP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IJOPANKCEKJ(&mut self) {
        self.OOLLKBJMPJF = ::std::option::Option::None;
    }

    pub fn has_IJOPANKCEKJ(&self) -> bool {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IJOPANKCEKJ(&mut self, v: super::DLIJGIEGJKP::DLIJGIEGJKP) {
        self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IJOPANKCEKJ(&mut self) -> &mut super::DLIJGIEGJKP::DLIJGIEGJKP {
        if let ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(_)) = self.OOLLKBJMPJF {
        } else {
            self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(super::DLIJGIEGJKP::DLIJGIEGJKP::new()));
        }
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IJOPANKCEKJ(&mut self) -> super::DLIJGIEGJKP::DLIJGIEGJKP {
        if self.has_IJOPANKCEKJ() {
            match self.OOLLKBJMPJF.take() {
                ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DLIJGIEGJKP::DLIJGIEGJKP::new()
        }
    }

    // .NMJNDPHGIOF MMOHLLKALAK = 9;

    pub fn MMOHLLKALAK(&self) -> &super::NMJNDPHGIOF::NMJNDPHGIOF {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(ref v)) => v,
            _ => <super::NMJNDPHGIOF::NMJNDPHGIOF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MMOHLLKALAK(&mut self) {
        self.OOLLKBJMPJF = ::std::option::Option::None;
    }

    pub fn has_MMOHLLKALAK(&self) -> bool {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MMOHLLKALAK(&mut self, v: super::NMJNDPHGIOF::NMJNDPHGIOF) {
        self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MMOHLLKALAK(&mut self) -> &mut super::NMJNDPHGIOF::NMJNDPHGIOF {
        if let ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(_)) = self.OOLLKBJMPJF {
        } else {
            self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(super::NMJNDPHGIOF::NMJNDPHGIOF::new()));
        }
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MMOHLLKALAK(&mut self) -> super::NMJNDPHGIOF::NMJNDPHGIOF {
        if self.has_MMOHLLKALAK() {
            match self.OOLLKBJMPJF.take() {
                ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NMJNDPHGIOF::NMJNDPHGIOF::new()
        }
    }

    // .OMJCICFMBEH LNPHKAFMEFM = 5;

    pub fn LNPHKAFMEFM(&self) -> &super::OMJCICFMBEH::OMJCICFMBEH {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(ref v)) => v,
            _ => <super::OMJCICFMBEH::OMJCICFMBEH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LNPHKAFMEFM(&mut self) {
        self.OOLLKBJMPJF = ::std::option::Option::None;
    }

    pub fn has_LNPHKAFMEFM(&self) -> bool {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LNPHKAFMEFM(&mut self, v: super::OMJCICFMBEH::OMJCICFMBEH) {
        self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LNPHKAFMEFM(&mut self) -> &mut super::OMJCICFMBEH::OMJCICFMBEH {
        if let ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(_)) = self.OOLLKBJMPJF {
        } else {
            self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(super::OMJCICFMBEH::OMJCICFMBEH::new()));
        }
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LNPHKAFMEFM(&mut self) -> super::OMJCICFMBEH::OMJCICFMBEH {
        if self.has_LNPHKAFMEFM() {
            match self.OOLLKBJMPJF.take() {
                ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMJCICFMBEH::OMJCICFMBEH::new()
        }
    }

    // .FANHHMLOGPI NGOMJKIOAKC = 4;

    pub fn NGOMJKIOAKC(&self) -> &super::FANHHMLOGPI::FANHHMLOGPI {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(ref v)) => v,
            _ => <super::FANHHMLOGPI::FANHHMLOGPI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NGOMJKIOAKC(&mut self) {
        self.OOLLKBJMPJF = ::std::option::Option::None;
    }

    pub fn has_NGOMJKIOAKC(&self) -> bool {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NGOMJKIOAKC(&mut self, v: super::FANHHMLOGPI::FANHHMLOGPI) {
        self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NGOMJKIOAKC(&mut self) -> &mut super::FANHHMLOGPI::FANHHMLOGPI {
        if let ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(_)) = self.OOLLKBJMPJF {
        } else {
            self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(super::FANHHMLOGPI::FANHHMLOGPI::new()));
        }
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NGOMJKIOAKC(&mut self) -> super::FANHHMLOGPI::FANHHMLOGPI {
        if self.has_NGOMJKIOAKC() {
            match self.OOLLKBJMPJF.take() {
                ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FANHHMLOGPI::FANHHMLOGPI::new()
        }
    }

    // .BFEJLAJIPNG EELBEPMNPGI = 14;

    pub fn EELBEPMNPGI(&self) -> &super::BFEJLAJIPNG::BFEJLAJIPNG {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(ref v)) => v,
            _ => <super::BFEJLAJIPNG::BFEJLAJIPNG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EELBEPMNPGI(&mut self) {
        self.OOLLKBJMPJF = ::std::option::Option::None;
    }

    pub fn has_EELBEPMNPGI(&self) -> bool {
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EELBEPMNPGI(&mut self, v: super::BFEJLAJIPNG::BFEJLAJIPNG) {
        self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EELBEPMNPGI(&mut self) -> &mut super::BFEJLAJIPNG::BFEJLAJIPNG {
        if let ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(_)) = self.OOLLKBJMPJF {
        } else {
            self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(super::BFEJLAJIPNG::BFEJLAJIPNG::new()));
        }
        match self.OOLLKBJMPJF {
            ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EELBEPMNPGI(&mut self) -> super::BFEJLAJIPNG::BFEJLAJIPNG {
        if self.has_EELBEPMNPGI() {
            match self.OOLLKBJMPJF.take() {
                ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BFEJLAJIPNG::BFEJLAJIPNG::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EAAMMPJFKIB::EAAMMPJFKIB>(
            "OBNMBPEKKIN",
            IDONDCHFKHG::has_OBNMBPEKKIN,
            IDONDCHFKHG::OBNMBPEKKIN,
            IDONDCHFKHG::mut_OBNMBPEKKIN,
            IDONDCHFKHG::set_OBNMBPEKKIN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GFMELEMCJNA::GFMELEMCJNA>(
            "JMELHEKBPBL",
            IDONDCHFKHG::has_JMELHEKBPBL,
            IDONDCHFKHG::JMELHEKBPBL,
            IDONDCHFKHG::mut_JMELHEKBPBL,
            IDONDCHFKHG::set_JMELHEKBPBL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MJJAIIIDPPD::MJJAIIIDPPD>(
            "GJFHLPNAJEE",
            IDONDCHFKHG::has_GJFHLPNAJEE,
            IDONDCHFKHG::GJFHLPNAJEE,
            IDONDCHFKHG::mut_GJFHLPNAJEE,
            IDONDCHFKHG::set_GJFHLPNAJEE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DLIJGIEGJKP::DLIJGIEGJKP>(
            "IJOPANKCEKJ",
            IDONDCHFKHG::has_IJOPANKCEKJ,
            IDONDCHFKHG::IJOPANKCEKJ,
            IDONDCHFKHG::mut_IJOPANKCEKJ,
            IDONDCHFKHG::set_IJOPANKCEKJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NMJNDPHGIOF::NMJNDPHGIOF>(
            "MMOHLLKALAK",
            IDONDCHFKHG::has_MMOHLLKALAK,
            IDONDCHFKHG::MMOHLLKALAK,
            IDONDCHFKHG::mut_MMOHLLKALAK,
            IDONDCHFKHG::set_MMOHLLKALAK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMJCICFMBEH::OMJCICFMBEH>(
            "LNPHKAFMEFM",
            IDONDCHFKHG::has_LNPHKAFMEFM,
            IDONDCHFKHG::LNPHKAFMEFM,
            IDONDCHFKHG::mut_LNPHKAFMEFM,
            IDONDCHFKHG::set_LNPHKAFMEFM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FANHHMLOGPI::FANHHMLOGPI>(
            "NGOMJKIOAKC",
            IDONDCHFKHG::has_NGOMJKIOAKC,
            IDONDCHFKHG::NGOMJKIOAKC,
            IDONDCHFKHG::mut_NGOMJKIOAKC,
            IDONDCHFKHG::set_NGOMJKIOAKC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BFEJLAJIPNG::BFEJLAJIPNG>(
            "EELBEPMNPGI",
            IDONDCHFKHG::has_EELBEPMNPGI,
            IDONDCHFKHG::EELBEPMNPGI,
            IDONDCHFKHG::mut_EELBEPMNPGI,
            IDONDCHFKHG::set_EELBEPMNPGI,
        ));
        oneofs.push(idondchfkhg::OOLLKBJMPJF::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IDONDCHFKHG>(
            "IDONDCHFKHG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IDONDCHFKHG {
    const NAME: &'static str = "IDONDCHFKHG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(is.read_message()?));
                },
                122 => {
                    self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(is.read_message()?));
                },
                82 => {
                    self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(is.read_message()?));
                },
                18 => {
                    self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(is.read_message()?));
                },
                74 => {
                    self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(is.read_message()?));
                },
                42 => {
                    self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(is.read_message()?));
                },
                34 => {
                    self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(is.read_message()?));
                },
                114 => {
                    self.OOLLKBJMPJF = ::std::option::Option::Some(idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.OOLLKBJMPJF {
            match v {
                &idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.OOLLKBJMPJF {
            match v {
                &idondchfkhg::OOLLKBJMPJF::OBNMBPEKKIN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &idondchfkhg::OOLLKBJMPJF::JMELHEKBPBL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &idondchfkhg::OOLLKBJMPJF::GJFHLPNAJEE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &idondchfkhg::OOLLKBJMPJF::IJOPANKCEKJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &idondchfkhg::OOLLKBJMPJF::MMOHLLKALAK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &idondchfkhg::OOLLKBJMPJF::LNPHKAFMEFM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &idondchfkhg::OOLLKBJMPJF::NGOMJKIOAKC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &idondchfkhg::OOLLKBJMPJF::EELBEPMNPGI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IDONDCHFKHG {
        IDONDCHFKHG::new()
    }

    fn clear(&mut self) {
        self.OOLLKBJMPJF = ::std::option::Option::None;
        self.OOLLKBJMPJF = ::std::option::Option::None;
        self.OOLLKBJMPJF = ::std::option::Option::None;
        self.OOLLKBJMPJF = ::std::option::Option::None;
        self.OOLLKBJMPJF = ::std::option::Option::None;
        self.OOLLKBJMPJF = ::std::option::Option::None;
        self.OOLLKBJMPJF = ::std::option::Option::None;
        self.OOLLKBJMPJF = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IDONDCHFKHG {
        static instance: IDONDCHFKHG = IDONDCHFKHG {
            OOLLKBJMPJF: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IDONDCHFKHG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IDONDCHFKHG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IDONDCHFKHG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IDONDCHFKHG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `IDONDCHFKHG`
pub mod idondchfkhg {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:IDONDCHFKHG.OOLLKBJMPJF)
    pub enum OOLLKBJMPJF {
        // @@protoc_insertion_point(oneof_field:IDONDCHFKHG.OBNMBPEKKIN)
        OBNMBPEKKIN(super::super::EAAMMPJFKIB::EAAMMPJFKIB),
        // @@protoc_insertion_point(oneof_field:IDONDCHFKHG.JMELHEKBPBL)
        JMELHEKBPBL(super::super::GFMELEMCJNA::GFMELEMCJNA),
        // @@protoc_insertion_point(oneof_field:IDONDCHFKHG.GJFHLPNAJEE)
        GJFHLPNAJEE(super::super::MJJAIIIDPPD::MJJAIIIDPPD),
        // @@protoc_insertion_point(oneof_field:IDONDCHFKHG.IJOPANKCEKJ)
        IJOPANKCEKJ(super::super::DLIJGIEGJKP::DLIJGIEGJKP),
        // @@protoc_insertion_point(oneof_field:IDONDCHFKHG.MMOHLLKALAK)
        MMOHLLKALAK(super::super::NMJNDPHGIOF::NMJNDPHGIOF),
        // @@protoc_insertion_point(oneof_field:IDONDCHFKHG.LNPHKAFMEFM)
        LNPHKAFMEFM(super::super::OMJCICFMBEH::OMJCICFMBEH),
        // @@protoc_insertion_point(oneof_field:IDONDCHFKHG.NGOMJKIOAKC)
        NGOMJKIOAKC(super::super::FANHHMLOGPI::FANHHMLOGPI),
        // @@protoc_insertion_point(oneof_field:IDONDCHFKHG.EELBEPMNPGI)
        EELBEPMNPGI(super::super::BFEJLAJIPNG::BFEJLAJIPNG),
    }

    impl ::protobuf::Oneof for OOLLKBJMPJF {
    }

    impl ::protobuf::OneofFull for OOLLKBJMPJF {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::IDONDCHFKHG as ::protobuf::MessageFull>::descriptor().oneof_by_name("OOLLKBJMPJF").unwrap()).clone()
        }
    }

    impl OOLLKBJMPJF {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<OOLLKBJMPJF>("OOLLKBJMPJF")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11IDONDCHFKHG.proto\x1a\x11BFEJLAJIPNG.proto\x1a\x11DLIJGIEGJKP.prot\
    o\x1a\x11EAAMMPJFKIB.proto\x1a\x11FANHHMLOGPI.proto\x1a\x11GFMELEMCJNA.p\
    roto\x1a\x11MJJAIIIDPPD.proto\x1a\x11NMJNDPHGIOF.proto\x1a\x11OMJCICFMBE\
    H.proto\"\xac\x03\n\x0bIDONDCHFKHG\x120\n\x0bOBNMBPEKKIN\x18\x06\x20\x01\
    (\x0b2\x0c.EAAMMPJFKIBH\0R\x0bOBNMBPEKKIN\x120\n\x0bJMELHEKBPBL\x18\x0f\
    \x20\x01(\x0b2\x0c.GFMELEMCJNAH\0R\x0bJMELHEKBPBL\x120\n\x0bGJFHLPNAJEE\
    \x18\n\x20\x01(\x0b2\x0c.MJJAIIIDPPDH\0R\x0bGJFHLPNAJEE\x120\n\x0bIJOPAN\
    KCEKJ\x18\x02\x20\x01(\x0b2\x0c.DLIJGIEGJKPH\0R\x0bIJOPANKCEKJ\x120\n\
    \x0bMMOHLLKALAK\x18\t\x20\x01(\x0b2\x0c.NMJNDPHGIOFH\0R\x0bMMOHLLKALAK\
    \x120\n\x0bLNPHKAFMEFM\x18\x05\x20\x01(\x0b2\x0c.OMJCICFMBEHH\0R\x0bLNPH\
    KAFMEFM\x120\n\x0bNGOMJKIOAKC\x18\x04\x20\x01(\x0b2\x0c.FANHHMLOGPIH\0R\
    \x0bNGOMJKIOAKC\x120\n\x0bEELBEPMNPGI\x18\x0e\x20\x01(\x0b2\x0c.BFEJLAJI\
    PNGH\0R\x0bEELBEPMNPGIB\r\n\x0bOOLLKBJMPJFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::BFEJLAJIPNG::file_descriptor().clone());
            deps.push(super::DLIJGIEGJKP::file_descriptor().clone());
            deps.push(super::EAAMMPJFKIB::file_descriptor().clone());
            deps.push(super::FANHHMLOGPI::file_descriptor().clone());
            deps.push(super::GFMELEMCJNA::file_descriptor().clone());
            deps.push(super::MJJAIIIDPPD::file_descriptor().clone());
            deps.push(super::NMJNDPHGIOF::file_descriptor().clone());
            deps.push(super::OMJCICFMBEH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(IDONDCHFKHG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
