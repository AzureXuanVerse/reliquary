// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OFILKJCLEGI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OFILKJCLEGI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OFILKJCLEGI {
    // message fields
    // @@protoc_insertion_point(field:OFILKJCLEGI.ENDJGMLKPBP)
    pub ENDJGMLKPBP: u32,
    // @@protoc_insertion_point(field:OFILKJCLEGI.DBADLNFOPAO)
    pub DBADLNFOPAO: u64,
    // @@protoc_insertion_point(field:OFILKJCLEGI.ACJCPHIFMLN)
    pub ACJCPHIFMLN: u32,
    // @@protoc_insertion_point(field:OFILKJCLEGI.NLIBKABFGCC)
    pub NLIBKABFGCC: u32,
    // @@protoc_insertion_point(field:OFILKJCLEGI.NLEAIJHAPAP)
    pub NLEAIJHAPAP: bool,
    // @@protoc_insertion_point(field:OFILKJCLEGI.IGHLABGGIJE)
    pub IGHLABGGIJE: u32,
    // @@protoc_insertion_point(field:OFILKJCLEGI.rank)
    pub rank: u32,
    // @@protoc_insertion_point(field:OFILKJCLEGI.EKLDPALNLDC)
    pub EKLDPALNLDC: u64,
    // @@protoc_insertion_point(field:OFILKJCLEGI.JBLMGNPMADM)
    pub JBLMGNPMADM: u32,
    // @@protoc_insertion_point(field:OFILKJCLEGI.CBOIIACBAKF)
    pub CBOIIACBAKF: u32,
    // @@protoc_insertion_point(field:OFILKJCLEGI.PKFEOCAGECF)
    pub PKFEOCAGECF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OFILKJCLEGI.DJNMHMPKKKB)
    pub DJNMHMPKKKB: u32,
    // special fields
    // @@protoc_insertion_point(special_field:OFILKJCLEGI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OFILKJCLEGI {
    fn default() -> &'a OFILKJCLEGI {
        <OFILKJCLEGI as ::protobuf::Message>::default_instance()
    }
}

impl OFILKJCLEGI {
    pub fn new() -> OFILKJCLEGI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ENDJGMLKPBP",
            |m: &OFILKJCLEGI| { &m.ENDJGMLKPBP },
            |m: &mut OFILKJCLEGI| { &mut m.ENDJGMLKPBP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBADLNFOPAO",
            |m: &OFILKJCLEGI| { &m.DBADLNFOPAO },
            |m: &mut OFILKJCLEGI| { &mut m.DBADLNFOPAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACJCPHIFMLN",
            |m: &OFILKJCLEGI| { &m.ACJCPHIFMLN },
            |m: &mut OFILKJCLEGI| { &mut m.ACJCPHIFMLN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NLIBKABFGCC",
            |m: &OFILKJCLEGI| { &m.NLIBKABFGCC },
            |m: &mut OFILKJCLEGI| { &mut m.NLIBKABFGCC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NLEAIJHAPAP",
            |m: &OFILKJCLEGI| { &m.NLEAIJHAPAP },
            |m: &mut OFILKJCLEGI| { &mut m.NLEAIJHAPAP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IGHLABGGIJE",
            |m: &OFILKJCLEGI| { &m.IGHLABGGIJE },
            |m: &mut OFILKJCLEGI| { &mut m.IGHLABGGIJE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rank",
            |m: &OFILKJCLEGI| { &m.rank },
            |m: &mut OFILKJCLEGI| { &mut m.rank },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EKLDPALNLDC",
            |m: &OFILKJCLEGI| { &m.EKLDPALNLDC },
            |m: &mut OFILKJCLEGI| { &mut m.EKLDPALNLDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JBLMGNPMADM",
            |m: &OFILKJCLEGI| { &m.JBLMGNPMADM },
            |m: &mut OFILKJCLEGI| { &mut m.JBLMGNPMADM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CBOIIACBAKF",
            |m: &OFILKJCLEGI| { &m.CBOIIACBAKF },
            |m: &mut OFILKJCLEGI| { &mut m.CBOIIACBAKF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PKFEOCAGECF",
            |m: &OFILKJCLEGI| { &m.PKFEOCAGECF },
            |m: &mut OFILKJCLEGI| { &mut m.PKFEOCAGECF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DJNMHMPKKKB",
            |m: &OFILKJCLEGI| { &m.DJNMHMPKKKB },
            |m: &mut OFILKJCLEGI| { &mut m.DJNMHMPKKKB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OFILKJCLEGI>(
            "OFILKJCLEGI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OFILKJCLEGI {
    const NAME: &'static str = "OFILKJCLEGI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ENDJGMLKPBP = is.read_uint32()?;
                },
                16 => {
                    self.DBADLNFOPAO = is.read_uint64()?;
                },
                24 => {
                    self.ACJCPHIFMLN = is.read_uint32()?;
                },
                32 => {
                    self.NLIBKABFGCC = is.read_uint32()?;
                },
                40 => {
                    self.NLEAIJHAPAP = is.read_bool()?;
                },
                48 => {
                    self.IGHLABGGIJE = is.read_uint32()?;
                },
                56 => {
                    self.rank = is.read_uint32()?;
                },
                64 => {
                    self.EKLDPALNLDC = is.read_uint64()?;
                },
                72 => {
                    self.JBLMGNPMADM = is.read_uint32()?;
                },
                80 => {
                    self.CBOIIACBAKF = is.read_uint32()?;
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.PKFEOCAGECF)?;
                },
                88 => {
                    self.PKFEOCAGECF.push(is.read_uint32()?);
                },
                96 => {
                    self.DJNMHMPKKKB = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ENDJGMLKPBP != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.ENDJGMLKPBP);
        }
        if self.DBADLNFOPAO != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.DBADLNFOPAO);
        }
        if self.ACJCPHIFMLN != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.ACJCPHIFMLN);
        }
        if self.NLIBKABFGCC != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.NLIBKABFGCC);
        }
        if self.NLEAIJHAPAP != false {
            my_size += 1 + 1;
        }
        if self.IGHLABGGIJE != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.IGHLABGGIJE);
        }
        if self.rank != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.rank);
        }
        if self.EKLDPALNLDC != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.EKLDPALNLDC);
        }
        if self.JBLMGNPMADM != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.JBLMGNPMADM);
        }
        if self.CBOIIACBAKF != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.CBOIIACBAKF);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(11, &self.PKFEOCAGECF);
        if self.DJNMHMPKKKB != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.DJNMHMPKKKB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ENDJGMLKPBP != 0 {
            os.write_uint32(1, self.ENDJGMLKPBP)?;
        }
        if self.DBADLNFOPAO != 0 {
            os.write_uint64(2, self.DBADLNFOPAO)?;
        }
        if self.ACJCPHIFMLN != 0 {
            os.write_uint32(3, self.ACJCPHIFMLN)?;
        }
        if self.NLIBKABFGCC != 0 {
            os.write_uint32(4, self.NLIBKABFGCC)?;
        }
        if self.NLEAIJHAPAP != false {
            os.write_bool(5, self.NLEAIJHAPAP)?;
        }
        if self.IGHLABGGIJE != 0 {
            os.write_uint32(6, self.IGHLABGGIJE)?;
        }
        if self.rank != 0 {
            os.write_uint32(7, self.rank)?;
        }
        if self.EKLDPALNLDC != 0 {
            os.write_uint64(8, self.EKLDPALNLDC)?;
        }
        if self.JBLMGNPMADM != 0 {
            os.write_uint32(9, self.JBLMGNPMADM)?;
        }
        if self.CBOIIACBAKF != 0 {
            os.write_uint32(10, self.CBOIIACBAKF)?;
        }
        os.write_repeated_packed_uint32(11, &self.PKFEOCAGECF)?;
        if self.DJNMHMPKKKB != 0 {
            os.write_uint32(12, self.DJNMHMPKKKB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OFILKJCLEGI {
        OFILKJCLEGI::new()
    }

    fn clear(&mut self) {
        self.ENDJGMLKPBP = 0;
        self.DBADLNFOPAO = 0;
        self.ACJCPHIFMLN = 0;
        self.NLIBKABFGCC = 0;
        self.NLEAIJHAPAP = false;
        self.IGHLABGGIJE = 0;
        self.rank = 0;
        self.EKLDPALNLDC = 0;
        self.JBLMGNPMADM = 0;
        self.CBOIIACBAKF = 0;
        self.PKFEOCAGECF.clear();
        self.DJNMHMPKKKB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OFILKJCLEGI {
        static instance: OFILKJCLEGI = OFILKJCLEGI {
            ENDJGMLKPBP: 0,
            DBADLNFOPAO: 0,
            ACJCPHIFMLN: 0,
            NLIBKABFGCC: 0,
            NLEAIJHAPAP: false,
            IGHLABGGIJE: 0,
            rank: 0,
            EKLDPALNLDC: 0,
            JBLMGNPMADM: 0,
            CBOIIACBAKF: 0,
            PKFEOCAGECF: ::std::vec::Vec::new(),
            DJNMHMPKKKB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OFILKJCLEGI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OFILKJCLEGI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OFILKJCLEGI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OFILKJCLEGI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OFILKJCLEGI.proto\"\x97\x03\n\x0bOFILKJCLEGI\x12\x20\n\x0bENDJGMLK\
    PBP\x18\x01\x20\x01(\rR\x0bENDJGMLKPBP\x12\x20\n\x0bDBADLNFOPAO\x18\x02\
    \x20\x01(\x04R\x0bDBADLNFOPAO\x12\x20\n\x0bACJCPHIFMLN\x18\x03\x20\x01(\
    \rR\x0bACJCPHIFMLN\x12\x20\n\x0bNLIBKABFGCC\x18\x04\x20\x01(\rR\x0bNLIBK\
    ABFGCC\x12\x20\n\x0bNLEAIJHAPAP\x18\x05\x20\x01(\x08R\x0bNLEAIJHAPAP\x12\
    \x20\n\x0bIGHLABGGIJE\x18\x06\x20\x01(\rR\x0bIGHLABGGIJE\x12\x12\n\x04ra\
    nk\x18\x07\x20\x01(\rR\x04rank\x12\x20\n\x0bEKLDPALNLDC\x18\x08\x20\x01(\
    \x04R\x0bEKLDPALNLDC\x12\x20\n\x0bJBLMGNPMADM\x18\t\x20\x01(\rR\x0bJBLMG\
    NPMADM\x12\x20\n\x0bCBOIIACBAKF\x18\n\x20\x01(\rR\x0bCBOIIACBAKF\x12\x20\
    \n\x0bPKFEOCAGECF\x18\x0b\x20\x03(\rR\x0bPKFEOCAGECF\x12\x20\n\x0bDJNMHM\
    PKKKB\x18\x0c\x20\x01(\rR\x0bDJNMHMPKKKBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OFILKJCLEGI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
