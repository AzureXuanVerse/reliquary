// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FJBJJOLJHFL.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FJBJJOLJHFL)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FJBJJOLJHFL {
    // message oneof groups
    pub ELPNOOCAFBE: ::std::option::Option<fjbjjoljhfl::ELPNOOCAFBE>,
    // special fields
    // @@protoc_insertion_point(special_field:FJBJJOLJHFL.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FJBJJOLJHFL {
    fn default() -> &'a FJBJJOLJHFL {
        <FJBJJOLJHFL as ::protobuf::Message>::default_instance()
    }
}

impl FJBJJOLJHFL {
    pub fn new() -> FJBJJOLJHFL {
        ::std::default::Default::default()
    }

    // .RogueCommonBuffSelectInfo OPJDNLJOMIP = 1719;

    pub fn OPJDNLJOMIP(&self) -> &super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(ref v)) => v,
            _ => <super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OPJDNLJOMIP(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_OPJDNLJOMIP(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OPJDNLJOMIP(&mut self, v: super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OPJDNLJOMIP(&mut self) -> &mut super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OPJDNLJOMIP(&mut self) -> super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if self.has_OPJDNLJOMIP() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()
        }
    }

    // .MCFLKFLHMMF NEBOIHLFOEO = 507;

    pub fn NEBOIHLFOEO(&self) -> &super::MCFLKFLHMMF::MCFLKFLHMMF {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(ref v)) => v,
            _ => <super::MCFLKFLHMMF::MCFLKFLHMMF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NEBOIHLFOEO(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_NEBOIHLFOEO(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NEBOIHLFOEO(&mut self, v: super::MCFLKFLHMMF::MCFLKFLHMMF) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NEBOIHLFOEO(&mut self) -> &mut super::MCFLKFLHMMF::MCFLKFLHMMF {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(super::MCFLKFLHMMF::MCFLKFLHMMF::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NEBOIHLFOEO(&mut self) -> super::MCFLKFLHMMF::MCFLKFLHMMF {
        if self.has_NEBOIHLFOEO() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MCFLKFLHMMF::MCFLKFLHMMF::new()
        }
    }

    // .MCLBEAJCELD EMMOBOGHEAP = 1597;

    pub fn EMMOBOGHEAP(&self) -> &super::MCLBEAJCELD::MCLBEAJCELD {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(ref v)) => v,
            _ => <super::MCLBEAJCELD::MCLBEAJCELD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EMMOBOGHEAP(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_EMMOBOGHEAP(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EMMOBOGHEAP(&mut self, v: super::MCLBEAJCELD::MCLBEAJCELD) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EMMOBOGHEAP(&mut self) -> &mut super::MCLBEAJCELD::MCLBEAJCELD {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(super::MCLBEAJCELD::MCLBEAJCELD::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EMMOBOGHEAP(&mut self) -> super::MCLBEAJCELD::MCLBEAJCELD {
        if self.has_EMMOBOGHEAP() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MCLBEAJCELD::MCLBEAJCELD::new()
        }
    }

    // .KABOEJOMBCK EAJGNPNNLNO = 1322;

    pub fn EAJGNPNNLNO(&self) -> &super::KABOEJOMBCK::KABOEJOMBCK {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(ref v)) => v,
            _ => <super::KABOEJOMBCK::KABOEJOMBCK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EAJGNPNNLNO(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_EAJGNPNNLNO(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EAJGNPNNLNO(&mut self, v: super::KABOEJOMBCK::KABOEJOMBCK) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EAJGNPNNLNO(&mut self) -> &mut super::KABOEJOMBCK::KABOEJOMBCK {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(super::KABOEJOMBCK::KABOEJOMBCK::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EAJGNPNNLNO(&mut self) -> super::KABOEJOMBCK::KABOEJOMBCK {
        if self.has_EAJGNPNNLNO() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KABOEJOMBCK::KABOEJOMBCK::new()
        }
    }

    // .CNNPLJGHDPJ PFABPKKAFGE = 1776;

    pub fn PFABPKKAFGE(&self) -> &super::CNNPLJGHDPJ::CNNPLJGHDPJ {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(ref v)) => v,
            _ => <super::CNNPLJGHDPJ::CNNPLJGHDPJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PFABPKKAFGE(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_PFABPKKAFGE(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PFABPKKAFGE(&mut self, v: super::CNNPLJGHDPJ::CNNPLJGHDPJ) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PFABPKKAFGE(&mut self) -> &mut super::CNNPLJGHDPJ::CNNPLJGHDPJ {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(super::CNNPLJGHDPJ::CNNPLJGHDPJ::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PFABPKKAFGE(&mut self) -> super::CNNPLJGHDPJ::CNNPLJGHDPJ {
        if self.has_PFABPKKAFGE() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CNNPLJGHDPJ::CNNPLJGHDPJ::new()
        }
    }

    // .NHMMJIHCOGF OHCDPJCHLHD = 845;

    pub fn OHCDPJCHLHD(&self) -> &super::NHMMJIHCOGF::NHMMJIHCOGF {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(ref v)) => v,
            _ => <super::NHMMJIHCOGF::NHMMJIHCOGF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OHCDPJCHLHD(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_OHCDPJCHLHD(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OHCDPJCHLHD(&mut self, v: super::NHMMJIHCOGF::NHMMJIHCOGF) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OHCDPJCHLHD(&mut self) -> &mut super::NHMMJIHCOGF::NHMMJIHCOGF {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(super::NHMMJIHCOGF::NHMMJIHCOGF::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OHCDPJCHLHD(&mut self) -> super::NHMMJIHCOGF::NHMMJIHCOGF {
        if self.has_OHCDPJCHLHD() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NHMMJIHCOGF::NHMMJIHCOGF::new()
        }
    }

    // .HGNEEFCADKJ LEDMPEPKFFK = 1506;

    pub fn LEDMPEPKFFK(&self) -> &super::HGNEEFCADKJ::HGNEEFCADKJ {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(ref v)) => v,
            _ => <super::HGNEEFCADKJ::HGNEEFCADKJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LEDMPEPKFFK(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_LEDMPEPKFFK(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LEDMPEPKFFK(&mut self, v: super::HGNEEFCADKJ::HGNEEFCADKJ) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LEDMPEPKFFK(&mut self) -> &mut super::HGNEEFCADKJ::HGNEEFCADKJ {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(super::HGNEEFCADKJ::HGNEEFCADKJ::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LEDMPEPKFFK(&mut self) -> super::HGNEEFCADKJ::HGNEEFCADKJ {
        if self.has_LEDMPEPKFFK() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HGNEEFCADKJ::HGNEEFCADKJ::new()
        }
    }

    // .IFLAKOOGJJL HFPCIFLENKL = 362;

    pub fn HFPCIFLENKL(&self) -> &super::IFLAKOOGJJL::IFLAKOOGJJL {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(ref v)) => v,
            _ => <super::IFLAKOOGJJL::IFLAKOOGJJL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HFPCIFLENKL(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_HFPCIFLENKL(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HFPCIFLENKL(&mut self, v: super::IFLAKOOGJJL::IFLAKOOGJJL) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HFPCIFLENKL(&mut self) -> &mut super::IFLAKOOGJJL::IFLAKOOGJJL {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(super::IFLAKOOGJJL::IFLAKOOGJJL::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HFPCIFLENKL(&mut self) -> super::IFLAKOOGJJL::IFLAKOOGJJL {
        if self.has_HFPCIFLENKL() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IFLAKOOGJJL::IFLAKOOGJJL::new()
        }
    }

    // .NIDBFAKBKMF LONLJJALNJC = 1942;

    pub fn LONLJJALNJC(&self) -> &super::NIDBFAKBKMF::NIDBFAKBKMF {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(ref v)) => v,
            _ => <super::NIDBFAKBKMF::NIDBFAKBKMF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LONLJJALNJC(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_LONLJJALNJC(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LONLJJALNJC(&mut self, v: super::NIDBFAKBKMF::NIDBFAKBKMF) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LONLJJALNJC(&mut self) -> &mut super::NIDBFAKBKMF::NIDBFAKBKMF {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(super::NIDBFAKBKMF::NIDBFAKBKMF::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LONLJJALNJC(&mut self) -> super::NIDBFAKBKMF::NIDBFAKBKMF {
        if self.has_LONLJJALNJC() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NIDBFAKBKMF::NIDBFAKBKMF::new()
        }
    }

    // .OMJPKPNNMJM LFFIPIJGHPI = 420;

    pub fn LFFIPIJGHPI(&self) -> &super::OMJPKPNNMJM::OMJPKPNNMJM {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(ref v)) => v,
            _ => <super::OMJPKPNNMJM::OMJPKPNNMJM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LFFIPIJGHPI(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_LFFIPIJGHPI(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LFFIPIJGHPI(&mut self, v: super::OMJPKPNNMJM::OMJPKPNNMJM) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LFFIPIJGHPI(&mut self) -> &mut super::OMJPKPNNMJM::OMJPKPNNMJM {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(super::OMJPKPNNMJM::OMJPKPNNMJM::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LFFIPIJGHPI(&mut self) -> super::OMJPKPNNMJM::OMJPKPNNMJM {
        if self.has_LFFIPIJGHPI() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMJPKPNNMJM::OMJPKPNNMJM::new()
        }
    }

    // .KNCOEENPPON PMJFFJEMIBE = 366;

    pub fn PMJFFJEMIBE(&self) -> &super::KNCOEENPPON::KNCOEENPPON {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(ref v)) => v,
            _ => <super::KNCOEENPPON::KNCOEENPPON as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMJFFJEMIBE(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_PMJFFJEMIBE(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMJFFJEMIBE(&mut self, v: super::KNCOEENPPON::KNCOEENPPON) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMJFFJEMIBE(&mut self) -> &mut super::KNCOEENPPON::KNCOEENPPON {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(super::KNCOEENPPON::KNCOEENPPON::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMJFFJEMIBE(&mut self) -> super::KNCOEENPPON::KNCOEENPPON {
        if self.has_PMJFFJEMIBE() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KNCOEENPPON::KNCOEENPPON::new()
        }
    }

    // .JFGPGFKMBCC HAKNPNLBKON = 1677;

    pub fn HAKNPNLBKON(&self) -> &super::JFGPGFKMBCC::JFGPGFKMBCC {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(ref v)) => v,
            _ => <super::JFGPGFKMBCC::JFGPGFKMBCC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HAKNPNLBKON(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_HAKNPNLBKON(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HAKNPNLBKON(&mut self, v: super::JFGPGFKMBCC::JFGPGFKMBCC) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HAKNPNLBKON(&mut self) -> &mut super::JFGPGFKMBCC::JFGPGFKMBCC {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(super::JFGPGFKMBCC::JFGPGFKMBCC::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HAKNPNLBKON(&mut self) -> super::JFGPGFKMBCC::JFGPGFKMBCC {
        if self.has_HAKNPNLBKON() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JFGPGFKMBCC::JFGPGFKMBCC::new()
        }
    }

    // .GCMDBOFKGCP CEKLCNNHIBG = 1232;

    pub fn CEKLCNNHIBG(&self) -> &super::GCMDBOFKGCP::GCMDBOFKGCP {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(ref v)) => v,
            _ => <super::GCMDBOFKGCP::GCMDBOFKGCP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CEKLCNNHIBG(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_CEKLCNNHIBG(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CEKLCNNHIBG(&mut self, v: super::GCMDBOFKGCP::GCMDBOFKGCP) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CEKLCNNHIBG(&mut self) -> &mut super::GCMDBOFKGCP::GCMDBOFKGCP {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(super::GCMDBOFKGCP::GCMDBOFKGCP::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CEKLCNNHIBG(&mut self) -> super::GCMDBOFKGCP::GCMDBOFKGCP {
        if self.has_CEKLCNNHIBG() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GCMDBOFKGCP::GCMDBOFKGCP::new()
        }
    }

    // .RogueFormulaSelectInfo LJIDDOICJHD = 176;

    pub fn LJIDDOICJHD(&self) -> &super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(ref v)) => v,
            _ => <super::RogueFormulaSelectInfo::RogueFormulaSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LJIDDOICJHD(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_LJIDDOICJHD(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LJIDDOICJHD(&mut self, v: super::RogueFormulaSelectInfo::RogueFormulaSelectInfo) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LJIDDOICJHD(&mut self) -> &mut super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LJIDDOICJHD(&mut self) -> super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if self.has_LJIDDOICJHD() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()
        }
    }

    // .MHOEBCLBNNE AAJCJFAHPEH = 892;

    pub fn AAJCJFAHPEH(&self) -> &super::MHOEBCLBNNE::MHOEBCLBNNE {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(ref v)) => v,
            _ => <super::MHOEBCLBNNE::MHOEBCLBNNE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AAJCJFAHPEH(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_AAJCJFAHPEH(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AAJCJFAHPEH(&mut self, v: super::MHOEBCLBNNE::MHOEBCLBNNE) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AAJCJFAHPEH(&mut self) -> &mut super::MHOEBCLBNNE::MHOEBCLBNNE {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(super::MHOEBCLBNNE::MHOEBCLBNNE::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AAJCJFAHPEH(&mut self) -> super::MHOEBCLBNNE::MHOEBCLBNNE {
        if self.has_AAJCJFAHPEH() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MHOEBCLBNNE::MHOEBCLBNNE::new()
        }
    }

    // .KNBAMHIKGJD DCCJMBEIFON = 275;

    pub fn DCCJMBEIFON(&self) -> &super::KNBAMHIKGJD::KNBAMHIKGJD {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(ref v)) => v,
            _ => <super::KNBAMHIKGJD::KNBAMHIKGJD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DCCJMBEIFON(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_DCCJMBEIFON(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DCCJMBEIFON(&mut self, v: super::KNBAMHIKGJD::KNBAMHIKGJD) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DCCJMBEIFON(&mut self) -> &mut super::KNBAMHIKGJD::KNBAMHIKGJD {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(super::KNBAMHIKGJD::KNBAMHIKGJD::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DCCJMBEIFON(&mut self) -> super::KNBAMHIKGJD::KNBAMHIKGJD {
        if self.has_DCCJMBEIFON() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KNBAMHIKGJD::KNBAMHIKGJD::new()
        }
    }

    // .CNNDEHKLFFF KHKBCGMGNNC = 1129;

    pub fn KHKBCGMGNNC(&self) -> &super::CNNDEHKLFFF::CNNDEHKLFFF {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(ref v)) => v,
            _ => <super::CNNDEHKLFFF::CNNDEHKLFFF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KHKBCGMGNNC(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_KHKBCGMGNNC(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KHKBCGMGNNC(&mut self, v: super::CNNDEHKLFFF::CNNDEHKLFFF) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KHKBCGMGNNC(&mut self) -> &mut super::CNNDEHKLFFF::CNNDEHKLFFF {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(super::CNNDEHKLFFF::CNNDEHKLFFF::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KHKBCGMGNNC(&mut self) -> super::CNNDEHKLFFF::CNNDEHKLFFF {
        if self.has_KHKBCGMGNNC() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CNNDEHKLFFF::CNNDEHKLFFF::new()
        }
    }

    // .JBHLKMEKJDD BPCCFGHNLDI = 1388;

    pub fn BPCCFGHNLDI(&self) -> &super::JBHLKMEKJDD::JBHLKMEKJDD {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(ref v)) => v,
            _ => <super::JBHLKMEKJDD::JBHLKMEKJDD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BPCCFGHNLDI(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_BPCCFGHNLDI(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BPCCFGHNLDI(&mut self, v: super::JBHLKMEKJDD::JBHLKMEKJDD) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BPCCFGHNLDI(&mut self) -> &mut super::JBHLKMEKJDD::JBHLKMEKJDD {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(super::JBHLKMEKJDD::JBHLKMEKJDD::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BPCCFGHNLDI(&mut self) -> super::JBHLKMEKJDD::JBHLKMEKJDD {
        if self.has_BPCCFGHNLDI() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JBHLKMEKJDD::JBHLKMEKJDD::new()
        }
    }

    // .MNKGMOHKAAP PNEMAFHKFII = 18;

    pub fn PNEMAFHKFII(&self) -> &super::MNKGMOHKAAP::MNKGMOHKAAP {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(ref v)) => v,
            _ => <super::MNKGMOHKAAP::MNKGMOHKAAP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PNEMAFHKFII(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_PNEMAFHKFII(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PNEMAFHKFII(&mut self, v: super::MNKGMOHKAAP::MNKGMOHKAAP) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PNEMAFHKFII(&mut self) -> &mut super::MNKGMOHKAAP::MNKGMOHKAAP {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(super::MNKGMOHKAAP::MNKGMOHKAAP::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PNEMAFHKFII(&mut self) -> super::MNKGMOHKAAP::MNKGMOHKAAP {
        if self.has_PNEMAFHKFII() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MNKGMOHKAAP::MNKGMOHKAAP::new()
        }
    }

    // .CNNDEHKLFFF FCBEKOPHFMG = 585;

    pub fn FCBEKOPHFMG(&self) -> &super::CNNDEHKLFFF::CNNDEHKLFFF {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(ref v)) => v,
            _ => <super::CNNDEHKLFFF::CNNDEHKLFFF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FCBEKOPHFMG(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_FCBEKOPHFMG(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FCBEKOPHFMG(&mut self, v: super::CNNDEHKLFFF::CNNDEHKLFFF) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FCBEKOPHFMG(&mut self) -> &mut super::CNNDEHKLFFF::CNNDEHKLFFF {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(super::CNNDEHKLFFF::CNNDEHKLFFF::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FCBEKOPHFMG(&mut self) -> super::CNNDEHKLFFF::CNNDEHKLFFF {
        if self.has_FCBEKOPHFMG() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CNNDEHKLFFF::CNNDEHKLFFF::new()
        }
    }

    // .CNNDEHKLFFF PBAHDAICIIH = 1644;

    pub fn PBAHDAICIIH(&self) -> &super::CNNDEHKLFFF::CNNDEHKLFFF {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(ref v)) => v,
            _ => <super::CNNDEHKLFFF::CNNDEHKLFFF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PBAHDAICIIH(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_PBAHDAICIIH(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PBAHDAICIIH(&mut self, v: super::CNNDEHKLFFF::CNNDEHKLFFF) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PBAHDAICIIH(&mut self) -> &mut super::CNNDEHKLFFF::CNNDEHKLFFF {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(super::CNNDEHKLFFF::CNNDEHKLFFF::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PBAHDAICIIH(&mut self) -> super::CNNDEHKLFFF::CNNDEHKLFFF {
        if self.has_PBAHDAICIIH() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CNNDEHKLFFF::CNNDEHKLFFF::new()
        }
    }

    // .CNNDEHKLFFF DCHLCCBGIFD = 1331;

    pub fn DCHLCCBGIFD(&self) -> &super::CNNDEHKLFFF::CNNDEHKLFFF {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(ref v)) => v,
            _ => <super::CNNDEHKLFFF::CNNDEHKLFFF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DCHLCCBGIFD(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_DCHLCCBGIFD(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DCHLCCBGIFD(&mut self, v: super::CNNDEHKLFFF::CNNDEHKLFFF) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DCHLCCBGIFD(&mut self) -> &mut super::CNNDEHKLFFF::CNNDEHKLFFF {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(super::CNNDEHKLFFF::CNNDEHKLFFF::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DCHLCCBGIFD(&mut self) -> super::CNNDEHKLFFF::CNNDEHKLFFF {
        if self.has_DCHLCCBGIFD() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CNNDEHKLFFF::CNNDEHKLFFF::new()
        }
    }

    // .IDAMGIHKEOP FNJLPFBCMGJ = 353;

    pub fn FNJLPFBCMGJ(&self) -> &super::IDAMGIHKEOP::IDAMGIHKEOP {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(ref v)) => v,
            _ => <super::IDAMGIHKEOP::IDAMGIHKEOP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FNJLPFBCMGJ(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_FNJLPFBCMGJ(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FNJLPFBCMGJ(&mut self, v: super::IDAMGIHKEOP::IDAMGIHKEOP) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FNJLPFBCMGJ(&mut self) -> &mut super::IDAMGIHKEOP::IDAMGIHKEOP {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(super::IDAMGIHKEOP::IDAMGIHKEOP::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FNJLPFBCMGJ(&mut self) -> super::IDAMGIHKEOP::IDAMGIHKEOP {
        if self.has_FNJLPFBCMGJ() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IDAMGIHKEOP::IDAMGIHKEOP::new()
        }
    }

    // .IDAMGIHKEOP HELFGEKGKKP = 1455;

    pub fn HELFGEKGKKP(&self) -> &super::IDAMGIHKEOP::IDAMGIHKEOP {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(ref v)) => v,
            _ => <super::IDAMGIHKEOP::IDAMGIHKEOP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HELFGEKGKKP(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_HELFGEKGKKP(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HELFGEKGKKP(&mut self, v: super::IDAMGIHKEOP::IDAMGIHKEOP) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HELFGEKGKKP(&mut self) -> &mut super::IDAMGIHKEOP::IDAMGIHKEOP {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(super::IDAMGIHKEOP::IDAMGIHKEOP::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HELFGEKGKKP(&mut self) -> super::IDAMGIHKEOP::IDAMGIHKEOP {
        if self.has_HELFGEKGKKP() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IDAMGIHKEOP::IDAMGIHKEOP::new()
        }
    }

    // .IDAMGIHKEOP ODAHCCBIPNH = 1910;

    pub fn ODAHCCBIPNH(&self) -> &super::IDAMGIHKEOP::IDAMGIHKEOP {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(ref v)) => v,
            _ => <super::IDAMGIHKEOP::IDAMGIHKEOP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ODAHCCBIPNH(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_ODAHCCBIPNH(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ODAHCCBIPNH(&mut self, v: super::IDAMGIHKEOP::IDAMGIHKEOP) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ODAHCCBIPNH(&mut self) -> &mut super::IDAMGIHKEOP::IDAMGIHKEOP {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(super::IDAMGIHKEOP::IDAMGIHKEOP::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ODAHCCBIPNH(&mut self) -> super::IDAMGIHKEOP::IDAMGIHKEOP {
        if self.has_ODAHCCBIPNH() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IDAMGIHKEOP::IDAMGIHKEOP::new()
        }
    }

    // .IOKINLMLPHH OMIEOKKFCKC = 49;

    pub fn OMIEOKKFCKC(&self) -> &super::IOKINLMLPHH::IOKINLMLPHH {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(ref v)) => v,
            _ => <super::IOKINLMLPHH::IOKINLMLPHH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OMIEOKKFCKC(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_OMIEOKKFCKC(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OMIEOKKFCKC(&mut self, v: super::IOKINLMLPHH::IOKINLMLPHH) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OMIEOKKFCKC(&mut self) -> &mut super::IOKINLMLPHH::IOKINLMLPHH {
        if let ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(super::IOKINLMLPHH::IOKINLMLPHH::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OMIEOKKFCKC(&mut self) -> super::IOKINLMLPHH::IOKINLMLPHH {
        if self.has_OMIEOKKFCKC() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IOKINLMLPHH::IOKINLMLPHH::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(26);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo>(
            "OPJDNLJOMIP",
            FJBJJOLJHFL::has_OPJDNLJOMIP,
            FJBJJOLJHFL::OPJDNLJOMIP,
            FJBJJOLJHFL::mut_OPJDNLJOMIP,
            FJBJJOLJHFL::set_OPJDNLJOMIP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MCFLKFLHMMF::MCFLKFLHMMF>(
            "NEBOIHLFOEO",
            FJBJJOLJHFL::has_NEBOIHLFOEO,
            FJBJJOLJHFL::NEBOIHLFOEO,
            FJBJJOLJHFL::mut_NEBOIHLFOEO,
            FJBJJOLJHFL::set_NEBOIHLFOEO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MCLBEAJCELD::MCLBEAJCELD>(
            "EMMOBOGHEAP",
            FJBJJOLJHFL::has_EMMOBOGHEAP,
            FJBJJOLJHFL::EMMOBOGHEAP,
            FJBJJOLJHFL::mut_EMMOBOGHEAP,
            FJBJJOLJHFL::set_EMMOBOGHEAP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KABOEJOMBCK::KABOEJOMBCK>(
            "EAJGNPNNLNO",
            FJBJJOLJHFL::has_EAJGNPNNLNO,
            FJBJJOLJHFL::EAJGNPNNLNO,
            FJBJJOLJHFL::mut_EAJGNPNNLNO,
            FJBJJOLJHFL::set_EAJGNPNNLNO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CNNPLJGHDPJ::CNNPLJGHDPJ>(
            "PFABPKKAFGE",
            FJBJJOLJHFL::has_PFABPKKAFGE,
            FJBJJOLJHFL::PFABPKKAFGE,
            FJBJJOLJHFL::mut_PFABPKKAFGE,
            FJBJJOLJHFL::set_PFABPKKAFGE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NHMMJIHCOGF::NHMMJIHCOGF>(
            "OHCDPJCHLHD",
            FJBJJOLJHFL::has_OHCDPJCHLHD,
            FJBJJOLJHFL::OHCDPJCHLHD,
            FJBJJOLJHFL::mut_OHCDPJCHLHD,
            FJBJJOLJHFL::set_OHCDPJCHLHD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HGNEEFCADKJ::HGNEEFCADKJ>(
            "LEDMPEPKFFK",
            FJBJJOLJHFL::has_LEDMPEPKFFK,
            FJBJJOLJHFL::LEDMPEPKFFK,
            FJBJJOLJHFL::mut_LEDMPEPKFFK,
            FJBJJOLJHFL::set_LEDMPEPKFFK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IFLAKOOGJJL::IFLAKOOGJJL>(
            "HFPCIFLENKL",
            FJBJJOLJHFL::has_HFPCIFLENKL,
            FJBJJOLJHFL::HFPCIFLENKL,
            FJBJJOLJHFL::mut_HFPCIFLENKL,
            FJBJJOLJHFL::set_HFPCIFLENKL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NIDBFAKBKMF::NIDBFAKBKMF>(
            "LONLJJALNJC",
            FJBJJOLJHFL::has_LONLJJALNJC,
            FJBJJOLJHFL::LONLJJALNJC,
            FJBJJOLJHFL::mut_LONLJJALNJC,
            FJBJJOLJHFL::set_LONLJJALNJC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMJPKPNNMJM::OMJPKPNNMJM>(
            "LFFIPIJGHPI",
            FJBJJOLJHFL::has_LFFIPIJGHPI,
            FJBJJOLJHFL::LFFIPIJGHPI,
            FJBJJOLJHFL::mut_LFFIPIJGHPI,
            FJBJJOLJHFL::set_LFFIPIJGHPI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KNCOEENPPON::KNCOEENPPON>(
            "PMJFFJEMIBE",
            FJBJJOLJHFL::has_PMJFFJEMIBE,
            FJBJJOLJHFL::PMJFFJEMIBE,
            FJBJJOLJHFL::mut_PMJFFJEMIBE,
            FJBJJOLJHFL::set_PMJFFJEMIBE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JFGPGFKMBCC::JFGPGFKMBCC>(
            "HAKNPNLBKON",
            FJBJJOLJHFL::has_HAKNPNLBKON,
            FJBJJOLJHFL::HAKNPNLBKON,
            FJBJJOLJHFL::mut_HAKNPNLBKON,
            FJBJJOLJHFL::set_HAKNPNLBKON,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GCMDBOFKGCP::GCMDBOFKGCP>(
            "CEKLCNNHIBG",
            FJBJJOLJHFL::has_CEKLCNNHIBG,
            FJBJJOLJHFL::CEKLCNNHIBG,
            FJBJJOLJHFL::mut_CEKLCNNHIBG,
            FJBJJOLJHFL::set_CEKLCNNHIBG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueFormulaSelectInfo::RogueFormulaSelectInfo>(
            "LJIDDOICJHD",
            FJBJJOLJHFL::has_LJIDDOICJHD,
            FJBJJOLJHFL::LJIDDOICJHD,
            FJBJJOLJHFL::mut_LJIDDOICJHD,
            FJBJJOLJHFL::set_LJIDDOICJHD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MHOEBCLBNNE::MHOEBCLBNNE>(
            "AAJCJFAHPEH",
            FJBJJOLJHFL::has_AAJCJFAHPEH,
            FJBJJOLJHFL::AAJCJFAHPEH,
            FJBJJOLJHFL::mut_AAJCJFAHPEH,
            FJBJJOLJHFL::set_AAJCJFAHPEH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KNBAMHIKGJD::KNBAMHIKGJD>(
            "DCCJMBEIFON",
            FJBJJOLJHFL::has_DCCJMBEIFON,
            FJBJJOLJHFL::DCCJMBEIFON,
            FJBJJOLJHFL::mut_DCCJMBEIFON,
            FJBJJOLJHFL::set_DCCJMBEIFON,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CNNDEHKLFFF::CNNDEHKLFFF>(
            "KHKBCGMGNNC",
            FJBJJOLJHFL::has_KHKBCGMGNNC,
            FJBJJOLJHFL::KHKBCGMGNNC,
            FJBJJOLJHFL::mut_KHKBCGMGNNC,
            FJBJJOLJHFL::set_KHKBCGMGNNC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JBHLKMEKJDD::JBHLKMEKJDD>(
            "BPCCFGHNLDI",
            FJBJJOLJHFL::has_BPCCFGHNLDI,
            FJBJJOLJHFL::BPCCFGHNLDI,
            FJBJJOLJHFL::mut_BPCCFGHNLDI,
            FJBJJOLJHFL::set_BPCCFGHNLDI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MNKGMOHKAAP::MNKGMOHKAAP>(
            "PNEMAFHKFII",
            FJBJJOLJHFL::has_PNEMAFHKFII,
            FJBJJOLJHFL::PNEMAFHKFII,
            FJBJJOLJHFL::mut_PNEMAFHKFII,
            FJBJJOLJHFL::set_PNEMAFHKFII,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CNNDEHKLFFF::CNNDEHKLFFF>(
            "FCBEKOPHFMG",
            FJBJJOLJHFL::has_FCBEKOPHFMG,
            FJBJJOLJHFL::FCBEKOPHFMG,
            FJBJJOLJHFL::mut_FCBEKOPHFMG,
            FJBJJOLJHFL::set_FCBEKOPHFMG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CNNDEHKLFFF::CNNDEHKLFFF>(
            "PBAHDAICIIH",
            FJBJJOLJHFL::has_PBAHDAICIIH,
            FJBJJOLJHFL::PBAHDAICIIH,
            FJBJJOLJHFL::mut_PBAHDAICIIH,
            FJBJJOLJHFL::set_PBAHDAICIIH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CNNDEHKLFFF::CNNDEHKLFFF>(
            "DCHLCCBGIFD",
            FJBJJOLJHFL::has_DCHLCCBGIFD,
            FJBJJOLJHFL::DCHLCCBGIFD,
            FJBJJOLJHFL::mut_DCHLCCBGIFD,
            FJBJJOLJHFL::set_DCHLCCBGIFD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IDAMGIHKEOP::IDAMGIHKEOP>(
            "FNJLPFBCMGJ",
            FJBJJOLJHFL::has_FNJLPFBCMGJ,
            FJBJJOLJHFL::FNJLPFBCMGJ,
            FJBJJOLJHFL::mut_FNJLPFBCMGJ,
            FJBJJOLJHFL::set_FNJLPFBCMGJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IDAMGIHKEOP::IDAMGIHKEOP>(
            "HELFGEKGKKP",
            FJBJJOLJHFL::has_HELFGEKGKKP,
            FJBJJOLJHFL::HELFGEKGKKP,
            FJBJJOLJHFL::mut_HELFGEKGKKP,
            FJBJJOLJHFL::set_HELFGEKGKKP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IDAMGIHKEOP::IDAMGIHKEOP>(
            "ODAHCCBIPNH",
            FJBJJOLJHFL::has_ODAHCCBIPNH,
            FJBJJOLJHFL::ODAHCCBIPNH,
            FJBJJOLJHFL::mut_ODAHCCBIPNH,
            FJBJJOLJHFL::set_ODAHCCBIPNH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IOKINLMLPHH::IOKINLMLPHH>(
            "OMIEOKKFCKC",
            FJBJJOLJHFL::has_OMIEOKKFCKC,
            FJBJJOLJHFL::OMIEOKKFCKC,
            FJBJJOLJHFL::mut_OMIEOKKFCKC,
            FJBJJOLJHFL::set_OMIEOKKFCKC,
        ));
        oneofs.push(fjbjjoljhfl::ELPNOOCAFBE::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FJBJJOLJHFL>(
            "FJBJJOLJHFL",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FJBJJOLJHFL {
    const NAME: &'static str = "FJBJJOLJHFL";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13754 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(is.read_message()?));
                },
                4058 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(is.read_message()?));
                },
                12778 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(is.read_message()?));
                },
                10578 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(is.read_message()?));
                },
                14210 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(is.read_message()?));
                },
                6762 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(is.read_message()?));
                },
                12050 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(is.read_message()?));
                },
                2898 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(is.read_message()?));
                },
                15538 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(is.read_message()?));
                },
                3362 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(is.read_message()?));
                },
                2930 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(is.read_message()?));
                },
                13418 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(is.read_message()?));
                },
                9858 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(is.read_message()?));
                },
                1410 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(is.read_message()?));
                },
                7138 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(is.read_message()?));
                },
                2202 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(is.read_message()?));
                },
                9034 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(is.read_message()?));
                },
                11106 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(is.read_message()?));
                },
                146 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(is.read_message()?));
                },
                4682 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(is.read_message()?));
                },
                13154 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(is.read_message()?));
                },
                10650 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(is.read_message()?));
                },
                2826 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(is.read_message()?));
                },
                11642 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(is.read_message()?));
                },
                15282 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(is.read_message()?));
                },
                394 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ELPNOOCAFBE {
            match v {
                &fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ELPNOOCAFBE {
            match v {
                &fjbjjoljhfl::ELPNOOCAFBE::OPJDNLJOMIP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1719, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::NEBOIHLFOEO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(507, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::EMMOBOGHEAP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1597, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::EAJGNPNNLNO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1322, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::PFABPKKAFGE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1776, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::OHCDPJCHLHD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(845, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::LEDMPEPKFFK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1506, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::HFPCIFLENKL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(362, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::LONLJJALNJC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1942, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::LFFIPIJGHPI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(420, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::PMJFFJEMIBE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(366, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::HAKNPNLBKON(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1677, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::CEKLCNNHIBG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1232, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::LJIDDOICJHD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(176, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::AAJCJFAHPEH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(892, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::DCCJMBEIFON(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(275, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::KHKBCGMGNNC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1129, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::BPCCFGHNLDI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1388, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::PNEMAFHKFII(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::FCBEKOPHFMG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(585, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::PBAHDAICIIH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1644, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::DCHLCCBGIFD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1331, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::FNJLPFBCMGJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(353, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::HELFGEKGKKP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1455, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::ODAHCCBIPNH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1910, v, os)?;
                },
                &fjbjjoljhfl::ELPNOOCAFBE::OMIEOKKFCKC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(49, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FJBJJOLJHFL {
        FJBJJOLJHFL::new()
    }

    fn clear(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FJBJJOLJHFL {
        static instance: FJBJJOLJHFL = FJBJJOLJHFL {
            ELPNOOCAFBE: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FJBJJOLJHFL {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FJBJJOLJHFL").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FJBJJOLJHFL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FJBJJOLJHFL {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FJBJJOLJHFL`
pub mod fjbjjoljhfl {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:FJBJJOLJHFL.ELPNOOCAFBE)
    pub enum ELPNOOCAFBE {
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.OPJDNLJOMIP)
        OPJDNLJOMIP(super::super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.NEBOIHLFOEO)
        NEBOIHLFOEO(super::super::MCFLKFLHMMF::MCFLKFLHMMF),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.EMMOBOGHEAP)
        EMMOBOGHEAP(super::super::MCLBEAJCELD::MCLBEAJCELD),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.EAJGNPNNLNO)
        EAJGNPNNLNO(super::super::KABOEJOMBCK::KABOEJOMBCK),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.PFABPKKAFGE)
        PFABPKKAFGE(super::super::CNNPLJGHDPJ::CNNPLJGHDPJ),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.OHCDPJCHLHD)
        OHCDPJCHLHD(super::super::NHMMJIHCOGF::NHMMJIHCOGF),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.LEDMPEPKFFK)
        LEDMPEPKFFK(super::super::HGNEEFCADKJ::HGNEEFCADKJ),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.HFPCIFLENKL)
        HFPCIFLENKL(super::super::IFLAKOOGJJL::IFLAKOOGJJL),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.LONLJJALNJC)
        LONLJJALNJC(super::super::NIDBFAKBKMF::NIDBFAKBKMF),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.LFFIPIJGHPI)
        LFFIPIJGHPI(super::super::OMJPKPNNMJM::OMJPKPNNMJM),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.PMJFFJEMIBE)
        PMJFFJEMIBE(super::super::KNCOEENPPON::KNCOEENPPON),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.HAKNPNLBKON)
        HAKNPNLBKON(super::super::JFGPGFKMBCC::JFGPGFKMBCC),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.CEKLCNNHIBG)
        CEKLCNNHIBG(super::super::GCMDBOFKGCP::GCMDBOFKGCP),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.LJIDDOICJHD)
        LJIDDOICJHD(super::super::RogueFormulaSelectInfo::RogueFormulaSelectInfo),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.AAJCJFAHPEH)
        AAJCJFAHPEH(super::super::MHOEBCLBNNE::MHOEBCLBNNE),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.DCCJMBEIFON)
        DCCJMBEIFON(super::super::KNBAMHIKGJD::KNBAMHIKGJD),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.KHKBCGMGNNC)
        KHKBCGMGNNC(super::super::CNNDEHKLFFF::CNNDEHKLFFF),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.BPCCFGHNLDI)
        BPCCFGHNLDI(super::super::JBHLKMEKJDD::JBHLKMEKJDD),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.PNEMAFHKFII)
        PNEMAFHKFII(super::super::MNKGMOHKAAP::MNKGMOHKAAP),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.FCBEKOPHFMG)
        FCBEKOPHFMG(super::super::CNNDEHKLFFF::CNNDEHKLFFF),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.PBAHDAICIIH)
        PBAHDAICIIH(super::super::CNNDEHKLFFF::CNNDEHKLFFF),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.DCHLCCBGIFD)
        DCHLCCBGIFD(super::super::CNNDEHKLFFF::CNNDEHKLFFF),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.FNJLPFBCMGJ)
        FNJLPFBCMGJ(super::super::IDAMGIHKEOP::IDAMGIHKEOP),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.HELFGEKGKKP)
        HELFGEKGKKP(super::super::IDAMGIHKEOP::IDAMGIHKEOP),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.ODAHCCBIPNH)
        ODAHCCBIPNH(super::super::IDAMGIHKEOP::IDAMGIHKEOP),
        // @@protoc_insertion_point(oneof_field:FJBJJOLJHFL.OMIEOKKFCKC)
        OMIEOKKFCKC(super::super::IOKINLMLPHH::IOKINLMLPHH),
    }

    impl ::protobuf::Oneof for ELPNOOCAFBE {
    }

    impl ::protobuf::OneofFull for ELPNOOCAFBE {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FJBJJOLJHFL as ::protobuf::MessageFull>::descriptor().oneof_by_name("ELPNOOCAFBE").unwrap()).clone()
        }
    }

    impl ELPNOOCAFBE {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ELPNOOCAFBE>("ELPNOOCAFBE")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FJBJJOLJHFL.proto\x1a\x11CNNDEHKLFFF.proto\x1a\x11CNNPLJGHDPJ.prot\
    o\x1a\x11GCMDBOFKGCP.proto\x1a\x11HGNEEFCADKJ.proto\x1a\x11IDAMGIHKEOP.p\
    roto\x1a\x11IFLAKOOGJJL.proto\x1a\x11IOKINLMLPHH.proto\x1a\x11JBHLKMEKJD\
    D.proto\x1a\x11JFGPGFKMBCC.proto\x1a\x11KABOEJOMBCK.proto\x1a\x11KNBAMHI\
    KGJD.proto\x1a\x11KNCOEENPPON.proto\x1a\x11MCFLKFLHMMF.proto\x1a\x11MCLB\
    EAJCELD.proto\x1a\x11MHOEBCLBNNE.proto\x1a\x11MNKGMOHKAAP.proto\x1a\x11N\
    HMMJIHCOGF.proto\x1a\x11NIDBFAKBKMF.proto\x1a\x11OMJPKPNNMJM.proto\x1a\
    \x1fRogueCommonBuffSelectInfo.proto\x1a\x1cRogueFormulaSelectInfo.proto\
    \"\xe1\n\n\x0bFJBJJOLJHFL\x12?\n\x0bOPJDNLJOMIP\x18\xb7\r\x20\x01(\x0b2\
    \x1a.RogueCommonBuffSelectInfoH\0R\x0bOPJDNLJOMIP\x121\n\x0bNEBOIHLFOEO\
    \x18\xfb\x03\x20\x01(\x0b2\x0c.MCFLKFLHMMFH\0R\x0bNEBOIHLFOEO\x121\n\x0b\
    EMMOBOGHEAP\x18\xbd\x0c\x20\x01(\x0b2\x0c.MCLBEAJCELDH\0R\x0bEMMOBOGHEAP\
    \x121\n\x0bEAJGNPNNLNO\x18\xaa\n\x20\x01(\x0b2\x0c.KABOEJOMBCKH\0R\x0bEA\
    JGNPNNLNO\x121\n\x0bPFABPKKAFGE\x18\xf0\r\x20\x01(\x0b2\x0c.CNNPLJGHDPJH\
    \0R\x0bPFABPKKAFGE\x121\n\x0bOHCDPJCHLHD\x18\xcd\x06\x20\x01(\x0b2\x0c.N\
    HMMJIHCOGFH\0R\x0bOHCDPJCHLHD\x121\n\x0bLEDMPEPKFFK\x18\xe2\x0b\x20\x01(\
    \x0b2\x0c.HGNEEFCADKJH\0R\x0bLEDMPEPKFFK\x121\n\x0bHFPCIFLENKL\x18\xea\
    \x02\x20\x01(\x0b2\x0c.IFLAKOOGJJLH\0R\x0bHFPCIFLENKL\x121\n\x0bLONLJJAL\
    NJC\x18\x96\x0f\x20\x01(\x0b2\x0c.NIDBFAKBKMFH\0R\x0bLONLJJALNJC\x121\n\
    \x0bLFFIPIJGHPI\x18\xa4\x03\x20\x01(\x0b2\x0c.OMJPKPNNMJMH\0R\x0bLFFIPIJ\
    GHPI\x121\n\x0bPMJFFJEMIBE\x18\xee\x02\x20\x01(\x0b2\x0c.KNCOEENPPONH\0R\
    \x0bPMJFFJEMIBE\x121\n\x0bHAKNPNLBKON\x18\x8d\r\x20\x01(\x0b2\x0c.JFGPGF\
    KMBCCH\0R\x0bHAKNPNLBKON\x121\n\x0bCEKLCNNHIBG\x18\xd0\t\x20\x01(\x0b2\
    \x0c.GCMDBOFKGCPH\0R\x0bCEKLCNNHIBG\x12<\n\x0bLJIDDOICJHD\x18\xb0\x01\
    \x20\x01(\x0b2\x17.RogueFormulaSelectInfoH\0R\x0bLJIDDOICJHD\x121\n\x0bA\
    AJCJFAHPEH\x18\xfc\x06\x20\x01(\x0b2\x0c.MHOEBCLBNNEH\0R\x0bAAJCJFAHPEH\
    \x121\n\x0bDCCJMBEIFON\x18\x93\x02\x20\x01(\x0b2\x0c.KNBAMHIKGJDH\0R\x0b\
    DCCJMBEIFON\x121\n\x0bKHKBCGMGNNC\x18\xe9\x08\x20\x01(\x0b2\x0c.CNNDEHKL\
    FFFH\0R\x0bKHKBCGMGNNC\x121\n\x0bBPCCFGHNLDI\x18\xec\n\x20\x01(\x0b2\x0c\
    .JBHLKMEKJDDH\0R\x0bBPCCFGHNLDI\x120\n\x0bPNEMAFHKFII\x18\x12\x20\x01(\
    \x0b2\x0c.MNKGMOHKAAPH\0R\x0bPNEMAFHKFII\x121\n\x0bFCBEKOPHFMG\x18\xc9\
    \x04\x20\x01(\x0b2\x0c.CNNDEHKLFFFH\0R\x0bFCBEKOPHFMG\x121\n\x0bPBAHDAIC\
    IIH\x18\xec\x0c\x20\x01(\x0b2\x0c.CNNDEHKLFFFH\0R\x0bPBAHDAICIIH\x121\n\
    \x0bDCHLCCBGIFD\x18\xb3\n\x20\x01(\x0b2\x0c.CNNDEHKLFFFH\0R\x0bDCHLCCBGI\
    FD\x121\n\x0bFNJLPFBCMGJ\x18\xe1\x02\x20\x01(\x0b2\x0c.IDAMGIHKEOPH\0R\
    \x0bFNJLPFBCMGJ\x121\n\x0bHELFGEKGKKP\x18\xaf\x0b\x20\x01(\x0b2\x0c.IDAM\
    GIHKEOPH\0R\x0bHELFGEKGKKP\x121\n\x0bODAHCCBIPNH\x18\xf6\x0e\x20\x01(\
    \x0b2\x0c.IDAMGIHKEOPH\0R\x0bODAHCCBIPNH\x120\n\x0bOMIEOKKFCKC\x181\x20\
    \x01(\x0b2\x0c.IOKINLMLPHHH\0R\x0bOMIEOKKFCKCB\r\n\x0bELPNOOCAFBEb\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(21);
            deps.push(super::CNNDEHKLFFF::file_descriptor().clone());
            deps.push(super::CNNPLJGHDPJ::file_descriptor().clone());
            deps.push(super::GCMDBOFKGCP::file_descriptor().clone());
            deps.push(super::HGNEEFCADKJ::file_descriptor().clone());
            deps.push(super::IDAMGIHKEOP::file_descriptor().clone());
            deps.push(super::IFLAKOOGJJL::file_descriptor().clone());
            deps.push(super::IOKINLMLPHH::file_descriptor().clone());
            deps.push(super::JBHLKMEKJDD::file_descriptor().clone());
            deps.push(super::JFGPGFKMBCC::file_descriptor().clone());
            deps.push(super::KABOEJOMBCK::file_descriptor().clone());
            deps.push(super::KNBAMHIKGJD::file_descriptor().clone());
            deps.push(super::KNCOEENPPON::file_descriptor().clone());
            deps.push(super::MCFLKFLHMMF::file_descriptor().clone());
            deps.push(super::MCLBEAJCELD::file_descriptor().clone());
            deps.push(super::MHOEBCLBNNE::file_descriptor().clone());
            deps.push(super::MNKGMOHKAAP::file_descriptor().clone());
            deps.push(super::NHMMJIHCOGF::file_descriptor().clone());
            deps.push(super::NIDBFAKBKMF::file_descriptor().clone());
            deps.push(super::OMJPKPNNMJM::file_descriptor().clone());
            deps.push(super::RogueCommonBuffSelectInfo::file_descriptor().clone());
            deps.push(super::RogueFormulaSelectInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FJBJJOLJHFL::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
