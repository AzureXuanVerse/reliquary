// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EOIFAHBJKDA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EOIFAHBJKDA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EOIFAHBJKDA {
    // message fields
    // @@protoc_insertion_point(field:EOIFAHBJKDA.NBLBECMLILO)
    pub NBLBECMLILO: ::protobuf::MessageField<super::HIKACJJINBB::HIKACJJINBB>,
    // @@protoc_insertion_point(field:EOIFAHBJKDA.NECNHGJEHKE)
    pub NECNHGJEHKE: ::protobuf::MessageField<super::OICEICJKOCM::OICEICJKOCM>,
    // @@protoc_insertion_point(field:EOIFAHBJKDA.EHANCFILLJJ)
    pub EHANCFILLJJ: ::protobuf::MessageField<super::GMLPPNLMDLA::GMLPPNLMDLA>,
    // @@protoc_insertion_point(field:EOIFAHBJKDA.OCPEDKAHCLO)
    pub OCPEDKAHCLO: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EOIFAHBJKDA.JCFNBLNMICF)
    pub JCFNBLNMICF: ::protobuf::MessageField<super::CDEGEHGOMIC::CDEGEHGOMIC>,
    // @@protoc_insertion_point(field:EOIFAHBJKDA.MGCANKKPCPC)
    pub MGCANKKPCPC: ::protobuf::MessageField<super::NPOOEOOFAGE::NPOOEOOFAGE>,
    // @@protoc_insertion_point(field:EOIFAHBJKDA.NFGDGCIPKNE)
    pub NFGDGCIPKNE: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:EOIFAHBJKDA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EOIFAHBJKDA {
    fn default() -> &'a EOIFAHBJKDA {
        <EOIFAHBJKDA as ::protobuf::Message>::default_instance()
    }
}

impl EOIFAHBJKDA {
    pub fn new() -> EOIFAHBJKDA {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HIKACJJINBB::HIKACJJINBB>(
            "NBLBECMLILO",
            |m: &EOIFAHBJKDA| { &m.NBLBECMLILO },
            |m: &mut EOIFAHBJKDA| { &mut m.NBLBECMLILO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OICEICJKOCM::OICEICJKOCM>(
            "NECNHGJEHKE",
            |m: &EOIFAHBJKDA| { &m.NECNHGJEHKE },
            |m: &mut EOIFAHBJKDA| { &mut m.NECNHGJEHKE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GMLPPNLMDLA::GMLPPNLMDLA>(
            "EHANCFILLJJ",
            |m: &EOIFAHBJKDA| { &m.EHANCFILLJJ },
            |m: &mut EOIFAHBJKDA| { &mut m.EHANCFILLJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OCPEDKAHCLO",
            |m: &EOIFAHBJKDA| { &m.OCPEDKAHCLO },
            |m: &mut EOIFAHBJKDA| { &mut m.OCPEDKAHCLO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CDEGEHGOMIC::CDEGEHGOMIC>(
            "JCFNBLNMICF",
            |m: &EOIFAHBJKDA| { &m.JCFNBLNMICF },
            |m: &mut EOIFAHBJKDA| { &mut m.JCFNBLNMICF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NPOOEOOFAGE::NPOOEOOFAGE>(
            "MGCANKKPCPC",
            |m: &EOIFAHBJKDA| { &m.MGCANKKPCPC },
            |m: &mut EOIFAHBJKDA| { &mut m.MGCANKKPCPC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NFGDGCIPKNE",
            |m: &EOIFAHBJKDA| { &m.NFGDGCIPKNE },
            |m: &mut EOIFAHBJKDA| { &mut m.NFGDGCIPKNE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EOIFAHBJKDA>(
            "EOIFAHBJKDA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EOIFAHBJKDA {
    const NAME: &'static str = "EOIFAHBJKDA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NBLBECMLILO)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NECNHGJEHKE)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EHANCFILLJJ)?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.OCPEDKAHCLO)?;
                },
                56 => {
                    self.OCPEDKAHCLO.push(is.read_uint32()?);
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JCFNBLNMICF)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MGCANKKPCPC)?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.NFGDGCIPKNE)?;
                },
                64 => {
                    self.NFGDGCIPKNE.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.NBLBECMLILO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NECNHGJEHKE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.EHANCFILLJJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.OCPEDKAHCLO {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        if let Some(v) = self.JCFNBLNMICF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MGCANKKPCPC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.NFGDGCIPKNE {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.NBLBECMLILO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.NECNHGJEHKE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.EHANCFILLJJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        for v in &self.OCPEDKAHCLO {
            os.write_uint32(7, *v)?;
        };
        if let Some(v) = self.JCFNBLNMICF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.MGCANKKPCPC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.NFGDGCIPKNE {
            os.write_uint32(8, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EOIFAHBJKDA {
        EOIFAHBJKDA::new()
    }

    fn clear(&mut self) {
        self.NBLBECMLILO.clear();
        self.NECNHGJEHKE.clear();
        self.EHANCFILLJJ.clear();
        self.OCPEDKAHCLO.clear();
        self.JCFNBLNMICF.clear();
        self.MGCANKKPCPC.clear();
        self.NFGDGCIPKNE.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EOIFAHBJKDA {
        static instance: EOIFAHBJKDA = EOIFAHBJKDA {
            NBLBECMLILO: ::protobuf::MessageField::none(),
            NECNHGJEHKE: ::protobuf::MessageField::none(),
            EHANCFILLJJ: ::protobuf::MessageField::none(),
            OCPEDKAHCLO: ::std::vec::Vec::new(),
            JCFNBLNMICF: ::protobuf::MessageField::none(),
            MGCANKKPCPC: ::protobuf::MessageField::none(),
            NFGDGCIPKNE: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EOIFAHBJKDA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EOIFAHBJKDA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EOIFAHBJKDA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EOIFAHBJKDA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EOIFAHBJKDA.proto\x1a\x11CDEGEHGOMIC.proto\x1a\x11GMLPPNLMDLA.prot\
    o\x1a\x11HIKACJJINBB.proto\x1a\x11NPOOEOOFAGE.proto\x1a\x11OICEICJKOCM.p\
    roto\"\xc1\x02\n\x0bEOIFAHBJKDA\x12.\n\x0bNBLBECMLILO\x18\x06\x20\x01(\
    \x0b2\x0c.HIKACJJINBBR\x0bNBLBECMLILO\x12.\n\x0bNECNHGJEHKE\x18\x03\x20\
    \x01(\x0b2\x0c.OICEICJKOCMR\x0bNECNHGJEHKE\x12.\n\x0bEHANCFILLJJ\x18\t\
    \x20\x01(\x0b2\x0c.GMLPPNLMDLAR\x0bEHANCFILLJJ\x12\x20\n\x0bOCPEDKAHCLO\
    \x18\x07\x20\x03(\rR\x0bOCPEDKAHCLO\x12.\n\x0bJCFNBLNMICF\x18\x0f\x20\
    \x01(\x0b2\x0c.CDEGEHGOMICR\x0bJCFNBLNMICF\x12.\n\x0bMGCANKKPCPC\x18\x01\
    \x20\x01(\x0b2\x0c.NPOOEOOFAGER\x0bMGCANKKPCPC\x12\x20\n\x0bNFGDGCIPKNE\
    \x18\x08\x20\x03(\rR\x0bNFGDGCIPKNEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::CDEGEHGOMIC::file_descriptor().clone());
            deps.push(super::GMLPPNLMDLA::file_descriptor().clone());
            deps.push(super::HIKACJJINBB::file_descriptor().clone());
            deps.push(super::NPOOEOOFAGE::file_descriptor().clone());
            deps.push(super::OICEICJKOCM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EOIFAHBJKDA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
