// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChessRogueNousStoryInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChessRogueNousStoryInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChessRogueNousStoryInfo {
    // message fields
    // @@protoc_insertion_point(field:ChessRogueNousStoryInfo.HCPCJBDBBGC)
    pub HCPCJBDBBGC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueNousStoryInfo.INPDLILFOCO)
    pub INPDLILFOCO: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueNousStoryInfo.sub_story_id)
    pub sub_story_id: u32,
    // @@protoc_insertion_point(field:ChessRogueNousStoryInfo.CKEKKMGIHKJ)
    pub CKEKKMGIHKJ: bool,
    // @@protoc_insertion_point(field:ChessRogueNousStoryInfo.AHOJIDMLFPE)
    pub AHOJIDMLFPE: bool,
    // @@protoc_insertion_point(field:ChessRogueNousStoryInfo.CMHLEEKNFKH)
    pub CMHLEEKNFKH: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueNousStoryInfo.story_id)
    pub story_id: u32,
    // @@protoc_insertion_point(field:ChessRogueNousStoryInfo.ACLGLHEFFON)
    pub ACLGLHEFFON: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ChessRogueNousStoryInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChessRogueNousStoryInfo {
    fn default() -> &'a ChessRogueNousStoryInfo {
        <ChessRogueNousStoryInfo as ::protobuf::Message>::default_instance()
    }
}

impl ChessRogueNousStoryInfo {
    pub fn new() -> ChessRogueNousStoryInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HCPCJBDBBGC",
            |m: &ChessRogueNousStoryInfo| { &m.HCPCJBDBBGC },
            |m: &mut ChessRogueNousStoryInfo| { &mut m.HCPCJBDBBGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "INPDLILFOCO",
            |m: &ChessRogueNousStoryInfo| { &m.INPDLILFOCO },
            |m: &mut ChessRogueNousStoryInfo| { &mut m.INPDLILFOCO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sub_story_id",
            |m: &ChessRogueNousStoryInfo| { &m.sub_story_id },
            |m: &mut ChessRogueNousStoryInfo| { &mut m.sub_story_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CKEKKMGIHKJ",
            |m: &ChessRogueNousStoryInfo| { &m.CKEKKMGIHKJ },
            |m: &mut ChessRogueNousStoryInfo| { &mut m.CKEKKMGIHKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AHOJIDMLFPE",
            |m: &ChessRogueNousStoryInfo| { &m.AHOJIDMLFPE },
            |m: &mut ChessRogueNousStoryInfo| { &mut m.AHOJIDMLFPE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CMHLEEKNFKH",
            |m: &ChessRogueNousStoryInfo| { &m.CMHLEEKNFKH },
            |m: &mut ChessRogueNousStoryInfo| { &mut m.CMHLEEKNFKH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "story_id",
            |m: &ChessRogueNousStoryInfo| { &m.story_id },
            |m: &mut ChessRogueNousStoryInfo| { &mut m.story_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACLGLHEFFON",
            |m: &ChessRogueNousStoryInfo| { &m.ACLGLHEFFON },
            |m: &mut ChessRogueNousStoryInfo| { &mut m.ACLGLHEFFON },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChessRogueNousStoryInfo>(
            "ChessRogueNousStoryInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChessRogueNousStoryInfo {
    const NAME: &'static str = "ChessRogueNousStoryInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.HCPCJBDBBGC)?;
                },
                8 => {
                    self.HCPCJBDBBGC.push(is.read_uint32()?);
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.INPDLILFOCO)?;
                },
                72 => {
                    self.INPDLILFOCO.push(is.read_uint32()?);
                },
                56 => {
                    self.sub_story_id = is.read_uint32()?;
                },
                64 => {
                    self.CKEKKMGIHKJ = is.read_bool()?;
                },
                96 => {
                    self.AHOJIDMLFPE = is.read_bool()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.CMHLEEKNFKH)?;
                },
                32 => {
                    self.CMHLEEKNFKH.push(is.read_uint32()?);
                },
                24 => {
                    self.story_id = is.read_uint32()?;
                },
                112 => {
                    self.ACLGLHEFFON = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.HCPCJBDBBGC {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        for value in &self.INPDLILFOCO {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        if self.sub_story_id != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.sub_story_id);
        }
        if self.CKEKKMGIHKJ != false {
            my_size += 1 + 1;
        }
        if self.AHOJIDMLFPE != false {
            my_size += 1 + 1;
        }
        for value in &self.CMHLEEKNFKH {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        if self.story_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.story_id);
        }
        if self.ACLGLHEFFON != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.ACLGLHEFFON);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.HCPCJBDBBGC {
            os.write_uint32(1, *v)?;
        };
        for v in &self.INPDLILFOCO {
            os.write_uint32(9, *v)?;
        };
        if self.sub_story_id != 0 {
            os.write_uint32(7, self.sub_story_id)?;
        }
        if self.CKEKKMGIHKJ != false {
            os.write_bool(8, self.CKEKKMGIHKJ)?;
        }
        if self.AHOJIDMLFPE != false {
            os.write_bool(12, self.AHOJIDMLFPE)?;
        }
        for v in &self.CMHLEEKNFKH {
            os.write_uint32(4, *v)?;
        };
        if self.story_id != 0 {
            os.write_uint32(3, self.story_id)?;
        }
        if self.ACLGLHEFFON != 0 {
            os.write_uint32(14, self.ACLGLHEFFON)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChessRogueNousStoryInfo {
        ChessRogueNousStoryInfo::new()
    }

    fn clear(&mut self) {
        self.HCPCJBDBBGC.clear();
        self.INPDLILFOCO.clear();
        self.sub_story_id = 0;
        self.CKEKKMGIHKJ = false;
        self.AHOJIDMLFPE = false;
        self.CMHLEEKNFKH.clear();
        self.story_id = 0;
        self.ACLGLHEFFON = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChessRogueNousStoryInfo {
        static instance: ChessRogueNousStoryInfo = ChessRogueNousStoryInfo {
            HCPCJBDBBGC: ::std::vec::Vec::new(),
            INPDLILFOCO: ::std::vec::Vec::new(),
            sub_story_id: 0,
            CKEKKMGIHKJ: false,
            AHOJIDMLFPE: false,
            CMHLEEKNFKH: ::std::vec::Vec::new(),
            story_id: 0,
            ACLGLHEFFON: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChessRogueNousStoryInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChessRogueNousStoryInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChessRogueNousStoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChessRogueNousStoryInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dChessRogueNousStoryInfo.proto\"\xa2\x02\n\x17ChessRogueNousStoryIn\
    fo\x12\x20\n\x0bHCPCJBDBBGC\x18\x01\x20\x03(\rR\x0bHCPCJBDBBGC\x12\x20\n\
    \x0bINPDLILFOCO\x18\t\x20\x03(\rR\x0bINPDLILFOCO\x12\x20\n\x0csub_story_\
    id\x18\x07\x20\x01(\rR\nsubStoryId\x12\x20\n\x0bCKEKKMGIHKJ\x18\x08\x20\
    \x01(\x08R\x0bCKEKKMGIHKJ\x12\x20\n\x0bAHOJIDMLFPE\x18\x0c\x20\x01(\x08R\
    \x0bAHOJIDMLFPE\x12\x20\n\x0bCMHLEEKNFKH\x18\x04\x20\x03(\rR\x0bCMHLEEKN\
    FKH\x12\x19\n\x08story_id\x18\x03\x20\x01(\rR\x07storyId\x12\x20\n\x0bAC\
    LGLHEFFON\x18\x0e\x20\x01(\rR\x0bACLGLHEFFONB\x15\n\x13emu.lunarcore.pro\
    tob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChessRogueNousStoryInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
