// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MLLIHAFDLNI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MLLIHAFDLNI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MLLIHAFDLNI {
    // message fields
    // @@protoc_insertion_point(field:MLLIHAFDLNI.AKIPOMICHLN)
    pub AKIPOMICHLN: u32,
    // @@protoc_insertion_point(field:MLLIHAFDLNI.AMMLLHIPCJD)
    pub AMMLLHIPCJD: u32,
    // @@protoc_insertion_point(field:MLLIHAFDLNI.NGDOMFANIIG)
    pub NGDOMFANIIG: u32,
    // @@protoc_insertion_point(field:MLLIHAFDLNI.MABOADKJOBN)
    pub MABOADKJOBN: u32,
    // @@protoc_insertion_point(field:MLLIHAFDLNI.ILOFGGJMEPE)
    pub ILOFGGJMEPE: u32,
    // @@protoc_insertion_point(field:MLLIHAFDLNI.DNHIFPGJOCD)
    pub DNHIFPGJOCD: u32,
    // @@protoc_insertion_point(field:MLLIHAFDLNI.GBLCINBPGNJ)
    pub GBLCINBPGNJ: u32,
    // @@protoc_insertion_point(field:MLLIHAFDLNI.CKKOPNHBFOM)
    pub CKKOPNHBFOM: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:MLLIHAFDLNI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MLLIHAFDLNI {
    fn default() -> &'a MLLIHAFDLNI {
        <MLLIHAFDLNI as ::protobuf::Message>::default_instance()
    }
}

impl MLLIHAFDLNI {
    pub fn new() -> MLLIHAFDLNI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AKIPOMICHLN",
            |m: &MLLIHAFDLNI| { &m.AKIPOMICHLN },
            |m: &mut MLLIHAFDLNI| { &mut m.AKIPOMICHLN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AMMLLHIPCJD",
            |m: &MLLIHAFDLNI| { &m.AMMLLHIPCJD },
            |m: &mut MLLIHAFDLNI| { &mut m.AMMLLHIPCJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NGDOMFANIIG",
            |m: &MLLIHAFDLNI| { &m.NGDOMFANIIG },
            |m: &mut MLLIHAFDLNI| { &mut m.NGDOMFANIIG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MABOADKJOBN",
            |m: &MLLIHAFDLNI| { &m.MABOADKJOBN },
            |m: &mut MLLIHAFDLNI| { &mut m.MABOADKJOBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ILOFGGJMEPE",
            |m: &MLLIHAFDLNI| { &m.ILOFGGJMEPE },
            |m: &mut MLLIHAFDLNI| { &mut m.ILOFGGJMEPE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DNHIFPGJOCD",
            |m: &MLLIHAFDLNI| { &m.DNHIFPGJOCD },
            |m: &mut MLLIHAFDLNI| { &mut m.DNHIFPGJOCD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GBLCINBPGNJ",
            |m: &MLLIHAFDLNI| { &m.GBLCINBPGNJ },
            |m: &mut MLLIHAFDLNI| { &mut m.GBLCINBPGNJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CKKOPNHBFOM",
            |m: &MLLIHAFDLNI| { &m.CKKOPNHBFOM },
            |m: &mut MLLIHAFDLNI| { &mut m.CKKOPNHBFOM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MLLIHAFDLNI>(
            "MLLIHAFDLNI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MLLIHAFDLNI {
    const NAME: &'static str = "MLLIHAFDLNI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.AKIPOMICHLN = is.read_uint32()?;
                },
                16 => {
                    self.AMMLLHIPCJD = is.read_uint32()?;
                },
                24 => {
                    self.NGDOMFANIIG = is.read_uint32()?;
                },
                32 => {
                    self.MABOADKJOBN = is.read_uint32()?;
                },
                40 => {
                    self.ILOFGGJMEPE = is.read_uint32()?;
                },
                48 => {
                    self.DNHIFPGJOCD = is.read_uint32()?;
                },
                56 => {
                    self.GBLCINBPGNJ = is.read_uint32()?;
                },
                66 => {
                    self.CKKOPNHBFOM = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.AKIPOMICHLN != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.AKIPOMICHLN);
        }
        if self.AMMLLHIPCJD != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.AMMLLHIPCJD);
        }
        if self.NGDOMFANIIG != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.NGDOMFANIIG);
        }
        if self.MABOADKJOBN != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.MABOADKJOBN);
        }
        if self.ILOFGGJMEPE != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.ILOFGGJMEPE);
        }
        if self.DNHIFPGJOCD != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.DNHIFPGJOCD);
        }
        if self.GBLCINBPGNJ != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.GBLCINBPGNJ);
        }
        if !self.CKKOPNHBFOM.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.CKKOPNHBFOM);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.AKIPOMICHLN != 0 {
            os.write_uint32(1, self.AKIPOMICHLN)?;
        }
        if self.AMMLLHIPCJD != 0 {
            os.write_uint32(2, self.AMMLLHIPCJD)?;
        }
        if self.NGDOMFANIIG != 0 {
            os.write_uint32(3, self.NGDOMFANIIG)?;
        }
        if self.MABOADKJOBN != 0 {
            os.write_uint32(4, self.MABOADKJOBN)?;
        }
        if self.ILOFGGJMEPE != 0 {
            os.write_uint32(5, self.ILOFGGJMEPE)?;
        }
        if self.DNHIFPGJOCD != 0 {
            os.write_uint32(6, self.DNHIFPGJOCD)?;
        }
        if self.GBLCINBPGNJ != 0 {
            os.write_uint32(7, self.GBLCINBPGNJ)?;
        }
        if !self.CKKOPNHBFOM.is_empty() {
            os.write_string(8, &self.CKKOPNHBFOM)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MLLIHAFDLNI {
        MLLIHAFDLNI::new()
    }

    fn clear(&mut self) {
        self.AKIPOMICHLN = 0;
        self.AMMLLHIPCJD = 0;
        self.NGDOMFANIIG = 0;
        self.MABOADKJOBN = 0;
        self.ILOFGGJMEPE = 0;
        self.DNHIFPGJOCD = 0;
        self.GBLCINBPGNJ = 0;
        self.CKKOPNHBFOM.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MLLIHAFDLNI {
        static instance: MLLIHAFDLNI = MLLIHAFDLNI {
            AKIPOMICHLN: 0,
            AMMLLHIPCJD: 0,
            NGDOMFANIIG: 0,
            MABOADKJOBN: 0,
            ILOFGGJMEPE: 0,
            DNHIFPGJOCD: 0,
            GBLCINBPGNJ: 0,
            CKKOPNHBFOM: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MLLIHAFDLNI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MLLIHAFDLNI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MLLIHAFDLNI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MLLIHAFDLNI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MLLIHAFDLNI.proto\"\x9d\x02\n\x0bMLLIHAFDLNI\x12\x20\n\x0bAKIPOMIC\
    HLN\x18\x01\x20\x01(\rR\x0bAKIPOMICHLN\x12\x20\n\x0bAMMLLHIPCJD\x18\x02\
    \x20\x01(\rR\x0bAMMLLHIPCJD\x12\x20\n\x0bNGDOMFANIIG\x18\x03\x20\x01(\rR\
    \x0bNGDOMFANIIG\x12\x20\n\x0bMABOADKJOBN\x18\x04\x20\x01(\rR\x0bMABOADKJ\
    OBN\x12\x20\n\x0bILOFGGJMEPE\x18\x05\x20\x01(\rR\x0bILOFGGJMEPE\x12\x20\
    \n\x0bDNHIFPGJOCD\x18\x06\x20\x01(\rR\x0bDNHIFPGJOCD\x12\x20\n\x0bGBLCIN\
    BPGNJ\x18\x07\x20\x01(\rR\x0bGBLCINBPGNJ\x12\x20\n\x0bCKKOPNHBFOM\x18\
    \x08\x20\x01(\tR\x0bCKKOPNHBFOMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MLLIHAFDLNI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
