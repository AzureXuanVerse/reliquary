// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BNKNFJKMJIE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BNKNFJKMJIE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BNKNFJKMJIE {
    // message fields
    // @@protoc_insertion_point(field:BNKNFJKMJIE.NKBCLDKKHIC)
    pub NKBCLDKKHIC: ::protobuf::MessageField<super::MCMHFOBCJAP::MCMHFOBCJAP>,
    // @@protoc_insertion_point(field:BNKNFJKMJIE.IPNHCCODNDI)
    pub IPNHCCODNDI: u32,
    // @@protoc_insertion_point(field:BNKNFJKMJIE.GBMAAJIKNAJ)
    pub GBMAAJIKNAJ: i32,
    // @@protoc_insertion_point(field:BNKNFJKMJIE.DAELBDIDMMH)
    pub DAELBDIDMMH: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:BNKNFJKMJIE.GCGAPALDNLK)
    pub GCGAPALDNLK: i32,
    // @@protoc_insertion_point(field:BNKNFJKMJIE.IGODAFNLDCK)
    pub IGODAFNLDCK: u32,
    // @@protoc_insertion_point(field:BNKNFJKMJIE.PFGAHNOAPHB)
    pub PFGAHNOAPHB: u32,
    // @@protoc_insertion_point(field:BNKNFJKMJIE.HEEDLFMBNJH)
    pub HEEDLFMBNJH: u32,
    // @@protoc_insertion_point(field:BNKNFJKMJIE.EAMJPKMKKHK)
    pub EAMJPKMKKHK: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:BNKNFJKMJIE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BNKNFJKMJIE {
    fn default() -> &'a BNKNFJKMJIE {
        <BNKNFJKMJIE as ::protobuf::Message>::default_instance()
    }
}

impl BNKNFJKMJIE {
    pub fn new() -> BNKNFJKMJIE {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MCMHFOBCJAP::MCMHFOBCJAP>(
            "NKBCLDKKHIC",
            |m: &BNKNFJKMJIE| { &m.NKBCLDKKHIC },
            |m: &mut BNKNFJKMJIE| { &mut m.NKBCLDKKHIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IPNHCCODNDI",
            |m: &BNKNFJKMJIE| { &m.IPNHCCODNDI },
            |m: &mut BNKNFJKMJIE| { &mut m.IPNHCCODNDI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GBMAAJIKNAJ",
            |m: &BNKNFJKMJIE| { &m.GBMAAJIKNAJ },
            |m: &mut BNKNFJKMJIE| { &mut m.GBMAAJIKNAJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DAELBDIDMMH",
            |m: &BNKNFJKMJIE| { &m.DAELBDIDMMH },
            |m: &mut BNKNFJKMJIE| { &mut m.DAELBDIDMMH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GCGAPALDNLK",
            |m: &BNKNFJKMJIE| { &m.GCGAPALDNLK },
            |m: &mut BNKNFJKMJIE| { &mut m.GCGAPALDNLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IGODAFNLDCK",
            |m: &BNKNFJKMJIE| { &m.IGODAFNLDCK },
            |m: &mut BNKNFJKMJIE| { &mut m.IGODAFNLDCK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PFGAHNOAPHB",
            |m: &BNKNFJKMJIE| { &m.PFGAHNOAPHB },
            |m: &mut BNKNFJKMJIE| { &mut m.PFGAHNOAPHB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HEEDLFMBNJH",
            |m: &BNKNFJKMJIE| { &m.HEEDLFMBNJH },
            |m: &mut BNKNFJKMJIE| { &mut m.HEEDLFMBNJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EAMJPKMKKHK",
            |m: &BNKNFJKMJIE| { &m.EAMJPKMKKHK },
            |m: &mut BNKNFJKMJIE| { &mut m.EAMJPKMKKHK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BNKNFJKMJIE>(
            "BNKNFJKMJIE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BNKNFJKMJIE {
    const NAME: &'static str = "BNKNFJKMJIE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NKBCLDKKHIC)?;
                },
                8 => {
                    self.IPNHCCODNDI = is.read_uint32()?;
                },
                48 => {
                    self.GBMAAJIKNAJ = is.read_int32()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.DAELBDIDMMH)?;
                },
                24 => {
                    self.DAELBDIDMMH.push(is.read_uint32()?);
                },
                56 => {
                    self.GCGAPALDNLK = is.read_int32()?;
                },
                96 => {
                    self.IGODAFNLDCK = is.read_uint32()?;
                },
                104 => {
                    self.PFGAHNOAPHB = is.read_uint32()?;
                },
                88 => {
                    self.HEEDLFMBNJH = is.read_uint32()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.EAMJPKMKKHK)?;
                },
                64 => {
                    self.EAMJPKMKKHK.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.NKBCLDKKHIC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.IPNHCCODNDI != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.IPNHCCODNDI);
        }
        if self.GBMAAJIKNAJ != 0 {
            my_size += ::protobuf::rt::int32_size(6, self.GBMAAJIKNAJ);
        }
        for value in &self.DAELBDIDMMH {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        if self.GCGAPALDNLK != 0 {
            my_size += ::protobuf::rt::int32_size(7, self.GCGAPALDNLK);
        }
        if self.IGODAFNLDCK != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.IGODAFNLDCK);
        }
        if self.PFGAHNOAPHB != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.PFGAHNOAPHB);
        }
        if self.HEEDLFMBNJH != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.HEEDLFMBNJH);
        }
        for value in &self.EAMJPKMKKHK {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.NKBCLDKKHIC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.IPNHCCODNDI != 0 {
            os.write_uint32(1, self.IPNHCCODNDI)?;
        }
        if self.GBMAAJIKNAJ != 0 {
            os.write_int32(6, self.GBMAAJIKNAJ)?;
        }
        for v in &self.DAELBDIDMMH {
            os.write_uint32(3, *v)?;
        };
        if self.GCGAPALDNLK != 0 {
            os.write_int32(7, self.GCGAPALDNLK)?;
        }
        if self.IGODAFNLDCK != 0 {
            os.write_uint32(12, self.IGODAFNLDCK)?;
        }
        if self.PFGAHNOAPHB != 0 {
            os.write_uint32(13, self.PFGAHNOAPHB)?;
        }
        if self.HEEDLFMBNJH != 0 {
            os.write_uint32(11, self.HEEDLFMBNJH)?;
        }
        for v in &self.EAMJPKMKKHK {
            os.write_uint32(8, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BNKNFJKMJIE {
        BNKNFJKMJIE::new()
    }

    fn clear(&mut self) {
        self.NKBCLDKKHIC.clear();
        self.IPNHCCODNDI = 0;
        self.GBMAAJIKNAJ = 0;
        self.DAELBDIDMMH.clear();
        self.GCGAPALDNLK = 0;
        self.IGODAFNLDCK = 0;
        self.PFGAHNOAPHB = 0;
        self.HEEDLFMBNJH = 0;
        self.EAMJPKMKKHK.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BNKNFJKMJIE {
        static instance: BNKNFJKMJIE = BNKNFJKMJIE {
            NKBCLDKKHIC: ::protobuf::MessageField::none(),
            IPNHCCODNDI: 0,
            GBMAAJIKNAJ: 0,
            DAELBDIDMMH: ::std::vec::Vec::new(),
            GCGAPALDNLK: 0,
            IGODAFNLDCK: 0,
            PFGAHNOAPHB: 0,
            HEEDLFMBNJH: 0,
            EAMJPKMKKHK: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BNKNFJKMJIE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BNKNFJKMJIE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BNKNFJKMJIE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BNKNFJKMJIE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BNKNFJKMJIE.proto\x1a\x11MCMHFOBCJAP.proto\"\xcd\x02\n\x0bBNKNFJKM\
    JIE\x12.\n\x0bNKBCLDKKHIC\x18\x04\x20\x01(\x0b2\x0c.MCMHFOBCJAPR\x0bNKBC\
    LDKKHIC\x12\x20\n\x0bIPNHCCODNDI\x18\x01\x20\x01(\rR\x0bIPNHCCODNDI\x12\
    \x20\n\x0bGBMAAJIKNAJ\x18\x06\x20\x01(\x05R\x0bGBMAAJIKNAJ\x12\x20\n\x0b\
    DAELBDIDMMH\x18\x03\x20\x03(\rR\x0bDAELBDIDMMH\x12\x20\n\x0bGCGAPALDNLK\
    \x18\x07\x20\x01(\x05R\x0bGCGAPALDNLK\x12\x20\n\x0bIGODAFNLDCK\x18\x0c\
    \x20\x01(\rR\x0bIGODAFNLDCK\x12\x20\n\x0bPFGAHNOAPHB\x18\r\x20\x01(\rR\
    \x0bPFGAHNOAPHB\x12\x20\n\x0bHEEDLFMBNJH\x18\x0b\x20\x01(\rR\x0bHEEDLFMB\
    NJH\x12\x20\n\x0bEAMJPKMKKHK\x18\x08\x20\x03(\rR\x0bEAMJPKMKKHKb\x06prot\
    o3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::MCMHFOBCJAP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BNKNFJKMJIE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
