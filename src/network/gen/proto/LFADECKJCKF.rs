// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LFADECKJCKF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LFADECKJCKF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LFADECKJCKF {
    // message oneof groups
    pub OMAJMFBFFPN: ::std::option::Option<lfadeckjckf::OMAJMFBFFPN>,
    // special fields
    // @@protoc_insertion_point(special_field:LFADECKJCKF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LFADECKJCKF {
    fn default() -> &'a LFADECKJCKF {
        <LFADECKJCKF as ::protobuf::Message>::default_instance()
    }
}

impl LFADECKJCKF {
    pub fn new() -> LFADECKJCKF {
        ::std::default::Default::default()
    }

    // .CGGNPNCKNNB LGMGMJPCKLF = 15;

    pub fn LGMGMJPCKLF(&self) -> &super::CGGNPNCKNNB::CGGNPNCKNNB {
        match self.OMAJMFBFFPN {
            ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(ref v)) => v,
            _ => <super::CGGNPNCKNNB::CGGNPNCKNNB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LGMGMJPCKLF(&mut self) {
        self.OMAJMFBFFPN = ::std::option::Option::None;
    }

    pub fn has_LGMGMJPCKLF(&self) -> bool {
        match self.OMAJMFBFFPN {
            ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LGMGMJPCKLF(&mut self, v: super::CGGNPNCKNNB::CGGNPNCKNNB) {
        self.OMAJMFBFFPN = ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LGMGMJPCKLF(&mut self) -> &mut super::CGGNPNCKNNB::CGGNPNCKNNB {
        if let ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(_)) = self.OMAJMFBFFPN {
        } else {
            self.OMAJMFBFFPN = ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(super::CGGNPNCKNNB::CGGNPNCKNNB::new()));
        }
        match self.OMAJMFBFFPN {
            ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LGMGMJPCKLF(&mut self) -> super::CGGNPNCKNNB::CGGNPNCKNNB {
        if self.has_LGMGMJPCKLF() {
            match self.OMAJMFBFFPN.take() {
                ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGGNPNCKNNB::CGGNPNCKNNB::new()
        }
    }

    // .GMFDEDPDCGK PMMFKOJCBCO = 13;

    pub fn PMMFKOJCBCO(&self) -> &super::GMFDEDPDCGK::GMFDEDPDCGK {
        match self.OMAJMFBFFPN {
            ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(ref v)) => v,
            _ => <super::GMFDEDPDCGK::GMFDEDPDCGK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMMFKOJCBCO(&mut self) {
        self.OMAJMFBFFPN = ::std::option::Option::None;
    }

    pub fn has_PMMFKOJCBCO(&self) -> bool {
        match self.OMAJMFBFFPN {
            ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMMFKOJCBCO(&mut self, v: super::GMFDEDPDCGK::GMFDEDPDCGK) {
        self.OMAJMFBFFPN = ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMMFKOJCBCO(&mut self) -> &mut super::GMFDEDPDCGK::GMFDEDPDCGK {
        if let ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(_)) = self.OMAJMFBFFPN {
        } else {
            self.OMAJMFBFFPN = ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(super::GMFDEDPDCGK::GMFDEDPDCGK::new()));
        }
        match self.OMAJMFBFFPN {
            ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMMFKOJCBCO(&mut self) -> super::GMFDEDPDCGK::GMFDEDPDCGK {
        if self.has_PMMFKOJCBCO() {
            match self.OMAJMFBFFPN.take() {
                ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GMFDEDPDCGK::GMFDEDPDCGK::new()
        }
    }

    // .LODGMABJHNC OAFELKEEMFE = 2;

    pub fn OAFELKEEMFE(&self) -> &super::LODGMABJHNC::LODGMABJHNC {
        match self.OMAJMFBFFPN {
            ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(ref v)) => v,
            _ => <super::LODGMABJHNC::LODGMABJHNC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OAFELKEEMFE(&mut self) {
        self.OMAJMFBFFPN = ::std::option::Option::None;
    }

    pub fn has_OAFELKEEMFE(&self) -> bool {
        match self.OMAJMFBFFPN {
            ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OAFELKEEMFE(&mut self, v: super::LODGMABJHNC::LODGMABJHNC) {
        self.OMAJMFBFFPN = ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OAFELKEEMFE(&mut self) -> &mut super::LODGMABJHNC::LODGMABJHNC {
        if let ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(_)) = self.OMAJMFBFFPN {
        } else {
            self.OMAJMFBFFPN = ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(super::LODGMABJHNC::LODGMABJHNC::new()));
        }
        match self.OMAJMFBFFPN {
            ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OAFELKEEMFE(&mut self) -> super::LODGMABJHNC::LODGMABJHNC {
        if self.has_OAFELKEEMFE() {
            match self.OMAJMFBFFPN.take() {
                ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LODGMABJHNC::LODGMABJHNC::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGGNPNCKNNB::CGGNPNCKNNB>(
            "LGMGMJPCKLF",
            LFADECKJCKF::has_LGMGMJPCKLF,
            LFADECKJCKF::LGMGMJPCKLF,
            LFADECKJCKF::mut_LGMGMJPCKLF,
            LFADECKJCKF::set_LGMGMJPCKLF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GMFDEDPDCGK::GMFDEDPDCGK>(
            "PMMFKOJCBCO",
            LFADECKJCKF::has_PMMFKOJCBCO,
            LFADECKJCKF::PMMFKOJCBCO,
            LFADECKJCKF::mut_PMMFKOJCBCO,
            LFADECKJCKF::set_PMMFKOJCBCO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LODGMABJHNC::LODGMABJHNC>(
            "OAFELKEEMFE",
            LFADECKJCKF::has_OAFELKEEMFE,
            LFADECKJCKF::OAFELKEEMFE,
            LFADECKJCKF::mut_OAFELKEEMFE,
            LFADECKJCKF::set_OAFELKEEMFE,
        ));
        oneofs.push(lfadeckjckf::OMAJMFBFFPN::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LFADECKJCKF>(
            "LFADECKJCKF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LFADECKJCKF {
    const NAME: &'static str = "LFADECKJCKF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                122 => {
                    self.OMAJMFBFFPN = ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(is.read_message()?));
                },
                106 => {
                    self.OMAJMFBFFPN = ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(is.read_message()?));
                },
                18 => {
                    self.OMAJMFBFFPN = ::std::option::Option::Some(lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.OMAJMFBFFPN {
            match v {
                &lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.OMAJMFBFFPN {
            match v {
                &lfadeckjckf::OMAJMFBFFPN::LGMGMJPCKLF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &lfadeckjckf::OMAJMFBFFPN::PMMFKOJCBCO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &lfadeckjckf::OMAJMFBFFPN::OAFELKEEMFE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LFADECKJCKF {
        LFADECKJCKF::new()
    }

    fn clear(&mut self) {
        self.OMAJMFBFFPN = ::std::option::Option::None;
        self.OMAJMFBFFPN = ::std::option::Option::None;
        self.OMAJMFBFFPN = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LFADECKJCKF {
        static instance: LFADECKJCKF = LFADECKJCKF {
            OMAJMFBFFPN: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LFADECKJCKF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LFADECKJCKF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LFADECKJCKF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LFADECKJCKF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LFADECKJCKF`
pub mod lfadeckjckf {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:LFADECKJCKF.OMAJMFBFFPN)
    pub enum OMAJMFBFFPN {
        // @@protoc_insertion_point(oneof_field:LFADECKJCKF.LGMGMJPCKLF)
        LGMGMJPCKLF(super::super::CGGNPNCKNNB::CGGNPNCKNNB),
        // @@protoc_insertion_point(oneof_field:LFADECKJCKF.PMMFKOJCBCO)
        PMMFKOJCBCO(super::super::GMFDEDPDCGK::GMFDEDPDCGK),
        // @@protoc_insertion_point(oneof_field:LFADECKJCKF.OAFELKEEMFE)
        OAFELKEEMFE(super::super::LODGMABJHNC::LODGMABJHNC),
    }

    impl ::protobuf::Oneof for OMAJMFBFFPN {
    }

    impl ::protobuf::OneofFull for OMAJMFBFFPN {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::LFADECKJCKF as ::protobuf::MessageFull>::descriptor().oneof_by_name("OMAJMFBFFPN").unwrap()).clone()
        }
    }

    impl OMAJMFBFFPN {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<OMAJMFBFFPN>("OMAJMFBFFPN")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LFADECKJCKF.proto\x1a\x11CGGNPNCKNNB.proto\x1a\x11GMFDEDPDCGK.prot\
    o\x1a\x11LODGMABJHNC.proto\"\xb2\x01\n\x0bLFADECKJCKF\x120\n\x0bLGMGMJPC\
    KLF\x18\x0f\x20\x01(\x0b2\x0c.CGGNPNCKNNBH\0R\x0bLGMGMJPCKLF\x120\n\x0bP\
    MMFKOJCBCO\x18\r\x20\x01(\x0b2\x0c.GMFDEDPDCGKH\0R\x0bPMMFKOJCBCO\x120\n\
    \x0bOAFELKEEMFE\x18\x02\x20\x01(\x0b2\x0c.LODGMABJHNCH\0R\x0bOAFELKEEMFE\
    B\r\n\x0bOMAJMFBFFPNb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::CGGNPNCKNNB::file_descriptor().clone());
            deps.push(super::GMFDEDPDCGK::file_descriptor().clone());
            deps.push(super::LODGMABJHNC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LFADECKJCKF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
