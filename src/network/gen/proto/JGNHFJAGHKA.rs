// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JGNHFJAGHKA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:JGNHFJAGHKA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JGNHFJAGHKA {
    // message fields
    // @@protoc_insertion_point(field:JGNHFJAGHKA.CAILCHDLHCA)
    pub CAILCHDLHCA: ::std::vec::Vec<super::NJKGAOAFDDM::NJKGAOAFDDM>,
    // @@protoc_insertion_point(field:JGNHFJAGHKA.PCHFKBKLDMJ)
    pub PCHFKBKLDMJ: u32,
    // @@protoc_insertion_point(field:JGNHFJAGHKA.KJDMJIMHOJM)
    pub KJDMJIMHOJM: ::std::vec::Vec<super::MNFCLOPJJBO::MNFCLOPJJBO>,
    // @@protoc_insertion_point(field:JGNHFJAGHKA.OFAGGKBMPJN)
    pub OFAGGKBMPJN: u32,
    // @@protoc_insertion_point(field:JGNHFJAGHKA.PKCCIHJKJPM)
    pub PKCCIHJKJPM: ::std::vec::Vec<super::PlayCardBrief::PlayCardBrief>,
    // @@protoc_insertion_point(field:JGNHFJAGHKA.EKDNBEKFECL)
    pub EKDNBEKFECL: u32,
    // @@protoc_insertion_point(field:JGNHFJAGHKA.EIABOFCHOKC)
    pub EIABOFCHOKC: ::protobuf::MessageField<super::LGMKJFEOHEL::LGMKJFEOHEL>,
    // @@protoc_insertion_point(field:JGNHFJAGHKA.OPDABBNHHCG)
    pub OPDABBNHHCG: ::protobuf::MessageField<super::OKFGPABKEJE::OKFGPABKEJE>,
    // @@protoc_insertion_point(field:JGNHFJAGHKA.OHCMOJBPBLG)
    pub OHCMOJBPBLG: ::std::vec::Vec<super::PlaySkillBrief::PlaySkillBrief>,
    // @@protoc_insertion_point(field:JGNHFJAGHKA.LMCBBBEBENJ)
    pub LMCBBBEBENJ: ::protobuf::EnumOrUnknown<super::HOCJJLOCEHN::HOCJJLOCEHN>,
    // special fields
    // @@protoc_insertion_point(special_field:JGNHFJAGHKA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JGNHFJAGHKA {
    fn default() -> &'a JGNHFJAGHKA {
        <JGNHFJAGHKA as ::protobuf::Message>::default_instance()
    }
}

impl JGNHFJAGHKA {
    pub fn new() -> JGNHFJAGHKA {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CAILCHDLHCA",
            |m: &JGNHFJAGHKA| { &m.CAILCHDLHCA },
            |m: &mut JGNHFJAGHKA| { &mut m.CAILCHDLHCA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PCHFKBKLDMJ",
            |m: &JGNHFJAGHKA| { &m.PCHFKBKLDMJ },
            |m: &mut JGNHFJAGHKA| { &mut m.PCHFKBKLDMJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KJDMJIMHOJM",
            |m: &JGNHFJAGHKA| { &m.KJDMJIMHOJM },
            |m: &mut JGNHFJAGHKA| { &mut m.KJDMJIMHOJM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OFAGGKBMPJN",
            |m: &JGNHFJAGHKA| { &m.OFAGGKBMPJN },
            |m: &mut JGNHFJAGHKA| { &mut m.OFAGGKBMPJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PKCCIHJKJPM",
            |m: &JGNHFJAGHKA| { &m.PKCCIHJKJPM },
            |m: &mut JGNHFJAGHKA| { &mut m.PKCCIHJKJPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EKDNBEKFECL",
            |m: &JGNHFJAGHKA| { &m.EKDNBEKFECL },
            |m: &mut JGNHFJAGHKA| { &mut m.EKDNBEKFECL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LGMKJFEOHEL::LGMKJFEOHEL>(
            "EIABOFCHOKC",
            |m: &JGNHFJAGHKA| { &m.EIABOFCHOKC },
            |m: &mut JGNHFJAGHKA| { &mut m.EIABOFCHOKC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OKFGPABKEJE::OKFGPABKEJE>(
            "OPDABBNHHCG",
            |m: &JGNHFJAGHKA| { &m.OPDABBNHHCG },
            |m: &mut JGNHFJAGHKA| { &mut m.OPDABBNHHCG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OHCMOJBPBLG",
            |m: &JGNHFJAGHKA| { &m.OHCMOJBPBLG },
            |m: &mut JGNHFJAGHKA| { &mut m.OHCMOJBPBLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LMCBBBEBENJ",
            |m: &JGNHFJAGHKA| { &m.LMCBBBEBENJ },
            |m: &mut JGNHFJAGHKA| { &mut m.LMCBBBEBENJ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JGNHFJAGHKA>(
            "JGNHFJAGHKA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JGNHFJAGHKA {
    const NAME: &'static str = "JGNHFJAGHKA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.CAILCHDLHCA.push(is.read_message()?);
                },
                112 => {
                    self.PCHFKBKLDMJ = is.read_uint32()?;
                },
                106 => {
                    self.KJDMJIMHOJM.push(is.read_message()?);
                },
                16 => {
                    self.OFAGGKBMPJN = is.read_uint32()?;
                },
                10 => {
                    self.PKCCIHJKJPM.push(is.read_message()?);
                },
                40 => {
                    self.EKDNBEKFECL = is.read_uint32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EIABOFCHOKC)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OPDABBNHHCG)?;
                },
                58 => {
                    self.OHCMOJBPBLG.push(is.read_message()?);
                },
                120 => {
                    self.LMCBBBEBENJ = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.CAILCHDLHCA {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.PCHFKBKLDMJ != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.PCHFKBKLDMJ);
        }
        for value in &self.KJDMJIMHOJM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.OFAGGKBMPJN != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.OFAGGKBMPJN);
        }
        for value in &self.PKCCIHJKJPM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.EKDNBEKFECL != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.EKDNBEKFECL);
        }
        if let Some(v) = self.EIABOFCHOKC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OPDABBNHHCG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.OHCMOJBPBLG {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.LMCBBBEBENJ != ::protobuf::EnumOrUnknown::new(super::HOCJJLOCEHN::HOCJJLOCEHN::TRAIN_PARTY_MT_CATEGORY_NONE) {
            my_size += ::protobuf::rt::int32_size(15, self.LMCBBBEBENJ.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.CAILCHDLHCA {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if self.PCHFKBKLDMJ != 0 {
            os.write_uint32(14, self.PCHFKBKLDMJ)?;
        }
        for v in &self.KJDMJIMHOJM {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        if self.OFAGGKBMPJN != 0 {
            os.write_uint32(2, self.OFAGGKBMPJN)?;
        }
        for v in &self.PKCCIHJKJPM {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.EKDNBEKFECL != 0 {
            os.write_uint32(5, self.EKDNBEKFECL)?;
        }
        if let Some(v) = self.EIABOFCHOKC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.OPDABBNHHCG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        for v in &self.OHCMOJBPBLG {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.LMCBBBEBENJ != ::protobuf::EnumOrUnknown::new(super::HOCJJLOCEHN::HOCJJLOCEHN::TRAIN_PARTY_MT_CATEGORY_NONE) {
            os.write_enum(15, ::protobuf::EnumOrUnknown::value(&self.LMCBBBEBENJ))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JGNHFJAGHKA {
        JGNHFJAGHKA::new()
    }

    fn clear(&mut self) {
        self.CAILCHDLHCA.clear();
        self.PCHFKBKLDMJ = 0;
        self.KJDMJIMHOJM.clear();
        self.OFAGGKBMPJN = 0;
        self.PKCCIHJKJPM.clear();
        self.EKDNBEKFECL = 0;
        self.EIABOFCHOKC.clear();
        self.OPDABBNHHCG.clear();
        self.OHCMOJBPBLG.clear();
        self.LMCBBBEBENJ = ::protobuf::EnumOrUnknown::new(super::HOCJJLOCEHN::HOCJJLOCEHN::TRAIN_PARTY_MT_CATEGORY_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JGNHFJAGHKA {
        static instance: JGNHFJAGHKA = JGNHFJAGHKA {
            CAILCHDLHCA: ::std::vec::Vec::new(),
            PCHFKBKLDMJ: 0,
            KJDMJIMHOJM: ::std::vec::Vec::new(),
            OFAGGKBMPJN: 0,
            PKCCIHJKJPM: ::std::vec::Vec::new(),
            EKDNBEKFECL: 0,
            EIABOFCHOKC: ::protobuf::MessageField::none(),
            OPDABBNHHCG: ::protobuf::MessageField::none(),
            OHCMOJBPBLG: ::std::vec::Vec::new(),
            LMCBBBEBENJ: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JGNHFJAGHKA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JGNHFJAGHKA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JGNHFJAGHKA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JGNHFJAGHKA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JGNHFJAGHKA.proto\x1a\x11HOCJJLOCEHN.proto\x1a\x11LGMKJFEOHEL.prot\
    o\x1a\x11MNFCLOPJJBO.proto\x1a\x11NJKGAOAFDDM.proto\x1a\x11OKFGPABKEJE.p\
    roto\x1a\x13PlayCardBrief.proto\x1a\x14PlaySkillBrief.proto\"\xc8\x03\n\
    \x0bJGNHFJAGHKA\x12.\n\x0bCAILCHDLHCA\x18\x06\x20\x03(\x0b2\x0c.NJKGAOAF\
    DDMR\x0bCAILCHDLHCA\x12\x20\n\x0bPCHFKBKLDMJ\x18\x0e\x20\x01(\rR\x0bPCHF\
    KBKLDMJ\x12.\n\x0bKJDMJIMHOJM\x18\r\x20\x03(\x0b2\x0c.MNFCLOPJJBOR\x0bKJ\
    DMJIMHOJM\x12\x20\n\x0bOFAGGKBMPJN\x18\x02\x20\x01(\rR\x0bOFAGGKBMPJN\
    \x120\n\x0bPKCCIHJKJPM\x18\x01\x20\x03(\x0b2\x0e.PlayCardBriefR\x0bPKCCI\
    HJKJPM\x12\x20\n\x0bEKDNBEKFECL\x18\x05\x20\x01(\rR\x0bEKDNBEKFECL\x12.\
    \n\x0bEIABOFCHOKC\x18\x08\x20\x01(\x0b2\x0c.LGMKJFEOHELR\x0bEIABOFCHOKC\
    \x12.\n\x0bOPDABBNHHCG\x18\x0c\x20\x01(\x0b2\x0c.OKFGPABKEJER\x0bOPDABBN\
    HHCG\x121\n\x0bOHCMOJBPBLG\x18\x07\x20\x03(\x0b2\x0f.PlaySkillBriefR\x0b\
    OHCMOJBPBLG\x12.\n\x0bLMCBBBEBENJ\x18\x0f\x20\x01(\x0e2\x0c.HOCJJLOCEHNR\
    \x0bLMCBBBEBENJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::HOCJJLOCEHN::file_descriptor().clone());
            deps.push(super::LGMKJFEOHEL::file_descriptor().clone());
            deps.push(super::MNFCLOPJJBO::file_descriptor().clone());
            deps.push(super::NJKGAOAFDDM::file_descriptor().clone());
            deps.push(super::OKFGPABKEJE::file_descriptor().clone());
            deps.push(super::PlayCardBrief::file_descriptor().clone());
            deps.push(super::PlaySkillBrief::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JGNHFJAGHKA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
