// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AlleyPlacingGameCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AlleyPlacingGameCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AlleyPlacingGameCsReq {
    // message fields
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.HJFAJPDPPCO)
    pub HJFAJPDPPCO: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.GJBEINMDEIC)
    pub GJBEINMDEIC: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.DBBKNBLOCAH)
    pub DBBKNBLOCAH: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.KKLABDFIIKJ)
    pub KKLABDFIIKJ: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.MEOAIBDFFIB)
    pub MEOAIBDFFIB: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.JLDHAKPMJNM)
    pub JLDHAKPMJNM: ::protobuf::MessageField<super::AlleyPlacingShip::AlleyPlacingShip>,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.OKPEFKACCCI)
    pub OKPEFKACCCI: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.MHJBFLBMGMH)
    pub MHJBFLBMGMH: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.NGKJIPICMPG)
    pub NGKJIPICMPG: u32,
    // special fields
    // @@protoc_insertion_point(special_field:AlleyPlacingGameCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AlleyPlacingGameCsReq {
    fn default() -> &'a AlleyPlacingGameCsReq {
        <AlleyPlacingGameCsReq as ::protobuf::Message>::default_instance()
    }
}

impl AlleyPlacingGameCsReq {
    pub fn new() -> AlleyPlacingGameCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HJFAJPDPPCO",
            |m: &AlleyPlacingGameCsReq| { &m.HJFAJPDPPCO },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.HJFAJPDPPCO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GJBEINMDEIC",
            |m: &AlleyPlacingGameCsReq| { &m.GJBEINMDEIC },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.GJBEINMDEIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBBKNBLOCAH",
            |m: &AlleyPlacingGameCsReq| { &m.DBBKNBLOCAH },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.DBBKNBLOCAH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KKLABDFIIKJ",
            |m: &AlleyPlacingGameCsReq| { &m.KKLABDFIIKJ },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.KKLABDFIIKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MEOAIBDFFIB",
            |m: &AlleyPlacingGameCsReq| { &m.MEOAIBDFFIB },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.MEOAIBDFFIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AlleyPlacingShip::AlleyPlacingShip>(
            "JLDHAKPMJNM",
            |m: &AlleyPlacingGameCsReq| { &m.JLDHAKPMJNM },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.JLDHAKPMJNM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OKPEFKACCCI",
            |m: &AlleyPlacingGameCsReq| { &m.OKPEFKACCCI },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.OKPEFKACCCI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MHJBFLBMGMH",
            |m: &AlleyPlacingGameCsReq| { &m.MHJBFLBMGMH },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.MHJBFLBMGMH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NGKJIPICMPG",
            |m: &AlleyPlacingGameCsReq| { &m.NGKJIPICMPG },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.NGKJIPICMPG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AlleyPlacingGameCsReq>(
            "AlleyPlacingGameCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AlleyPlacingGameCsReq {
    const NAME: &'static str = "AlleyPlacingGameCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                40 => {
                    self.HJFAJPDPPCO = is.read_uint32()?;
                },
                72 => {
                    self.GJBEINMDEIC = is.read_uint32()?;
                },
                48 => {
                    self.DBBKNBLOCAH = is.read_uint32()?;
                },
                32 => {
                    self.KKLABDFIIKJ = is.read_uint32()?;
                },
                112 => {
                    self.MEOAIBDFFIB = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JLDHAKPMJNM)?;
                },
                120 => {
                    self.OKPEFKACCCI = is.read_uint32()?;
                },
                96 => {
                    self.MHJBFLBMGMH = is.read_uint32()?;
                },
                56 => {
                    self.NGKJIPICMPG = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HJFAJPDPPCO != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.HJFAJPDPPCO);
        }
        if self.GJBEINMDEIC != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.GJBEINMDEIC);
        }
        if self.DBBKNBLOCAH != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.DBBKNBLOCAH);
        }
        if self.KKLABDFIIKJ != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.KKLABDFIIKJ);
        }
        if self.MEOAIBDFFIB != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.MEOAIBDFFIB);
        }
        if let Some(v) = self.JLDHAKPMJNM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.OKPEFKACCCI != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.OKPEFKACCCI);
        }
        if self.MHJBFLBMGMH != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.MHJBFLBMGMH);
        }
        if self.NGKJIPICMPG != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.NGKJIPICMPG);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HJFAJPDPPCO != 0 {
            os.write_uint32(5, self.HJFAJPDPPCO)?;
        }
        if self.GJBEINMDEIC != 0 {
            os.write_uint32(9, self.GJBEINMDEIC)?;
        }
        if self.DBBKNBLOCAH != 0 {
            os.write_uint32(6, self.DBBKNBLOCAH)?;
        }
        if self.KKLABDFIIKJ != 0 {
            os.write_uint32(4, self.KKLABDFIIKJ)?;
        }
        if self.MEOAIBDFFIB != 0 {
            os.write_uint32(14, self.MEOAIBDFFIB)?;
        }
        if let Some(v) = self.JLDHAKPMJNM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.OKPEFKACCCI != 0 {
            os.write_uint32(15, self.OKPEFKACCCI)?;
        }
        if self.MHJBFLBMGMH != 0 {
            os.write_uint32(12, self.MHJBFLBMGMH)?;
        }
        if self.NGKJIPICMPG != 0 {
            os.write_uint32(7, self.NGKJIPICMPG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AlleyPlacingGameCsReq {
        AlleyPlacingGameCsReq::new()
    }

    fn clear(&mut self) {
        self.HJFAJPDPPCO = 0;
        self.GJBEINMDEIC = 0;
        self.DBBKNBLOCAH = 0;
        self.KKLABDFIIKJ = 0;
        self.MEOAIBDFFIB = 0;
        self.JLDHAKPMJNM.clear();
        self.OKPEFKACCCI = 0;
        self.MHJBFLBMGMH = 0;
        self.NGKJIPICMPG = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AlleyPlacingGameCsReq {
        static instance: AlleyPlacingGameCsReq = AlleyPlacingGameCsReq {
            HJFAJPDPPCO: 0,
            GJBEINMDEIC: 0,
            DBBKNBLOCAH: 0,
            KKLABDFIIKJ: 0,
            MEOAIBDFFIB: 0,
            JLDHAKPMJNM: ::protobuf::MessageField::none(),
            OKPEFKACCCI: 0,
            MHJBFLBMGMH: 0,
            NGKJIPICMPG: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AlleyPlacingGameCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AlleyPlacingGameCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AlleyPlacingGameCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlleyPlacingGameCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bAlleyPlacingGameCsReq.proto\x1a\x16AlleyPlacingShip.proto\"\xdc\
    \x02\n\x15AlleyPlacingGameCsReq\x12\x20\n\x0bHJFAJPDPPCO\x18\x05\x20\x01\
    (\rR\x0bHJFAJPDPPCO\x12\x20\n\x0bGJBEINMDEIC\x18\t\x20\x01(\rR\x0bGJBEIN\
    MDEIC\x12\x20\n\x0bDBBKNBLOCAH\x18\x06\x20\x01(\rR\x0bDBBKNBLOCAH\x12\
    \x20\n\x0bKKLABDFIIKJ\x18\x04\x20\x01(\rR\x0bKKLABDFIIKJ\x12\x20\n\x0bME\
    OAIBDFFIB\x18\x0e\x20\x01(\rR\x0bMEOAIBDFFIB\x123\n\x0bJLDHAKPMJNM\x18\r\
    \x20\x01(\x0b2\x11.AlleyPlacingShipR\x0bJLDHAKPMJNM\x12\x20\n\x0bOKPEFKA\
    CCCI\x18\x0f\x20\x01(\rR\x0bOKPEFKACCCI\x12\x20\n\x0bMHJBFLBMGMH\x18\x0c\
    \x20\x01(\rR\x0bMHJBFLBMGMH\x12\x20\n\x0bNGKJIPICMPG\x18\x07\x20\x01(\rR\
    \x0bNGKJIPICMPGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::AlleyPlacingShip::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AlleyPlacingGameCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
