// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AlleyPlacingGameCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AlleyPlacingGameCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AlleyPlacingGameCsReq {
    // message fields
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.OFNNFFIJFHB)
    pub OFNNFFIJFHB: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.HAKDFMMHBOA)
    pub HAKDFMMHBOA: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.LMHKMEOAPHG)
    pub LMHKMEOAPHG: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.LOIFAMMMPNE)
    pub LOIFAMMMPNE: ::protobuf::MessageField<super::AlleyPlacingShip::AlleyPlacingShip>,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.LEDMIFJDBHL)
    pub LEDMIFJDBHL: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.CHCNOJAONGF)
    pub CHCNOJAONGF: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.KCLHNGCKJEM)
    pub KCLHNGCKJEM: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.PCCPLLHICJM)
    pub PCCPLLHICJM: u32,
    // @@protoc_insertion_point(field:AlleyPlacingGameCsReq.HDCEPMKIMMG)
    pub HDCEPMKIMMG: u32,
    // special fields
    // @@protoc_insertion_point(special_field:AlleyPlacingGameCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AlleyPlacingGameCsReq {
    fn default() -> &'a AlleyPlacingGameCsReq {
        <AlleyPlacingGameCsReq as ::protobuf::Message>::default_instance()
    }
}

impl AlleyPlacingGameCsReq {
    pub fn new() -> AlleyPlacingGameCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OFNNFFIJFHB",
            |m: &AlleyPlacingGameCsReq| { &m.OFNNFFIJFHB },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.OFNNFFIJFHB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HAKDFMMHBOA",
            |m: &AlleyPlacingGameCsReq| { &m.HAKDFMMHBOA },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.HAKDFMMHBOA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LMHKMEOAPHG",
            |m: &AlleyPlacingGameCsReq| { &m.LMHKMEOAPHG },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.LMHKMEOAPHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AlleyPlacingShip::AlleyPlacingShip>(
            "LOIFAMMMPNE",
            |m: &AlleyPlacingGameCsReq| { &m.LOIFAMMMPNE },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.LOIFAMMMPNE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LEDMIFJDBHL",
            |m: &AlleyPlacingGameCsReq| { &m.LEDMIFJDBHL },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.LEDMIFJDBHL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CHCNOJAONGF",
            |m: &AlleyPlacingGameCsReq| { &m.CHCNOJAONGF },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.CHCNOJAONGF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KCLHNGCKJEM",
            |m: &AlleyPlacingGameCsReq| { &m.KCLHNGCKJEM },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.KCLHNGCKJEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PCCPLLHICJM",
            |m: &AlleyPlacingGameCsReq| { &m.PCCPLLHICJM },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.PCCPLLHICJM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HDCEPMKIMMG",
            |m: &AlleyPlacingGameCsReq| { &m.HDCEPMKIMMG },
            |m: &mut AlleyPlacingGameCsReq| { &mut m.HDCEPMKIMMG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AlleyPlacingGameCsReq>(
            "AlleyPlacingGameCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AlleyPlacingGameCsReq {
    const NAME: &'static str = "AlleyPlacingGameCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.OFNNFFIJFHB = is.read_uint32()?;
                },
                80 => {
                    self.HAKDFMMHBOA = is.read_uint32()?;
                },
                32 => {
                    self.LMHKMEOAPHG = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LOIFAMMMPNE)?;
                },
                24 => {
                    self.LEDMIFJDBHL = is.read_uint32()?;
                },
                8 => {
                    self.CHCNOJAONGF = is.read_uint32()?;
                },
                120 => {
                    self.KCLHNGCKJEM = is.read_uint32()?;
                },
                64 => {
                    self.PCCPLLHICJM = is.read_uint32()?;
                },
                88 => {
                    self.HDCEPMKIMMG = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OFNNFFIJFHB != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.OFNNFFIJFHB);
        }
        if self.HAKDFMMHBOA != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.HAKDFMMHBOA);
        }
        if self.LMHKMEOAPHG != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.LMHKMEOAPHG);
        }
        if let Some(v) = self.LOIFAMMMPNE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.LEDMIFJDBHL != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.LEDMIFJDBHL);
        }
        if self.CHCNOJAONGF != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.CHCNOJAONGF);
        }
        if self.KCLHNGCKJEM != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.KCLHNGCKJEM);
        }
        if self.PCCPLLHICJM != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.PCCPLLHICJM);
        }
        if self.HDCEPMKIMMG != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.HDCEPMKIMMG);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OFNNFFIJFHB != 0 {
            os.write_uint32(7, self.OFNNFFIJFHB)?;
        }
        if self.HAKDFMMHBOA != 0 {
            os.write_uint32(10, self.HAKDFMMHBOA)?;
        }
        if self.LMHKMEOAPHG != 0 {
            os.write_uint32(4, self.LMHKMEOAPHG)?;
        }
        if let Some(v) = self.LOIFAMMMPNE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.LEDMIFJDBHL != 0 {
            os.write_uint32(3, self.LEDMIFJDBHL)?;
        }
        if self.CHCNOJAONGF != 0 {
            os.write_uint32(1, self.CHCNOJAONGF)?;
        }
        if self.KCLHNGCKJEM != 0 {
            os.write_uint32(15, self.KCLHNGCKJEM)?;
        }
        if self.PCCPLLHICJM != 0 {
            os.write_uint32(8, self.PCCPLLHICJM)?;
        }
        if self.HDCEPMKIMMG != 0 {
            os.write_uint32(11, self.HDCEPMKIMMG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AlleyPlacingGameCsReq {
        AlleyPlacingGameCsReq::new()
    }

    fn clear(&mut self) {
        self.OFNNFFIJFHB = 0;
        self.HAKDFMMHBOA = 0;
        self.LMHKMEOAPHG = 0;
        self.LOIFAMMMPNE.clear();
        self.LEDMIFJDBHL = 0;
        self.CHCNOJAONGF = 0;
        self.KCLHNGCKJEM = 0;
        self.PCCPLLHICJM = 0;
        self.HDCEPMKIMMG = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AlleyPlacingGameCsReq {
        static instance: AlleyPlacingGameCsReq = AlleyPlacingGameCsReq {
            OFNNFFIJFHB: 0,
            HAKDFMMHBOA: 0,
            LMHKMEOAPHG: 0,
            LOIFAMMMPNE: ::protobuf::MessageField::none(),
            LEDMIFJDBHL: 0,
            CHCNOJAONGF: 0,
            KCLHNGCKJEM: 0,
            PCCPLLHICJM: 0,
            HDCEPMKIMMG: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AlleyPlacingGameCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AlleyPlacingGameCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AlleyPlacingGameCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlleyPlacingGameCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bAlleyPlacingGameCsReq.proto\x1a\x16AlleyPlacingShip.proto\"\xdc\
    \x02\n\x15AlleyPlacingGameCsReq\x12\x20\n\x0bOFNNFFIJFHB\x18\x07\x20\x01\
    (\rR\x0bOFNNFFIJFHB\x12\x20\n\x0bHAKDFMMHBOA\x18\n\x20\x01(\rR\x0bHAKDFM\
    MHBOA\x12\x20\n\x0bLMHKMEOAPHG\x18\x04\x20\x01(\rR\x0bLMHKMEOAPHG\x123\n\
    \x0bLOIFAMMMPNE\x18\r\x20\x01(\x0b2\x11.AlleyPlacingShipR\x0bLOIFAMMMPNE\
    \x12\x20\n\x0bLEDMIFJDBHL\x18\x03\x20\x01(\rR\x0bLEDMIFJDBHL\x12\x20\n\
    \x0bCHCNOJAONGF\x18\x01\x20\x01(\rR\x0bCHCNOJAONGF\x12\x20\n\x0bKCLHNGCK\
    JEM\x18\x0f\x20\x01(\rR\x0bKCLHNGCKJEM\x12\x20\n\x0bPCCPLLHICJM\x18\x08\
    \x20\x01(\rR\x0bPCCPLLHICJM\x12\x20\n\x0bHDCEPMKIMMG\x18\x0b\x20\x01(\rR\
    \x0bHDCEPMKIMMGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::AlleyPlacingShip::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AlleyPlacingGameCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
