// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MJBMCLGBHIC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MJBMCLGBHIC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MJBMCLGBHIC {
    // message fields
    // @@protoc_insertion_point(field:MJBMCLGBHIC.NCJHNPAAKAC)
    pub NCJHNPAAKAC: u32,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.BIODAPMJNGM)
    pub BIODAPMJNGM: u32,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.ADCHKACBHBK)
    pub ADCHKACBHBK: u32,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.NFCNIOCIFCG)
    pub NFCNIOCIFCG: u32,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.MAMKEEKMJHA)
    pub MAMKEEKMJHA: u32,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.BJFKNNNCIPO)
    pub BJFKNNNCIPO: u64,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.POJPNLGAPMM)
    pub POJPNLGAPMM: ::std::vec::Vec<super::BNFNHHIKLPK::BNFNHHIKLPK>,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.MBBINBIICGJ)
    pub MBBINBIICGJ: u32,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.IKFDKFLAHFG)
    pub IKFDKFLAHFG: bool,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.ONDANKLBHPK)
    pub ONDANKLBHPK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.JKOCJIMAGBN)
    pub JKOCJIMAGBN: u32,
    // @@protoc_insertion_point(field:MJBMCLGBHIC.PEAOADDOEED)
    pub PEAOADDOEED: ::std::vec::Vec<super::HGLEPCPKNCM::HGLEPCPKNCM>,
    // special fields
    // @@protoc_insertion_point(special_field:MJBMCLGBHIC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MJBMCLGBHIC {
    fn default() -> &'a MJBMCLGBHIC {
        <MJBMCLGBHIC as ::protobuf::Message>::default_instance()
    }
}

impl MJBMCLGBHIC {
    pub fn new() -> MJBMCLGBHIC {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NCJHNPAAKAC",
            |m: &MJBMCLGBHIC| { &m.NCJHNPAAKAC },
            |m: &mut MJBMCLGBHIC| { &mut m.NCJHNPAAKAC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BIODAPMJNGM",
            |m: &MJBMCLGBHIC| { &m.BIODAPMJNGM },
            |m: &mut MJBMCLGBHIC| { &mut m.BIODAPMJNGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADCHKACBHBK",
            |m: &MJBMCLGBHIC| { &m.ADCHKACBHBK },
            |m: &mut MJBMCLGBHIC| { &mut m.ADCHKACBHBK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NFCNIOCIFCG",
            |m: &MJBMCLGBHIC| { &m.NFCNIOCIFCG },
            |m: &mut MJBMCLGBHIC| { &mut m.NFCNIOCIFCG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MAMKEEKMJHA",
            |m: &MJBMCLGBHIC| { &m.MAMKEEKMJHA },
            |m: &mut MJBMCLGBHIC| { &mut m.MAMKEEKMJHA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BJFKNNNCIPO",
            |m: &MJBMCLGBHIC| { &m.BJFKNNNCIPO },
            |m: &mut MJBMCLGBHIC| { &mut m.BJFKNNNCIPO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "POJPNLGAPMM",
            |m: &MJBMCLGBHIC| { &m.POJPNLGAPMM },
            |m: &mut MJBMCLGBHIC| { &mut m.POJPNLGAPMM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MBBINBIICGJ",
            |m: &MJBMCLGBHIC| { &m.MBBINBIICGJ },
            |m: &mut MJBMCLGBHIC| { &mut m.MBBINBIICGJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IKFDKFLAHFG",
            |m: &MJBMCLGBHIC| { &m.IKFDKFLAHFG },
            |m: &mut MJBMCLGBHIC| { &mut m.IKFDKFLAHFG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ONDANKLBHPK",
            |m: &MJBMCLGBHIC| { &m.ONDANKLBHPK },
            |m: &mut MJBMCLGBHIC| { &mut m.ONDANKLBHPK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JKOCJIMAGBN",
            |m: &MJBMCLGBHIC| { &m.JKOCJIMAGBN },
            |m: &mut MJBMCLGBHIC| { &mut m.JKOCJIMAGBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PEAOADDOEED",
            |m: &MJBMCLGBHIC| { &m.PEAOADDOEED },
            |m: &mut MJBMCLGBHIC| { &mut m.PEAOADDOEED },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MJBMCLGBHIC>(
            "MJBMCLGBHIC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MJBMCLGBHIC {
    const NAME: &'static str = "MJBMCLGBHIC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.NCJHNPAAKAC = is.read_uint32()?;
                },
                104 => {
                    self.BIODAPMJNGM = is.read_uint32()?;
                },
                56 => {
                    self.ADCHKACBHBK = is.read_uint32()?;
                },
                8 => {
                    self.NFCNIOCIFCG = is.read_uint32()?;
                },
                88 => {
                    self.MAMKEEKMJHA = is.read_uint32()?;
                },
                120 => {
                    self.BJFKNNNCIPO = is.read_uint64()?;
                },
                114 => {
                    self.POJPNLGAPMM.push(is.read_message()?);
                },
                64 => {
                    self.MBBINBIICGJ = is.read_uint32()?;
                },
                40 => {
                    self.IKFDKFLAHFG = is.read_bool()?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.ONDANKLBHPK)?;
                },
                16 => {
                    self.ONDANKLBHPK.push(is.read_uint32()?);
                },
                32 => {
                    self.JKOCJIMAGBN = is.read_uint32()?;
                },
                82 => {
                    self.PEAOADDOEED.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.NCJHNPAAKAC != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.NCJHNPAAKAC);
        }
        if self.BIODAPMJNGM != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.BIODAPMJNGM);
        }
        if self.ADCHKACBHBK != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.ADCHKACBHBK);
        }
        if self.NFCNIOCIFCG != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.NFCNIOCIFCG);
        }
        if self.MAMKEEKMJHA != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.MAMKEEKMJHA);
        }
        if self.BJFKNNNCIPO != 0 {
            my_size += ::protobuf::rt::uint64_size(15, self.BJFKNNNCIPO);
        }
        for value in &self.POJPNLGAPMM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.MBBINBIICGJ != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.MBBINBIICGJ);
        }
        if self.IKFDKFLAHFG != false {
            my_size += 1 + 1;
        }
        for value in &self.ONDANKLBHPK {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        if self.JKOCJIMAGBN != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.JKOCJIMAGBN);
        }
        for value in &self.PEAOADDOEED {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.NCJHNPAAKAC != 0 {
            os.write_uint32(12, self.NCJHNPAAKAC)?;
        }
        if self.BIODAPMJNGM != 0 {
            os.write_uint32(13, self.BIODAPMJNGM)?;
        }
        if self.ADCHKACBHBK != 0 {
            os.write_uint32(7, self.ADCHKACBHBK)?;
        }
        if self.NFCNIOCIFCG != 0 {
            os.write_uint32(1, self.NFCNIOCIFCG)?;
        }
        if self.MAMKEEKMJHA != 0 {
            os.write_uint32(11, self.MAMKEEKMJHA)?;
        }
        if self.BJFKNNNCIPO != 0 {
            os.write_uint64(15, self.BJFKNNNCIPO)?;
        }
        for v in &self.POJPNLGAPMM {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        if self.MBBINBIICGJ != 0 {
            os.write_uint32(8, self.MBBINBIICGJ)?;
        }
        if self.IKFDKFLAHFG != false {
            os.write_bool(5, self.IKFDKFLAHFG)?;
        }
        for v in &self.ONDANKLBHPK {
            os.write_uint32(2, *v)?;
        };
        if self.JKOCJIMAGBN != 0 {
            os.write_uint32(4, self.JKOCJIMAGBN)?;
        }
        for v in &self.PEAOADDOEED {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MJBMCLGBHIC {
        MJBMCLGBHIC::new()
    }

    fn clear(&mut self) {
        self.NCJHNPAAKAC = 0;
        self.BIODAPMJNGM = 0;
        self.ADCHKACBHBK = 0;
        self.NFCNIOCIFCG = 0;
        self.MAMKEEKMJHA = 0;
        self.BJFKNNNCIPO = 0;
        self.POJPNLGAPMM.clear();
        self.MBBINBIICGJ = 0;
        self.IKFDKFLAHFG = false;
        self.ONDANKLBHPK.clear();
        self.JKOCJIMAGBN = 0;
        self.PEAOADDOEED.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MJBMCLGBHIC {
        static instance: MJBMCLGBHIC = MJBMCLGBHIC {
            NCJHNPAAKAC: 0,
            BIODAPMJNGM: 0,
            ADCHKACBHBK: 0,
            NFCNIOCIFCG: 0,
            MAMKEEKMJHA: 0,
            BJFKNNNCIPO: 0,
            POJPNLGAPMM: ::std::vec::Vec::new(),
            MBBINBIICGJ: 0,
            IKFDKFLAHFG: false,
            ONDANKLBHPK: ::std::vec::Vec::new(),
            JKOCJIMAGBN: 0,
            PEAOADDOEED: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MJBMCLGBHIC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MJBMCLGBHIC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MJBMCLGBHIC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MJBMCLGBHIC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MJBMCLGBHIC.proto\x1a\x11BNFNHHIKLPK.proto\x1a\x11HGLEPCPKNCM.prot\
    o\"\xc1\x03\n\x0bMJBMCLGBHIC\x12\x20\n\x0bNCJHNPAAKAC\x18\x0c\x20\x01(\r\
    R\x0bNCJHNPAAKAC\x12\x20\n\x0bBIODAPMJNGM\x18\r\x20\x01(\rR\x0bBIODAPMJN\
    GM\x12\x20\n\x0bADCHKACBHBK\x18\x07\x20\x01(\rR\x0bADCHKACBHBK\x12\x20\n\
    \x0bNFCNIOCIFCG\x18\x01\x20\x01(\rR\x0bNFCNIOCIFCG\x12\x20\n\x0bMAMKEEKM\
    JHA\x18\x0b\x20\x01(\rR\x0bMAMKEEKMJHA\x12\x20\n\x0bBJFKNNNCIPO\x18\x0f\
    \x20\x01(\x04R\x0bBJFKNNNCIPO\x12.\n\x0bPOJPNLGAPMM\x18\x0e\x20\x03(\x0b\
    2\x0c.BNFNHHIKLPKR\x0bPOJPNLGAPMM\x12\x20\n\x0bMBBINBIICGJ\x18\x08\x20\
    \x01(\rR\x0bMBBINBIICGJ\x12\x20\n\x0bIKFDKFLAHFG\x18\x05\x20\x01(\x08R\
    \x0bIKFDKFLAHFG\x12\x20\n\x0bONDANKLBHPK\x18\x02\x20\x03(\rR\x0bONDANKLB\
    HPK\x12\x20\n\x0bJKOCJIMAGBN\x18\x04\x20\x01(\rR\x0bJKOCJIMAGBN\x12.\n\
    \x0bPEAOADDOEED\x18\n\x20\x03(\x0b2\x0c.HGLEPCPKNCMR\x0bPEAOADDOEEDb\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::BNFNHHIKLPK::file_descriptor().clone());
            deps.push(super::HGLEPCPKNCM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MJBMCLGBHIC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
