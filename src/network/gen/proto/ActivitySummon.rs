// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ActivitySummon.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SummonActivityData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SummonActivityData {
    // message fields
    // @@protoc_insertion_point(field:SummonActivityData.phase)
    pub phase: u32,
    // @@protoc_insertion_point(field:SummonActivityData.difficulty)
    pub difficulty: u32,
    // @@protoc_insertion_point(field:SummonActivityData.group_id)
    pub group_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:SummonActivityData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SummonActivityData {
    fn default() -> &'a SummonActivityData {
        <SummonActivityData as ::protobuf::Message>::default_instance()
    }
}

impl SummonActivityData {
    pub fn new() -> SummonActivityData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "phase",
            |m: &SummonActivityData| { &m.phase },
            |m: &mut SummonActivityData| { &mut m.phase },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "difficulty",
            |m: &SummonActivityData| { &m.difficulty },
            |m: &mut SummonActivityData| { &mut m.difficulty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &SummonActivityData| { &m.group_id },
            |m: &mut SummonActivityData| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SummonActivityData>(
            "SummonActivityData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SummonActivityData {
    const NAME: &'static str = "SummonActivityData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                64 => {
                    self.phase = is.read_uint32()?;
                },
                8 => {
                    self.difficulty = is.read_uint32()?;
                },
                88 => {
                    self.group_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.phase != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.phase);
        }
        if self.difficulty != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.difficulty);
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.phase != 0 {
            os.write_uint32(8, self.phase)?;
        }
        if self.difficulty != 0 {
            os.write_uint32(1, self.difficulty)?;
        }
        if self.group_id != 0 {
            os.write_uint32(11, self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SummonActivityData {
        SummonActivityData::new()
    }

    fn clear(&mut self) {
        self.phase = 0;
        self.difficulty = 0;
        self.group_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SummonActivityData {
        static instance: SummonActivityData = SummonActivityData {
            phase: 0,
            difficulty: 0,
            group_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SummonActivityData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SummonActivityData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SummonActivityData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SummonActivityData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetSummonActivityDataCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetSummonActivityDataCsReq {
    // special fields
    // @@protoc_insertion_point(special_field:GetSummonActivityDataCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSummonActivityDataCsReq {
    fn default() -> &'a GetSummonActivityDataCsReq {
        <GetSummonActivityDataCsReq as ::protobuf::Message>::default_instance()
    }
}

impl GetSummonActivityDataCsReq {
    pub fn new() -> GetSummonActivityDataCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSummonActivityDataCsReq>(
            "GetSummonActivityDataCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSummonActivityDataCsReq {
    const NAME: &'static str = "GetSummonActivityDataCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSummonActivityDataCsReq {
        GetSummonActivityDataCsReq::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSummonActivityDataCsReq {
        static instance: GetSummonActivityDataCsReq = GetSummonActivityDataCsReq {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSummonActivityDataCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSummonActivityDataCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSummonActivityDataCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSummonActivityDataCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetSummonActivityDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetSummonActivityDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetSummonActivityDataScRsp.summon_activity_data)
    pub summon_activity_data: ::std::vec::Vec<SummonActivityData>,
    // @@protoc_insertion_point(field:GetSummonActivityDataScRsp.retcode)
    pub retcode: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GetSummonActivityDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSummonActivityDataScRsp {
    fn default() -> &'a GetSummonActivityDataScRsp {
        <GetSummonActivityDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetSummonActivityDataScRsp {
    pub fn new() -> GetSummonActivityDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "summon_activity_data",
            |m: &GetSummonActivityDataScRsp| { &m.summon_activity_data },
            |m: &mut GetSummonActivityDataScRsp| { &mut m.summon_activity_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetSummonActivityDataScRsp| { &m.retcode },
            |m: &mut GetSummonActivityDataScRsp| { &mut m.retcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSummonActivityDataScRsp>(
            "GetSummonActivityDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSummonActivityDataScRsp {
    const NAME: &'static str = "GetSummonActivityDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                98 => {
                    self.summon_activity_data.push(is.read_message()?);
                },
                80 => {
                    self.retcode = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.summon_activity_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.retcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.summon_activity_data {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(10, self.retcode)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSummonActivityDataScRsp {
        GetSummonActivityDataScRsp::new()
    }

    fn clear(&mut self) {
        self.summon_activity_data.clear();
        self.retcode = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSummonActivityDataScRsp {
        static instance: GetSummonActivityDataScRsp = GetSummonActivityDataScRsp {
            summon_activity_data: ::std::vec::Vec::new(),
            retcode: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSummonActivityDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSummonActivityDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSummonActivityDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSummonActivityDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SummonActivityAvatar)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SummonActivityAvatar {
    // message fields
    // @@protoc_insertion_point(field:SummonActivityAvatar.avatar_type)
    pub avatar_type: ::protobuf::EnumOrUnknown<super::AvatarType::AvatarType>,
    // @@protoc_insertion_point(field:SummonActivityAvatar.avatar_id)
    pub avatar_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:SummonActivityAvatar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SummonActivityAvatar {
    fn default() -> &'a SummonActivityAvatar {
        <SummonActivityAvatar as ::protobuf::Message>::default_instance()
    }
}

impl SummonActivityAvatar {
    pub fn new() -> SummonActivityAvatar {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_type",
            |m: &SummonActivityAvatar| { &m.avatar_type },
            |m: &mut SummonActivityAvatar| { &mut m.avatar_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_id",
            |m: &SummonActivityAvatar| { &m.avatar_id },
            |m: &mut SummonActivityAvatar| { &mut m.avatar_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SummonActivityAvatar>(
            "SummonActivityAvatar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SummonActivityAvatar {
    const NAME: &'static str = "SummonActivityAvatar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.avatar_type = is.read_enum_or_unknown()?;
                },
                80 => {
                    self.avatar_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.avatar_type != ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(9, self.avatar_type.value());
        }
        if self.avatar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.avatar_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.avatar_type != ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE) {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&self.avatar_type))?;
        }
        if self.avatar_id != 0 {
            os.write_uint32(10, self.avatar_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SummonActivityAvatar {
        SummonActivityAvatar::new()
    }

    fn clear(&mut self) {
        self.avatar_type = ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE);
        self.avatar_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SummonActivityAvatar {
        static instance: SummonActivityAvatar = SummonActivityAvatar {
            avatar_type: ::protobuf::EnumOrUnknown::from_i32(0),
            avatar_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SummonActivityAvatar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SummonActivityAvatar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SummonActivityAvatar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SummonActivityAvatar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:EnterSummonActivityStageCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EnterSummonActivityStageCsReq {
    // message fields
    // @@protoc_insertion_point(field:EnterSummonActivityStageCsReq.group_id)
    pub group_id: u32,
    // @@protoc_insertion_point(field:EnterSummonActivityStageCsReq.avatar_list)
    pub avatar_list: ::std::vec::Vec<SummonActivityAvatar>,
    // @@protoc_insertion_point(field:EnterSummonActivityStageCsReq.NKNMLNKCPIL)
    pub NKNMLNKCPIL: ::protobuf::MessageField<SummonActivityAvatar>,
    // @@protoc_insertion_point(field:EnterSummonActivityStageCsReq.difficulty)
    pub difficulty: u32,
    // special fields
    // @@protoc_insertion_point(special_field:EnterSummonActivityStageCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnterSummonActivityStageCsReq {
    fn default() -> &'a EnterSummonActivityStageCsReq {
        <EnterSummonActivityStageCsReq as ::protobuf::Message>::default_instance()
    }
}

impl EnterSummonActivityStageCsReq {
    pub fn new() -> EnterSummonActivityStageCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &EnterSummonActivityStageCsReq| { &m.group_id },
            |m: &mut EnterSummonActivityStageCsReq| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &EnterSummonActivityStageCsReq| { &m.avatar_list },
            |m: &mut EnterSummonActivityStageCsReq| { &mut m.avatar_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SummonActivityAvatar>(
            "NKNMLNKCPIL",
            |m: &EnterSummonActivityStageCsReq| { &m.NKNMLNKCPIL },
            |m: &mut EnterSummonActivityStageCsReq| { &mut m.NKNMLNKCPIL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "difficulty",
            |m: &EnterSummonActivityStageCsReq| { &m.difficulty },
            |m: &mut EnterSummonActivityStageCsReq| { &mut m.difficulty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnterSummonActivityStageCsReq>(
            "EnterSummonActivityStageCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnterSummonActivityStageCsReq {
    const NAME: &'static str = "EnterSummonActivityStageCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.group_id = is.read_uint32()?;
                },
                10 => {
                    self.avatar_list.push(is.read_message()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NKNMLNKCPIL)?;
                },
                72 => {
                    self.difficulty = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.group_id);
        }
        for value in &self.avatar_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.NKNMLNKCPIL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.difficulty != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.difficulty);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.group_id != 0 {
            os.write_uint32(11, self.group_id)?;
        }
        for v in &self.avatar_list {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.NKNMLNKCPIL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.difficulty != 0 {
            os.write_uint32(9, self.difficulty)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnterSummonActivityStageCsReq {
        EnterSummonActivityStageCsReq::new()
    }

    fn clear(&mut self) {
        self.group_id = 0;
        self.avatar_list.clear();
        self.NKNMLNKCPIL.clear();
        self.difficulty = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnterSummonActivityStageCsReq {
        static instance: EnterSummonActivityStageCsReq = EnterSummonActivityStageCsReq {
            group_id: 0,
            avatar_list: ::std::vec::Vec::new(),
            NKNMLNKCPIL: ::protobuf::MessageField::none(),
            difficulty: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnterSummonActivityStageCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnterSummonActivityStageCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnterSummonActivityStageCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnterSummonActivityStageCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:EnterSummonActivityStageScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EnterSummonActivityStageScRsp {
    // message fields
    // @@protoc_insertion_point(field:EnterSummonActivityStageScRsp.group_id)
    pub group_id: u32,
    // @@protoc_insertion_point(field:EnterSummonActivityStageScRsp.battle_info)
    pub battle_info: ::protobuf::MessageField<super::SceneBattleInfo::SceneBattleInfo>,
    // @@protoc_insertion_point(field:EnterSummonActivityStageScRsp.difficulty)
    pub difficulty: u32,
    // @@protoc_insertion_point(field:EnterSummonActivityStageScRsp.retcode)
    pub retcode: u32,
    // special fields
    // @@protoc_insertion_point(special_field:EnterSummonActivityStageScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnterSummonActivityStageScRsp {
    fn default() -> &'a EnterSummonActivityStageScRsp {
        <EnterSummonActivityStageScRsp as ::protobuf::Message>::default_instance()
    }
}

impl EnterSummonActivityStageScRsp {
    pub fn new() -> EnterSummonActivityStageScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &EnterSummonActivityStageScRsp| { &m.group_id },
            |m: &mut EnterSummonActivityStageScRsp| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SceneBattleInfo::SceneBattleInfo>(
            "battle_info",
            |m: &EnterSummonActivityStageScRsp| { &m.battle_info },
            |m: &mut EnterSummonActivityStageScRsp| { &mut m.battle_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "difficulty",
            |m: &EnterSummonActivityStageScRsp| { &m.difficulty },
            |m: &mut EnterSummonActivityStageScRsp| { &mut m.difficulty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &EnterSummonActivityStageScRsp| { &m.retcode },
            |m: &mut EnterSummonActivityStageScRsp| { &mut m.retcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnterSummonActivityStageScRsp>(
            "EnterSummonActivityStageScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnterSummonActivityStageScRsp {
    const NAME: &'static str = "EnterSummonActivityStageScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.group_id = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.battle_info)?;
                },
                88 => {
                    self.difficulty = is.read_uint32()?;
                },
                112 => {
                    self.retcode = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.group_id);
        }
        if let Some(v) = self.battle_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.difficulty != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.difficulty);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.retcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.group_id != 0 {
            os.write_uint32(6, self.group_id)?;
        }
        if let Some(v) = self.battle_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.difficulty != 0 {
            os.write_uint32(11, self.difficulty)?;
        }
        if self.retcode != 0 {
            os.write_uint32(14, self.retcode)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnterSummonActivityStageScRsp {
        EnterSummonActivityStageScRsp::new()
    }

    fn clear(&mut self) {
        self.group_id = 0;
        self.battle_info.clear();
        self.difficulty = 0;
        self.retcode = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnterSummonActivityStageScRsp {
        static instance: EnterSummonActivityStageScRsp = EnterSummonActivityStageScRsp {
            group_id: 0,
            battle_info: ::protobuf::MessageField::none(),
            difficulty: 0,
            retcode: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnterSummonActivityStageScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnterSummonActivityStageScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnterSummonActivityStageScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnterSummonActivityStageScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SummonActivityBattleEndScNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SummonActivityBattleEndScNotify {
    // message fields
    // @@protoc_insertion_point(field:SummonActivityBattleEndScNotify.phase)
    pub phase: u32,
    // @@protoc_insertion_point(field:SummonActivityBattleEndScNotify.difficulty)
    pub difficulty: u32,
    // @@protoc_insertion_point(field:SummonActivityBattleEndScNotify.FOFLCMNHAKN)
    pub FOFLCMNHAKN: u32,
    // @@protoc_insertion_point(field:SummonActivityBattleEndScNotify.group_id)
    pub group_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:SummonActivityBattleEndScNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SummonActivityBattleEndScNotify {
    fn default() -> &'a SummonActivityBattleEndScNotify {
        <SummonActivityBattleEndScNotify as ::protobuf::Message>::default_instance()
    }
}

impl SummonActivityBattleEndScNotify {
    pub fn new() -> SummonActivityBattleEndScNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "phase",
            |m: &SummonActivityBattleEndScNotify| { &m.phase },
            |m: &mut SummonActivityBattleEndScNotify| { &mut m.phase },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "difficulty",
            |m: &SummonActivityBattleEndScNotify| { &m.difficulty },
            |m: &mut SummonActivityBattleEndScNotify| { &mut m.difficulty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FOFLCMNHAKN",
            |m: &SummonActivityBattleEndScNotify| { &m.FOFLCMNHAKN },
            |m: &mut SummonActivityBattleEndScNotify| { &mut m.FOFLCMNHAKN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &SummonActivityBattleEndScNotify| { &m.group_id },
            |m: &mut SummonActivityBattleEndScNotify| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SummonActivityBattleEndScNotify>(
            "SummonActivityBattleEndScNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SummonActivityBattleEndScNotify {
    const NAME: &'static str = "SummonActivityBattleEndScNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.phase = is.read_uint32()?;
                },
                16 => {
                    self.difficulty = is.read_uint32()?;
                },
                48 => {
                    self.FOFLCMNHAKN = is.read_uint32()?;
                },
                32 => {
                    self.group_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.phase != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.phase);
        }
        if self.difficulty != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.difficulty);
        }
        if self.FOFLCMNHAKN != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.FOFLCMNHAKN);
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.phase != 0 {
            os.write_uint32(13, self.phase)?;
        }
        if self.difficulty != 0 {
            os.write_uint32(2, self.difficulty)?;
        }
        if self.FOFLCMNHAKN != 0 {
            os.write_uint32(6, self.FOFLCMNHAKN)?;
        }
        if self.group_id != 0 {
            os.write_uint32(4, self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SummonActivityBattleEndScNotify {
        SummonActivityBattleEndScNotify::new()
    }

    fn clear(&mut self) {
        self.phase = 0;
        self.difficulty = 0;
        self.FOFLCMNHAKN = 0;
        self.group_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SummonActivityBattleEndScNotify {
        static instance: SummonActivityBattleEndScNotify = SummonActivityBattleEndScNotify {
            phase: 0,
            difficulty: 0,
            FOFLCMNHAKN: 0,
            group_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SummonActivityBattleEndScNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SummonActivityBattleEndScNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SummonActivityBattleEndScNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SummonActivityBattleEndScNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14ActivitySummon.proto\x1a\x10AvatarType.proto\x1a\x15SceneBattleInf\
    o.proto\"e\n\x12SummonActivityData\x12\x14\n\x05phase\x18\x08\x20\x01(\r\
    R\x05phase\x12\x1e\n\ndifficulty\x18\x01\x20\x01(\rR\ndifficulty\x12\x19\
    \n\x08group_id\x18\x0b\x20\x01(\rR\x07groupId\"\x1c\n\x1aGetSummonActivi\
    tyDataCsReq\"}\n\x1aGetSummonActivityDataScRsp\x12E\n\x14summon_activity\
    _data\x18\x0c\x20\x03(\x0b2\x13.SummonActivityDataR\x12summonActivityDat\
    a\x12\x18\n\x07retcode\x18\n\x20\x01(\rR\x07retcode\"a\n\x14SummonActivi\
    tyAvatar\x12,\n\x0bavatar_type\x18\t\x20\x01(\x0e2\x0b.AvatarTypeR\navat\
    arType\x12\x1b\n\tavatar_id\x18\n\x20\x01(\rR\x08avatarId\"\xcb\x01\n\
    \x1dEnterSummonActivityStageCsReq\x12\x19\n\x08group_id\x18\x0b\x20\x01(\
    \rR\x07groupId\x126\n\x0bavatar_list\x18\x01\x20\x03(\x0b2\x15.SummonAct\
    ivityAvatarR\navatarList\x127\n\x0bNKNMLNKCPIL\x18\x05\x20\x01(\x0b2\x15\
    .SummonActivityAvatarR\x0bNKNMLNKCPIL\x12\x1e\n\ndifficulty\x18\t\x20\
    \x01(\rR\ndifficulty\"\xa7\x01\n\x1dEnterSummonActivityStageScRsp\x12\
    \x19\n\x08group_id\x18\x06\x20\x01(\rR\x07groupId\x121\n\x0bbattle_info\
    \x18\x02\x20\x01(\x0b2\x10.SceneBattleInfoR\nbattleInfo\x12\x1e\n\ndiffi\
    culty\x18\x0b\x20\x01(\rR\ndifficulty\x12\x18\n\x07retcode\x18\x0e\x20\
    \x01(\rR\x07retcode\"\x94\x01\n\x1fSummonActivityBattleEndScNotify\x12\
    \x14\n\x05phase\x18\r\x20\x01(\rR\x05phase\x12\x1e\n\ndifficulty\x18\x02\
    \x20\x01(\rR\ndifficulty\x12\x20\n\x0bFOFLCMNHAKN\x18\x06\x20\x01(\rR\
    \x0bFOFLCMNHAKN\x12\x19\n\x08group_id\x18\x04\x20\x01(\rR\x07groupIdB\
    \x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::AvatarType::file_descriptor().clone());
            deps.push(super::SceneBattleInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(SummonActivityData::generated_message_descriptor_data());
            messages.push(GetSummonActivityDataCsReq::generated_message_descriptor_data());
            messages.push(GetSummonActivityDataScRsp::generated_message_descriptor_data());
            messages.push(SummonActivityAvatar::generated_message_descriptor_data());
            messages.push(EnterSummonActivityStageCsReq::generated_message_descriptor_data());
            messages.push(EnterSummonActivityStageScRsp::generated_message_descriptor_data());
            messages.push(SummonActivityBattleEndScNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
