// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdPlayerReturnType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdPlayerReturnType)
pub enum CmdPlayerReturnType {
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTypeNone)
    CmdPlayerReturnTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnStartScNotify)
    CmdPlayerReturnStartScNotify = 4559,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakePointRewardCsReq)
    CmdPlayerReturnTakePointRewardCsReq = 4539,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakePointRewardScRsp)
    CmdPlayerReturnTakePointRewardScRsp = 4553,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnSignScRsp)
    CmdPlayerReturnSignScRsp = 4503,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakeRewardScRsp)
    CmdPlayerReturnTakeRewardScRsp = 4537,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnSignCsReq)
    CmdPlayerReturnSignCsReq = 4520,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnTakeRewardCsReq)
    CmdPlayerReturnTakeRewardCsReq = 4534,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnInfoQueryScRsp)
    CmdPlayerReturnInfoQueryScRsp = 4516,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnForceFinishScNotify)
    CmdPlayerReturnForceFinishScNotify = 4547,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnInfoQueryCsReq)
    CmdPlayerReturnInfoQueryCsReq = 4580,
    // @@protoc_insertion_point(enum_value:CmdPlayerReturnType.CmdPlayerReturnPointChangeScNotify)
    CmdPlayerReturnPointChangeScNotify = 4546,
}

impl ::protobuf::Enum for CmdPlayerReturnType {
    const NAME: &'static str = "CmdPlayerReturnType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdPlayerReturnType> {
        match value {
            0 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTypeNone),
            4559 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnStartScNotify),
            4539 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakePointRewardCsReq),
            4553 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakePointRewardScRsp),
            4503 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnSignScRsp),
            4537 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRewardScRsp),
            4520 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnSignCsReq),
            4534 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRewardCsReq),
            4516 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnInfoQueryScRsp),
            4547 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnForceFinishScNotify),
            4580 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnInfoQueryCsReq),
            4546 => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnPointChangeScNotify),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdPlayerReturnType> {
        match str {
            "CmdPlayerReturnTypeNone" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTypeNone),
            "CmdPlayerReturnStartScNotify" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnStartScNotify),
            "CmdPlayerReturnTakePointRewardCsReq" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakePointRewardCsReq),
            "CmdPlayerReturnTakePointRewardScRsp" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakePointRewardScRsp),
            "CmdPlayerReturnSignScRsp" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnSignScRsp),
            "CmdPlayerReturnTakeRewardScRsp" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRewardScRsp),
            "CmdPlayerReturnSignCsReq" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnSignCsReq),
            "CmdPlayerReturnTakeRewardCsReq" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnTakeRewardCsReq),
            "CmdPlayerReturnInfoQueryScRsp" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnInfoQueryScRsp),
            "CmdPlayerReturnForceFinishScNotify" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnForceFinishScNotify),
            "CmdPlayerReturnInfoQueryCsReq" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnInfoQueryCsReq),
            "CmdPlayerReturnPointChangeScNotify" => ::std::option::Option::Some(CmdPlayerReturnType::CmdPlayerReturnPointChangeScNotify),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdPlayerReturnType] = &[
        CmdPlayerReturnType::CmdPlayerReturnTypeNone,
        CmdPlayerReturnType::CmdPlayerReturnStartScNotify,
        CmdPlayerReturnType::CmdPlayerReturnTakePointRewardCsReq,
        CmdPlayerReturnType::CmdPlayerReturnTakePointRewardScRsp,
        CmdPlayerReturnType::CmdPlayerReturnSignScRsp,
        CmdPlayerReturnType::CmdPlayerReturnTakeRewardScRsp,
        CmdPlayerReturnType::CmdPlayerReturnSignCsReq,
        CmdPlayerReturnType::CmdPlayerReturnTakeRewardCsReq,
        CmdPlayerReturnType::CmdPlayerReturnInfoQueryScRsp,
        CmdPlayerReturnType::CmdPlayerReturnForceFinishScNotify,
        CmdPlayerReturnType::CmdPlayerReturnInfoQueryCsReq,
        CmdPlayerReturnType::CmdPlayerReturnPointChangeScNotify,
    ];
}

impl ::protobuf::EnumFull for CmdPlayerReturnType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdPlayerReturnType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdPlayerReturnType::CmdPlayerReturnTypeNone => 0,
            CmdPlayerReturnType::CmdPlayerReturnStartScNotify => 1,
            CmdPlayerReturnType::CmdPlayerReturnTakePointRewardCsReq => 2,
            CmdPlayerReturnType::CmdPlayerReturnTakePointRewardScRsp => 3,
            CmdPlayerReturnType::CmdPlayerReturnSignScRsp => 4,
            CmdPlayerReturnType::CmdPlayerReturnTakeRewardScRsp => 5,
            CmdPlayerReturnType::CmdPlayerReturnSignCsReq => 6,
            CmdPlayerReturnType::CmdPlayerReturnTakeRewardCsReq => 7,
            CmdPlayerReturnType::CmdPlayerReturnInfoQueryScRsp => 8,
            CmdPlayerReturnType::CmdPlayerReturnForceFinishScNotify => 9,
            CmdPlayerReturnType::CmdPlayerReturnInfoQueryCsReq => 10,
            CmdPlayerReturnType::CmdPlayerReturnPointChangeScNotify => 11,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdPlayerReturnType {
    fn default() -> Self {
        CmdPlayerReturnType::CmdPlayerReturnTypeNone
    }
}

impl CmdPlayerReturnType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdPlayerReturnType>("CmdPlayerReturnType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19CmdPlayerReturnType.proto*\xcb\x03\n\x13CmdPlayerReturnType\x12\
    \x1b\n\x17CmdPlayerReturnTypeNone\x10\0\x12!\n\x1cCmdPlayerReturnStartSc\
    Notify\x10\xcf#\x12(\n#CmdPlayerReturnTakePointRewardCsReq\x10\xbb#\x12(\
    \n#CmdPlayerReturnTakePointRewardScRsp\x10\xc9#\x12\x1d\n\x18CmdPlayerRe\
    turnSignScRsp\x10\x97#\x12#\n\x1eCmdPlayerReturnTakeRewardScRsp\x10\xb9#\
    \x12\x1d\n\x18CmdPlayerReturnSignCsReq\x10\xa8#\x12#\n\x1eCmdPlayerRetur\
    nTakeRewardCsReq\x10\xb6#\x12\"\n\x1dCmdPlayerReturnInfoQueryScRsp\x10\
    \xa4#\x12'\n\"CmdPlayerReturnForceFinishScNotify\x10\xc3#\x12\"\n\x1dCmd\
    PlayerReturnInfoQueryCsReq\x10\xe4#\x12'\n\"CmdPlayerReturnPointChangeSc\
    Notify\x10\xc2#b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdPlayerReturnType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
