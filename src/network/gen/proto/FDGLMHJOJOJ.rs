// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FDGLMHJOJOJ.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FDGLMHJOJOJ)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FDGLMHJOJOJ {
    // message fields
    // @@protoc_insertion_point(field:FDGLMHJOJOJ.JNJHKLKMMOB)
    pub JNJHKLKMMOB: ::std::vec::Vec<super::CAAGKBLBKJA::CAAGKBLBKJA>,
    // @@protoc_insertion_point(field:FDGLMHJOJOJ.APEOGCFECJH)
    pub APEOGCFECJH: ::std::string::String,
    // @@protoc_insertion_point(field:FDGLMHJOJOJ.DKMFLEGEFDK)
    pub DKMFLEGEFDK: ::std::string::String,
    // @@protoc_insertion_point(field:FDGLMHJOJOJ.LGDLACNDLFO)
    pub LGDLACNDLFO: ::std::vec::Vec<super::MBDPANCJAAP::MBDPANCJAAP>,
    // @@protoc_insertion_point(field:FDGLMHJOJOJ.KOCMDLFBKEI)
    pub KOCMDLFBKEI: u32,
    // @@protoc_insertion_point(field:FDGLMHJOJOJ.IJGMJLMJABD)
    pub IJGMJLMJABD: u32,
    // @@protoc_insertion_point(field:FDGLMHJOJOJ.AFAELFGNIGL)
    pub AFAELFGNIGL: u32,
    // @@protoc_insertion_point(field:FDGLMHJOJOJ.PAFGFGCIPIC)
    pub PAFGFGCIPIC: u32,
    // @@protoc_insertion_point(field:FDGLMHJOJOJ.JDIJHGNBANB)
    pub JDIJHGNBANB: ::protobuf::MessageField<super::FOAECKDJHHO::FOAECKDJHHO>,
    // special fields
    // @@protoc_insertion_point(special_field:FDGLMHJOJOJ.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FDGLMHJOJOJ {
    fn default() -> &'a FDGLMHJOJOJ {
        <FDGLMHJOJOJ as ::protobuf::Message>::default_instance()
    }
}

impl FDGLMHJOJOJ {
    pub fn new() -> FDGLMHJOJOJ {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JNJHKLKMMOB",
            |m: &FDGLMHJOJOJ| { &m.JNJHKLKMMOB },
            |m: &mut FDGLMHJOJOJ| { &mut m.JNJHKLKMMOB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "APEOGCFECJH",
            |m: &FDGLMHJOJOJ| { &m.APEOGCFECJH },
            |m: &mut FDGLMHJOJOJ| { &mut m.APEOGCFECJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKMFLEGEFDK",
            |m: &FDGLMHJOJOJ| { &m.DKMFLEGEFDK },
            |m: &mut FDGLMHJOJOJ| { &mut m.DKMFLEGEFDK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LGDLACNDLFO",
            |m: &FDGLMHJOJOJ| { &m.LGDLACNDLFO },
            |m: &mut FDGLMHJOJOJ| { &mut m.LGDLACNDLFO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KOCMDLFBKEI",
            |m: &FDGLMHJOJOJ| { &m.KOCMDLFBKEI },
            |m: &mut FDGLMHJOJOJ| { &mut m.KOCMDLFBKEI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IJGMJLMJABD",
            |m: &FDGLMHJOJOJ| { &m.IJGMJLMJABD },
            |m: &mut FDGLMHJOJOJ| { &mut m.IJGMJLMJABD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AFAELFGNIGL",
            |m: &FDGLMHJOJOJ| { &m.AFAELFGNIGL },
            |m: &mut FDGLMHJOJOJ| { &mut m.AFAELFGNIGL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PAFGFGCIPIC",
            |m: &FDGLMHJOJOJ| { &m.PAFGFGCIPIC },
            |m: &mut FDGLMHJOJOJ| { &mut m.PAFGFGCIPIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FOAECKDJHHO::FOAECKDJHHO>(
            "JDIJHGNBANB",
            |m: &FDGLMHJOJOJ| { &m.JDIJHGNBANB },
            |m: &mut FDGLMHJOJOJ| { &mut m.JDIJHGNBANB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FDGLMHJOJOJ>(
            "FDGLMHJOJOJ",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FDGLMHJOJOJ {
    const NAME: &'static str = "FDGLMHJOJOJ";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.JNJHKLKMMOB.push(is.read_message()?);
                },
                18 => {
                    self.APEOGCFECJH = is.read_string()?;
                },
                26 => {
                    self.DKMFLEGEFDK = is.read_string()?;
                },
                34 => {
                    self.LGDLACNDLFO.push(is.read_message()?);
                },
                40 => {
                    self.KOCMDLFBKEI = is.read_uint32()?;
                },
                48 => {
                    self.IJGMJLMJABD = is.read_uint32()?;
                },
                56 => {
                    self.AFAELFGNIGL = is.read_uint32()?;
                },
                64 => {
                    self.PAFGFGCIPIC = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JDIJHGNBANB)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.JNJHKLKMMOB {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.APEOGCFECJH.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.APEOGCFECJH);
        }
        if !self.DKMFLEGEFDK.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.DKMFLEGEFDK);
        }
        for value in &self.LGDLACNDLFO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.KOCMDLFBKEI != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.KOCMDLFBKEI);
        }
        if self.IJGMJLMJABD != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.IJGMJLMJABD);
        }
        if self.AFAELFGNIGL != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.AFAELFGNIGL);
        }
        if self.PAFGFGCIPIC != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.PAFGFGCIPIC);
        }
        if let Some(v) = self.JDIJHGNBANB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.JNJHKLKMMOB {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.APEOGCFECJH.is_empty() {
            os.write_string(2, &self.APEOGCFECJH)?;
        }
        if !self.DKMFLEGEFDK.is_empty() {
            os.write_string(3, &self.DKMFLEGEFDK)?;
        }
        for v in &self.LGDLACNDLFO {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.KOCMDLFBKEI != 0 {
            os.write_uint32(5, self.KOCMDLFBKEI)?;
        }
        if self.IJGMJLMJABD != 0 {
            os.write_uint32(6, self.IJGMJLMJABD)?;
        }
        if self.AFAELFGNIGL != 0 {
            os.write_uint32(7, self.AFAELFGNIGL)?;
        }
        if self.PAFGFGCIPIC != 0 {
            os.write_uint32(8, self.PAFGFGCIPIC)?;
        }
        if let Some(v) = self.JDIJHGNBANB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FDGLMHJOJOJ {
        FDGLMHJOJOJ::new()
    }

    fn clear(&mut self) {
        self.JNJHKLKMMOB.clear();
        self.APEOGCFECJH.clear();
        self.DKMFLEGEFDK.clear();
        self.LGDLACNDLFO.clear();
        self.KOCMDLFBKEI = 0;
        self.IJGMJLMJABD = 0;
        self.AFAELFGNIGL = 0;
        self.PAFGFGCIPIC = 0;
        self.JDIJHGNBANB.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FDGLMHJOJOJ {
        static instance: FDGLMHJOJOJ = FDGLMHJOJOJ {
            JNJHKLKMMOB: ::std::vec::Vec::new(),
            APEOGCFECJH: ::std::string::String::new(),
            DKMFLEGEFDK: ::std::string::String::new(),
            LGDLACNDLFO: ::std::vec::Vec::new(),
            KOCMDLFBKEI: 0,
            IJGMJLMJABD: 0,
            AFAELFGNIGL: 0,
            PAFGFGCIPIC: 0,
            JDIJHGNBANB: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FDGLMHJOJOJ {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FDGLMHJOJOJ").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FDGLMHJOJOJ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FDGLMHJOJOJ {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FDGLMHJOJOJ.proto\x1a\x11CAAGKBLBKJA.proto\x1a\x11FOAECKDJHHO.prot\
    o\x1a\x11MBDPANCJAAP.proto\"\xe9\x02\n\x0bFDGLMHJOJOJ\x12.\n\x0bJNJHKLKM\
    MOB\x18\x01\x20\x03(\x0b2\x0c.CAAGKBLBKJAR\x0bJNJHKLKMMOB\x12\x20\n\x0bA\
    PEOGCFECJH\x18\x02\x20\x01(\tR\x0bAPEOGCFECJH\x12\x20\n\x0bDKMFLEGEFDK\
    \x18\x03\x20\x01(\tR\x0bDKMFLEGEFDK\x12.\n\x0bLGDLACNDLFO\x18\x04\x20\
    \x03(\x0b2\x0c.MBDPANCJAAPR\x0bLGDLACNDLFO\x12\x20\n\x0bKOCMDLFBKEI\x18\
    \x05\x20\x01(\rR\x0bKOCMDLFBKEI\x12\x20\n\x0bIJGMJLMJABD\x18\x06\x20\x01\
    (\rR\x0bIJGMJLMJABD\x12\x20\n\x0bAFAELFGNIGL\x18\x07\x20\x01(\rR\x0bAFAE\
    LFGNIGL\x12\x20\n\x0bPAFGFGCIPIC\x18\x08\x20\x01(\rR\x0bPAFGFGCIPIC\x12.\
    \n\x0bJDIJHGNBANB\x18\t\x20\x01(\x0b2\x0c.FOAECKDJHHOR\x0bJDIJHGNBANBb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::CAAGKBLBKJA::file_descriptor().clone());
            deps.push(super::FOAECKDJHHO::file_descriptor().clone());
            deps.push(super::MBDPANCJAAP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FDGLMHJOJOJ::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
