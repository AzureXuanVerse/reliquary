// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LGDKPPIOFJE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LGDKPPIOFJE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LGDKPPIOFJE {
    // message fields
    // @@protoc_insertion_point(field:LGDKPPIOFJE.IBPKMLPPPMO)
    pub IBPKMLPPPMO: u32,
    // @@protoc_insertion_point(field:LGDKPPIOFJE.FGLFGCJDGNO)
    pub FGLFGCJDGNO: bool,
    // message oneof groups
    pub AFIDGCCCILM: ::std::option::Option<lgdkppiofje::AFIDGCCCILM>,
    // special fields
    // @@protoc_insertion_point(special_field:LGDKPPIOFJE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LGDKPPIOFJE {
    fn default() -> &'a LGDKPPIOFJE {
        <LGDKPPIOFJE as ::protobuf::Message>::default_instance()
    }
}

impl LGDKPPIOFJE {
    pub fn new() -> LGDKPPIOFJE {
        ::std::default::Default::default()
    }

    // .ENHHGAMEKMB BKNGCBIBPFK = 3;

    pub fn BKNGCBIBPFK(&self) -> &super::ENHHGAMEKMB::ENHHGAMEKMB {
        match self.AFIDGCCCILM {
            ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(ref v)) => v,
            _ => <super::ENHHGAMEKMB::ENHHGAMEKMB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BKNGCBIBPFK(&mut self) {
        self.AFIDGCCCILM = ::std::option::Option::None;
    }

    pub fn has_BKNGCBIBPFK(&self) -> bool {
        match self.AFIDGCCCILM {
            ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BKNGCBIBPFK(&mut self, v: super::ENHHGAMEKMB::ENHHGAMEKMB) {
        self.AFIDGCCCILM = ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BKNGCBIBPFK(&mut self) -> &mut super::ENHHGAMEKMB::ENHHGAMEKMB {
        if let ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(_)) = self.AFIDGCCCILM {
        } else {
            self.AFIDGCCCILM = ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(super::ENHHGAMEKMB::ENHHGAMEKMB::new()));
        }
        match self.AFIDGCCCILM {
            ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BKNGCBIBPFK(&mut self) -> super::ENHHGAMEKMB::ENHHGAMEKMB {
        if self.has_BKNGCBIBPFK() {
            match self.AFIDGCCCILM.take() {
                ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ENHHGAMEKMB::ENHHGAMEKMB::new()
        }
    }

    // .OMPEBDAOFIG AHLAKKGPHGD = 13;

    pub fn AHLAKKGPHGD(&self) -> &super::OMPEBDAOFIG::OMPEBDAOFIG {
        match self.AFIDGCCCILM {
            ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(ref v)) => v,
            _ => <super::OMPEBDAOFIG::OMPEBDAOFIG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AHLAKKGPHGD(&mut self) {
        self.AFIDGCCCILM = ::std::option::Option::None;
    }

    pub fn has_AHLAKKGPHGD(&self) -> bool {
        match self.AFIDGCCCILM {
            ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AHLAKKGPHGD(&mut self, v: super::OMPEBDAOFIG::OMPEBDAOFIG) {
        self.AFIDGCCCILM = ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AHLAKKGPHGD(&mut self) -> &mut super::OMPEBDAOFIG::OMPEBDAOFIG {
        if let ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(_)) = self.AFIDGCCCILM {
        } else {
            self.AFIDGCCCILM = ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(super::OMPEBDAOFIG::OMPEBDAOFIG::new()));
        }
        match self.AFIDGCCCILM {
            ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AHLAKKGPHGD(&mut self) -> super::OMPEBDAOFIG::OMPEBDAOFIG {
        if self.has_AHLAKKGPHGD() {
            match self.AFIDGCCCILM.take() {
                ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMPEBDAOFIG::OMPEBDAOFIG::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IBPKMLPPPMO",
            |m: &LGDKPPIOFJE| { &m.IBPKMLPPPMO },
            |m: &mut LGDKPPIOFJE| { &mut m.IBPKMLPPPMO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FGLFGCJDGNO",
            |m: &LGDKPPIOFJE| { &m.FGLFGCJDGNO },
            |m: &mut LGDKPPIOFJE| { &mut m.FGLFGCJDGNO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ENHHGAMEKMB::ENHHGAMEKMB>(
            "BKNGCBIBPFK",
            LGDKPPIOFJE::has_BKNGCBIBPFK,
            LGDKPPIOFJE::BKNGCBIBPFK,
            LGDKPPIOFJE::mut_BKNGCBIBPFK,
            LGDKPPIOFJE::set_BKNGCBIBPFK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMPEBDAOFIG::OMPEBDAOFIG>(
            "AHLAKKGPHGD",
            LGDKPPIOFJE::has_AHLAKKGPHGD,
            LGDKPPIOFJE::AHLAKKGPHGD,
            LGDKPPIOFJE::mut_AHLAKKGPHGD,
            LGDKPPIOFJE::set_AHLAKKGPHGD,
        ));
        oneofs.push(lgdkppiofje::AFIDGCCCILM::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LGDKPPIOFJE>(
            "LGDKPPIOFJE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LGDKPPIOFJE {
    const NAME: &'static str = "LGDKPPIOFJE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.IBPKMLPPPMO = is.read_uint32()?;
                },
                72 => {
                    self.FGLFGCJDGNO = is.read_bool()?;
                },
                26 => {
                    self.AFIDGCCCILM = ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(is.read_message()?));
                },
                106 => {
                    self.AFIDGCCCILM = ::std::option::Option::Some(lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.IBPKMLPPPMO != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.IBPKMLPPPMO);
        }
        if self.FGLFGCJDGNO != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.AFIDGCCCILM {
            match v {
                &lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.IBPKMLPPPMO != 0 {
            os.write_uint32(14, self.IBPKMLPPPMO)?;
        }
        if self.FGLFGCJDGNO != false {
            os.write_bool(9, self.FGLFGCJDGNO)?;
        }
        if let ::std::option::Option::Some(ref v) = self.AFIDGCCCILM {
            match v {
                &lgdkppiofje::AFIDGCCCILM::BKNGCBIBPFK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &lgdkppiofje::AFIDGCCCILM::AHLAKKGPHGD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LGDKPPIOFJE {
        LGDKPPIOFJE::new()
    }

    fn clear(&mut self) {
        self.IBPKMLPPPMO = 0;
        self.FGLFGCJDGNO = false;
        self.AFIDGCCCILM = ::std::option::Option::None;
        self.AFIDGCCCILM = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LGDKPPIOFJE {
        static instance: LGDKPPIOFJE = LGDKPPIOFJE {
            IBPKMLPPPMO: 0,
            FGLFGCJDGNO: false,
            AFIDGCCCILM: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LGDKPPIOFJE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LGDKPPIOFJE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LGDKPPIOFJE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LGDKPPIOFJE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LGDKPPIOFJE`
pub mod lgdkppiofje {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:LGDKPPIOFJE.AFIDGCCCILM)
    pub enum AFIDGCCCILM {
        // @@protoc_insertion_point(oneof_field:LGDKPPIOFJE.BKNGCBIBPFK)
        BKNGCBIBPFK(super::super::ENHHGAMEKMB::ENHHGAMEKMB),
        // @@protoc_insertion_point(oneof_field:LGDKPPIOFJE.AHLAKKGPHGD)
        AHLAKKGPHGD(super::super::OMPEBDAOFIG::OMPEBDAOFIG),
    }

    impl ::protobuf::Oneof for AFIDGCCCILM {
    }

    impl ::protobuf::OneofFull for AFIDGCCCILM {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::LGDKPPIOFJE as ::protobuf::MessageFull>::descriptor().oneof_by_name("AFIDGCCCILM").unwrap()).clone()
        }
    }

    impl AFIDGCCCILM {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<AFIDGCCCILM>("AFIDGCCCILM")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LGDKPPIOFJE.proto\x1a\x11ENHHGAMEKMB.proto\x1a\x11OMPEBDAOFIG.prot\
    o\"\xc4\x01\n\x0bLGDKPPIOFJE\x12\x20\n\x0bIBPKMLPPPMO\x18\x0e\x20\x01(\r\
    R\x0bIBPKMLPPPMO\x12\x20\n\x0bFGLFGCJDGNO\x18\t\x20\x01(\x08R\x0bFGLFGCJ\
    DGNO\x120\n\x0bBKNGCBIBPFK\x18\x03\x20\x01(\x0b2\x0c.ENHHGAMEKMBH\0R\x0b\
    BKNGCBIBPFK\x120\n\x0bAHLAKKGPHGD\x18\r\x20\x01(\x0b2\x0c.OMPEBDAOFIGH\0\
    R\x0bAHLAKKGPHGDB\r\n\x0bAFIDGCCCILMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ENHHGAMEKMB::file_descriptor().clone());
            deps.push(super::OMPEBDAOFIG::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LGDKPPIOFJE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
