// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OMJNOFBIODO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:OMJNOFBIODO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OMJNOFBIODO {
    // message fields
    // @@protoc_insertion_point(field:OMJNOFBIODO.HFEDLLHAELK)
    pub HFEDLLHAELK: bool,
    // @@protoc_insertion_point(field:OMJNOFBIODO.MAMKEEKMJHA)
    pub MAMKEEKMJHA: u32,
    // @@protoc_insertion_point(field:OMJNOFBIODO.GJKHHFCBOCI)
    pub GJKHHFCBOCI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OMJNOFBIODO.FKOHMNMAANH)
    pub FKOHMNMAANH: ::std::vec::Vec<super::HJAJEBCDKIC::HJAJEBCDKIC>,
    // @@protoc_insertion_point(field:OMJNOFBIODO.EDLHPFKPGEF)
    pub EDLHPFKPGEF: ::std::vec::Vec<super::JCMNNKMOFEB::JCMNNKMOFEB>,
    // @@protoc_insertion_point(field:OMJNOFBIODO.LMIBNDEPFHI)
    pub LMIBNDEPFHI: ::std::vec::Vec<super::DOFHMFAKNAB::DOFHMFAKNAB>,
    // @@protoc_insertion_point(field:OMJNOFBIODO.HEMENIBJABH)
    pub HEMENIBJABH: u32,
    // @@protoc_insertion_point(field:OMJNOFBIODO.LFFJPMCCIKD)
    pub LFFJPMCCIKD: bool,
    // @@protoc_insertion_point(field:OMJNOFBIODO.HOJJFBAEBDA)
    pub HOJJFBAEBDA: u32,
    // @@protoc_insertion_point(field:OMJNOFBIODO.KABOKLBMCLJ)
    pub KABOKLBMCLJ: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:OMJNOFBIODO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OMJNOFBIODO {
    fn default() -> &'a OMJNOFBIODO {
        <OMJNOFBIODO as ::protobuf::Message>::default_instance()
    }
}

impl OMJNOFBIODO {
    pub fn new() -> OMJNOFBIODO {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HFEDLLHAELK",
            |m: &OMJNOFBIODO| { &m.HFEDLLHAELK },
            |m: &mut OMJNOFBIODO| { &mut m.HFEDLLHAELK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MAMKEEKMJHA",
            |m: &OMJNOFBIODO| { &m.MAMKEEKMJHA },
            |m: &mut OMJNOFBIODO| { &mut m.MAMKEEKMJHA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GJKHHFCBOCI",
            |m: &OMJNOFBIODO| { &m.GJKHHFCBOCI },
            |m: &mut OMJNOFBIODO| { &mut m.GJKHHFCBOCI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FKOHMNMAANH",
            |m: &OMJNOFBIODO| { &m.FKOHMNMAANH },
            |m: &mut OMJNOFBIODO| { &mut m.FKOHMNMAANH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EDLHPFKPGEF",
            |m: &OMJNOFBIODO| { &m.EDLHPFKPGEF },
            |m: &mut OMJNOFBIODO| { &mut m.EDLHPFKPGEF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LMIBNDEPFHI",
            |m: &OMJNOFBIODO| { &m.LMIBNDEPFHI },
            |m: &mut OMJNOFBIODO| { &mut m.LMIBNDEPFHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HEMENIBJABH",
            |m: &OMJNOFBIODO| { &m.HEMENIBJABH },
            |m: &mut OMJNOFBIODO| { &mut m.HEMENIBJABH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LFFJPMCCIKD",
            |m: &OMJNOFBIODO| { &m.LFFJPMCCIKD },
            |m: &mut OMJNOFBIODO| { &mut m.LFFJPMCCIKD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HOJJFBAEBDA",
            |m: &OMJNOFBIODO| { &m.HOJJFBAEBDA },
            |m: &mut OMJNOFBIODO| { &mut m.HOJJFBAEBDA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KABOKLBMCLJ",
            |m: &OMJNOFBIODO| { &m.KABOKLBMCLJ },
            |m: &mut OMJNOFBIODO| { &mut m.KABOKLBMCLJ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OMJNOFBIODO>(
            "OMJNOFBIODO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OMJNOFBIODO {
    const NAME: &'static str = "OMJNOFBIODO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.HFEDLLHAELK = is.read_bool()?;
                },
                24 => {
                    self.MAMKEEKMJHA = is.read_uint32()?;
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.GJKHHFCBOCI)?;
                },
                120 => {
                    self.GJKHHFCBOCI.push(is.read_uint32()?);
                },
                74 => {
                    self.FKOHMNMAANH.push(is.read_message()?);
                },
                50 => {
                    self.EDLHPFKPGEF.push(is.read_message()?);
                },
                18 => {
                    self.LMIBNDEPFHI.push(is.read_message()?);
                },
                104 => {
                    self.HEMENIBJABH = is.read_uint32()?;
                },
                80 => {
                    self.LFFJPMCCIKD = is.read_bool()?;
                },
                112 => {
                    self.HOJJFBAEBDA = is.read_uint32()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.KABOKLBMCLJ)?;
                },
                40 => {
                    self.KABOKLBMCLJ.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HFEDLLHAELK != false {
            my_size += 1 + 1;
        }
        if self.MAMKEEKMJHA != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.MAMKEEKMJHA);
        }
        for value in &self.GJKHHFCBOCI {
            my_size += ::protobuf::rt::uint32_size(15, *value);
        };
        for value in &self.FKOHMNMAANH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.EDLHPFKPGEF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.LMIBNDEPFHI {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.HEMENIBJABH != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.HEMENIBJABH);
        }
        if self.LFFJPMCCIKD != false {
            my_size += 1 + 1;
        }
        if self.HOJJFBAEBDA != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.HOJJFBAEBDA);
        }
        for value in &self.KABOKLBMCLJ {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HFEDLLHAELK != false {
            os.write_bool(7, self.HFEDLLHAELK)?;
        }
        if self.MAMKEEKMJHA != 0 {
            os.write_uint32(3, self.MAMKEEKMJHA)?;
        }
        for v in &self.GJKHHFCBOCI {
            os.write_uint32(15, *v)?;
        };
        for v in &self.FKOHMNMAANH {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for v in &self.EDLHPFKPGEF {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.LMIBNDEPFHI {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.HEMENIBJABH != 0 {
            os.write_uint32(13, self.HEMENIBJABH)?;
        }
        if self.LFFJPMCCIKD != false {
            os.write_bool(10, self.LFFJPMCCIKD)?;
        }
        if self.HOJJFBAEBDA != 0 {
            os.write_uint32(14, self.HOJJFBAEBDA)?;
        }
        for v in &self.KABOKLBMCLJ {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OMJNOFBIODO {
        OMJNOFBIODO::new()
    }

    fn clear(&mut self) {
        self.HFEDLLHAELK = false;
        self.MAMKEEKMJHA = 0;
        self.GJKHHFCBOCI.clear();
        self.FKOHMNMAANH.clear();
        self.EDLHPFKPGEF.clear();
        self.LMIBNDEPFHI.clear();
        self.HEMENIBJABH = 0;
        self.LFFJPMCCIKD = false;
        self.HOJJFBAEBDA = 0;
        self.KABOKLBMCLJ.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OMJNOFBIODO {
        static instance: OMJNOFBIODO = OMJNOFBIODO {
            HFEDLLHAELK: false,
            MAMKEEKMJHA: 0,
            GJKHHFCBOCI: ::std::vec::Vec::new(),
            FKOHMNMAANH: ::std::vec::Vec::new(),
            EDLHPFKPGEF: ::std::vec::Vec::new(),
            LMIBNDEPFHI: ::std::vec::Vec::new(),
            HEMENIBJABH: 0,
            LFFJPMCCIKD: false,
            HOJJFBAEBDA: 0,
            KABOKLBMCLJ: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OMJNOFBIODO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OMJNOFBIODO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OMJNOFBIODO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OMJNOFBIODO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OMJNOFBIODO.proto\x1a\x11DOFHMFAKNAB.proto\x1a\x11HJAJEBCDKIC.prot\
    o\x1a\x11JCMNNKMOFEB.proto\"\x8b\x03\n\x0bOMJNOFBIODO\x12\x20\n\x0bHFEDL\
    LHAELK\x18\x07\x20\x01(\x08R\x0bHFEDLLHAELK\x12\x20\n\x0bMAMKEEKMJHA\x18\
    \x03\x20\x01(\rR\x0bMAMKEEKMJHA\x12\x20\n\x0bGJKHHFCBOCI\x18\x0f\x20\x03\
    (\rR\x0bGJKHHFCBOCI\x12.\n\x0bFKOHMNMAANH\x18\t\x20\x03(\x0b2\x0c.HJAJEB\
    CDKICR\x0bFKOHMNMAANH\x12.\n\x0bEDLHPFKPGEF\x18\x06\x20\x03(\x0b2\x0c.JC\
    MNNKMOFEBR\x0bEDLHPFKPGEF\x12.\n\x0bLMIBNDEPFHI\x18\x02\x20\x03(\x0b2\
    \x0c.DOFHMFAKNABR\x0bLMIBNDEPFHI\x12\x20\n\x0bHEMENIBJABH\x18\r\x20\x01(\
    \rR\x0bHEMENIBJABH\x12\x20\n\x0bLFFJPMCCIKD\x18\n\x20\x01(\x08R\x0bLFFJP\
    MCCIKD\x12\x20\n\x0bHOJJFBAEBDA\x18\x0e\x20\x01(\rR\x0bHOJJFBAEBDA\x12\
    \x20\n\x0bKABOKLBMCLJ\x18\x05\x20\x03(\rR\x0bKABOKLBMCLJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::DOFHMFAKNAB::file_descriptor().clone());
            deps.push(super::HJAJEBCDKIC::file_descriptor().clone());
            deps.push(super::JCMNNKMOFEB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OMJNOFBIODO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
