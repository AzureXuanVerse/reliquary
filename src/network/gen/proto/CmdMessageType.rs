// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdMessageType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdMessageType)
pub enum CmdMessageType {
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdMessageTypeNone)
    CmdMessageTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdFinishPerformSectionIdCsReq)
    CmdFinishPerformSectionIdCsReq = 2726,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdFinishItemIdScRsp)
    CmdFinishItemIdScRsp = 2706,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdFinishSectionIdScRsp)
    CmdFinishSectionIdScRsp = 2789,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdFinishSectionIdCsReq)
    CmdFinishSectionIdCsReq = 2770,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdFinishItemIdCsReq)
    CmdFinishItemIdCsReq = 2735,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdGetNpcMessageGroupScRsp)
    CmdGetNpcMessageGroupScRsp = 2713,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdGetNpcMessageGroupCsReq)
    CmdGetNpcMessageGroupCsReq = 2711,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdGetMissionMessageInfoScRsp)
    CmdGetMissionMessageInfoScRsp = 2718,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdGetMissionMessageInfoCsReq)
    CmdGetMissionMessageInfoCsReq = 2795,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdGetNpcStatusCsReq)
    CmdGetNpcStatusCsReq = 2747,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdGetNpcStatusScRsp)
    CmdGetNpcStatusScRsp = 2709,
    // @@protoc_insertion_point(enum_value:CmdMessageType.CmdFinishPerformSectionIdScRsp)
    CmdFinishPerformSectionIdScRsp = 2730,
}

impl ::protobuf::Enum for CmdMessageType {
    const NAME: &'static str = "CmdMessageType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdMessageType> {
        match value {
            0 => ::std::option::Option::Some(CmdMessageType::CmdMessageTypeNone),
            2726 => ::std::option::Option::Some(CmdMessageType::CmdFinishPerformSectionIdCsReq),
            2706 => ::std::option::Option::Some(CmdMessageType::CmdFinishItemIdScRsp),
            2789 => ::std::option::Option::Some(CmdMessageType::CmdFinishSectionIdScRsp),
            2770 => ::std::option::Option::Some(CmdMessageType::CmdFinishSectionIdCsReq),
            2735 => ::std::option::Option::Some(CmdMessageType::CmdFinishItemIdCsReq),
            2713 => ::std::option::Option::Some(CmdMessageType::CmdGetNpcMessageGroupScRsp),
            2711 => ::std::option::Option::Some(CmdMessageType::CmdGetNpcMessageGroupCsReq),
            2718 => ::std::option::Option::Some(CmdMessageType::CmdGetMissionMessageInfoScRsp),
            2795 => ::std::option::Option::Some(CmdMessageType::CmdGetMissionMessageInfoCsReq),
            2747 => ::std::option::Option::Some(CmdMessageType::CmdGetNpcStatusCsReq),
            2709 => ::std::option::Option::Some(CmdMessageType::CmdGetNpcStatusScRsp),
            2730 => ::std::option::Option::Some(CmdMessageType::CmdFinishPerformSectionIdScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdMessageType> {
        match str {
            "CmdMessageTypeNone" => ::std::option::Option::Some(CmdMessageType::CmdMessageTypeNone),
            "CmdFinishPerformSectionIdCsReq" => ::std::option::Option::Some(CmdMessageType::CmdFinishPerformSectionIdCsReq),
            "CmdFinishItemIdScRsp" => ::std::option::Option::Some(CmdMessageType::CmdFinishItemIdScRsp),
            "CmdFinishSectionIdScRsp" => ::std::option::Option::Some(CmdMessageType::CmdFinishSectionIdScRsp),
            "CmdFinishSectionIdCsReq" => ::std::option::Option::Some(CmdMessageType::CmdFinishSectionIdCsReq),
            "CmdFinishItemIdCsReq" => ::std::option::Option::Some(CmdMessageType::CmdFinishItemIdCsReq),
            "CmdGetNpcMessageGroupScRsp" => ::std::option::Option::Some(CmdMessageType::CmdGetNpcMessageGroupScRsp),
            "CmdGetNpcMessageGroupCsReq" => ::std::option::Option::Some(CmdMessageType::CmdGetNpcMessageGroupCsReq),
            "CmdGetMissionMessageInfoScRsp" => ::std::option::Option::Some(CmdMessageType::CmdGetMissionMessageInfoScRsp),
            "CmdGetMissionMessageInfoCsReq" => ::std::option::Option::Some(CmdMessageType::CmdGetMissionMessageInfoCsReq),
            "CmdGetNpcStatusCsReq" => ::std::option::Option::Some(CmdMessageType::CmdGetNpcStatusCsReq),
            "CmdGetNpcStatusScRsp" => ::std::option::Option::Some(CmdMessageType::CmdGetNpcStatusScRsp),
            "CmdFinishPerformSectionIdScRsp" => ::std::option::Option::Some(CmdMessageType::CmdFinishPerformSectionIdScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdMessageType] = &[
        CmdMessageType::CmdMessageTypeNone,
        CmdMessageType::CmdFinishPerformSectionIdCsReq,
        CmdMessageType::CmdFinishItemIdScRsp,
        CmdMessageType::CmdFinishSectionIdScRsp,
        CmdMessageType::CmdFinishSectionIdCsReq,
        CmdMessageType::CmdFinishItemIdCsReq,
        CmdMessageType::CmdGetNpcMessageGroupScRsp,
        CmdMessageType::CmdGetNpcMessageGroupCsReq,
        CmdMessageType::CmdGetMissionMessageInfoScRsp,
        CmdMessageType::CmdGetMissionMessageInfoCsReq,
        CmdMessageType::CmdGetNpcStatusCsReq,
        CmdMessageType::CmdGetNpcStatusScRsp,
        CmdMessageType::CmdFinishPerformSectionIdScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdMessageType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdMessageType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdMessageType::CmdMessageTypeNone => 0,
            CmdMessageType::CmdFinishPerformSectionIdCsReq => 1,
            CmdMessageType::CmdFinishItemIdScRsp => 2,
            CmdMessageType::CmdFinishSectionIdScRsp => 3,
            CmdMessageType::CmdFinishSectionIdCsReq => 4,
            CmdMessageType::CmdFinishItemIdCsReq => 5,
            CmdMessageType::CmdGetNpcMessageGroupScRsp => 6,
            CmdMessageType::CmdGetNpcMessageGroupCsReq => 7,
            CmdMessageType::CmdGetMissionMessageInfoScRsp => 8,
            CmdMessageType::CmdGetMissionMessageInfoCsReq => 9,
            CmdMessageType::CmdGetNpcStatusCsReq => 10,
            CmdMessageType::CmdGetNpcStatusScRsp => 11,
            CmdMessageType::CmdFinishPerformSectionIdScRsp => 12,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdMessageType {
    fn default() -> Self {
        CmdMessageType::CmdMessageTypeNone
    }
}

impl CmdMessageType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdMessageType>("CmdMessageType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14CmdMessageType.proto*\xa4\x03\n\x0eCmdMessageType\x12\x16\n\x12Cmd\
    MessageTypeNone\x10\0\x12#\n\x1eCmdFinishPerformSectionIdCsReq\x10\xa6\
    \x15\x12\x19\n\x14CmdFinishItemIdScRsp\x10\x92\x15\x12\x1c\n\x17CmdFinis\
    hSectionIdScRsp\x10\xe5\x15\x12\x1c\n\x17CmdFinishSectionIdCsReq\x10\xd2\
    \x15\x12\x19\n\x14CmdFinishItemIdCsReq\x10\xaf\x15\x12\x1f\n\x1aCmdGetNp\
    cMessageGroupScRsp\x10\x99\x15\x12\x1f\n\x1aCmdGetNpcMessageGroupCsReq\
    \x10\x97\x15\x12\"\n\x1dCmdGetMissionMessageInfoScRsp\x10\x9e\x15\x12\"\
    \n\x1dCmdGetMissionMessageInfoCsReq\x10\xeb\x15\x12\x19\n\x14CmdGetNpcSt\
    atusCsReq\x10\xbb\x15\x12\x19\n\x14CmdGetNpcStatusScRsp\x10\x95\x15\x12#\
    \n\x1eCmdFinishPerformSectionIdScRsp\x10\xaa\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdMessageType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
