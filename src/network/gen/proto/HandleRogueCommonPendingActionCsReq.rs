// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HandleRogueCommonPendingActionCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HandleRogueCommonPendingActionCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HandleRogueCommonPendingActionCsReq {
    // message fields
    // @@protoc_insertion_point(field:HandleRogueCommonPendingActionCsReq.queue_location)
    pub queue_location: u32,
    // message oneof groups
    pub action: ::std::option::Option<handle_rogue_common_pending_action_cs_req::Action>,
    // special fields
    // @@protoc_insertion_point(special_field:HandleRogueCommonPendingActionCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HandleRogueCommonPendingActionCsReq {
    fn default() -> &'a HandleRogueCommonPendingActionCsReq {
        <HandleRogueCommonPendingActionCsReq as ::protobuf::Message>::default_instance()
    }
}

impl HandleRogueCommonPendingActionCsReq {
    pub fn new() -> HandleRogueCommonPendingActionCsReq {
        ::std::default::Default::default()
    }

    // .RogueBuffSelectResult buff_select_result = 1840;

    pub fn buff_select_result(&self) -> &super::RogueBuffSelectResult::RogueBuffSelectResult {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(ref v)) => v,
            _ => <super::RogueBuffSelectResult::RogueBuffSelectResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_select_result(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_buff_select_result(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_select_result(&mut self, v: super::RogueBuffSelectResult::RogueBuffSelectResult) {
        self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_select_result(&mut self) -> &mut super::RogueBuffSelectResult::RogueBuffSelectResult {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(super::RogueBuffSelectResult::RogueBuffSelectResult::new()));
        }
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_select_result(&mut self) -> super::RogueBuffSelectResult::RogueBuffSelectResult {
        if self.has_buff_select_result() {
            match self.action.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueBuffSelectResult::RogueBuffSelectResult::new()
        }
    }

    // .RogueBuffRerollResult buff_reroll_select_result = 301;

    pub fn buff_reroll_select_result(&self) -> &super::RogueBuffRerollResult::RogueBuffRerollResult {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(ref v)) => v,
            _ => <super::RogueBuffRerollResult::RogueBuffRerollResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_reroll_select_result(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_buff_reroll_select_result(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_reroll_select_result(&mut self, v: super::RogueBuffRerollResult::RogueBuffRerollResult) {
        self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_reroll_select_result(&mut self) -> &mut super::RogueBuffRerollResult::RogueBuffRerollResult {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(super::RogueBuffRerollResult::RogueBuffRerollResult::new()));
        }
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_reroll_select_result(&mut self) -> super::RogueBuffRerollResult::RogueBuffRerollResult {
        if self.has_buff_reroll_select_result() {
            match self.action.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueBuffRerollResult::RogueBuffRerollResult::new()
        }
    }

    // .RogueBuffReforgeSelectResult buff_reforge_select_result = 954;

    pub fn buff_reforge_select_result(&self) -> &super::RogueBuffReforgeSelectResult::RogueBuffReforgeSelectResult {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(ref v)) => v,
            _ => <super::RogueBuffReforgeSelectResult::RogueBuffReforgeSelectResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_reforge_select_result(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_buff_reforge_select_result(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_reforge_select_result(&mut self, v: super::RogueBuffReforgeSelectResult::RogueBuffReforgeSelectResult) {
        self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_reforge_select_result(&mut self) -> &mut super::RogueBuffReforgeSelectResult::RogueBuffReforgeSelectResult {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(super::RogueBuffReforgeSelectResult::RogueBuffReforgeSelectResult::new()));
        }
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_reforge_select_result(&mut self) -> super::RogueBuffReforgeSelectResult::RogueBuffReforgeSelectResult {
        if self.has_buff_reforge_select_result() {
            match self.action.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueBuffReforgeSelectResult::RogueBuffReforgeSelectResult::new()
        }
    }

    // .RogueMiracleSelectResult miracle_select_result = 1880;

    pub fn miracle_select_result(&self) -> &super::RogueMiracleSelectResult::RogueMiracleSelectResult {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(ref v)) => v,
            _ => <super::RogueMiracleSelectResult::RogueMiracleSelectResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_miracle_select_result(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_miracle_select_result(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_miracle_select_result(&mut self, v: super::RogueMiracleSelectResult::RogueMiracleSelectResult) {
        self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_miracle_select_result(&mut self) -> &mut super::RogueMiracleSelectResult::RogueMiracleSelectResult {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(super::RogueMiracleSelectResult::RogueMiracleSelectResult::new()));
        }
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_miracle_select_result(&mut self) -> super::RogueMiracleSelectResult::RogueMiracleSelectResult {
        if self.has_miracle_select_result() {
            match self.action.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueMiracleSelectResult::RogueMiracleSelectResult::new()
        }
    }

    // .RogueBonusSelectResult bonus_select_result = 1380;

    pub fn bonus_select_result(&self) -> &super::RogueBonusSelectResult::RogueBonusSelectResult {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(ref v)) => v,
            _ => <super::RogueBonusSelectResult::RogueBonusSelectResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bonus_select_result(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_bonus_select_result(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bonus_select_result(&mut self, v: super::RogueBonusSelectResult::RogueBonusSelectResult) {
        self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bonus_select_result(&mut self) -> &mut super::RogueBonusSelectResult::RogueBonusSelectResult {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(super::RogueBonusSelectResult::RogueBonusSelectResult::new()));
        }
        match self.action {
            ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bonus_select_result(&mut self) -> super::RogueBonusSelectResult::RogueBonusSelectResult {
        if self.has_bonus_select_result() {
            match self.action.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueBonusSelectResult::RogueBonusSelectResult::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueBuffSelectResult::RogueBuffSelectResult>(
            "buff_select_result",
            HandleRogueCommonPendingActionCsReq::has_buff_select_result,
            HandleRogueCommonPendingActionCsReq::buff_select_result,
            HandleRogueCommonPendingActionCsReq::mut_buff_select_result,
            HandleRogueCommonPendingActionCsReq::set_buff_select_result,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueBuffRerollResult::RogueBuffRerollResult>(
            "buff_reroll_select_result",
            HandleRogueCommonPendingActionCsReq::has_buff_reroll_select_result,
            HandleRogueCommonPendingActionCsReq::buff_reroll_select_result,
            HandleRogueCommonPendingActionCsReq::mut_buff_reroll_select_result,
            HandleRogueCommonPendingActionCsReq::set_buff_reroll_select_result,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueBuffReforgeSelectResult::RogueBuffReforgeSelectResult>(
            "buff_reforge_select_result",
            HandleRogueCommonPendingActionCsReq::has_buff_reforge_select_result,
            HandleRogueCommonPendingActionCsReq::buff_reforge_select_result,
            HandleRogueCommonPendingActionCsReq::mut_buff_reforge_select_result,
            HandleRogueCommonPendingActionCsReq::set_buff_reforge_select_result,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueMiracleSelectResult::RogueMiracleSelectResult>(
            "miracle_select_result",
            HandleRogueCommonPendingActionCsReq::has_miracle_select_result,
            HandleRogueCommonPendingActionCsReq::miracle_select_result,
            HandleRogueCommonPendingActionCsReq::mut_miracle_select_result,
            HandleRogueCommonPendingActionCsReq::set_miracle_select_result,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueBonusSelectResult::RogueBonusSelectResult>(
            "bonus_select_result",
            HandleRogueCommonPendingActionCsReq::has_bonus_select_result,
            HandleRogueCommonPendingActionCsReq::bonus_select_result,
            HandleRogueCommonPendingActionCsReq::mut_bonus_select_result,
            HandleRogueCommonPendingActionCsReq::set_bonus_select_result,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "queue_location",
            |m: &HandleRogueCommonPendingActionCsReq| { &m.queue_location },
            |m: &mut HandleRogueCommonPendingActionCsReq| { &mut m.queue_location },
        ));
        oneofs.push(handle_rogue_common_pending_action_cs_req::Action::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HandleRogueCommonPendingActionCsReq>(
            "HandleRogueCommonPendingActionCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HandleRogueCommonPendingActionCsReq {
    const NAME: &'static str = "HandleRogueCommonPendingActionCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                14722 => {
                    self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(is.read_message()?));
                },
                2410 => {
                    self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(is.read_message()?));
                },
                7634 => {
                    self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(is.read_message()?));
                },
                15042 => {
                    self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(is.read_message()?));
                },
                11042 => {
                    self.action = ::std::option::Option::Some(handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(is.read_message()?));
                },
                56 => {
                    self.queue_location = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.queue_location != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.queue_location);
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.queue_location != 0 {
            os.write_uint32(7, self.queue_location)?;
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &handle_rogue_common_pending_action_cs_req::Action::BuffSelectResult(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1840, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::Action::BuffRerollSelectResult(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(301, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::Action::BuffReforgeSelectResult(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(954, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::Action::MiracleSelectResult(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1880, v, os)?;
                },
                &handle_rogue_common_pending_action_cs_req::Action::BonusSelectResult(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1380, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HandleRogueCommonPendingActionCsReq {
        HandleRogueCommonPendingActionCsReq::new()
    }

    fn clear(&mut self) {
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.queue_location = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HandleRogueCommonPendingActionCsReq {
        static instance: HandleRogueCommonPendingActionCsReq = HandleRogueCommonPendingActionCsReq {
            queue_location: 0,
            action: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HandleRogueCommonPendingActionCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HandleRogueCommonPendingActionCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HandleRogueCommonPendingActionCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleRogueCommonPendingActionCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HandleRogueCommonPendingActionCsReq`
pub mod handle_rogue_common_pending_action_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:HandleRogueCommonPendingActionCsReq.action)
    pub enum Action {
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.buff_select_result)
        BuffSelectResult(super::super::RogueBuffSelectResult::RogueBuffSelectResult),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.buff_reroll_select_result)
        BuffRerollSelectResult(super::super::RogueBuffRerollResult::RogueBuffRerollResult),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.buff_reforge_select_result)
        BuffReforgeSelectResult(super::super::RogueBuffReforgeSelectResult::RogueBuffReforgeSelectResult),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.miracle_select_result)
        MiracleSelectResult(super::super::RogueMiracleSelectResult::RogueMiracleSelectResult),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionCsReq.bonus_select_result)
        BonusSelectResult(super::super::RogueBonusSelectResult::RogueBonusSelectResult),
    }

    impl ::protobuf::Oneof for Action {
    }

    impl ::protobuf::OneofFull for Action {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::HandleRogueCommonPendingActionCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("action").unwrap()).clone()
        }
    }

    impl Action {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Action>("action")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)HandleRogueCommonPendingActionCsReq.proto\x1a\x1eRogueMiracleSelectRe\
    sult.proto\x1a\x1cRogueBonusSelectResult.proto\x1a\x1bRogueBuffSelectRes\
    ult.proto\x1a\x1bRogueBuffRerollResult.proto\x1a\"RogueBuffReforgeSelect\
    Result.proto\"\xf2\x03\n#HandleRogueCommonPendingActionCsReq\x12G\n\x12b\
    uff_select_result\x18\xb0\x0e\x20\x01(\x0b2\x16.RogueBuffSelectResultH\0\
    R\x10buffSelectResult\x12T\n\x19buff_reroll_select_result\x18\xad\x02\
    \x20\x01(\x0b2\x16.RogueBuffRerollResultH\0R\x16buffRerollSelectResult\
    \x12]\n\x1abuff_reforge_select_result\x18\xba\x07\x20\x01(\x0b2\x1d.Rogu\
    eBuffReforgeSelectResultH\0R\x17buffReforgeSelectResult\x12P\n\x15miracl\
    e_select_result\x18\xd8\x0e\x20\x01(\x0b2\x19.RogueMiracleSelectResultH\
    \0R\x13miracleSelectResult\x12J\n\x13bonus_select_result\x18\xe4\n\x20\
    \x01(\x0b2\x17.RogueBonusSelectResultH\0R\x11bonusSelectResult\x12%\n\
    \x0equeue_location\x18\x07\x20\x01(\rR\rqueueLocationB\x08\n\x06actionB\
    \x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::RogueMiracleSelectResult::file_descriptor().clone());
            deps.push(super::RogueBonusSelectResult::file_descriptor().clone());
            deps.push(super::RogueBuffSelectResult::file_descriptor().clone());
            deps.push(super::RogueBuffRerollResult::file_descriptor().clone());
            deps.push(super::RogueBuffReforgeSelectResult::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HandleRogueCommonPendingActionCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
