// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `NADHCNJHLDA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:NADHCNJHLDA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NADHCNJHLDA {
    // message oneof groups
    pub NAEKMCFCFKA: ::std::option::Option<nadhcnjhlda::NAEKMCFCFKA>,
    // special fields
    // @@protoc_insertion_point(special_field:NADHCNJHLDA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NADHCNJHLDA {
    fn default() -> &'a NADHCNJHLDA {
        <NADHCNJHLDA as ::protobuf::Message>::default_instance()
    }
}

impl NADHCNJHLDA {
    pub fn new() -> NADHCNJHLDA {
        ::std::default::Default::default()
    }

    // .IMAMAOLHJNC JKCJBOKLOFK = 5;

    pub fn JKCJBOKLOFK(&self) -> &super::IMAMAOLHJNC::IMAMAOLHJNC {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(ref v)) => v,
            _ => <super::IMAMAOLHJNC::IMAMAOLHJNC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JKCJBOKLOFK(&mut self) {
        self.NAEKMCFCFKA = ::std::option::Option::None;
    }

    pub fn has_JKCJBOKLOFK(&self) -> bool {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JKCJBOKLOFK(&mut self, v: super::IMAMAOLHJNC::IMAMAOLHJNC) {
        self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JKCJBOKLOFK(&mut self) -> &mut super::IMAMAOLHJNC::IMAMAOLHJNC {
        if let ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(_)) = self.NAEKMCFCFKA {
        } else {
            self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(super::IMAMAOLHJNC::IMAMAOLHJNC::new()));
        }
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JKCJBOKLOFK(&mut self) -> super::IMAMAOLHJNC::IMAMAOLHJNC {
        if self.has_JKCJBOKLOFK() {
            match self.NAEKMCFCFKA.take() {
                ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IMAMAOLHJNC::IMAMAOLHJNC::new()
        }
    }

    // .HPFNNOKPDPF GDBKCODHEFM = 4;

    pub fn GDBKCODHEFM(&self) -> &super::HPFNNOKPDPF::HPFNNOKPDPF {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(ref v)) => v,
            _ => <super::HPFNNOKPDPF::HPFNNOKPDPF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GDBKCODHEFM(&mut self) {
        self.NAEKMCFCFKA = ::std::option::Option::None;
    }

    pub fn has_GDBKCODHEFM(&self) -> bool {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GDBKCODHEFM(&mut self, v: super::HPFNNOKPDPF::HPFNNOKPDPF) {
        self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GDBKCODHEFM(&mut self) -> &mut super::HPFNNOKPDPF::HPFNNOKPDPF {
        if let ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(_)) = self.NAEKMCFCFKA {
        } else {
            self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(super::HPFNNOKPDPF::HPFNNOKPDPF::new()));
        }
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GDBKCODHEFM(&mut self) -> super::HPFNNOKPDPF::HPFNNOKPDPF {
        if self.has_GDBKCODHEFM() {
            match self.NAEKMCFCFKA.take() {
                ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HPFNNOKPDPF::HPFNNOKPDPF::new()
        }
    }

    // .JPIEFMHGAJL JFEPLAKJGBD = 15;

    pub fn JFEPLAKJGBD(&self) -> &super::JPIEFMHGAJL::JPIEFMHGAJL {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(ref v)) => v,
            _ => <super::JPIEFMHGAJL::JPIEFMHGAJL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JFEPLAKJGBD(&mut self) {
        self.NAEKMCFCFKA = ::std::option::Option::None;
    }

    pub fn has_JFEPLAKJGBD(&self) -> bool {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JFEPLAKJGBD(&mut self, v: super::JPIEFMHGAJL::JPIEFMHGAJL) {
        self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JFEPLAKJGBD(&mut self) -> &mut super::JPIEFMHGAJL::JPIEFMHGAJL {
        if let ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(_)) = self.NAEKMCFCFKA {
        } else {
            self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(super::JPIEFMHGAJL::JPIEFMHGAJL::new()));
        }
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JFEPLAKJGBD(&mut self) -> super::JPIEFMHGAJL::JPIEFMHGAJL {
        if self.has_JFEPLAKJGBD() {
            match self.NAEKMCFCFKA.take() {
                ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JPIEFMHGAJL::JPIEFMHGAJL::new()
        }
    }

    // .FDLBEOALEIL GKOJBNMDNHI = 7;

    pub fn GKOJBNMDNHI(&self) -> &super::FDLBEOALEIL::FDLBEOALEIL {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(ref v)) => v,
            _ => <super::FDLBEOALEIL::FDLBEOALEIL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GKOJBNMDNHI(&mut self) {
        self.NAEKMCFCFKA = ::std::option::Option::None;
    }

    pub fn has_GKOJBNMDNHI(&self) -> bool {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GKOJBNMDNHI(&mut self, v: super::FDLBEOALEIL::FDLBEOALEIL) {
        self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GKOJBNMDNHI(&mut self) -> &mut super::FDLBEOALEIL::FDLBEOALEIL {
        if let ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(_)) = self.NAEKMCFCFKA {
        } else {
            self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(super::FDLBEOALEIL::FDLBEOALEIL::new()));
        }
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GKOJBNMDNHI(&mut self) -> super::FDLBEOALEIL::FDLBEOALEIL {
        if self.has_GKOJBNMDNHI() {
            match self.NAEKMCFCFKA.take() {
                ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FDLBEOALEIL::FDLBEOALEIL::new()
        }
    }

    // .HLDINEHNOML EAOFCFHMKAG = 13;

    pub fn EAOFCFHMKAG(&self) -> &super::HLDINEHNOML::HLDINEHNOML {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(ref v)) => v,
            _ => <super::HLDINEHNOML::HLDINEHNOML as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EAOFCFHMKAG(&mut self) {
        self.NAEKMCFCFKA = ::std::option::Option::None;
    }

    pub fn has_EAOFCFHMKAG(&self) -> bool {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EAOFCFHMKAG(&mut self, v: super::HLDINEHNOML::HLDINEHNOML) {
        self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EAOFCFHMKAG(&mut self) -> &mut super::HLDINEHNOML::HLDINEHNOML {
        if let ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(_)) = self.NAEKMCFCFKA {
        } else {
            self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(super::HLDINEHNOML::HLDINEHNOML::new()));
        }
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EAOFCFHMKAG(&mut self) -> super::HLDINEHNOML::HLDINEHNOML {
        if self.has_EAOFCFHMKAG() {
            match self.NAEKMCFCFKA.take() {
                ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HLDINEHNOML::HLDINEHNOML::new()
        }
    }

    // .JLJJJICCIDG BDBAFJLIHJA = 8;

    pub fn BDBAFJLIHJA(&self) -> &super::JLJJJICCIDG::JLJJJICCIDG {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(ref v)) => v,
            _ => <super::JLJJJICCIDG::JLJJJICCIDG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BDBAFJLIHJA(&mut self) {
        self.NAEKMCFCFKA = ::std::option::Option::None;
    }

    pub fn has_BDBAFJLIHJA(&self) -> bool {
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BDBAFJLIHJA(&mut self, v: super::JLJJJICCIDG::JLJJJICCIDG) {
        self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BDBAFJLIHJA(&mut self) -> &mut super::JLJJJICCIDG::JLJJJICCIDG {
        if let ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(_)) = self.NAEKMCFCFKA {
        } else {
            self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(super::JLJJJICCIDG::JLJJJICCIDG::new()));
        }
        match self.NAEKMCFCFKA {
            ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BDBAFJLIHJA(&mut self) -> super::JLJJJICCIDG::JLJJJICCIDG {
        if self.has_BDBAFJLIHJA() {
            match self.NAEKMCFCFKA.take() {
                ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JLJJJICCIDG::JLJJJICCIDG::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IMAMAOLHJNC::IMAMAOLHJNC>(
            "JKCJBOKLOFK",
            NADHCNJHLDA::has_JKCJBOKLOFK,
            NADHCNJHLDA::JKCJBOKLOFK,
            NADHCNJHLDA::mut_JKCJBOKLOFK,
            NADHCNJHLDA::set_JKCJBOKLOFK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HPFNNOKPDPF::HPFNNOKPDPF>(
            "GDBKCODHEFM",
            NADHCNJHLDA::has_GDBKCODHEFM,
            NADHCNJHLDA::GDBKCODHEFM,
            NADHCNJHLDA::mut_GDBKCODHEFM,
            NADHCNJHLDA::set_GDBKCODHEFM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JPIEFMHGAJL::JPIEFMHGAJL>(
            "JFEPLAKJGBD",
            NADHCNJHLDA::has_JFEPLAKJGBD,
            NADHCNJHLDA::JFEPLAKJGBD,
            NADHCNJHLDA::mut_JFEPLAKJGBD,
            NADHCNJHLDA::set_JFEPLAKJGBD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FDLBEOALEIL::FDLBEOALEIL>(
            "GKOJBNMDNHI",
            NADHCNJHLDA::has_GKOJBNMDNHI,
            NADHCNJHLDA::GKOJBNMDNHI,
            NADHCNJHLDA::mut_GKOJBNMDNHI,
            NADHCNJHLDA::set_GKOJBNMDNHI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HLDINEHNOML::HLDINEHNOML>(
            "EAOFCFHMKAG",
            NADHCNJHLDA::has_EAOFCFHMKAG,
            NADHCNJHLDA::EAOFCFHMKAG,
            NADHCNJHLDA::mut_EAOFCFHMKAG,
            NADHCNJHLDA::set_EAOFCFHMKAG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JLJJJICCIDG::JLJJJICCIDG>(
            "BDBAFJLIHJA",
            NADHCNJHLDA::has_BDBAFJLIHJA,
            NADHCNJHLDA::BDBAFJLIHJA,
            NADHCNJHLDA::mut_BDBAFJLIHJA,
            NADHCNJHLDA::set_BDBAFJLIHJA,
        ));
        oneofs.push(nadhcnjhlda::NAEKMCFCFKA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NADHCNJHLDA>(
            "NADHCNJHLDA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NADHCNJHLDA {
    const NAME: &'static str = "NADHCNJHLDA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                42 => {
                    self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(is.read_message()?));
                },
                34 => {
                    self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(is.read_message()?));
                },
                122 => {
                    self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(is.read_message()?));
                },
                58 => {
                    self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(is.read_message()?));
                },
                106 => {
                    self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(is.read_message()?));
                },
                66 => {
                    self.NAEKMCFCFKA = ::std::option::Option::Some(nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.NAEKMCFCFKA {
            match v {
                &nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.NAEKMCFCFKA {
            match v {
                &nadhcnjhlda::NAEKMCFCFKA::JKCJBOKLOFK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &nadhcnjhlda::NAEKMCFCFKA::GDBKCODHEFM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &nadhcnjhlda::NAEKMCFCFKA::JFEPLAKJGBD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &nadhcnjhlda::NAEKMCFCFKA::GKOJBNMDNHI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &nadhcnjhlda::NAEKMCFCFKA::EAOFCFHMKAG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &nadhcnjhlda::NAEKMCFCFKA::BDBAFJLIHJA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NADHCNJHLDA {
        NADHCNJHLDA::new()
    }

    fn clear(&mut self) {
        self.NAEKMCFCFKA = ::std::option::Option::None;
        self.NAEKMCFCFKA = ::std::option::Option::None;
        self.NAEKMCFCFKA = ::std::option::Option::None;
        self.NAEKMCFCFKA = ::std::option::Option::None;
        self.NAEKMCFCFKA = ::std::option::Option::None;
        self.NAEKMCFCFKA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NADHCNJHLDA {
        static instance: NADHCNJHLDA = NADHCNJHLDA {
            NAEKMCFCFKA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NADHCNJHLDA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NADHCNJHLDA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NADHCNJHLDA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NADHCNJHLDA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `NADHCNJHLDA`
pub mod nadhcnjhlda {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:NADHCNJHLDA.NAEKMCFCFKA)
    pub enum NAEKMCFCFKA {
        // @@protoc_insertion_point(oneof_field:NADHCNJHLDA.JKCJBOKLOFK)
        JKCJBOKLOFK(super::super::IMAMAOLHJNC::IMAMAOLHJNC),
        // @@protoc_insertion_point(oneof_field:NADHCNJHLDA.GDBKCODHEFM)
        GDBKCODHEFM(super::super::HPFNNOKPDPF::HPFNNOKPDPF),
        // @@protoc_insertion_point(oneof_field:NADHCNJHLDA.JFEPLAKJGBD)
        JFEPLAKJGBD(super::super::JPIEFMHGAJL::JPIEFMHGAJL),
        // @@protoc_insertion_point(oneof_field:NADHCNJHLDA.GKOJBNMDNHI)
        GKOJBNMDNHI(super::super::FDLBEOALEIL::FDLBEOALEIL),
        // @@protoc_insertion_point(oneof_field:NADHCNJHLDA.EAOFCFHMKAG)
        EAOFCFHMKAG(super::super::HLDINEHNOML::HLDINEHNOML),
        // @@protoc_insertion_point(oneof_field:NADHCNJHLDA.BDBAFJLIHJA)
        BDBAFJLIHJA(super::super::JLJJJICCIDG::JLJJJICCIDG),
    }

    impl ::protobuf::Oneof for NAEKMCFCFKA {
    }

    impl ::protobuf::OneofFull for NAEKMCFCFKA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::NADHCNJHLDA as ::protobuf::MessageFull>::descriptor().oneof_by_name("NAEKMCFCFKA").unwrap()).clone()
        }
    }

    impl NAEKMCFCFKA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<NAEKMCFCFKA>("NAEKMCFCFKA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11NADHCNJHLDA.proto\x1a\x11FDLBEOALEIL.proto\x1a\x11HLDINEHNOML.prot\
    o\x1a\x11HPFNNOKPDPF.proto\x1a\x11IMAMAOLHJNC.proto\x1a\x11JLJJJICCIDG.p\
    roto\x1a\x11JPIEFMHGAJL.proto\"\xc8\x02\n\x0bNADHCNJHLDA\x120\n\x0bJKCJB\
    OKLOFK\x18\x05\x20\x01(\x0b2\x0c.IMAMAOLHJNCH\0R\x0bJKCJBOKLOFK\x120\n\
    \x0bGDBKCODHEFM\x18\x04\x20\x01(\x0b2\x0c.HPFNNOKPDPFH\0R\x0bGDBKCODHEFM\
    \x120\n\x0bJFEPLAKJGBD\x18\x0f\x20\x01(\x0b2\x0c.JPIEFMHGAJLH\0R\x0bJFEP\
    LAKJGBD\x120\n\x0bGKOJBNMDNHI\x18\x07\x20\x01(\x0b2\x0c.FDLBEOALEILH\0R\
    \x0bGKOJBNMDNHI\x120\n\x0bEAOFCFHMKAG\x18\r\x20\x01(\x0b2\x0c.HLDINEHNOM\
    LH\0R\x0bEAOFCFHMKAG\x120\n\x0bBDBAFJLIHJA\x18\x08\x20\x01(\x0b2\x0c.JLJ\
    JJICCIDGH\0R\x0bBDBAFJLIHJAB\r\n\x0bNAEKMCFCFKAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::FDLBEOALEIL::file_descriptor().clone());
            deps.push(super::HLDINEHNOML::file_descriptor().clone());
            deps.push(super::HPFNNOKPDPF::file_descriptor().clone());
            deps.push(super::IMAMAOLHJNC::file_descriptor().clone());
            deps.push(super::JLJJJICCIDG::file_descriptor().clone());
            deps.push(super::JPIEFMHGAJL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(NADHCNJHLDA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
