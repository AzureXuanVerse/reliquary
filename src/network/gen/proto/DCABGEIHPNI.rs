// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DCABGEIHPNI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:DCABGEIHPNI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DCABGEIHPNI {
    // message fields
    // @@protoc_insertion_point(field:DCABGEIHPNI.NEELAOPALDP)
    pub NEELAOPALDP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:DCABGEIHPNI.OEOJKCAKLJP)
    pub OEOJKCAKLJP: ::std::vec::Vec<super::EOBCFPEGNJP::EOBCFPEGNJP>,
    // @@protoc_insertion_point(field:DCABGEIHPNI.ACOPDFAKFLD)
    pub ACOPDFAKFLD: u32,
    // @@protoc_insertion_point(field:DCABGEIHPNI.EPDCCPMACBO)
    pub EPDCCPMACBO: ::protobuf::MessageField<super::LFKJBBFJDKN::LFKJBBFJDKN>,
    // @@protoc_insertion_point(field:DCABGEIHPNI.LEEACMNGDFL)
    pub LEEACMNGDFL: ::protobuf::EnumOrUnknown<super::RogueCommonBuffSelectSourceType::RogueCommonBuffSelectSourceType>,
    // @@protoc_insertion_point(field:DCABGEIHPNI.DKECOMCNABE)
    pub DKECOMCNABE: bool,
    // @@protoc_insertion_point(field:DCABGEIHPNI.HBDKEIEAFKL)
    pub HBDKEIEAFKL: u32,
    // @@protoc_insertion_point(field:DCABGEIHPNI.OKDCCJGCNMA)
    pub OKDCCJGCNMA: u32,
    // @@protoc_insertion_point(field:DCABGEIHPNI.HBGEFOMBGAD)
    pub HBGEFOMBGAD: u32,
    // @@protoc_insertion_point(field:DCABGEIHPNI.FDFKNCGPFHH)
    pub FDFKNCGPFHH: u32,
    // @@protoc_insertion_point(field:DCABGEIHPNI.NNGAFMPJBNB)
    pub NNGAFMPJBNB: u32,
    // @@protoc_insertion_point(field:DCABGEIHPNI.OPFGEDLJCBL)
    pub OPFGEDLJCBL: u32,
    // @@protoc_insertion_point(field:DCABGEIHPNI.IFODPHLHIKB)
    pub IFODPHLHIKB: u32,
    // special fields
    // @@protoc_insertion_point(special_field:DCABGEIHPNI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DCABGEIHPNI {
    fn default() -> &'a DCABGEIHPNI {
        <DCABGEIHPNI as ::protobuf::Message>::default_instance()
    }
}

impl DCABGEIHPNI {
    pub fn new() -> DCABGEIHPNI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NEELAOPALDP",
            |m: &DCABGEIHPNI| { &m.NEELAOPALDP },
            |m: &mut DCABGEIHPNI| { &mut m.NEELAOPALDP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OEOJKCAKLJP",
            |m: &DCABGEIHPNI| { &m.OEOJKCAKLJP },
            |m: &mut DCABGEIHPNI| { &mut m.OEOJKCAKLJP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACOPDFAKFLD",
            |m: &DCABGEIHPNI| { &m.ACOPDFAKFLD },
            |m: &mut DCABGEIHPNI| { &mut m.ACOPDFAKFLD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LFKJBBFJDKN::LFKJBBFJDKN>(
            "EPDCCPMACBO",
            |m: &DCABGEIHPNI| { &m.EPDCCPMACBO },
            |m: &mut DCABGEIHPNI| { &mut m.EPDCCPMACBO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LEEACMNGDFL",
            |m: &DCABGEIHPNI| { &m.LEEACMNGDFL },
            |m: &mut DCABGEIHPNI| { &mut m.LEEACMNGDFL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKECOMCNABE",
            |m: &DCABGEIHPNI| { &m.DKECOMCNABE },
            |m: &mut DCABGEIHPNI| { &mut m.DKECOMCNABE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HBDKEIEAFKL",
            |m: &DCABGEIHPNI| { &m.HBDKEIEAFKL },
            |m: &mut DCABGEIHPNI| { &mut m.HBDKEIEAFKL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OKDCCJGCNMA",
            |m: &DCABGEIHPNI| { &m.OKDCCJGCNMA },
            |m: &mut DCABGEIHPNI| { &mut m.OKDCCJGCNMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HBGEFOMBGAD",
            |m: &DCABGEIHPNI| { &m.HBGEFOMBGAD },
            |m: &mut DCABGEIHPNI| { &mut m.HBGEFOMBGAD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FDFKNCGPFHH",
            |m: &DCABGEIHPNI| { &m.FDFKNCGPFHH },
            |m: &mut DCABGEIHPNI| { &mut m.FDFKNCGPFHH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NNGAFMPJBNB",
            |m: &DCABGEIHPNI| { &m.NNGAFMPJBNB },
            |m: &mut DCABGEIHPNI| { &mut m.NNGAFMPJBNB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OPFGEDLJCBL",
            |m: &DCABGEIHPNI| { &m.OPFGEDLJCBL },
            |m: &mut DCABGEIHPNI| { &mut m.OPFGEDLJCBL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IFODPHLHIKB",
            |m: &DCABGEIHPNI| { &m.IFODPHLHIKB },
            |m: &mut DCABGEIHPNI| { &mut m.IFODPHLHIKB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DCABGEIHPNI>(
            "DCABGEIHPNI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DCABGEIHPNI {
    const NAME: &'static str = "DCABGEIHPNI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.NEELAOPALDP)?;
                },
                56 => {
                    self.NEELAOPALDP.push(is.read_uint32()?);
                },
                66 => {
                    self.OEOJKCAKLJP.push(is.read_message()?);
                },
                8 => {
                    self.ACOPDFAKFLD = is.read_uint32()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EPDCCPMACBO)?;
                },
                32 => {
                    self.LEEACMNGDFL = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.DKECOMCNABE = is.read_bool()?;
                },
                72 => {
                    self.HBDKEIEAFKL = is.read_uint32()?;
                },
                112 => {
                    self.OKDCCJGCNMA = is.read_uint32()?;
                },
                120 => {
                    self.HBGEFOMBGAD = is.read_uint32()?;
                },
                88 => {
                    self.FDFKNCGPFHH = is.read_uint32()?;
                },
                104 => {
                    self.NNGAFMPJBNB = is.read_uint32()?;
                },
                80 => {
                    self.OPFGEDLJCBL = is.read_uint32()?;
                },
                40 => {
                    self.IFODPHLHIKB = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.NEELAOPALDP {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        for value in &self.OEOJKCAKLJP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.ACOPDFAKFLD != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.ACOPDFAKFLD);
        }
        if let Some(v) = self.EPDCCPMACBO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.LEEACMNGDFL != ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSourceType::RogueCommonBuffSelectSourceType::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(4, self.LEEACMNGDFL.value());
        }
        if self.DKECOMCNABE != false {
            my_size += 1 + 1;
        }
        if self.HBDKEIEAFKL != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.HBDKEIEAFKL);
        }
        if self.OKDCCJGCNMA != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.OKDCCJGCNMA);
        }
        if self.HBGEFOMBGAD != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.HBGEFOMBGAD);
        }
        if self.FDFKNCGPFHH != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.FDFKNCGPFHH);
        }
        if self.NNGAFMPJBNB != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.NNGAFMPJBNB);
        }
        if self.OPFGEDLJCBL != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.OPFGEDLJCBL);
        }
        if self.IFODPHLHIKB != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.IFODPHLHIKB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.NEELAOPALDP {
            os.write_uint32(7, *v)?;
        };
        for v in &self.OEOJKCAKLJP {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.ACOPDFAKFLD != 0 {
            os.write_uint32(1, self.ACOPDFAKFLD)?;
        }
        if let Some(v) = self.EPDCCPMACBO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if self.LEEACMNGDFL != ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSourceType::RogueCommonBuffSelectSourceType::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.LEEACMNGDFL))?;
        }
        if self.DKECOMCNABE != false {
            os.write_bool(3, self.DKECOMCNABE)?;
        }
        if self.HBDKEIEAFKL != 0 {
            os.write_uint32(9, self.HBDKEIEAFKL)?;
        }
        if self.OKDCCJGCNMA != 0 {
            os.write_uint32(14, self.OKDCCJGCNMA)?;
        }
        if self.HBGEFOMBGAD != 0 {
            os.write_uint32(15, self.HBGEFOMBGAD)?;
        }
        if self.FDFKNCGPFHH != 0 {
            os.write_uint32(11, self.FDFKNCGPFHH)?;
        }
        if self.NNGAFMPJBNB != 0 {
            os.write_uint32(13, self.NNGAFMPJBNB)?;
        }
        if self.OPFGEDLJCBL != 0 {
            os.write_uint32(10, self.OPFGEDLJCBL)?;
        }
        if self.IFODPHLHIKB != 0 {
            os.write_uint32(5, self.IFODPHLHIKB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DCABGEIHPNI {
        DCABGEIHPNI::new()
    }

    fn clear(&mut self) {
        self.NEELAOPALDP.clear();
        self.OEOJKCAKLJP.clear();
        self.ACOPDFAKFLD = 0;
        self.EPDCCPMACBO.clear();
        self.LEEACMNGDFL = ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSourceType::RogueCommonBuffSelectSourceType::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE);
        self.DKECOMCNABE = false;
        self.HBDKEIEAFKL = 0;
        self.OKDCCJGCNMA = 0;
        self.HBGEFOMBGAD = 0;
        self.FDFKNCGPFHH = 0;
        self.NNGAFMPJBNB = 0;
        self.OPFGEDLJCBL = 0;
        self.IFODPHLHIKB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DCABGEIHPNI {
        static instance: DCABGEIHPNI = DCABGEIHPNI {
            NEELAOPALDP: ::std::vec::Vec::new(),
            OEOJKCAKLJP: ::std::vec::Vec::new(),
            ACOPDFAKFLD: 0,
            EPDCCPMACBO: ::protobuf::MessageField::none(),
            LEEACMNGDFL: ::protobuf::EnumOrUnknown::from_i32(0),
            DKECOMCNABE: false,
            HBDKEIEAFKL: 0,
            OKDCCJGCNMA: 0,
            HBGEFOMBGAD: 0,
            FDFKNCGPFHH: 0,
            NNGAFMPJBNB: 0,
            OPFGEDLJCBL: 0,
            IFODPHLHIKB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DCABGEIHPNI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DCABGEIHPNI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DCABGEIHPNI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DCABGEIHPNI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DCABGEIHPNI.proto\x1a\x11EOBCFPEGNJP.proto\x1a\x11LFKJBBFJDKN.prot\
    o\x1a%RogueCommonBuffSelectSourceType.proto\"\x85\x04\n\x0bDCABGEIHPNI\
    \x12\x20\n\x0bNEELAOPALDP\x18\x07\x20\x03(\rR\x0bNEELAOPALDP\x12.\n\x0bO\
    EOJKCAKLJP\x18\x08\x20\x03(\x0b2\x0c.EOBCFPEGNJPR\x0bOEOJKCAKLJP\x12\x20\
    \n\x0bACOPDFAKFLD\x18\x01\x20\x01(\rR\x0bACOPDFAKFLD\x12.\n\x0bEPDCCPMAC\
    BO\x18\x0c\x20\x01(\x0b2\x0c.LFKJBBFJDKNR\x0bEPDCCPMACBO\x12B\n\x0bLEEAC\
    MNGDFL\x18\x04\x20\x01(\x0e2\x20.RogueCommonBuffSelectSourceTypeR\x0bLEE\
    ACMNGDFL\x12\x20\n\x0bDKECOMCNABE\x18\x03\x20\x01(\x08R\x0bDKECOMCNABE\
    \x12\x20\n\x0bHBDKEIEAFKL\x18\t\x20\x01(\rR\x0bHBDKEIEAFKL\x12\x20\n\x0b\
    OKDCCJGCNMA\x18\x0e\x20\x01(\rR\x0bOKDCCJGCNMA\x12\x20\n\x0bHBGEFOMBGAD\
    \x18\x0f\x20\x01(\rR\x0bHBGEFOMBGAD\x12\x20\n\x0bFDFKNCGPFHH\x18\x0b\x20\
    \x01(\rR\x0bFDFKNCGPFHH\x12\x20\n\x0bNNGAFMPJBNB\x18\r\x20\x01(\rR\x0bNN\
    GAFMPJBNB\x12\x20\n\x0bOPFGEDLJCBL\x18\n\x20\x01(\rR\x0bOPFGEDLJCBL\x12\
    \x20\n\x0bIFODPHLHIKB\x18\x05\x20\x01(\rR\x0bIFODPHLHIKBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::EOBCFPEGNJP::file_descriptor().clone());
            deps.push(super::LFKJBBFJDKN::file_descriptor().clone());
            deps.push(super::RogueCommonBuffSelectSourceType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DCABGEIHPNI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
