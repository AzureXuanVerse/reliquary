// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FHGPCKGFGAO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FHGPCKGFGAO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FHGPCKGFGAO {
    // message fields
    // @@protoc_insertion_point(field:FHGPCKGFGAO.ECKDFNEOBDC)
    pub ECKDFNEOBDC: u32,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.FMFGOGENPHL)
    pub FMFGOGENPHL: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.IHHFLCCGENM)
    pub IHHFLCCGENM: ::std::vec::Vec<super::LKFPKFKLJOD::LKFPKFKLJOD>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.CPGDHGKAHHD)
    pub CPGDHGKAHHD: u32,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.KPFMEBBLJCD)
    pub KPFMEBBLJCD: u32,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.KHCAJKJEFEM)
    pub KHCAJKJEFEM: ::std::vec::Vec<super::HCIABCEIDAC::HCIABCEIDAC>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.JMNPJIPLDJL)
    pub JMNPJIPLDJL: ::std::vec::Vec<super::MJGMFEIPEMH::MJGMFEIPEMH>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.EIOMLNNLILI)
    pub EIOMLNNLILI: u32,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.GGGGAFKGNGH)
    pub GGGGAFKGNGH: ::protobuf::MessageField<super::NPFBNEDBOPE::NPFBNEDBOPE>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.MOOFDDDNJCD)
    pub MOOFDDDNJCD: ::std::vec::Vec<super::ICJGAACDEOG::ICJGAACDEOG>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.PBKKPKGOBOK)
    pub PBKKPKGOBOK: ::std::collections::HashMap<::std::string::String, i32>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.EHMDONKBLBP)
    pub EHMDONKBLBP: u32,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.PHBNMIEJEJF)
    pub PHBNMIEJEJF: ::std::vec::Vec<super::SceneEntityInfo::SceneEntityInfo>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.MLEAECLOGEB)
    pub MLEAECLOGEB: u32,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.BDGKMBGCMJC)
    pub BDGKMBGCMJC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.BPLMLKKDIKM)
    pub BPLMLKKDIKM: u32,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.PCABIMPKMBN)
    pub PCABIMPKMBN: u32,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.OFDCKKDHIME)
    pub OFDCKKDHIME: ::std::vec::Vec<super::CCMDPDFFMKD::CCMDPDFFMKD>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.LFFPPBPNOAC)
    pub LFFPPBPNOAC: ::std::collections::HashMap<u32, super::JBEOFMHCOIC::JBEOFMHCOIC>,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.MICOPGCNPLC)
    pub MICOPGCNPLC: u32,
    // @@protoc_insertion_point(field:FHGPCKGFGAO.OGPKNEFGNAN)
    pub OGPKNEFGNAN: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FHGPCKGFGAO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FHGPCKGFGAO {
    fn default() -> &'a FHGPCKGFGAO {
        <FHGPCKGFGAO as ::protobuf::Message>::default_instance()
    }
}

impl FHGPCKGFGAO {
    pub fn new() -> FHGPCKGFGAO {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(21);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ECKDFNEOBDC",
            |m: &FHGPCKGFGAO| { &m.ECKDFNEOBDC },
            |m: &mut FHGPCKGFGAO| { &mut m.ECKDFNEOBDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FMFGOGENPHL",
            |m: &FHGPCKGFGAO| { &m.FMFGOGENPHL },
            |m: &mut FHGPCKGFGAO| { &mut m.FMFGOGENPHL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IHHFLCCGENM",
            |m: &FHGPCKGFGAO| { &m.IHHFLCCGENM },
            |m: &mut FHGPCKGFGAO| { &mut m.IHHFLCCGENM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPGDHGKAHHD",
            |m: &FHGPCKGFGAO| { &m.CPGDHGKAHHD },
            |m: &mut FHGPCKGFGAO| { &mut m.CPGDHGKAHHD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KPFMEBBLJCD",
            |m: &FHGPCKGFGAO| { &m.KPFMEBBLJCD },
            |m: &mut FHGPCKGFGAO| { &mut m.KPFMEBBLJCD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KHCAJKJEFEM",
            |m: &FHGPCKGFGAO| { &m.KHCAJKJEFEM },
            |m: &mut FHGPCKGFGAO| { &mut m.KHCAJKJEFEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JMNPJIPLDJL",
            |m: &FHGPCKGFGAO| { &m.JMNPJIPLDJL },
            |m: &mut FHGPCKGFGAO| { &mut m.JMNPJIPLDJL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EIOMLNNLILI",
            |m: &FHGPCKGFGAO| { &m.EIOMLNNLILI },
            |m: &mut FHGPCKGFGAO| { &mut m.EIOMLNNLILI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NPFBNEDBOPE::NPFBNEDBOPE>(
            "GGGGAFKGNGH",
            |m: &FHGPCKGFGAO| { &m.GGGGAFKGNGH },
            |m: &mut FHGPCKGFGAO| { &mut m.GGGGAFKGNGH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MOOFDDDNJCD",
            |m: &FHGPCKGFGAO| { &m.MOOFDDDNJCD },
            |m: &mut FHGPCKGFGAO| { &mut m.MOOFDDDNJCD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "PBKKPKGOBOK",
            |m: &FHGPCKGFGAO| { &m.PBKKPKGOBOK },
            |m: &mut FHGPCKGFGAO| { &mut m.PBKKPKGOBOK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EHMDONKBLBP",
            |m: &FHGPCKGFGAO| { &m.EHMDONKBLBP },
            |m: &mut FHGPCKGFGAO| { &mut m.EHMDONKBLBP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PHBNMIEJEJF",
            |m: &FHGPCKGFGAO| { &m.PHBNMIEJEJF },
            |m: &mut FHGPCKGFGAO| { &mut m.PHBNMIEJEJF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MLEAECLOGEB",
            |m: &FHGPCKGFGAO| { &m.MLEAECLOGEB },
            |m: &mut FHGPCKGFGAO| { &mut m.MLEAECLOGEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BDGKMBGCMJC",
            |m: &FHGPCKGFGAO| { &m.BDGKMBGCMJC },
            |m: &mut FHGPCKGFGAO| { &mut m.BDGKMBGCMJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BPLMLKKDIKM",
            |m: &FHGPCKGFGAO| { &m.BPLMLKKDIKM },
            |m: &mut FHGPCKGFGAO| { &mut m.BPLMLKKDIKM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PCABIMPKMBN",
            |m: &FHGPCKGFGAO| { &m.PCABIMPKMBN },
            |m: &mut FHGPCKGFGAO| { &mut m.PCABIMPKMBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OFDCKKDHIME",
            |m: &FHGPCKGFGAO| { &m.OFDCKKDHIME },
            |m: &mut FHGPCKGFGAO| { &mut m.OFDCKKDHIME },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "LFFPPBPNOAC",
            |m: &FHGPCKGFGAO| { &m.LFFPPBPNOAC },
            |m: &mut FHGPCKGFGAO| { &mut m.LFFPPBPNOAC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MICOPGCNPLC",
            |m: &FHGPCKGFGAO| { &m.MICOPGCNPLC },
            |m: &mut FHGPCKGFGAO| { &mut m.MICOPGCNPLC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OGPKNEFGNAN",
            |m: &FHGPCKGFGAO| { &m.OGPKNEFGNAN },
            |m: &mut FHGPCKGFGAO| { &mut m.OGPKNEFGNAN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FHGPCKGFGAO>(
            "FHGPCKGFGAO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FHGPCKGFGAO {
    const NAME: &'static str = "FHGPCKGFGAO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.ECKDFNEOBDC = is.read_uint32()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.FMFGOGENPHL)?;
                },
                40 => {
                    self.FMFGOGENPHL.push(is.read_uint32()?);
                },
                2442 => {
                    self.IHHFLCCGENM.push(is.read_message()?);
                },
                13992 => {
                    self.CPGDHGKAHHD = is.read_uint32()?;
                },
                24 => {
                    self.KPFMEBBLJCD = is.read_uint32()?;
                },
                90 => {
                    self.KHCAJKJEFEM.push(is.read_message()?);
                },
                10 => {
                    self.JMNPJIPLDJL.push(is.read_message()?);
                },
                64 => {
                    self.EIOMLNNLILI = is.read_uint32()?;
                },
                5290 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GGGGAFKGNGH)?;
                },
                4482 => {
                    self.MOOFDDDNJCD.push(is.read_message()?);
                },
                194 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.PBKKPKGOBOK.insert(key, value);
                },
                56 => {
                    self.EHMDONKBLBP = is.read_uint32()?;
                },
                18 => {
                    self.PHBNMIEJEJF.push(is.read_message()?);
                },
                3304 => {
                    self.MLEAECLOGEB = is.read_uint32()?;
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.BDGKMBGCMJC)?;
                },
                80 => {
                    self.BDGKMBGCMJC.push(is.read_uint32()?);
                },
                32 => {
                    self.BPLMLKKDIKM = is.read_uint32()?;
                },
                11040 => {
                    self.PCABIMPKMBN = is.read_uint32()?;
                },
                122 => {
                    self.OFDCKKDHIME.push(is.read_message()?);
                },
                106 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.LFFPPBPNOAC.insert(key, value);
                },
                112 => {
                    self.MICOPGCNPLC = is.read_uint32()?;
                },
                72 => {
                    self.OGPKNEFGNAN = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ECKDFNEOBDC != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.ECKDFNEOBDC);
        }
        for value in &self.FMFGOGENPHL {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        for value in &self.IHHFLCCGENM {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CPGDHGKAHHD != 0 {
            my_size += ::protobuf::rt::uint32_size(1749, self.CPGDHGKAHHD);
        }
        if self.KPFMEBBLJCD != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.KPFMEBBLJCD);
        }
        for value in &self.KHCAJKJEFEM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.JMNPJIPLDJL {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.EIOMLNNLILI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.EIOMLNNLILI);
        }
        if let Some(v) = self.GGGGAFKGNGH.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.MOOFDDDNJCD {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.PBKKPKGOBOK {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.EHMDONKBLBP != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.EHMDONKBLBP);
        }
        for value in &self.PHBNMIEJEJF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.MLEAECLOGEB != 0 {
            my_size += ::protobuf::rt::uint32_size(413, self.MLEAECLOGEB);
        }
        for value in &self.BDGKMBGCMJC {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        if self.BPLMLKKDIKM != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.BPLMLKKDIKM);
        }
        if self.PCABIMPKMBN != 0 {
            my_size += ::protobuf::rt::uint32_size(1380, self.PCABIMPKMBN);
        }
        for value in &self.OFDCKKDHIME {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.LFFPPBPNOAC {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.MICOPGCNPLC != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.MICOPGCNPLC);
        }
        if self.OGPKNEFGNAN != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.OGPKNEFGNAN);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ECKDFNEOBDC != 0 {
            os.write_uint32(12, self.ECKDFNEOBDC)?;
        }
        for v in &self.FMFGOGENPHL {
            os.write_uint32(5, *v)?;
        };
        for v in &self.IHHFLCCGENM {
            ::protobuf::rt::write_message_field_with_cached_size(305, v, os)?;
        };
        if self.CPGDHGKAHHD != 0 {
            os.write_uint32(1749, self.CPGDHGKAHHD)?;
        }
        if self.KPFMEBBLJCD != 0 {
            os.write_uint32(3, self.KPFMEBBLJCD)?;
        }
        for v in &self.KHCAJKJEFEM {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.JMNPJIPLDJL {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.EIOMLNNLILI != 0 {
            os.write_uint32(8, self.EIOMLNNLILI)?;
        }
        if let Some(v) = self.GGGGAFKGNGH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(661, v, os)?;
        }
        for v in &self.MOOFDDDNJCD {
            ::protobuf::rt::write_message_field_with_cached_size(560, v, os)?;
        };
        for (k, v) in &self.PBKKPKGOBOK {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(194)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_int32(2, *v)?;
        };
        if self.EHMDONKBLBP != 0 {
            os.write_uint32(7, self.EHMDONKBLBP)?;
        }
        for v in &self.PHBNMIEJEJF {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.MLEAECLOGEB != 0 {
            os.write_uint32(413, self.MLEAECLOGEB)?;
        }
        for v in &self.BDGKMBGCMJC {
            os.write_uint32(10, *v)?;
        };
        if self.BPLMLKKDIKM != 0 {
            os.write_uint32(4, self.BPLMLKKDIKM)?;
        }
        if self.PCABIMPKMBN != 0 {
            os.write_uint32(1380, self.PCABIMPKMBN)?;
        }
        for v in &self.OFDCKKDHIME {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        for (k, v) in &self.LFFPPBPNOAC {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(106)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.MICOPGCNPLC != 0 {
            os.write_uint32(14, self.MICOPGCNPLC)?;
        }
        if self.OGPKNEFGNAN != 0 {
            os.write_uint32(9, self.OGPKNEFGNAN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FHGPCKGFGAO {
        FHGPCKGFGAO::new()
    }

    fn clear(&mut self) {
        self.ECKDFNEOBDC = 0;
        self.FMFGOGENPHL.clear();
        self.IHHFLCCGENM.clear();
        self.CPGDHGKAHHD = 0;
        self.KPFMEBBLJCD = 0;
        self.KHCAJKJEFEM.clear();
        self.JMNPJIPLDJL.clear();
        self.EIOMLNNLILI = 0;
        self.GGGGAFKGNGH.clear();
        self.MOOFDDDNJCD.clear();
        self.PBKKPKGOBOK.clear();
        self.EHMDONKBLBP = 0;
        self.PHBNMIEJEJF.clear();
        self.MLEAECLOGEB = 0;
        self.BDGKMBGCMJC.clear();
        self.BPLMLKKDIKM = 0;
        self.PCABIMPKMBN = 0;
        self.OFDCKKDHIME.clear();
        self.LFFPPBPNOAC.clear();
        self.MICOPGCNPLC = 0;
        self.OGPKNEFGNAN = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FHGPCKGFGAO {
        static instance: ::protobuf::rt::Lazy<FHGPCKGFGAO> = ::protobuf::rt::Lazy::new();
        instance.get(FHGPCKGFGAO::new)
    }
}

impl ::protobuf::MessageFull for FHGPCKGFGAO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FHGPCKGFGAO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FHGPCKGFGAO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FHGPCKGFGAO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FHGPCKGFGAO.proto\x1a\x11CCMDPDFFMKD.proto\x1a\x11HCIABCEIDAC.prot\
    o\x1a\x11ICJGAACDEOG.proto\x1a\x11JBEOFMHCOIC.proto\x1a\x11LKFPKFKLJOD.p\
    roto\x1a\x11MJGMFEIPEMH.proto\x1a\x11NPFBNEDBOPE.proto\x1a\x15SceneEntit\
    yInfo.proto\"\x8f\x08\n\x0bFHGPCKGFGAO\x12\x20\n\x0bECKDFNEOBDC\x18\x0c\
    \x20\x01(\rR\x0bECKDFNEOBDC\x12\x20\n\x0bFMFGOGENPHL\x18\x05\x20\x03(\rR\
    \x0bFMFGOGENPHL\x12/\n\x0bIHHFLCCGENM\x18\xb1\x02\x20\x03(\x0b2\x0c.LKFP\
    KFKLJODR\x0bIHHFLCCGENM\x12!\n\x0bCPGDHGKAHHD\x18\xd5\r\x20\x01(\rR\x0bC\
    PGDHGKAHHD\x12\x20\n\x0bKPFMEBBLJCD\x18\x03\x20\x01(\rR\x0bKPFMEBBLJCD\
    \x12.\n\x0bKHCAJKJEFEM\x18\x0b\x20\x03(\x0b2\x0c.HCIABCEIDACR\x0bKHCAJKJ\
    EFEM\x12.\n\x0bJMNPJIPLDJL\x18\x01\x20\x03(\x0b2\x0c.MJGMFEIPEMHR\x0bJMN\
    PJIPLDJL\x12\x20\n\x0bEIOMLNNLILI\x18\x08\x20\x01(\rR\x0bEIOMLNNLILI\x12\
    /\n\x0bGGGGAFKGNGH\x18\x95\x05\x20\x01(\x0b2\x0c.NPFBNEDBOPER\x0bGGGGAFK\
    GNGH\x12/\n\x0bMOOFDDDNJCD\x18\xb0\x04\x20\x03(\x0b2\x0c.ICJGAACDEOGR\
    \x0bMOOFDDDNJCD\x12?\n\x0bPBKKPKGOBOK\x18\x18\x20\x03(\x0b2\x1d.FHGPCKGF\
    GAO.PBKKPKGOBOKEntryR\x0bPBKKPKGOBOK\x12\x20\n\x0bEHMDONKBLBP\x18\x07\
    \x20\x01(\rR\x0bEHMDONKBLBP\x122\n\x0bPHBNMIEJEJF\x18\x02\x20\x03(\x0b2\
    \x10.SceneEntityInfoR\x0bPHBNMIEJEJF\x12!\n\x0bMLEAECLOGEB\x18\x9d\x03\
    \x20\x01(\rR\x0bMLEAECLOGEB\x12\x20\n\x0bBDGKMBGCMJC\x18\n\x20\x03(\rR\
    \x0bBDGKMBGCMJC\x12\x20\n\x0bBPLMLKKDIKM\x18\x04\x20\x01(\rR\x0bBPLMLKKD\
    IKM\x12!\n\x0bPCABIMPKMBN\x18\xe4\n\x20\x01(\rR\x0bPCABIMPKMBN\x12.\n\
    \x0bOFDCKKDHIME\x18\x0f\x20\x03(\x0b2\x0c.CCMDPDFFMKDR\x0bOFDCKKDHIME\
    \x12?\n\x0bLFFPPBPNOAC\x18\r\x20\x03(\x0b2\x1d.FHGPCKGFGAO.LFFPPBPNOACEn\
    tryR\x0bLFFPPBPNOAC\x12\x20\n\x0bMICOPGCNPLC\x18\x0e\x20\x01(\rR\x0bMICO\
    PGCNPLC\x12\x20\n\x0bOGPKNEFGNAN\x18\t\x20\x01(\rR\x0bOGPKNEFGNAN\x1a>\n\
    \x10PBKKPKGOBOKEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\
    \n\x05value\x18\x02\x20\x01(\x05R\x05value:\x028\x01\x1aL\n\x10LFFPPBPNO\
    ACEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\"\n\x05value\x18\
    \x02\x20\x01(\x0b2\x0c.JBEOFMHCOICR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::CCMDPDFFMKD::file_descriptor().clone());
            deps.push(super::HCIABCEIDAC::file_descriptor().clone());
            deps.push(super::ICJGAACDEOG::file_descriptor().clone());
            deps.push(super::JBEOFMHCOIC::file_descriptor().clone());
            deps.push(super::LKFPKFKLJOD::file_descriptor().clone());
            deps.push(super::MJGMFEIPEMH::file_descriptor().clone());
            deps.push(super::NPFBNEDBOPE::file_descriptor().clone());
            deps.push(super::SceneEntityInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FHGPCKGFGAO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
