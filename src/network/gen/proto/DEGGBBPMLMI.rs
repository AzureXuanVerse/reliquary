// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DEGGBBPMLMI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:DEGGBBPMLMI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DEGGBBPMLMI {
    // message fields
    // @@protoc_insertion_point(field:DEGGBBPMLMI.CKFALLBOGEO)
    pub CKFALLBOGEO: u32,
    // @@protoc_insertion_point(field:DEGGBBPMLMI.JMKJIPCAKCE)
    pub JMKJIPCAKCE: u32,
    // @@protoc_insertion_point(field:DEGGBBPMLMI.MGIEBBICLCK)
    pub MGIEBBICLCK: u32,
    // @@protoc_insertion_point(field:DEGGBBPMLMI.LKGNKMKFNIO)
    pub LKGNKMKFNIO: u32,
    // @@protoc_insertion_point(field:DEGGBBPMLMI.JFPMGMLIPJN)
    pub JFPMGMLIPJN: u32,
    // @@protoc_insertion_point(field:DEGGBBPMLMI.KOFGLICKKFP)
    pub KOFGLICKKFP: u32,
    // @@protoc_insertion_point(field:DEGGBBPMLMI.GKOADIDGKEJ)
    pub GKOADIDGKEJ: u32,
    // @@protoc_insertion_point(field:DEGGBBPMLMI.PEMHGHGMHCL)
    pub PEMHGHGMHCL: bool,
    // special fields
    // @@protoc_insertion_point(special_field:DEGGBBPMLMI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DEGGBBPMLMI {
    fn default() -> &'a DEGGBBPMLMI {
        <DEGGBBPMLMI as ::protobuf::Message>::default_instance()
    }
}

impl DEGGBBPMLMI {
    pub fn new() -> DEGGBBPMLMI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CKFALLBOGEO",
            |m: &DEGGBBPMLMI| { &m.CKFALLBOGEO },
            |m: &mut DEGGBBPMLMI| { &mut m.CKFALLBOGEO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JMKJIPCAKCE",
            |m: &DEGGBBPMLMI| { &m.JMKJIPCAKCE },
            |m: &mut DEGGBBPMLMI| { &mut m.JMKJIPCAKCE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MGIEBBICLCK",
            |m: &DEGGBBPMLMI| { &m.MGIEBBICLCK },
            |m: &mut DEGGBBPMLMI| { &mut m.MGIEBBICLCK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LKGNKMKFNIO",
            |m: &DEGGBBPMLMI| { &m.LKGNKMKFNIO },
            |m: &mut DEGGBBPMLMI| { &mut m.LKGNKMKFNIO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JFPMGMLIPJN",
            |m: &DEGGBBPMLMI| { &m.JFPMGMLIPJN },
            |m: &mut DEGGBBPMLMI| { &mut m.JFPMGMLIPJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KOFGLICKKFP",
            |m: &DEGGBBPMLMI| { &m.KOFGLICKKFP },
            |m: &mut DEGGBBPMLMI| { &mut m.KOFGLICKKFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GKOADIDGKEJ",
            |m: &DEGGBBPMLMI| { &m.GKOADIDGKEJ },
            |m: &mut DEGGBBPMLMI| { &mut m.GKOADIDGKEJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PEMHGHGMHCL",
            |m: &DEGGBBPMLMI| { &m.PEMHGHGMHCL },
            |m: &mut DEGGBBPMLMI| { &mut m.PEMHGHGMHCL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DEGGBBPMLMI>(
            "DEGGBBPMLMI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DEGGBBPMLMI {
    const NAME: &'static str = "DEGGBBPMLMI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.CKFALLBOGEO = is.read_uint32()?;
                },
                104 => {
                    self.JMKJIPCAKCE = is.read_uint32()?;
                },
                8 => {
                    self.MGIEBBICLCK = is.read_uint32()?;
                },
                120 => {
                    self.LKGNKMKFNIO = is.read_uint32()?;
                },
                16 => {
                    self.JFPMGMLIPJN = is.read_uint32()?;
                },
                112 => {
                    self.KOFGLICKKFP = is.read_uint32()?;
                },
                80 => {
                    self.GKOADIDGKEJ = is.read_uint32()?;
                },
                40 => {
                    self.PEMHGHGMHCL = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CKFALLBOGEO != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.CKFALLBOGEO);
        }
        if self.JMKJIPCAKCE != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.JMKJIPCAKCE);
        }
        if self.MGIEBBICLCK != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.MGIEBBICLCK);
        }
        if self.LKGNKMKFNIO != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.LKGNKMKFNIO);
        }
        if self.JFPMGMLIPJN != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.JFPMGMLIPJN);
        }
        if self.KOFGLICKKFP != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.KOFGLICKKFP);
        }
        if self.GKOADIDGKEJ != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.GKOADIDGKEJ);
        }
        if self.PEMHGHGMHCL != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CKFALLBOGEO != 0 {
            os.write_uint32(12, self.CKFALLBOGEO)?;
        }
        if self.JMKJIPCAKCE != 0 {
            os.write_uint32(13, self.JMKJIPCAKCE)?;
        }
        if self.MGIEBBICLCK != 0 {
            os.write_uint32(1, self.MGIEBBICLCK)?;
        }
        if self.LKGNKMKFNIO != 0 {
            os.write_uint32(15, self.LKGNKMKFNIO)?;
        }
        if self.JFPMGMLIPJN != 0 {
            os.write_uint32(2, self.JFPMGMLIPJN)?;
        }
        if self.KOFGLICKKFP != 0 {
            os.write_uint32(14, self.KOFGLICKKFP)?;
        }
        if self.GKOADIDGKEJ != 0 {
            os.write_uint32(10, self.GKOADIDGKEJ)?;
        }
        if self.PEMHGHGMHCL != false {
            os.write_bool(5, self.PEMHGHGMHCL)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DEGGBBPMLMI {
        DEGGBBPMLMI::new()
    }

    fn clear(&mut self) {
        self.CKFALLBOGEO = 0;
        self.JMKJIPCAKCE = 0;
        self.MGIEBBICLCK = 0;
        self.LKGNKMKFNIO = 0;
        self.JFPMGMLIPJN = 0;
        self.KOFGLICKKFP = 0;
        self.GKOADIDGKEJ = 0;
        self.PEMHGHGMHCL = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DEGGBBPMLMI {
        static instance: DEGGBBPMLMI = DEGGBBPMLMI {
            CKFALLBOGEO: 0,
            JMKJIPCAKCE: 0,
            MGIEBBICLCK: 0,
            LKGNKMKFNIO: 0,
            JFPMGMLIPJN: 0,
            KOFGLICKKFP: 0,
            GKOADIDGKEJ: 0,
            PEMHGHGMHCL: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DEGGBBPMLMI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DEGGBBPMLMI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DEGGBBPMLMI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DEGGBBPMLMI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DEGGBBPMLMI.proto\"\x9d\x02\n\x0bDEGGBBPMLMI\x12\x20\n\x0bCKFALLBO\
    GEO\x18\x0c\x20\x01(\rR\x0bCKFALLBOGEO\x12\x20\n\x0bJMKJIPCAKCE\x18\r\
    \x20\x01(\rR\x0bJMKJIPCAKCE\x12\x20\n\x0bMGIEBBICLCK\x18\x01\x20\x01(\rR\
    \x0bMGIEBBICLCK\x12\x20\n\x0bLKGNKMKFNIO\x18\x0f\x20\x01(\rR\x0bLKGNKMKF\
    NIO\x12\x20\n\x0bJFPMGMLIPJN\x18\x02\x20\x01(\rR\x0bJFPMGMLIPJN\x12\x20\
    \n\x0bKOFGLICKKFP\x18\x0e\x20\x01(\rR\x0bKOFGLICKKFP\x12\x20\n\x0bGKOADI\
    DGKEJ\x18\n\x20\x01(\rR\x0bGKOADIDGKEJ\x12\x20\n\x0bPEMHGHGMHCL\x18\x05\
    \x20\x01(\x08R\x0bPEMHGHGMHCLb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DEGGBBPMLMI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
