// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BHBEDKJMNED.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BHBEDKJMNED)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BHBEDKJMNED {
    // message fields
    // @@protoc_insertion_point(field:BHBEDKJMNED.CEAKHDFACLK)
    pub CEAKHDFACLK: ::protobuf::EnumOrUnknown<super::DevelopmentType::DevelopmentType>,
    // @@protoc_insertion_point(field:BHBEDKJMNED.DIPIGFADPBH)
    pub DIPIGFADPBH: i64,
    // message oneof groups
    pub HKAKMKFGPEA: ::std::option::Option<bhbedkjmned::HKAKMKFGPEA>,
    // special fields
    // @@protoc_insertion_point(special_field:BHBEDKJMNED.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BHBEDKJMNED {
    fn default() -> &'a BHBEDKJMNED {
        <BHBEDKJMNED as ::protobuf::Message>::default_instance()
    }
}

impl BHBEDKJMNED {
    pub fn new() -> BHBEDKJMNED {
        ::std::default::Default::default()
    }

    // .PAMILFCBMON EIGKBDFEIBF = 1358;

    pub fn EIGKBDFEIBF(&self) -> &super::PAMILFCBMON::PAMILFCBMON {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(ref v)) => v,
            _ => <super::PAMILFCBMON::PAMILFCBMON as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EIGKBDFEIBF(&mut self) {
        self.HKAKMKFGPEA = ::std::option::Option::None;
    }

    pub fn has_EIGKBDFEIBF(&self) -> bool {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EIGKBDFEIBF(&mut self, v: super::PAMILFCBMON::PAMILFCBMON) {
        self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EIGKBDFEIBF(&mut self) -> &mut super::PAMILFCBMON::PAMILFCBMON {
        if let ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(_)) = self.HKAKMKFGPEA {
        } else {
            self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(super::PAMILFCBMON::PAMILFCBMON::new()));
        }
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EIGKBDFEIBF(&mut self) -> super::PAMILFCBMON::PAMILFCBMON {
        if self.has_EIGKBDFEIBF() {
            match self.HKAKMKFGPEA.take() {
                ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PAMILFCBMON::PAMILFCBMON::new()
        }
    }

    // .AGFFNJMNNIG GKCPJLHFADI = 1581;

    pub fn GKCPJLHFADI(&self) -> &super::AGFFNJMNNIG::AGFFNJMNNIG {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(ref v)) => v,
            _ => <super::AGFFNJMNNIG::AGFFNJMNNIG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GKCPJLHFADI(&mut self) {
        self.HKAKMKFGPEA = ::std::option::Option::None;
    }

    pub fn has_GKCPJLHFADI(&self) -> bool {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GKCPJLHFADI(&mut self, v: super::AGFFNJMNNIG::AGFFNJMNNIG) {
        self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GKCPJLHFADI(&mut self) -> &mut super::AGFFNJMNNIG::AGFFNJMNNIG {
        if let ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(_)) = self.HKAKMKFGPEA {
        } else {
            self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(super::AGFFNJMNNIG::AGFFNJMNNIG::new()));
        }
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GKCPJLHFADI(&mut self) -> super::AGFFNJMNNIG::AGFFNJMNNIG {
        if self.has_GKCPJLHFADI() {
            match self.HKAKMKFGPEA.take() {
                ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AGFFNJMNNIG::AGFFNJMNNIG::new()
        }
    }

    // uint32 avatar_id = 1915;

    pub fn avatar_id(&self) -> u32 {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::AvatarId(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_avatar_id(&mut self) {
        self.HKAKMKFGPEA = ::std::option::Option::None;
    }

    pub fn has_avatar_id(&self) -> bool {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::AvatarId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_avatar_id(&mut self, v: u32) {
        self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::AvatarId(v))
    }

    // uint32 GCOMEOGCKEN = 206;

    pub fn GCOMEOGCKEN(&self) -> u32 {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GCOMEOGCKEN(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_GCOMEOGCKEN(&mut self) {
        self.HKAKMKFGPEA = ::std::option::Option::None;
    }

    pub fn has_GCOMEOGCKEN(&self) -> bool {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GCOMEOGCKEN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GCOMEOGCKEN(&mut self, v: u32) {
        self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GCOMEOGCKEN(v))
    }

    // uint32 KCJAJDGNPGB = 228;

    pub fn KCJAJDGNPGB(&self) -> u32 {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::KCJAJDGNPGB(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_KCJAJDGNPGB(&mut self) {
        self.HKAKMKFGPEA = ::std::option::Option::None;
    }

    pub fn has_KCJAJDGNPGB(&self) -> bool {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::KCJAJDGNPGB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KCJAJDGNPGB(&mut self, v: u32) {
        self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::KCJAJDGNPGB(v))
    }

    // .DFEKFEGLCKO OIGGBFALBLA = 1174;

    pub fn OIGGBFALBLA(&self) -> &super::DFEKFEGLCKO::DFEKFEGLCKO {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(ref v)) => v,
            _ => <super::DFEKFEGLCKO::DFEKFEGLCKO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OIGGBFALBLA(&mut self) {
        self.HKAKMKFGPEA = ::std::option::Option::None;
    }

    pub fn has_OIGGBFALBLA(&self) -> bool {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OIGGBFALBLA(&mut self, v: super::DFEKFEGLCKO::DFEKFEGLCKO) {
        self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OIGGBFALBLA(&mut self) -> &mut super::DFEKFEGLCKO::DFEKFEGLCKO {
        if let ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(_)) = self.HKAKMKFGPEA {
        } else {
            self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(super::DFEKFEGLCKO::DFEKFEGLCKO::new()));
        }
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OIGGBFALBLA(&mut self) -> super::DFEKFEGLCKO::DFEKFEGLCKO {
        if self.has_OIGGBFALBLA() {
            match self.HKAKMKFGPEA.take() {
                ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DFEKFEGLCKO::DFEKFEGLCKO::new()
        }
    }

    // uint32 EAPFJLMEMNM = 953;

    pub fn EAPFJLMEMNM(&self) -> u32 {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EAPFJLMEMNM(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_EAPFJLMEMNM(&mut self) {
        self.HKAKMKFGPEA = ::std::option::Option::None;
    }

    pub fn has_EAPFJLMEMNM(&self) -> bool {
        match self.HKAKMKFGPEA {
            ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EAPFJLMEMNM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EAPFJLMEMNM(&mut self, v: u32) {
        self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EAPFJLMEMNM(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CEAKHDFACLK",
            |m: &BHBEDKJMNED| { &m.CEAKHDFACLK },
            |m: &mut BHBEDKJMNED| { &mut m.CEAKHDFACLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DIPIGFADPBH",
            |m: &BHBEDKJMNED| { &m.DIPIGFADPBH },
            |m: &mut BHBEDKJMNED| { &mut m.DIPIGFADPBH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PAMILFCBMON::PAMILFCBMON>(
            "EIGKBDFEIBF",
            BHBEDKJMNED::has_EIGKBDFEIBF,
            BHBEDKJMNED::EIGKBDFEIBF,
            BHBEDKJMNED::mut_EIGKBDFEIBF,
            BHBEDKJMNED::set_EIGKBDFEIBF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AGFFNJMNNIG::AGFFNJMNNIG>(
            "GKCPJLHFADI",
            BHBEDKJMNED::has_GKCPJLHFADI,
            BHBEDKJMNED::GKCPJLHFADI,
            BHBEDKJMNED::mut_GKCPJLHFADI,
            BHBEDKJMNED::set_GKCPJLHFADI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "avatar_id",
            BHBEDKJMNED::has_avatar_id,
            BHBEDKJMNED::avatar_id,
            BHBEDKJMNED::set_avatar_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "GCOMEOGCKEN",
            BHBEDKJMNED::has_GCOMEOGCKEN,
            BHBEDKJMNED::GCOMEOGCKEN,
            BHBEDKJMNED::set_GCOMEOGCKEN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "KCJAJDGNPGB",
            BHBEDKJMNED::has_KCJAJDGNPGB,
            BHBEDKJMNED::KCJAJDGNPGB,
            BHBEDKJMNED::set_KCJAJDGNPGB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DFEKFEGLCKO::DFEKFEGLCKO>(
            "OIGGBFALBLA",
            BHBEDKJMNED::has_OIGGBFALBLA,
            BHBEDKJMNED::OIGGBFALBLA,
            BHBEDKJMNED::mut_OIGGBFALBLA,
            BHBEDKJMNED::set_OIGGBFALBLA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "EAPFJLMEMNM",
            BHBEDKJMNED::has_EAPFJLMEMNM,
            BHBEDKJMNED::EAPFJLMEMNM,
            BHBEDKJMNED::set_EAPFJLMEMNM,
        ));
        oneofs.push(bhbedkjmned::HKAKMKFGPEA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BHBEDKJMNED>(
            "BHBEDKJMNED",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BHBEDKJMNED {
    const NAME: &'static str = "BHBEDKJMNED";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.CEAKHDFACLK = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.DIPIGFADPBH = is.read_int64()?;
                },
                10866 => {
                    self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(is.read_message()?));
                },
                12650 => {
                    self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(is.read_message()?));
                },
                15320 => {
                    self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::AvatarId(is.read_uint32()?));
                },
                1648 => {
                    self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::GCOMEOGCKEN(is.read_uint32()?));
                },
                1824 => {
                    self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::KCJAJDGNPGB(is.read_uint32()?));
                },
                9394 => {
                    self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(is.read_message()?));
                },
                7624 => {
                    self.HKAKMKFGPEA = ::std::option::Option::Some(bhbedkjmned::HKAKMKFGPEA::EAPFJLMEMNM(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CEAKHDFACLK != ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE) {
            my_size += ::protobuf::rt::int32_size(7, self.CEAKHDFACLK.value());
        }
        if self.DIPIGFADPBH != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.DIPIGFADPBH);
        }
        if let ::std::option::Option::Some(ref v) = self.HKAKMKFGPEA {
            match v {
                &bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bhbedkjmned::HKAKMKFGPEA::AvatarId(v) => {
                    my_size += ::protobuf::rt::uint32_size(1915, v);
                },
                &bhbedkjmned::HKAKMKFGPEA::GCOMEOGCKEN(v) => {
                    my_size += ::protobuf::rt::uint32_size(206, v);
                },
                &bhbedkjmned::HKAKMKFGPEA::KCJAJDGNPGB(v) => {
                    my_size += ::protobuf::rt::uint32_size(228, v);
                },
                &bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bhbedkjmned::HKAKMKFGPEA::EAPFJLMEMNM(v) => {
                    my_size += ::protobuf::rt::uint32_size(953, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CEAKHDFACLK != ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.CEAKHDFACLK))?;
        }
        if self.DIPIGFADPBH != 0 {
            os.write_int64(4, self.DIPIGFADPBH)?;
        }
        if let ::std::option::Option::Some(ref v) = self.HKAKMKFGPEA {
            match v {
                &bhbedkjmned::HKAKMKFGPEA::EIGKBDFEIBF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1358, v, os)?;
                },
                &bhbedkjmned::HKAKMKFGPEA::GKCPJLHFADI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1581, v, os)?;
                },
                &bhbedkjmned::HKAKMKFGPEA::AvatarId(v) => {
                    os.write_uint32(1915, v)?;
                },
                &bhbedkjmned::HKAKMKFGPEA::GCOMEOGCKEN(v) => {
                    os.write_uint32(206, v)?;
                },
                &bhbedkjmned::HKAKMKFGPEA::KCJAJDGNPGB(v) => {
                    os.write_uint32(228, v)?;
                },
                &bhbedkjmned::HKAKMKFGPEA::OIGGBFALBLA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1174, v, os)?;
                },
                &bhbedkjmned::HKAKMKFGPEA::EAPFJLMEMNM(v) => {
                    os.write_uint32(953, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BHBEDKJMNED {
        BHBEDKJMNED::new()
    }

    fn clear(&mut self) {
        self.CEAKHDFACLK = ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE);
        self.DIPIGFADPBH = 0;
        self.HKAKMKFGPEA = ::std::option::Option::None;
        self.HKAKMKFGPEA = ::std::option::Option::None;
        self.HKAKMKFGPEA = ::std::option::Option::None;
        self.HKAKMKFGPEA = ::std::option::Option::None;
        self.HKAKMKFGPEA = ::std::option::Option::None;
        self.HKAKMKFGPEA = ::std::option::Option::None;
        self.HKAKMKFGPEA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BHBEDKJMNED {
        static instance: BHBEDKJMNED = BHBEDKJMNED {
            CEAKHDFACLK: ::protobuf::EnumOrUnknown::from_i32(0),
            DIPIGFADPBH: 0,
            HKAKMKFGPEA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BHBEDKJMNED {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BHBEDKJMNED").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BHBEDKJMNED {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BHBEDKJMNED {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BHBEDKJMNED`
pub mod bhbedkjmned {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:BHBEDKJMNED.HKAKMKFGPEA)
    pub enum HKAKMKFGPEA {
        // @@protoc_insertion_point(oneof_field:BHBEDKJMNED.EIGKBDFEIBF)
        EIGKBDFEIBF(super::super::PAMILFCBMON::PAMILFCBMON),
        // @@protoc_insertion_point(oneof_field:BHBEDKJMNED.GKCPJLHFADI)
        GKCPJLHFADI(super::super::AGFFNJMNNIG::AGFFNJMNNIG),
        // @@protoc_insertion_point(oneof_field:BHBEDKJMNED.avatar_id)
        AvatarId(u32),
        // @@protoc_insertion_point(oneof_field:BHBEDKJMNED.GCOMEOGCKEN)
        GCOMEOGCKEN(u32),
        // @@protoc_insertion_point(oneof_field:BHBEDKJMNED.KCJAJDGNPGB)
        KCJAJDGNPGB(u32),
        // @@protoc_insertion_point(oneof_field:BHBEDKJMNED.OIGGBFALBLA)
        OIGGBFALBLA(super::super::DFEKFEGLCKO::DFEKFEGLCKO),
        // @@protoc_insertion_point(oneof_field:BHBEDKJMNED.EAPFJLMEMNM)
        EAPFJLMEMNM(u32),
    }

    impl ::protobuf::Oneof for HKAKMKFGPEA {
    }

    impl ::protobuf::OneofFull for HKAKMKFGPEA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BHBEDKJMNED as ::protobuf::MessageFull>::descriptor().oneof_by_name("HKAKMKFGPEA").unwrap()).clone()
        }
    }

    impl HKAKMKFGPEA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<HKAKMKFGPEA>("HKAKMKFGPEA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BHBEDKJMNED.proto\x1a\x11AGFFNJMNNIG.proto\x1a\x11DFEKFEGLCKO.prot\
    o\x1a\x15DevelopmentType.proto\x1a\x11PAMILFCBMON.proto\"\x9a\x03\n\x0bB\
    HBEDKJMNED\x122\n\x0bCEAKHDFACLK\x18\x07\x20\x01(\x0e2\x10.DevelopmentTy\
    peR\x0bCEAKHDFACLK\x12\x20\n\x0bDIPIGFADPBH\x18\x04\x20\x01(\x03R\x0bDIP\
    IGFADPBH\x121\n\x0bEIGKBDFEIBF\x18\xce\n\x20\x01(\x0b2\x0c.PAMILFCBMONH\
    \0R\x0bEIGKBDFEIBF\x121\n\x0bGKCPJLHFADI\x18\xad\x0c\x20\x01(\x0b2\x0c.A\
    GFFNJMNNIGH\0R\x0bGKCPJLHFADI\x12\x1e\n\tavatar_id\x18\xfb\x0e\x20\x01(\
    \rH\0R\x08avatarId\x12#\n\x0bGCOMEOGCKEN\x18\xce\x01\x20\x01(\rH\0R\x0bG\
    COMEOGCKEN\x12#\n\x0bKCJAJDGNPGB\x18\xe4\x01\x20\x01(\rH\0R\x0bKCJAJDGNP\
    GB\x121\n\x0bOIGGBFALBLA\x18\x96\t\x20\x01(\x0b2\x0c.DFEKFEGLCKOH\0R\x0b\
    OIGGBFALBLA\x12#\n\x0bEAPFJLMEMNM\x18\xb9\x07\x20\x01(\rH\0R\x0bEAPFJLME\
    MNMB\r\n\x0bHKAKMKFGPEAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::AGFFNJMNNIG::file_descriptor().clone());
            deps.push(super::DFEKFEGLCKO::file_descriptor().clone());
            deps.push(super::DevelopmentType::file_descriptor().clone());
            deps.push(super::PAMILFCBMON::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BHBEDKJMNED::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
