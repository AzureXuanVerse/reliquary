// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LMMKDBFDOJF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LMMKDBFDOJF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LMMKDBFDOJF {
    // message fields
    // @@protoc_insertion_point(field:LMMKDBFDOJF.KPOOIMOBAEO)
    pub KPOOIMOBAEO: ::std::vec::Vec<super::OOKFHBFLPEB::OOKFHBFLPEB>,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.EPGNJPAOLNJ)
    pub EPGNJPAOLNJ: u32,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.MMFHMKFGEPH)
    pub MMFHMKFGEPH: u32,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.MMNMMNIADEP)
    pub MMNMMNIADEP: u32,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.HKMLOMOHFLF)
    pub HKMLOMOHFLF: u32,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.IIJCGPGAMLM)
    pub IIJCGPGAMLM: u32,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.IBBAMPCADEC)
    pub IBBAMPCADEC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.LCLLIKPFFOP)
    pub LCLLIKPFFOP: ::std::vec::Vec<super::DBKPLONPCHJ::DBKPLONPCHJ>,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.PAMAPAGBBJF)
    pub PAMAPAGBBJF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.OPFGEDLJCBL)
    pub OPFGEDLJCBL: u32,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.OLGFANEJKLM)
    pub OLGFANEJKLM: u32,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.JGDHLNACNEB)
    pub JGDHLNACNEB: u32,
    // @@protoc_insertion_point(field:LMMKDBFDOJF.CEFBMPHLIGI)
    pub CEFBMPHLIGI: u32,
    // special fields
    // @@protoc_insertion_point(special_field:LMMKDBFDOJF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LMMKDBFDOJF {
    fn default() -> &'a LMMKDBFDOJF {
        <LMMKDBFDOJF as ::protobuf::Message>::default_instance()
    }
}

impl LMMKDBFDOJF {
    pub fn new() -> LMMKDBFDOJF {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KPOOIMOBAEO",
            |m: &LMMKDBFDOJF| { &m.KPOOIMOBAEO },
            |m: &mut LMMKDBFDOJF| { &mut m.KPOOIMOBAEO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EPGNJPAOLNJ",
            |m: &LMMKDBFDOJF| { &m.EPGNJPAOLNJ },
            |m: &mut LMMKDBFDOJF| { &mut m.EPGNJPAOLNJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MMFHMKFGEPH",
            |m: &LMMKDBFDOJF| { &m.MMFHMKFGEPH },
            |m: &mut LMMKDBFDOJF| { &mut m.MMFHMKFGEPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MMNMMNIADEP",
            |m: &LMMKDBFDOJF| { &m.MMNMMNIADEP },
            |m: &mut LMMKDBFDOJF| { &mut m.MMNMMNIADEP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HKMLOMOHFLF",
            |m: &LMMKDBFDOJF| { &m.HKMLOMOHFLF },
            |m: &mut LMMKDBFDOJF| { &mut m.HKMLOMOHFLF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IIJCGPGAMLM",
            |m: &LMMKDBFDOJF| { &m.IIJCGPGAMLM },
            |m: &mut LMMKDBFDOJF| { &mut m.IIJCGPGAMLM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IBBAMPCADEC",
            |m: &LMMKDBFDOJF| { &m.IBBAMPCADEC },
            |m: &mut LMMKDBFDOJF| { &mut m.IBBAMPCADEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LCLLIKPFFOP",
            |m: &LMMKDBFDOJF| { &m.LCLLIKPFFOP },
            |m: &mut LMMKDBFDOJF| { &mut m.LCLLIKPFFOP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PAMAPAGBBJF",
            |m: &LMMKDBFDOJF| { &m.PAMAPAGBBJF },
            |m: &mut LMMKDBFDOJF| { &mut m.PAMAPAGBBJF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OPFGEDLJCBL",
            |m: &LMMKDBFDOJF| { &m.OPFGEDLJCBL },
            |m: &mut LMMKDBFDOJF| { &mut m.OPFGEDLJCBL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OLGFANEJKLM",
            |m: &LMMKDBFDOJF| { &m.OLGFANEJKLM },
            |m: &mut LMMKDBFDOJF| { &mut m.OLGFANEJKLM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JGDHLNACNEB",
            |m: &LMMKDBFDOJF| { &m.JGDHLNACNEB },
            |m: &mut LMMKDBFDOJF| { &mut m.JGDHLNACNEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CEFBMPHLIGI",
            |m: &LMMKDBFDOJF| { &m.CEFBMPHLIGI },
            |m: &mut LMMKDBFDOJF| { &mut m.CEFBMPHLIGI },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LMMKDBFDOJF>(
            "LMMKDBFDOJF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LMMKDBFDOJF {
    const NAME: &'static str = "LMMKDBFDOJF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                12778 => {
                    self.KPOOIMOBAEO.push(is.read_message()?);
                },
                104 => {
                    self.EPGNJPAOLNJ = is.read_uint32()?;
                },
                96 => {
                    self.MMFHMKFGEPH = is.read_uint32()?;
                },
                40 => {
                    self.MMNMMNIADEP = is.read_uint32()?;
                },
                56 => {
                    self.HKMLOMOHFLF = is.read_uint32()?;
                },
                112 => {
                    self.IIJCGPGAMLM = is.read_uint32()?;
                },
                14322 => {
                    is.read_repeated_packed_uint32_into(&mut self.IBBAMPCADEC)?;
                },
                14320 => {
                    self.IBBAMPCADEC.push(is.read_uint32()?);
                },
                4962 => {
                    self.LCLLIKPFFOP.push(is.read_message()?);
                },
                6978 => {
                    is.read_repeated_packed_uint32_into(&mut self.PAMAPAGBBJF)?;
                },
                6976 => {
                    self.PAMAPAGBBJF.push(is.read_uint32()?);
                },
                16 => {
                    self.OPFGEDLJCBL = is.read_uint32()?;
                },
                88 => {
                    self.OLGFANEJKLM = is.read_uint32()?;
                },
                24 => {
                    self.JGDHLNACNEB = is.read_uint32()?;
                },
                64 => {
                    self.CEFBMPHLIGI = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.KPOOIMOBAEO {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.EPGNJPAOLNJ != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.EPGNJPAOLNJ);
        }
        if self.MMFHMKFGEPH != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.MMFHMKFGEPH);
        }
        if self.MMNMMNIADEP != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.MMNMMNIADEP);
        }
        if self.HKMLOMOHFLF != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.HKMLOMOHFLF);
        }
        if self.IIJCGPGAMLM != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.IIJCGPGAMLM);
        }
        for value in &self.IBBAMPCADEC {
            my_size += ::protobuf::rt::uint32_size(1790, *value);
        };
        for value in &self.LCLLIKPFFOP {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.PAMAPAGBBJF {
            my_size += ::protobuf::rt::uint32_size(872, *value);
        };
        if self.OPFGEDLJCBL != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.OPFGEDLJCBL);
        }
        if self.OLGFANEJKLM != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.OLGFANEJKLM);
        }
        if self.JGDHLNACNEB != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.JGDHLNACNEB);
        }
        if self.CEFBMPHLIGI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.CEFBMPHLIGI);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.KPOOIMOBAEO {
            ::protobuf::rt::write_message_field_with_cached_size(1597, v, os)?;
        };
        if self.EPGNJPAOLNJ != 0 {
            os.write_uint32(13, self.EPGNJPAOLNJ)?;
        }
        if self.MMFHMKFGEPH != 0 {
            os.write_uint32(12, self.MMFHMKFGEPH)?;
        }
        if self.MMNMMNIADEP != 0 {
            os.write_uint32(5, self.MMNMMNIADEP)?;
        }
        if self.HKMLOMOHFLF != 0 {
            os.write_uint32(7, self.HKMLOMOHFLF)?;
        }
        if self.IIJCGPGAMLM != 0 {
            os.write_uint32(14, self.IIJCGPGAMLM)?;
        }
        for v in &self.IBBAMPCADEC {
            os.write_uint32(1790, *v)?;
        };
        for v in &self.LCLLIKPFFOP {
            ::protobuf::rt::write_message_field_with_cached_size(620, v, os)?;
        };
        for v in &self.PAMAPAGBBJF {
            os.write_uint32(872, *v)?;
        };
        if self.OPFGEDLJCBL != 0 {
            os.write_uint32(2, self.OPFGEDLJCBL)?;
        }
        if self.OLGFANEJKLM != 0 {
            os.write_uint32(11, self.OLGFANEJKLM)?;
        }
        if self.JGDHLNACNEB != 0 {
            os.write_uint32(3, self.JGDHLNACNEB)?;
        }
        if self.CEFBMPHLIGI != 0 {
            os.write_uint32(8, self.CEFBMPHLIGI)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LMMKDBFDOJF {
        LMMKDBFDOJF::new()
    }

    fn clear(&mut self) {
        self.KPOOIMOBAEO.clear();
        self.EPGNJPAOLNJ = 0;
        self.MMFHMKFGEPH = 0;
        self.MMNMMNIADEP = 0;
        self.HKMLOMOHFLF = 0;
        self.IIJCGPGAMLM = 0;
        self.IBBAMPCADEC.clear();
        self.LCLLIKPFFOP.clear();
        self.PAMAPAGBBJF.clear();
        self.OPFGEDLJCBL = 0;
        self.OLGFANEJKLM = 0;
        self.JGDHLNACNEB = 0;
        self.CEFBMPHLIGI = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LMMKDBFDOJF {
        static instance: LMMKDBFDOJF = LMMKDBFDOJF {
            KPOOIMOBAEO: ::std::vec::Vec::new(),
            EPGNJPAOLNJ: 0,
            MMFHMKFGEPH: 0,
            MMNMMNIADEP: 0,
            HKMLOMOHFLF: 0,
            IIJCGPGAMLM: 0,
            IBBAMPCADEC: ::std::vec::Vec::new(),
            LCLLIKPFFOP: ::std::vec::Vec::new(),
            PAMAPAGBBJF: ::std::vec::Vec::new(),
            OPFGEDLJCBL: 0,
            OLGFANEJKLM: 0,
            JGDHLNACNEB: 0,
            CEFBMPHLIGI: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LMMKDBFDOJF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LMMKDBFDOJF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LMMKDBFDOJF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LMMKDBFDOJF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LMMKDBFDOJF.proto\x1a\x11DBKPLONPCHJ.proto\x1a\x11OOKFHBFLPEB.prot\
    o\"\xe7\x03\n\x0bLMMKDBFDOJF\x12/\n\x0bKPOOIMOBAEO\x18\xbd\x0c\x20\x03(\
    \x0b2\x0c.OOKFHBFLPEBR\x0bKPOOIMOBAEO\x12\x20\n\x0bEPGNJPAOLNJ\x18\r\x20\
    \x01(\rR\x0bEPGNJPAOLNJ\x12\x20\n\x0bMMFHMKFGEPH\x18\x0c\x20\x01(\rR\x0b\
    MMFHMKFGEPH\x12\x20\n\x0bMMNMMNIADEP\x18\x05\x20\x01(\rR\x0bMMNMMNIADEP\
    \x12\x20\n\x0bHKMLOMOHFLF\x18\x07\x20\x01(\rR\x0bHKMLOMOHFLF\x12\x20\n\
    \x0bIIJCGPGAMLM\x18\x0e\x20\x01(\rR\x0bIIJCGPGAMLM\x12!\n\x0bIBBAMPCADEC\
    \x18\xfe\r\x20\x03(\rR\x0bIBBAMPCADEC\x12/\n\x0bLCLLIKPFFOP\x18\xec\x04\
    \x20\x03(\x0b2\x0c.DBKPLONPCHJR\x0bLCLLIKPFFOP\x12!\n\x0bPAMAPAGBBJF\x18\
    \xe8\x06\x20\x03(\rR\x0bPAMAPAGBBJF\x12\x20\n\x0bOPFGEDLJCBL\x18\x02\x20\
    \x01(\rR\x0bOPFGEDLJCBL\x12\x20\n\x0bOLGFANEJKLM\x18\x0b\x20\x01(\rR\x0b\
    OLGFANEJKLM\x12\x20\n\x0bJGDHLNACNEB\x18\x03\x20\x01(\rR\x0bJGDHLNACNEB\
    \x12\x20\n\x0bCEFBMPHLIGI\x18\x08\x20\x01(\rR\x0bCEFBMPHLIGIb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::DBKPLONPCHJ::file_descriptor().clone());
            deps.push(super::OOKFHBFLPEB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LMMKDBFDOJF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
