// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DKOCAAOHIBK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:DKOCAAOHIBK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DKOCAAOHIBK {
    // message fields
    // @@protoc_insertion_point(field:DKOCAAOHIBK.PDDFKAELHMP)
    pub PDDFKAELHMP: u32,
    // @@protoc_insertion_point(field:DKOCAAOHIBK.PGGMKGMBBKJ)
    pub PGGMKGMBBKJ: u32,
    // @@protoc_insertion_point(field:DKOCAAOHIBK.BIIDJGDIEJD)
    pub BIIDJGDIEJD: u32,
    // @@protoc_insertion_point(field:DKOCAAOHIBK.avatar_list)
    pub avatar_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:DKOCAAOHIBK.FEHJIBILDMM)
    pub FEHJIBILDMM: u32,
    // @@protoc_insertion_point(field:DKOCAAOHIBK.GKFIBAEOHEM)
    pub GKFIBAEOHEM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:DKOCAAOHIBK.NIODMIDCIIM)
    pub NIODMIDCIIM: bool,
    // @@protoc_insertion_point(field:DKOCAAOHIBK.IFEFGDNFKNO)
    pub IFEFGDNFKNO: u32,
    // @@protoc_insertion_point(field:DKOCAAOHIBK.FJDMBJKDCKI)
    pub FJDMBJKDCKI: u32,
    // @@protoc_insertion_point(field:DKOCAAOHIBK.LIIAMDGKPAF)
    pub LIIAMDGKPAF: ::std::vec::Vec<super::PAHLIMCJBEB::PAHLIMCJBEB>,
    // special fields
    // @@protoc_insertion_point(special_field:DKOCAAOHIBK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DKOCAAOHIBK {
    fn default() -> &'a DKOCAAOHIBK {
        <DKOCAAOHIBK as ::protobuf::Message>::default_instance()
    }
}

impl DKOCAAOHIBK {
    pub fn new() -> DKOCAAOHIBK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PDDFKAELHMP",
            |m: &DKOCAAOHIBK| { &m.PDDFKAELHMP },
            |m: &mut DKOCAAOHIBK| { &mut m.PDDFKAELHMP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PGGMKGMBBKJ",
            |m: &DKOCAAOHIBK| { &m.PGGMKGMBBKJ },
            |m: &mut DKOCAAOHIBK| { &mut m.PGGMKGMBBKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BIIDJGDIEJD",
            |m: &DKOCAAOHIBK| { &m.BIIDJGDIEJD },
            |m: &mut DKOCAAOHIBK| { &mut m.BIIDJGDIEJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &DKOCAAOHIBK| { &m.avatar_list },
            |m: &mut DKOCAAOHIBK| { &mut m.avatar_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FEHJIBILDMM",
            |m: &DKOCAAOHIBK| { &m.FEHJIBILDMM },
            |m: &mut DKOCAAOHIBK| { &mut m.FEHJIBILDMM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GKFIBAEOHEM",
            |m: &DKOCAAOHIBK| { &m.GKFIBAEOHEM },
            |m: &mut DKOCAAOHIBK| { &mut m.GKFIBAEOHEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NIODMIDCIIM",
            |m: &DKOCAAOHIBK| { &m.NIODMIDCIIM },
            |m: &mut DKOCAAOHIBK| { &mut m.NIODMIDCIIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IFEFGDNFKNO",
            |m: &DKOCAAOHIBK| { &m.IFEFGDNFKNO },
            |m: &mut DKOCAAOHIBK| { &mut m.IFEFGDNFKNO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FJDMBJKDCKI",
            |m: &DKOCAAOHIBK| { &m.FJDMBJKDCKI },
            |m: &mut DKOCAAOHIBK| { &mut m.FJDMBJKDCKI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LIIAMDGKPAF",
            |m: &DKOCAAOHIBK| { &m.LIIAMDGKPAF },
            |m: &mut DKOCAAOHIBK| { &mut m.LIIAMDGKPAF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DKOCAAOHIBK>(
            "DKOCAAOHIBK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DKOCAAOHIBK {
    const NAME: &'static str = "DKOCAAOHIBK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.PDDFKAELHMP = is.read_uint32()?;
                },
                8 => {
                    self.PGGMKGMBBKJ = is.read_uint32()?;
                },
                96 => {
                    self.BIIDJGDIEJD = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.avatar_list)?;
                },
                72 => {
                    self.avatar_list.push(is.read_uint32()?);
                },
                120 => {
                    self.FEHJIBILDMM = is.read_uint32()?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.GKFIBAEOHEM)?;
                },
                56 => {
                    self.GKFIBAEOHEM.push(is.read_uint32()?);
                },
                64 => {
                    self.NIODMIDCIIM = is.read_bool()?;
                },
                40 => {
                    self.IFEFGDNFKNO = is.read_uint32()?;
                },
                32 => {
                    self.FJDMBJKDCKI = is.read_uint32()?;
                },
                50 => {
                    self.LIIAMDGKPAF.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.PDDFKAELHMP != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.PDDFKAELHMP);
        }
        if self.PGGMKGMBBKJ != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.PGGMKGMBBKJ);
        }
        if self.BIIDJGDIEJD != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.BIIDJGDIEJD);
        }
        for value in &self.avatar_list {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        if self.FEHJIBILDMM != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.FEHJIBILDMM);
        }
        for value in &self.GKFIBAEOHEM {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        if self.NIODMIDCIIM != false {
            my_size += 1 + 1;
        }
        if self.IFEFGDNFKNO != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.IFEFGDNFKNO);
        }
        if self.FJDMBJKDCKI != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.FJDMBJKDCKI);
        }
        for value in &self.LIIAMDGKPAF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.PDDFKAELHMP != 0 {
            os.write_uint32(13, self.PDDFKAELHMP)?;
        }
        if self.PGGMKGMBBKJ != 0 {
            os.write_uint32(1, self.PGGMKGMBBKJ)?;
        }
        if self.BIIDJGDIEJD != 0 {
            os.write_uint32(12, self.BIIDJGDIEJD)?;
        }
        for v in &self.avatar_list {
            os.write_uint32(9, *v)?;
        };
        if self.FEHJIBILDMM != 0 {
            os.write_uint32(15, self.FEHJIBILDMM)?;
        }
        for v in &self.GKFIBAEOHEM {
            os.write_uint32(7, *v)?;
        };
        if self.NIODMIDCIIM != false {
            os.write_bool(8, self.NIODMIDCIIM)?;
        }
        if self.IFEFGDNFKNO != 0 {
            os.write_uint32(5, self.IFEFGDNFKNO)?;
        }
        if self.FJDMBJKDCKI != 0 {
            os.write_uint32(4, self.FJDMBJKDCKI)?;
        }
        for v in &self.LIIAMDGKPAF {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DKOCAAOHIBK {
        DKOCAAOHIBK::new()
    }

    fn clear(&mut self) {
        self.PDDFKAELHMP = 0;
        self.PGGMKGMBBKJ = 0;
        self.BIIDJGDIEJD = 0;
        self.avatar_list.clear();
        self.FEHJIBILDMM = 0;
        self.GKFIBAEOHEM.clear();
        self.NIODMIDCIIM = false;
        self.IFEFGDNFKNO = 0;
        self.FJDMBJKDCKI = 0;
        self.LIIAMDGKPAF.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DKOCAAOHIBK {
        static instance: DKOCAAOHIBK = DKOCAAOHIBK {
            PDDFKAELHMP: 0,
            PGGMKGMBBKJ: 0,
            BIIDJGDIEJD: 0,
            avatar_list: ::std::vec::Vec::new(),
            FEHJIBILDMM: 0,
            GKFIBAEOHEM: ::std::vec::Vec::new(),
            NIODMIDCIIM: false,
            IFEFGDNFKNO: 0,
            FJDMBJKDCKI: 0,
            LIIAMDGKPAF: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DKOCAAOHIBK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DKOCAAOHIBK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DKOCAAOHIBK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DKOCAAOHIBK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DKOCAAOHIBK.proto\x1a\x11PAHLIMCJBEB.proto\"\xee\x02\n\x0bDKOCAAOH\
    IBK\x12\x20\n\x0bPDDFKAELHMP\x18\r\x20\x01(\rR\x0bPDDFKAELHMP\x12\x20\n\
    \x0bPGGMKGMBBKJ\x18\x01\x20\x01(\rR\x0bPGGMKGMBBKJ\x12\x20\n\x0bBIIDJGDI\
    EJD\x18\x0c\x20\x01(\rR\x0bBIIDJGDIEJD\x12\x1f\n\x0bavatar_list\x18\t\
    \x20\x03(\rR\navatarList\x12\x20\n\x0bFEHJIBILDMM\x18\x0f\x20\x01(\rR\
    \x0bFEHJIBILDMM\x12\x20\n\x0bGKFIBAEOHEM\x18\x07\x20\x03(\rR\x0bGKFIBAEO\
    HEM\x12\x20\n\x0bNIODMIDCIIM\x18\x08\x20\x01(\x08R\x0bNIODMIDCIIM\x12\
    \x20\n\x0bIFEFGDNFKNO\x18\x05\x20\x01(\rR\x0bIFEFGDNFKNO\x12\x20\n\x0bFJ\
    DMBJKDCKI\x18\x04\x20\x01(\rR\x0bFJDMBJKDCKI\x12.\n\x0bLIIAMDGKPAF\x18\
    \x06\x20\x03(\x0b2\x0c.PAHLIMCJBEBR\x0bLIIAMDGKPAFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::PAHLIMCJBEB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DKOCAAOHIBK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
