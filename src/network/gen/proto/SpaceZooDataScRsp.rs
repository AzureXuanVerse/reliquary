// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SpaceZooDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SpaceZooDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SpaceZooDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.BPLHDFJMPOA)
    pub BPLHDFJMPOA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.PKHAGHJONEF)
    pub PKHAGHJONEF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.MNCJPJLPCHA)
    pub MNCJPJLPCHA: ::std::vec::Vec<super::DGDPOCNFNBM::DGDPOCNFNBM>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.LKDLDPBNNCM)
    pub LKDLDPBNNCM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.NJFKPOPALEH)
    pub NJFKPOPALEH: u32,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.NNMLPGMCCMJ)
    pub NNMLPGMCCMJ: ::std::vec::Vec<super::KJEPLFPALCB::KJEPLFPALCB>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.BCAJBBMBFKN)
    pub BCAJBBMBFKN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.GEDHAAPEBNG)
    pub GEDHAAPEBNG: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:SpaceZooDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpaceZooDataScRsp {
    fn default() -> &'a SpaceZooDataScRsp {
        <SpaceZooDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl SpaceZooDataScRsp {
    pub fn new() -> SpaceZooDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BPLHDFJMPOA",
            |m: &SpaceZooDataScRsp| { &m.BPLHDFJMPOA },
            |m: &mut SpaceZooDataScRsp| { &mut m.BPLHDFJMPOA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PKHAGHJONEF",
            |m: &SpaceZooDataScRsp| { &m.PKHAGHJONEF },
            |m: &mut SpaceZooDataScRsp| { &mut m.PKHAGHJONEF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MNCJPJLPCHA",
            |m: &SpaceZooDataScRsp| { &m.MNCJPJLPCHA },
            |m: &mut SpaceZooDataScRsp| { &mut m.MNCJPJLPCHA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LKDLDPBNNCM",
            |m: &SpaceZooDataScRsp| { &m.LKDLDPBNNCM },
            |m: &mut SpaceZooDataScRsp| { &mut m.LKDLDPBNNCM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NJFKPOPALEH",
            |m: &SpaceZooDataScRsp| { &m.NJFKPOPALEH },
            |m: &mut SpaceZooDataScRsp| { &mut m.NJFKPOPALEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NNMLPGMCCMJ",
            |m: &SpaceZooDataScRsp| { &m.NNMLPGMCCMJ },
            |m: &mut SpaceZooDataScRsp| { &mut m.NNMLPGMCCMJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &SpaceZooDataScRsp| { &m.retcode },
            |m: &mut SpaceZooDataScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BCAJBBMBFKN",
            |m: &SpaceZooDataScRsp| { &m.BCAJBBMBFKN },
            |m: &mut SpaceZooDataScRsp| { &mut m.BCAJBBMBFKN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GEDHAAPEBNG",
            |m: &SpaceZooDataScRsp| { &m.GEDHAAPEBNG },
            |m: &mut SpaceZooDataScRsp| { &mut m.GEDHAAPEBNG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SpaceZooDataScRsp>(
            "SpaceZooDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SpaceZooDataScRsp {
    const NAME: &'static str = "SpaceZooDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.BPLHDFJMPOA)?;
                },
                56 => {
                    self.BPLHDFJMPOA.push(is.read_uint32()?);
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.PKHAGHJONEF)?;
                },
                72 => {
                    self.PKHAGHJONEF.push(is.read_uint32()?);
                },
                18 => {
                    self.MNCJPJLPCHA.push(is.read_message()?);
                },
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.LKDLDPBNNCM)?;
                },
                112 => {
                    self.LKDLDPBNNCM.push(is.read_uint32()?);
                },
                8 => {
                    self.NJFKPOPALEH = is.read_uint32()?;
                },
                66 => {
                    self.NNMLPGMCCMJ.push(is.read_message()?);
                },
                32 => {
                    self.retcode = is.read_uint32()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.BCAJBBMBFKN)?;
                },
                40 => {
                    self.BCAJBBMBFKN.push(is.read_uint32()?);
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.GEDHAAPEBNG)?;
                },
                96 => {
                    self.GEDHAAPEBNG.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.BPLHDFJMPOA {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        for value in &self.PKHAGHJONEF {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        for value in &self.MNCJPJLPCHA {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.LKDLDPBNNCM {
            my_size += ::protobuf::rt::uint32_size(14, *value);
        };
        if self.NJFKPOPALEH != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.NJFKPOPALEH);
        }
        for value in &self.NNMLPGMCCMJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.retcode);
        }
        for value in &self.BCAJBBMBFKN {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        for value in &self.GEDHAAPEBNG {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.BPLHDFJMPOA {
            os.write_uint32(7, *v)?;
        };
        for v in &self.PKHAGHJONEF {
            os.write_uint32(9, *v)?;
        };
        for v in &self.MNCJPJLPCHA {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.LKDLDPBNNCM {
            os.write_uint32(14, *v)?;
        };
        if self.NJFKPOPALEH != 0 {
            os.write_uint32(1, self.NJFKPOPALEH)?;
        }
        for v in &self.NNMLPGMCCMJ {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(4, self.retcode)?;
        }
        for v in &self.BCAJBBMBFKN {
            os.write_uint32(5, *v)?;
        };
        for v in &self.GEDHAAPEBNG {
            os.write_uint32(12, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpaceZooDataScRsp {
        SpaceZooDataScRsp::new()
    }

    fn clear(&mut self) {
        self.BPLHDFJMPOA.clear();
        self.PKHAGHJONEF.clear();
        self.MNCJPJLPCHA.clear();
        self.LKDLDPBNNCM.clear();
        self.NJFKPOPALEH = 0;
        self.NNMLPGMCCMJ.clear();
        self.retcode = 0;
        self.BCAJBBMBFKN.clear();
        self.GEDHAAPEBNG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpaceZooDataScRsp {
        static instance: SpaceZooDataScRsp = SpaceZooDataScRsp {
            BPLHDFJMPOA: ::std::vec::Vec::new(),
            PKHAGHJONEF: ::std::vec::Vec::new(),
            MNCJPJLPCHA: ::std::vec::Vec::new(),
            LKDLDPBNNCM: ::std::vec::Vec::new(),
            NJFKPOPALEH: 0,
            NNMLPGMCCMJ: ::std::vec::Vec::new(),
            retcode: 0,
            BCAJBBMBFKN: ::std::vec::Vec::new(),
            GEDHAAPEBNG: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SpaceZooDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SpaceZooDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SpaceZooDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpaceZooDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17SpaceZooDataScRsp.proto\x1a\x11DGDPOCNFNBM.proto\x1a\x11KJEPLFPALC\
    B.proto\"\xd9\x02\n\x11SpaceZooDataScRsp\x12\x20\n\x0bBPLHDFJMPOA\x18\
    \x07\x20\x03(\rR\x0bBPLHDFJMPOA\x12\x20\n\x0bPKHAGHJONEF\x18\t\x20\x03(\
    \rR\x0bPKHAGHJONEF\x12.\n\x0bMNCJPJLPCHA\x18\x02\x20\x03(\x0b2\x0c.DGDPO\
    CNFNBMR\x0bMNCJPJLPCHA\x12\x20\n\x0bLKDLDPBNNCM\x18\x0e\x20\x03(\rR\x0bL\
    KDLDPBNNCM\x12\x20\n\x0bNJFKPOPALEH\x18\x01\x20\x01(\rR\x0bNJFKPOPALEH\
    \x12.\n\x0bNNMLPGMCCMJ\x18\x08\x20\x03(\x0b2\x0c.KJEPLFPALCBR\x0bNNMLPGM\
    CCMJ\x12\x18\n\x07retcode\x18\x04\x20\x01(\rR\x07retcode\x12\x20\n\x0bBC\
    AJBBMBFKN\x18\x05\x20\x03(\rR\x0bBCAJBBMBFKN\x12\x20\n\x0bGEDHAAPEBNG\
    \x18\x0c\x20\x03(\rR\x0bGEDHAAPEBNGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::DGDPOCNFNBM::file_descriptor().clone());
            deps.push(super::KJEPLFPALCB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SpaceZooDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
