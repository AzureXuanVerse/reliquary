// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SpaceZooDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SpaceZooDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SpaceZooDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.JACFAOJKBPG)
    pub JACFAOJKBPG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.PAPIPNBPBPE)
    pub PAPIPNBPBPE: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.GCNOKOILMHG)
    pub GCNOKOILMHG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.ADADHIHDHJC)
    pub ADADHIHDHJC: u32,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.JBIBFELMJNB)
    pub JBIBFELMJNB: ::std::vec::Vec<super::PPBBLDEAFDG::PPBBLDEAFDG>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.KMDBEGAGELN)
    pub KMDBEGAGELN: u32,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.PFIJLIIDOCH)
    pub PFIJLIIDOCH: ::std::vec::Vec<super::AHBLNFKHHNL::AHBLNFKHHNL>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.KPFCFMPAANL)
    pub KPFCFMPAANL: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.BJKHHAPGLDC)
    pub BJKHHAPGLDC: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:SpaceZooDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpaceZooDataScRsp {
    fn default() -> &'a SpaceZooDataScRsp {
        <SpaceZooDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl SpaceZooDataScRsp {
    pub fn new() -> SpaceZooDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JACFAOJKBPG",
            |m: &SpaceZooDataScRsp| { &m.JACFAOJKBPG },
            |m: &mut SpaceZooDataScRsp| { &mut m.JACFAOJKBPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PAPIPNBPBPE",
            |m: &SpaceZooDataScRsp| { &m.PAPIPNBPBPE },
            |m: &mut SpaceZooDataScRsp| { &mut m.PAPIPNBPBPE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GCNOKOILMHG",
            |m: &SpaceZooDataScRsp| { &m.GCNOKOILMHG },
            |m: &mut SpaceZooDataScRsp| { &mut m.GCNOKOILMHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADADHIHDHJC",
            |m: &SpaceZooDataScRsp| { &m.ADADHIHDHJC },
            |m: &mut SpaceZooDataScRsp| { &mut m.ADADHIHDHJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JBIBFELMJNB",
            |m: &SpaceZooDataScRsp| { &m.JBIBFELMJNB },
            |m: &mut SpaceZooDataScRsp| { &mut m.JBIBFELMJNB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KMDBEGAGELN",
            |m: &SpaceZooDataScRsp| { &m.KMDBEGAGELN },
            |m: &mut SpaceZooDataScRsp| { &mut m.KMDBEGAGELN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PFIJLIIDOCH",
            |m: &SpaceZooDataScRsp| { &m.PFIJLIIDOCH },
            |m: &mut SpaceZooDataScRsp| { &mut m.PFIJLIIDOCH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KPFCFMPAANL",
            |m: &SpaceZooDataScRsp| { &m.KPFCFMPAANL },
            |m: &mut SpaceZooDataScRsp| { &mut m.KPFCFMPAANL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BJKHHAPGLDC",
            |m: &SpaceZooDataScRsp| { &m.BJKHHAPGLDC },
            |m: &mut SpaceZooDataScRsp| { &mut m.BJKHHAPGLDC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SpaceZooDataScRsp>(
            "SpaceZooDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SpaceZooDataScRsp {
    const NAME: &'static str = "SpaceZooDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.JACFAOJKBPG)?;
                },
                96 => {
                    self.JACFAOJKBPG.push(is.read_uint32()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.PAPIPNBPBPE)?;
                },
                40 => {
                    self.PAPIPNBPBPE.push(is.read_uint32()?);
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.GCNOKOILMHG)?;
                },
                80 => {
                    self.GCNOKOILMHG.push(is.read_uint32()?);
                },
                32 => {
                    self.ADADHIHDHJC = is.read_uint32()?;
                },
                26 => {
                    self.JBIBFELMJNB.push(is.read_message()?);
                },
                88 => {
                    self.KMDBEGAGELN = is.read_uint32()?;
                },
                114 => {
                    self.PFIJLIIDOCH.push(is.read_message()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.KPFCFMPAANL)?;
                },
                16 => {
                    self.KPFCFMPAANL.push(is.read_uint32()?);
                },
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.BJKHHAPGLDC)?;
                },
                8 => {
                    self.BJKHHAPGLDC.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.JACFAOJKBPG {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        for value in &self.PAPIPNBPBPE {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        for value in &self.GCNOKOILMHG {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        if self.ADADHIHDHJC != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.ADADHIHDHJC);
        }
        for value in &self.JBIBFELMJNB {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.KMDBEGAGELN != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.KMDBEGAGELN);
        }
        for value in &self.PFIJLIIDOCH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.KPFCFMPAANL {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        for value in &self.BJKHHAPGLDC {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.JACFAOJKBPG {
            os.write_uint32(12, *v)?;
        };
        for v in &self.PAPIPNBPBPE {
            os.write_uint32(5, *v)?;
        };
        for v in &self.GCNOKOILMHG {
            os.write_uint32(10, *v)?;
        };
        if self.ADADHIHDHJC != 0 {
            os.write_uint32(4, self.ADADHIHDHJC)?;
        }
        for v in &self.JBIBFELMJNB {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.KMDBEGAGELN != 0 {
            os.write_uint32(11, self.KMDBEGAGELN)?;
        }
        for v in &self.PFIJLIIDOCH {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        for v in &self.KPFCFMPAANL {
            os.write_uint32(2, *v)?;
        };
        for v in &self.BJKHHAPGLDC {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpaceZooDataScRsp {
        SpaceZooDataScRsp::new()
    }

    fn clear(&mut self) {
        self.JACFAOJKBPG.clear();
        self.PAPIPNBPBPE.clear();
        self.GCNOKOILMHG.clear();
        self.ADADHIHDHJC = 0;
        self.JBIBFELMJNB.clear();
        self.KMDBEGAGELN = 0;
        self.PFIJLIIDOCH.clear();
        self.KPFCFMPAANL.clear();
        self.BJKHHAPGLDC.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpaceZooDataScRsp {
        static instance: SpaceZooDataScRsp = SpaceZooDataScRsp {
            JACFAOJKBPG: ::std::vec::Vec::new(),
            PAPIPNBPBPE: ::std::vec::Vec::new(),
            GCNOKOILMHG: ::std::vec::Vec::new(),
            ADADHIHDHJC: 0,
            JBIBFELMJNB: ::std::vec::Vec::new(),
            KMDBEGAGELN: 0,
            PFIJLIIDOCH: ::std::vec::Vec::new(),
            KPFCFMPAANL: ::std::vec::Vec::new(),
            BJKHHAPGLDC: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SpaceZooDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SpaceZooDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SpaceZooDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpaceZooDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17SpaceZooDataScRsp.proto\x1a\x11AHBLNFKHHNL.proto\x1a\x11PPBBLDEAFD\
    G.proto\"\xe1\x02\n\x11SpaceZooDataScRsp\x12\x20\n\x0bJACFAOJKBPG\x18\
    \x0c\x20\x03(\rR\x0bJACFAOJKBPG\x12\x20\n\x0bPAPIPNBPBPE\x18\x05\x20\x03\
    (\rR\x0bPAPIPNBPBPE\x12\x20\n\x0bGCNOKOILMHG\x18\n\x20\x03(\rR\x0bGCNOKO\
    ILMHG\x12\x20\n\x0bADADHIHDHJC\x18\x04\x20\x01(\rR\x0bADADHIHDHJC\x12.\n\
    \x0bJBIBFELMJNB\x18\x03\x20\x03(\x0b2\x0c.PPBBLDEAFDGR\x0bJBIBFELMJNB\
    \x12\x20\n\x0bKMDBEGAGELN\x18\x0b\x20\x01(\rR\x0bKMDBEGAGELN\x12.\n\x0bP\
    FIJLIIDOCH\x18\x0e\x20\x03(\x0b2\x0c.AHBLNFKHHNLR\x0bPFIJLIIDOCH\x12\x20\
    \n\x0bKPFCFMPAANL\x18\x02\x20\x03(\rR\x0bKPFCFMPAANL\x12\x20\n\x0bBJKHHA\
    PGLDC\x18\x01\x20\x03(\rR\x0bBJKHHAPGLDCb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::AHBLNFKHHNL::file_descriptor().clone());
            deps.push(super::PPBBLDEAFDG::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SpaceZooDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
