// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FFKOBEKEBGK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FFKOBEKEBGK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FFKOBEKEBGK {
    // message fields
    // @@protoc_insertion_point(field:FFKOBEKEBGK.GHBJGBODJLL)
    pub GHBJGBODJLL: ::std::vec::Vec<super::BGKOPOCEJJL::BGKOPOCEJJL>,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.PCABIMPKMBN)
    pub PCABIMPKMBN: u32,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.FMFGOGENPHL)
    pub FMFGOGENPHL: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.CDAOBKPLCBL)
    pub CDAOBKPLCBL: ::std::vec::Vec<super::INBPFOLGGEC::INBPFOLGGEC>,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.MLEAECLOGEB)
    pub MLEAECLOGEB: u32,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.EIOMLNNLILI)
    pub EIOMLNNLILI: u32,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.PBKKPKGOBOK)
    pub PBKKPKGOBOK: ::std::collections::HashMap<::std::string::String, i32>,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.GCELHDACAJK)
    pub GCELHDACAJK: ::std::vec::Vec<super::BKCEKEKHJCA::BKCEKEKHJCA>,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.CMBCKONHGEG)
    pub CMBCKONHGEG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.PBAMLLJIGEH)
    pub PBAMLLJIGEH: u32,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.IPMKBGNEIBN)
    pub IPMKBGNEIBN: ::std::vec::Vec<super::HGPFNBOGEMB::HGPFNBOGEMB>,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:FFKOBEKEBGK.KPEADJCPCNK)
    pub KPEADJCPCNK: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FFKOBEKEBGK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FFKOBEKEBGK {
    fn default() -> &'a FFKOBEKEBGK {
        <FFKOBEKEBGK as ::protobuf::Message>::default_instance()
    }
}

impl FFKOBEKEBGK {
    pub fn new() -> FFKOBEKEBGK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GHBJGBODJLL",
            |m: &FFKOBEKEBGK| { &m.GHBJGBODJLL },
            |m: &mut FFKOBEKEBGK| { &mut m.GHBJGBODJLL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PCABIMPKMBN",
            |m: &FFKOBEKEBGK| { &m.PCABIMPKMBN },
            |m: &mut FFKOBEKEBGK| { &mut m.PCABIMPKMBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FMFGOGENPHL",
            |m: &FFKOBEKEBGK| { &m.FMFGOGENPHL },
            |m: &mut FFKOBEKEBGK| { &mut m.FMFGOGENPHL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CDAOBKPLCBL",
            |m: &FFKOBEKEBGK| { &m.CDAOBKPLCBL },
            |m: &mut FFKOBEKEBGK| { &mut m.CDAOBKPLCBL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MLEAECLOGEB",
            |m: &FFKOBEKEBGK| { &m.MLEAECLOGEB },
            |m: &mut FFKOBEKEBGK| { &mut m.MLEAECLOGEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EIOMLNNLILI",
            |m: &FFKOBEKEBGK| { &m.EIOMLNNLILI },
            |m: &mut FFKOBEKEBGK| { &mut m.EIOMLNNLILI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "PBKKPKGOBOK",
            |m: &FFKOBEKEBGK| { &m.PBKKPKGOBOK },
            |m: &mut FFKOBEKEBGK| { &mut m.PBKKPKGOBOK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GCELHDACAJK",
            |m: &FFKOBEKEBGK| { &m.GCELHDACAJK },
            |m: &mut FFKOBEKEBGK| { &mut m.GCELHDACAJK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CMBCKONHGEG",
            |m: &FFKOBEKEBGK| { &m.CMBCKONHGEG },
            |m: &mut FFKOBEKEBGK| { &mut m.CMBCKONHGEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PBAMLLJIGEH",
            |m: &FFKOBEKEBGK| { &m.PBAMLLJIGEH },
            |m: &mut FFKOBEKEBGK| { &mut m.PBAMLLJIGEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IPMKBGNEIBN",
            |m: &FFKOBEKEBGK| { &m.IPMKBGNEIBN },
            |m: &mut FFKOBEKEBGK| { &mut m.IPMKBGNEIBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &FFKOBEKEBGK| { &m.retcode },
            |m: &mut FFKOBEKEBGK| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KPEADJCPCNK",
            |m: &FFKOBEKEBGK| { &m.KPEADJCPCNK },
            |m: &mut FFKOBEKEBGK| { &mut m.KPEADJCPCNK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FFKOBEKEBGK>(
            "FFKOBEKEBGK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FFKOBEKEBGK {
    const NAME: &'static str = "FFKOBEKEBGK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                90 => {
                    self.GHBJGBODJLL.push(is.read_message()?);
                },
                8 => {
                    self.PCABIMPKMBN = is.read_uint32()?;
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.FMFGOGENPHL)?;
                },
                120 => {
                    self.FMFGOGENPHL.push(is.read_uint32()?);
                },
                42 => {
                    self.CDAOBKPLCBL.push(is.read_message()?);
                },
                16 => {
                    self.MLEAECLOGEB = is.read_uint32()?;
                },
                80 => {
                    self.EIOMLNNLILI = is.read_uint32()?;
                },
                66 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.PBKKPKGOBOK.insert(key, value);
                },
                74 => {
                    self.GCELHDACAJK.push(is.read_message()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.CMBCKONHGEG)?;
                },
                48 => {
                    self.CMBCKONHGEG.push(is.read_uint32()?);
                },
                104 => {
                    self.PBAMLLJIGEH = is.read_uint32()?;
                },
                26 => {
                    self.IPMKBGNEIBN.push(is.read_message()?);
                },
                96 => {
                    self.retcode = is.read_uint32()?;
                },
                32 => {
                    self.KPEADJCPCNK = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.GHBJGBODJLL {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.PCABIMPKMBN != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.PCABIMPKMBN);
        }
        for value in &self.FMFGOGENPHL {
            my_size += ::protobuf::rt::uint32_size(15, *value);
        };
        for value in &self.CDAOBKPLCBL {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.MLEAECLOGEB != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.MLEAECLOGEB);
        }
        if self.EIOMLNNLILI != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.EIOMLNNLILI);
        }
        for (k, v) in &self.PBKKPKGOBOK {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.GCELHDACAJK {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.CMBCKONHGEG {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        if self.PBAMLLJIGEH != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.PBAMLLJIGEH);
        }
        for value in &self.IPMKBGNEIBN {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.retcode);
        }
        if self.KPEADJCPCNK != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.KPEADJCPCNK);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.GHBJGBODJLL {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if self.PCABIMPKMBN != 0 {
            os.write_uint32(1, self.PCABIMPKMBN)?;
        }
        for v in &self.FMFGOGENPHL {
            os.write_uint32(15, *v)?;
        };
        for v in &self.CDAOBKPLCBL {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.MLEAECLOGEB != 0 {
            os.write_uint32(2, self.MLEAECLOGEB)?;
        }
        if self.EIOMLNNLILI != 0 {
            os.write_uint32(10, self.EIOMLNNLILI)?;
        }
        for (k, v) in &self.PBKKPKGOBOK {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(66)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_int32(2, *v)?;
        };
        for v in &self.GCELHDACAJK {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for v in &self.CMBCKONHGEG {
            os.write_uint32(6, *v)?;
        };
        if self.PBAMLLJIGEH != 0 {
            os.write_uint32(13, self.PBAMLLJIGEH)?;
        }
        for v in &self.IPMKBGNEIBN {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(12, self.retcode)?;
        }
        if self.KPEADJCPCNK != 0 {
            os.write_uint32(4, self.KPEADJCPCNK)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FFKOBEKEBGK {
        FFKOBEKEBGK::new()
    }

    fn clear(&mut self) {
        self.GHBJGBODJLL.clear();
        self.PCABIMPKMBN = 0;
        self.FMFGOGENPHL.clear();
        self.CDAOBKPLCBL.clear();
        self.MLEAECLOGEB = 0;
        self.EIOMLNNLILI = 0;
        self.PBKKPKGOBOK.clear();
        self.GCELHDACAJK.clear();
        self.CMBCKONHGEG.clear();
        self.PBAMLLJIGEH = 0;
        self.IPMKBGNEIBN.clear();
        self.retcode = 0;
        self.KPEADJCPCNK = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FFKOBEKEBGK {
        static instance: ::protobuf::rt::Lazy<FFKOBEKEBGK> = ::protobuf::rt::Lazy::new();
        instance.get(FFKOBEKEBGK::new)
    }
}

impl ::protobuf::MessageFull for FFKOBEKEBGK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FFKOBEKEBGK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FFKOBEKEBGK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FFKOBEKEBGK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FFKOBEKEBGK.proto\x1a\x11BGKOPOCEJJL.proto\x1a\x11BKCEKEKHJCA.prot\
    o\x1a\x11HGPFNBOGEMB.proto\x1a\x11INBPFOLGGEC.proto\"\xd6\x04\n\x0bFFKOB\
    EKEBGK\x12.\n\x0bGHBJGBODJLL\x18\x0b\x20\x03(\x0b2\x0c.BGKOPOCEJJLR\x0bG\
    HBJGBODJLL\x12\x20\n\x0bPCABIMPKMBN\x18\x01\x20\x01(\rR\x0bPCABIMPKMBN\
    \x12\x20\n\x0bFMFGOGENPHL\x18\x0f\x20\x03(\rR\x0bFMFGOGENPHL\x12.\n\x0bC\
    DAOBKPLCBL\x18\x05\x20\x03(\x0b2\x0c.INBPFOLGGECR\x0bCDAOBKPLCBL\x12\x20\
    \n\x0bMLEAECLOGEB\x18\x02\x20\x01(\rR\x0bMLEAECLOGEB\x12\x20\n\x0bEIOMLN\
    NLILI\x18\n\x20\x01(\rR\x0bEIOMLNNLILI\x12?\n\x0bPBKKPKGOBOK\x18\x08\x20\
    \x03(\x0b2\x1d.FFKOBEKEBGK.PBKKPKGOBOKEntryR\x0bPBKKPKGOBOK\x12.\n\x0bGC\
    ELHDACAJK\x18\t\x20\x03(\x0b2\x0c.BKCEKEKHJCAR\x0bGCELHDACAJK\x12\x20\n\
    \x0bCMBCKONHGEG\x18\x06\x20\x03(\rR\x0bCMBCKONHGEG\x12\x20\n\x0bPBAMLLJI\
    GEH\x18\r\x20\x01(\rR\x0bPBAMLLJIGEH\x12.\n\x0bIPMKBGNEIBN\x18\x03\x20\
    \x03(\x0b2\x0c.HGPFNBOGEMBR\x0bIPMKBGNEIBN\x12\x18\n\x07retcode\x18\x0c\
    \x20\x01(\rR\x07retcode\x12\x20\n\x0bKPEADJCPCNK\x18\x04\x20\x01(\rR\x0b\
    KPEADJCPCNK\x1a>\n\x10PBKKPKGOBOKEntry\x12\x10\n\x03key\x18\x01\x20\x01(\
    \tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x05R\x05value:\x028\x01b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::BGKOPOCEJJL::file_descriptor().clone());
            deps.push(super::BKCEKEKHJCA::file_descriptor().clone());
            deps.push(super::HGPFNBOGEMB::file_descriptor().clone());
            deps.push(super::INBPFOLGGEC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FFKOBEKEBGK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
