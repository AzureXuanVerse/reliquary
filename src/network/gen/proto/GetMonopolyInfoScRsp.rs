// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetMonopolyInfoScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetMonopolyInfoScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetMonopolyInfoScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.LCDEKLOBIDI)
    pub LCDEKLOBIDI: ::protobuf::MessageField<super::MELIJBJPKMF::MELIJBJPKMF>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.KIFPHHDKEFP)
    pub KIFPHHDKEFP: ::protobuf::MessageField<super::GFJKKCMFEIL::GFJKKCMFEIL>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.OKPDPGBCFDB)
    pub OKPDPGBCFDB: ::protobuf::MessageField<super::AFBGDOPLIPP::AFBGDOPLIPP>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.BLGPIKHEGCC)
    pub BLGPIKHEGCC: ::protobuf::MessageField<super::BJBMLPGMACP::BJBMLPGMACP>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.BJPLLEKEMMB)
    pub BJPLLEKEMMB: ::protobuf::MessageField<super::DHIDLPCFJMA::DHIDLPCFJMA>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.IJDOFKAECGB)
    pub IJDOFKAECGB: ::protobuf::MessageField<super::EAJGCPIHOBJ::EAJGCPIHOBJ>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.BABPBDKOFPH)
    pub BABPBDKOFPH: ::protobuf::MessageField<super::JBNLEOPNIBH::JBNLEOPNIBH>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.OBNMBPEKKIN)
    pub OBNMBPEKKIN: ::protobuf::MessageField<super::FJAJGJHIBFI::FJAJGJHIBFI>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.AHJELPMEDLK)
    pub AHJELPMEDLK: ::protobuf::MessageField<super::POILLAAGJAN::POILLAAGJAN>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.ABBFDNOOIFK)
    pub ABBFDNOOIFK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.FPGMDIPJKDJ)
    pub FPGMDIPJKDJ: ::protobuf::MessageField<super::OFILBNBPLGE::OFILBNBPLGE>,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetMonopolyInfoScRsp.PPNHHKFDEFK)
    pub PPNHHKFDEFK: ::protobuf::MessageField<super::NOADPKLEJGA::NOADPKLEJGA>,
    // special fields
    // @@protoc_insertion_point(special_field:GetMonopolyInfoScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMonopolyInfoScRsp {
    fn default() -> &'a GetMonopolyInfoScRsp {
        <GetMonopolyInfoScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetMonopolyInfoScRsp {
    pub fn new() -> GetMonopolyInfoScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MELIJBJPKMF::MELIJBJPKMF>(
            "LCDEKLOBIDI",
            |m: &GetMonopolyInfoScRsp| { &m.LCDEKLOBIDI },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.LCDEKLOBIDI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GFJKKCMFEIL::GFJKKCMFEIL>(
            "KIFPHHDKEFP",
            |m: &GetMonopolyInfoScRsp| { &m.KIFPHHDKEFP },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.KIFPHHDKEFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AFBGDOPLIPP::AFBGDOPLIPP>(
            "OKPDPGBCFDB",
            |m: &GetMonopolyInfoScRsp| { &m.OKPDPGBCFDB },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.OKPDPGBCFDB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BJBMLPGMACP::BJBMLPGMACP>(
            "BLGPIKHEGCC",
            |m: &GetMonopolyInfoScRsp| { &m.BLGPIKHEGCC },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.BLGPIKHEGCC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DHIDLPCFJMA::DHIDLPCFJMA>(
            "BJPLLEKEMMB",
            |m: &GetMonopolyInfoScRsp| { &m.BJPLLEKEMMB },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.BJPLLEKEMMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EAJGCPIHOBJ::EAJGCPIHOBJ>(
            "IJDOFKAECGB",
            |m: &GetMonopolyInfoScRsp| { &m.IJDOFKAECGB },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.IJDOFKAECGB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JBNLEOPNIBH::JBNLEOPNIBH>(
            "BABPBDKOFPH",
            |m: &GetMonopolyInfoScRsp| { &m.BABPBDKOFPH },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.BABPBDKOFPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FJAJGJHIBFI::FJAJGJHIBFI>(
            "OBNMBPEKKIN",
            |m: &GetMonopolyInfoScRsp| { &m.OBNMBPEKKIN },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.OBNMBPEKKIN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::POILLAAGJAN::POILLAAGJAN>(
            "AHJELPMEDLK",
            |m: &GetMonopolyInfoScRsp| { &m.AHJELPMEDLK },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.AHJELPMEDLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ABBFDNOOIFK",
            |m: &GetMonopolyInfoScRsp| { &m.ABBFDNOOIFK },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.ABBFDNOOIFK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OFILBNBPLGE::OFILBNBPLGE>(
            "FPGMDIPJKDJ",
            |m: &GetMonopolyInfoScRsp| { &m.FPGMDIPJKDJ },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.FPGMDIPJKDJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetMonopolyInfoScRsp| { &m.retcode },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NOADPKLEJGA::NOADPKLEJGA>(
            "PPNHHKFDEFK",
            |m: &GetMonopolyInfoScRsp| { &m.PPNHHKFDEFK },
            |m: &mut GetMonopolyInfoScRsp| { &mut m.PPNHHKFDEFK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMonopolyInfoScRsp>(
            "GetMonopolyInfoScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMonopolyInfoScRsp {
    const NAME: &'static str = "GetMonopolyInfoScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LCDEKLOBIDI)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KIFPHHDKEFP)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OKPDPGBCFDB)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BLGPIKHEGCC)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BJPLLEKEMMB)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IJDOFKAECGB)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BABPBDKOFPH)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OBNMBPEKKIN)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AHJELPMEDLK)?;
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.ABBFDNOOIFK)?;
                },
                88 => {
                    self.ABBFDNOOIFK.push(is.read_uint32()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FPGMDIPJKDJ)?;
                },
                112 => {
                    self.retcode = is.read_uint32()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PPNHHKFDEFK)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.LCDEKLOBIDI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.KIFPHHDKEFP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OKPDPGBCFDB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.BLGPIKHEGCC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.BJPLLEKEMMB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.IJDOFKAECGB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.BABPBDKOFPH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OBNMBPEKKIN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.AHJELPMEDLK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.ABBFDNOOIFK {
            my_size += ::protobuf::rt::uint32_size(11, *value);
        };
        if let Some(v) = self.FPGMDIPJKDJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.retcode);
        }
        if let Some(v) = self.PPNHHKFDEFK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.LCDEKLOBIDI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.KIFPHHDKEFP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.OKPDPGBCFDB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.BLGPIKHEGCC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.BJPLLEKEMMB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.IJDOFKAECGB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.BABPBDKOFPH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.OBNMBPEKKIN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.AHJELPMEDLK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        for v in &self.ABBFDNOOIFK {
            os.write_uint32(11, *v)?;
        };
        if let Some(v) = self.FPGMDIPJKDJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.retcode != 0 {
            os.write_uint32(14, self.retcode)?;
        }
        if let Some(v) = self.PPNHHKFDEFK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMonopolyInfoScRsp {
        GetMonopolyInfoScRsp::new()
    }

    fn clear(&mut self) {
        self.LCDEKLOBIDI.clear();
        self.KIFPHHDKEFP.clear();
        self.OKPDPGBCFDB.clear();
        self.BLGPIKHEGCC.clear();
        self.BJPLLEKEMMB.clear();
        self.IJDOFKAECGB.clear();
        self.BABPBDKOFPH.clear();
        self.OBNMBPEKKIN.clear();
        self.AHJELPMEDLK.clear();
        self.ABBFDNOOIFK.clear();
        self.FPGMDIPJKDJ.clear();
        self.retcode = 0;
        self.PPNHHKFDEFK.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMonopolyInfoScRsp {
        static instance: GetMonopolyInfoScRsp = GetMonopolyInfoScRsp {
            LCDEKLOBIDI: ::protobuf::MessageField::none(),
            KIFPHHDKEFP: ::protobuf::MessageField::none(),
            OKPDPGBCFDB: ::protobuf::MessageField::none(),
            BLGPIKHEGCC: ::protobuf::MessageField::none(),
            BJPLLEKEMMB: ::protobuf::MessageField::none(),
            IJDOFKAECGB: ::protobuf::MessageField::none(),
            BABPBDKOFPH: ::protobuf::MessageField::none(),
            OBNMBPEKKIN: ::protobuf::MessageField::none(),
            AHJELPMEDLK: ::protobuf::MessageField::none(),
            ABBFDNOOIFK: ::std::vec::Vec::new(),
            FPGMDIPJKDJ: ::protobuf::MessageField::none(),
            retcode: 0,
            PPNHHKFDEFK: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMonopolyInfoScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMonopolyInfoScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMonopolyInfoScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMonopolyInfoScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aGetMonopolyInfoScRsp.proto\x1a\x11AFBGDOPLIPP.proto\x1a\x11BJBMLPG\
    MACP.proto\x1a\x11DHIDLPCFJMA.proto\x1a\x11EAJGCPIHOBJ.proto\x1a\x11FJAJ\
    GJHIBFI.proto\x1a\x11GFJKKCMFEIL.proto\x1a\x11JBNLEOPNIBH.proto\x1a\x11M\
    ELIJBJPKMF.proto\x1a\x11NOADPKLEJGA.proto\x1a\x11OFILBNBPLGE.proto\x1a\
    \x11POILLAAGJAN.proto\"\xe2\x04\n\x14GetMonopolyInfoScRsp\x12.\n\x0bLCDE\
    KLOBIDI\x18\x02\x20\x01(\x0b2\x0c.MELIJBJPKMFR\x0bLCDEKLOBIDI\x12.\n\x0b\
    KIFPHHDKEFP\x18\x06\x20\x01(\x0b2\x0c.GFJKKCMFEILR\x0bKIFPHHDKEFP\x12.\n\
    \x0bOKPDPGBCFDB\x18\t\x20\x01(\x0b2\x0c.AFBGDOPLIPPR\x0bOKPDPGBCFDB\x12.\
    \n\x0bBLGPIKHEGCC\x18\x04\x20\x01(\x0b2\x0c.BJBMLPGMACPR\x0bBLGPIKHEGCC\
    \x12.\n\x0bBJPLLEKEMMB\x18\x07\x20\x01(\x0b2\x0c.DHIDLPCFJMAR\x0bBJPLLEK\
    EMMB\x12.\n\x0bIJDOFKAECGB\x18\x03\x20\x01(\x0b2\x0c.EAJGCPIHOBJR\x0bIJD\
    OFKAECGB\x12.\n\x0bBABPBDKOFPH\x18\x0c\x20\x01(\x0b2\x0c.JBNLEOPNIBHR\
    \x0bBABPBDKOFPH\x12.\n\x0bOBNMBPEKKIN\x18\x05\x20\x01(\x0b2\x0c.FJAJGJHI\
    BFIR\x0bOBNMBPEKKIN\x12.\n\x0bAHJELPMEDLK\x18\r\x20\x01(\x0b2\x0c.POILLA\
    AGJANR\x0bAHJELPMEDLK\x12\x20\n\x0bABBFDNOOIFK\x18\x0b\x20\x03(\rR\x0bAB\
    BFDNOOIFK\x12.\n\x0bFPGMDIPJKDJ\x18\n\x20\x01(\x0b2\x0c.OFILBNBPLGER\x0b\
    FPGMDIPJKDJ\x12\x18\n\x07retcode\x18\x0e\x20\x01(\rR\x07retcode\x12.\n\
    \x0bPPNHHKFDEFK\x18\x0f\x20\x01(\x0b2\x0c.NOADPKLEJGAR\x0bPPNHHKFDEFKb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(11);
            deps.push(super::AFBGDOPLIPP::file_descriptor().clone());
            deps.push(super::BJBMLPGMACP::file_descriptor().clone());
            deps.push(super::DHIDLPCFJMA::file_descriptor().clone());
            deps.push(super::EAJGCPIHOBJ::file_descriptor().clone());
            deps.push(super::FJAJGJHIBFI::file_descriptor().clone());
            deps.push(super::GFJKKCMFEIL::file_descriptor().clone());
            deps.push(super::JBNLEOPNIBH::file_descriptor().clone());
            deps.push(super::MELIJBJPKMF::file_descriptor().clone());
            deps.push(super::NOADPKLEJGA::file_descriptor().clone());
            deps.push(super::OFILBNBPLGE::file_descriptor().clone());
            deps.push(super::POILLAAGJAN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetMonopolyInfoScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
