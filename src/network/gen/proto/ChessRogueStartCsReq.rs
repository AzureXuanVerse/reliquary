// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChessRogueStartCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChessRogueStartCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChessRogueStartCsReq {
    // message fields
    // @@protoc_insertion_point(field:ChessRogueStartCsReq.JDCMGPJHGLG)
    pub JDCMGPJHGLG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueStartCsReq.KOLEFJKMFLF)
    pub KOLEFJKMFLF: u32,
    // @@protoc_insertion_point(field:ChessRogueStartCsReq.DDDICOEFHPM)
    pub DDDICOEFHPM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueStartCsReq.area_id)
    pub area_id: u32,
    // @@protoc_insertion_point(field:ChessRogueStartCsReq.base_avatar_id_list)
    pub base_avatar_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueStartCsReq.disable_aeon_id)
    pub disable_aeon_id: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChessRogueStartCsReq.dice_branch_id)
    pub dice_branch_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ChessRogueStartCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChessRogueStartCsReq {
    fn default() -> &'a ChessRogueStartCsReq {
        <ChessRogueStartCsReq as ::protobuf::Message>::default_instance()
    }
}

impl ChessRogueStartCsReq {
    pub fn new() -> ChessRogueStartCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JDCMGPJHGLG",
            |m: &ChessRogueStartCsReq| { &m.JDCMGPJHGLG },
            |m: &mut ChessRogueStartCsReq| { &mut m.JDCMGPJHGLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KOLEFJKMFLF",
            |m: &ChessRogueStartCsReq| { &m.KOLEFJKMFLF },
            |m: &mut ChessRogueStartCsReq| { &mut m.KOLEFJKMFLF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DDDICOEFHPM",
            |m: &ChessRogueStartCsReq| { &m.DDDICOEFHPM },
            |m: &mut ChessRogueStartCsReq| { &mut m.DDDICOEFHPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "area_id",
            |m: &ChessRogueStartCsReq| { &m.area_id },
            |m: &mut ChessRogueStartCsReq| { &mut m.area_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "base_avatar_id_list",
            |m: &ChessRogueStartCsReq| { &m.base_avatar_id_list },
            |m: &mut ChessRogueStartCsReq| { &mut m.base_avatar_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "disable_aeon_id",
            |m: &ChessRogueStartCsReq| { &m.disable_aeon_id },
            |m: &mut ChessRogueStartCsReq| { &mut m.disable_aeon_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dice_branch_id",
            |m: &ChessRogueStartCsReq| { &m.dice_branch_id },
            |m: &mut ChessRogueStartCsReq| { &mut m.dice_branch_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChessRogueStartCsReq>(
            "ChessRogueStartCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChessRogueStartCsReq {
    const NAME: &'static str = "ChessRogueStartCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.JDCMGPJHGLG)?;
                },
                64 => {
                    self.JDCMGPJHGLG.push(is.read_uint32()?);
                },
                8 => {
                    self.KOLEFJKMFLF = is.read_uint32()?;
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.DDDICOEFHPM)?;
                },
                48 => {
                    self.DDDICOEFHPM.push(is.read_uint32()?);
                },
                40 => {
                    self.area_id = is.read_uint32()?;
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.base_avatar_id_list)?;
                },
                120 => {
                    self.base_avatar_id_list.push(is.read_uint32()?);
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.disable_aeon_id)?;
                },
                104 => {
                    self.disable_aeon_id.push(is.read_uint32()?);
                },
                72 => {
                    self.dice_branch_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.JDCMGPJHGLG {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if self.KOLEFJKMFLF != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.KOLEFJKMFLF);
        }
        for value in &self.DDDICOEFHPM {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        if self.area_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.area_id);
        }
        for value in &self.base_avatar_id_list {
            my_size += ::protobuf::rt::uint32_size(15, *value);
        };
        for value in &self.disable_aeon_id {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        if self.dice_branch_id != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.dice_branch_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.JDCMGPJHGLG {
            os.write_uint32(8, *v)?;
        };
        if self.KOLEFJKMFLF != 0 {
            os.write_uint32(1, self.KOLEFJKMFLF)?;
        }
        for v in &self.DDDICOEFHPM {
            os.write_uint32(6, *v)?;
        };
        if self.area_id != 0 {
            os.write_uint32(5, self.area_id)?;
        }
        for v in &self.base_avatar_id_list {
            os.write_uint32(15, *v)?;
        };
        for v in &self.disable_aeon_id {
            os.write_uint32(13, *v)?;
        };
        if self.dice_branch_id != 0 {
            os.write_uint32(9, self.dice_branch_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChessRogueStartCsReq {
        ChessRogueStartCsReq::new()
    }

    fn clear(&mut self) {
        self.JDCMGPJHGLG.clear();
        self.KOLEFJKMFLF = 0;
        self.DDDICOEFHPM.clear();
        self.area_id = 0;
        self.base_avatar_id_list.clear();
        self.disable_aeon_id.clear();
        self.dice_branch_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChessRogueStartCsReq {
        static instance: ChessRogueStartCsReq = ChessRogueStartCsReq {
            JDCMGPJHGLG: ::std::vec::Vec::new(),
            KOLEFJKMFLF: 0,
            DDDICOEFHPM: ::std::vec::Vec::new(),
            area_id: 0,
            base_avatar_id_list: ::std::vec::Vec::new(),
            disable_aeon_id: ::std::vec::Vec::new(),
            dice_branch_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChessRogueStartCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChessRogueStartCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChessRogueStartCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChessRogueStartCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aChessRogueStartCsReq.proto\"\x92\x02\n\x14ChessRogueStartCsReq\x12\
    \x20\n\x0bJDCMGPJHGLG\x18\x08\x20\x03(\rR\x0bJDCMGPJHGLG\x12\x20\n\x0bKO\
    LEFJKMFLF\x18\x01\x20\x01(\rR\x0bKOLEFJKMFLF\x12\x20\n\x0bDDDICOEFHPM\
    \x18\x06\x20\x03(\rR\x0bDDDICOEFHPM\x12\x17\n\x07area_id\x18\x05\x20\x01\
    (\rR\x06areaId\x12-\n\x13base_avatar_id_list\x18\x0f\x20\x03(\rR\x10base\
    AvatarIdList\x12&\n\x0fdisable_aeon_id\x18\r\x20\x03(\rR\rdisableAeonId\
    \x12$\n\x0edice_branch_id\x18\t\x20\x01(\rR\x0cdiceBranchIdB\x15\n\x13em\
    u.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChessRogueStartCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
