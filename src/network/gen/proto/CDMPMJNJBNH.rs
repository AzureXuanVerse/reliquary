// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CDMPMJNJBNH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CDMPMJNJBNH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDMPMJNJBNH {
    // message oneof groups
    pub PCCOGDPNHHI: ::std::option::Option<cdmpmjnjbnh::PCCOGDPNHHI>,
    // special fields
    // @@protoc_insertion_point(special_field:CDMPMJNJBNH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDMPMJNJBNH {
    fn default() -> &'a CDMPMJNJBNH {
        <CDMPMJNJBNH as ::protobuf::Message>::default_instance()
    }
}

impl CDMPMJNJBNH {
    pub fn new() -> CDMPMJNJBNH {
        ::std::default::Default::default()
    }

    // .DJCIBGLGPCN IKNKGFJIHBC = 1262;

    pub fn IKNKGFJIHBC(&self) -> &super::DJCIBGLGPCN::DJCIBGLGPCN {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(ref v)) => v,
            _ => <super::DJCIBGLGPCN::DJCIBGLGPCN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IKNKGFJIHBC(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_IKNKGFJIHBC(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IKNKGFJIHBC(&mut self, v: super::DJCIBGLGPCN::DJCIBGLGPCN) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IKNKGFJIHBC(&mut self) -> &mut super::DJCIBGLGPCN::DJCIBGLGPCN {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(super::DJCIBGLGPCN::DJCIBGLGPCN::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IKNKGFJIHBC(&mut self) -> super::DJCIBGLGPCN::DJCIBGLGPCN {
        if self.has_IKNKGFJIHBC() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DJCIBGLGPCN::DJCIBGLGPCN::new()
        }
    }

    // .OCEPLKHBNHD DJLJGPPLLLI = 286;

    pub fn DJLJGPPLLLI(&self) -> &super::OCEPLKHBNHD::OCEPLKHBNHD {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(ref v)) => v,
            _ => <super::OCEPLKHBNHD::OCEPLKHBNHD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DJLJGPPLLLI(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_DJLJGPPLLLI(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DJLJGPPLLLI(&mut self, v: super::OCEPLKHBNHD::OCEPLKHBNHD) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DJLJGPPLLLI(&mut self) -> &mut super::OCEPLKHBNHD::OCEPLKHBNHD {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(super::OCEPLKHBNHD::OCEPLKHBNHD::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DJLJGPPLLLI(&mut self) -> super::OCEPLKHBNHD::OCEPLKHBNHD {
        if self.has_DJLJGPPLLLI() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OCEPLKHBNHD::OCEPLKHBNHD::new()
        }
    }

    // .ANONOHDDPLD ELAONLMKMLG = 1181;

    pub fn ELAONLMKMLG(&self) -> &super::ANONOHDDPLD::ANONOHDDPLD {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(ref v)) => v,
            _ => <super::ANONOHDDPLD::ANONOHDDPLD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ELAONLMKMLG(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_ELAONLMKMLG(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ELAONLMKMLG(&mut self, v: super::ANONOHDDPLD::ANONOHDDPLD) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ELAONLMKMLG(&mut self) -> &mut super::ANONOHDDPLD::ANONOHDDPLD {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(super::ANONOHDDPLD::ANONOHDDPLD::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ELAONLMKMLG(&mut self) -> super::ANONOHDDPLD::ANONOHDDPLD {
        if self.has_ELAONLMKMLG() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ANONOHDDPLD::ANONOHDDPLD::new()
        }
    }

    // .MFOLMDABICO BMJHNDKCAJD = 1738;

    pub fn BMJHNDKCAJD(&self) -> &super::MFOLMDABICO::MFOLMDABICO {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(ref v)) => v,
            _ => <super::MFOLMDABICO::MFOLMDABICO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BMJHNDKCAJD(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_BMJHNDKCAJD(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BMJHNDKCAJD(&mut self, v: super::MFOLMDABICO::MFOLMDABICO) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BMJHNDKCAJD(&mut self) -> &mut super::MFOLMDABICO::MFOLMDABICO {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(super::MFOLMDABICO::MFOLMDABICO::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BMJHNDKCAJD(&mut self) -> super::MFOLMDABICO::MFOLMDABICO {
        if self.has_BMJHNDKCAJD() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MFOLMDABICO::MFOLMDABICO::new()
        }
    }

    // .FLAOMFJKDEG DNDALJAILFA = 1315;

    pub fn DNDALJAILFA(&self) -> &super::FLAOMFJKDEG::FLAOMFJKDEG {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(ref v)) => v,
            _ => <super::FLAOMFJKDEG::FLAOMFJKDEG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DNDALJAILFA(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_DNDALJAILFA(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DNDALJAILFA(&mut self, v: super::FLAOMFJKDEG::FLAOMFJKDEG) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DNDALJAILFA(&mut self) -> &mut super::FLAOMFJKDEG::FLAOMFJKDEG {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(super::FLAOMFJKDEG::FLAOMFJKDEG::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DNDALJAILFA(&mut self) -> super::FLAOMFJKDEG::FLAOMFJKDEG {
        if self.has_DNDALJAILFA() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FLAOMFJKDEG::FLAOMFJKDEG::new()
        }
    }

    // .GIPALOPPJHG MPELIDEFNAE = 562;

    pub fn MPELIDEFNAE(&self) -> &super::GIPALOPPJHG::GIPALOPPJHG {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(ref v)) => v,
            _ => <super::GIPALOPPJHG::GIPALOPPJHG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MPELIDEFNAE(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_MPELIDEFNAE(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MPELIDEFNAE(&mut self, v: super::GIPALOPPJHG::GIPALOPPJHG) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MPELIDEFNAE(&mut self) -> &mut super::GIPALOPPJHG::GIPALOPPJHG {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(super::GIPALOPPJHG::GIPALOPPJHG::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MPELIDEFNAE(&mut self) -> super::GIPALOPPJHG::GIPALOPPJHG {
        if self.has_MPELIDEFNAE() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GIPALOPPJHG::GIPALOPPJHG::new()
        }
    }

    // .OMKEKLEIJFH ICJMLJEIDIE = 1484;

    pub fn ICJMLJEIDIE(&self) -> &super::OMKEKLEIJFH::OMKEKLEIJFH {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(ref v)) => v,
            _ => <super::OMKEKLEIJFH::OMKEKLEIJFH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ICJMLJEIDIE(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_ICJMLJEIDIE(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ICJMLJEIDIE(&mut self, v: super::OMKEKLEIJFH::OMKEKLEIJFH) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ICJMLJEIDIE(&mut self) -> &mut super::OMKEKLEIJFH::OMKEKLEIJFH {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(super::OMKEKLEIJFH::OMKEKLEIJFH::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ICJMLJEIDIE(&mut self) -> super::OMKEKLEIJFH::OMKEKLEIJFH {
        if self.has_ICJMLJEIDIE() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMKEKLEIJFH::OMKEKLEIJFH::new()
        }
    }

    // .MPDPCAMINOF HPAPOJMFOKH = 202;

    pub fn HPAPOJMFOKH(&self) -> &super::MPDPCAMINOF::MPDPCAMINOF {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(ref v)) => v,
            _ => <super::MPDPCAMINOF::MPDPCAMINOF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HPAPOJMFOKH(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_HPAPOJMFOKH(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HPAPOJMFOKH(&mut self, v: super::MPDPCAMINOF::MPDPCAMINOF) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HPAPOJMFOKH(&mut self) -> &mut super::MPDPCAMINOF::MPDPCAMINOF {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(super::MPDPCAMINOF::MPDPCAMINOF::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HPAPOJMFOKH(&mut self) -> super::MPDPCAMINOF::MPDPCAMINOF {
        if self.has_HPAPOJMFOKH() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MPDPCAMINOF::MPDPCAMINOF::new()
        }
    }

    // .NHIGENBGIBD AJEKLKMMECH = 245;

    pub fn AJEKLKMMECH(&self) -> &super::NHIGENBGIBD::NHIGENBGIBD {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(ref v)) => v,
            _ => <super::NHIGENBGIBD::NHIGENBGIBD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AJEKLKMMECH(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_AJEKLKMMECH(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AJEKLKMMECH(&mut self, v: super::NHIGENBGIBD::NHIGENBGIBD) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AJEKLKMMECH(&mut self) -> &mut super::NHIGENBGIBD::NHIGENBGIBD {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(super::NHIGENBGIBD::NHIGENBGIBD::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AJEKLKMMECH(&mut self) -> super::NHIGENBGIBD::NHIGENBGIBD {
        if self.has_AJEKLKMMECH() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NHIGENBGIBD::NHIGENBGIBD::new()
        }
    }

    // .FMLLCMPHMKH HNILFFKMKMI = 450;

    pub fn HNILFFKMKMI(&self) -> &super::FMLLCMPHMKH::FMLLCMPHMKH {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(ref v)) => v,
            _ => <super::FMLLCMPHMKH::FMLLCMPHMKH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HNILFFKMKMI(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
    }

    pub fn has_HNILFFKMKMI(&self) -> bool {
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HNILFFKMKMI(&mut self, v: super::FMLLCMPHMKH::FMLLCMPHMKH) {
        self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HNILFFKMKMI(&mut self) -> &mut super::FMLLCMPHMKH::FMLLCMPHMKH {
        if let ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(_)) = self.PCCOGDPNHHI {
        } else {
            self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(super::FMLLCMPHMKH::FMLLCMPHMKH::new()));
        }
        match self.PCCOGDPNHHI {
            ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HNILFFKMKMI(&mut self) -> super::FMLLCMPHMKH::FMLLCMPHMKH {
        if self.has_HNILFFKMKMI() {
            match self.PCCOGDPNHHI.take() {
                ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FMLLCMPHMKH::FMLLCMPHMKH::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DJCIBGLGPCN::DJCIBGLGPCN>(
            "IKNKGFJIHBC",
            CDMPMJNJBNH::has_IKNKGFJIHBC,
            CDMPMJNJBNH::IKNKGFJIHBC,
            CDMPMJNJBNH::mut_IKNKGFJIHBC,
            CDMPMJNJBNH::set_IKNKGFJIHBC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OCEPLKHBNHD::OCEPLKHBNHD>(
            "DJLJGPPLLLI",
            CDMPMJNJBNH::has_DJLJGPPLLLI,
            CDMPMJNJBNH::DJLJGPPLLLI,
            CDMPMJNJBNH::mut_DJLJGPPLLLI,
            CDMPMJNJBNH::set_DJLJGPPLLLI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ANONOHDDPLD::ANONOHDDPLD>(
            "ELAONLMKMLG",
            CDMPMJNJBNH::has_ELAONLMKMLG,
            CDMPMJNJBNH::ELAONLMKMLG,
            CDMPMJNJBNH::mut_ELAONLMKMLG,
            CDMPMJNJBNH::set_ELAONLMKMLG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MFOLMDABICO::MFOLMDABICO>(
            "BMJHNDKCAJD",
            CDMPMJNJBNH::has_BMJHNDKCAJD,
            CDMPMJNJBNH::BMJHNDKCAJD,
            CDMPMJNJBNH::mut_BMJHNDKCAJD,
            CDMPMJNJBNH::set_BMJHNDKCAJD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FLAOMFJKDEG::FLAOMFJKDEG>(
            "DNDALJAILFA",
            CDMPMJNJBNH::has_DNDALJAILFA,
            CDMPMJNJBNH::DNDALJAILFA,
            CDMPMJNJBNH::mut_DNDALJAILFA,
            CDMPMJNJBNH::set_DNDALJAILFA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GIPALOPPJHG::GIPALOPPJHG>(
            "MPELIDEFNAE",
            CDMPMJNJBNH::has_MPELIDEFNAE,
            CDMPMJNJBNH::MPELIDEFNAE,
            CDMPMJNJBNH::mut_MPELIDEFNAE,
            CDMPMJNJBNH::set_MPELIDEFNAE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMKEKLEIJFH::OMKEKLEIJFH>(
            "ICJMLJEIDIE",
            CDMPMJNJBNH::has_ICJMLJEIDIE,
            CDMPMJNJBNH::ICJMLJEIDIE,
            CDMPMJNJBNH::mut_ICJMLJEIDIE,
            CDMPMJNJBNH::set_ICJMLJEIDIE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MPDPCAMINOF::MPDPCAMINOF>(
            "HPAPOJMFOKH",
            CDMPMJNJBNH::has_HPAPOJMFOKH,
            CDMPMJNJBNH::HPAPOJMFOKH,
            CDMPMJNJBNH::mut_HPAPOJMFOKH,
            CDMPMJNJBNH::set_HPAPOJMFOKH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NHIGENBGIBD::NHIGENBGIBD>(
            "AJEKLKMMECH",
            CDMPMJNJBNH::has_AJEKLKMMECH,
            CDMPMJNJBNH::AJEKLKMMECH,
            CDMPMJNJBNH::mut_AJEKLKMMECH,
            CDMPMJNJBNH::set_AJEKLKMMECH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FMLLCMPHMKH::FMLLCMPHMKH>(
            "HNILFFKMKMI",
            CDMPMJNJBNH::has_HNILFFKMKMI,
            CDMPMJNJBNH::HNILFFKMKMI,
            CDMPMJNJBNH::mut_HNILFFKMKMI,
            CDMPMJNJBNH::set_HNILFFKMKMI,
        ));
        oneofs.push(cdmpmjnjbnh::PCCOGDPNHHI::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDMPMJNJBNH>(
            "CDMPMJNJBNH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDMPMJNJBNH {
    const NAME: &'static str = "CDMPMJNJBNH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10098 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(is.read_message()?));
                },
                2290 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(is.read_message()?));
                },
                9450 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(is.read_message()?));
                },
                13906 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(is.read_message()?));
                },
                10522 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(is.read_message()?));
                },
                4498 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(is.read_message()?));
                },
                11874 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(is.read_message()?));
                },
                1618 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(is.read_message()?));
                },
                1962 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(is.read_message()?));
                },
                3602 => {
                    self.PCCOGDPNHHI = ::std::option::Option::Some(cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.PCCOGDPNHHI {
            match v {
                &cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.PCCOGDPNHHI {
            match v {
                &cdmpmjnjbnh::PCCOGDPNHHI::IKNKGFJIHBC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1262, v, os)?;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::DJLJGPPLLLI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(286, v, os)?;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::ELAONLMKMLG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1181, v, os)?;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::BMJHNDKCAJD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1738, v, os)?;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::DNDALJAILFA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1315, v, os)?;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::MPELIDEFNAE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(562, v, os)?;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::ICJMLJEIDIE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1484, v, os)?;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::HPAPOJMFOKH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(202, v, os)?;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::AJEKLKMMECH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(245, v, os)?;
                },
                &cdmpmjnjbnh::PCCOGDPNHHI::HNILFFKMKMI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(450, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDMPMJNJBNH {
        CDMPMJNJBNH::new()
    }

    fn clear(&mut self) {
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.PCCOGDPNHHI = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDMPMJNJBNH {
        static instance: CDMPMJNJBNH = CDMPMJNJBNH {
            PCCOGDPNHHI: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDMPMJNJBNH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDMPMJNJBNH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDMPMJNJBNH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDMPMJNJBNH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CDMPMJNJBNH`
pub mod cdmpmjnjbnh {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:CDMPMJNJBNH.PCCOGDPNHHI)
    pub enum PCCOGDPNHHI {
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.IKNKGFJIHBC)
        IKNKGFJIHBC(super::super::DJCIBGLGPCN::DJCIBGLGPCN),
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.DJLJGPPLLLI)
        DJLJGPPLLLI(super::super::OCEPLKHBNHD::OCEPLKHBNHD),
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.ELAONLMKMLG)
        ELAONLMKMLG(super::super::ANONOHDDPLD::ANONOHDDPLD),
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.BMJHNDKCAJD)
        BMJHNDKCAJD(super::super::MFOLMDABICO::MFOLMDABICO),
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.DNDALJAILFA)
        DNDALJAILFA(super::super::FLAOMFJKDEG::FLAOMFJKDEG),
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.MPELIDEFNAE)
        MPELIDEFNAE(super::super::GIPALOPPJHG::GIPALOPPJHG),
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.ICJMLJEIDIE)
        ICJMLJEIDIE(super::super::OMKEKLEIJFH::OMKEKLEIJFH),
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.HPAPOJMFOKH)
        HPAPOJMFOKH(super::super::MPDPCAMINOF::MPDPCAMINOF),
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.AJEKLKMMECH)
        AJEKLKMMECH(super::super::NHIGENBGIBD::NHIGENBGIBD),
        // @@protoc_insertion_point(oneof_field:CDMPMJNJBNH.HNILFFKMKMI)
        HNILFFKMKMI(super::super::FMLLCMPHMKH::FMLLCMPHMKH),
    }

    impl ::protobuf::Oneof for PCCOGDPNHHI {
    }

    impl ::protobuf::OneofFull for PCCOGDPNHHI {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CDMPMJNJBNH as ::protobuf::MessageFull>::descriptor().oneof_by_name("PCCOGDPNHHI").unwrap()).clone()
        }
    }

    impl PCCOGDPNHHI {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<PCCOGDPNHHI>("PCCOGDPNHHI")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CDMPMJNJBNH.proto\x1a\x11ANONOHDDPLD.proto\x1a\x11DJCIBGLGPCN.prot\
    o\x1a\x11FLAOMFJKDEG.proto\x1a\x11FMLLCMPHMKH.proto\x1a\x11GIPALOPPJHG.p\
    roto\x1a\x11MFOLMDABICO.proto\x1a\x11MPDPCAMINOF.proto\x1a\x11NHIGENBGIB\
    D.proto\x1a\x11OCEPLKHBNHD.proto\x1a\x11OMKEKLEIJFH.proto\"\x9a\x04\n\
    \x0bCDMPMJNJBNH\x121\n\x0bIKNKGFJIHBC\x18\xee\t\x20\x01(\x0b2\x0c.DJCIBG\
    LGPCNH\0R\x0bIKNKGFJIHBC\x121\n\x0bDJLJGPPLLLI\x18\x9e\x02\x20\x01(\x0b2\
    \x0c.OCEPLKHBNHDH\0R\x0bDJLJGPPLLLI\x121\n\x0bELAONLMKMLG\x18\x9d\t\x20\
    \x01(\x0b2\x0c.ANONOHDDPLDH\0R\x0bELAONLMKMLG\x121\n\x0bBMJHNDKCAJD\x18\
    \xca\r\x20\x01(\x0b2\x0c.MFOLMDABICOH\0R\x0bBMJHNDKCAJD\x121\n\x0bDNDALJ\
    AILFA\x18\xa3\n\x20\x01(\x0b2\x0c.FLAOMFJKDEGH\0R\x0bDNDALJAILFA\x121\n\
    \x0bMPELIDEFNAE\x18\xb2\x04\x20\x01(\x0b2\x0c.GIPALOPPJHGH\0R\x0bMPELIDE\
    FNAE\x121\n\x0bICJMLJEIDIE\x18\xcc\x0b\x20\x01(\x0b2\x0c.OMKEKLEIJFHH\0R\
    \x0bICJMLJEIDIE\x121\n\x0bHPAPOJMFOKH\x18\xca\x01\x20\x01(\x0b2\x0c.MPDP\
    CAMINOFH\0R\x0bHPAPOJMFOKH\x121\n\x0bAJEKLKMMECH\x18\xf5\x01\x20\x01(\
    \x0b2\x0c.NHIGENBGIBDH\0R\x0bAJEKLKMMECH\x121\n\x0bHNILFFKMKMI\x18\xc2\
    \x03\x20\x01(\x0b2\x0c.FMLLCMPHMKHH\0R\x0bHNILFFKMKMIB\r\n\x0bPCCOGDPNHH\
    Ib\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::ANONOHDDPLD::file_descriptor().clone());
            deps.push(super::DJCIBGLGPCN::file_descriptor().clone());
            deps.push(super::FLAOMFJKDEG::file_descriptor().clone());
            deps.push(super::FMLLCMPHMKH::file_descriptor().clone());
            deps.push(super::GIPALOPPJHG::file_descriptor().clone());
            deps.push(super::MFOLMDABICO::file_descriptor().clone());
            deps.push(super::MPDPCAMINOF::file_descriptor().clone());
            deps.push(super::NHIGENBGIBD::file_descriptor().clone());
            deps.push(super::OCEPLKHBNHD::file_descriptor().clone());
            deps.push(super::OMKEKLEIJFH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CDMPMJNJBNH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
