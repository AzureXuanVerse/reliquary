// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JGBJBDGOHGP.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:JGBJBDGOHGP)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JGBJBDGOHGP {
    // message fields
    // @@protoc_insertion_point(field:JGBJBDGOHGP.FHOPJNKMNPB)
    pub FHOPJNKMNPB: u32,
    // message oneof groups
    pub PEFDONGEFMA: ::std::option::Option<jgbjbdgohgp::PEFDONGEFMA>,
    // special fields
    // @@protoc_insertion_point(special_field:JGBJBDGOHGP.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JGBJBDGOHGP {
    fn default() -> &'a JGBJBDGOHGP {
        <JGBJBDGOHGP as ::protobuf::Message>::default_instance()
    }
}

impl JGBJBDGOHGP {
    pub fn new() -> JGBJBDGOHGP {
        ::std::default::Default::default()
    }

    // .AEGLHHPPMLF IIPMKIDINND = 674;

    pub fn IIPMKIDINND(&self) -> &super::AEGLHHPPMLF::AEGLHHPPMLF {
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(ref v)) => v,
            _ => <super::AEGLHHPPMLF::AEGLHHPPMLF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IIPMKIDINND(&mut self) {
        self.PEFDONGEFMA = ::std::option::Option::None;
    }

    pub fn has_IIPMKIDINND(&self) -> bool {
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IIPMKIDINND(&mut self, v: super::AEGLHHPPMLF::AEGLHHPPMLF) {
        self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IIPMKIDINND(&mut self) -> &mut super::AEGLHHPPMLF::AEGLHHPPMLF {
        if let ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(_)) = self.PEFDONGEFMA {
        } else {
            self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(super::AEGLHHPPMLF::AEGLHHPPMLF::new()));
        }
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IIPMKIDINND(&mut self) -> super::AEGLHHPPMLF::AEGLHHPPMLF {
        if self.has_IIPMKIDINND() {
            match self.PEFDONGEFMA.take() {
                ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AEGLHHPPMLF::AEGLHHPPMLF::new()
        }
    }

    // .NNNIBNPEEJN ACDNKNBFLIN = 41;

    pub fn ACDNKNBFLIN(&self) -> &super::NNNIBNPEEJN::NNNIBNPEEJN {
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(ref v)) => v,
            _ => <super::NNNIBNPEEJN::NNNIBNPEEJN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ACDNKNBFLIN(&mut self) {
        self.PEFDONGEFMA = ::std::option::Option::None;
    }

    pub fn has_ACDNKNBFLIN(&self) -> bool {
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ACDNKNBFLIN(&mut self, v: super::NNNIBNPEEJN::NNNIBNPEEJN) {
        self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ACDNKNBFLIN(&mut self) -> &mut super::NNNIBNPEEJN::NNNIBNPEEJN {
        if let ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(_)) = self.PEFDONGEFMA {
        } else {
            self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(super::NNNIBNPEEJN::NNNIBNPEEJN::new()));
        }
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ACDNKNBFLIN(&mut self) -> super::NNNIBNPEEJN::NNNIBNPEEJN {
        if self.has_ACDNKNBFLIN() {
            match self.PEFDONGEFMA.take() {
                ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NNNIBNPEEJN::NNNIBNPEEJN::new()
        }
    }

    // .IIOIOMAIOAG JOMNGPJKOKJ = 140;

    pub fn JOMNGPJKOKJ(&self) -> &super::IIOIOMAIOAG::IIOIOMAIOAG {
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(ref v)) => v,
            _ => <super::IIOIOMAIOAG::IIOIOMAIOAG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JOMNGPJKOKJ(&mut self) {
        self.PEFDONGEFMA = ::std::option::Option::None;
    }

    pub fn has_JOMNGPJKOKJ(&self) -> bool {
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JOMNGPJKOKJ(&mut self, v: super::IIOIOMAIOAG::IIOIOMAIOAG) {
        self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JOMNGPJKOKJ(&mut self) -> &mut super::IIOIOMAIOAG::IIOIOMAIOAG {
        if let ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(_)) = self.PEFDONGEFMA {
        } else {
            self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(super::IIOIOMAIOAG::IIOIOMAIOAG::new()));
        }
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JOMNGPJKOKJ(&mut self) -> super::IIOIOMAIOAG::IIOIOMAIOAG {
        if self.has_JOMNGPJKOKJ() {
            match self.PEFDONGEFMA.take() {
                ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IIOIOMAIOAG::IIOIOMAIOAG::new()
        }
    }

    // .MNFFJHFPKPJ IKGAJBJEJMA = 124;

    pub fn IKGAJBJEJMA(&self) -> &super::MNFFJHFPKPJ::MNFFJHFPKPJ {
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(ref v)) => v,
            _ => <super::MNFFJHFPKPJ::MNFFJHFPKPJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IKGAJBJEJMA(&mut self) {
        self.PEFDONGEFMA = ::std::option::Option::None;
    }

    pub fn has_IKGAJBJEJMA(&self) -> bool {
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IKGAJBJEJMA(&mut self, v: super::MNFFJHFPKPJ::MNFFJHFPKPJ) {
        self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IKGAJBJEJMA(&mut self) -> &mut super::MNFFJHFPKPJ::MNFFJHFPKPJ {
        if let ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(_)) = self.PEFDONGEFMA {
        } else {
            self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(super::MNFFJHFPKPJ::MNFFJHFPKPJ::new()));
        }
        match self.PEFDONGEFMA {
            ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IKGAJBJEJMA(&mut self) -> super::MNFFJHFPKPJ::MNFFJHFPKPJ {
        if self.has_IKGAJBJEJMA() {
            match self.PEFDONGEFMA.take() {
                ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MNFFJHFPKPJ::MNFFJHFPKPJ::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FHOPJNKMNPB",
            |m: &JGBJBDGOHGP| { &m.FHOPJNKMNPB },
            |m: &mut JGBJBDGOHGP| { &mut m.FHOPJNKMNPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AEGLHHPPMLF::AEGLHHPPMLF>(
            "IIPMKIDINND",
            JGBJBDGOHGP::has_IIPMKIDINND,
            JGBJBDGOHGP::IIPMKIDINND,
            JGBJBDGOHGP::mut_IIPMKIDINND,
            JGBJBDGOHGP::set_IIPMKIDINND,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NNNIBNPEEJN::NNNIBNPEEJN>(
            "ACDNKNBFLIN",
            JGBJBDGOHGP::has_ACDNKNBFLIN,
            JGBJBDGOHGP::ACDNKNBFLIN,
            JGBJBDGOHGP::mut_ACDNKNBFLIN,
            JGBJBDGOHGP::set_ACDNKNBFLIN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IIOIOMAIOAG::IIOIOMAIOAG>(
            "JOMNGPJKOKJ",
            JGBJBDGOHGP::has_JOMNGPJKOKJ,
            JGBJBDGOHGP::JOMNGPJKOKJ,
            JGBJBDGOHGP::mut_JOMNGPJKOKJ,
            JGBJBDGOHGP::set_JOMNGPJKOKJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MNFFJHFPKPJ::MNFFJHFPKPJ>(
            "IKGAJBJEJMA",
            JGBJBDGOHGP::has_IKGAJBJEJMA,
            JGBJBDGOHGP::IKGAJBJEJMA,
            JGBJBDGOHGP::mut_IKGAJBJEJMA,
            JGBJBDGOHGP::set_IKGAJBJEJMA,
        ));
        oneofs.push(jgbjbdgohgp::PEFDONGEFMA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JGBJBDGOHGP>(
            "JGBJBDGOHGP",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JGBJBDGOHGP {
    const NAME: &'static str = "JGBJBDGOHGP";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.FHOPJNKMNPB = is.read_uint32()?;
                },
                5394 => {
                    self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(is.read_message()?));
                },
                330 => {
                    self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(is.read_message()?));
                },
                1122 => {
                    self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(is.read_message()?));
                },
                994 => {
                    self.PEFDONGEFMA = ::std::option::Option::Some(jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.FHOPJNKMNPB != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.FHOPJNKMNPB);
        }
        if let ::std::option::Option::Some(ref v) = self.PEFDONGEFMA {
            match v {
                &jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.FHOPJNKMNPB != 0 {
            os.write_uint32(15, self.FHOPJNKMNPB)?;
        }
        if let ::std::option::Option::Some(ref v) = self.PEFDONGEFMA {
            match v {
                &jgbjbdgohgp::PEFDONGEFMA::IIPMKIDINND(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(674, v, os)?;
                },
                &jgbjbdgohgp::PEFDONGEFMA::ACDNKNBFLIN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(41, v, os)?;
                },
                &jgbjbdgohgp::PEFDONGEFMA::JOMNGPJKOKJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(140, v, os)?;
                },
                &jgbjbdgohgp::PEFDONGEFMA::IKGAJBJEJMA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(124, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JGBJBDGOHGP {
        JGBJBDGOHGP::new()
    }

    fn clear(&mut self) {
        self.FHOPJNKMNPB = 0;
        self.PEFDONGEFMA = ::std::option::Option::None;
        self.PEFDONGEFMA = ::std::option::Option::None;
        self.PEFDONGEFMA = ::std::option::Option::None;
        self.PEFDONGEFMA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JGBJBDGOHGP {
        static instance: JGBJBDGOHGP = JGBJBDGOHGP {
            FHOPJNKMNPB: 0,
            PEFDONGEFMA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JGBJBDGOHGP {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JGBJBDGOHGP").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JGBJBDGOHGP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JGBJBDGOHGP {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `JGBJBDGOHGP`
pub mod jgbjbdgohgp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:JGBJBDGOHGP.PEFDONGEFMA)
    pub enum PEFDONGEFMA {
        // @@protoc_insertion_point(oneof_field:JGBJBDGOHGP.IIPMKIDINND)
        IIPMKIDINND(super::super::AEGLHHPPMLF::AEGLHHPPMLF),
        // @@protoc_insertion_point(oneof_field:JGBJBDGOHGP.ACDNKNBFLIN)
        ACDNKNBFLIN(super::super::NNNIBNPEEJN::NNNIBNPEEJN),
        // @@protoc_insertion_point(oneof_field:JGBJBDGOHGP.JOMNGPJKOKJ)
        JOMNGPJKOKJ(super::super::IIOIOMAIOAG::IIOIOMAIOAG),
        // @@protoc_insertion_point(oneof_field:JGBJBDGOHGP.IKGAJBJEJMA)
        IKGAJBJEJMA(super::super::MNFFJHFPKPJ::MNFFJHFPKPJ),
    }

    impl ::protobuf::Oneof for PEFDONGEFMA {
    }

    impl ::protobuf::OneofFull for PEFDONGEFMA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::JGBJBDGOHGP as ::protobuf::MessageFull>::descriptor().oneof_by_name("PEFDONGEFMA").unwrap()).clone()
        }
    }

    impl PEFDONGEFMA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<PEFDONGEFMA>("PEFDONGEFMA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JGBJBDGOHGP.proto\x1a\x11AEGLHHPPMLF.proto\x1a\x11IIOIOMAIOAG.prot\
    o\x1a\x11MNFFJHFPKPJ.proto\x1a\x11NNNIBNPEEJN.proto\"\x88\x02\n\x0bJGBJB\
    DGOHGP\x12\x20\n\x0bFHOPJNKMNPB\x18\x0f\x20\x01(\rR\x0bFHOPJNKMNPB\x121\
    \n\x0bIIPMKIDINND\x18\xa2\x05\x20\x01(\x0b2\x0c.AEGLHHPPMLFH\0R\x0bIIPMK\
    IDINND\x120\n\x0bACDNKNBFLIN\x18)\x20\x01(\x0b2\x0c.NNNIBNPEEJNH\0R\x0bA\
    CDNKNBFLIN\x121\n\x0bJOMNGPJKOKJ\x18\x8c\x01\x20\x01(\x0b2\x0c.IIOIOMAIO\
    AGH\0R\x0bJOMNGPJKOKJ\x120\n\x0bIKGAJBJEJMA\x18|\x20\x01(\x0b2\x0c.MNFFJ\
    HFPKPJH\0R\x0bIKGAJBJEJMAB\r\n\x0bPEFDONGEFMAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::AEGLHHPPMLF::file_descriptor().clone());
            deps.push(super::IIOIOMAIOAG::file_descriptor().clone());
            deps.push(super::MNFFJHFPKPJ::file_descriptor().clone());
            deps.push(super::NNNIBNPEEJN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JGBJBDGOHGP::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
