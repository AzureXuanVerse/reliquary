// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EJJBPHADAOC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EJJBPHADAOC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EJJBPHADAOC {
    // message fields
    // @@protoc_insertion_point(field:EJJBPHADAOC.LMFHNELKFOC)
    pub LMFHNELKFOC: u32,
    // message oneof groups
    pub IPNFCDAMBDA: ::std::option::Option<ejjbphadaoc::IPNFCDAMBDA>,
    // special fields
    // @@protoc_insertion_point(special_field:EJJBPHADAOC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EJJBPHADAOC {
    fn default() -> &'a EJJBPHADAOC {
        <EJJBPHADAOC as ::protobuf::Message>::default_instance()
    }
}

impl EJJBPHADAOC {
    pub fn new() -> EJJBPHADAOC {
        ::std::default::Default::default()
    }

    // .EEIADCHLFNB GFLJGKBPCGB = 1263;

    pub fn GFLJGKBPCGB(&self) -> &super::EEIADCHLFNB::EEIADCHLFNB {
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(ref v)) => v,
            _ => <super::EEIADCHLFNB::EEIADCHLFNB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GFLJGKBPCGB(&mut self) {
        self.IPNFCDAMBDA = ::std::option::Option::None;
    }

    pub fn has_GFLJGKBPCGB(&self) -> bool {
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GFLJGKBPCGB(&mut self, v: super::EEIADCHLFNB::EEIADCHLFNB) {
        self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GFLJGKBPCGB(&mut self) -> &mut super::EEIADCHLFNB::EEIADCHLFNB {
        if let ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(_)) = self.IPNFCDAMBDA {
        } else {
            self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(super::EEIADCHLFNB::EEIADCHLFNB::new()));
        }
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GFLJGKBPCGB(&mut self) -> super::EEIADCHLFNB::EEIADCHLFNB {
        if self.has_GFLJGKBPCGB() {
            match self.IPNFCDAMBDA.take() {
                ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EEIADCHLFNB::EEIADCHLFNB::new()
        }
    }

    // .BOMJDHMAAJM HAKLMMJEHPF = 1647;

    pub fn HAKLMMJEHPF(&self) -> &super::BOMJDHMAAJM::BOMJDHMAAJM {
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(ref v)) => v,
            _ => <super::BOMJDHMAAJM::BOMJDHMAAJM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HAKLMMJEHPF(&mut self) {
        self.IPNFCDAMBDA = ::std::option::Option::None;
    }

    pub fn has_HAKLMMJEHPF(&self) -> bool {
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HAKLMMJEHPF(&mut self, v: super::BOMJDHMAAJM::BOMJDHMAAJM) {
        self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HAKLMMJEHPF(&mut self) -> &mut super::BOMJDHMAAJM::BOMJDHMAAJM {
        if let ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(_)) = self.IPNFCDAMBDA {
        } else {
            self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(super::BOMJDHMAAJM::BOMJDHMAAJM::new()));
        }
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HAKLMMJEHPF(&mut self) -> super::BOMJDHMAAJM::BOMJDHMAAJM {
        if self.has_HAKLMMJEHPF() {
            match self.IPNFCDAMBDA.take() {
                ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BOMJDHMAAJM::BOMJDHMAAJM::new()
        }
    }

    // .IHKAJFKLDBB JJFGCDEHMPF = 410;

    pub fn JJFGCDEHMPF(&self) -> &super::IHKAJFKLDBB::IHKAJFKLDBB {
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(ref v)) => v,
            _ => <super::IHKAJFKLDBB::IHKAJFKLDBB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JJFGCDEHMPF(&mut self) {
        self.IPNFCDAMBDA = ::std::option::Option::None;
    }

    pub fn has_JJFGCDEHMPF(&self) -> bool {
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JJFGCDEHMPF(&mut self, v: super::IHKAJFKLDBB::IHKAJFKLDBB) {
        self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JJFGCDEHMPF(&mut self) -> &mut super::IHKAJFKLDBB::IHKAJFKLDBB {
        if let ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(_)) = self.IPNFCDAMBDA {
        } else {
            self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(super::IHKAJFKLDBB::IHKAJFKLDBB::new()));
        }
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JJFGCDEHMPF(&mut self) -> super::IHKAJFKLDBB::IHKAJFKLDBB {
        if self.has_JJFGCDEHMPF() {
            match self.IPNFCDAMBDA.take() {
                ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IHKAJFKLDBB::IHKAJFKLDBB::new()
        }
    }

    // .BNOCKKLBIAB EPPNHJCNFCI = 543;

    pub fn EPPNHJCNFCI(&self) -> &super::BNOCKKLBIAB::BNOCKKLBIAB {
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(ref v)) => v,
            _ => <super::BNOCKKLBIAB::BNOCKKLBIAB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EPPNHJCNFCI(&mut self) {
        self.IPNFCDAMBDA = ::std::option::Option::None;
    }

    pub fn has_EPPNHJCNFCI(&self) -> bool {
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EPPNHJCNFCI(&mut self, v: super::BNOCKKLBIAB::BNOCKKLBIAB) {
        self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EPPNHJCNFCI(&mut self) -> &mut super::BNOCKKLBIAB::BNOCKKLBIAB {
        if let ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(_)) = self.IPNFCDAMBDA {
        } else {
            self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(super::BNOCKKLBIAB::BNOCKKLBIAB::new()));
        }
        match self.IPNFCDAMBDA {
            ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EPPNHJCNFCI(&mut self) -> super::BNOCKKLBIAB::BNOCKKLBIAB {
        if self.has_EPPNHJCNFCI() {
            match self.IPNFCDAMBDA.take() {
                ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BNOCKKLBIAB::BNOCKKLBIAB::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LMFHNELKFOC",
            |m: &EJJBPHADAOC| { &m.LMFHNELKFOC },
            |m: &mut EJJBPHADAOC| { &mut m.LMFHNELKFOC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EEIADCHLFNB::EEIADCHLFNB>(
            "GFLJGKBPCGB",
            EJJBPHADAOC::has_GFLJGKBPCGB,
            EJJBPHADAOC::GFLJGKBPCGB,
            EJJBPHADAOC::mut_GFLJGKBPCGB,
            EJJBPHADAOC::set_GFLJGKBPCGB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BOMJDHMAAJM::BOMJDHMAAJM>(
            "HAKLMMJEHPF",
            EJJBPHADAOC::has_HAKLMMJEHPF,
            EJJBPHADAOC::HAKLMMJEHPF,
            EJJBPHADAOC::mut_HAKLMMJEHPF,
            EJJBPHADAOC::set_HAKLMMJEHPF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IHKAJFKLDBB::IHKAJFKLDBB>(
            "JJFGCDEHMPF",
            EJJBPHADAOC::has_JJFGCDEHMPF,
            EJJBPHADAOC::JJFGCDEHMPF,
            EJJBPHADAOC::mut_JJFGCDEHMPF,
            EJJBPHADAOC::set_JJFGCDEHMPF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BNOCKKLBIAB::BNOCKKLBIAB>(
            "EPPNHJCNFCI",
            EJJBPHADAOC::has_EPPNHJCNFCI,
            EJJBPHADAOC::EPPNHJCNFCI,
            EJJBPHADAOC::mut_EPPNHJCNFCI,
            EJJBPHADAOC::set_EPPNHJCNFCI,
        ));
        oneofs.push(ejjbphadaoc::IPNFCDAMBDA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EJJBPHADAOC>(
            "EJJBPHADAOC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EJJBPHADAOC {
    const NAME: &'static str = "EJJBPHADAOC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.LMFHNELKFOC = is.read_uint32()?;
                },
                10106 => {
                    self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(is.read_message()?));
                },
                13178 => {
                    self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(is.read_message()?));
                },
                3282 => {
                    self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(is.read_message()?));
                },
                4346 => {
                    self.IPNFCDAMBDA = ::std::option::Option::Some(ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.LMFHNELKFOC != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.LMFHNELKFOC);
        }
        if let ::std::option::Option::Some(ref v) = self.IPNFCDAMBDA {
            match v {
                &ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.LMFHNELKFOC != 0 {
            os.write_uint32(7, self.LMFHNELKFOC)?;
        }
        if let ::std::option::Option::Some(ref v) = self.IPNFCDAMBDA {
            match v {
                &ejjbphadaoc::IPNFCDAMBDA::GFLJGKBPCGB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1263, v, os)?;
                },
                &ejjbphadaoc::IPNFCDAMBDA::HAKLMMJEHPF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1647, v, os)?;
                },
                &ejjbphadaoc::IPNFCDAMBDA::JJFGCDEHMPF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(410, v, os)?;
                },
                &ejjbphadaoc::IPNFCDAMBDA::EPPNHJCNFCI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(543, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EJJBPHADAOC {
        EJJBPHADAOC::new()
    }

    fn clear(&mut self) {
        self.LMFHNELKFOC = 0;
        self.IPNFCDAMBDA = ::std::option::Option::None;
        self.IPNFCDAMBDA = ::std::option::Option::None;
        self.IPNFCDAMBDA = ::std::option::Option::None;
        self.IPNFCDAMBDA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EJJBPHADAOC {
        static instance: EJJBPHADAOC = EJJBPHADAOC {
            LMFHNELKFOC: 0,
            IPNFCDAMBDA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EJJBPHADAOC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EJJBPHADAOC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EJJBPHADAOC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EJJBPHADAOC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EJJBPHADAOC`
pub mod ejjbphadaoc {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:EJJBPHADAOC.IPNFCDAMBDA)
    pub enum IPNFCDAMBDA {
        // @@protoc_insertion_point(oneof_field:EJJBPHADAOC.GFLJGKBPCGB)
        GFLJGKBPCGB(super::super::EEIADCHLFNB::EEIADCHLFNB),
        // @@protoc_insertion_point(oneof_field:EJJBPHADAOC.HAKLMMJEHPF)
        HAKLMMJEHPF(super::super::BOMJDHMAAJM::BOMJDHMAAJM),
        // @@protoc_insertion_point(oneof_field:EJJBPHADAOC.JJFGCDEHMPF)
        JJFGCDEHMPF(super::super::IHKAJFKLDBB::IHKAJFKLDBB),
        // @@protoc_insertion_point(oneof_field:EJJBPHADAOC.EPPNHJCNFCI)
        EPPNHJCNFCI(super::super::BNOCKKLBIAB::BNOCKKLBIAB),
    }

    impl ::protobuf::Oneof for IPNFCDAMBDA {
    }

    impl ::protobuf::OneofFull for IPNFCDAMBDA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EJJBPHADAOC as ::protobuf::MessageFull>::descriptor().oneof_by_name("IPNFCDAMBDA").unwrap()).clone()
        }
    }

    impl IPNFCDAMBDA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<IPNFCDAMBDA>("IPNFCDAMBDA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EJJBPHADAOC.proto\x1a\x11BNOCKKLBIAB.proto\x1a\x11BOMJDHMAAJM.prot\
    o\x1a\x11EEIADCHLFNB.proto\x1a\x11IHKAJFKLDBB.proto\"\x8a\x02\n\x0bEJJBP\
    HADAOC\x12\x20\n\x0bLMFHNELKFOC\x18\x07\x20\x01(\rR\x0bLMFHNELKFOC\x121\
    \n\x0bGFLJGKBPCGB\x18\xef\t\x20\x01(\x0b2\x0c.EEIADCHLFNBH\0R\x0bGFLJGKB\
    PCGB\x121\n\x0bHAKLMMJEHPF\x18\xef\x0c\x20\x01(\x0b2\x0c.BOMJDHMAAJMH\0R\
    \x0bHAKLMMJEHPF\x121\n\x0bJJFGCDEHMPF\x18\x9a\x03\x20\x01(\x0b2\x0c.IHKA\
    JFKLDBBH\0R\x0bJJFGCDEHMPF\x121\n\x0bEPPNHJCNFCI\x18\x9f\x04\x20\x01(\
    \x0b2\x0c.BNOCKKLBIABH\0R\x0bEPPNHJCNFCIB\r\n\x0bIPNFCDAMBDAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::BNOCKKLBIAB::file_descriptor().clone());
            deps.push(super::BOMJDHMAAJM::file_descriptor().clone());
            deps.push(super::EEIADCHLFNB::file_descriptor().clone());
            deps.push(super::IHKAJFKLDBB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EJJBPHADAOC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
