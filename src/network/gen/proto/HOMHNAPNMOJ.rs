// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HOMHNAPNMOJ.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HOMHNAPNMOJ)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HOMHNAPNMOJ {
    // message fields
    // @@protoc_insertion_point(field:HOMHNAPNMOJ.DHPDHGHAEOP)
    pub DHPDHGHAEOP: u32,
    // @@protoc_insertion_point(field:HOMHNAPNMOJ.PNPMEACMBPP)
    pub PNPMEACMBPP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HOMHNAPNMOJ.PEPHONIOECA)
    pub PEPHONIOECA: u32,
    // @@protoc_insertion_point(field:HOMHNAPNMOJ.JMDADAHHGDH)
    pub JMDADAHHGDH: f64,
    // @@protoc_insertion_point(field:HOMHNAPNMOJ.NPEAKNHDHHH)
    pub NPEAKNHDHHH: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HOMHNAPNMOJ.BLDNDNLLKCH)
    pub BLDNDNLLKCH: i32,
    // @@protoc_insertion_point(field:HOMHNAPNMOJ.PFPGCCMKHIJ)
    pub PFPGCCMKHIJ: f64,
    // @@protoc_insertion_point(field:HOMHNAPNMOJ.MDCMIDKJLEL)
    pub MDCMIDKJLEL: u32,
    // @@protoc_insertion_point(field:HOMHNAPNMOJ.IJOLEKJFLGF)
    pub IJOLEKJFLGF: u32,
    // special fields
    // @@protoc_insertion_point(special_field:HOMHNAPNMOJ.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HOMHNAPNMOJ {
    fn default() -> &'a HOMHNAPNMOJ {
        <HOMHNAPNMOJ as ::protobuf::Message>::default_instance()
    }
}

impl HOMHNAPNMOJ {
    pub fn new() -> HOMHNAPNMOJ {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DHPDHGHAEOP",
            |m: &HOMHNAPNMOJ| { &m.DHPDHGHAEOP },
            |m: &mut HOMHNAPNMOJ| { &mut m.DHPDHGHAEOP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PNPMEACMBPP",
            |m: &HOMHNAPNMOJ| { &m.PNPMEACMBPP },
            |m: &mut HOMHNAPNMOJ| { &mut m.PNPMEACMBPP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PEPHONIOECA",
            |m: &HOMHNAPNMOJ| { &m.PEPHONIOECA },
            |m: &mut HOMHNAPNMOJ| { &mut m.PEPHONIOECA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JMDADAHHGDH",
            |m: &HOMHNAPNMOJ| { &m.JMDADAHHGDH },
            |m: &mut HOMHNAPNMOJ| { &mut m.JMDADAHHGDH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NPEAKNHDHHH",
            |m: &HOMHNAPNMOJ| { &m.NPEAKNHDHHH },
            |m: &mut HOMHNAPNMOJ| { &mut m.NPEAKNHDHHH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BLDNDNLLKCH",
            |m: &HOMHNAPNMOJ| { &m.BLDNDNLLKCH },
            |m: &mut HOMHNAPNMOJ| { &mut m.BLDNDNLLKCH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PFPGCCMKHIJ",
            |m: &HOMHNAPNMOJ| { &m.PFPGCCMKHIJ },
            |m: &mut HOMHNAPNMOJ| { &mut m.PFPGCCMKHIJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MDCMIDKJLEL",
            |m: &HOMHNAPNMOJ| { &m.MDCMIDKJLEL },
            |m: &mut HOMHNAPNMOJ| { &mut m.MDCMIDKJLEL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IJOLEKJFLGF",
            |m: &HOMHNAPNMOJ| { &m.IJOLEKJFLGF },
            |m: &mut HOMHNAPNMOJ| { &mut m.IJOLEKJFLGF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HOMHNAPNMOJ>(
            "HOMHNAPNMOJ",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HOMHNAPNMOJ {
    const NAME: &'static str = "HOMHNAPNMOJ";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.DHPDHGHAEOP = is.read_uint32()?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.PNPMEACMBPP)?;
                },
                16 => {
                    self.PNPMEACMBPP.push(is.read_uint32()?);
                },
                24 => {
                    self.PEPHONIOECA = is.read_uint32()?;
                },
                33 => {
                    self.JMDADAHHGDH = is.read_double()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.NPEAKNHDHHH)?;
                },
                40 => {
                    self.NPEAKNHDHHH.push(is.read_uint32()?);
                },
                48 => {
                    self.BLDNDNLLKCH = is.read_int32()?;
                },
                57 => {
                    self.PFPGCCMKHIJ = is.read_double()?;
                },
                64 => {
                    self.MDCMIDKJLEL = is.read_uint32()?;
                },
                72 => {
                    self.IJOLEKJFLGF = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.DHPDHGHAEOP != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.DHPDHGHAEOP);
        }
        for value in &self.PNPMEACMBPP {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        if self.PEPHONIOECA != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.PEPHONIOECA);
        }
        if self.JMDADAHHGDH != 0. {
            my_size += 1 + 8;
        }
        for value in &self.NPEAKNHDHHH {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        if self.BLDNDNLLKCH != 0 {
            my_size += ::protobuf::rt::int32_size(6, self.BLDNDNLLKCH);
        }
        if self.PFPGCCMKHIJ != 0. {
            my_size += 1 + 8;
        }
        if self.MDCMIDKJLEL != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.MDCMIDKJLEL);
        }
        if self.IJOLEKJFLGF != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.IJOLEKJFLGF);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.DHPDHGHAEOP != 0 {
            os.write_uint32(1, self.DHPDHGHAEOP)?;
        }
        for v in &self.PNPMEACMBPP {
            os.write_uint32(2, *v)?;
        };
        if self.PEPHONIOECA != 0 {
            os.write_uint32(3, self.PEPHONIOECA)?;
        }
        if self.JMDADAHHGDH != 0. {
            os.write_double(4, self.JMDADAHHGDH)?;
        }
        for v in &self.NPEAKNHDHHH {
            os.write_uint32(5, *v)?;
        };
        if self.BLDNDNLLKCH != 0 {
            os.write_int32(6, self.BLDNDNLLKCH)?;
        }
        if self.PFPGCCMKHIJ != 0. {
            os.write_double(7, self.PFPGCCMKHIJ)?;
        }
        if self.MDCMIDKJLEL != 0 {
            os.write_uint32(8, self.MDCMIDKJLEL)?;
        }
        if self.IJOLEKJFLGF != 0 {
            os.write_uint32(9, self.IJOLEKJFLGF)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HOMHNAPNMOJ {
        HOMHNAPNMOJ::new()
    }

    fn clear(&mut self) {
        self.DHPDHGHAEOP = 0;
        self.PNPMEACMBPP.clear();
        self.PEPHONIOECA = 0;
        self.JMDADAHHGDH = 0.;
        self.NPEAKNHDHHH.clear();
        self.BLDNDNLLKCH = 0;
        self.PFPGCCMKHIJ = 0.;
        self.MDCMIDKJLEL = 0;
        self.IJOLEKJFLGF = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HOMHNAPNMOJ {
        static instance: HOMHNAPNMOJ = HOMHNAPNMOJ {
            DHPDHGHAEOP: 0,
            PNPMEACMBPP: ::std::vec::Vec::new(),
            PEPHONIOECA: 0,
            JMDADAHHGDH: 0.,
            NPEAKNHDHHH: ::std::vec::Vec::new(),
            BLDNDNLLKCH: 0,
            PFPGCCMKHIJ: 0.,
            MDCMIDKJLEL: 0,
            IJOLEKJFLGF: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HOMHNAPNMOJ {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HOMHNAPNMOJ").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HOMHNAPNMOJ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HOMHNAPNMOJ {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HOMHNAPNMOJ.proto\"\xbf\x02\n\x0bHOMHNAPNMOJ\x12\x20\n\x0bDHPDHGHA\
    EOP\x18\x01\x20\x01(\rR\x0bDHPDHGHAEOP\x12\x20\n\x0bPNPMEACMBPP\x18\x02\
    \x20\x03(\rR\x0bPNPMEACMBPP\x12\x20\n\x0bPEPHONIOECA\x18\x03\x20\x01(\rR\
    \x0bPEPHONIOECA\x12\x20\n\x0bJMDADAHHGDH\x18\x04\x20\x01(\x01R\x0bJMDADA\
    HHGDH\x12\x20\n\x0bNPEAKNHDHHH\x18\x05\x20\x03(\rR\x0bNPEAKNHDHHH\x12\
    \x20\n\x0bBLDNDNLLKCH\x18\x06\x20\x01(\x05R\x0bBLDNDNLLKCH\x12\x20\n\x0b\
    PFPGCCMKHIJ\x18\x07\x20\x01(\x01R\x0bPFPGCCMKHIJ\x12\x20\n\x0bMDCMIDKJLE\
    L\x18\x08\x20\x01(\rR\x0bMDCMIDKJLEL\x12\x20\n\x0bIJOLEKJFLGF\x18\t\x20\
    \x01(\rR\x0bIJOLEKJFLGFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HOMHNAPNMOJ::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
