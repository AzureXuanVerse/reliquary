// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RelicRecommendScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RelicRecommendScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RelicRecommendScRsp {
    // message fields
    // @@protoc_insertion_point(field:RelicRecommendScRsp.ADADHIHDHJC)
    pub ADADHIHDHJC: u32,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.GCPCJPPNHEP)
    pub GCPCJPPNHEP: ::std::vec::Vec<super::JNGKHNHEFIO::JNGKHNHEFIO>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.OACOOEJONPI)
    pub OACOOEJONPI: ::std::vec::Vec<super::HBBJPNOBALE::HBBJPNOBALE>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.OPBMIBMFIJP)
    pub OPBMIBMFIJP: ::std::vec::Vec<super::HBBJPNOBALE::HBBJPNOBALE>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.DLPPKMHPKNN)
    pub DLPPKMHPKNN: ::std::vec::Vec<super::JNGKHNHEFIO::JNGKHNHEFIO>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.DHPDHGHAEOP)
    pub DHPDHGHAEOP: u32,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.ROGUE_TALENT_STATUS_ENABLE)
    pub ROGUE_TALENT_STATUS_ENABLE: bool,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.HKAHJOJHCKD)
    pub HKAHJOJHCKD: ::std::vec::Vec<super::JNGKHNHEFIO::JNGKHNHEFIO>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.LJCMCBGLPHD)
    pub LJCMCBGLPHD: ::std::vec::Vec<super::JNGKHNHEFIO::JNGKHNHEFIO>,
    // special fields
    // @@protoc_insertion_point(special_field:RelicRecommendScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RelicRecommendScRsp {
    fn default() -> &'a RelicRecommendScRsp {
        <RelicRecommendScRsp as ::protobuf::Message>::default_instance()
    }
}

impl RelicRecommendScRsp {
    pub fn new() -> RelicRecommendScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADADHIHDHJC",
            |m: &RelicRecommendScRsp| { &m.ADADHIHDHJC },
            |m: &mut RelicRecommendScRsp| { &mut m.ADADHIHDHJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GCPCJPPNHEP",
            |m: &RelicRecommendScRsp| { &m.GCPCJPPNHEP },
            |m: &mut RelicRecommendScRsp| { &mut m.GCPCJPPNHEP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OACOOEJONPI",
            |m: &RelicRecommendScRsp| { &m.OACOOEJONPI },
            |m: &mut RelicRecommendScRsp| { &mut m.OACOOEJONPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OPBMIBMFIJP",
            |m: &RelicRecommendScRsp| { &m.OPBMIBMFIJP },
            |m: &mut RelicRecommendScRsp| { &mut m.OPBMIBMFIJP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DLPPKMHPKNN",
            |m: &RelicRecommendScRsp| { &m.DLPPKMHPKNN },
            |m: &mut RelicRecommendScRsp| { &mut m.DLPPKMHPKNN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DHPDHGHAEOP",
            |m: &RelicRecommendScRsp| { &m.DHPDHGHAEOP },
            |m: &mut RelicRecommendScRsp| { &mut m.DHPDHGHAEOP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ROGUE_TALENT_STATUS_ENABLE",
            |m: &RelicRecommendScRsp| { &m.ROGUE_TALENT_STATUS_ENABLE },
            |m: &mut RelicRecommendScRsp| { &mut m.ROGUE_TALENT_STATUS_ENABLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HKAHJOJHCKD",
            |m: &RelicRecommendScRsp| { &m.HKAHJOJHCKD },
            |m: &mut RelicRecommendScRsp| { &mut m.HKAHJOJHCKD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LJCMCBGLPHD",
            |m: &RelicRecommendScRsp| { &m.LJCMCBGLPHD },
            |m: &mut RelicRecommendScRsp| { &mut m.LJCMCBGLPHD },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RelicRecommendScRsp>(
            "RelicRecommendScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RelicRecommendScRsp {
    const NAME: &'static str = "RelicRecommendScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.ADADHIHDHJC = is.read_uint32()?;
                },
                90 => {
                    self.GCPCJPPNHEP.push(is.read_message()?);
                },
                58 => {
                    self.OACOOEJONPI.push(is.read_message()?);
                },
                122 => {
                    self.OPBMIBMFIJP.push(is.read_message()?);
                },
                42 => {
                    self.DLPPKMHPKNN.push(is.read_message()?);
                },
                96 => {
                    self.DHPDHGHAEOP = is.read_uint32()?;
                },
                8 => {
                    self.ROGUE_TALENT_STATUS_ENABLE = is.read_bool()?;
                },
                82 => {
                    self.HKAHJOJHCKD.push(is.read_message()?);
                },
                74 => {
                    self.LJCMCBGLPHD.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ADADHIHDHJC != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.ADADHIHDHJC);
        }
        for value in &self.GCPCJPPNHEP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.OACOOEJONPI {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.OPBMIBMFIJP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.DLPPKMHPKNN {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.DHPDHGHAEOP != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.DHPDHGHAEOP);
        }
        if self.ROGUE_TALENT_STATUS_ENABLE != false {
            my_size += 1 + 1;
        }
        for value in &self.HKAHJOJHCKD {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.LJCMCBGLPHD {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ADADHIHDHJC != 0 {
            os.write_uint32(6, self.ADADHIHDHJC)?;
        }
        for v in &self.GCPCJPPNHEP {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.OACOOEJONPI {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.OPBMIBMFIJP {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        for v in &self.DLPPKMHPKNN {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.DHPDHGHAEOP != 0 {
            os.write_uint32(12, self.DHPDHGHAEOP)?;
        }
        if self.ROGUE_TALENT_STATUS_ENABLE != false {
            os.write_bool(1, self.ROGUE_TALENT_STATUS_ENABLE)?;
        }
        for v in &self.HKAHJOJHCKD {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        for v in &self.LJCMCBGLPHD {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RelicRecommendScRsp {
        RelicRecommendScRsp::new()
    }

    fn clear(&mut self) {
        self.ADADHIHDHJC = 0;
        self.GCPCJPPNHEP.clear();
        self.OACOOEJONPI.clear();
        self.OPBMIBMFIJP.clear();
        self.DLPPKMHPKNN.clear();
        self.DHPDHGHAEOP = 0;
        self.ROGUE_TALENT_STATUS_ENABLE = false;
        self.HKAHJOJHCKD.clear();
        self.LJCMCBGLPHD.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RelicRecommendScRsp {
        static instance: RelicRecommendScRsp = RelicRecommendScRsp {
            ADADHIHDHJC: 0,
            GCPCJPPNHEP: ::std::vec::Vec::new(),
            OACOOEJONPI: ::std::vec::Vec::new(),
            OPBMIBMFIJP: ::std::vec::Vec::new(),
            DLPPKMHPKNN: ::std::vec::Vec::new(),
            DHPDHGHAEOP: 0,
            ROGUE_TALENT_STATUS_ENABLE: false,
            HKAHJOJHCKD: ::std::vec::Vec::new(),
            LJCMCBGLPHD: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RelicRecommendScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RelicRecommendScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RelicRecommendScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelicRecommendScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19RelicRecommendScRsp.proto\x1a\x11HBBJPNOBALE.proto\x1a\x11JNGKHNHE\
    FIO.proto\"\xb6\x03\n\x13RelicRecommendScRsp\x12\x20\n\x0bADADHIHDHJC\
    \x18\x06\x20\x01(\rR\x0bADADHIHDHJC\x12.\n\x0bGCPCJPPNHEP\x18\x0b\x20\
    \x03(\x0b2\x0c.JNGKHNHEFIOR\x0bGCPCJPPNHEP\x12.\n\x0bOACOOEJONPI\x18\x07\
    \x20\x03(\x0b2\x0c.HBBJPNOBALER\x0bOACOOEJONPI\x12.\n\x0bOPBMIBMFIJP\x18\
    \x0f\x20\x03(\x0b2\x0c.HBBJPNOBALER\x0bOPBMIBMFIJP\x12.\n\x0bDLPPKMHPKNN\
    \x18\x05\x20\x03(\x0b2\x0c.JNGKHNHEFIOR\x0bDLPPKMHPKNN\x12\x20\n\x0bDHPD\
    HGHAEOP\x18\x0c\x20\x01(\rR\x0bDHPDHGHAEOP\x12;\n\x1aROGUE_TALENT_STATUS\
    _ENABLE\x18\x01\x20\x01(\x08R\x17ROGUETALENTSTATUSENABLE\x12.\n\x0bHKAHJ\
    OJHCKD\x18\n\x20\x03(\x0b2\x0c.JNGKHNHEFIOR\x0bHKAHJOJHCKD\x12.\n\x0bLJC\
    MCBGLPHD\x18\t\x20\x03(\x0b2\x0c.JNGKHNHEFIOR\x0bLJCMCBGLPHDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::HBBJPNOBALE::file_descriptor().clone());
            deps.push(super::JNGKHNHEFIO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RelicRecommendScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
