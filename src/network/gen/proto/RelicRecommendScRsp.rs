// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RelicRecommendScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RelicRecommendScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RelicRecommendScRsp {
    // message fields
    // @@protoc_insertion_point(field:RelicRecommendScRsp.LFHNBIAIAOG)
    pub LFHNBIAIAOG: ::std::vec::Vec<super::FLCMIIMLNNL::FLCMIIMLNNL>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.BNAEBNBLEDN)
    pub BNAEBNBLEDN: ::std::vec::Vec<super::FLCMIIMLNNL::FLCMIIMLNNL>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.PHIEKFAGMGB)
    pub PHIEKFAGMGB: ::std::vec::Vec<super::HANHAPJMLEJ::HANHAPJMLEJ>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.GCBACJGKGMK)
    pub GCBACJGKGMK: ::std::vec::Vec<super::FLCMIIMLNNL::FLCMIIMLNNL>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.ROGUE_TALENT_STATUS_ENABLE)
    pub ROGUE_TALENT_STATUS_ENABLE: bool,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.LIDILJPEJDO)
    pub LIDILJPEJDO: ::std::vec::Vec<super::HANHAPJMLEJ::HANHAPJMLEJ>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.AMGAENNCLKE)
    pub AMGAENNCLKE: ::std::vec::Vec<super::FLCMIIMLNNL::FLCMIIMLNNL>,
    // @@protoc_insertion_point(field:RelicRecommendScRsp.avatar_id)
    pub avatar_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:RelicRecommendScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RelicRecommendScRsp {
    fn default() -> &'a RelicRecommendScRsp {
        <RelicRecommendScRsp as ::protobuf::Message>::default_instance()
    }
}

impl RelicRecommendScRsp {
    pub fn new() -> RelicRecommendScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LFHNBIAIAOG",
            |m: &RelicRecommendScRsp| { &m.LFHNBIAIAOG },
            |m: &mut RelicRecommendScRsp| { &mut m.LFHNBIAIAOG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BNAEBNBLEDN",
            |m: &RelicRecommendScRsp| { &m.BNAEBNBLEDN },
            |m: &mut RelicRecommendScRsp| { &mut m.BNAEBNBLEDN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PHIEKFAGMGB",
            |m: &RelicRecommendScRsp| { &m.PHIEKFAGMGB },
            |m: &mut RelicRecommendScRsp| { &mut m.PHIEKFAGMGB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &RelicRecommendScRsp| { &m.retcode },
            |m: &mut RelicRecommendScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GCBACJGKGMK",
            |m: &RelicRecommendScRsp| { &m.GCBACJGKGMK },
            |m: &mut RelicRecommendScRsp| { &mut m.GCBACJGKGMK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ROGUE_TALENT_STATUS_ENABLE",
            |m: &RelicRecommendScRsp| { &m.ROGUE_TALENT_STATUS_ENABLE },
            |m: &mut RelicRecommendScRsp| { &mut m.ROGUE_TALENT_STATUS_ENABLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LIDILJPEJDO",
            |m: &RelicRecommendScRsp| { &m.LIDILJPEJDO },
            |m: &mut RelicRecommendScRsp| { &mut m.LIDILJPEJDO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AMGAENNCLKE",
            |m: &RelicRecommendScRsp| { &m.AMGAENNCLKE },
            |m: &mut RelicRecommendScRsp| { &mut m.AMGAENNCLKE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_id",
            |m: &RelicRecommendScRsp| { &m.avatar_id },
            |m: &mut RelicRecommendScRsp| { &mut m.avatar_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RelicRecommendScRsp>(
            "RelicRecommendScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RelicRecommendScRsp {
    const NAME: &'static str = "RelicRecommendScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    self.LFHNBIAIAOG.push(is.read_message()?);
                },
                50 => {
                    self.BNAEBNBLEDN.push(is.read_message()?);
                },
                122 => {
                    self.PHIEKFAGMGB.push(is.read_message()?);
                },
                88 => {
                    self.retcode = is.read_uint32()?;
                },
                10 => {
                    self.GCBACJGKGMK.push(is.read_message()?);
                },
                80 => {
                    self.ROGUE_TALENT_STATUS_ENABLE = is.read_bool()?;
                },
                42 => {
                    self.LIDILJPEJDO.push(is.read_message()?);
                },
                98 => {
                    self.AMGAENNCLKE.push(is.read_message()?);
                },
                64 => {
                    self.avatar_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.LFHNBIAIAOG {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.BNAEBNBLEDN {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.PHIEKFAGMGB {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.retcode);
        }
        for value in &self.GCBACJGKGMK {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.ROGUE_TALENT_STATUS_ENABLE != false {
            my_size += 1 + 1;
        }
        for value in &self.LIDILJPEJDO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.AMGAENNCLKE {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.avatar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.avatar_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.LFHNBIAIAOG {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        for v in &self.BNAEBNBLEDN {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.PHIEKFAGMGB {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(11, self.retcode)?;
        }
        for v in &self.GCBACJGKGMK {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.ROGUE_TALENT_STATUS_ENABLE != false {
            os.write_bool(10, self.ROGUE_TALENT_STATUS_ENABLE)?;
        }
        for v in &self.LIDILJPEJDO {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.AMGAENNCLKE {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if self.avatar_id != 0 {
            os.write_uint32(8, self.avatar_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RelicRecommendScRsp {
        RelicRecommendScRsp::new()
    }

    fn clear(&mut self) {
        self.LFHNBIAIAOG.clear();
        self.BNAEBNBLEDN.clear();
        self.PHIEKFAGMGB.clear();
        self.retcode = 0;
        self.GCBACJGKGMK.clear();
        self.ROGUE_TALENT_STATUS_ENABLE = false;
        self.LIDILJPEJDO.clear();
        self.AMGAENNCLKE.clear();
        self.avatar_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RelicRecommendScRsp {
        static instance: RelicRecommendScRsp = RelicRecommendScRsp {
            LFHNBIAIAOG: ::std::vec::Vec::new(),
            BNAEBNBLEDN: ::std::vec::Vec::new(),
            PHIEKFAGMGB: ::std::vec::Vec::new(),
            retcode: 0,
            GCBACJGKGMK: ::std::vec::Vec::new(),
            ROGUE_TALENT_STATUS_ENABLE: false,
            LIDILJPEJDO: ::std::vec::Vec::new(),
            AMGAENNCLKE: ::std::vec::Vec::new(),
            avatar_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RelicRecommendScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RelicRecommendScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RelicRecommendScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelicRecommendScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19RelicRecommendScRsp.proto\x1a\x11FLCMIIMLNNL.proto\x1a\x11HANHAPJM\
    LEJ.proto\"\xa9\x03\n\x13RelicRecommendScRsp\x12.\n\x0bLFHNBIAIAOG\x18\r\
    \x20\x03(\x0b2\x0c.FLCMIIMLNNLR\x0bLFHNBIAIAOG\x12.\n\x0bBNAEBNBLEDN\x18\
    \x06\x20\x03(\x0b2\x0c.FLCMIIMLNNLR\x0bBNAEBNBLEDN\x12.\n\x0bPHIEKFAGMGB\
    \x18\x0f\x20\x03(\x0b2\x0c.HANHAPJMLEJR\x0bPHIEKFAGMGB\x12\x18\n\x07retc\
    ode\x18\x0b\x20\x01(\rR\x07retcode\x12.\n\x0bGCBACJGKGMK\x18\x01\x20\x03\
    (\x0b2\x0c.FLCMIIMLNNLR\x0bGCBACJGKGMK\x12;\n\x1aROGUE_TALENT_STATUS_ENA\
    BLE\x18\n\x20\x01(\x08R\x17ROGUETALENTSTATUSENABLE\x12.\n\x0bLIDILJPEJDO\
    \x18\x05\x20\x03(\x0b2\x0c.HANHAPJMLEJR\x0bLIDILJPEJDO\x12.\n\x0bAMGAENN\
    CLKE\x18\x0c\x20\x03(\x0b2\x0c.FLCMIIMLNNLR\x0bAMGAENNCLKE\x12\x1b\n\tav\
    atar_id\x18\x08\x20\x01(\rR\x08avatarIdb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::FLCMIIMLNNL::file_descriptor().clone());
            deps.push(super::HANHAPJMLEJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RelicRecommendScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
