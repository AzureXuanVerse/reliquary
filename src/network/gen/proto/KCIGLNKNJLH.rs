// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `KCIGLNKNJLH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:KCIGLNKNJLH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KCIGLNKNJLH {
    // message oneof groups
    pub ELPNOOCAFBE: ::std::option::Option<kciglnknjlh::ELPNOOCAFBE>,
    // special fields
    // @@protoc_insertion_point(special_field:KCIGLNKNJLH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KCIGLNKNJLH {
    fn default() -> &'a KCIGLNKNJLH {
        <KCIGLNKNJLH as ::protobuf::Message>::default_instance()
    }
}

impl KCIGLNKNJLH {
    pub fn new() -> KCIGLNKNJLH {
        ::std::default::Default::default()
    }

    // .INADCANBFKK JHBJJFFHPGE = 3;

    pub fn JHBJJFFHPGE(&self) -> &super::INADCANBFKK::INADCANBFKK {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(ref v)) => v,
            _ => <super::INADCANBFKK::INADCANBFKK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JHBJJFFHPGE(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_JHBJJFFHPGE(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JHBJJFFHPGE(&mut self, v: super::INADCANBFKK::INADCANBFKK) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JHBJJFFHPGE(&mut self) -> &mut super::INADCANBFKK::INADCANBFKK {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(super::INADCANBFKK::INADCANBFKK::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JHBJJFFHPGE(&mut self) -> super::INADCANBFKK::INADCANBFKK {
        if self.has_JHBJJFFHPGE() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::INADCANBFKK::INADCANBFKK::new()
        }
    }

    // .INADCANBFKK DGNGHPLFDNK = 10;

    pub fn DGNGHPLFDNK(&self) -> &super::INADCANBFKK::INADCANBFKK {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(ref v)) => v,
            _ => <super::INADCANBFKK::INADCANBFKK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DGNGHPLFDNK(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_DGNGHPLFDNK(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DGNGHPLFDNK(&mut self, v: super::INADCANBFKK::INADCANBFKK) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DGNGHPLFDNK(&mut self) -> &mut super::INADCANBFKK::INADCANBFKK {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(super::INADCANBFKK::INADCANBFKK::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DGNGHPLFDNK(&mut self) -> super::INADCANBFKK::INADCANBFKK {
        if self.has_DGNGHPLFDNK() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::INADCANBFKK::INADCANBFKK::new()
        }
    }

    // .PAPPEKLEDIK MMEKEHMKEAK = 651;

    pub fn MMEKEHMKEAK(&self) -> &super::PAPPEKLEDIK::PAPPEKLEDIK {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(ref v)) => v,
            _ => <super::PAPPEKLEDIK::PAPPEKLEDIK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MMEKEHMKEAK(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_MMEKEHMKEAK(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MMEKEHMKEAK(&mut self, v: super::PAPPEKLEDIK::PAPPEKLEDIK) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MMEKEHMKEAK(&mut self) -> &mut super::PAPPEKLEDIK::PAPPEKLEDIK {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(super::PAPPEKLEDIK::PAPPEKLEDIK::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MMEKEHMKEAK(&mut self) -> super::PAPPEKLEDIK::PAPPEKLEDIK {
        if self.has_MMEKEHMKEAK() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PAPPEKLEDIK::PAPPEKLEDIK::new()
        }
    }

    // .PAPPEKLEDIK CLECGGEIKGN = 164;

    pub fn CLECGGEIKGN(&self) -> &super::PAPPEKLEDIK::PAPPEKLEDIK {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(ref v)) => v,
            _ => <super::PAPPEKLEDIK::PAPPEKLEDIK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CLECGGEIKGN(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_CLECGGEIKGN(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CLECGGEIKGN(&mut self, v: super::PAPPEKLEDIK::PAPPEKLEDIK) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CLECGGEIKGN(&mut self) -> &mut super::PAPPEKLEDIK::PAPPEKLEDIK {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(super::PAPPEKLEDIK::PAPPEKLEDIK::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CLECGGEIKGN(&mut self) -> super::PAPPEKLEDIK::PAPPEKLEDIK {
        if self.has_CLECGGEIKGN() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PAPPEKLEDIK::PAPPEKLEDIK::new()
        }
    }

    // .NPIOJCAPICP HIODIBMLGKD = 949;

    pub fn HIODIBMLGKD(&self) -> &super::NPIOJCAPICP::NPIOJCAPICP {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(ref v)) => v,
            _ => <super::NPIOJCAPICP::NPIOJCAPICP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HIODIBMLGKD(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_HIODIBMLGKD(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HIODIBMLGKD(&mut self, v: super::NPIOJCAPICP::NPIOJCAPICP) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HIODIBMLGKD(&mut self) -> &mut super::NPIOJCAPICP::NPIOJCAPICP {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(super::NPIOJCAPICP::NPIOJCAPICP::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HIODIBMLGKD(&mut self) -> super::NPIOJCAPICP::NPIOJCAPICP {
        if self.has_HIODIBMLGKD() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NPIOJCAPICP::NPIOJCAPICP::new()
        }
    }

    // .NLGMKEGMKGM BJLMDLKBHLM = 307;

    pub fn BJLMDLKBHLM(&self) -> &super::NLGMKEGMKGM::NLGMKEGMKGM {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(ref v)) => v,
            _ => <super::NLGMKEGMKGM::NLGMKEGMKGM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BJLMDLKBHLM(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_BJLMDLKBHLM(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BJLMDLKBHLM(&mut self, v: super::NLGMKEGMKGM::NLGMKEGMKGM) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BJLMDLKBHLM(&mut self) -> &mut super::NLGMKEGMKGM::NLGMKEGMKGM {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(super::NLGMKEGMKGM::NLGMKEGMKGM::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BJLMDLKBHLM(&mut self) -> super::NLGMKEGMKGM::NLGMKEGMKGM {
        if self.has_BJLMDLKBHLM() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NLGMKEGMKGM::NLGMKEGMKGM::new()
        }
    }

    // .DFDAADKLANI KPCGEFAHIII = 833;

    pub fn KPCGEFAHIII(&self) -> &super::DFDAADKLANI::DFDAADKLANI {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(ref v)) => v,
            _ => <super::DFDAADKLANI::DFDAADKLANI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KPCGEFAHIII(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_KPCGEFAHIII(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KPCGEFAHIII(&mut self, v: super::DFDAADKLANI::DFDAADKLANI) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KPCGEFAHIII(&mut self) -> &mut super::DFDAADKLANI::DFDAADKLANI {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(super::DFDAADKLANI::DFDAADKLANI::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KPCGEFAHIII(&mut self) -> super::DFDAADKLANI::DFDAADKLANI {
        if self.has_KPCGEFAHIII() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DFDAADKLANI::DFDAADKLANI::new()
        }
    }

    // .LCCKOAPCBNI AGHIBPNNLBN = 329;

    pub fn AGHIBPNNLBN(&self) -> &super::LCCKOAPCBNI::LCCKOAPCBNI {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(ref v)) => v,
            _ => <super::LCCKOAPCBNI::LCCKOAPCBNI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AGHIBPNNLBN(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_AGHIBPNNLBN(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AGHIBPNNLBN(&mut self, v: super::LCCKOAPCBNI::LCCKOAPCBNI) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AGHIBPNNLBN(&mut self) -> &mut super::LCCKOAPCBNI::LCCKOAPCBNI {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(super::LCCKOAPCBNI::LCCKOAPCBNI::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AGHIBPNNLBN(&mut self) -> super::LCCKOAPCBNI::LCCKOAPCBNI {
        if self.has_AGHIBPNNLBN() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCCKOAPCBNI::LCCKOAPCBNI::new()
        }
    }

    // .KGKOFJGBIDG IJJGMBLNHBG = 1468;

    pub fn IJJGMBLNHBG(&self) -> &super::KGKOFJGBIDG::KGKOFJGBIDG {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(ref v)) => v,
            _ => <super::KGKOFJGBIDG::KGKOFJGBIDG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IJJGMBLNHBG(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_IJJGMBLNHBG(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IJJGMBLNHBG(&mut self, v: super::KGKOFJGBIDG::KGKOFJGBIDG) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IJJGMBLNHBG(&mut self) -> &mut super::KGKOFJGBIDG::KGKOFJGBIDG {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(super::KGKOFJGBIDG::KGKOFJGBIDG::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IJJGMBLNHBG(&mut self) -> super::KGKOFJGBIDG::KGKOFJGBIDG {
        if self.has_IJJGMBLNHBG() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KGKOFJGBIDG::KGKOFJGBIDG::new()
        }
    }

    // .GOIPOKFHFBM ELCDKCHODMC = 918;

    pub fn ELCDKCHODMC(&self) -> &super::GOIPOKFHFBM::GOIPOKFHFBM {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(ref v)) => v,
            _ => <super::GOIPOKFHFBM::GOIPOKFHFBM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ELCDKCHODMC(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_ELCDKCHODMC(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ELCDKCHODMC(&mut self, v: super::GOIPOKFHFBM::GOIPOKFHFBM) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ELCDKCHODMC(&mut self) -> &mut super::GOIPOKFHFBM::GOIPOKFHFBM {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(super::GOIPOKFHFBM::GOIPOKFHFBM::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ELCDKCHODMC(&mut self) -> super::GOIPOKFHFBM::GOIPOKFHFBM {
        if self.has_ELCDKCHODMC() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GOIPOKFHFBM::GOIPOKFHFBM::new()
        }
    }

    // .DBBPFLMIDLO JHNLGMCMKHK = 115;

    pub fn JHNLGMCMKHK(&self) -> &super::DBBPFLMIDLO::DBBPFLMIDLO {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(ref v)) => v,
            _ => <super::DBBPFLMIDLO::DBBPFLMIDLO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JHNLGMCMKHK(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_JHNLGMCMKHK(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JHNLGMCMKHK(&mut self, v: super::DBBPFLMIDLO::DBBPFLMIDLO) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JHNLGMCMKHK(&mut self) -> &mut super::DBBPFLMIDLO::DBBPFLMIDLO {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(super::DBBPFLMIDLO::DBBPFLMIDLO::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JHNLGMCMKHK(&mut self) -> super::DBBPFLMIDLO::DBBPFLMIDLO {
        if self.has_JHNLGMCMKHK() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DBBPFLMIDLO::DBBPFLMIDLO::new()
        }
    }

    // .LCLJAODHCCA DKAOFOEIKLG = 1620;

    pub fn DKAOFOEIKLG(&self) -> &super::LCLJAODHCCA::LCLJAODHCCA {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(ref v)) => v,
            _ => <super::LCLJAODHCCA::LCLJAODHCCA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DKAOFOEIKLG(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_DKAOFOEIKLG(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DKAOFOEIKLG(&mut self, v: super::LCLJAODHCCA::LCLJAODHCCA) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DKAOFOEIKLG(&mut self) -> &mut super::LCLJAODHCCA::LCLJAODHCCA {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(super::LCLJAODHCCA::LCLJAODHCCA::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DKAOFOEIKLG(&mut self) -> super::LCLJAODHCCA::LCLJAODHCCA {
        if self.has_DKAOFOEIKLG() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCLJAODHCCA::LCLJAODHCCA::new()
        }
    }

    // .IDMBOJBHDHB NDHIEFCKNFK = 349;

    pub fn NDHIEFCKNFK(&self) -> &super::IDMBOJBHDHB::IDMBOJBHDHB {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(ref v)) => v,
            _ => <super::IDMBOJBHDHB::IDMBOJBHDHB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NDHIEFCKNFK(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_NDHIEFCKNFK(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NDHIEFCKNFK(&mut self, v: super::IDMBOJBHDHB::IDMBOJBHDHB) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NDHIEFCKNFK(&mut self) -> &mut super::IDMBOJBHDHB::IDMBOJBHDHB {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(super::IDMBOJBHDHB::IDMBOJBHDHB::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NDHIEFCKNFK(&mut self) -> super::IDMBOJBHDHB::IDMBOJBHDHB {
        if self.has_NDHIEFCKNFK() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IDMBOJBHDHB::IDMBOJBHDHB::new()
        }
    }

    // .NLJOEAKKJKH LDJJKBLKMJB = 1972;

    pub fn LDJJKBLKMJB(&self) -> &super::NLJOEAKKJKH::NLJOEAKKJKH {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(ref v)) => v,
            _ => <super::NLJOEAKKJKH::NLJOEAKKJKH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LDJJKBLKMJB(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_LDJJKBLKMJB(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LDJJKBLKMJB(&mut self, v: super::NLJOEAKKJKH::NLJOEAKKJKH) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LDJJKBLKMJB(&mut self) -> &mut super::NLJOEAKKJKH::NLJOEAKKJKH {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(super::NLJOEAKKJKH::NLJOEAKKJKH::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LDJJKBLKMJB(&mut self) -> super::NLJOEAKKJKH::NLJOEAKKJKH {
        if self.has_LDJJKBLKMJB() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NLJOEAKKJKH::NLJOEAKKJKH::new()
        }
    }

    // .FPLEBODIJBB CLNKJICOHPA = 1791;

    pub fn CLNKJICOHPA(&self) -> &super::FPLEBODIJBB::FPLEBODIJBB {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(ref v)) => v,
            _ => <super::FPLEBODIJBB::FPLEBODIJBB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CLNKJICOHPA(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_CLNKJICOHPA(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CLNKJICOHPA(&mut self, v: super::FPLEBODIJBB::FPLEBODIJBB) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CLNKJICOHPA(&mut self) -> &mut super::FPLEBODIJBB::FPLEBODIJBB {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(super::FPLEBODIJBB::FPLEBODIJBB::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CLNKJICOHPA(&mut self) -> super::FPLEBODIJBB::FPLEBODIJBB {
        if self.has_CLNKJICOHPA() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FPLEBODIJBB::FPLEBODIJBB::new()
        }
    }

    // .LAKPPMMFCMP FFJBAGJMFAD = 587;

    pub fn FFJBAGJMFAD(&self) -> &super::LAKPPMMFCMP::LAKPPMMFCMP {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(ref v)) => v,
            _ => <super::LAKPPMMFCMP::LAKPPMMFCMP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FFJBAGJMFAD(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_FFJBAGJMFAD(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FFJBAGJMFAD(&mut self, v: super::LAKPPMMFCMP::LAKPPMMFCMP) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FFJBAGJMFAD(&mut self) -> &mut super::LAKPPMMFCMP::LAKPPMMFCMP {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(super::LAKPPMMFCMP::LAKPPMMFCMP::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FFJBAGJMFAD(&mut self) -> super::LAKPPMMFCMP::LAKPPMMFCMP {
        if self.has_FFJBAGJMFAD() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LAKPPMMFCMP::LAKPPMMFCMP::new()
        }
    }

    // .AEHMDPPABEB EAPNBBCHOAJ = 1166;

    pub fn EAPNBBCHOAJ(&self) -> &super::AEHMDPPABEB::AEHMDPPABEB {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(ref v)) => v,
            _ => <super::AEHMDPPABEB::AEHMDPPABEB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EAPNBBCHOAJ(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_EAPNBBCHOAJ(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EAPNBBCHOAJ(&mut self, v: super::AEHMDPPABEB::AEHMDPPABEB) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EAPNBBCHOAJ(&mut self) -> &mut super::AEHMDPPABEB::AEHMDPPABEB {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(super::AEHMDPPABEB::AEHMDPPABEB::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EAPNBBCHOAJ(&mut self) -> super::AEHMDPPABEB::AEHMDPPABEB {
        if self.has_EAPNBBCHOAJ() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AEHMDPPABEB::AEHMDPPABEB::new()
        }
    }

    // .KBBMFEDLCJJ LFBBCKAIEDD = 964;

    pub fn LFBBCKAIEDD(&self) -> &super::KBBMFEDLCJJ::KBBMFEDLCJJ {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(ref v)) => v,
            _ => <super::KBBMFEDLCJJ::KBBMFEDLCJJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LFBBCKAIEDD(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_LFBBCKAIEDD(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LFBBCKAIEDD(&mut self, v: super::KBBMFEDLCJJ::KBBMFEDLCJJ) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LFBBCKAIEDD(&mut self) -> &mut super::KBBMFEDLCJJ::KBBMFEDLCJJ {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(super::KBBMFEDLCJJ::KBBMFEDLCJJ::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LFBBCKAIEDD(&mut self) -> super::KBBMFEDLCJJ::KBBMFEDLCJJ {
        if self.has_LFBBCKAIEDD() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KBBMFEDLCJJ::KBBMFEDLCJJ::new()
        }
    }

    // .KPLOBGOGALN KEFOIDBOIKP = 1585;

    pub fn KEFOIDBOIKP(&self) -> &super::KPLOBGOGALN::KPLOBGOGALN {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(ref v)) => v,
            _ => <super::KPLOBGOGALN::KPLOBGOGALN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KEFOIDBOIKP(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_KEFOIDBOIKP(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KEFOIDBOIKP(&mut self, v: super::KPLOBGOGALN::KPLOBGOGALN) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KEFOIDBOIKP(&mut self) -> &mut super::KPLOBGOGALN::KPLOBGOGALN {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(super::KPLOBGOGALN::KPLOBGOGALN::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KEFOIDBOIKP(&mut self) -> super::KPLOBGOGALN::KPLOBGOGALN {
        if self.has_KEFOIDBOIKP() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KPLOBGOGALN::KPLOBGOGALN::new()
        }
    }

    // .JHHIJKJNJJH OIDECEEEKNK = 96;

    pub fn OIDECEEEKNK(&self) -> &super::JHHIJKJNJJH::JHHIJKJNJJH {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(ref v)) => v,
            _ => <super::JHHIJKJNJJH::JHHIJKJNJJH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OIDECEEEKNK(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_OIDECEEEKNK(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OIDECEEEKNK(&mut self, v: super::JHHIJKJNJJH::JHHIJKJNJJH) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OIDECEEEKNK(&mut self) -> &mut super::JHHIJKJNJJH::JHHIJKJNJJH {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(super::JHHIJKJNJJH::JHHIJKJNJJH::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OIDECEEEKNK(&mut self) -> super::JHHIJKJNJJH::JHHIJKJNJJH {
        if self.has_OIDECEEEKNK() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JHHIJKJNJJH::JHHIJKJNJJH::new()
        }
    }

    // .FBHNOFKECKB MLMLDILDNMO = 725;

    pub fn MLMLDILDNMO(&self) -> &super::FBHNOFKECKB::FBHNOFKECKB {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(ref v)) => v,
            _ => <super::FBHNOFKECKB::FBHNOFKECKB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MLMLDILDNMO(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_MLMLDILDNMO(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MLMLDILDNMO(&mut self, v: super::FBHNOFKECKB::FBHNOFKECKB) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MLMLDILDNMO(&mut self) -> &mut super::FBHNOFKECKB::FBHNOFKECKB {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(super::FBHNOFKECKB::FBHNOFKECKB::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MLMLDILDNMO(&mut self) -> super::FBHNOFKECKB::FBHNOFKECKB {
        if self.has_MLMLDILDNMO() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FBHNOFKECKB::FBHNOFKECKB::new()
        }
    }

    // .JMMFBCMMKLL KDIIDLGFKEN = 1081;

    pub fn KDIIDLGFKEN(&self) -> &super::JMMFBCMMKLL::JMMFBCMMKLL {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(ref v)) => v,
            _ => <super::JMMFBCMMKLL::JMMFBCMMKLL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KDIIDLGFKEN(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_KDIIDLGFKEN(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KDIIDLGFKEN(&mut self, v: super::JMMFBCMMKLL::JMMFBCMMKLL) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KDIIDLGFKEN(&mut self) -> &mut super::JMMFBCMMKLL::JMMFBCMMKLL {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(super::JMMFBCMMKLL::JMMFBCMMKLL::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KDIIDLGFKEN(&mut self) -> super::JMMFBCMMKLL::JMMFBCMMKLL {
        if self.has_KDIIDLGFKEN() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JMMFBCMMKLL::JMMFBCMMKLL::new()
        }
    }

    // .JMMFBCMMKLL LBEJPIGOBNN = 444;

    pub fn LBEJPIGOBNN(&self) -> &super::JMMFBCMMKLL::JMMFBCMMKLL {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(ref v)) => v,
            _ => <super::JMMFBCMMKLL::JMMFBCMMKLL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LBEJPIGOBNN(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_LBEJPIGOBNN(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LBEJPIGOBNN(&mut self, v: super::JMMFBCMMKLL::JMMFBCMMKLL) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LBEJPIGOBNN(&mut self) -> &mut super::JMMFBCMMKLL::JMMFBCMMKLL {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(super::JMMFBCMMKLL::JMMFBCMMKLL::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LBEJPIGOBNN(&mut self) -> super::JMMFBCMMKLL::JMMFBCMMKLL {
        if self.has_LBEJPIGOBNN() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JMMFBCMMKLL::JMMFBCMMKLL::new()
        }
    }

    // .JMMFBCMMKLL IPENGNBLOKM = 1596;

    pub fn IPENGNBLOKM(&self) -> &super::JMMFBCMMKLL::JMMFBCMMKLL {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(ref v)) => v,
            _ => <super::JMMFBCMMKLL::JMMFBCMMKLL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IPENGNBLOKM(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_IPENGNBLOKM(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IPENGNBLOKM(&mut self, v: super::JMMFBCMMKLL::JMMFBCMMKLL) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IPENGNBLOKM(&mut self) -> &mut super::JMMFBCMMKLL::JMMFBCMMKLL {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(super::JMMFBCMMKLL::JMMFBCMMKLL::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IPENGNBLOKM(&mut self) -> super::JMMFBCMMKLL::JMMFBCMMKLL {
        if self.has_IPENGNBLOKM() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JMMFBCMMKLL::JMMFBCMMKLL::new()
        }
    }

    // .BCIHKEKHFEE ECIPCACJANC = 1946;

    pub fn ECIPCACJANC(&self) -> &super::BCIHKEKHFEE::BCIHKEKHFEE {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(ref v)) => v,
            _ => <super::BCIHKEKHFEE::BCIHKEKHFEE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ECIPCACJANC(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_ECIPCACJANC(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ECIPCACJANC(&mut self, v: super::BCIHKEKHFEE::BCIHKEKHFEE) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ECIPCACJANC(&mut self) -> &mut super::BCIHKEKHFEE::BCIHKEKHFEE {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(super::BCIHKEKHFEE::BCIHKEKHFEE::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ECIPCACJANC(&mut self) -> super::BCIHKEKHFEE::BCIHKEKHFEE {
        if self.has_ECIPCACJANC() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BCIHKEKHFEE::BCIHKEKHFEE::new()
        }
    }

    // .HELFBMIFAMI ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE = 1476;

    pub fn ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&self) -> &super::HELFBMIFAMI::HELFBMIFAMI {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v)) => v,
            _ => <super::HELFBMIFAMI::HELFBMIFAMI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self, v: super::HELFBMIFAMI::HELFBMIFAMI) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) -> &mut super::HELFBMIFAMI::HELFBMIFAMI {
        if let ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(super::HELFBMIFAMI::HELFBMIFAMI::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) -> super::HELFBMIFAMI::HELFBMIFAMI {
        if self.has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HELFBMIFAMI::HELFBMIFAMI::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(26);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::INADCANBFKK::INADCANBFKK>(
            "JHBJJFFHPGE",
            KCIGLNKNJLH::has_JHBJJFFHPGE,
            KCIGLNKNJLH::JHBJJFFHPGE,
            KCIGLNKNJLH::mut_JHBJJFFHPGE,
            KCIGLNKNJLH::set_JHBJJFFHPGE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::INADCANBFKK::INADCANBFKK>(
            "DGNGHPLFDNK",
            KCIGLNKNJLH::has_DGNGHPLFDNK,
            KCIGLNKNJLH::DGNGHPLFDNK,
            KCIGLNKNJLH::mut_DGNGHPLFDNK,
            KCIGLNKNJLH::set_DGNGHPLFDNK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PAPPEKLEDIK::PAPPEKLEDIK>(
            "MMEKEHMKEAK",
            KCIGLNKNJLH::has_MMEKEHMKEAK,
            KCIGLNKNJLH::MMEKEHMKEAK,
            KCIGLNKNJLH::mut_MMEKEHMKEAK,
            KCIGLNKNJLH::set_MMEKEHMKEAK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PAPPEKLEDIK::PAPPEKLEDIK>(
            "CLECGGEIKGN",
            KCIGLNKNJLH::has_CLECGGEIKGN,
            KCIGLNKNJLH::CLECGGEIKGN,
            KCIGLNKNJLH::mut_CLECGGEIKGN,
            KCIGLNKNJLH::set_CLECGGEIKGN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NPIOJCAPICP::NPIOJCAPICP>(
            "HIODIBMLGKD",
            KCIGLNKNJLH::has_HIODIBMLGKD,
            KCIGLNKNJLH::HIODIBMLGKD,
            KCIGLNKNJLH::mut_HIODIBMLGKD,
            KCIGLNKNJLH::set_HIODIBMLGKD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NLGMKEGMKGM::NLGMKEGMKGM>(
            "BJLMDLKBHLM",
            KCIGLNKNJLH::has_BJLMDLKBHLM,
            KCIGLNKNJLH::BJLMDLKBHLM,
            KCIGLNKNJLH::mut_BJLMDLKBHLM,
            KCIGLNKNJLH::set_BJLMDLKBHLM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DFDAADKLANI::DFDAADKLANI>(
            "KPCGEFAHIII",
            KCIGLNKNJLH::has_KPCGEFAHIII,
            KCIGLNKNJLH::KPCGEFAHIII,
            KCIGLNKNJLH::mut_KPCGEFAHIII,
            KCIGLNKNJLH::set_KPCGEFAHIII,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCCKOAPCBNI::LCCKOAPCBNI>(
            "AGHIBPNNLBN",
            KCIGLNKNJLH::has_AGHIBPNNLBN,
            KCIGLNKNJLH::AGHIBPNNLBN,
            KCIGLNKNJLH::mut_AGHIBPNNLBN,
            KCIGLNKNJLH::set_AGHIBPNNLBN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KGKOFJGBIDG::KGKOFJGBIDG>(
            "IJJGMBLNHBG",
            KCIGLNKNJLH::has_IJJGMBLNHBG,
            KCIGLNKNJLH::IJJGMBLNHBG,
            KCIGLNKNJLH::mut_IJJGMBLNHBG,
            KCIGLNKNJLH::set_IJJGMBLNHBG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GOIPOKFHFBM::GOIPOKFHFBM>(
            "ELCDKCHODMC",
            KCIGLNKNJLH::has_ELCDKCHODMC,
            KCIGLNKNJLH::ELCDKCHODMC,
            KCIGLNKNJLH::mut_ELCDKCHODMC,
            KCIGLNKNJLH::set_ELCDKCHODMC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DBBPFLMIDLO::DBBPFLMIDLO>(
            "JHNLGMCMKHK",
            KCIGLNKNJLH::has_JHNLGMCMKHK,
            KCIGLNKNJLH::JHNLGMCMKHK,
            KCIGLNKNJLH::mut_JHNLGMCMKHK,
            KCIGLNKNJLH::set_JHNLGMCMKHK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCLJAODHCCA::LCLJAODHCCA>(
            "DKAOFOEIKLG",
            KCIGLNKNJLH::has_DKAOFOEIKLG,
            KCIGLNKNJLH::DKAOFOEIKLG,
            KCIGLNKNJLH::mut_DKAOFOEIKLG,
            KCIGLNKNJLH::set_DKAOFOEIKLG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IDMBOJBHDHB::IDMBOJBHDHB>(
            "NDHIEFCKNFK",
            KCIGLNKNJLH::has_NDHIEFCKNFK,
            KCIGLNKNJLH::NDHIEFCKNFK,
            KCIGLNKNJLH::mut_NDHIEFCKNFK,
            KCIGLNKNJLH::set_NDHIEFCKNFK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NLJOEAKKJKH::NLJOEAKKJKH>(
            "LDJJKBLKMJB",
            KCIGLNKNJLH::has_LDJJKBLKMJB,
            KCIGLNKNJLH::LDJJKBLKMJB,
            KCIGLNKNJLH::mut_LDJJKBLKMJB,
            KCIGLNKNJLH::set_LDJJKBLKMJB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FPLEBODIJBB::FPLEBODIJBB>(
            "CLNKJICOHPA",
            KCIGLNKNJLH::has_CLNKJICOHPA,
            KCIGLNKNJLH::CLNKJICOHPA,
            KCIGLNKNJLH::mut_CLNKJICOHPA,
            KCIGLNKNJLH::set_CLNKJICOHPA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LAKPPMMFCMP::LAKPPMMFCMP>(
            "FFJBAGJMFAD",
            KCIGLNKNJLH::has_FFJBAGJMFAD,
            KCIGLNKNJLH::FFJBAGJMFAD,
            KCIGLNKNJLH::mut_FFJBAGJMFAD,
            KCIGLNKNJLH::set_FFJBAGJMFAD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AEHMDPPABEB::AEHMDPPABEB>(
            "EAPNBBCHOAJ",
            KCIGLNKNJLH::has_EAPNBBCHOAJ,
            KCIGLNKNJLH::EAPNBBCHOAJ,
            KCIGLNKNJLH::mut_EAPNBBCHOAJ,
            KCIGLNKNJLH::set_EAPNBBCHOAJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KBBMFEDLCJJ::KBBMFEDLCJJ>(
            "LFBBCKAIEDD",
            KCIGLNKNJLH::has_LFBBCKAIEDD,
            KCIGLNKNJLH::LFBBCKAIEDD,
            KCIGLNKNJLH::mut_LFBBCKAIEDD,
            KCIGLNKNJLH::set_LFBBCKAIEDD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KPLOBGOGALN::KPLOBGOGALN>(
            "KEFOIDBOIKP",
            KCIGLNKNJLH::has_KEFOIDBOIKP,
            KCIGLNKNJLH::KEFOIDBOIKP,
            KCIGLNKNJLH::mut_KEFOIDBOIKP,
            KCIGLNKNJLH::set_KEFOIDBOIKP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JHHIJKJNJJH::JHHIJKJNJJH>(
            "OIDECEEEKNK",
            KCIGLNKNJLH::has_OIDECEEEKNK,
            KCIGLNKNJLH::OIDECEEEKNK,
            KCIGLNKNJLH::mut_OIDECEEEKNK,
            KCIGLNKNJLH::set_OIDECEEEKNK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FBHNOFKECKB::FBHNOFKECKB>(
            "MLMLDILDNMO",
            KCIGLNKNJLH::has_MLMLDILDNMO,
            KCIGLNKNJLH::MLMLDILDNMO,
            KCIGLNKNJLH::mut_MLMLDILDNMO,
            KCIGLNKNJLH::set_MLMLDILDNMO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JMMFBCMMKLL::JMMFBCMMKLL>(
            "KDIIDLGFKEN",
            KCIGLNKNJLH::has_KDIIDLGFKEN,
            KCIGLNKNJLH::KDIIDLGFKEN,
            KCIGLNKNJLH::mut_KDIIDLGFKEN,
            KCIGLNKNJLH::set_KDIIDLGFKEN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JMMFBCMMKLL::JMMFBCMMKLL>(
            "LBEJPIGOBNN",
            KCIGLNKNJLH::has_LBEJPIGOBNN,
            KCIGLNKNJLH::LBEJPIGOBNN,
            KCIGLNKNJLH::mut_LBEJPIGOBNN,
            KCIGLNKNJLH::set_LBEJPIGOBNN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JMMFBCMMKLL::JMMFBCMMKLL>(
            "IPENGNBLOKM",
            KCIGLNKNJLH::has_IPENGNBLOKM,
            KCIGLNKNJLH::IPENGNBLOKM,
            KCIGLNKNJLH::mut_IPENGNBLOKM,
            KCIGLNKNJLH::set_IPENGNBLOKM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BCIHKEKHFEE::BCIHKEKHFEE>(
            "ECIPCACJANC",
            KCIGLNKNJLH::has_ECIPCACJANC,
            KCIGLNKNJLH::ECIPCACJANC,
            KCIGLNKNJLH::mut_ECIPCACJANC,
            KCIGLNKNJLH::set_ECIPCACJANC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HELFBMIFAMI::HELFBMIFAMI>(
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE",
            KCIGLNKNJLH::has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            KCIGLNKNJLH::ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            KCIGLNKNJLH::mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            KCIGLNKNJLH::set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
        ));
        oneofs.push(kciglnknjlh::ELPNOOCAFBE::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KCIGLNKNJLH>(
            "KCIGLNKNJLH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KCIGLNKNJLH {
    const NAME: &'static str = "KCIGLNKNJLH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(is.read_message()?));
                },
                82 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(is.read_message()?));
                },
                5210 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(is.read_message()?));
                },
                1314 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(is.read_message()?));
                },
                7594 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(is.read_message()?));
                },
                2458 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(is.read_message()?));
                },
                6666 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(is.read_message()?));
                },
                2634 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(is.read_message()?));
                },
                11746 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(is.read_message()?));
                },
                7346 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(is.read_message()?));
                },
                922 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(is.read_message()?));
                },
                12962 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(is.read_message()?));
                },
                2794 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(is.read_message()?));
                },
                15778 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(is.read_message()?));
                },
                14330 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(is.read_message()?));
                },
                4698 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(is.read_message()?));
                },
                9330 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(is.read_message()?));
                },
                7714 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(is.read_message()?));
                },
                12682 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(is.read_message()?));
                },
                770 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(is.read_message()?));
                },
                5802 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(is.read_message()?));
                },
                8650 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(is.read_message()?));
                },
                3554 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(is.read_message()?));
                },
                12770 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(is.read_message()?));
                },
                15570 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(is.read_message()?));
                },
                11810 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ELPNOOCAFBE {
            match v {
                &kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ELPNOOCAFBE {
            match v {
                &kciglnknjlh::ELPNOOCAFBE::JHBJJFFHPGE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::DGNGHPLFDNK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::MMEKEHMKEAK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(651, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::CLECGGEIKGN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(164, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::HIODIBMLGKD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(949, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::BJLMDLKBHLM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(307, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::KPCGEFAHIII(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(833, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::AGHIBPNNLBN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(329, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::IJJGMBLNHBG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1468, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::ELCDKCHODMC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(918, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::JHNLGMCMKHK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(115, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::DKAOFOEIKLG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1620, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::NDHIEFCKNFK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(349, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::LDJJKBLKMJB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1972, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::CLNKJICOHPA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1791, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::FFJBAGJMFAD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(587, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::EAPNBBCHOAJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1166, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::LFBBCKAIEDD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(964, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::KEFOIDBOIKP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1585, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::OIDECEEEKNK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(96, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::MLMLDILDNMO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(725, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::KDIIDLGFKEN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1081, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::LBEJPIGOBNN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(444, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::IPENGNBLOKM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1596, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::ECIPCACJANC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1946, v, os)?;
                },
                &kciglnknjlh::ELPNOOCAFBE::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1476, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KCIGLNKNJLH {
        KCIGLNKNJLH::new()
    }

    fn clear(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KCIGLNKNJLH {
        static instance: KCIGLNKNJLH = KCIGLNKNJLH {
            ELPNOOCAFBE: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KCIGLNKNJLH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KCIGLNKNJLH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KCIGLNKNJLH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KCIGLNKNJLH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `KCIGLNKNJLH`
pub mod kciglnknjlh {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:KCIGLNKNJLH.ELPNOOCAFBE)
    pub enum ELPNOOCAFBE {
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.JHBJJFFHPGE)
        JHBJJFFHPGE(super::super::INADCANBFKK::INADCANBFKK),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.DGNGHPLFDNK)
        DGNGHPLFDNK(super::super::INADCANBFKK::INADCANBFKK),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.MMEKEHMKEAK)
        MMEKEHMKEAK(super::super::PAPPEKLEDIK::PAPPEKLEDIK),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.CLECGGEIKGN)
        CLECGGEIKGN(super::super::PAPPEKLEDIK::PAPPEKLEDIK),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.HIODIBMLGKD)
        HIODIBMLGKD(super::super::NPIOJCAPICP::NPIOJCAPICP),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.BJLMDLKBHLM)
        BJLMDLKBHLM(super::super::NLGMKEGMKGM::NLGMKEGMKGM),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.KPCGEFAHIII)
        KPCGEFAHIII(super::super::DFDAADKLANI::DFDAADKLANI),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.AGHIBPNNLBN)
        AGHIBPNNLBN(super::super::LCCKOAPCBNI::LCCKOAPCBNI),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.IJJGMBLNHBG)
        IJJGMBLNHBG(super::super::KGKOFJGBIDG::KGKOFJGBIDG),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.ELCDKCHODMC)
        ELCDKCHODMC(super::super::GOIPOKFHFBM::GOIPOKFHFBM),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.JHNLGMCMKHK)
        JHNLGMCMKHK(super::super::DBBPFLMIDLO::DBBPFLMIDLO),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.DKAOFOEIKLG)
        DKAOFOEIKLG(super::super::LCLJAODHCCA::LCLJAODHCCA),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.NDHIEFCKNFK)
        NDHIEFCKNFK(super::super::IDMBOJBHDHB::IDMBOJBHDHB),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.LDJJKBLKMJB)
        LDJJKBLKMJB(super::super::NLJOEAKKJKH::NLJOEAKKJKH),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.CLNKJICOHPA)
        CLNKJICOHPA(super::super::FPLEBODIJBB::FPLEBODIJBB),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.FFJBAGJMFAD)
        FFJBAGJMFAD(super::super::LAKPPMMFCMP::LAKPPMMFCMP),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.EAPNBBCHOAJ)
        EAPNBBCHOAJ(super::super::AEHMDPPABEB::AEHMDPPABEB),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.LFBBCKAIEDD)
        LFBBCKAIEDD(super::super::KBBMFEDLCJJ::KBBMFEDLCJJ),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.KEFOIDBOIKP)
        KEFOIDBOIKP(super::super::KPLOBGOGALN::KPLOBGOGALN),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.OIDECEEEKNK)
        OIDECEEEKNK(super::super::JHHIJKJNJJH::JHHIJKJNJJH),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.MLMLDILDNMO)
        MLMLDILDNMO(super::super::FBHNOFKECKB::FBHNOFKECKB),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.KDIIDLGFKEN)
        KDIIDLGFKEN(super::super::JMMFBCMMKLL::JMMFBCMMKLL),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.LBEJPIGOBNN)
        LBEJPIGOBNN(super::super::JMMFBCMMKLL::JMMFBCMMKLL),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.IPENGNBLOKM)
        IPENGNBLOKM(super::super::JMMFBCMMKLL::JMMFBCMMKLL),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.ECIPCACJANC)
        ECIPCACJANC(super::super::BCIHKEKHFEE::BCIHKEKHFEE),
        // @@protoc_insertion_point(oneof_field:KCIGLNKNJLH.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE)
        ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(super::super::HELFBMIFAMI::HELFBMIFAMI),
    }

    impl ::protobuf::Oneof for ELPNOOCAFBE {
    }

    impl ::protobuf::OneofFull for ELPNOOCAFBE {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::KCIGLNKNJLH as ::protobuf::MessageFull>::descriptor().oneof_by_name("ELPNOOCAFBE").unwrap()).clone()
        }
    }

    impl ELPNOOCAFBE {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ELPNOOCAFBE>("ELPNOOCAFBE")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11KCIGLNKNJLH.proto\x1a\x11AEHMDPPABEB.proto\x1a\x11BCIHKEKHFEE.prot\
    o\x1a\x11DBBPFLMIDLO.proto\x1a\x11DFDAADKLANI.proto\x1a\x11FBHNOFKECKB.p\
    roto\x1a\x11FPLEBODIJBB.proto\x1a\x11GOIPOKFHFBM.proto\x1a\x11HELFBMIFAM\
    I.proto\x1a\x11IDMBOJBHDHB.proto\x1a\x11INADCANBFKK.proto\x1a\x11JHHIJKJ\
    NJJH.proto\x1a\x11JMMFBCMMKLL.proto\x1a\x11KBBMFEDLCJJ.proto\x1a\x11KGKO\
    FJGBIDG.proto\x1a\x11KPLOBGOGALN.proto\x1a\x11LAKPPMMFCMP.proto\x1a\x11L\
    CCKOAPCBNI.proto\x1a\x11LCLJAODHCCA.proto\x1a\x11NLGMKEGMKGM.proto\x1a\
    \x11NLJOEAKKJKH.proto\x1a\x11NPIOJCAPICP.proto\x1a\x11PAPPEKLEDIK.proto\
    \"\x9b\x0b\n\x0bKCIGLNKNJLH\x120\n\x0bJHBJJFFHPGE\x18\x03\x20\x01(\x0b2\
    \x0c.INADCANBFKKH\0R\x0bJHBJJFFHPGE\x120\n\x0bDGNGHPLFDNK\x18\n\x20\x01(\
    \x0b2\x0c.INADCANBFKKH\0R\x0bDGNGHPLFDNK\x121\n\x0bMMEKEHMKEAK\x18\x8b\
    \x05\x20\x01(\x0b2\x0c.PAPPEKLEDIKH\0R\x0bMMEKEHMKEAK\x121\n\x0bCLECGGEI\
    KGN\x18\xa4\x01\x20\x01(\x0b2\x0c.PAPPEKLEDIKH\0R\x0bCLECGGEIKGN\x121\n\
    \x0bHIODIBMLGKD\x18\xb5\x07\x20\x01(\x0b2\x0c.NPIOJCAPICPH\0R\x0bHIODIBM\
    LGKD\x121\n\x0bBJLMDLKBHLM\x18\xb3\x02\x20\x01(\x0b2\x0c.NLGMKEGMKGMH\0R\
    \x0bBJLMDLKBHLM\x121\n\x0bKPCGEFAHIII\x18\xc1\x06\x20\x01(\x0b2\x0c.DFDA\
    ADKLANIH\0R\x0bKPCGEFAHIII\x121\n\x0bAGHIBPNNLBN\x18\xc9\x02\x20\x01(\
    \x0b2\x0c.LCCKOAPCBNIH\0R\x0bAGHIBPNNLBN\x121\n\x0bIJJGMBLNHBG\x18\xbc\
    \x0b\x20\x01(\x0b2\x0c.KGKOFJGBIDGH\0R\x0bIJJGMBLNHBG\x121\n\x0bELCDKCHO\
    DMC\x18\x96\x07\x20\x01(\x0b2\x0c.GOIPOKFHFBMH\0R\x0bELCDKCHODMC\x120\n\
    \x0bJHNLGMCMKHK\x18s\x20\x01(\x0b2\x0c.DBBPFLMIDLOH\0R\x0bJHNLGMCMKHK\
    \x121\n\x0bDKAOFOEIKLG\x18\xd4\x0c\x20\x01(\x0b2\x0c.LCLJAODHCCAH\0R\x0b\
    DKAOFOEIKLG\x121\n\x0bNDHIEFCKNFK\x18\xdd\x02\x20\x01(\x0b2\x0c.IDMBOJBH\
    DHBH\0R\x0bNDHIEFCKNFK\x121\n\x0bLDJJKBLKMJB\x18\xb4\x0f\x20\x01(\x0b2\
    \x0c.NLJOEAKKJKHH\0R\x0bLDJJKBLKMJB\x121\n\x0bCLNKJICOHPA\x18\xff\r\x20\
    \x01(\x0b2\x0c.FPLEBODIJBBH\0R\x0bCLNKJICOHPA\x121\n\x0bFFJBAGJMFAD\x18\
    \xcb\x04\x20\x01(\x0b2\x0c.LAKPPMMFCMPH\0R\x0bFFJBAGJMFAD\x121\n\x0bEAPN\
    BBCHOAJ\x18\x8e\t\x20\x01(\x0b2\x0c.AEHMDPPABEBH\0R\x0bEAPNBBCHOAJ\x121\
    \n\x0bLFBBCKAIEDD\x18\xc4\x07\x20\x01(\x0b2\x0c.KBBMFEDLCJJH\0R\x0bLFBBC\
    KAIEDD\x121\n\x0bKEFOIDBOIKP\x18\xb1\x0c\x20\x01(\x0b2\x0c.KPLOBGOGALNH\
    \0R\x0bKEFOIDBOIKP\x120\n\x0bOIDECEEEKNK\x18`\x20\x01(\x0b2\x0c.JHHIJKJN\
    JJHH\0R\x0bOIDECEEEKNK\x121\n\x0bMLMLDILDNMO\x18\xd5\x05\x20\x01(\x0b2\
    \x0c.FBHNOFKECKBH\0R\x0bMLMLDILDNMO\x121\n\x0bKDIIDLGFKEN\x18\xb9\x08\
    \x20\x01(\x0b2\x0c.JMMFBCMMKLLH\0R\x0bKDIIDLGFKEN\x121\n\x0bLBEJPIGOBNN\
    \x18\xbc\x03\x20\x01(\x0b2\x0c.JMMFBCMMKLLH\0R\x0bLBEJPIGOBNN\x121\n\x0b\
    IPENGNBLOKM\x18\xbc\x0c\x20\x01(\x0b2\x0c.JMMFBCMMKLLH\0R\x0bIPENGNBLOKM\
    \x121\n\x0bECIPCACJANC\x18\x9a\x0f\x20\x01(\x0b2\x0c.BCIHKEKHFEEH\0R\x0b\
    ECIPCACJANC\x12\x85\x01\n9ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_U\
    NIT_COMPOSE\x18\xc4\x0b\x20\x01(\x0b2\x0c.HELFBMIFAMIH\0R1ROGUECOMMONACT\
    IONRESULTSOURCETYPEMAGICUNITCOMPOSEB\r\n\x0bELPNOOCAFBEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(22);
            deps.push(super::AEHMDPPABEB::file_descriptor().clone());
            deps.push(super::BCIHKEKHFEE::file_descriptor().clone());
            deps.push(super::DBBPFLMIDLO::file_descriptor().clone());
            deps.push(super::DFDAADKLANI::file_descriptor().clone());
            deps.push(super::FBHNOFKECKB::file_descriptor().clone());
            deps.push(super::FPLEBODIJBB::file_descriptor().clone());
            deps.push(super::GOIPOKFHFBM::file_descriptor().clone());
            deps.push(super::HELFBMIFAMI::file_descriptor().clone());
            deps.push(super::IDMBOJBHDHB::file_descriptor().clone());
            deps.push(super::INADCANBFKK::file_descriptor().clone());
            deps.push(super::JHHIJKJNJJH::file_descriptor().clone());
            deps.push(super::JMMFBCMMKLL::file_descriptor().clone());
            deps.push(super::KBBMFEDLCJJ::file_descriptor().clone());
            deps.push(super::KGKOFJGBIDG::file_descriptor().clone());
            deps.push(super::KPLOBGOGALN::file_descriptor().clone());
            deps.push(super::LAKPPMMFCMP::file_descriptor().clone());
            deps.push(super::LCCKOAPCBNI::file_descriptor().clone());
            deps.push(super::LCLJAODHCCA::file_descriptor().clone());
            deps.push(super::NLGMKEGMKGM::file_descriptor().clone());
            deps.push(super::NLJOEAKKJKH::file_descriptor().clone());
            deps.push(super::NPIOJCAPICP::file_descriptor().clone());
            deps.push(super::PAPPEKLEDIK::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(KCIGLNKNJLH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
