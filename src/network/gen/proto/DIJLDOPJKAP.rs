// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DIJLDOPJKAP.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:DIJLDOPJKAP)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DIJLDOPJKAP {
    // message fields
    // @@protoc_insertion_point(field:DIJLDOPJKAP.LOEDAFFIFDH)
    pub LOEDAFFIFDH: bool,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.LFFMLLMDJNL)
    pub LFFMLLMDJNL: ::protobuf::EnumOrUnknown<super::LEFBICDEJDE::LEFBICDEJDE>,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.CPEMMCOJKDG)
    pub CPEMMCOJKDG: ::std::string::String,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.POOJFEBMGKF)
    pub POOJFEBMGKF: ::std::string::String,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.DACGDOIHLEH)
    pub DACGDOIHLEH: u32,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.OAABCKOBDBC)
    pub OAABCKOBDBC: i64,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.CFKBOBJKMFD)
    pub CFKBOBJKMFD: u32,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.NIDFCKMAAEH)
    pub NIDFCKMAAEH: ::std::string::String,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.LNCNOFOEHAA)
    pub LNCNOFOEHAA: u32,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.BEFBDLOPPCB)
    pub BEFBDLOPPCB: ::std::vec::Vec<super::AssistSimpleInfo::AssistSimpleInfo>,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.JKOCJIMAGBN)
    pub JKOCJIMAGBN: u32,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.AECLNDHLOFP)
    pub AECLNDHLOFP: ::std::string::String,
    // @@protoc_insertion_point(field:DIJLDOPJKAP.OAKEECFAFKO)
    pub OAKEECFAFKO: ::protobuf::EnumOrUnknown<super::DEMHCIBMGJG::DEMHCIBMGJG>,
    // special fields
    // @@protoc_insertion_point(special_field:DIJLDOPJKAP.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DIJLDOPJKAP {
    fn default() -> &'a DIJLDOPJKAP {
        <DIJLDOPJKAP as ::protobuf::Message>::default_instance()
    }
}

impl DIJLDOPJKAP {
    pub fn new() -> DIJLDOPJKAP {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LOEDAFFIFDH",
            |m: &DIJLDOPJKAP| { &m.LOEDAFFIFDH },
            |m: &mut DIJLDOPJKAP| { &mut m.LOEDAFFIFDH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LFFMLLMDJNL",
            |m: &DIJLDOPJKAP| { &m.LFFMLLMDJNL },
            |m: &mut DIJLDOPJKAP| { &mut m.LFFMLLMDJNL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPEMMCOJKDG",
            |m: &DIJLDOPJKAP| { &m.CPEMMCOJKDG },
            |m: &mut DIJLDOPJKAP| { &mut m.CPEMMCOJKDG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "POOJFEBMGKF",
            |m: &DIJLDOPJKAP| { &m.POOJFEBMGKF },
            |m: &mut DIJLDOPJKAP| { &mut m.POOJFEBMGKF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DACGDOIHLEH",
            |m: &DIJLDOPJKAP| { &m.DACGDOIHLEH },
            |m: &mut DIJLDOPJKAP| { &mut m.DACGDOIHLEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OAABCKOBDBC",
            |m: &DIJLDOPJKAP| { &m.OAABCKOBDBC },
            |m: &mut DIJLDOPJKAP| { &mut m.OAABCKOBDBC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CFKBOBJKMFD",
            |m: &DIJLDOPJKAP| { &m.CFKBOBJKMFD },
            |m: &mut DIJLDOPJKAP| { &mut m.CFKBOBJKMFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NIDFCKMAAEH",
            |m: &DIJLDOPJKAP| { &m.NIDFCKMAAEH },
            |m: &mut DIJLDOPJKAP| { &mut m.NIDFCKMAAEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LNCNOFOEHAA",
            |m: &DIJLDOPJKAP| { &m.LNCNOFOEHAA },
            |m: &mut DIJLDOPJKAP| { &mut m.LNCNOFOEHAA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BEFBDLOPPCB",
            |m: &DIJLDOPJKAP| { &m.BEFBDLOPPCB },
            |m: &mut DIJLDOPJKAP| { &mut m.BEFBDLOPPCB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JKOCJIMAGBN",
            |m: &DIJLDOPJKAP| { &m.JKOCJIMAGBN },
            |m: &mut DIJLDOPJKAP| { &mut m.JKOCJIMAGBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AECLNDHLOFP",
            |m: &DIJLDOPJKAP| { &m.AECLNDHLOFP },
            |m: &mut DIJLDOPJKAP| { &mut m.AECLNDHLOFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OAKEECFAFKO",
            |m: &DIJLDOPJKAP| { &m.OAKEECFAFKO },
            |m: &mut DIJLDOPJKAP| { &mut m.OAKEECFAFKO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DIJLDOPJKAP>(
            "DIJLDOPJKAP",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DIJLDOPJKAP {
    const NAME: &'static str = "DIJLDOPJKAP";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.LOEDAFFIFDH = is.read_bool()?;
                },
                56 => {
                    self.LFFMLLMDJNL = is.read_enum_or_unknown()?;
                },
                90 => {
                    self.CPEMMCOJKDG = is.read_string()?;
                },
                82 => {
                    self.POOJFEBMGKF = is.read_string()?;
                },
                48 => {
                    self.DACGDOIHLEH = is.read_uint32()?;
                },
                40 => {
                    self.OAABCKOBDBC = is.read_int64()?;
                },
                96 => {
                    self.CFKBOBJKMFD = is.read_uint32()?;
                },
                18 => {
                    self.NIDFCKMAAEH = is.read_string()?;
                },
                32 => {
                    self.LNCNOFOEHAA = is.read_uint32()?;
                },
                122 => {
                    self.BEFBDLOPPCB.push(is.read_message()?);
                },
                24 => {
                    self.JKOCJIMAGBN = is.read_uint32()?;
                },
                74 => {
                    self.AECLNDHLOFP = is.read_string()?;
                },
                112 => {
                    self.OAKEECFAFKO = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.LOEDAFFIFDH != false {
            my_size += 1 + 1;
        }
        if self.LFFMLLMDJNL != ::protobuf::EnumOrUnknown::new(super::LEFBICDEJDE::LEFBICDEJDE::EDITOR) {
            my_size += ::protobuf::rt::int32_size(7, self.LFFMLLMDJNL.value());
        }
        if !self.CPEMMCOJKDG.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.CPEMMCOJKDG);
        }
        if !self.POOJFEBMGKF.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.POOJFEBMGKF);
        }
        if self.DACGDOIHLEH != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.DACGDOIHLEH);
        }
        if self.OAABCKOBDBC != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.OAABCKOBDBC);
        }
        if self.CFKBOBJKMFD != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.CFKBOBJKMFD);
        }
        if !self.NIDFCKMAAEH.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.NIDFCKMAAEH);
        }
        if self.LNCNOFOEHAA != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.LNCNOFOEHAA);
        }
        for value in &self.BEFBDLOPPCB {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.JKOCJIMAGBN != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.JKOCJIMAGBN);
        }
        if !self.AECLNDHLOFP.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.AECLNDHLOFP);
        }
        if self.OAKEECFAFKO != ::protobuf::EnumOrUnknown::new(super::DEMHCIBMGJG::DEMHCIBMGJG::FRIEND_ONLINE_STATUS_OFFLINE) {
            my_size += ::protobuf::rt::int32_size(14, self.OAKEECFAFKO.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.LOEDAFFIFDH != false {
            os.write_bool(13, self.LOEDAFFIFDH)?;
        }
        if self.LFFMLLMDJNL != ::protobuf::EnumOrUnknown::new(super::LEFBICDEJDE::LEFBICDEJDE::EDITOR) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.LFFMLLMDJNL))?;
        }
        if !self.CPEMMCOJKDG.is_empty() {
            os.write_string(11, &self.CPEMMCOJKDG)?;
        }
        if !self.POOJFEBMGKF.is_empty() {
            os.write_string(10, &self.POOJFEBMGKF)?;
        }
        if self.DACGDOIHLEH != 0 {
            os.write_uint32(6, self.DACGDOIHLEH)?;
        }
        if self.OAABCKOBDBC != 0 {
            os.write_int64(5, self.OAABCKOBDBC)?;
        }
        if self.CFKBOBJKMFD != 0 {
            os.write_uint32(12, self.CFKBOBJKMFD)?;
        }
        if !self.NIDFCKMAAEH.is_empty() {
            os.write_string(2, &self.NIDFCKMAAEH)?;
        }
        if self.LNCNOFOEHAA != 0 {
            os.write_uint32(4, self.LNCNOFOEHAA)?;
        }
        for v in &self.BEFBDLOPPCB {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if self.JKOCJIMAGBN != 0 {
            os.write_uint32(3, self.JKOCJIMAGBN)?;
        }
        if !self.AECLNDHLOFP.is_empty() {
            os.write_string(9, &self.AECLNDHLOFP)?;
        }
        if self.OAKEECFAFKO != ::protobuf::EnumOrUnknown::new(super::DEMHCIBMGJG::DEMHCIBMGJG::FRIEND_ONLINE_STATUS_OFFLINE) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.OAKEECFAFKO))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DIJLDOPJKAP {
        DIJLDOPJKAP::new()
    }

    fn clear(&mut self) {
        self.LOEDAFFIFDH = false;
        self.LFFMLLMDJNL = ::protobuf::EnumOrUnknown::new(super::LEFBICDEJDE::LEFBICDEJDE::EDITOR);
        self.CPEMMCOJKDG.clear();
        self.POOJFEBMGKF.clear();
        self.DACGDOIHLEH = 0;
        self.OAABCKOBDBC = 0;
        self.CFKBOBJKMFD = 0;
        self.NIDFCKMAAEH.clear();
        self.LNCNOFOEHAA = 0;
        self.BEFBDLOPPCB.clear();
        self.JKOCJIMAGBN = 0;
        self.AECLNDHLOFP.clear();
        self.OAKEECFAFKO = ::protobuf::EnumOrUnknown::new(super::DEMHCIBMGJG::DEMHCIBMGJG::FRIEND_ONLINE_STATUS_OFFLINE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DIJLDOPJKAP {
        static instance: DIJLDOPJKAP = DIJLDOPJKAP {
            LOEDAFFIFDH: false,
            LFFMLLMDJNL: ::protobuf::EnumOrUnknown::from_i32(0),
            CPEMMCOJKDG: ::std::string::String::new(),
            POOJFEBMGKF: ::std::string::String::new(),
            DACGDOIHLEH: 0,
            OAABCKOBDBC: 0,
            CFKBOBJKMFD: 0,
            NIDFCKMAAEH: ::std::string::String::new(),
            LNCNOFOEHAA: 0,
            BEFBDLOPPCB: ::std::vec::Vec::new(),
            JKOCJIMAGBN: 0,
            AECLNDHLOFP: ::std::string::String::new(),
            OAKEECFAFKO: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DIJLDOPJKAP {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DIJLDOPJKAP").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DIJLDOPJKAP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DIJLDOPJKAP {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DIJLDOPJKAP.proto\x1a\x16AssistSimpleInfo.proto\x1a\x11DEMHCIBMGJG\
    .proto\x1a\x11LEFBICDEJDE.proto\"\xf6\x03\n\x0bDIJLDOPJKAP\x12\x20\n\x0b\
    LOEDAFFIFDH\x18\r\x20\x01(\x08R\x0bLOEDAFFIFDH\x12.\n\x0bLFFMLLMDJNL\x18\
    \x07\x20\x01(\x0e2\x0c.LEFBICDEJDER\x0bLFFMLLMDJNL\x12\x20\n\x0bCPEMMCOJ\
    KDG\x18\x0b\x20\x01(\tR\x0bCPEMMCOJKDG\x12\x20\n\x0bPOOJFEBMGKF\x18\n\
    \x20\x01(\tR\x0bPOOJFEBMGKF\x12\x20\n\x0bDACGDOIHLEH\x18\x06\x20\x01(\rR\
    \x0bDACGDOIHLEH\x12\x20\n\x0bOAABCKOBDBC\x18\x05\x20\x01(\x03R\x0bOAABCK\
    OBDBC\x12\x20\n\x0bCFKBOBJKMFD\x18\x0c\x20\x01(\rR\x0bCFKBOBJKMFD\x12\
    \x20\n\x0bNIDFCKMAAEH\x18\x02\x20\x01(\tR\x0bNIDFCKMAAEH\x12\x20\n\x0bLN\
    CNOFOEHAA\x18\x04\x20\x01(\rR\x0bLNCNOFOEHAA\x123\n\x0bBEFBDLOPPCB\x18\
    \x0f\x20\x03(\x0b2\x11.AssistSimpleInfoR\x0bBEFBDLOPPCB\x12\x20\n\x0bJKO\
    CJIMAGBN\x18\x03\x20\x01(\rR\x0bJKOCJIMAGBN\x12\x20\n\x0bAECLNDHLOFP\x18\
    \t\x20\x01(\tR\x0bAECLNDHLOFP\x12.\n\x0bOAKEECFAFKO\x18\x0e\x20\x01(\x0e\
    2\x0c.DEMHCIBMGJGR\x0bOAKEECFAFKOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::AssistSimpleInfo::file_descriptor().clone());
            deps.push(super::DEMHCIBMGJG::file_descriptor().clone());
            deps.push(super::LEFBICDEJDE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DIJLDOPJKAP::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
