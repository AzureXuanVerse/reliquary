// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LobbyCreateCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:NIALDNOAGLG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NIALDNOAGLG {
    // message fields
    // @@protoc_insertion_point(field:NIALDNOAGLG.DKGKFMGOBCO)
    pub DKGKFMGOBCO: u32,
    // @@protoc_insertion_point(field:NIALDNOAGLG.KNEJBNKFIJD)
    pub KNEJBNKFIJD: bool,
    // @@protoc_insertion_point(field:NIALDNOAGLG.FPIENJEHMNB)
    pub FPIENJEHMNB: u32,
    // @@protoc_insertion_point(field:NIALDNOAGLG.OFBNHJABJHK)
    pub OFBNHJABJHK: u32,
    // special fields
    // @@protoc_insertion_point(special_field:NIALDNOAGLG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NIALDNOAGLG {
    fn default() -> &'a NIALDNOAGLG {
        <NIALDNOAGLG as ::protobuf::Message>::default_instance()
    }
}

impl NIALDNOAGLG {
    pub fn new() -> NIALDNOAGLG {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKGKFMGOBCO",
            |m: &NIALDNOAGLG| { &m.DKGKFMGOBCO },
            |m: &mut NIALDNOAGLG| { &mut m.DKGKFMGOBCO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KNEJBNKFIJD",
            |m: &NIALDNOAGLG| { &m.KNEJBNKFIJD },
            |m: &mut NIALDNOAGLG| { &mut m.KNEJBNKFIJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FPIENJEHMNB",
            |m: &NIALDNOAGLG| { &m.FPIENJEHMNB },
            |m: &mut NIALDNOAGLG| { &mut m.FPIENJEHMNB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OFBNHJABJHK",
            |m: &NIALDNOAGLG| { &m.OFBNHJABJHK },
            |m: &mut NIALDNOAGLG| { &mut m.OFBNHJABJHK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NIALDNOAGLG>(
            "NIALDNOAGLG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NIALDNOAGLG {
    const NAME: &'static str = "NIALDNOAGLG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.DKGKFMGOBCO = is.read_uint32()?;
                },
                16 => {
                    self.KNEJBNKFIJD = is.read_bool()?;
                },
                24 => {
                    self.FPIENJEHMNB = is.read_uint32()?;
                },
                32 => {
                    self.OFBNHJABJHK = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.DKGKFMGOBCO != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.DKGKFMGOBCO);
        }
        if self.KNEJBNKFIJD != false {
            my_size += 1 + 1;
        }
        if self.FPIENJEHMNB != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.FPIENJEHMNB);
        }
        if self.OFBNHJABJHK != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.OFBNHJABJHK);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.DKGKFMGOBCO != 0 {
            os.write_uint32(1, self.DKGKFMGOBCO)?;
        }
        if self.KNEJBNKFIJD != false {
            os.write_bool(2, self.KNEJBNKFIJD)?;
        }
        if self.FPIENJEHMNB != 0 {
            os.write_uint32(3, self.FPIENJEHMNB)?;
        }
        if self.OFBNHJABJHK != 0 {
            os.write_uint32(4, self.OFBNHJABJHK)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NIALDNOAGLG {
        NIALDNOAGLG::new()
    }

    fn clear(&mut self) {
        self.DKGKFMGOBCO = 0;
        self.KNEJBNKFIJD = false;
        self.FPIENJEHMNB = 0;
        self.OFBNHJABJHK = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NIALDNOAGLG {
        static instance: NIALDNOAGLG = NIALDNOAGLG {
            DKGKFMGOBCO: 0,
            KNEJBNKFIJD: false,
            FPIENJEHMNB: 0,
            OFBNHJABJHK: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NIALDNOAGLG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NIALDNOAGLG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NIALDNOAGLG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NIALDNOAGLG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:NDKCBDPOLAH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NDKCBDPOLAH {
    // message fields
    // @@protoc_insertion_point(field:NDKCBDPOLAH.FLJNMIJFHMC)
    pub FLJNMIJFHMC: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:NDKCBDPOLAH.ONLCHMIBGMD)
    pub ONLCHMIBGMD: bool,
    // @@protoc_insertion_point(field:NDKCBDPOLAH.IMLIPGKFEKI)
    pub IMLIPGKFEKI: ::protobuf::MessageField<NIALDNOAGLG>,
    // special fields
    // @@protoc_insertion_point(special_field:NDKCBDPOLAH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NDKCBDPOLAH {
    fn default() -> &'a NDKCBDPOLAH {
        <NDKCBDPOLAH as ::protobuf::Message>::default_instance()
    }
}

impl NDKCBDPOLAH {
    pub fn new() -> NDKCBDPOLAH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FLJNMIJFHMC",
            |m: &NDKCBDPOLAH| { &m.FLJNMIJFHMC },
            |m: &mut NDKCBDPOLAH| { &mut m.FLJNMIJFHMC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ONLCHMIBGMD",
            |m: &NDKCBDPOLAH| { &m.ONLCHMIBGMD },
            |m: &mut NDKCBDPOLAH| { &mut m.ONLCHMIBGMD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NIALDNOAGLG>(
            "IMLIPGKFEKI",
            |m: &NDKCBDPOLAH| { &m.IMLIPGKFEKI },
            |m: &mut NDKCBDPOLAH| { &mut m.IMLIPGKFEKI },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NDKCBDPOLAH>(
            "NDKCBDPOLAH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NDKCBDPOLAH {
    const NAME: &'static str = "NDKCBDPOLAH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.FLJNMIJFHMC.push(is.read_string()?);
                },
                16 => {
                    self.ONLCHMIBGMD = is.read_bool()?;
                },
                8010 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IMLIPGKFEKI)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.FLJNMIJFHMC {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.ONLCHMIBGMD != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.IMLIPGKFEKI.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.FLJNMIJFHMC {
            os.write_string(1, &v)?;
        };
        if self.ONLCHMIBGMD != false {
            os.write_bool(2, self.ONLCHMIBGMD)?;
        }
        if let Some(v) = self.IMLIPGKFEKI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1001, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NDKCBDPOLAH {
        NDKCBDPOLAH::new()
    }

    fn clear(&mut self) {
        self.FLJNMIJFHMC.clear();
        self.ONLCHMIBGMD = false;
        self.IMLIPGKFEKI.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NDKCBDPOLAH {
        static instance: NDKCBDPOLAH = NDKCBDPOLAH {
            FLJNMIJFHMC: ::std::vec::Vec::new(),
            ONLCHMIBGMD: false,
            IMLIPGKFEKI: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NDKCBDPOLAH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NDKCBDPOLAH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NDKCBDPOLAH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NDKCBDPOLAH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:LobbyPlayerBasicInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LobbyPlayerBasicInfo {
    // message fields
    // @@protoc_insertion_point(field:LobbyPlayerBasicInfo.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:LobbyPlayerBasicInfo.level)
    pub level: u32,
    // @@protoc_insertion_point(field:LobbyPlayerBasicInfo.nickname)
    pub nickname: ::std::string::String,
    // @@protoc_insertion_point(field:LobbyPlayerBasicInfo.HGAIOCIPCFB)
    pub HGAIOCIPCFB: u32,
    // @@protoc_insertion_point(field:LobbyPlayerBasicInfo.platform_type)
    pub platform_type: ::protobuf::EnumOrUnknown<super::PlatformType::PlatformType>,
    // @@protoc_insertion_point(field:LobbyPlayerBasicInfo.AIONAIPAKJC)
    pub AIONAIPAKJC: ::std::string::String,
    // @@protoc_insertion_point(field:LobbyPlayerBasicInfo.AJFJFDEBLLC)
    pub AJFJFDEBLLC: ::std::string::String,
    // @@protoc_insertion_point(field:LobbyPlayerBasicInfo.ONDGHFCDFBB)
    pub ONDGHFCDFBB: u64,
    // special fields
    // @@protoc_insertion_point(special_field:LobbyPlayerBasicInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LobbyPlayerBasicInfo {
    fn default() -> &'a LobbyPlayerBasicInfo {
        <LobbyPlayerBasicInfo as ::protobuf::Message>::default_instance()
    }
}

impl LobbyPlayerBasicInfo {
    pub fn new() -> LobbyPlayerBasicInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &LobbyPlayerBasicInfo| { &m.uid },
            |m: &mut LobbyPlayerBasicInfo| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &LobbyPlayerBasicInfo| { &m.level },
            |m: &mut LobbyPlayerBasicInfo| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nickname",
            |m: &LobbyPlayerBasicInfo| { &m.nickname },
            |m: &mut LobbyPlayerBasicInfo| { &mut m.nickname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HGAIOCIPCFB",
            |m: &LobbyPlayerBasicInfo| { &m.HGAIOCIPCFB },
            |m: &mut LobbyPlayerBasicInfo| { &mut m.HGAIOCIPCFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform_type",
            |m: &LobbyPlayerBasicInfo| { &m.platform_type },
            |m: &mut LobbyPlayerBasicInfo| { &mut m.platform_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AIONAIPAKJC",
            |m: &LobbyPlayerBasicInfo| { &m.AIONAIPAKJC },
            |m: &mut LobbyPlayerBasicInfo| { &mut m.AIONAIPAKJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AJFJFDEBLLC",
            |m: &LobbyPlayerBasicInfo| { &m.AJFJFDEBLLC },
            |m: &mut LobbyPlayerBasicInfo| { &mut m.AJFJFDEBLLC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ONDGHFCDFBB",
            |m: &LobbyPlayerBasicInfo| { &m.ONDGHFCDFBB },
            |m: &mut LobbyPlayerBasicInfo| { &mut m.ONDGHFCDFBB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LobbyPlayerBasicInfo>(
            "LobbyPlayerBasicInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LobbyPlayerBasicInfo {
    const NAME: &'static str = "LobbyPlayerBasicInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.uid = is.read_uint32()?;
                },
                16 => {
                    self.level = is.read_uint32()?;
                },
                26 => {
                    self.nickname = is.read_string()?;
                },
                32 => {
                    self.HGAIOCIPCFB = is.read_uint32()?;
                },
                40 => {
                    self.platform_type = is.read_enum_or_unknown()?;
                },
                50 => {
                    self.AIONAIPAKJC = is.read_string()?;
                },
                58 => {
                    self.AJFJFDEBLLC = is.read_string()?;
                },
                64 => {
                    self.ONDGHFCDFBB = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.uid);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.level);
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.nickname);
        }
        if self.HGAIOCIPCFB != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.HGAIOCIPCFB);
        }
        if self.platform_type != ::protobuf::EnumOrUnknown::new(super::PlatformType::PlatformType::EDITOR) {
            my_size += ::protobuf::rt::int32_size(5, self.platform_type.value());
        }
        if !self.AIONAIPAKJC.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.AIONAIPAKJC);
        }
        if !self.AJFJFDEBLLC.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.AJFJFDEBLLC);
        }
        if self.ONDGHFCDFBB != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.ONDGHFCDFBB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uid != 0 {
            os.write_uint32(1, self.uid)?;
        }
        if self.level != 0 {
            os.write_uint32(2, self.level)?;
        }
        if !self.nickname.is_empty() {
            os.write_string(3, &self.nickname)?;
        }
        if self.HGAIOCIPCFB != 0 {
            os.write_uint32(4, self.HGAIOCIPCFB)?;
        }
        if self.platform_type != ::protobuf::EnumOrUnknown::new(super::PlatformType::PlatformType::EDITOR) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.platform_type))?;
        }
        if !self.AIONAIPAKJC.is_empty() {
            os.write_string(6, &self.AIONAIPAKJC)?;
        }
        if !self.AJFJFDEBLLC.is_empty() {
            os.write_string(7, &self.AJFJFDEBLLC)?;
        }
        if self.ONDGHFCDFBB != 0 {
            os.write_uint64(8, self.ONDGHFCDFBB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LobbyPlayerBasicInfo {
        LobbyPlayerBasicInfo::new()
    }

    fn clear(&mut self) {
        self.uid = 0;
        self.level = 0;
        self.nickname.clear();
        self.HGAIOCIPCFB = 0;
        self.platform_type = ::protobuf::EnumOrUnknown::new(super::PlatformType::PlatformType::EDITOR);
        self.AIONAIPAKJC.clear();
        self.AJFJFDEBLLC.clear();
        self.ONDGHFCDFBB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LobbyPlayerBasicInfo {
        static instance: LobbyPlayerBasicInfo = LobbyPlayerBasicInfo {
            uid: 0,
            level: 0,
            nickname: ::std::string::String::new(),
            HGAIOCIPCFB: 0,
            platform_type: ::protobuf::EnumOrUnknown::from_i32(0),
            AIONAIPAKJC: ::std::string::String::new(),
            AJFJFDEBLLC: ::std::string::String::new(),
            ONDGHFCDFBB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LobbyPlayerBasicInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LobbyPlayerBasicInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LobbyPlayerBasicInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LobbyPlayerBasicInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:OBJPLDJBJPP)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OBJPLDJBJPP {
    // message fields
    // @@protoc_insertion_point(field:OBJPLDJBJPP.FBLHHBDIKDE)
    pub FBLHHBDIKDE: ::protobuf::EnumOrUnknown<LobbyCharacter>,
    // @@protoc_insertion_point(field:OBJPLDJBJPP.status)
    pub status: ::protobuf::EnumOrUnknown<super::LobbyCharacterStatus::LobbyCharacterStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:OBJPLDJBJPP.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OBJPLDJBJPP {
    fn default() -> &'a OBJPLDJBJPP {
        <OBJPLDJBJPP as ::protobuf::Message>::default_instance()
    }
}

impl OBJPLDJBJPP {
    pub fn new() -> OBJPLDJBJPP {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FBLHHBDIKDE",
            |m: &OBJPLDJBJPP| { &m.FBLHHBDIKDE },
            |m: &mut OBJPLDJBJPP| { &mut m.FBLHHBDIKDE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &OBJPLDJBJPP| { &m.status },
            |m: &mut OBJPLDJBJPP| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OBJPLDJBJPP>(
            "OBJPLDJBJPP",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OBJPLDJBJPP {
    const NAME: &'static str = "OBJPLDJBJPP";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.FBLHHBDIKDE = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.FBLHHBDIKDE != ::protobuf::EnumOrUnknown::new(LobbyCharacter::LobbyCharacter_None) {
            my_size += ::protobuf::rt::int32_size(1, self.FBLHHBDIKDE.value());
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::LobbyCharacterStatus::LobbyCharacterStatus::LobbyCharacterStatus_None) {
            my_size += ::protobuf::rt::int32_size(2, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.FBLHHBDIKDE != ::protobuf::EnumOrUnknown::new(LobbyCharacter::LobbyCharacter_None) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.FBLHHBDIKDE))?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::LobbyCharacterStatus::LobbyCharacterStatus::LobbyCharacterStatus_None) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OBJPLDJBJPP {
        OBJPLDJBJPP::new()
    }

    fn clear(&mut self) {
        self.FBLHHBDIKDE = ::protobuf::EnumOrUnknown::new(LobbyCharacter::LobbyCharacter_None);
        self.status = ::protobuf::EnumOrUnknown::new(super::LobbyCharacterStatus::LobbyCharacterStatus::LobbyCharacterStatus_None);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OBJPLDJBJPP {
        static instance: OBJPLDJBJPP = OBJPLDJBJPP {
            FBLHHBDIKDE: ::protobuf::EnumOrUnknown::from_i32(0),
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OBJPLDJBJPP {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OBJPLDJBJPP").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OBJPLDJBJPP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OBJPLDJBJPP {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:NEGHNNKJCIH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NEGHNNKJCIH {
    // message fields
    // @@protoc_insertion_point(field:NEGHNNKJCIH.basic_info)
    pub basic_info: ::protobuf::MessageField<LobbyPlayerBasicInfo>,
    // @@protoc_insertion_point(field:NEGHNNKJCIH.MCCACFKDMDK)
    pub MCCACFKDMDK: ::protobuf::MessageField<OBJPLDJBJPP>,
    // @@protoc_insertion_point(field:NEGHNNKJCIH.LEIGLHBEAAN)
    pub LEIGLHBEAAN: ::protobuf::MessageField<NDKCBDPOLAH>,
    // special fields
    // @@protoc_insertion_point(special_field:NEGHNNKJCIH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NEGHNNKJCIH {
    fn default() -> &'a NEGHNNKJCIH {
        <NEGHNNKJCIH as ::protobuf::Message>::default_instance()
    }
}

impl NEGHNNKJCIH {
    pub fn new() -> NEGHNNKJCIH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LobbyPlayerBasicInfo>(
            "basic_info",
            |m: &NEGHNNKJCIH| { &m.basic_info },
            |m: &mut NEGHNNKJCIH| { &mut m.basic_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, OBJPLDJBJPP>(
            "MCCACFKDMDK",
            |m: &NEGHNNKJCIH| { &m.MCCACFKDMDK },
            |m: &mut NEGHNNKJCIH| { &mut m.MCCACFKDMDK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NDKCBDPOLAH>(
            "LEIGLHBEAAN",
            |m: &NEGHNNKJCIH| { &m.LEIGLHBEAAN },
            |m: &mut NEGHNNKJCIH| { &mut m.LEIGLHBEAAN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NEGHNNKJCIH>(
            "NEGHNNKJCIH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NEGHNNKJCIH {
    const NAME: &'static str = "NEGHNNKJCIH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.basic_info)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MCCACFKDMDK)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LEIGLHBEAAN)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.basic_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MCCACFKDMDK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LEIGLHBEAAN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.basic_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.MCCACFKDMDK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.LEIGLHBEAAN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NEGHNNKJCIH {
        NEGHNNKJCIH::new()
    }

    fn clear(&mut self) {
        self.basic_info.clear();
        self.MCCACFKDMDK.clear();
        self.LEIGLHBEAAN.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NEGHNNKJCIH {
        static instance: NEGHNNKJCIH = NEGHNNKJCIH {
            basic_info: ::protobuf::MessageField::none(),
            MCCACFKDMDK: ::protobuf::MessageField::none(),
            LEIGLHBEAAN: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NEGHNNKJCIH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NEGHNNKJCIH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NEGHNNKJCIH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NEGHNNKJCIH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:LobbyCreateCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LobbyCreateCsReq {
    // message fields
    // @@protoc_insertion_point(field:LobbyCreateCsReq.lddndlnleej)
    pub lddndlnleej: ::protobuf::MessageField<NDKCBDPOLAH>,
    // @@protoc_insertion_point(field:LobbyCreateCsReq.pbddbplodlm)
    pub pbddbplodlm: ::protobuf::EnumOrUnknown<FightGameModeType>,
    // special fields
    // @@protoc_insertion_point(special_field:LobbyCreateCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LobbyCreateCsReq {
    fn default() -> &'a LobbyCreateCsReq {
        <LobbyCreateCsReq as ::protobuf::Message>::default_instance()
    }
}

impl LobbyCreateCsReq {
    pub fn new() -> LobbyCreateCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NDKCBDPOLAH>(
            "lddndlnleej",
            |m: &LobbyCreateCsReq| { &m.lddndlnleej },
            |m: &mut LobbyCreateCsReq| { &mut m.lddndlnleej },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pbddbplodlm",
            |m: &LobbyCreateCsReq| { &m.pbddbplodlm },
            |m: &mut LobbyCreateCsReq| { &mut m.pbddbplodlm },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LobbyCreateCsReq>(
            "LobbyCreateCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LobbyCreateCsReq {
    const NAME: &'static str = "LobbyCreateCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lddndlnleej)?;
                },
                16 => {
                    self.pbddbplodlm = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.lddndlnleej.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.pbddbplodlm != ::protobuf::EnumOrUnknown::new(FightGameModeType::FIGHT_GAME_MODE_NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.pbddbplodlm.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.lddndlnleej.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.pbddbplodlm != ::protobuf::EnumOrUnknown::new(FightGameModeType::FIGHT_GAME_MODE_NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.pbddbplodlm))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LobbyCreateCsReq {
        LobbyCreateCsReq::new()
    }

    fn clear(&mut self) {
        self.lddndlnleej.clear();
        self.pbddbplodlm = ::protobuf::EnumOrUnknown::new(FightGameModeType::FIGHT_GAME_MODE_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LobbyCreateCsReq {
        static instance: LobbyCreateCsReq = LobbyCreateCsReq {
            lddndlnleej: ::protobuf::MessageField::none(),
            pbddbplodlm: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LobbyCreateCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LobbyCreateCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LobbyCreateCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LobbyCreateCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:LobbyCreateScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LobbyCreateScRsp {
    // message fields
    // @@protoc_insertion_point(field:LobbyCreateScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:LobbyCreateScRsp.DBGNKFJCEMC)
    pub DBGNKFJCEMC: ::std::vec::Vec<NEGHNNKJCIH>,
    // @@protoc_insertion_point(field:LobbyCreateScRsp.PBDDBPLODLM)
    pub PBDDBPLODLM: ::protobuf::EnumOrUnknown<FightGameModeType>,
    // @@protoc_insertion_point(field:LobbyCreateScRsp.KGGIENCOBNL)
    pub KGGIENCOBNL: u64,
    // special fields
    // @@protoc_insertion_point(special_field:LobbyCreateScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LobbyCreateScRsp {
    fn default() -> &'a LobbyCreateScRsp {
        <LobbyCreateScRsp as ::protobuf::Message>::default_instance()
    }
}

impl LobbyCreateScRsp {
    pub fn new() -> LobbyCreateScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &LobbyCreateScRsp| { &m.retcode },
            |m: &mut LobbyCreateScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DBGNKFJCEMC",
            |m: &LobbyCreateScRsp| { &m.DBGNKFJCEMC },
            |m: &mut LobbyCreateScRsp| { &mut m.DBGNKFJCEMC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PBDDBPLODLM",
            |m: &LobbyCreateScRsp| { &m.PBDDBPLODLM },
            |m: &mut LobbyCreateScRsp| { &mut m.PBDDBPLODLM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KGGIENCOBNL",
            |m: &LobbyCreateScRsp| { &m.KGGIENCOBNL },
            |m: &mut LobbyCreateScRsp| { &mut m.KGGIENCOBNL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LobbyCreateScRsp>(
            "LobbyCreateScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LobbyCreateScRsp {
    const NAME: &'static str = "LobbyCreateScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.retcode = is.read_uint32()?;
                },
                58 => {
                    self.DBGNKFJCEMC.push(is.read_message()?);
                },
                72 => {
                    self.PBDDBPLODLM = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.KGGIENCOBNL = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.retcode);
        }
        for value in &self.DBGNKFJCEMC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.PBDDBPLODLM != ::protobuf::EnumOrUnknown::new(FightGameModeType::FIGHT_GAME_MODE_NONE) {
            my_size += ::protobuf::rt::int32_size(9, self.PBDDBPLODLM.value());
        }
        if self.KGGIENCOBNL != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.KGGIENCOBNL);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(14, self.retcode)?;
        }
        for v in &self.DBGNKFJCEMC {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.PBDDBPLODLM != ::protobuf::EnumOrUnknown::new(FightGameModeType::FIGHT_GAME_MODE_NONE) {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&self.PBDDBPLODLM))?;
        }
        if self.KGGIENCOBNL != 0 {
            os.write_uint64(4, self.KGGIENCOBNL)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LobbyCreateScRsp {
        LobbyCreateScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.DBGNKFJCEMC.clear();
        self.PBDDBPLODLM = ::protobuf::EnumOrUnknown::new(FightGameModeType::FIGHT_GAME_MODE_NONE);
        self.KGGIENCOBNL = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LobbyCreateScRsp {
        static instance: LobbyCreateScRsp = LobbyCreateScRsp {
            retcode: 0,
            DBGNKFJCEMC: ::std::vec::Vec::new(),
            PBDDBPLODLM: ::protobuf::EnumOrUnknown::from_i32(0),
            KGGIENCOBNL: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LobbyCreateScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LobbyCreateScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LobbyCreateScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LobbyCreateScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:FightGameModeType)
pub enum FightGameModeType {
    // @@protoc_insertion_point(enum_value:FightGameModeType.FIGHT_GAME_MODE_NONE)
    FIGHT_GAME_MODE_NONE = 0,
    // @@protoc_insertion_point(enum_value:FightGameModeType.FIGHT_GAME_MODE_MATCH3)
    FIGHT_GAME_MODE_MATCH3 = 1,
}

impl ::protobuf::Enum for FightGameModeType {
    const NAME: &'static str = "FightGameModeType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FightGameModeType> {
        match value {
            0 => ::std::option::Option::Some(FightGameModeType::FIGHT_GAME_MODE_NONE),
            1 => ::std::option::Option::Some(FightGameModeType::FIGHT_GAME_MODE_MATCH3),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<FightGameModeType> {
        match str {
            "FIGHT_GAME_MODE_NONE" => ::std::option::Option::Some(FightGameModeType::FIGHT_GAME_MODE_NONE),
            "FIGHT_GAME_MODE_MATCH3" => ::std::option::Option::Some(FightGameModeType::FIGHT_GAME_MODE_MATCH3),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [FightGameModeType] = &[
        FightGameModeType::FIGHT_GAME_MODE_NONE,
        FightGameModeType::FIGHT_GAME_MODE_MATCH3,
    ];
}

impl ::protobuf::EnumFull for FightGameModeType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("FightGameModeType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for FightGameModeType {
    fn default() -> Self {
        FightGameModeType::FIGHT_GAME_MODE_NONE
    }
}

impl FightGameModeType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<FightGameModeType>("FightGameModeType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:LobbyCharacter)
pub enum LobbyCharacter {
    // @@protoc_insertion_point(enum_value:LobbyCharacter.LobbyCharacter_None)
    LobbyCharacter_None = 0,
    // @@protoc_insertion_point(enum_value:LobbyCharacter.LobbyCharacter_Leader)
    LobbyCharacter_Leader = 1,
    // @@protoc_insertion_point(enum_value:LobbyCharacter.LobbyCharacter_Member)
    LobbyCharacter_Member = 2,
    // @@protoc_insertion_point(enum_value:LobbyCharacter.LobbyCharacter_Watcher)
    LobbyCharacter_Watcher = 3,
}

impl ::protobuf::Enum for LobbyCharacter {
    const NAME: &'static str = "LobbyCharacter";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LobbyCharacter> {
        match value {
            0 => ::std::option::Option::Some(LobbyCharacter::LobbyCharacter_None),
            1 => ::std::option::Option::Some(LobbyCharacter::LobbyCharacter_Leader),
            2 => ::std::option::Option::Some(LobbyCharacter::LobbyCharacter_Member),
            3 => ::std::option::Option::Some(LobbyCharacter::LobbyCharacter_Watcher),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<LobbyCharacter> {
        match str {
            "LobbyCharacter_None" => ::std::option::Option::Some(LobbyCharacter::LobbyCharacter_None),
            "LobbyCharacter_Leader" => ::std::option::Option::Some(LobbyCharacter::LobbyCharacter_Leader),
            "LobbyCharacter_Member" => ::std::option::Option::Some(LobbyCharacter::LobbyCharacter_Member),
            "LobbyCharacter_Watcher" => ::std::option::Option::Some(LobbyCharacter::LobbyCharacter_Watcher),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [LobbyCharacter] = &[
        LobbyCharacter::LobbyCharacter_None,
        LobbyCharacter::LobbyCharacter_Leader,
        LobbyCharacter::LobbyCharacter_Member,
        LobbyCharacter::LobbyCharacter_Watcher,
    ];
}

impl ::protobuf::EnumFull for LobbyCharacter {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("LobbyCharacter").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for LobbyCharacter {
    fn default() -> Self {
        LobbyCharacter::LobbyCharacter_None
    }
}

impl LobbyCharacter {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LobbyCharacter>("LobbyCharacter")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:LobbyCharacterStatus)
pub enum LobbyCharacterStatus {
    // @@protoc_insertion_point(enum_value:LobbyCharacterStatus.LobbyCharacterStatus_None)
    LobbyCharacterStatus_None = 0,
    // @@protoc_insertion_point(enum_value:LobbyCharacterStatus.LobbyCharacterStatus_Idle)
    LobbyCharacterStatus_Idle = 1,
    // @@protoc_insertion_point(enum_value:LobbyCharacterStatus.LobbyCharacterStatus_Operating)
    LobbyCharacterStatus_Operating = 2,
    // @@protoc_insertion_point(enum_value:LobbyCharacterStatus.LobbyCharacterStatus_Ready)
    LobbyCharacterStatus_Ready = 3,
    // @@protoc_insertion_point(enum_value:LobbyCharacterStatus.LobbyCharacterStatus_Fighting)
    LobbyCharacterStatus_Fighting = 4,
    // @@protoc_insertion_point(enum_value:LobbyCharacterStatus.LobbyCharacterStatus_Watching)
    LobbyCharacterStatus_Watching = 5,
    // @@protoc_insertion_point(enum_value:LobbyCharacterStatus.LobbyCharacterStatus_Matching)
    LobbyCharacterStatus_Matching = 6,
}

impl ::protobuf::Enum for LobbyCharacterStatus {
    const NAME: &'static str = "LobbyCharacterStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LobbyCharacterStatus> {
        match value {
            0 => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_None),
            1 => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Idle),
            2 => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Operating),
            3 => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Ready),
            4 => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Fighting),
            5 => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Watching),
            6 => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Matching),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<LobbyCharacterStatus> {
        match str {
            "LobbyCharacterStatus_None" => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_None),
            "LobbyCharacterStatus_Idle" => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Idle),
            "LobbyCharacterStatus_Operating" => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Operating),
            "LobbyCharacterStatus_Ready" => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Ready),
            "LobbyCharacterStatus_Fighting" => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Fighting),
            "LobbyCharacterStatus_Watching" => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Watching),
            "LobbyCharacterStatus_Matching" => ::std::option::Option::Some(LobbyCharacterStatus::LobbyCharacterStatus_Matching),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [LobbyCharacterStatus] = &[
        LobbyCharacterStatus::LobbyCharacterStatus_None,
        LobbyCharacterStatus::LobbyCharacterStatus_Idle,
        LobbyCharacterStatus::LobbyCharacterStatus_Operating,
        LobbyCharacterStatus::LobbyCharacterStatus_Ready,
        LobbyCharacterStatus::LobbyCharacterStatus_Fighting,
        LobbyCharacterStatus::LobbyCharacterStatus_Watching,
        LobbyCharacterStatus::LobbyCharacterStatus_Matching,
    ];
}

impl ::protobuf::EnumFull for LobbyCharacterStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("LobbyCharacterStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for LobbyCharacterStatus {
    fn default() -> Self {
        LobbyCharacterStatus::LobbyCharacterStatus_None
    }
}

impl LobbyCharacterStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LobbyCharacterStatus>("LobbyCharacterStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16LobbyCreateCsReq.proto\x1a\x12PlatformType.proto\"\x95\x01\n\x0bNI\
    ALDNOAGLG\x12\x20\n\x0bDKGKFMGOBCO\x18\x01\x20\x01(\rR\x0bDKGKFMGOBCO\
    \x12\x20\n\x0bKNEJBNKFIJD\x18\x02\x20\x01(\x08R\x0bKNEJBNKFIJD\x12\x20\n\
    \x0bFPIENJEHMNB\x18\x03\x20\x01(\rR\x0bFPIENJEHMNB\x12\x20\n\x0bOFBNHJAB\
    JHK\x18\x04\x20\x01(\rR\x0bOFBNHJABJHK\"\x82\x01\n\x0bNDKCBDPOLAH\x12\
    \x20\n\x0bFLJNMIJFHMC\x18\x01\x20\x03(\tR\x0bFLJNMIJFHMC\x12\x20\n\x0bON\
    LCHMIBGMD\x18\x02\x20\x01(\x08R\x0bONLCHMIBGMD\x12/\n\x0bIMLIPGKFEKI\x18\
    \xe9\x07\x20\x01(\x0b2\x0c.NIALDNOAGLGR\x0bIMLIPGKFEKI\"\x96\x02\n\x14Lo\
    bbyPlayerBasicInfo\x12\x10\n\x03uid\x18\x01\x20\x01(\rR\x03uid\x12\x14\n\
    \x05level\x18\x02\x20\x01(\rR\x05level\x12\x1a\n\x08nickname\x18\x03\x20\
    \x01(\tR\x08nickname\x12\x20\n\x0bHGAIOCIPCFB\x18\x04\x20\x01(\rR\x0bHGA\
    IOCIPCFB\x122\n\rplatform_type\x18\x05\x20\x01(\x0e2\r.PlatformTypeR\x0c\
    platformType\x12\x20\n\x0bAIONAIPAKJC\x18\x06\x20\x01(\tR\x0bAIONAIPAKJC\
    \x12\x20\n\x0bAJFJFDEBLLC\x18\x07\x20\x01(\tR\x0bAJFJFDEBLLC\x12\x20\n\
    \x0bONDGHFCDFBB\x18\x08\x20\x01(\x04R\x0bONDGHFCDFBB\"o\n\x0bOBJPLDJBJPP\
    \x121\n\x0bFBLHHBDIKDE\x18\x01\x20\x01(\x0e2\x0f.LobbyCharacterR\x0bFBLH\
    HBDIKDE\x12-\n\x06status\x18\x02\x20\x01(\x0e2\x15.LobbyCharacterStatusR\
    \x06status\"\xa3\x01\n\x0bNEGHNNKJCIH\x124\n\nbasic_info\x18\x01\x20\x01\
    (\x0b2\x15.LobbyPlayerBasicInfoR\tbasicInfo\x12.\n\x0bMCCACFKDMDK\x18\
    \x02\x20\x01(\x0b2\x0c.OBJPLDJBJPPR\x0bMCCACFKDMDK\x12.\n\x0bLEIGLHBEAAN\
    \x18\x03\x20\x01(\x0b2\x0c.NDKCBDPOLAHR\x0bLEIGLHBEAAN\"x\n\x10LobbyCrea\
    teCsReq\x12.\n\x0blddndlnleej\x18\r\x20\x01(\x0b2\x0c.NDKCBDPOLAHR\x0bld\
    dndlnleej\x124\n\x0bpbddbplodlm\x18\x02\x20\x01(\x0e2\x12.FightGameModeT\
    ypeR\x0bpbddbplodlm\"\xb4\x01\n\x10LobbyCreateScRsp\x12\x18\n\x07retcode\
    \x18\x0e\x20\x01(\rR\x07retcode\x12.\n\x0bDBGNKFJCEMC\x18\x07\x20\x03(\
    \x0b2\x0c.NEGHNNKJCIHR\x0bDBGNKFJCEMC\x124\n\x0bPBDDBPLODLM\x18\t\x20\
    \x01(\x0e2\x12.FightGameModeTypeR\x0bPBDDBPLODLM\x12\x20\n\x0bKGGIENCOBN\
    L\x18\x04\x20\x01(\x04R\x0bKGGIENCOBNL*I\n\x11FightGameModeType\x12\x18\
    \n\x14FIGHT_GAME_MODE_NONE\x10\0\x12\x1a\n\x16FIGHT_GAME_MODE_MATCH3\x10\
    \x01*{\n\x0eLobbyCharacter\x12\x17\n\x13LobbyCharacter_None\x10\0\x12\
    \x19\n\x15LobbyCharacter_Leader\x10\x01\x12\x19\n\x15LobbyCharacter_Memb\
    er\x10\x02\x12\x1a\n\x16LobbyCharacter_Watcher\x10\x03*\x81\x02\n\x14Lob\
    byCharacterStatus\x12\x1d\n\x19LobbyCharacterStatus_None\x10\0\x12\x1d\n\
    \x19LobbyCharacterStatus_Idle\x10\x01\x12\"\n\x1eLobbyCharacterStatus_Op\
    erating\x10\x02\x12\x1e\n\x1aLobbyCharacterStatus_Ready\x10\x03\x12!\n\
    \x1dLobbyCharacterStatus_Fighting\x10\x04\x12!\n\x1dLobbyCharacterStatus\
    _Watching\x10\x05\x12!\n\x1dLobbyCharacterStatus_Matching\x10\x06B\x15\n\
    \x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::PlatformType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(NIALDNOAGLG::generated_message_descriptor_data());
            messages.push(NDKCBDPOLAH::generated_message_descriptor_data());
            messages.push(LobbyPlayerBasicInfo::generated_message_descriptor_data());
            messages.push(OBJPLDJBJPP::generated_message_descriptor_data());
            messages.push(NEGHNNKJCIH::generated_message_descriptor_data());
            messages.push(LobbyCreateCsReq::generated_message_descriptor_data());
            messages.push(LobbyCreateScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(FightGameModeType::generated_enum_descriptor_data());
            enums.push(LobbyCharacter::generated_enum_descriptor_data());
            enums.push(LobbyCharacterStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
