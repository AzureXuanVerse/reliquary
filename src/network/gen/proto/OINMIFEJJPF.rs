// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OINMIFEJJPF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:OINMIFEJJPF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OINMIFEJJPF {
    // message fields
    // @@protoc_insertion_point(field:OINMIFEJJPF.finish_time)
    pub finish_time: i64,
    // @@protoc_insertion_point(field:OINMIFEJJPF.LAEAHDLHOGD)
    pub LAEAHDLHOGD: bool,
    // @@protoc_insertion_point(field:OINMIFEJJPF.status)
    pub status: ::protobuf::EnumOrUnknown<super::KPHNHCHPCBJ::KPHNHCHPCBJ>,
    // @@protoc_insertion_point(field:OINMIFEJJPF.LHBLFMFEGMM)
    pub LHBLFMFEGMM: u32,
    // @@protoc_insertion_point(field:OINMIFEJJPF.ECMAMMPKAGN)
    pub ECMAMMPKAGN: u32,
    // @@protoc_insertion_point(field:OINMIFEJJPF.HDDGPMMNICD)
    pub HDDGPMMNICD: u32,
    // @@protoc_insertion_point(field:OINMIFEJJPF.PMJLDMLNEJG)
    pub PMJLDMLNEJG: i64,
    // @@protoc_insertion_point(field:OINMIFEJJPF.NOFCPIPLKOI)
    pub NOFCPIPLKOI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OINMIFEJJPF.MEEFIIHPBHG)
    pub MEEFIIHPBHG: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:OINMIFEJJPF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OINMIFEJJPF {
    fn default() -> &'a OINMIFEJJPF {
        <OINMIFEJJPF as ::protobuf::Message>::default_instance()
    }
}

impl OINMIFEJJPF {
    pub fn new() -> OINMIFEJJPF {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "finish_time",
            |m: &OINMIFEJJPF| { &m.finish_time },
            |m: &mut OINMIFEJJPF| { &mut m.finish_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LAEAHDLHOGD",
            |m: &OINMIFEJJPF| { &m.LAEAHDLHOGD },
            |m: &mut OINMIFEJJPF| { &mut m.LAEAHDLHOGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &OINMIFEJJPF| { &m.status },
            |m: &mut OINMIFEJJPF| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LHBLFMFEGMM",
            |m: &OINMIFEJJPF| { &m.LHBLFMFEGMM },
            |m: &mut OINMIFEJJPF| { &mut m.LHBLFMFEGMM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ECMAMMPKAGN",
            |m: &OINMIFEJJPF| { &m.ECMAMMPKAGN },
            |m: &mut OINMIFEJJPF| { &mut m.ECMAMMPKAGN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HDDGPMMNICD",
            |m: &OINMIFEJJPF| { &m.HDDGPMMNICD },
            |m: &mut OINMIFEJJPF| { &mut m.HDDGPMMNICD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PMJLDMLNEJG",
            |m: &OINMIFEJJPF| { &m.PMJLDMLNEJG },
            |m: &mut OINMIFEJJPF| { &mut m.PMJLDMLNEJG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NOFCPIPLKOI",
            |m: &OINMIFEJJPF| { &m.NOFCPIPLKOI },
            |m: &mut OINMIFEJJPF| { &mut m.NOFCPIPLKOI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MEEFIIHPBHG",
            |m: &OINMIFEJJPF| { &m.MEEFIIHPBHG },
            |m: &mut OINMIFEJJPF| { &mut m.MEEFIIHPBHG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OINMIFEJJPF>(
            "OINMIFEJJPF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OINMIFEJJPF {
    const NAME: &'static str = "OINMIFEJJPF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.finish_time = is.read_int64()?;
                },
                16 => {
                    self.LAEAHDLHOGD = is.read_bool()?;
                },
                64 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.LHBLFMFEGMM = is.read_uint32()?;
                },
                96 => {
                    self.ECMAMMPKAGN = is.read_uint32()?;
                },
                56 => {
                    self.HDDGPMMNICD = is.read_uint32()?;
                },
                8 => {
                    self.PMJLDMLNEJG = is.read_int64()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.NOFCPIPLKOI)?;
                },
                40 => {
                    self.NOFCPIPLKOI.push(is.read_uint32()?);
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.MEEFIIHPBHG)?;
                },
                88 => {
                    self.MEEFIIHPBHG.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.finish_time != 0 {
            my_size += ::protobuf::rt::int64_size(14, self.finish_time);
        }
        if self.LAEAHDLHOGD != false {
            my_size += 1 + 1;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::KPHNHCHPCBJ::KPHNHCHPCBJ::PLAYER_RETURN_NONE) {
            my_size += ::protobuf::rt::int32_size(8, self.status.value());
        }
        if self.LHBLFMFEGMM != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.LHBLFMFEGMM);
        }
        if self.ECMAMMPKAGN != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.ECMAMMPKAGN);
        }
        if self.HDDGPMMNICD != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.HDDGPMMNICD);
        }
        if self.PMJLDMLNEJG != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.PMJLDMLNEJG);
        }
        for value in &self.NOFCPIPLKOI {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        for value in &self.MEEFIIHPBHG {
            my_size += ::protobuf::rt::uint32_size(11, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.finish_time != 0 {
            os.write_int64(14, self.finish_time)?;
        }
        if self.LAEAHDLHOGD != false {
            os.write_bool(2, self.LAEAHDLHOGD)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::KPHNHCHPCBJ::KPHNHCHPCBJ::PLAYER_RETURN_NONE) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if self.LHBLFMFEGMM != 0 {
            os.write_uint32(4, self.LHBLFMFEGMM)?;
        }
        if self.ECMAMMPKAGN != 0 {
            os.write_uint32(12, self.ECMAMMPKAGN)?;
        }
        if self.HDDGPMMNICD != 0 {
            os.write_uint32(7, self.HDDGPMMNICD)?;
        }
        if self.PMJLDMLNEJG != 0 {
            os.write_int64(1, self.PMJLDMLNEJG)?;
        }
        for v in &self.NOFCPIPLKOI {
            os.write_uint32(5, *v)?;
        };
        for v in &self.MEEFIIHPBHG {
            os.write_uint32(11, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OINMIFEJJPF {
        OINMIFEJJPF::new()
    }

    fn clear(&mut self) {
        self.finish_time = 0;
        self.LAEAHDLHOGD = false;
        self.status = ::protobuf::EnumOrUnknown::new(super::KPHNHCHPCBJ::KPHNHCHPCBJ::PLAYER_RETURN_NONE);
        self.LHBLFMFEGMM = 0;
        self.ECMAMMPKAGN = 0;
        self.HDDGPMMNICD = 0;
        self.PMJLDMLNEJG = 0;
        self.NOFCPIPLKOI.clear();
        self.MEEFIIHPBHG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OINMIFEJJPF {
        static instance: OINMIFEJJPF = OINMIFEJJPF {
            finish_time: 0,
            LAEAHDLHOGD: false,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            LHBLFMFEGMM: 0,
            ECMAMMPKAGN: 0,
            HDDGPMMNICD: 0,
            PMJLDMLNEJG: 0,
            NOFCPIPLKOI: ::std::vec::Vec::new(),
            MEEFIIHPBHG: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OINMIFEJJPF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OINMIFEJJPF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OINMIFEJJPF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OINMIFEJJPF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OINMIFEJJPF.proto\x1a\x11KPHNHCHPCBJ.proto\"\xc2\x02\n\x0bOINMIFEJ\
    JPF\x12\x1f\n\x0bfinish_time\x18\x0e\x20\x01(\x03R\nfinishTime\x12\x20\n\
    \x0bLAEAHDLHOGD\x18\x02\x20\x01(\x08R\x0bLAEAHDLHOGD\x12$\n\x06status\
    \x18\x08\x20\x01(\x0e2\x0c.KPHNHCHPCBJR\x06status\x12\x20\n\x0bLHBLFMFEG\
    MM\x18\x04\x20\x01(\rR\x0bLHBLFMFEGMM\x12\x20\n\x0bECMAMMPKAGN\x18\x0c\
    \x20\x01(\rR\x0bECMAMMPKAGN\x12\x20\n\x0bHDDGPMMNICD\x18\x07\x20\x01(\rR\
    \x0bHDDGPMMNICD\x12\x20\n\x0bPMJLDMLNEJG\x18\x01\x20\x01(\x03R\x0bPMJLDM\
    LNEJG\x12\x20\n\x0bNOFCPIPLKOI\x18\x05\x20\x03(\rR\x0bNOFCPIPLKOI\x12\
    \x20\n\x0bMEEFIIHPBHG\x18\x0b\x20\x03(\rR\x0bMEEFIIHPBHGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::KPHNHCHPCBJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OINMIFEJJPF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
