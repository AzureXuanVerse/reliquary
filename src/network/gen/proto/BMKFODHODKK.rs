// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BMKFODHODKK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BMKFODHODKK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BMKFODHODKK {
    // message fields
    // @@protoc_insertion_point(field:BMKFODHODKK.OJLHKHPDGFM)
    pub OJLHKHPDGFM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:BMKFODHODKK.CNFCMJOJAOM)
    pub CNFCMJOJAOM: ::protobuf::MessageField<super::BIGPPAGKMHP::BIGPPAGKMHP>,
    // @@protoc_insertion_point(field:BMKFODHODKK.MMLANFIFPJJ)
    pub MMLANFIFPJJ: ::std::vec::Vec<super::EGCDAGLJMDH::EGCDAGLJMDH>,
    // @@protoc_insertion_point(field:BMKFODHODKK.CIDHIIIBIGJ)
    pub CIDHIIIBIGJ: ::std::vec::Vec<super::GKOBEBCEHHJ::GKOBEBCEHHJ>,
    // @@protoc_insertion_point(field:BMKFODHODKK.GDDKJJDCFFE)
    pub GDDKJJDCFFE: ::protobuf::MessageField<super::FLKFJHLHCON::FLKFJHLHCON>,
    // @@protoc_insertion_point(field:BMKFODHODKK.AOGJNJCOKFF)
    pub AOGJNJCOKFF: ::std::vec::Vec<super::KMIPDKEICBA::KMIPDKEICBA>,
    // @@protoc_insertion_point(field:BMKFODHODKK.OGHBIDJJCOD)
    pub OGHBIDJJCOD: ::std::vec::Vec<super::FJNHFAHOCFN::FJNHFAHOCFN>,
    // special fields
    // @@protoc_insertion_point(special_field:BMKFODHODKK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BMKFODHODKK {
    fn default() -> &'a BMKFODHODKK {
        <BMKFODHODKK as ::protobuf::Message>::default_instance()
    }
}

impl BMKFODHODKK {
    pub fn new() -> BMKFODHODKK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OJLHKHPDGFM",
            |m: &BMKFODHODKK| { &m.OJLHKHPDGFM },
            |m: &mut BMKFODHODKK| { &mut m.OJLHKHPDGFM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BIGPPAGKMHP::BIGPPAGKMHP>(
            "CNFCMJOJAOM",
            |m: &BMKFODHODKK| { &m.CNFCMJOJAOM },
            |m: &mut BMKFODHODKK| { &mut m.CNFCMJOJAOM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MMLANFIFPJJ",
            |m: &BMKFODHODKK| { &m.MMLANFIFPJJ },
            |m: &mut BMKFODHODKK| { &mut m.MMLANFIFPJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CIDHIIIBIGJ",
            |m: &BMKFODHODKK| { &m.CIDHIIIBIGJ },
            |m: &mut BMKFODHODKK| { &mut m.CIDHIIIBIGJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FLKFJHLHCON::FLKFJHLHCON>(
            "GDDKJJDCFFE",
            |m: &BMKFODHODKK| { &m.GDDKJJDCFFE },
            |m: &mut BMKFODHODKK| { &mut m.GDDKJJDCFFE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AOGJNJCOKFF",
            |m: &BMKFODHODKK| { &m.AOGJNJCOKFF },
            |m: &mut BMKFODHODKK| { &mut m.AOGJNJCOKFF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OGHBIDJJCOD",
            |m: &BMKFODHODKK| { &m.OGHBIDJJCOD },
            |m: &mut BMKFODHODKK| { &mut m.OGHBIDJJCOD },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BMKFODHODKK>(
            "BMKFODHODKK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BMKFODHODKK {
    const NAME: &'static str = "BMKFODHODKK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.OJLHKHPDGFM)?;
                },
                104 => {
                    self.OJLHKHPDGFM.push(is.read_uint32()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CNFCMJOJAOM)?;
                },
                98 => {
                    self.MMLANFIFPJJ.push(is.read_message()?);
                },
                74 => {
                    self.CIDHIIIBIGJ.push(is.read_message()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GDDKJJDCFFE)?;
                },
                26 => {
                    self.AOGJNJCOKFF.push(is.read_message()?);
                },
                58 => {
                    self.OGHBIDJJCOD.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.OJLHKHPDGFM {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        if let Some(v) = self.CNFCMJOJAOM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.MMLANFIFPJJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.CIDHIIIBIGJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.GDDKJJDCFFE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.AOGJNJCOKFF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.OGHBIDJJCOD {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.OJLHKHPDGFM {
            os.write_uint32(13, *v)?;
        };
        if let Some(v) = self.CNFCMJOJAOM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.MMLANFIFPJJ {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.CIDHIIIBIGJ {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if let Some(v) = self.GDDKJJDCFFE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.AOGJNJCOKFF {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.OGHBIDJJCOD {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BMKFODHODKK {
        BMKFODHODKK::new()
    }

    fn clear(&mut self) {
        self.OJLHKHPDGFM.clear();
        self.CNFCMJOJAOM.clear();
        self.MMLANFIFPJJ.clear();
        self.CIDHIIIBIGJ.clear();
        self.GDDKJJDCFFE.clear();
        self.AOGJNJCOKFF.clear();
        self.OGHBIDJJCOD.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BMKFODHODKK {
        static instance: BMKFODHODKK = BMKFODHODKK {
            OJLHKHPDGFM: ::std::vec::Vec::new(),
            CNFCMJOJAOM: ::protobuf::MessageField::none(),
            MMLANFIFPJJ: ::std::vec::Vec::new(),
            CIDHIIIBIGJ: ::std::vec::Vec::new(),
            GDDKJJDCFFE: ::protobuf::MessageField::none(),
            AOGJNJCOKFF: ::std::vec::Vec::new(),
            OGHBIDJJCOD: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BMKFODHODKK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BMKFODHODKK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BMKFODHODKK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BMKFODHODKK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BMKFODHODKK.proto\x1a\x11BIGPPAGKMHP.proto\x1a\x11EGCDAGLJMDH.prot\
    o\x1a\x11FJNHFAHOCFN.proto\x1a\x11FLKFJHLHCON.proto\x1a\x11GKOBEBCEHHJ.p\
    roto\x1a\x11KMIPDKEICBA.proto\"\xcf\x02\n\x0bBMKFODHODKK\x12\x20\n\x0bOJ\
    LHKHPDGFM\x18\r\x20\x03(\rR\x0bOJLHKHPDGFM\x12.\n\x0bCNFCMJOJAOM\x18\n\
    \x20\x01(\x0b2\x0c.BIGPPAGKMHPR\x0bCNFCMJOJAOM\x12.\n\x0bMMLANFIFPJJ\x18\
    \x0c\x20\x03(\x0b2\x0c.EGCDAGLJMDHR\x0bMMLANFIFPJJ\x12.\n\x0bCIDHIIIBIGJ\
    \x18\t\x20\x03(\x0b2\x0c.GKOBEBCEHHJR\x0bCIDHIIIBIGJ\x12.\n\x0bGDDKJJDCF\
    FE\x18\x06\x20\x01(\x0b2\x0c.FLKFJHLHCONR\x0bGDDKJJDCFFE\x12.\n\x0bAOGJN\
    JCOKFF\x18\x03\x20\x03(\x0b2\x0c.KMIPDKEICBAR\x0bAOGJNJCOKFF\x12.\n\x0bO\
    GHBIDJJCOD\x18\x07\x20\x03(\x0b2\x0c.FJNHFAHOCFNR\x0bOGHBIDJJCODb\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::BIGPPAGKMHP::file_descriptor().clone());
            deps.push(super::EGCDAGLJMDH::file_descriptor().clone());
            deps.push(super::FJNHFAHOCFN::file_descriptor().clone());
            deps.push(super::FLKFJHLHCON::file_descriptor().clone());
            deps.push(super::GKOBEBCEHHJ::file_descriptor().clone());
            deps.push(super::KMIPDKEICBA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BMKFODHODKK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
