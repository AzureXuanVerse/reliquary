// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueBuffSelectInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueBuffSelectInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueBuffSelectInfo {
    // message fields
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.roll_buffs_cost)
    pub roll_buffs_cost: ::protobuf::MessageField<super::ItemCostList::ItemCostList>,
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.source)
    pub source: ::protobuf::EnumOrUnknown<super::RogueCommonBuffSelectSource::RogueCommonBuffSelectSource>,
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.can_roll)
    pub can_roll: bool,
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.select_first_buff_list)
    pub select_first_buff_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.roll_buff_times)
    pub roll_buff_times: u32,
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.roll_buff_max_times)
    pub roll_buff_max_times: u32,
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.select_buff_source_total_count)
    pub select_buff_source_total_count: u32,
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.select_buff_source_cur_count)
    pub select_buff_source_cur_count: u32,
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.maze_buff_list)
    pub maze_buff_list: ::std::vec::Vec<super::RogueBuff::RogueBuff>,
    // @@protoc_insertion_point(field:RogueBuffSelectInfo.select_buff_source_hint)
    pub select_buff_source_hint: u32,
    // special fields
    // @@protoc_insertion_point(special_field:RogueBuffSelectInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueBuffSelectInfo {
    fn default() -> &'a RogueBuffSelectInfo {
        <RogueBuffSelectInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueBuffSelectInfo {
    pub fn new() -> RogueBuffSelectInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemCostList::ItemCostList>(
            "roll_buffs_cost",
            |m: &RogueBuffSelectInfo| { &m.roll_buffs_cost },
            |m: &mut RogueBuffSelectInfo| { &mut m.roll_buffs_cost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &RogueBuffSelectInfo| { &m.source },
            |m: &mut RogueBuffSelectInfo| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "can_roll",
            |m: &RogueBuffSelectInfo| { &m.can_roll },
            |m: &mut RogueBuffSelectInfo| { &mut m.can_roll },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "select_first_buff_list",
            |m: &RogueBuffSelectInfo| { &m.select_first_buff_list },
            |m: &mut RogueBuffSelectInfo| { &mut m.select_first_buff_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "roll_buff_times",
            |m: &RogueBuffSelectInfo| { &m.roll_buff_times },
            |m: &mut RogueBuffSelectInfo| { &mut m.roll_buff_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "roll_buff_max_times",
            |m: &RogueBuffSelectInfo| { &m.roll_buff_max_times },
            |m: &mut RogueBuffSelectInfo| { &mut m.roll_buff_max_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "select_buff_source_total_count",
            |m: &RogueBuffSelectInfo| { &m.select_buff_source_total_count },
            |m: &mut RogueBuffSelectInfo| { &mut m.select_buff_source_total_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "select_buff_source_cur_count",
            |m: &RogueBuffSelectInfo| { &m.select_buff_source_cur_count },
            |m: &mut RogueBuffSelectInfo| { &mut m.select_buff_source_cur_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "maze_buff_list",
            |m: &RogueBuffSelectInfo| { &m.maze_buff_list },
            |m: &mut RogueBuffSelectInfo| { &mut m.maze_buff_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "select_buff_source_hint",
            |m: &RogueBuffSelectInfo| { &m.select_buff_source_hint },
            |m: &mut RogueBuffSelectInfo| { &mut m.select_buff_source_hint },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueBuffSelectInfo>(
            "RogueBuffSelectInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueBuffSelectInfo {
    const NAME: &'static str = "RogueBuffSelectInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.roll_buffs_cost)?;
                },
                48 => {
                    self.source = is.read_enum_or_unknown()?;
                },
                104 => {
                    self.can_roll = is.read_bool()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.select_first_buff_list)?;
                },
                40 => {
                    self.select_first_buff_list.push(is.read_uint32()?);
                },
                56 => {
                    self.roll_buff_times = is.read_uint32()?;
                },
                80 => {
                    self.roll_buff_max_times = is.read_uint32()?;
                },
                16 => {
                    self.select_buff_source_total_count = is.read_uint32()?;
                },
                120 => {
                    self.select_buff_source_cur_count = is.read_uint32()?;
                },
                98 => {
                    self.maze_buff_list.push(is.read_message()?);
                },
                8 => {
                    self.select_buff_source_hint = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.roll_buffs_cost.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.source != ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSource::RogueCommonBuffSelectSource::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(6, self.source.value());
        }
        if self.can_roll != false {
            my_size += 1 + 1;
        }
        for value in &self.select_first_buff_list {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        if self.roll_buff_times != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.roll_buff_times);
        }
        if self.roll_buff_max_times != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.roll_buff_max_times);
        }
        if self.select_buff_source_total_count != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.select_buff_source_total_count);
        }
        if self.select_buff_source_cur_count != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.select_buff_source_cur_count);
        }
        for value in &self.maze_buff_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.select_buff_source_hint != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.select_buff_source_hint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.roll_buffs_cost.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.source != ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSource::RogueCommonBuffSelectSource::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.source))?;
        }
        if self.can_roll != false {
            os.write_bool(13, self.can_roll)?;
        }
        for v in &self.select_first_buff_list {
            os.write_uint32(5, *v)?;
        };
        if self.roll_buff_times != 0 {
            os.write_uint32(7, self.roll_buff_times)?;
        }
        if self.roll_buff_max_times != 0 {
            os.write_uint32(10, self.roll_buff_max_times)?;
        }
        if self.select_buff_source_total_count != 0 {
            os.write_uint32(2, self.select_buff_source_total_count)?;
        }
        if self.select_buff_source_cur_count != 0 {
            os.write_uint32(15, self.select_buff_source_cur_count)?;
        }
        for v in &self.maze_buff_list {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if self.select_buff_source_hint != 0 {
            os.write_uint32(1, self.select_buff_source_hint)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueBuffSelectInfo {
        RogueBuffSelectInfo::new()
    }

    fn clear(&mut self) {
        self.roll_buffs_cost.clear();
        self.source = ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSource::RogueCommonBuffSelectSource::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE);
        self.can_roll = false;
        self.select_first_buff_list.clear();
        self.roll_buff_times = 0;
        self.roll_buff_max_times = 0;
        self.select_buff_source_total_count = 0;
        self.select_buff_source_cur_count = 0;
        self.maze_buff_list.clear();
        self.select_buff_source_hint = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueBuffSelectInfo {
        static instance: RogueBuffSelectInfo = RogueBuffSelectInfo {
            roll_buffs_cost: ::protobuf::MessageField::none(),
            source: ::protobuf::EnumOrUnknown::from_i32(0),
            can_roll: false,
            select_first_buff_list: ::std::vec::Vec::new(),
            roll_buff_times: 0,
            roll_buff_max_times: 0,
            select_buff_source_total_count: 0,
            select_buff_source_cur_count: 0,
            maze_buff_list: ::std::vec::Vec::new(),
            select_buff_source_hint: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueBuffSelectInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueBuffSelectInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueBuffSelectInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueBuffSelectInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19RogueBuffSelectInfo.proto\x1a!RogueCommonBuffSelectSource.proto\
    \x1a\x12ItemCostList.proto\x1a\x0fRogueBuff.proto\"\x96\x04\n\x13RogueBu\
    ffSelectInfo\x125\n\x0froll_buffs_cost\x18\t\x20\x01(\x0b2\r.ItemCostLis\
    tR\rrollBuffsCost\x124\n\x06source\x18\x06\x20\x01(\x0e2\x1c.RogueCommon\
    BuffSelectSourceR\x06source\x12\x19\n\x08can_roll\x18\r\x20\x01(\x08R\
    \x07canRoll\x123\n\x16select_first_buff_list\x18\x05\x20\x03(\rR\x13sele\
    ctFirstBuffList\x12&\n\x0froll_buff_times\x18\x07\x20\x01(\rR\rrollBuffT\
    imes\x12-\n\x13roll_buff_max_times\x18\n\x20\x01(\rR\x10rollBuffMaxTimes\
    \x12B\n\x1eselect_buff_source_total_count\x18\x02\x20\x01(\rR\x1aselectB\
    uffSourceTotalCount\x12>\n\x1cselect_buff_source_cur_count\x18\x0f\x20\
    \x01(\rR\x18selectBuffSourceCurCount\x120\n\x0emaze_buff_list\x18\x0c\
    \x20\x03(\x0b2\n.RogueBuffR\x0cmazeBuffList\x125\n\x17select_buff_source\
    _hint\x18\x01\x20\x01(\rR\x14selectBuffSourceHintB\x15\n\x13emu.lunarcor\
    e.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::RogueCommonBuffSelectSource::file_descriptor().clone());
            deps.push(super::ItemCostList::file_descriptor().clone());
            deps.push(super::RogueBuff::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueBuffSelectInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
