// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdGachaType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdGachaType)
pub enum CmdGachaType {
    // @@protoc_insertion_point(enum_value:CmdGachaType.CmdGachaTypeNone)
    CmdGachaTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdGachaType.CmdExchangeGachaCeilingCsReq)
    CmdExchangeGachaCeilingCsReq = 1933,
    // @@protoc_insertion_point(enum_value:CmdGachaType.CmdGetGachaCeilingScRsp)
    CmdGetGachaCeilingScRsp = 1977,
    // @@protoc_insertion_point(enum_value:CmdGachaType.CmdExchangeGachaCeilingScRsp)
    CmdExchangeGachaCeilingScRsp = 1912,
    // @@protoc_insertion_point(enum_value:CmdGachaType.CmdGetGachaInfoScRsp)
    CmdGetGachaInfoScRsp = 1971,
    // @@protoc_insertion_point(enum_value:CmdGachaType.CmdDoGachaScRsp)
    CmdDoGachaScRsp = 1942,
    // @@protoc_insertion_point(enum_value:CmdGachaType.CmdDoGachaCsReq)
    CmdDoGachaCsReq = 1983,
    // @@protoc_insertion_point(enum_value:CmdGachaType.CmdGetGachaInfoCsReq)
    CmdGetGachaInfoCsReq = 1998,
    // @@protoc_insertion_point(enum_value:CmdGachaType.CmdGetGachaCeilingCsReq)
    CmdGetGachaCeilingCsReq = 1979,
}

impl ::protobuf::Enum for CmdGachaType {
    const NAME: &'static str = "CmdGachaType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdGachaType> {
        match value {
            0 => ::std::option::Option::Some(CmdGachaType::CmdGachaTypeNone),
            1933 => ::std::option::Option::Some(CmdGachaType::CmdExchangeGachaCeilingCsReq),
            1977 => ::std::option::Option::Some(CmdGachaType::CmdGetGachaCeilingScRsp),
            1912 => ::std::option::Option::Some(CmdGachaType::CmdExchangeGachaCeilingScRsp),
            1971 => ::std::option::Option::Some(CmdGachaType::CmdGetGachaInfoScRsp),
            1942 => ::std::option::Option::Some(CmdGachaType::CmdDoGachaScRsp),
            1983 => ::std::option::Option::Some(CmdGachaType::CmdDoGachaCsReq),
            1998 => ::std::option::Option::Some(CmdGachaType::CmdGetGachaInfoCsReq),
            1979 => ::std::option::Option::Some(CmdGachaType::CmdGetGachaCeilingCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdGachaType> {
        match str {
            "CmdGachaTypeNone" => ::std::option::Option::Some(CmdGachaType::CmdGachaTypeNone),
            "CmdExchangeGachaCeilingCsReq" => ::std::option::Option::Some(CmdGachaType::CmdExchangeGachaCeilingCsReq),
            "CmdGetGachaCeilingScRsp" => ::std::option::Option::Some(CmdGachaType::CmdGetGachaCeilingScRsp),
            "CmdExchangeGachaCeilingScRsp" => ::std::option::Option::Some(CmdGachaType::CmdExchangeGachaCeilingScRsp),
            "CmdGetGachaInfoScRsp" => ::std::option::Option::Some(CmdGachaType::CmdGetGachaInfoScRsp),
            "CmdDoGachaScRsp" => ::std::option::Option::Some(CmdGachaType::CmdDoGachaScRsp),
            "CmdDoGachaCsReq" => ::std::option::Option::Some(CmdGachaType::CmdDoGachaCsReq),
            "CmdGetGachaInfoCsReq" => ::std::option::Option::Some(CmdGachaType::CmdGetGachaInfoCsReq),
            "CmdGetGachaCeilingCsReq" => ::std::option::Option::Some(CmdGachaType::CmdGetGachaCeilingCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdGachaType] = &[
        CmdGachaType::CmdGachaTypeNone,
        CmdGachaType::CmdExchangeGachaCeilingCsReq,
        CmdGachaType::CmdGetGachaCeilingScRsp,
        CmdGachaType::CmdExchangeGachaCeilingScRsp,
        CmdGachaType::CmdGetGachaInfoScRsp,
        CmdGachaType::CmdDoGachaScRsp,
        CmdGachaType::CmdDoGachaCsReq,
        CmdGachaType::CmdGetGachaInfoCsReq,
        CmdGachaType::CmdGetGachaCeilingCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdGachaType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdGachaType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdGachaType::CmdGachaTypeNone => 0,
            CmdGachaType::CmdExchangeGachaCeilingCsReq => 1,
            CmdGachaType::CmdGetGachaCeilingScRsp => 2,
            CmdGachaType::CmdExchangeGachaCeilingScRsp => 3,
            CmdGachaType::CmdGetGachaInfoScRsp => 4,
            CmdGachaType::CmdDoGachaScRsp => 5,
            CmdGachaType::CmdDoGachaCsReq => 6,
            CmdGachaType::CmdGetGachaInfoCsReq => 7,
            CmdGachaType::CmdGetGachaCeilingCsReq => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdGachaType {
    fn default() -> Self {
        CmdGachaType::CmdGachaTypeNone
    }
}

impl CmdGachaType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdGachaType>("CmdGachaType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12CmdGachaType.proto*\x88\x02\n\x0cCmdGachaType\x12\x14\n\x10CmdGach\
    aTypeNone\x10\0\x12!\n\x1cCmdExchangeGachaCeilingCsReq\x10\x8d\x0f\x12\
    \x1c\n\x17CmdGetGachaCeilingScRsp\x10\xb9\x0f\x12!\n\x1cCmdExchangeGacha\
    CeilingScRsp\x10\xf8\x0e\x12\x19\n\x14CmdGetGachaInfoScRsp\x10\xb3\x0f\
    \x12\x14\n\x0fCmdDoGachaScRsp\x10\x96\x0f\x12\x14\n\x0fCmdDoGachaCsReq\
    \x10\xbf\x0f\x12\x19\n\x14CmdGetGachaInfoCsReq\x10\xce\x0f\x12\x1c\n\x17\
    CmdGetGachaCeilingCsReq\x10\xbb\x0fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdGachaType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
