// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdChatType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdChatType)
pub enum CmdChatType {
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdChatTypeNone)
    CmdChatTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdSendMsgCsReq)
    CmdSendMsgCsReq = 3998,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdGetChatFriendHistoryScRsp)
    CmdGetChatFriendHistoryScRsp = 3912,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdGetChatEmojiListScRsp)
    CmdGetChatEmojiListScRsp = 3938,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdSendMsgScRsp)
    CmdSendMsgScRsp = 3971,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdGetLoginChatInfoCsReq)
    CmdGetLoginChatInfoCsReq = 3966,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdGetPrivateChatHistoryScRsp)
    CmdGetPrivateChatHistoryScRsp = 3977,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdPrivateMsgOfflineUsersScNotify)
    CmdPrivateMsgOfflineUsersScNotify = 3942,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdGetPrivateChatHistoryCsReq)
    CmdGetPrivateChatHistoryCsReq = 3979,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdBatchMarkChatEmojiScRsp)
    CmdBatchMarkChatEmojiScRsp = 3922,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdGetChatFriendHistoryCsReq)
    CmdGetChatFriendHistoryCsReq = 3933,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdBatchMarkChatEmojiCsReq)
    CmdBatchMarkChatEmojiCsReq = 3989,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdGetLoginChatInfoScRsp)
    CmdGetLoginChatInfoScRsp = 3905,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdGetChatEmojiListCsReq)
    CmdGetChatEmojiListCsReq = 3928,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdRevcMsgScNotify)
    CmdRevcMsgScNotify = 3983,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdMarkChatEmojiCsReq)
    CmdMarkChatEmojiCsReq = 3978,
    // @@protoc_insertion_point(enum_value:CmdChatType.CmdMarkChatEmojiScRsp)
    CmdMarkChatEmojiScRsp = 3956,
}

impl ::protobuf::Enum for CmdChatType {
    const NAME: &'static str = "CmdChatType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdChatType> {
        match value {
            0 => ::std::option::Option::Some(CmdChatType::CmdChatTypeNone),
            3998 => ::std::option::Option::Some(CmdChatType::CmdSendMsgCsReq),
            3912 => ::std::option::Option::Some(CmdChatType::CmdGetChatFriendHistoryScRsp),
            3938 => ::std::option::Option::Some(CmdChatType::CmdGetChatEmojiListScRsp),
            3971 => ::std::option::Option::Some(CmdChatType::CmdSendMsgScRsp),
            3966 => ::std::option::Option::Some(CmdChatType::CmdGetLoginChatInfoCsReq),
            3977 => ::std::option::Option::Some(CmdChatType::CmdGetPrivateChatHistoryScRsp),
            3942 => ::std::option::Option::Some(CmdChatType::CmdPrivateMsgOfflineUsersScNotify),
            3979 => ::std::option::Option::Some(CmdChatType::CmdGetPrivateChatHistoryCsReq),
            3922 => ::std::option::Option::Some(CmdChatType::CmdBatchMarkChatEmojiScRsp),
            3933 => ::std::option::Option::Some(CmdChatType::CmdGetChatFriendHistoryCsReq),
            3989 => ::std::option::Option::Some(CmdChatType::CmdBatchMarkChatEmojiCsReq),
            3905 => ::std::option::Option::Some(CmdChatType::CmdGetLoginChatInfoScRsp),
            3928 => ::std::option::Option::Some(CmdChatType::CmdGetChatEmojiListCsReq),
            3983 => ::std::option::Option::Some(CmdChatType::CmdRevcMsgScNotify),
            3978 => ::std::option::Option::Some(CmdChatType::CmdMarkChatEmojiCsReq),
            3956 => ::std::option::Option::Some(CmdChatType::CmdMarkChatEmojiScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdChatType> {
        match str {
            "CmdChatTypeNone" => ::std::option::Option::Some(CmdChatType::CmdChatTypeNone),
            "CmdSendMsgCsReq" => ::std::option::Option::Some(CmdChatType::CmdSendMsgCsReq),
            "CmdGetChatFriendHistoryScRsp" => ::std::option::Option::Some(CmdChatType::CmdGetChatFriendHistoryScRsp),
            "CmdGetChatEmojiListScRsp" => ::std::option::Option::Some(CmdChatType::CmdGetChatEmojiListScRsp),
            "CmdSendMsgScRsp" => ::std::option::Option::Some(CmdChatType::CmdSendMsgScRsp),
            "CmdGetLoginChatInfoCsReq" => ::std::option::Option::Some(CmdChatType::CmdGetLoginChatInfoCsReq),
            "CmdGetPrivateChatHistoryScRsp" => ::std::option::Option::Some(CmdChatType::CmdGetPrivateChatHistoryScRsp),
            "CmdPrivateMsgOfflineUsersScNotify" => ::std::option::Option::Some(CmdChatType::CmdPrivateMsgOfflineUsersScNotify),
            "CmdGetPrivateChatHistoryCsReq" => ::std::option::Option::Some(CmdChatType::CmdGetPrivateChatHistoryCsReq),
            "CmdBatchMarkChatEmojiScRsp" => ::std::option::Option::Some(CmdChatType::CmdBatchMarkChatEmojiScRsp),
            "CmdGetChatFriendHistoryCsReq" => ::std::option::Option::Some(CmdChatType::CmdGetChatFriendHistoryCsReq),
            "CmdBatchMarkChatEmojiCsReq" => ::std::option::Option::Some(CmdChatType::CmdBatchMarkChatEmojiCsReq),
            "CmdGetLoginChatInfoScRsp" => ::std::option::Option::Some(CmdChatType::CmdGetLoginChatInfoScRsp),
            "CmdGetChatEmojiListCsReq" => ::std::option::Option::Some(CmdChatType::CmdGetChatEmojiListCsReq),
            "CmdRevcMsgScNotify" => ::std::option::Option::Some(CmdChatType::CmdRevcMsgScNotify),
            "CmdMarkChatEmojiCsReq" => ::std::option::Option::Some(CmdChatType::CmdMarkChatEmojiCsReq),
            "CmdMarkChatEmojiScRsp" => ::std::option::Option::Some(CmdChatType::CmdMarkChatEmojiScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdChatType] = &[
        CmdChatType::CmdChatTypeNone,
        CmdChatType::CmdSendMsgCsReq,
        CmdChatType::CmdGetChatFriendHistoryScRsp,
        CmdChatType::CmdGetChatEmojiListScRsp,
        CmdChatType::CmdSendMsgScRsp,
        CmdChatType::CmdGetLoginChatInfoCsReq,
        CmdChatType::CmdGetPrivateChatHistoryScRsp,
        CmdChatType::CmdPrivateMsgOfflineUsersScNotify,
        CmdChatType::CmdGetPrivateChatHistoryCsReq,
        CmdChatType::CmdBatchMarkChatEmojiScRsp,
        CmdChatType::CmdGetChatFriendHistoryCsReq,
        CmdChatType::CmdBatchMarkChatEmojiCsReq,
        CmdChatType::CmdGetLoginChatInfoScRsp,
        CmdChatType::CmdGetChatEmojiListCsReq,
        CmdChatType::CmdRevcMsgScNotify,
        CmdChatType::CmdMarkChatEmojiCsReq,
        CmdChatType::CmdMarkChatEmojiScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdChatType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdChatType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdChatType::CmdChatTypeNone => 0,
            CmdChatType::CmdSendMsgCsReq => 1,
            CmdChatType::CmdGetChatFriendHistoryScRsp => 2,
            CmdChatType::CmdGetChatEmojiListScRsp => 3,
            CmdChatType::CmdSendMsgScRsp => 4,
            CmdChatType::CmdGetLoginChatInfoCsReq => 5,
            CmdChatType::CmdGetPrivateChatHistoryScRsp => 6,
            CmdChatType::CmdPrivateMsgOfflineUsersScNotify => 7,
            CmdChatType::CmdGetPrivateChatHistoryCsReq => 8,
            CmdChatType::CmdBatchMarkChatEmojiScRsp => 9,
            CmdChatType::CmdGetChatFriendHistoryCsReq => 10,
            CmdChatType::CmdBatchMarkChatEmojiCsReq => 11,
            CmdChatType::CmdGetLoginChatInfoScRsp => 12,
            CmdChatType::CmdGetChatEmojiListCsReq => 13,
            CmdChatType::CmdRevcMsgScNotify => 14,
            CmdChatType::CmdMarkChatEmojiCsReq => 15,
            CmdChatType::CmdMarkChatEmojiScRsp => 16,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdChatType {
    fn default() -> Self {
        CmdChatType::CmdChatTypeNone
    }
}

impl CmdChatType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdChatType>("CmdChatType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CmdChatType.proto*\x93\x04\n\x0bCmdChatType\x12\x13\n\x0fCmdChatTy\
    peNone\x10\0\x12\x14\n\x0fCmdSendMsgCsReq\x10\x9e\x1f\x12!\n\x1cCmdGetCh\
    atFriendHistoryScRsp\x10\xc8\x1e\x12\x1d\n\x18CmdGetChatEmojiListScRsp\
    \x10\xe2\x1e\x12\x14\n\x0fCmdSendMsgScRsp\x10\x83\x1f\x12\x1d\n\x18CmdGe\
    tLoginChatInfoCsReq\x10\xfe\x1e\x12\"\n\x1dCmdGetPrivateChatHistoryScRsp\
    \x10\x89\x1f\x12&\n!CmdPrivateMsgOfflineUsersScNotify\x10\xe6\x1e\x12\"\
    \n\x1dCmdGetPrivateChatHistoryCsReq\x10\x8b\x1f\x12\x1f\n\x1aCmdBatchMar\
    kChatEmojiScRsp\x10\xd2\x1e\x12!\n\x1cCmdGetChatFriendHistoryCsReq\x10\
    \xdd\x1e\x12\x1f\n\x1aCmdBatchMarkChatEmojiCsReq\x10\x95\x1f\x12\x1d\n\
    \x18CmdGetLoginChatInfoScRsp\x10\xc1\x1e\x12\x1d\n\x18CmdGetChatEmojiLis\
    tCsReq\x10\xd8\x1e\x12\x17\n\x12CmdRevcMsgScNotify\x10\x8f\x1f\x12\x1a\n\
    \x15CmdMarkChatEmojiCsReq\x10\x8a\x1f\x12\x1a\n\x15CmdMarkChatEmojiScRsp\
    \x10\xf4\x1eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdChatType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
