// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BCCJGMONBKG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BCCJGMONBKG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BCCJGMONBKG {
    // message fields
    // @@protoc_insertion_point(field:BCCJGMONBKG.MMLBFPNPHCL)
    pub MMLBFPNPHCL: u32,
    // @@protoc_insertion_point(field:BCCJGMONBKG.GCFIIGOLPMF)
    pub GCFIIGOLPMF: u32,
    // message oneof groups
    pub DGABDHDHDNC: ::std::option::Option<bccjgmonbkg::DGABDHDHDNC>,
    // special fields
    // @@protoc_insertion_point(special_field:BCCJGMONBKG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BCCJGMONBKG {
    fn default() -> &'a BCCJGMONBKG {
        <BCCJGMONBKG as ::protobuf::Message>::default_instance()
    }
}

impl BCCJGMONBKG {
    pub fn new() -> BCCJGMONBKG {
        ::std::default::Default::default()
    }

    // .IFJLCHNNPDB BDIEFEDBMIC = 754;

    pub fn BDIEFEDBMIC(&self) -> &super::IFJLCHNNPDB::IFJLCHNNPDB {
        match self.DGABDHDHDNC {
            ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(ref v)) => v,
            _ => <super::IFJLCHNNPDB::IFJLCHNNPDB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BDIEFEDBMIC(&mut self) {
        self.DGABDHDHDNC = ::std::option::Option::None;
    }

    pub fn has_BDIEFEDBMIC(&self) -> bool {
        match self.DGABDHDHDNC {
            ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BDIEFEDBMIC(&mut self, v: super::IFJLCHNNPDB::IFJLCHNNPDB) {
        self.DGABDHDHDNC = ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BDIEFEDBMIC(&mut self) -> &mut super::IFJLCHNNPDB::IFJLCHNNPDB {
        if let ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(_)) = self.DGABDHDHDNC {
        } else {
            self.DGABDHDHDNC = ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(super::IFJLCHNNPDB::IFJLCHNNPDB::new()));
        }
        match self.DGABDHDHDNC {
            ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BDIEFEDBMIC(&mut self) -> super::IFJLCHNNPDB::IFJLCHNNPDB {
        if self.has_BDIEFEDBMIC() {
            match self.DGABDHDHDNC.take() {
                ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IFJLCHNNPDB::IFJLCHNNPDB::new()
        }
    }

    // .DMILKHDLOLJ BBFACNPMACC = 425;

    pub fn BBFACNPMACC(&self) -> &super::DMILKHDLOLJ::DMILKHDLOLJ {
        match self.DGABDHDHDNC {
            ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(ref v)) => v,
            _ => <super::DMILKHDLOLJ::DMILKHDLOLJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BBFACNPMACC(&mut self) {
        self.DGABDHDHDNC = ::std::option::Option::None;
    }

    pub fn has_BBFACNPMACC(&self) -> bool {
        match self.DGABDHDHDNC {
            ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BBFACNPMACC(&mut self, v: super::DMILKHDLOLJ::DMILKHDLOLJ) {
        self.DGABDHDHDNC = ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BBFACNPMACC(&mut self) -> &mut super::DMILKHDLOLJ::DMILKHDLOLJ {
        if let ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(_)) = self.DGABDHDHDNC {
        } else {
            self.DGABDHDHDNC = ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(super::DMILKHDLOLJ::DMILKHDLOLJ::new()));
        }
        match self.DGABDHDHDNC {
            ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BBFACNPMACC(&mut self) -> super::DMILKHDLOLJ::DMILKHDLOLJ {
        if self.has_BBFACNPMACC() {
            match self.DGABDHDHDNC.take() {
                ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DMILKHDLOLJ::DMILKHDLOLJ::new()
        }
    }

    // .KBCOKNIMFOH LBMKGHECBEI = 234;

    pub fn LBMKGHECBEI(&self) -> &super::KBCOKNIMFOH::KBCOKNIMFOH {
        match self.DGABDHDHDNC {
            ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(ref v)) => v,
            _ => <super::KBCOKNIMFOH::KBCOKNIMFOH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LBMKGHECBEI(&mut self) {
        self.DGABDHDHDNC = ::std::option::Option::None;
    }

    pub fn has_LBMKGHECBEI(&self) -> bool {
        match self.DGABDHDHDNC {
            ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LBMKGHECBEI(&mut self, v: super::KBCOKNIMFOH::KBCOKNIMFOH) {
        self.DGABDHDHDNC = ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LBMKGHECBEI(&mut self) -> &mut super::KBCOKNIMFOH::KBCOKNIMFOH {
        if let ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(_)) = self.DGABDHDHDNC {
        } else {
            self.DGABDHDHDNC = ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(super::KBCOKNIMFOH::KBCOKNIMFOH::new()));
        }
        match self.DGABDHDHDNC {
            ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LBMKGHECBEI(&mut self) -> super::KBCOKNIMFOH::KBCOKNIMFOH {
        if self.has_LBMKGHECBEI() {
            match self.DGABDHDHDNC.take() {
                ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KBCOKNIMFOH::KBCOKNIMFOH::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MMLBFPNPHCL",
            |m: &BCCJGMONBKG| { &m.MMLBFPNPHCL },
            |m: &mut BCCJGMONBKG| { &mut m.MMLBFPNPHCL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GCFIIGOLPMF",
            |m: &BCCJGMONBKG| { &m.GCFIIGOLPMF },
            |m: &mut BCCJGMONBKG| { &mut m.GCFIIGOLPMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IFJLCHNNPDB::IFJLCHNNPDB>(
            "BDIEFEDBMIC",
            BCCJGMONBKG::has_BDIEFEDBMIC,
            BCCJGMONBKG::BDIEFEDBMIC,
            BCCJGMONBKG::mut_BDIEFEDBMIC,
            BCCJGMONBKG::set_BDIEFEDBMIC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DMILKHDLOLJ::DMILKHDLOLJ>(
            "BBFACNPMACC",
            BCCJGMONBKG::has_BBFACNPMACC,
            BCCJGMONBKG::BBFACNPMACC,
            BCCJGMONBKG::mut_BBFACNPMACC,
            BCCJGMONBKG::set_BBFACNPMACC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KBCOKNIMFOH::KBCOKNIMFOH>(
            "LBMKGHECBEI",
            BCCJGMONBKG::has_LBMKGHECBEI,
            BCCJGMONBKG::LBMKGHECBEI,
            BCCJGMONBKG::mut_LBMKGHECBEI,
            BCCJGMONBKG::set_LBMKGHECBEI,
        ));
        oneofs.push(bccjgmonbkg::DGABDHDHDNC::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BCCJGMONBKG>(
            "BCCJGMONBKG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BCCJGMONBKG {
    const NAME: &'static str = "BCCJGMONBKG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.MMLBFPNPHCL = is.read_uint32()?;
                },
                48 => {
                    self.GCFIIGOLPMF = is.read_uint32()?;
                },
                6034 => {
                    self.DGABDHDHDNC = ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(is.read_message()?));
                },
                3402 => {
                    self.DGABDHDHDNC = ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(is.read_message()?));
                },
                1874 => {
                    self.DGABDHDHDNC = ::std::option::Option::Some(bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.MMLBFPNPHCL != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.MMLBFPNPHCL);
        }
        if self.GCFIIGOLPMF != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.GCFIIGOLPMF);
        }
        if let ::std::option::Option::Some(ref v) = self.DGABDHDHDNC {
            match v {
                &bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.MMLBFPNPHCL != 0 {
            os.write_uint32(11, self.MMLBFPNPHCL)?;
        }
        if self.GCFIIGOLPMF != 0 {
            os.write_uint32(6, self.GCFIIGOLPMF)?;
        }
        if let ::std::option::Option::Some(ref v) = self.DGABDHDHDNC {
            match v {
                &bccjgmonbkg::DGABDHDHDNC::BDIEFEDBMIC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(754, v, os)?;
                },
                &bccjgmonbkg::DGABDHDHDNC::BBFACNPMACC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(425, v, os)?;
                },
                &bccjgmonbkg::DGABDHDHDNC::LBMKGHECBEI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(234, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BCCJGMONBKG {
        BCCJGMONBKG::new()
    }

    fn clear(&mut self) {
        self.MMLBFPNPHCL = 0;
        self.GCFIIGOLPMF = 0;
        self.DGABDHDHDNC = ::std::option::Option::None;
        self.DGABDHDHDNC = ::std::option::Option::None;
        self.DGABDHDHDNC = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BCCJGMONBKG {
        static instance: BCCJGMONBKG = BCCJGMONBKG {
            MMLBFPNPHCL: 0,
            GCFIIGOLPMF: 0,
            DGABDHDHDNC: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BCCJGMONBKG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BCCJGMONBKG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BCCJGMONBKG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BCCJGMONBKG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BCCJGMONBKG`
pub mod bccjgmonbkg {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:BCCJGMONBKG.DGABDHDHDNC)
    pub enum DGABDHDHDNC {
        // @@protoc_insertion_point(oneof_field:BCCJGMONBKG.BDIEFEDBMIC)
        BDIEFEDBMIC(super::super::IFJLCHNNPDB::IFJLCHNNPDB),
        // @@protoc_insertion_point(oneof_field:BCCJGMONBKG.BBFACNPMACC)
        BBFACNPMACC(super::super::DMILKHDLOLJ::DMILKHDLOLJ),
        // @@protoc_insertion_point(oneof_field:BCCJGMONBKG.LBMKGHECBEI)
        LBMKGHECBEI(super::super::KBCOKNIMFOH::KBCOKNIMFOH),
    }

    impl ::protobuf::Oneof for DGABDHDHDNC {
    }

    impl ::protobuf::OneofFull for DGABDHDHDNC {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BCCJGMONBKG as ::protobuf::MessageFull>::descriptor().oneof_by_name("DGABDHDHDNC").unwrap()).clone()
        }
    }

    impl DGABDHDHDNC {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DGABDHDHDNC>("DGABDHDHDNC")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BCCJGMONBKG.proto\x1a\x11DMILKHDLOLJ.proto\x1a\x11IFJLCHNNPDB.prot\
    o\x1a\x11KBCOKNIMFOH.proto\"\xf9\x01\n\x0bBCCJGMONBKG\x12\x20\n\x0bMMLBF\
    PNPHCL\x18\x0b\x20\x01(\rR\x0bMMLBFPNPHCL\x12\x20\n\x0bGCFIIGOLPMF\x18\
    \x06\x20\x01(\rR\x0bGCFIIGOLPMF\x121\n\x0bBDIEFEDBMIC\x18\xf2\x05\x20\
    \x01(\x0b2\x0c.IFJLCHNNPDBH\0R\x0bBDIEFEDBMIC\x121\n\x0bBBFACNPMACC\x18\
    \xa9\x03\x20\x01(\x0b2\x0c.DMILKHDLOLJH\0R\x0bBBFACNPMACC\x121\n\x0bLBMK\
    GHECBEI\x18\xea\x01\x20\x01(\x0b2\x0c.KBCOKNIMFOHH\0R\x0bLBMKGHECBEIB\r\
    \n\x0bDGABDHDHDNCb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::DMILKHDLOLJ::file_descriptor().clone());
            deps.push(super::IFJLCHNNPDB::file_descriptor().clone());
            deps.push(super::KBCOKNIMFOH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BCCJGMONBKG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
