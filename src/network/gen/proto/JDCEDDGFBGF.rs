// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JDCEDDGFBGF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:JDCEDDGFBGF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JDCEDDGFBGF {
    // message fields
    // @@protoc_insertion_point(field:JDCEDDGFBGF.LGOMODLBJEB)
    pub LGOMODLBJEB: ::protobuf::MessageField<super::ELAMGBPKDFA::ELAMGBPKDFA>,
    // @@protoc_insertion_point(field:JDCEDDGFBGF.IBCNIFAPFCM)
    pub IBCNIFAPFCM: ::protobuf::EnumOrUnknown<super::FMBMHHBPODJ::FMBMHHBPODJ>,
    // @@protoc_insertion_point(field:JDCEDDGFBGF.ECEFBMINBKJ)
    pub ECEFBMINBKJ: ::std::vec::Vec<super::HMBOAEFMEMP::HMBOAEFMEMP>,
    // @@protoc_insertion_point(field:JDCEDDGFBGF.BAMAGIMNBNK)
    pub BAMAGIMNBNK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:JDCEDDGFBGF.FCLNEEKGEJF)
    pub FCLNEEKGEJF: u32,
    // @@protoc_insertion_point(field:JDCEDDGFBGF.NCBNMLCCBPG)
    pub NCBNMLCCBPG: i32,
    // @@protoc_insertion_point(field:JDCEDDGFBGF.GJLBFNNOJMD)
    pub GJLBFNNOJMD: u64,
    // special fields
    // @@protoc_insertion_point(special_field:JDCEDDGFBGF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JDCEDDGFBGF {
    fn default() -> &'a JDCEDDGFBGF {
        <JDCEDDGFBGF as ::protobuf::Message>::default_instance()
    }
}

impl JDCEDDGFBGF {
    pub fn new() -> JDCEDDGFBGF {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ELAMGBPKDFA::ELAMGBPKDFA>(
            "LGOMODLBJEB",
            |m: &JDCEDDGFBGF| { &m.LGOMODLBJEB },
            |m: &mut JDCEDDGFBGF| { &mut m.LGOMODLBJEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IBCNIFAPFCM",
            |m: &JDCEDDGFBGF| { &m.IBCNIFAPFCM },
            |m: &mut JDCEDDGFBGF| { &mut m.IBCNIFAPFCM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ECEFBMINBKJ",
            |m: &JDCEDDGFBGF| { &m.ECEFBMINBKJ },
            |m: &mut JDCEDDGFBGF| { &mut m.ECEFBMINBKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BAMAGIMNBNK",
            |m: &JDCEDDGFBGF| { &m.BAMAGIMNBNK },
            |m: &mut JDCEDDGFBGF| { &mut m.BAMAGIMNBNK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FCLNEEKGEJF",
            |m: &JDCEDDGFBGF| { &m.FCLNEEKGEJF },
            |m: &mut JDCEDDGFBGF| { &mut m.FCLNEEKGEJF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NCBNMLCCBPG",
            |m: &JDCEDDGFBGF| { &m.NCBNMLCCBPG },
            |m: &mut JDCEDDGFBGF| { &mut m.NCBNMLCCBPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GJLBFNNOJMD",
            |m: &JDCEDDGFBGF| { &m.GJLBFNNOJMD },
            |m: &mut JDCEDDGFBGF| { &mut m.GJLBFNNOJMD },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JDCEDDGFBGF>(
            "JDCEDDGFBGF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JDCEDDGFBGF {
    const NAME: &'static str = "JDCEDDGFBGF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LGOMODLBJEB)?;
                },
                120 => {
                    self.IBCNIFAPFCM = is.read_enum_or_unknown()?;
                },
                98 => {
                    self.ECEFBMINBKJ.push(is.read_message()?);
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.BAMAGIMNBNK)?;
                },
                72 => {
                    self.BAMAGIMNBNK.push(is.read_uint32()?);
                },
                32 => {
                    self.FCLNEEKGEJF = is.read_uint32()?;
                },
                104 => {
                    self.NCBNMLCCBPG = is.read_int32()?;
                },
                40 => {
                    self.GJLBFNNOJMD = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.LGOMODLBJEB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.IBCNIFAPFCM != ::protobuf::EnumOrUnknown::new(super::FMBMHHBPODJ::FMBMHHBPODJ::MATCH3_STATE_IDLE) {
            my_size += ::protobuf::rt::int32_size(15, self.IBCNIFAPFCM.value());
        }
        for value in &self.ECEFBMINBKJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.BAMAGIMNBNK {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        if self.FCLNEEKGEJF != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.FCLNEEKGEJF);
        }
        if self.NCBNMLCCBPG != 0 {
            my_size += ::protobuf::rt::int32_size(13, self.NCBNMLCCBPG);
        }
        if self.GJLBFNNOJMD != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.GJLBFNNOJMD);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.LGOMODLBJEB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.IBCNIFAPFCM != ::protobuf::EnumOrUnknown::new(super::FMBMHHBPODJ::FMBMHHBPODJ::MATCH3_STATE_IDLE) {
            os.write_enum(15, ::protobuf::EnumOrUnknown::value(&self.IBCNIFAPFCM))?;
        }
        for v in &self.ECEFBMINBKJ {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.BAMAGIMNBNK {
            os.write_uint32(9, *v)?;
        };
        if self.FCLNEEKGEJF != 0 {
            os.write_uint32(4, self.FCLNEEKGEJF)?;
        }
        if self.NCBNMLCCBPG != 0 {
            os.write_int32(13, self.NCBNMLCCBPG)?;
        }
        if self.GJLBFNNOJMD != 0 {
            os.write_uint64(5, self.GJLBFNNOJMD)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JDCEDDGFBGF {
        JDCEDDGFBGF::new()
    }

    fn clear(&mut self) {
        self.LGOMODLBJEB.clear();
        self.IBCNIFAPFCM = ::protobuf::EnumOrUnknown::new(super::FMBMHHBPODJ::FMBMHHBPODJ::MATCH3_STATE_IDLE);
        self.ECEFBMINBKJ.clear();
        self.BAMAGIMNBNK.clear();
        self.FCLNEEKGEJF = 0;
        self.NCBNMLCCBPG = 0;
        self.GJLBFNNOJMD = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JDCEDDGFBGF {
        static instance: JDCEDDGFBGF = JDCEDDGFBGF {
            LGOMODLBJEB: ::protobuf::MessageField::none(),
            IBCNIFAPFCM: ::protobuf::EnumOrUnknown::from_i32(0),
            ECEFBMINBKJ: ::std::vec::Vec::new(),
            BAMAGIMNBNK: ::std::vec::Vec::new(),
            FCLNEEKGEJF: 0,
            NCBNMLCCBPG: 0,
            GJLBFNNOJMD: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JDCEDDGFBGF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JDCEDDGFBGF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JDCEDDGFBGF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JDCEDDGFBGF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JDCEDDGFBGF.proto\x1a\x11ELAMGBPKDFA.proto\x1a\x11FMBMHHBPODJ.prot\
    o\x1a\x11HMBOAEFMEMP.proto\"\xa5\x02\n\x0bJDCEDDGFBGF\x12.\n\x0bLGOMODLB\
    JEB\x18\x08\x20\x01(\x0b2\x0c.ELAMGBPKDFAR\x0bLGOMODLBJEB\x12.\n\x0bIBCN\
    IFAPFCM\x18\x0f\x20\x01(\x0e2\x0c.FMBMHHBPODJR\x0bIBCNIFAPFCM\x12.\n\x0b\
    ECEFBMINBKJ\x18\x0c\x20\x03(\x0b2\x0c.HMBOAEFMEMPR\x0bECEFBMINBKJ\x12\
    \x20\n\x0bBAMAGIMNBNK\x18\t\x20\x03(\rR\x0bBAMAGIMNBNK\x12\x20\n\x0bFCLN\
    EEKGEJF\x18\x04\x20\x01(\rR\x0bFCLNEEKGEJF\x12\x20\n\x0bNCBNMLCCBPG\x18\
    \r\x20\x01(\x05R\x0bNCBNMLCCBPG\x12\x20\n\x0bGJLBFNNOJMD\x18\x05\x20\x01\
    (\x04R\x0bGJLBFNNOJMDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ELAMGBPKDFA::file_descriptor().clone());
            deps.push(super::FMBMHHBPODJ::file_descriptor().clone());
            deps.push(super::HMBOAEFMEMP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JDCEDDGFBGF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
