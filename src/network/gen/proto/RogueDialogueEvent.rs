// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueDialogueEvent.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueDialogueEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueDialogueEvent {
    // message fields
    // @@protoc_insertion_point(field:RogueDialogueEvent.INJPFALMDHJ)
    pub INJPFALMDHJ: u32,
    // @@protoc_insertion_point(field:RogueDialogueEvent.game_mode_type)
    pub game_mode_type: u32,
    // @@protoc_insertion_point(field:RogueDialogueEvent.GBMDBBBMBEJ)
    pub GBMDBBBMBEJ: u32,
    // @@protoc_insertion_point(field:RogueDialogueEvent.npc_id)
    pub npc_id: u32,
    // @@protoc_insertion_point(field:RogueDialogueEvent.rogue_dialogue_event_param)
    pub rogue_dialogue_event_param: ::std::vec::Vec<super::RogueDialogueEventParam::RogueDialogueEventParam>,
    // @@protoc_insertion_point(field:RogueDialogueEvent.select_event_id)
    pub select_event_id: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueDialogueEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueDialogueEvent {
    fn default() -> &'a RogueDialogueEvent {
        <RogueDialogueEvent as ::protobuf::Message>::default_instance()
    }
}

impl RogueDialogueEvent {
    pub fn new() -> RogueDialogueEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "INJPFALMDHJ",
            |m: &RogueDialogueEvent| { &m.INJPFALMDHJ },
            |m: &mut RogueDialogueEvent| { &mut m.INJPFALMDHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "game_mode_type",
            |m: &RogueDialogueEvent| { &m.game_mode_type },
            |m: &mut RogueDialogueEvent| { &mut m.game_mode_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GBMDBBBMBEJ",
            |m: &RogueDialogueEvent| { &m.GBMDBBBMBEJ },
            |m: &mut RogueDialogueEvent| { &mut m.GBMDBBBMBEJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "npc_id",
            |m: &RogueDialogueEvent| { &m.npc_id },
            |m: &mut RogueDialogueEvent| { &mut m.npc_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rogue_dialogue_event_param",
            |m: &RogueDialogueEvent| { &m.rogue_dialogue_event_param },
            |m: &mut RogueDialogueEvent| { &mut m.rogue_dialogue_event_param },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "select_event_id",
            |m: &RogueDialogueEvent| { &m.select_event_id },
            |m: &mut RogueDialogueEvent| { &mut m.select_event_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueDialogueEvent>(
            "RogueDialogueEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueDialogueEvent {
    const NAME: &'static str = "RogueDialogueEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.INJPFALMDHJ = is.read_uint32()?;
                },
                104 => {
                    self.game_mode_type = is.read_uint32()?;
                },
                48 => {
                    self.GBMDBBBMBEJ = is.read_uint32()?;
                },
                8 => {
                    self.npc_id = is.read_uint32()?;
                },
                122 => {
                    self.rogue_dialogue_event_param.push(is.read_message()?);
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.select_event_id)?;
                },
                64 => {
                    self.select_event_id.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.INJPFALMDHJ != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.INJPFALMDHJ);
        }
        if self.game_mode_type != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.game_mode_type);
        }
        if self.GBMDBBBMBEJ != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.GBMDBBBMBEJ);
        }
        if self.npc_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.npc_id);
        }
        for value in &self.rogue_dialogue_event_param {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.select_event_id {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.INJPFALMDHJ != 0 {
            os.write_uint32(7, self.INJPFALMDHJ)?;
        }
        if self.game_mode_type != 0 {
            os.write_uint32(13, self.game_mode_type)?;
        }
        if self.GBMDBBBMBEJ != 0 {
            os.write_uint32(6, self.GBMDBBBMBEJ)?;
        }
        if self.npc_id != 0 {
            os.write_uint32(1, self.npc_id)?;
        }
        for v in &self.rogue_dialogue_event_param {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        for v in &self.select_event_id {
            os.write_uint32(8, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueDialogueEvent {
        RogueDialogueEvent::new()
    }

    fn clear(&mut self) {
        self.INJPFALMDHJ = 0;
        self.game_mode_type = 0;
        self.GBMDBBBMBEJ = 0;
        self.npc_id = 0;
        self.rogue_dialogue_event_param.clear();
        self.select_event_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueDialogueEvent {
        static instance: RogueDialogueEvent = RogueDialogueEvent {
            INJPFALMDHJ: 0,
            game_mode_type: 0,
            GBMDBBBMBEJ: 0,
            npc_id: 0,
            rogue_dialogue_event_param: ::std::vec::Vec::new(),
            select_event_id: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueDialogueEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueDialogueEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueDialogueEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueDialogueEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18RogueDialogueEvent.proto\x1a\x1dRogueDialogueEventParam.proto\"\
    \x94\x02\n\x12RogueDialogueEvent\x12\x20\n\x0bINJPFALMDHJ\x18\x07\x20\
    \x01(\rR\x0bINJPFALMDHJ\x12$\n\x0egame_mode_type\x18\r\x20\x01(\rR\x0cga\
    meModeType\x12\x20\n\x0bGBMDBBBMBEJ\x18\x06\x20\x01(\rR\x0bGBMDBBBMBEJ\
    \x12\x15\n\x06npc_id\x18\x01\x20\x01(\rR\x05npcId\x12U\n\x1arogue_dialog\
    ue_event_param\x18\x0f\x20\x03(\x0b2\x18.RogueDialogueEventParamR\x17rog\
    ueDialogueEventParam\x12&\n\x0fselect_event_id\x18\x08\x20\x03(\rR\rsele\
    ctEventIdB\x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::RogueDialogueEventParam::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueDialogueEvent::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
