// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FAINMOBPJMG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FAINMOBPJMG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FAINMOBPJMG {
    // message fields
    // @@protoc_insertion_point(field:FAINMOBPJMG.OGDMEGCODHO)
    pub OGDMEGCODHO: ::protobuf::EnumOrUnknown<super::DevelopmentType::DevelopmentType>,
    // @@protoc_insertion_point(field:FAINMOBPJMG.DDDNIOCPGAH)
    pub DDDNIOCPGAH: i64,
    // message oneof groups
    pub PHMHMJGFEEE: ::std::option::Option<fainmobpjmg::PHMHMJGFEEE>,
    // special fields
    // @@protoc_insertion_point(special_field:FAINMOBPJMG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FAINMOBPJMG {
    fn default() -> &'a FAINMOBPJMG {
        <FAINMOBPJMG as ::protobuf::Message>::default_instance()
    }
}

impl FAINMOBPJMG {
    pub fn new() -> FAINMOBPJMG {
        ::std::default::Default::default()
    }

    // .EGBPFBMGIPF JMLMHKFCOGJ = 1166;

    pub fn JMLMHKFCOGJ(&self) -> &super::EGBPFBMGIPF::EGBPFBMGIPF {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(ref v)) => v,
            _ => <super::EGBPFBMGIPF::EGBPFBMGIPF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JMLMHKFCOGJ(&mut self) {
        self.PHMHMJGFEEE = ::std::option::Option::None;
    }

    pub fn has_JMLMHKFCOGJ(&self) -> bool {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JMLMHKFCOGJ(&mut self, v: super::EGBPFBMGIPF::EGBPFBMGIPF) {
        self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JMLMHKFCOGJ(&mut self) -> &mut super::EGBPFBMGIPF::EGBPFBMGIPF {
        if let ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(_)) = self.PHMHMJGFEEE {
        } else {
            self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(super::EGBPFBMGIPF::EGBPFBMGIPF::new()));
        }
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JMLMHKFCOGJ(&mut self) -> super::EGBPFBMGIPF::EGBPFBMGIPF {
        if self.has_JMLMHKFCOGJ() {
            match self.PHMHMJGFEEE.take() {
                ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EGBPFBMGIPF::EGBPFBMGIPF::new()
        }
    }

    // .KJIFKKLHIJB EHFCDIAADJE = 1350;

    pub fn EHFCDIAADJE(&self) -> &super::KJIFKKLHIJB::KJIFKKLHIJB {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(ref v)) => v,
            _ => <super::KJIFKKLHIJB::KJIFKKLHIJB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EHFCDIAADJE(&mut self) {
        self.PHMHMJGFEEE = ::std::option::Option::None;
    }

    pub fn has_EHFCDIAADJE(&self) -> bool {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EHFCDIAADJE(&mut self, v: super::KJIFKKLHIJB::KJIFKKLHIJB) {
        self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EHFCDIAADJE(&mut self) -> &mut super::KJIFKKLHIJB::KJIFKKLHIJB {
        if let ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(_)) = self.PHMHMJGFEEE {
        } else {
            self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(super::KJIFKKLHIJB::KJIFKKLHIJB::new()));
        }
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EHFCDIAADJE(&mut self) -> super::KJIFKKLHIJB::KJIFKKLHIJB {
        if self.has_EHFCDIAADJE() {
            match self.PHMHMJGFEEE.take() {
                ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KJIFKKLHIJB::KJIFKKLHIJB::new()
        }
    }

    // uint32 avatar_id = 662;

    pub fn avatar_id(&self) -> u32 {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::AvatarId(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_avatar_id(&mut self) {
        self.PHMHMJGFEEE = ::std::option::Option::None;
    }

    pub fn has_avatar_id(&self) -> bool {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::AvatarId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_avatar_id(&mut self, v: u32) {
        self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::AvatarId(v))
    }

    // uint32 EGNDMKMFPIN = 834;

    pub fn EGNDMKMFPIN(&self) -> u32 {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EGNDMKMFPIN(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_EGNDMKMFPIN(&mut self) {
        self.PHMHMJGFEEE = ::std::option::Option::None;
    }

    pub fn has_EGNDMKMFPIN(&self) -> bool {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EGNDMKMFPIN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EGNDMKMFPIN(&mut self, v: u32) {
        self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EGNDMKMFPIN(v))
    }

    // uint32 BAEAKJGMOGA = 665;

    pub fn BAEAKJGMOGA(&self) -> u32 {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::BAEAKJGMOGA(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_BAEAKJGMOGA(&mut self) {
        self.PHMHMJGFEEE = ::std::option::Option::None;
    }

    pub fn has_BAEAKJGMOGA(&self) -> bool {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::BAEAKJGMOGA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BAEAKJGMOGA(&mut self, v: u32) {
        self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::BAEAKJGMOGA(v))
    }

    // .ICDLIMEEGBC PHLBMNLJAGE = 1937;

    pub fn PHLBMNLJAGE(&self) -> &super::ICDLIMEEGBC::ICDLIMEEGBC {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(ref v)) => v,
            _ => <super::ICDLIMEEGBC::ICDLIMEEGBC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PHLBMNLJAGE(&mut self) {
        self.PHMHMJGFEEE = ::std::option::Option::None;
    }

    pub fn has_PHLBMNLJAGE(&self) -> bool {
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PHLBMNLJAGE(&mut self, v: super::ICDLIMEEGBC::ICDLIMEEGBC) {
        self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PHLBMNLJAGE(&mut self) -> &mut super::ICDLIMEEGBC::ICDLIMEEGBC {
        if let ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(_)) = self.PHMHMJGFEEE {
        } else {
            self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(super::ICDLIMEEGBC::ICDLIMEEGBC::new()));
        }
        match self.PHMHMJGFEEE {
            ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PHLBMNLJAGE(&mut self) -> super::ICDLIMEEGBC::ICDLIMEEGBC {
        if self.has_PHLBMNLJAGE() {
            match self.PHMHMJGFEEE.take() {
                ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ICDLIMEEGBC::ICDLIMEEGBC::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OGDMEGCODHO",
            |m: &FAINMOBPJMG| { &m.OGDMEGCODHO },
            |m: &mut FAINMOBPJMG| { &mut m.OGDMEGCODHO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DDDNIOCPGAH",
            |m: &FAINMOBPJMG| { &m.DDDNIOCPGAH },
            |m: &mut FAINMOBPJMG| { &mut m.DDDNIOCPGAH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EGBPFBMGIPF::EGBPFBMGIPF>(
            "JMLMHKFCOGJ",
            FAINMOBPJMG::has_JMLMHKFCOGJ,
            FAINMOBPJMG::JMLMHKFCOGJ,
            FAINMOBPJMG::mut_JMLMHKFCOGJ,
            FAINMOBPJMG::set_JMLMHKFCOGJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KJIFKKLHIJB::KJIFKKLHIJB>(
            "EHFCDIAADJE",
            FAINMOBPJMG::has_EHFCDIAADJE,
            FAINMOBPJMG::EHFCDIAADJE,
            FAINMOBPJMG::mut_EHFCDIAADJE,
            FAINMOBPJMG::set_EHFCDIAADJE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "avatar_id",
            FAINMOBPJMG::has_avatar_id,
            FAINMOBPJMG::avatar_id,
            FAINMOBPJMG::set_avatar_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "EGNDMKMFPIN",
            FAINMOBPJMG::has_EGNDMKMFPIN,
            FAINMOBPJMG::EGNDMKMFPIN,
            FAINMOBPJMG::set_EGNDMKMFPIN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "BAEAKJGMOGA",
            FAINMOBPJMG::has_BAEAKJGMOGA,
            FAINMOBPJMG::BAEAKJGMOGA,
            FAINMOBPJMG::set_BAEAKJGMOGA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ICDLIMEEGBC::ICDLIMEEGBC>(
            "PHLBMNLJAGE",
            FAINMOBPJMG::has_PHLBMNLJAGE,
            FAINMOBPJMG::PHLBMNLJAGE,
            FAINMOBPJMG::mut_PHLBMNLJAGE,
            FAINMOBPJMG::set_PHLBMNLJAGE,
        ));
        oneofs.push(fainmobpjmg::PHMHMJGFEEE::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FAINMOBPJMG>(
            "FAINMOBPJMG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FAINMOBPJMG {
    const NAME: &'static str = "FAINMOBPJMG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.OGDMEGCODHO = is.read_enum_or_unknown()?;
                },
                80 => {
                    self.DDDNIOCPGAH = is.read_int64()?;
                },
                9330 => {
                    self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(is.read_message()?));
                },
                10802 => {
                    self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(is.read_message()?));
                },
                5296 => {
                    self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::AvatarId(is.read_uint32()?));
                },
                6672 => {
                    self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::EGNDMKMFPIN(is.read_uint32()?));
                },
                5320 => {
                    self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::BAEAKJGMOGA(is.read_uint32()?));
                },
                15498 => {
                    self.PHMHMJGFEEE = ::std::option::Option::Some(fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OGDMEGCODHO != ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE) {
            my_size += ::protobuf::rt::int32_size(1, self.OGDMEGCODHO.value());
        }
        if self.DDDNIOCPGAH != 0 {
            my_size += ::protobuf::rt::int64_size(10, self.DDDNIOCPGAH);
        }
        if let ::std::option::Option::Some(ref v) = self.PHMHMJGFEEE {
            match v {
                &fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fainmobpjmg::PHMHMJGFEEE::AvatarId(v) => {
                    my_size += ::protobuf::rt::uint32_size(662, v);
                },
                &fainmobpjmg::PHMHMJGFEEE::EGNDMKMFPIN(v) => {
                    my_size += ::protobuf::rt::uint32_size(834, v);
                },
                &fainmobpjmg::PHMHMJGFEEE::BAEAKJGMOGA(v) => {
                    my_size += ::protobuf::rt::uint32_size(665, v);
                },
                &fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OGDMEGCODHO != ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.OGDMEGCODHO))?;
        }
        if self.DDDNIOCPGAH != 0 {
            os.write_int64(10, self.DDDNIOCPGAH)?;
        }
        if let ::std::option::Option::Some(ref v) = self.PHMHMJGFEEE {
            match v {
                &fainmobpjmg::PHMHMJGFEEE::JMLMHKFCOGJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1166, v, os)?;
                },
                &fainmobpjmg::PHMHMJGFEEE::EHFCDIAADJE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1350, v, os)?;
                },
                &fainmobpjmg::PHMHMJGFEEE::AvatarId(v) => {
                    os.write_uint32(662, v)?;
                },
                &fainmobpjmg::PHMHMJGFEEE::EGNDMKMFPIN(v) => {
                    os.write_uint32(834, v)?;
                },
                &fainmobpjmg::PHMHMJGFEEE::BAEAKJGMOGA(v) => {
                    os.write_uint32(665, v)?;
                },
                &fainmobpjmg::PHMHMJGFEEE::PHLBMNLJAGE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1937, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FAINMOBPJMG {
        FAINMOBPJMG::new()
    }

    fn clear(&mut self) {
        self.OGDMEGCODHO = ::protobuf::EnumOrUnknown::new(super::DevelopmentType::DevelopmentType::DEVELOPMENT_NONE);
        self.DDDNIOCPGAH = 0;
        self.PHMHMJGFEEE = ::std::option::Option::None;
        self.PHMHMJGFEEE = ::std::option::Option::None;
        self.PHMHMJGFEEE = ::std::option::Option::None;
        self.PHMHMJGFEEE = ::std::option::Option::None;
        self.PHMHMJGFEEE = ::std::option::Option::None;
        self.PHMHMJGFEEE = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FAINMOBPJMG {
        static instance: FAINMOBPJMG = FAINMOBPJMG {
            OGDMEGCODHO: ::protobuf::EnumOrUnknown::from_i32(0),
            DDDNIOCPGAH: 0,
            PHMHMJGFEEE: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FAINMOBPJMG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FAINMOBPJMG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FAINMOBPJMG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FAINMOBPJMG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FAINMOBPJMG`
pub mod fainmobpjmg {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:FAINMOBPJMG.PHMHMJGFEEE)
    pub enum PHMHMJGFEEE {
        // @@protoc_insertion_point(oneof_field:FAINMOBPJMG.JMLMHKFCOGJ)
        JMLMHKFCOGJ(super::super::EGBPFBMGIPF::EGBPFBMGIPF),
        // @@protoc_insertion_point(oneof_field:FAINMOBPJMG.EHFCDIAADJE)
        EHFCDIAADJE(super::super::KJIFKKLHIJB::KJIFKKLHIJB),
        // @@protoc_insertion_point(oneof_field:FAINMOBPJMG.avatar_id)
        AvatarId(u32),
        // @@protoc_insertion_point(oneof_field:FAINMOBPJMG.EGNDMKMFPIN)
        EGNDMKMFPIN(u32),
        // @@protoc_insertion_point(oneof_field:FAINMOBPJMG.BAEAKJGMOGA)
        BAEAKJGMOGA(u32),
        // @@protoc_insertion_point(oneof_field:FAINMOBPJMG.PHLBMNLJAGE)
        PHLBMNLJAGE(super::super::ICDLIMEEGBC::ICDLIMEEGBC),
    }

    impl ::protobuf::Oneof for PHMHMJGFEEE {
    }

    impl ::protobuf::OneofFull for PHMHMJGFEEE {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FAINMOBPJMG as ::protobuf::MessageFull>::descriptor().oneof_by_name("PHMHMJGFEEE").unwrap()).clone()
        }
    }

    impl PHMHMJGFEEE {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<PHMHMJGFEEE>("PHMHMJGFEEE")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FAINMOBPJMG.proto\x1a\x15DevelopmentType.proto\x1a\x11EGBPFBMGIPF.\
    proto\x1a\x11ICDLIMEEGBC.proto\x1a\x11KJIFKKLHIJB.proto\"\xf5\x02\n\x0bF\
    AINMOBPJMG\x122\n\x0bOGDMEGCODHO\x18\x01\x20\x01(\x0e2\x10.DevelopmentTy\
    peR\x0bOGDMEGCODHO\x12\x20\n\x0bDDDNIOCPGAH\x18\n\x20\x01(\x03R\x0bDDDNI\
    OCPGAH\x121\n\x0bJMLMHKFCOGJ\x18\x8e\t\x20\x01(\x0b2\x0c.EGBPFBMGIPFH\0R\
    \x0bJMLMHKFCOGJ\x121\n\x0bEHFCDIAADJE\x18\xc6\n\x20\x01(\x0b2\x0c.KJIFKK\
    LHIJBH\0R\x0bEHFCDIAADJE\x12\x1e\n\tavatar_id\x18\x96\x05\x20\x01(\rH\0R\
    \x08avatarId\x12#\n\x0bEGNDMKMFPIN\x18\xc2\x06\x20\x01(\rH\0R\x0bEGNDMKM\
    FPIN\x12#\n\x0bBAEAKJGMOGA\x18\x99\x05\x20\x01(\rH\0R\x0bBAEAKJGMOGA\x12\
    1\n\x0bPHLBMNLJAGE\x18\x91\x0f\x20\x01(\x0b2\x0c.ICDLIMEEGBCH\0R\x0bPHLB\
    MNLJAGEB\r\n\x0bPHMHMJGFEEEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::DevelopmentType::file_descriptor().clone());
            deps.push(super::EGBPFBMGIPF::file_descriptor().clone());
            deps.push(super::ICDLIMEEGBC::file_descriptor().clone());
            deps.push(super::KJIFKKLHIJB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FAINMOBPJMG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
