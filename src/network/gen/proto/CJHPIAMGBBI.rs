// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CJHPIAMGBBI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CJHPIAMGBBI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CJHPIAMGBBI {
    // message fields
    // @@protoc_insertion_point(field:CJHPIAMGBBI.FMJCBKLEHDO)
    pub FMJCBKLEHDO: u32,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.NOBIOIIFNLF)
    pub NOBIOIIFNLF: u32,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.ECCNJODAHIO)
    pub ECCNJODAHIO: ::protobuf::EnumOrUnknown<super::ChessRogueCellSpecialType::ChessRogueCellSpecialType>,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.HPJBIHGMKMN)
    pub HPJBIHGMKMN: ::protobuf::EnumOrUnknown<super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus>,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.KHIGAKJCLLI)
    pub KHIGAKJCLLI: u32,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.BFCBDENMELD)
    pub BFCBDENMELD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.CPJGLAJDNAC)
    pub CPJGLAJDNAC: ::protobuf::MessageField<super::FCHJAMCENPJ::FCHJAMCENPJ>,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.FFKNMAONGIB)
    pub FFKNMAONGIB: u32,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.OBAEOLCKBFI)
    pub OBAEOLCKBFI: u32,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.IFPKHGLPALL)
    pub IFPKHGLPALL: bool,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.AELGPBEJJNI)
    pub AELGPBEJJNI: u32,
    // @@protoc_insertion_point(field:CJHPIAMGBBI.KPHGMOIDFND)
    pub KPHGMOIDFND: bool,
    // special fields
    // @@protoc_insertion_point(special_field:CJHPIAMGBBI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CJHPIAMGBBI {
    fn default() -> &'a CJHPIAMGBBI {
        <CJHPIAMGBBI as ::protobuf::Message>::default_instance()
    }
}

impl CJHPIAMGBBI {
    pub fn new() -> CJHPIAMGBBI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMJCBKLEHDO",
            |m: &CJHPIAMGBBI| { &m.FMJCBKLEHDO },
            |m: &mut CJHPIAMGBBI| { &mut m.FMJCBKLEHDO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NOBIOIIFNLF",
            |m: &CJHPIAMGBBI| { &m.NOBIOIIFNLF },
            |m: &mut CJHPIAMGBBI| { &mut m.NOBIOIIFNLF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ECCNJODAHIO",
            |m: &CJHPIAMGBBI| { &m.ECCNJODAHIO },
            |m: &mut CJHPIAMGBBI| { &mut m.ECCNJODAHIO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HPJBIHGMKMN",
            |m: &CJHPIAMGBBI| { &m.HPJBIHGMKMN },
            |m: &mut CJHPIAMGBBI| { &mut m.HPJBIHGMKMN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KHIGAKJCLLI",
            |m: &CJHPIAMGBBI| { &m.KHIGAKJCLLI },
            |m: &mut CJHPIAMGBBI| { &mut m.KHIGAKJCLLI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BFCBDENMELD",
            |m: &CJHPIAMGBBI| { &m.BFCBDENMELD },
            |m: &mut CJHPIAMGBBI| { &mut m.BFCBDENMELD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FCHJAMCENPJ::FCHJAMCENPJ>(
            "CPJGLAJDNAC",
            |m: &CJHPIAMGBBI| { &m.CPJGLAJDNAC },
            |m: &mut CJHPIAMGBBI| { &mut m.CPJGLAJDNAC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FFKNMAONGIB",
            |m: &CJHPIAMGBBI| { &m.FFKNMAONGIB },
            |m: &mut CJHPIAMGBBI| { &mut m.FFKNMAONGIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBAEOLCKBFI",
            |m: &CJHPIAMGBBI| { &m.OBAEOLCKBFI },
            |m: &mut CJHPIAMGBBI| { &mut m.OBAEOLCKBFI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IFPKHGLPALL",
            |m: &CJHPIAMGBBI| { &m.IFPKHGLPALL },
            |m: &mut CJHPIAMGBBI| { &mut m.IFPKHGLPALL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AELGPBEJJNI",
            |m: &CJHPIAMGBBI| { &m.AELGPBEJJNI },
            |m: &mut CJHPIAMGBBI| { &mut m.AELGPBEJJNI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KPHGMOIDFND",
            |m: &CJHPIAMGBBI| { &m.KPHGMOIDFND },
            |m: &mut CJHPIAMGBBI| { &mut m.KPHGMOIDFND },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CJHPIAMGBBI>(
            "CJHPIAMGBBI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CJHPIAMGBBI {
    const NAME: &'static str = "CJHPIAMGBBI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.FMJCBKLEHDO = is.read_uint32()?;
                },
                56 => {
                    self.NOBIOIIFNLF = is.read_uint32()?;
                },
                16 => {
                    self.ECCNJODAHIO = is.read_enum_or_unknown()?;
                },
                80 => {
                    self.HPJBIHGMKMN = is.read_enum_or_unknown()?;
                },
                96 => {
                    self.KHIGAKJCLLI = is.read_uint32()?;
                },
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.BFCBDENMELD)?;
                },
                112 => {
                    self.BFCBDENMELD.push(is.read_uint32()?);
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CPJGLAJDNAC)?;
                },
                32 => {
                    self.FFKNMAONGIB = is.read_uint32()?;
                },
                48 => {
                    self.OBAEOLCKBFI = is.read_uint32()?;
                },
                88 => {
                    self.IFPKHGLPALL = is.read_bool()?;
                },
                64 => {
                    self.AELGPBEJJNI = is.read_uint32()?;
                },
                72 => {
                    self.KPHGMOIDFND = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.FMJCBKLEHDO != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.FMJCBKLEHDO);
        }
        if self.NOBIOIIFNLF != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.NOBIOIIFNLF);
        }
        if self.ECCNJODAHIO != ::protobuf::EnumOrUnknown::new(super::ChessRogueCellSpecialType::ChessRogueCellSpecialType::CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.ECCNJODAHIO.value());
        }
        if self.HPJBIHGMKMN != ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE) {
            my_size += ::protobuf::rt::int32_size(10, self.HPJBIHGMKMN.value());
        }
        if self.KHIGAKJCLLI != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.KHIGAKJCLLI);
        }
        for value in &self.BFCBDENMELD {
            my_size += ::protobuf::rt::uint32_size(14, *value);
        };
        if let Some(v) = self.CPJGLAJDNAC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.FFKNMAONGIB != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.FFKNMAONGIB);
        }
        if self.OBAEOLCKBFI != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.OBAEOLCKBFI);
        }
        if self.IFPKHGLPALL != false {
            my_size += 1 + 1;
        }
        if self.AELGPBEJJNI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.AELGPBEJJNI);
        }
        if self.KPHGMOIDFND != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.FMJCBKLEHDO != 0 {
            os.write_uint32(15, self.FMJCBKLEHDO)?;
        }
        if self.NOBIOIIFNLF != 0 {
            os.write_uint32(7, self.NOBIOIIFNLF)?;
        }
        if self.ECCNJODAHIO != ::protobuf::EnumOrUnknown::new(super::ChessRogueCellSpecialType::ChessRogueCellSpecialType::CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.ECCNJODAHIO))?;
        }
        if self.HPJBIHGMKMN != ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE) {
            os.write_enum(10, ::protobuf::EnumOrUnknown::value(&self.HPJBIHGMKMN))?;
        }
        if self.KHIGAKJCLLI != 0 {
            os.write_uint32(12, self.KHIGAKJCLLI)?;
        }
        for v in &self.BFCBDENMELD {
            os.write_uint32(14, *v)?;
        };
        if let Some(v) = self.CPJGLAJDNAC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.FFKNMAONGIB != 0 {
            os.write_uint32(4, self.FFKNMAONGIB)?;
        }
        if self.OBAEOLCKBFI != 0 {
            os.write_uint32(6, self.OBAEOLCKBFI)?;
        }
        if self.IFPKHGLPALL != false {
            os.write_bool(11, self.IFPKHGLPALL)?;
        }
        if self.AELGPBEJJNI != 0 {
            os.write_uint32(8, self.AELGPBEJJNI)?;
        }
        if self.KPHGMOIDFND != false {
            os.write_bool(9, self.KPHGMOIDFND)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CJHPIAMGBBI {
        CJHPIAMGBBI::new()
    }

    fn clear(&mut self) {
        self.FMJCBKLEHDO = 0;
        self.NOBIOIIFNLF = 0;
        self.ECCNJODAHIO = ::protobuf::EnumOrUnknown::new(super::ChessRogueCellSpecialType::ChessRogueCellSpecialType::CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE);
        self.HPJBIHGMKMN = ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE);
        self.KHIGAKJCLLI = 0;
        self.BFCBDENMELD.clear();
        self.CPJGLAJDNAC.clear();
        self.FFKNMAONGIB = 0;
        self.OBAEOLCKBFI = 0;
        self.IFPKHGLPALL = false;
        self.AELGPBEJJNI = 0;
        self.KPHGMOIDFND = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CJHPIAMGBBI {
        static instance: CJHPIAMGBBI = CJHPIAMGBBI {
            FMJCBKLEHDO: 0,
            NOBIOIIFNLF: 0,
            ECCNJODAHIO: ::protobuf::EnumOrUnknown::from_i32(0),
            HPJBIHGMKMN: ::protobuf::EnumOrUnknown::from_i32(0),
            KHIGAKJCLLI: 0,
            BFCBDENMELD: ::std::vec::Vec::new(),
            CPJGLAJDNAC: ::protobuf::MessageField::none(),
            FFKNMAONGIB: 0,
            OBAEOLCKBFI: 0,
            IFPKHGLPALL: false,
            AELGPBEJJNI: 0,
            KPHGMOIDFND: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CJHPIAMGBBI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CJHPIAMGBBI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CJHPIAMGBBI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CJHPIAMGBBI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CJHPIAMGBBI.proto\x1a\x1fChessRogueBoardCellStatus.proto\x1a\x1fCh\
    essRogueCellSpecialType.proto\x1a\x11FCHJAMCENPJ.proto\"\xeb\x03\n\x0bCJ\
    HPIAMGBBI\x12\x20\n\x0bFMJCBKLEHDO\x18\x0f\x20\x01(\rR\x0bFMJCBKLEHDO\
    \x12\x20\n\x0bNOBIOIIFNLF\x18\x07\x20\x01(\rR\x0bNOBIOIIFNLF\x12<\n\x0bE\
    CCNJODAHIO\x18\x02\x20\x01(\x0e2\x1a.ChessRogueCellSpecialTypeR\x0bECCNJ\
    ODAHIO\x12<\n\x0bHPJBIHGMKMN\x18\n\x20\x01(\x0e2\x1a.ChessRogueBoardCell\
    StatusR\x0bHPJBIHGMKMN\x12\x20\n\x0bKHIGAKJCLLI\x18\x0c\x20\x01(\rR\x0bK\
    HIGAKJCLLI\x12\x20\n\x0bBFCBDENMELD\x18\x0e\x20\x03(\rR\x0bBFCBDENMELD\
    \x12.\n\x0bCPJGLAJDNAC\x18\r\x20\x01(\x0b2\x0c.FCHJAMCENPJR\x0bCPJGLAJDN\
    AC\x12\x20\n\x0bFFKNMAONGIB\x18\x04\x20\x01(\rR\x0bFFKNMAONGIB\x12\x20\n\
    \x0bOBAEOLCKBFI\x18\x06\x20\x01(\rR\x0bOBAEOLCKBFI\x12\x20\n\x0bIFPKHGLP\
    ALL\x18\x0b\x20\x01(\x08R\x0bIFPKHGLPALL\x12\x20\n\x0bAELGPBEJJNI\x18\
    \x08\x20\x01(\rR\x0bAELGPBEJJNI\x12\x20\n\x0bKPHGMOIDFND\x18\t\x20\x01(\
    \x08R\x0bKPHGMOIDFNDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ChessRogueBoardCellStatus::file_descriptor().clone());
            deps.push(super::ChessRogueCellSpecialType::file_descriptor().clone());
            deps.push(super::FCHJAMCENPJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CJHPIAMGBBI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
