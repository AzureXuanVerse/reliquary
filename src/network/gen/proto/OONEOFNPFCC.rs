// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OONEOFNPFCC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:OONEOFNPFCC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OONEOFNPFCC {
    // message fields
    // @@protoc_insertion_point(field:OONEOFNPFCC.level)
    pub level: ::protobuf::MessageField<super::CLGPAKIJFGP::CLGPAKIJFGP>,
    // @@protoc_insertion_point(field:OONEOFNPFCC.HNFPENANCBD)
    pub HNFPENANCBD: ::protobuf::MessageField<super::HDFLAEHAEGO::HDFLAEHAEGO>,
    // @@protoc_insertion_point(field:OONEOFNPFCC.ANGJEBLFAHN)
    pub ANGJEBLFAHN: ::protobuf::MessageField<super::JBGGHPCNBME::JBGGHPCNBME>,
    // @@protoc_insertion_point(field:OONEOFNPFCC.BAFGPAPKHLD)
    pub BAFGPAPKHLD: ::protobuf::MessageField<super::DDJPKKEPNJP::DDJPKKEPNJP>,
    // @@protoc_insertion_point(field:OONEOFNPFCC.CBFIGLADLMM)
    pub CBFIGLADLMM: ::protobuf::MessageField<super::CFKJCLMLPNH::CFKJCLMLPNH>,
    // @@protoc_insertion_point(field:OONEOFNPFCC.AELEBFHHKDE)
    pub AELEBFHHKDE: ::protobuf::MessageField<super::AIFIGGICMNC::AIFIGGICMNC>,
    // @@protoc_insertion_point(field:OONEOFNPFCC.COCFMLGGMKE)
    pub COCFMLGGMKE: ::protobuf::MessageField<super::BHFKPPKCIIK::BHFKPPKCIIK>,
    // @@protoc_insertion_point(field:OONEOFNPFCC.LNPAHJDCEND)
    pub LNPAHJDCEND: ::protobuf::MessageField<super::HMECPBPGDJF::HMECPBPGDJF>,
    // @@protoc_insertion_point(field:OONEOFNPFCC.LMHEBAMJGGF)
    pub LMHEBAMJGGF: ::protobuf::MessageField<super::OBDIGNPJAAJ::OBDIGNPJAAJ>,
    // @@protoc_insertion_point(field:OONEOFNPFCC.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF)
    pub ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF: ::protobuf::MessageField<super::IAMPEBBEGFH::IAMPEBBEGFH>,
    // special fields
    // @@protoc_insertion_point(special_field:OONEOFNPFCC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OONEOFNPFCC {
    fn default() -> &'a OONEOFNPFCC {
        <OONEOFNPFCC as ::protobuf::Message>::default_instance()
    }
}

impl OONEOFNPFCC {
    pub fn new() -> OONEOFNPFCC {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CLGPAKIJFGP::CLGPAKIJFGP>(
            "level",
            |m: &OONEOFNPFCC| { &m.level },
            |m: &mut OONEOFNPFCC| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HDFLAEHAEGO::HDFLAEHAEGO>(
            "HNFPENANCBD",
            |m: &OONEOFNPFCC| { &m.HNFPENANCBD },
            |m: &mut OONEOFNPFCC| { &mut m.HNFPENANCBD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JBGGHPCNBME::JBGGHPCNBME>(
            "ANGJEBLFAHN",
            |m: &OONEOFNPFCC| { &m.ANGJEBLFAHN },
            |m: &mut OONEOFNPFCC| { &mut m.ANGJEBLFAHN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DDJPKKEPNJP::DDJPKKEPNJP>(
            "BAFGPAPKHLD",
            |m: &OONEOFNPFCC| { &m.BAFGPAPKHLD },
            |m: &mut OONEOFNPFCC| { &mut m.BAFGPAPKHLD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CFKJCLMLPNH::CFKJCLMLPNH>(
            "CBFIGLADLMM",
            |m: &OONEOFNPFCC| { &m.CBFIGLADLMM },
            |m: &mut OONEOFNPFCC| { &mut m.CBFIGLADLMM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AIFIGGICMNC::AIFIGGICMNC>(
            "AELEBFHHKDE",
            |m: &OONEOFNPFCC| { &m.AELEBFHHKDE },
            |m: &mut OONEOFNPFCC| { &mut m.AELEBFHHKDE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BHFKPPKCIIK::BHFKPPKCIIK>(
            "COCFMLGGMKE",
            |m: &OONEOFNPFCC| { &m.COCFMLGGMKE },
            |m: &mut OONEOFNPFCC| { &mut m.COCFMLGGMKE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HMECPBPGDJF::HMECPBPGDJF>(
            "LNPAHJDCEND",
            |m: &OONEOFNPFCC| { &m.LNPAHJDCEND },
            |m: &mut OONEOFNPFCC| { &mut m.LNPAHJDCEND },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OBDIGNPJAAJ::OBDIGNPJAAJ>(
            "LMHEBAMJGGF",
            |m: &OONEOFNPFCC| { &m.LMHEBAMJGGF },
            |m: &mut OONEOFNPFCC| { &mut m.LMHEBAMJGGF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IAMPEBBEGFH::IAMPEBBEGFH>(
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF",
            |m: &OONEOFNPFCC| { &m.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF },
            |m: &mut OONEOFNPFCC| { &mut m.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OONEOFNPFCC>(
            "OONEOFNPFCC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OONEOFNPFCC {
    const NAME: &'static str = "OONEOFNPFCC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.level)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HNFPENANCBD)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ANGJEBLFAHN)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BAFGPAPKHLD)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CBFIGLADLMM)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AELEBFHHKDE)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.COCFMLGGMKE)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LNPAHJDCEND)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LMHEBAMJGGF)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.level.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.HNFPENANCBD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ANGJEBLFAHN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.BAFGPAPKHLD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CBFIGLADLMM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.AELEBFHHKDE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.COCFMLGGMKE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LNPAHJDCEND.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LMHEBAMJGGF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.level.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.HNFPENANCBD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.ANGJEBLFAHN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.BAFGPAPKHLD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.CBFIGLADLMM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.AELEBFHHKDE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.COCFMLGGMKE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.LNPAHJDCEND.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.LMHEBAMJGGF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OONEOFNPFCC {
        OONEOFNPFCC::new()
    }

    fn clear(&mut self) {
        self.level.clear();
        self.HNFPENANCBD.clear();
        self.ANGJEBLFAHN.clear();
        self.BAFGPAPKHLD.clear();
        self.CBFIGLADLMM.clear();
        self.AELEBFHHKDE.clear();
        self.COCFMLGGMKE.clear();
        self.LNPAHJDCEND.clear();
        self.LMHEBAMJGGF.clear();
        self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OONEOFNPFCC {
        static instance: OONEOFNPFCC = OONEOFNPFCC {
            level: ::protobuf::MessageField::none(),
            HNFPENANCBD: ::protobuf::MessageField::none(),
            ANGJEBLFAHN: ::protobuf::MessageField::none(),
            BAFGPAPKHLD: ::protobuf::MessageField::none(),
            CBFIGLADLMM: ::protobuf::MessageField::none(),
            AELEBFHHKDE: ::protobuf::MessageField::none(),
            COCFMLGGMKE: ::protobuf::MessageField::none(),
            LNPAHJDCEND: ::protobuf::MessageField::none(),
            LMHEBAMJGGF: ::protobuf::MessageField::none(),
            ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OONEOFNPFCC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OONEOFNPFCC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OONEOFNPFCC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OONEOFNPFCC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OONEOFNPFCC.proto\x1a\x11AIFIGGICMNC.proto\x1a\x11BHFKPPKCIIK.prot\
    o\x1a\x11CFKJCLMLPNH.proto\x1a\x11CLGPAKIJFGP.proto\x1a\x11DDJPKKEPNJP.p\
    roto\x1a\x11HDFLAEHAEGO.proto\x1a\x11HMECPBPGDJF.proto\x1a\x11IAMPEBBEGF\
    H.proto\x1a\x11JBGGHPCNBME.proto\x1a\x11OBDIGNPJAAJ.proto\"\x9b\x04\n\
    \x0bOONEOFNPFCC\x12\"\n\x05level\x18\x02\x20\x01(\x0b2\x0c.CLGPAKIJFGPR\
    \x05level\x12.\n\x0bHNFPENANCBD\x18\x01\x20\x01(\x0b2\x0c.HDFLAEHAEGOR\
    \x0bHNFPENANCBD\x12.\n\x0bANGJEBLFAHN\x18\t\x20\x01(\x0b2\x0c.JBGGHPCNBM\
    ER\x0bANGJEBLFAHN\x12.\n\x0bBAFGPAPKHLD\x18\x06\x20\x01(\x0b2\x0c.DDJPKK\
    EPNJPR\x0bBAFGPAPKHLD\x12.\n\x0bCBFIGLADLMM\x18\n\x20\x01(\x0b2\x0c.CFKJ\
    CLMLPNHR\x0bCBFIGLADLMM\x12.\n\x0bAELEBFHHKDE\x18\x08\x20\x01(\x0b2\x0c.\
    AIFIGGICMNCR\x0bAELEBFHHKDE\x12.\n\x0bCOCFMLGGMKE\x18\x0b\x20\x01(\x0b2\
    \x0c.BHFKPPKCIIKR\x0bCOCFMLGGMKE\x12.\n\x0bLNPAHJDCEND\x18\x07\x20\x01(\
    \x0b2\x0c.HMECPBPGDJFR\x0bLNPAHJDCEND\x12.\n\x0bLMHEBAMJGGF\x18\x0e\x20\
    \x01(\x0b2\x0c.OBDIGNPJAAJR\x0bLMHEBAMJGGF\x12h\n+ROGUE_COMMON_ACTION_RE\
    SULT_SOURCE_TYPE_BUFF\x18\x0f\x20\x01(\x0b2\x0c.IAMPEBBEGFHR%ROGUECOMMON\
    ACTIONRESULTSOURCETYPEBUFFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::AIFIGGICMNC::file_descriptor().clone());
            deps.push(super::BHFKPPKCIIK::file_descriptor().clone());
            deps.push(super::CFKJCLMLPNH::file_descriptor().clone());
            deps.push(super::CLGPAKIJFGP::file_descriptor().clone());
            deps.push(super::DDJPKKEPNJP::file_descriptor().clone());
            deps.push(super::HDFLAEHAEGO::file_descriptor().clone());
            deps.push(super::HMECPBPGDJF::file_descriptor().clone());
            deps.push(super::IAMPEBBEGFH::file_descriptor().clone());
            deps.push(super::JBGGHPCNBME::file_descriptor().clone());
            deps.push(super::OBDIGNPJAAJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OONEOFNPFCC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
