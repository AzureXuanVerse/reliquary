// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueScoreRewardInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueScoreRewardInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueScoreRewardInfo {
    // message fields
    // @@protoc_insertion_point(field:RogueScoreRewardInfo.has_taken_initial_score)
    pub has_taken_initial_score: bool,
    // @@protoc_insertion_point(field:RogueScoreRewardInfo.pool_refreshed)
    pub pool_refreshed: bool,
    // @@protoc_insertion_point(field:RogueScoreRewardInfo.reward_end_time)
    pub reward_end_time: i64,
    // @@protoc_insertion_point(field:RogueScoreRewardInfo.pool_id)
    pub pool_id: u32,
    // @@protoc_insertion_point(field:RogueScoreRewardInfo.explore_score)
    pub explore_score: u32,
    // @@protoc_insertion_point(field:RogueScoreRewardInfo.reward_begin_time)
    pub reward_begin_time: i64,
    // @@protoc_insertion_point(field:RogueScoreRewardInfo.taken_normal_free_row_list)
    pub taken_normal_free_row_list: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueScoreRewardInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueScoreRewardInfo {
    fn default() -> &'a RogueScoreRewardInfo {
        <RogueScoreRewardInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueScoreRewardInfo {
    pub fn new() -> RogueScoreRewardInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_taken_initial_score",
            |m: &RogueScoreRewardInfo| { &m.has_taken_initial_score },
            |m: &mut RogueScoreRewardInfo| { &mut m.has_taken_initial_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pool_refreshed",
            |m: &RogueScoreRewardInfo| { &m.pool_refreshed },
            |m: &mut RogueScoreRewardInfo| { &mut m.pool_refreshed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reward_end_time",
            |m: &RogueScoreRewardInfo| { &m.reward_end_time },
            |m: &mut RogueScoreRewardInfo| { &mut m.reward_end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pool_id",
            |m: &RogueScoreRewardInfo| { &m.pool_id },
            |m: &mut RogueScoreRewardInfo| { &mut m.pool_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "explore_score",
            |m: &RogueScoreRewardInfo| { &m.explore_score },
            |m: &mut RogueScoreRewardInfo| { &mut m.explore_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reward_begin_time",
            |m: &RogueScoreRewardInfo| { &m.reward_begin_time },
            |m: &mut RogueScoreRewardInfo| { &mut m.reward_begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "taken_normal_free_row_list",
            |m: &RogueScoreRewardInfo| { &m.taken_normal_free_row_list },
            |m: &mut RogueScoreRewardInfo| { &mut m.taken_normal_free_row_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueScoreRewardInfo>(
            "RogueScoreRewardInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueScoreRewardInfo {
    const NAME: &'static str = "RogueScoreRewardInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.has_taken_initial_score = is.read_bool()?;
                },
                32 => {
                    self.pool_refreshed = is.read_bool()?;
                },
                40 => {
                    self.reward_end_time = is.read_int64()?;
                },
                24 => {
                    self.pool_id = is.read_uint32()?;
                },
                56 => {
                    self.explore_score = is.read_uint32()?;
                },
                8 => {
                    self.reward_begin_time = is.read_int64()?;
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.taken_normal_free_row_list)?;
                },
                48 => {
                    self.taken_normal_free_row_list.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.has_taken_initial_score != false {
            my_size += 1 + 1;
        }
        if self.pool_refreshed != false {
            my_size += 1 + 1;
        }
        if self.reward_end_time != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.reward_end_time);
        }
        if self.pool_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.pool_id);
        }
        if self.explore_score != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.explore_score);
        }
        if self.reward_begin_time != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.reward_begin_time);
        }
        for value in &self.taken_normal_free_row_list {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.has_taken_initial_score != false {
            os.write_bool(12, self.has_taken_initial_score)?;
        }
        if self.pool_refreshed != false {
            os.write_bool(4, self.pool_refreshed)?;
        }
        if self.reward_end_time != 0 {
            os.write_int64(5, self.reward_end_time)?;
        }
        if self.pool_id != 0 {
            os.write_uint32(3, self.pool_id)?;
        }
        if self.explore_score != 0 {
            os.write_uint32(7, self.explore_score)?;
        }
        if self.reward_begin_time != 0 {
            os.write_int64(1, self.reward_begin_time)?;
        }
        for v in &self.taken_normal_free_row_list {
            os.write_uint32(6, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueScoreRewardInfo {
        RogueScoreRewardInfo::new()
    }

    fn clear(&mut self) {
        self.has_taken_initial_score = false;
        self.pool_refreshed = false;
        self.reward_end_time = 0;
        self.pool_id = 0;
        self.explore_score = 0;
        self.reward_begin_time = 0;
        self.taken_normal_free_row_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueScoreRewardInfo {
        static instance: RogueScoreRewardInfo = RogueScoreRewardInfo {
            has_taken_initial_score: false,
            pool_refreshed: false,
            reward_end_time: 0,
            pool_id: 0,
            explore_score: 0,
            reward_begin_time: 0,
            taken_normal_free_row_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueScoreRewardInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueScoreRewardInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueScoreRewardInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueScoreRewardInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aRogueScoreRewardInfo.proto\"\xc2\x02\n\x14RogueScoreRewardInfo\x12\
    5\n\x17has_taken_initial_score\x18\x0c\x20\x01(\x08R\x14hasTakenInitialS\
    core\x12%\n\x0epool_refreshed\x18\x04\x20\x01(\x08R\rpoolRefreshed\x12&\
    \n\x0freward_end_time\x18\x05\x20\x01(\x03R\rrewardEndTime\x12\x17\n\x07\
    pool_id\x18\x03\x20\x01(\rR\x06poolId\x12#\n\rexplore_score\x18\x07\x20\
    \x01(\rR\x0cexploreScore\x12*\n\x11reward_begin_time\x18\x01\x20\x01(\
    \x03R\x0frewardBeginTime\x12:\n\x1ataken_normal_free_row_list\x18\x06\
    \x20\x03(\rR\x16takenNormalFreeRowListB\x15\n\x13emu.lunarcore.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueScoreRewardInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
