// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChallengeSettleNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChallengeSettleNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChallengeSettleNotify {
    // message fields
    // @@protoc_insertion_point(field:ChallengeSettleNotify.NFDJGAJBMDO)
    pub NFDJGAJBMDO: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.PCNOPHBPGJK)
    pub PCNOPHBPGJK: ::protobuf::MessageField<super::EALBGFMGCEG::EALBGFMGCEG>,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.ALDFGHHPBDG)
    pub ALDFGHHPBDG: ::protobuf::MessageField<super::MEBPBLCBLJN::MEBPBLCBLJN>,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.LJILKDFEMCF)
    pub LJILKDFEMCF: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.DOIMONBNDII)
    pub DOIMONBNDII: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.NPJGDNMIBLP)
    pub NPJGDNMIBLP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.AECJKNIGHJK)
    pub AECJKNIGHJK: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.PGGMKGMBBKJ)
    pub PGGMKGMBBKJ: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.CNIFEFHOIJN)
    pub CNIFEFHOIJN: u32,
    // @@protoc_insertion_point(field:ChallengeSettleNotify.DEDECCDEEGD)
    pub DEDECCDEEGD: bool,
    // special fields
    // @@protoc_insertion_point(special_field:ChallengeSettleNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChallengeSettleNotify {
    fn default() -> &'a ChallengeSettleNotify {
        <ChallengeSettleNotify as ::protobuf::Message>::default_instance()
    }
}

impl ChallengeSettleNotify {
    pub fn new() -> ChallengeSettleNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NFDJGAJBMDO",
            |m: &ChallengeSettleNotify| { &m.NFDJGAJBMDO },
            |m: &mut ChallengeSettleNotify| { &mut m.NFDJGAJBMDO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EALBGFMGCEG::EALBGFMGCEG>(
            "PCNOPHBPGJK",
            |m: &ChallengeSettleNotify| { &m.PCNOPHBPGJK },
            |m: &mut ChallengeSettleNotify| { &mut m.PCNOPHBPGJK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MEBPBLCBLJN::MEBPBLCBLJN>(
            "ALDFGHHPBDG",
            |m: &ChallengeSettleNotify| { &m.ALDFGHHPBDG },
            |m: &mut ChallengeSettleNotify| { &mut m.ALDFGHHPBDG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LJILKDFEMCF",
            |m: &ChallengeSettleNotify| { &m.LJILKDFEMCF },
            |m: &mut ChallengeSettleNotify| { &mut m.LJILKDFEMCF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DOIMONBNDII",
            |m: &ChallengeSettleNotify| { &m.DOIMONBNDII },
            |m: &mut ChallengeSettleNotify| { &mut m.DOIMONBNDII },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NPJGDNMIBLP",
            |m: &ChallengeSettleNotify| { &m.NPJGDNMIBLP },
            |m: &mut ChallengeSettleNotify| { &mut m.NPJGDNMIBLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "AECJKNIGHJK",
            |m: &ChallengeSettleNotify| { &m.AECJKNIGHJK },
            |m: &mut ChallengeSettleNotify| { &mut m.AECJKNIGHJK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PGGMKGMBBKJ",
            |m: &ChallengeSettleNotify| { &m.PGGMKGMBBKJ },
            |m: &mut ChallengeSettleNotify| { &mut m.PGGMKGMBBKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CNIFEFHOIJN",
            |m: &ChallengeSettleNotify| { &m.CNIFEFHOIJN },
            |m: &mut ChallengeSettleNotify| { &mut m.CNIFEFHOIJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DEDECCDEEGD",
            |m: &ChallengeSettleNotify| { &m.DEDECCDEEGD },
            |m: &mut ChallengeSettleNotify| { &mut m.DEDECCDEEGD },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChallengeSettleNotify>(
            "ChallengeSettleNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChallengeSettleNotify {
    const NAME: &'static str = "ChallengeSettleNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.NFDJGAJBMDO = is.read_uint32()?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PCNOPHBPGJK)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ALDFGHHPBDG)?;
                },
                120 => {
                    self.LJILKDFEMCF = is.read_uint32()?;
                },
                8 => {
                    self.DOIMONBNDII = is.read_uint32()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.NPJGDNMIBLP)?;
                },
                64 => {
                    self.NPJGDNMIBLP.push(is.read_uint32()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AECJKNIGHJK)?;
                },
                56 => {
                    self.PGGMKGMBBKJ = is.read_uint32()?;
                },
                72 => {
                    self.CNIFEFHOIJN = is.read_uint32()?;
                },
                16 => {
                    self.DEDECCDEEGD = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.NFDJGAJBMDO != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.NFDJGAJBMDO);
        }
        if let Some(v) = self.PCNOPHBPGJK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ALDFGHHPBDG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.LJILKDFEMCF != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.LJILKDFEMCF);
        }
        if self.DOIMONBNDII != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.DOIMONBNDII);
        }
        for value in &self.NPJGDNMIBLP {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if let Some(v) = self.AECJKNIGHJK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.PGGMKGMBBKJ != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.PGGMKGMBBKJ);
        }
        if self.CNIFEFHOIJN != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.CNIFEFHOIJN);
        }
        if self.DEDECCDEEGD != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.NFDJGAJBMDO != 0 {
            os.write_uint32(4, self.NFDJGAJBMDO)?;
        }
        if let Some(v) = self.PCNOPHBPGJK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.ALDFGHHPBDG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if self.LJILKDFEMCF != 0 {
            os.write_uint32(15, self.LJILKDFEMCF)?;
        }
        if self.DOIMONBNDII != 0 {
            os.write_uint32(1, self.DOIMONBNDII)?;
        }
        for v in &self.NPJGDNMIBLP {
            os.write_uint32(8, *v)?;
        };
        if let Some(v) = self.AECJKNIGHJK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.PGGMKGMBBKJ != 0 {
            os.write_uint32(7, self.PGGMKGMBBKJ)?;
        }
        if self.CNIFEFHOIJN != 0 {
            os.write_uint32(9, self.CNIFEFHOIJN)?;
        }
        if self.DEDECCDEEGD != false {
            os.write_bool(2, self.DEDECCDEEGD)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChallengeSettleNotify {
        ChallengeSettleNotify::new()
    }

    fn clear(&mut self) {
        self.NFDJGAJBMDO = 0;
        self.PCNOPHBPGJK.clear();
        self.ALDFGHHPBDG.clear();
        self.LJILKDFEMCF = 0;
        self.DOIMONBNDII = 0;
        self.NPJGDNMIBLP.clear();
        self.AECJKNIGHJK.clear();
        self.PGGMKGMBBKJ = 0;
        self.CNIFEFHOIJN = 0;
        self.DEDECCDEEGD = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChallengeSettleNotify {
        static instance: ChallengeSettleNotify = ChallengeSettleNotify {
            NFDJGAJBMDO: 0,
            PCNOPHBPGJK: ::protobuf::MessageField::none(),
            ALDFGHHPBDG: ::protobuf::MessageField::none(),
            LJILKDFEMCF: 0,
            DOIMONBNDII: 0,
            NPJGDNMIBLP: ::std::vec::Vec::new(),
            AECJKNIGHJK: ::protobuf::MessageField::none(),
            PGGMKGMBBKJ: 0,
            CNIFEFHOIJN: 0,
            DEDECCDEEGD: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChallengeSettleNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChallengeSettleNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChallengeSettleNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChallengeSettleNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bChallengeSettleNotify.proto\x1a\x11EALBGFMGCEG.proto\x1a\x0eItemLi\
    st.proto\x1a\x11MEBPBLCBLJN.proto\"\x92\x03\n\x15ChallengeSettleNotify\
    \x12\x20\n\x0bNFDJGAJBMDO\x18\x04\x20\x01(\rR\x0bNFDJGAJBMDO\x12.\n\x0bP\
    CNOPHBPGJK\x18\x0e\x20\x01(\x0b2\x0c.EALBGFMGCEGR\x0bPCNOPHBPGJK\x12.\n\
    \x0bALDFGHHPBDG\x18\x0c\x20\x01(\x0b2\x0c.MEBPBLCBLJNR\x0bALDFGHHPBDG\
    \x12\x20\n\x0bLJILKDFEMCF\x18\x0f\x20\x01(\rR\x0bLJILKDFEMCF\x12\x20\n\
    \x0bDOIMONBNDII\x18\x01\x20\x01(\rR\x0bDOIMONBNDII\x12\x20\n\x0bNPJGDNMI\
    BLP\x18\x08\x20\x03(\rR\x0bNPJGDNMIBLP\x12+\n\x0bAECJKNIGHJK\x18\n\x20\
    \x01(\x0b2\t.ItemListR\x0bAECJKNIGHJK\x12\x20\n\x0bPGGMKGMBBKJ\x18\x07\
    \x20\x01(\rR\x0bPGGMKGMBBKJ\x12\x20\n\x0bCNIFEFHOIJN\x18\t\x20\x01(\rR\
    \x0bCNIFEFHOIJN\x12\x20\n\x0bDEDECCDEEGD\x18\x02\x20\x01(\x08R\x0bDEDECC\
    DEEGDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::EALBGFMGCEG::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            deps.push(super::MEBPBLCBLJN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChallengeSettleNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
