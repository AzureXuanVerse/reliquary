// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GENDFBIMJBG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GENDFBIMJBG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GENDFBIMJBG {
    // message fields
    // @@protoc_insertion_point(field:GENDFBIMJBG.MBIFADKJEMN)
    pub MBIFADKJEMN: u32,
    // @@protoc_insertion_point(field:GENDFBIMJBG.HDKPHJMECLP)
    pub HDKPHJMECLP: u32,
    // @@protoc_insertion_point(field:GENDFBIMJBG.EIDLLGNIOKP)
    pub EIDLLGNIOKP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.OBHPLCAMAHN)
    pub OBHPLCAMAHN: u32,
    // @@protoc_insertion_point(field:GENDFBIMJBG.DEAJNGOCJID)
    pub DEAJNGOCJID: f64,
    // @@protoc_insertion_point(field:GENDFBIMJBG.DBBKNBLOCAH)
    pub DBBKNBLOCAH: f64,
    // @@protoc_insertion_point(field:GENDFBIMJBG.ABMKEEHBPBD)
    pub ABMKEEHBPBD: ::std::vec::Vec<super::ANJDJIIMOFI::ANJDJIIMOFI>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.PAJOPFIENFP)
    pub PAJOPFIENFP: ::std::vec::Vec<super::AKCIBFPMCIN::AKCIBFPMCIN>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.CPNJLOICJLJ)
    pub CPNJLOICJLJ: u32,
    // @@protoc_insertion_point(field:GENDFBIMJBG.IMLJGIONNJM)
    pub IMLJGIONNJM: u32,
    // @@protoc_insertion_point(field:GENDFBIMJBG.AEIOPBNLFPB)
    pub AEIOPBNLFPB: u32,
    // @@protoc_insertion_point(field:GENDFBIMJBG.KAGHKEBIPJC)
    pub KAGHKEBIPJC: u32,
    // @@protoc_insertion_point(field:GENDFBIMJBG.OMAMEOHNAFE)
    pub OMAMEOHNAFE: ::std::collections::HashMap<::std::string::String, f32>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.BATTLE_TARGET_TYPE_CHALLENGE_SCORE)
    pub BATTLE_TARGET_TYPE_CHALLENGE_SCORE: u32,
    // @@protoc_insertion_point(field:GENDFBIMJBG.PDCIAMOLIGP)
    pub PDCIAMOLIGP: ::std::vec::Vec<super::DEIBGGKJEME::DEIBGGKJEME>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.AEHBAGNLMHE)
    pub AEHBAGNLMHE: ::protobuf::EnumOrUnknown<super::DFBFKEEMMKG::DFBFKEEMMKG>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.BMIIGBIFHHL)
    pub BMIIGBIFHHL: ::std::vec::Vec<super::GOFLJKMHPMP::GOFLJKMHPMP>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.PMJLBECBODD)
    pub PMJLBECBODD: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.BBPCNIOBIBG)
    pub BBPCNIOBIBG: ::std::vec::Vec<super::EHOJLJMGOGL::EHOJLJMGOGL>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.CCMJKDINJDD)
    pub CCMJKDINJDD: ::std::vec::Vec<super::NGHOLIKIEPB::NGHOLIKIEPB>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.DKIBBPJFDOI)
    pub DKIBBPJFDOI: ::std::vec::Vec<super::HLOJFCDPGBE::HLOJFCDPGBE>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.PMNCCJDMNGH)
    pub PMNCCJDMNGH: ::std::collections::HashMap<u32, super::DEAJKAPPILD::DEAJKAPPILD>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.KIAHIAHPPLE)
    pub KIAHIAHPPLE: ::std::vec::Vec<super::EOLOFLGJCIP::EOLOFLGJCIP>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.OAHDOLHBPFK)
    pub OAHDOLHBPFK: ::protobuf::MessageField<super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.DFNGHNEHIIG)
    pub DFNGHNEHIIG: ::protobuf::MessageField<super::HJJDFBODGFD::HJJDFBODGFD>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.PIINHCIMOGD)
    pub PIINHCIMOGD: bool,
    // @@protoc_insertion_point(field:GENDFBIMJBG.LAOJOPBEIBC)
    pub LAOJOPBEIBC: ::std::vec::Vec<super::MKGIECKGJEP::MKGIECKGJEP>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.LLOEBKKLNOB)
    pub LLOEBKKLNOB: ::std::vec::Vec<super::DPHPAMKKMHP::DPHPAMKKMHP>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.CLNABFDPIKJ)
    pub CLNABFDPIKJ: u32,
    // @@protoc_insertion_point(field:GENDFBIMJBG.NFJKLODFIIL)
    pub NFJKLODFIIL: ::protobuf::MessageField<super::KFECMKLOBMF::KFECMKLOBMF>,
    // @@protoc_insertion_point(field:GENDFBIMJBG.GCCJOBNNFCA)
    pub GCCJOBNNFCA: ::protobuf::MessageField<super::KDDJNOPHPJF::KDDJNOPHPJF>,
    // special fields
    // @@protoc_insertion_point(special_field:GENDFBIMJBG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GENDFBIMJBG {
    fn default() -> &'a GENDFBIMJBG {
        <GENDFBIMJBG as ::protobuf::Message>::default_instance()
    }
}

impl GENDFBIMJBG {
    pub fn new() -> GENDFBIMJBG {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(31);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MBIFADKJEMN",
            |m: &GENDFBIMJBG| { &m.MBIFADKJEMN },
            |m: &mut GENDFBIMJBG| { &mut m.MBIFADKJEMN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HDKPHJMECLP",
            |m: &GENDFBIMJBG| { &m.HDKPHJMECLP },
            |m: &mut GENDFBIMJBG| { &mut m.HDKPHJMECLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EIDLLGNIOKP",
            |m: &GENDFBIMJBG| { &m.EIDLLGNIOKP },
            |m: &mut GENDFBIMJBG| { &mut m.EIDLLGNIOKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBHPLCAMAHN",
            |m: &GENDFBIMJBG| { &m.OBHPLCAMAHN },
            |m: &mut GENDFBIMJBG| { &mut m.OBHPLCAMAHN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DEAJNGOCJID",
            |m: &GENDFBIMJBG| { &m.DEAJNGOCJID },
            |m: &mut GENDFBIMJBG| { &mut m.DEAJNGOCJID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBBKNBLOCAH",
            |m: &GENDFBIMJBG| { &m.DBBKNBLOCAH },
            |m: &mut GENDFBIMJBG| { &mut m.DBBKNBLOCAH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ABMKEEHBPBD",
            |m: &GENDFBIMJBG| { &m.ABMKEEHBPBD },
            |m: &mut GENDFBIMJBG| { &mut m.ABMKEEHBPBD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PAJOPFIENFP",
            |m: &GENDFBIMJBG| { &m.PAJOPFIENFP },
            |m: &mut GENDFBIMJBG| { &mut m.PAJOPFIENFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPNJLOICJLJ",
            |m: &GENDFBIMJBG| { &m.CPNJLOICJLJ },
            |m: &mut GENDFBIMJBG| { &mut m.CPNJLOICJLJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IMLJGIONNJM",
            |m: &GENDFBIMJBG| { &m.IMLJGIONNJM },
            |m: &mut GENDFBIMJBG| { &mut m.IMLJGIONNJM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AEIOPBNLFPB",
            |m: &GENDFBIMJBG| { &m.AEIOPBNLFPB },
            |m: &mut GENDFBIMJBG| { &mut m.AEIOPBNLFPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KAGHKEBIPJC",
            |m: &GENDFBIMJBG| { &m.KAGHKEBIPJC },
            |m: &mut GENDFBIMJBG| { &mut m.KAGHKEBIPJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "OMAMEOHNAFE",
            |m: &GENDFBIMJBG| { &m.OMAMEOHNAFE },
            |m: &mut GENDFBIMJBG| { &mut m.OMAMEOHNAFE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BATTLE_TARGET_TYPE_CHALLENGE_SCORE",
            |m: &GENDFBIMJBG| { &m.BATTLE_TARGET_TYPE_CHALLENGE_SCORE },
            |m: &mut GENDFBIMJBG| { &mut m.BATTLE_TARGET_TYPE_CHALLENGE_SCORE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PDCIAMOLIGP",
            |m: &GENDFBIMJBG| { &m.PDCIAMOLIGP },
            |m: &mut GENDFBIMJBG| { &mut m.PDCIAMOLIGP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AEHBAGNLMHE",
            |m: &GENDFBIMJBG| { &m.AEHBAGNLMHE },
            |m: &mut GENDFBIMJBG| { &mut m.AEHBAGNLMHE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BMIIGBIFHHL",
            |m: &GENDFBIMJBG| { &m.BMIIGBIFHHL },
            |m: &mut GENDFBIMJBG| { &mut m.BMIIGBIFHHL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PMJLBECBODD",
            |m: &GENDFBIMJBG| { &m.PMJLBECBODD },
            |m: &mut GENDFBIMJBG| { &mut m.PMJLBECBODD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BBPCNIOBIBG",
            |m: &GENDFBIMJBG| { &m.BBPCNIOBIBG },
            |m: &mut GENDFBIMJBG| { &mut m.BBPCNIOBIBG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CCMJKDINJDD",
            |m: &GENDFBIMJBG| { &m.CCMJKDINJDD },
            |m: &mut GENDFBIMJBG| { &mut m.CCMJKDINJDD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DKIBBPJFDOI",
            |m: &GENDFBIMJBG| { &m.DKIBBPJFDOI },
            |m: &mut GENDFBIMJBG| { &mut m.DKIBBPJFDOI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "PMNCCJDMNGH",
            |m: &GENDFBIMJBG| { &m.PMNCCJDMNGH },
            |m: &mut GENDFBIMJBG| { &mut m.PMNCCJDMNGH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KIAHIAHPPLE",
            |m: &GENDFBIMJBG| { &m.KIAHIAHPPLE },
            |m: &mut GENDFBIMJBG| { &mut m.KIAHIAHPPLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>(
            "OAHDOLHBPFK",
            |m: &GENDFBIMJBG| { &m.OAHDOLHBPFK },
            |m: &mut GENDFBIMJBG| { &mut m.OAHDOLHBPFK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HJJDFBODGFD::HJJDFBODGFD>(
            "DFNGHNEHIIG",
            |m: &GENDFBIMJBG| { &m.DFNGHNEHIIG },
            |m: &mut GENDFBIMJBG| { &mut m.DFNGHNEHIIG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PIINHCIMOGD",
            |m: &GENDFBIMJBG| { &m.PIINHCIMOGD },
            |m: &mut GENDFBIMJBG| { &mut m.PIINHCIMOGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LAOJOPBEIBC",
            |m: &GENDFBIMJBG| { &m.LAOJOPBEIBC },
            |m: &mut GENDFBIMJBG| { &mut m.LAOJOPBEIBC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LLOEBKKLNOB",
            |m: &GENDFBIMJBG| { &m.LLOEBKKLNOB },
            |m: &mut GENDFBIMJBG| { &mut m.LLOEBKKLNOB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CLNABFDPIKJ",
            |m: &GENDFBIMJBG| { &m.CLNABFDPIKJ },
            |m: &mut GENDFBIMJBG| { &mut m.CLNABFDPIKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KFECMKLOBMF::KFECMKLOBMF>(
            "NFJKLODFIIL",
            |m: &GENDFBIMJBG| { &m.NFJKLODFIIL },
            |m: &mut GENDFBIMJBG| { &mut m.NFJKLODFIIL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KDDJNOPHPJF::KDDJNOPHPJF>(
            "GCCJOBNNFCA",
            |m: &GENDFBIMJBG| { &m.GCCJOBNNFCA },
            |m: &mut GENDFBIMJBG| { &mut m.GCCJOBNNFCA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GENDFBIMJBG>(
            "GENDFBIMJBG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GENDFBIMJBG {
    const NAME: &'static str = "GENDFBIMJBG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.MBIFADKJEMN = is.read_uint32()?;
                },
                16 => {
                    self.HDKPHJMECLP = is.read_uint32()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.EIDLLGNIOKP)?;
                },
                24 => {
                    self.EIDLLGNIOKP.push(is.read_uint32()?);
                },
                32 => {
                    self.OBHPLCAMAHN = is.read_uint32()?;
                },
                41 => {
                    self.DEAJNGOCJID = is.read_double()?;
                },
                49 => {
                    self.DBBKNBLOCAH = is.read_double()?;
                },
                58 => {
                    self.ABMKEEHBPBD.push(is.read_message()?);
                },
                66 => {
                    self.PAJOPFIENFP.push(is.read_message()?);
                },
                72 => {
                    self.CPNJLOICJLJ = is.read_uint32()?;
                },
                80 => {
                    self.IMLJGIONNJM = is.read_uint32()?;
                },
                88 => {
                    self.AEIOPBNLFPB = is.read_uint32()?;
                },
                96 => {
                    self.KAGHKEBIPJC = is.read_uint32()?;
                },
                106 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            21 => value = is.read_float()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.OMAMEOHNAFE.insert(key, value);
                },
                112 => {
                    self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE = is.read_uint32()?;
                },
                130 => {
                    self.PDCIAMOLIGP.push(is.read_message()?);
                },
                152 => {
                    self.AEHBAGNLMHE = is.read_enum_or_unknown()?;
                },
                170 => {
                    self.BMIIGBIFHHL.push(is.read_message()?);
                },
                178 => {
                    is.read_repeated_packed_int32_into(&mut self.PMJLBECBODD)?;
                },
                176 => {
                    self.PMJLBECBODD.push(is.read_int32()?);
                },
                186 => {
                    self.BBPCNIOBIBG.push(is.read_message()?);
                },
                210 => {
                    self.CCMJKDINJDD.push(is.read_message()?);
                },
                218 => {
                    self.DKIBBPJFDOI.push(is.read_message()?);
                },
                226 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.PMNCCJDMNGH.insert(key, value);
                },
                234 => {
                    self.KIAHIAHPPLE.push(is.read_message()?);
                },
                242 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OAHDOLHBPFK)?;
                },
                250 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DFNGHNEHIIG)?;
                },
                256 => {
                    self.PIINHCIMOGD = is.read_bool()?;
                },
                266 => {
                    self.LAOJOPBEIBC.push(is.read_message()?);
                },
                274 => {
                    self.LLOEBKKLNOB.push(is.read_message()?);
                },
                280 => {
                    self.CLNABFDPIKJ = is.read_uint32()?;
                },
                290 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NFJKLODFIIL)?;
                },
                298 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GCCJOBNNFCA)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.MBIFADKJEMN != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.MBIFADKJEMN);
        }
        if self.HDKPHJMECLP != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.HDKPHJMECLP);
        }
        for value in &self.EIDLLGNIOKP {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        if self.OBHPLCAMAHN != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.OBHPLCAMAHN);
        }
        if self.DEAJNGOCJID != 0. {
            my_size += 1 + 8;
        }
        if self.DBBKNBLOCAH != 0. {
            my_size += 1 + 8;
        }
        for value in &self.ABMKEEHBPBD {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.PAJOPFIENFP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CPNJLOICJLJ != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.CPNJLOICJLJ);
        }
        if self.IMLJGIONNJM != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.IMLJGIONNJM);
        }
        if self.AEIOPBNLFPB != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.AEIOPBNLFPB);
        }
        if self.KAGHKEBIPJC != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.KAGHKEBIPJC);
        }
        for (k, v) in &self.OMAMEOHNAFE {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 4;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE);
        }
        for value in &self.PDCIAMOLIGP {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.AEHBAGNLMHE != ::protobuf::EnumOrUnknown::new(super::DFBFKEEMMKG::DFBFKEEMMKG::BATTLE_END_REASON_NONE) {
            my_size += ::protobuf::rt::int32_size(19, self.AEHBAGNLMHE.value());
        }
        for value in &self.BMIIGBIFHHL {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.PMJLBECBODD {
            my_size += ::protobuf::rt::int32_size(22, *value);
        };
        for value in &self.BBPCNIOBIBG {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.CCMJKDINJDD {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.DKIBBPJFDOI {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.PMNCCJDMNGH {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.KIAHIAHPPLE {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.OAHDOLHBPFK.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DFNGHNEHIIG.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.PIINHCIMOGD != false {
            my_size += 2 + 1;
        }
        for value in &self.LAOJOPBEIBC {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.LLOEBKKLNOB {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CLNABFDPIKJ != 0 {
            my_size += ::protobuf::rt::uint32_size(35, self.CLNABFDPIKJ);
        }
        if let Some(v) = self.NFJKLODFIIL.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.GCCJOBNNFCA.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.MBIFADKJEMN != 0 {
            os.write_uint32(1, self.MBIFADKJEMN)?;
        }
        if self.HDKPHJMECLP != 0 {
            os.write_uint32(2, self.HDKPHJMECLP)?;
        }
        for v in &self.EIDLLGNIOKP {
            os.write_uint32(3, *v)?;
        };
        if self.OBHPLCAMAHN != 0 {
            os.write_uint32(4, self.OBHPLCAMAHN)?;
        }
        if self.DEAJNGOCJID != 0. {
            os.write_double(5, self.DEAJNGOCJID)?;
        }
        if self.DBBKNBLOCAH != 0. {
            os.write_double(6, self.DBBKNBLOCAH)?;
        }
        for v in &self.ABMKEEHBPBD {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.PAJOPFIENFP {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.CPNJLOICJLJ != 0 {
            os.write_uint32(9, self.CPNJLOICJLJ)?;
        }
        if self.IMLJGIONNJM != 0 {
            os.write_uint32(10, self.IMLJGIONNJM)?;
        }
        if self.AEIOPBNLFPB != 0 {
            os.write_uint32(11, self.AEIOPBNLFPB)?;
        }
        if self.KAGHKEBIPJC != 0 {
            os.write_uint32(12, self.KAGHKEBIPJC)?;
        }
        for (k, v) in &self.OMAMEOHNAFE {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 4;
            os.write_raw_varint32(106)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_float(2, *v)?;
        };
        if self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE != 0 {
            os.write_uint32(14, self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE)?;
        }
        for v in &self.PDCIAMOLIGP {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        };
        if self.AEHBAGNLMHE != ::protobuf::EnumOrUnknown::new(super::DFBFKEEMMKG::DFBFKEEMMKG::BATTLE_END_REASON_NONE) {
            os.write_enum(19, ::protobuf::EnumOrUnknown::value(&self.AEHBAGNLMHE))?;
        }
        for v in &self.BMIIGBIFHHL {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        for v in &self.PMJLBECBODD {
            os.write_int32(22, *v)?;
        };
        for v in &self.BBPCNIOBIBG {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        };
        for v in &self.CCMJKDINJDD {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        };
        for v in &self.DKIBBPJFDOI {
            ::protobuf::rt::write_message_field_with_cached_size(27, v, os)?;
        };
        for (k, v) in &self.PMNCCJDMNGH {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(226)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.KIAHIAHPPLE {
            ::protobuf::rt::write_message_field_with_cached_size(29, v, os)?;
        };
        if let Some(v) = self.OAHDOLHBPFK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(30, v, os)?;
        }
        if let Some(v) = self.DFNGHNEHIIG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(31, v, os)?;
        }
        if self.PIINHCIMOGD != false {
            os.write_bool(32, self.PIINHCIMOGD)?;
        }
        for v in &self.LAOJOPBEIBC {
            ::protobuf::rt::write_message_field_with_cached_size(33, v, os)?;
        };
        for v in &self.LLOEBKKLNOB {
            ::protobuf::rt::write_message_field_with_cached_size(34, v, os)?;
        };
        if self.CLNABFDPIKJ != 0 {
            os.write_uint32(35, self.CLNABFDPIKJ)?;
        }
        if let Some(v) = self.NFJKLODFIIL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(36, v, os)?;
        }
        if let Some(v) = self.GCCJOBNNFCA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(37, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GENDFBIMJBG {
        GENDFBIMJBG::new()
    }

    fn clear(&mut self) {
        self.MBIFADKJEMN = 0;
        self.HDKPHJMECLP = 0;
        self.EIDLLGNIOKP.clear();
        self.OBHPLCAMAHN = 0;
        self.DEAJNGOCJID = 0.;
        self.DBBKNBLOCAH = 0.;
        self.ABMKEEHBPBD.clear();
        self.PAJOPFIENFP.clear();
        self.CPNJLOICJLJ = 0;
        self.IMLJGIONNJM = 0;
        self.AEIOPBNLFPB = 0;
        self.KAGHKEBIPJC = 0;
        self.OMAMEOHNAFE.clear();
        self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE = 0;
        self.PDCIAMOLIGP.clear();
        self.AEHBAGNLMHE = ::protobuf::EnumOrUnknown::new(super::DFBFKEEMMKG::DFBFKEEMMKG::BATTLE_END_REASON_NONE);
        self.BMIIGBIFHHL.clear();
        self.PMJLBECBODD.clear();
        self.BBPCNIOBIBG.clear();
        self.CCMJKDINJDD.clear();
        self.DKIBBPJFDOI.clear();
        self.PMNCCJDMNGH.clear();
        self.KIAHIAHPPLE.clear();
        self.OAHDOLHBPFK.clear();
        self.DFNGHNEHIIG.clear();
        self.PIINHCIMOGD = false;
        self.LAOJOPBEIBC.clear();
        self.LLOEBKKLNOB.clear();
        self.CLNABFDPIKJ = 0;
        self.NFJKLODFIIL.clear();
        self.GCCJOBNNFCA.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GENDFBIMJBG {
        static instance: ::protobuf::rt::Lazy<GENDFBIMJBG> = ::protobuf::rt::Lazy::new();
        instance.get(GENDFBIMJBG::new)
    }
}

impl ::protobuf::MessageFull for GENDFBIMJBG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GENDFBIMJBG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GENDFBIMJBG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GENDFBIMJBG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GENDFBIMJBG.proto\x1a\x11AKCIBFPMCIN.proto\x1a\x11ANJDJIIMOFI.prot\
    o\x1a\x11DEAJKAPPILD.proto\x1a\x11DEIBGGKJEME.proto\x1a\x11DFBFKEEMMKG.p\
    roto\x1a\x11DPHPAMKKMHP.proto\x1a\x11EHOJLJMGOGL.proto\x1a\x11EOLOFLGJCI\
    P.proto\x1a\x1bEvolveBuildBattleInfo.proto\x1a\x11GOFLJKMHPMP.proto\x1a\
    \x11HJJDFBODGFD.proto\x1a\x11HLOJFCDPGBE.proto\x1a\x11KDDJNOPHPJF.proto\
    \x1a\x11KFECMKLOBMF.proto\x1a\x11MKGIECKGJEP.proto\x1a\x11NGHOLIKIEPB.pr\
    oto\"\xfd\x0b\n\x0bGENDFBIMJBG\x12\x20\n\x0bMBIFADKJEMN\x18\x01\x20\x01(\
    \rR\x0bMBIFADKJEMN\x12\x20\n\x0bHDKPHJMECLP\x18\x02\x20\x01(\rR\x0bHDKPH\
    JMECLP\x12\x20\n\x0bEIDLLGNIOKP\x18\x03\x20\x03(\rR\x0bEIDLLGNIOKP\x12\
    \x20\n\x0bOBHPLCAMAHN\x18\x04\x20\x01(\rR\x0bOBHPLCAMAHN\x12\x20\n\x0bDE\
    AJNGOCJID\x18\x05\x20\x01(\x01R\x0bDEAJNGOCJID\x12\x20\n\x0bDBBKNBLOCAH\
    \x18\x06\x20\x01(\x01R\x0bDBBKNBLOCAH\x12.\n\x0bABMKEEHBPBD\x18\x07\x20\
    \x03(\x0b2\x0c.ANJDJIIMOFIR\x0bABMKEEHBPBD\x12.\n\x0bPAJOPFIENFP\x18\x08\
    \x20\x03(\x0b2\x0c.AKCIBFPMCINR\x0bPAJOPFIENFP\x12\x20\n\x0bCPNJLOICJLJ\
    \x18\t\x20\x01(\rR\x0bCPNJLOICJLJ\x12\x20\n\x0bIMLJGIONNJM\x18\n\x20\x01\
    (\rR\x0bIMLJGIONNJM\x12\x20\n\x0bAEIOPBNLFPB\x18\x0b\x20\x01(\rR\x0bAEIO\
    PBNLFPB\x12\x20\n\x0bKAGHKEBIPJC\x18\x0c\x20\x01(\rR\x0bKAGHKEBIPJC\x12?\
    \n\x0bOMAMEOHNAFE\x18\r\x20\x03(\x0b2\x1d.GENDFBIMJBG.OMAMEOHNAFEEntryR\
    \x0bOMAMEOHNAFE\x12J\n\"BATTLE_TARGET_TYPE_CHALLENGE_SCORE\x18\x0e\x20\
    \x01(\rR\x1eBATTLETARGETTYPECHALLENGESCORE\x12.\n\x0bPDCIAMOLIGP\x18\x10\
    \x20\x03(\x0b2\x0c.DEIBGGKJEMER\x0bPDCIAMOLIGP\x12.\n\x0bAEHBAGNLMHE\x18\
    \x13\x20\x01(\x0e2\x0c.DFBFKEEMMKGR\x0bAEHBAGNLMHE\x12.\n\x0bBMIIGBIFHHL\
    \x18\x15\x20\x03(\x0b2\x0c.GOFLJKMHPMPR\x0bBMIIGBIFHHL\x12\x20\n\x0bPMJL\
    BECBODD\x18\x16\x20\x03(\x05R\x0bPMJLBECBODD\x12.\n\x0bBBPCNIOBIBG\x18\
    \x17\x20\x03(\x0b2\x0c.EHOJLJMGOGLR\x0bBBPCNIOBIBG\x12.\n\x0bCCMJKDINJDD\
    \x18\x1a\x20\x03(\x0b2\x0c.NGHOLIKIEPBR\x0bCCMJKDINJDD\x12.\n\x0bDKIBBPJ\
    FDOI\x18\x1b\x20\x03(\x0b2\x0c.HLOJFCDPGBER\x0bDKIBBPJFDOI\x12?\n\x0bPMN\
    CCJDMNGH\x18\x1c\x20\x03(\x0b2\x1d.GENDFBIMJBG.PMNCCJDMNGHEntryR\x0bPMNC\
    CJDMNGH\x12.\n\x0bKIAHIAHPPLE\x18\x1d\x20\x03(\x0b2\x0c.EOLOFLGJCIPR\x0b\
    KIAHIAHPPLE\x128\n\x0bOAHDOLHBPFK\x18\x1e\x20\x01(\x0b2\x16.EvolveBuildB\
    attleInfoR\x0bOAHDOLHBPFK\x12.\n\x0bDFNGHNEHIIG\x18\x1f\x20\x01(\x0b2\
    \x0c.HJJDFBODGFDR\x0bDFNGHNEHIIG\x12\x20\n\x0bPIINHCIMOGD\x18\x20\x20\
    \x01(\x08R\x0bPIINHCIMOGD\x12.\n\x0bLAOJOPBEIBC\x18!\x20\x03(\x0b2\x0c.M\
    KGIECKGJEPR\x0bLAOJOPBEIBC\x12.\n\x0bLLOEBKKLNOB\x18\"\x20\x03(\x0b2\x0c\
    .DPHPAMKKMHPR\x0bLLOEBKKLNOB\x12\x20\n\x0bCLNABFDPIKJ\x18#\x20\x01(\rR\
    \x0bCLNABFDPIKJ\x12.\n\x0bNFJKLODFIIL\x18$\x20\x01(\x0b2\x0c.KFECMKLOBMF\
    R\x0bNFJKLODFIIL\x12.\n\x0bGCCJOBNNFCA\x18%\x20\x01(\x0b2\x0c.KDDJNOPHPJ\
    FR\x0bGCCJOBNNFCA\x1a>\n\x10OMAMEOHNAFEEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x02R\x05value:\
    \x028\x01\x1aL\n\x10PMNCCJDMNGHEntry\x12\x10\n\x03key\x18\x01\x20\x01(\r\
    R\x03key\x12\"\n\x05value\x18\x02\x20\x01(\x0b2\x0c.DEAJKAPPILDR\x05valu\
    e:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(16);
            deps.push(super::AKCIBFPMCIN::file_descriptor().clone());
            deps.push(super::ANJDJIIMOFI::file_descriptor().clone());
            deps.push(super::DEAJKAPPILD::file_descriptor().clone());
            deps.push(super::DEIBGGKJEME::file_descriptor().clone());
            deps.push(super::DFBFKEEMMKG::file_descriptor().clone());
            deps.push(super::DPHPAMKKMHP::file_descriptor().clone());
            deps.push(super::EHOJLJMGOGL::file_descriptor().clone());
            deps.push(super::EOLOFLGJCIP::file_descriptor().clone());
            deps.push(super::EvolveBuildBattleInfo::file_descriptor().clone());
            deps.push(super::GOFLJKMHPMP::file_descriptor().clone());
            deps.push(super::HJJDFBODGFD::file_descriptor().clone());
            deps.push(super::HLOJFCDPGBE::file_descriptor().clone());
            deps.push(super::KDDJNOPHPJF::file_descriptor().clone());
            deps.push(super::KFECMKLOBMF::file_descriptor().clone());
            deps.push(super::MKGIECKGJEP::file_descriptor().clone());
            deps.push(super::NGHOLIKIEPB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GENDFBIMJBG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
