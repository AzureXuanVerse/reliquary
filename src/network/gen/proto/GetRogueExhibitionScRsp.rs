// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetRogueExhibitionScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ExhibitionInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExhibitionInfo {
    // message fields
    // @@protoc_insertion_point(field:ExhibitionInfo.status)
    pub status: ::protobuf::EnumOrUnknown<RogueExhibitionType>,
    // @@protoc_insertion_point(field:ExhibitionInfo.exhibition_id)
    pub exhibition_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ExhibitionInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExhibitionInfo {
    fn default() -> &'a ExhibitionInfo {
        <ExhibitionInfo as ::protobuf::Message>::default_instance()
    }
}

impl ExhibitionInfo {
    pub fn new() -> ExhibitionInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &ExhibitionInfo| { &m.status },
            |m: &mut ExhibitionInfo| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exhibition_id",
            |m: &ExhibitionInfo| { &m.exhibition_id },
            |m: &mut ExhibitionInfo| { &mut m.exhibition_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExhibitionInfo>(
            "ExhibitionInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExhibitionInfo {
    const NAME: &'static str = "ExhibitionInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.exhibition_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != ::protobuf::EnumOrUnknown::new(RogueExhibitionType::ROGUE_EXHIBITION_NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.status.value());
        }
        if self.exhibition_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.exhibition_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != ::protobuf::EnumOrUnknown::new(RogueExhibitionType::ROGUE_EXHIBITION_NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if self.exhibition_id != 0 {
            os.write_uint32(3, self.exhibition_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExhibitionInfo {
        ExhibitionInfo::new()
    }

    fn clear(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(RogueExhibitionType::ROGUE_EXHIBITION_NONE);
        self.exhibition_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExhibitionInfo {
        static instance: ExhibitionInfo = ExhibitionInfo {
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            exhibition_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExhibitionInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExhibitionInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExhibitionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExhibitionInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ExhibitionBoothInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExhibitionBoothInfo {
    // message fields
    // @@protoc_insertion_point(field:ExhibitionBoothInfo.exhibition_id)
    pub exhibition_id: u32,
    // @@protoc_insertion_point(field:ExhibitionBoothInfo.status)
    pub status: ::protobuf::EnumOrUnknown<super::GetRogueCollectionScRsp::RogueBoothType>,
    // @@protoc_insertion_point(field:ExhibitionBoothInfo.pillar_id)
    pub pillar_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ExhibitionBoothInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExhibitionBoothInfo {
    fn default() -> &'a ExhibitionBoothInfo {
        <ExhibitionBoothInfo as ::protobuf::Message>::default_instance()
    }
}

impl ExhibitionBoothInfo {
    pub fn new() -> ExhibitionBoothInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exhibition_id",
            |m: &ExhibitionBoothInfo| { &m.exhibition_id },
            |m: &mut ExhibitionBoothInfo| { &mut m.exhibition_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &ExhibitionBoothInfo| { &m.status },
            |m: &mut ExhibitionBoothInfo| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pillar_id",
            |m: &ExhibitionBoothInfo| { &m.pillar_id },
            |m: &mut ExhibitionBoothInfo| { &mut m.pillar_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExhibitionBoothInfo>(
            "ExhibitionBoothInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExhibitionBoothInfo {
    const NAME: &'static str = "ExhibitionBoothInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.exhibition_id = is.read_uint32()?;
                },
                24 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                40 => {
                    self.pillar_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.exhibition_id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.exhibition_id);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::GetRogueCollectionScRsp::RogueBoothType::ROGUE_BOOTH_NONE) {
            my_size += ::protobuf::rt::int32_size(3, self.status.value());
        }
        if self.pillar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.pillar_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.exhibition_id != 0 {
            os.write_uint32(4, self.exhibition_id)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::GetRogueCollectionScRsp::RogueBoothType::ROGUE_BOOTH_NONE) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if self.pillar_id != 0 {
            os.write_uint32(5, self.pillar_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExhibitionBoothInfo {
        ExhibitionBoothInfo::new()
    }

    fn clear(&mut self) {
        self.exhibition_id = 0;
        self.status = ::protobuf::EnumOrUnknown::new(super::GetRogueCollectionScRsp::RogueBoothType::ROGUE_BOOTH_NONE);
        self.pillar_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExhibitionBoothInfo {
        static instance: ExhibitionBoothInfo = ExhibitionBoothInfo {
            exhibition_id: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            pillar_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExhibitionBoothInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExhibitionBoothInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExhibitionBoothInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExhibitionBoothInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetRogueExhibitionScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetRogueExhibitionScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetRogueExhibitionScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetRogueExhibitionScRsp.exhibition_booth_info_list)
    pub exhibition_booth_info_list: ::std::vec::Vec<ExhibitionBoothInfo>,
    // @@protoc_insertion_point(field:GetRogueExhibitionScRsp.exhibition_info_list)
    pub exhibition_info_list: ::std::vec::Vec<ExhibitionInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:GetRogueExhibitionScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetRogueExhibitionScRsp {
    fn default() -> &'a GetRogueExhibitionScRsp {
        <GetRogueExhibitionScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetRogueExhibitionScRsp {
    pub fn new() -> GetRogueExhibitionScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetRogueExhibitionScRsp| { &m.retcode },
            |m: &mut GetRogueExhibitionScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "exhibition_booth_info_list",
            |m: &GetRogueExhibitionScRsp| { &m.exhibition_booth_info_list },
            |m: &mut GetRogueExhibitionScRsp| { &mut m.exhibition_booth_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "exhibition_info_list",
            |m: &GetRogueExhibitionScRsp| { &m.exhibition_info_list },
            |m: &mut GetRogueExhibitionScRsp| { &mut m.exhibition_info_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetRogueExhibitionScRsp>(
            "GetRogueExhibitionScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetRogueExhibitionScRsp {
    const NAME: &'static str = "GetRogueExhibitionScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.retcode = is.read_uint32()?;
                },
                82 => {
                    self.exhibition_booth_info_list.push(is.read_message()?);
                },
                90 => {
                    self.exhibition_info_list.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.retcode);
        }
        for value in &self.exhibition_booth_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.exhibition_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(9, self.retcode)?;
        }
        for v in &self.exhibition_booth_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        for v in &self.exhibition_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetRogueExhibitionScRsp {
        GetRogueExhibitionScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.exhibition_booth_info_list.clear();
        self.exhibition_info_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetRogueExhibitionScRsp {
        static instance: GetRogueExhibitionScRsp = GetRogueExhibitionScRsp {
            retcode: 0,
            exhibition_booth_info_list: ::std::vec::Vec::new(),
            exhibition_info_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetRogueExhibitionScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetRogueExhibitionScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetRogueExhibitionScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRogueExhibitionScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:RogueExhibitionType)
pub enum RogueExhibitionType {
    // @@protoc_insertion_point(enum_value:RogueExhibitionType.ROGUE_EXHIBITION_NONE)
    ROGUE_EXHIBITION_NONE = 0,
    // @@protoc_insertion_point(enum_value:RogueExhibitionType.ROGUE_EXHIBITION_UNLOCKED)
    ROGUE_EXHIBITION_UNLOCKED = 1,
    // @@protoc_insertion_point(enum_value:RogueExhibitionType.ROGUE_EXHIBITION_DISPLAY)
    ROGUE_EXHIBITION_DISPLAY = 2,
}

impl ::protobuf::Enum for RogueExhibitionType {
    const NAME: &'static str = "RogueExhibitionType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RogueExhibitionType> {
        match value {
            0 => ::std::option::Option::Some(RogueExhibitionType::ROGUE_EXHIBITION_NONE),
            1 => ::std::option::Option::Some(RogueExhibitionType::ROGUE_EXHIBITION_UNLOCKED),
            2 => ::std::option::Option::Some(RogueExhibitionType::ROGUE_EXHIBITION_DISPLAY),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<RogueExhibitionType> {
        match str {
            "ROGUE_EXHIBITION_NONE" => ::std::option::Option::Some(RogueExhibitionType::ROGUE_EXHIBITION_NONE),
            "ROGUE_EXHIBITION_UNLOCKED" => ::std::option::Option::Some(RogueExhibitionType::ROGUE_EXHIBITION_UNLOCKED),
            "ROGUE_EXHIBITION_DISPLAY" => ::std::option::Option::Some(RogueExhibitionType::ROGUE_EXHIBITION_DISPLAY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [RogueExhibitionType] = &[
        RogueExhibitionType::ROGUE_EXHIBITION_NONE,
        RogueExhibitionType::ROGUE_EXHIBITION_UNLOCKED,
        RogueExhibitionType::ROGUE_EXHIBITION_DISPLAY,
    ];
}

impl ::protobuf::EnumFull for RogueExhibitionType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("RogueExhibitionType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for RogueExhibitionType {
    fn default() -> Self {
        RogueExhibitionType::ROGUE_EXHIBITION_NONE
    }
}

impl RogueExhibitionType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<RogueExhibitionType>("RogueExhibitionType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dGetRogueExhibitionScRsp.proto\x1a\x1dGetRogueCollectionScRsp.proto\
    \"c\n\x0eExhibitionInfo\x12,\n\x06status\x18\x02\x20\x01(\x0e2\x14.Rogue\
    ExhibitionTypeR\x06status\x12#\n\rexhibition_id\x18\x03\x20\x01(\rR\x0ce\
    xhibitionId\"\x80\x01\n\x13ExhibitionBoothInfo\x12#\n\rexhibition_id\x18\
    \x04\x20\x01(\rR\x0cexhibitionId\x12'\n\x06status\x18\x03\x20\x01(\x0e2\
    \x0f.RogueBoothTypeR\x06status\x12\x1b\n\tpillar_id\x18\x05\x20\x01(\rR\
    \x08pillarId\"\xc9\x01\n\x17GetRogueExhibitionScRsp\x12\x18\n\x07retcode\
    \x18\t\x20\x01(\rR\x07retcode\x12Q\n\x1aexhibition_booth_info_list\x18\n\
    \x20\x03(\x0b2\x14.ExhibitionBoothInfoR\x17exhibitionBoothInfoList\x12A\
    \n\x14exhibition_info_list\x18\x0b\x20\x03(\x0b2\x0f.ExhibitionInfoR\x12\
    exhibitionInfoList*m\n\x13RogueExhibitionType\x12\x19\n\x15ROGUE_EXHIBIT\
    ION_NONE\x10\0\x12\x1d\n\x19ROGUE_EXHIBITION_UNLOCKED\x10\x01\x12\x1c\n\
    \x18ROGUE_EXHIBITION_DISPLAY\x10\x02B\x15\n\x13emu.lunarcore.protob\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::GetRogueCollectionScRsp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(ExhibitionInfo::generated_message_descriptor_data());
            messages.push(ExhibitionBoothInfo::generated_message_descriptor_data());
            messages.push(GetRogueExhibitionScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(RogueExhibitionType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
