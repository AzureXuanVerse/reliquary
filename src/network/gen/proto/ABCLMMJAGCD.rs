// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ABCLMMJAGCD.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ABCLMMJAGCD)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ABCLMMJAGCD {
    // message fields
    // @@protoc_insertion_point(field:ABCLMMJAGCD.retcode)
    pub retcode: ::protobuf::EnumOrUnknown<super::NBOEBHHLHKF::NBOEBHHLHKF>,
    // @@protoc_insertion_point(field:ABCLMMJAGCD.CEBNDLGFFEC)
    pub CEBNDLGFFEC: ::protobuf::EnumOrUnknown<super::BOCMMBMNBCK::BOCMMBMNBCK>,
    // @@protoc_insertion_point(field:ABCLMMJAGCD.BLGPIKHEGCC)
    pub BLGPIKHEGCC: ::protobuf::MessageField<super::DEDFMIPCCEC::DEDFMIPCCEC>,
    // @@protoc_insertion_point(field:ABCLMMJAGCD.ICPPMBDBEMB)
    pub ICPPMBDBEMB: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ABCLMMJAGCD.MJPEPGCIEEH)
    pub MJPEPGCIEEH: ::std::collections::HashMap<::std::string::String, u32>,
    // @@protoc_insertion_point(field:ABCLMMJAGCD.DFMOOFMJPKE)
    pub DFMOOFMJPKE: u32,
    // @@protoc_insertion_point(field:ABCLMMJAGCD.GFOMJFKICBA)
    pub GFOMJFKICBA: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ABCLMMJAGCD.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ABCLMMJAGCD {
    fn default() -> &'a ABCLMMJAGCD {
        <ABCLMMJAGCD as ::protobuf::Message>::default_instance()
    }
}

impl ABCLMMJAGCD {
    pub fn new() -> ABCLMMJAGCD {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &ABCLMMJAGCD| { &m.retcode },
            |m: &mut ABCLMMJAGCD| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CEBNDLGFFEC",
            |m: &ABCLMMJAGCD| { &m.CEBNDLGFFEC },
            |m: &mut ABCLMMJAGCD| { &mut m.CEBNDLGFFEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DEDFMIPCCEC::DEDFMIPCCEC>(
            "BLGPIKHEGCC",
            |m: &ABCLMMJAGCD| { &m.BLGPIKHEGCC },
            |m: &mut ABCLMMJAGCD| { &mut m.BLGPIKHEGCC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ICPPMBDBEMB",
            |m: &ABCLMMJAGCD| { &m.ICPPMBDBEMB },
            |m: &mut ABCLMMJAGCD| { &mut m.ICPPMBDBEMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "MJPEPGCIEEH",
            |m: &ABCLMMJAGCD| { &m.MJPEPGCIEEH },
            |m: &mut ABCLMMJAGCD| { &mut m.MJPEPGCIEEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DFMOOFMJPKE",
            |m: &ABCLMMJAGCD| { &m.DFMOOFMJPKE },
            |m: &mut ABCLMMJAGCD| { &mut m.DFMOOFMJPKE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GFOMJFKICBA",
            |m: &ABCLMMJAGCD| { &m.GFOMJFKICBA },
            |m: &mut ABCLMMJAGCD| { &mut m.GFOMJFKICBA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ABCLMMJAGCD>(
            "ABCLMMJAGCD",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ABCLMMJAGCD {
    const NAME: &'static str = "ABCLMMJAGCD";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.retcode = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.CEBNDLGFFEC = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BLGPIKHEGCC)?;
                },
                34 => {
                    self.ICPPMBDBEMB = is.read_bytes()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.MJPEPGCIEEH.insert(key, value);
                },
                48 => {
                    self.DFMOOFMJPKE = is.read_uint32()?;
                },
                56 => {
                    self.GFOMJFKICBA = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != ::protobuf::EnumOrUnknown::new(super::NBOEBHHLHKF::NBOEBHHLHKF::BATTLE_CHECK_RESULT_SUCC) {
            my_size += ::protobuf::rt::int32_size(1, self.retcode.value());
        }
        if self.CEBNDLGFFEC != ::protobuf::EnumOrUnknown::new(super::BOCMMBMNBCK::BOCMMBMNBCK::BATTLE_END_NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.CEBNDLGFFEC.value());
        }
        if let Some(v) = self.BLGPIKHEGCC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.ICPPMBDBEMB.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.ICPPMBDBEMB);
        }
        for (k, v) in &self.MJPEPGCIEEH {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.DFMOOFMJPKE != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.DFMOOFMJPKE);
        }
        if self.GFOMJFKICBA != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.GFOMJFKICBA);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != ::protobuf::EnumOrUnknown::new(super::NBOEBHHLHKF::NBOEBHHLHKF::BATTLE_CHECK_RESULT_SUCC) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.retcode))?;
        }
        if self.CEBNDLGFFEC != ::protobuf::EnumOrUnknown::new(super::BOCMMBMNBCK::BOCMMBMNBCK::BATTLE_END_NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.CEBNDLGFFEC))?;
        }
        if let Some(v) = self.BLGPIKHEGCC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.ICPPMBDBEMB.is_empty() {
            os.write_bytes(4, &self.ICPPMBDBEMB)?;
        }
        for (k, v) in &self.MJPEPGCIEEH {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_uint32(2, *v)?;
        };
        if self.DFMOOFMJPKE != 0 {
            os.write_uint32(6, self.DFMOOFMJPKE)?;
        }
        if self.GFOMJFKICBA != 0 {
            os.write_uint32(7, self.GFOMJFKICBA)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ABCLMMJAGCD {
        ABCLMMJAGCD::new()
    }

    fn clear(&mut self) {
        self.retcode = ::protobuf::EnumOrUnknown::new(super::NBOEBHHLHKF::NBOEBHHLHKF::BATTLE_CHECK_RESULT_SUCC);
        self.CEBNDLGFFEC = ::protobuf::EnumOrUnknown::new(super::BOCMMBMNBCK::BOCMMBMNBCK::BATTLE_END_NONE);
        self.BLGPIKHEGCC.clear();
        self.ICPPMBDBEMB.clear();
        self.MJPEPGCIEEH.clear();
        self.DFMOOFMJPKE = 0;
        self.GFOMJFKICBA = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ABCLMMJAGCD {
        static instance: ::protobuf::rt::Lazy<ABCLMMJAGCD> = ::protobuf::rt::Lazy::new();
        instance.get(ABCLMMJAGCD::new)
    }
}

impl ::protobuf::MessageFull for ABCLMMJAGCD {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ABCLMMJAGCD").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ABCLMMJAGCD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ABCLMMJAGCD {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ABCLMMJAGCD.proto\x1a\x11BOCMMBMNBCK.proto\x1a\x11DEDFMIPCCEC.prot\
    o\x1a\x11NBOEBHHLHKF.proto\"\xfc\x02\n\x0bABCLMMJAGCD\x12&\n\x07retcode\
    \x18\x01\x20\x01(\x0e2\x0c.NBOEBHHLHKFR\x07retcode\x12.\n\x0bCEBNDLGFFEC\
    \x18\x02\x20\x01(\x0e2\x0c.BOCMMBMNBCKR\x0bCEBNDLGFFEC\x12.\n\x0bBLGPIKH\
    EGCC\x18\x03\x20\x01(\x0b2\x0c.DEDFMIPCCECR\x0bBLGPIKHEGCC\x12\x20\n\x0b\
    ICPPMBDBEMB\x18\x04\x20\x01(\x0cR\x0bICPPMBDBEMB\x12?\n\x0bMJPEPGCIEEH\
    \x18\x05\x20\x03(\x0b2\x1d.ABCLMMJAGCD.MJPEPGCIEEHEntryR\x0bMJPEPGCIEEH\
    \x12\x20\n\x0bDFMOOFMJPKE\x18\x06\x20\x01(\rR\x0bDFMOOFMJPKE\x12\x20\n\
    \x0bGFOMJFKICBA\x18\x07\x20\x01(\rR\x0bGFOMJFKICBA\x1a>\n\x10MJPEPGCIEEH\
    Entry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\rR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BOCMMBMNBCK::file_descriptor().clone());
            deps.push(super::DEDFMIPCCEC::file_descriptor().clone());
            deps.push(super::NBOEBHHLHKF::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ABCLMMJAGCD::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
