// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JLHIKGMIDHO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:JLHIKGMIDHO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JLHIKGMIDHO {
    // message fields
    // @@protoc_insertion_point(field:JLHIKGMIDHO.KKHIKINKEEF)
    pub KKHIKINKEEF: ::std::vec::Vec<super::FBDLAHIKIBJ::FBDLAHIKIBJ>,
    // @@protoc_insertion_point(field:JLHIKGMIDHO.PBCOGNHGNOF)
    pub PBCOGNHGNOF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:JLHIKGMIDHO.MBCNILJGHNC)
    pub MBCNILJGHNC: ::std::vec::Vec<super::IBFFCOFEENL::IBFFCOFEENL>,
    // @@protoc_insertion_point(field:JLHIKGMIDHO.IBMMIGLMAGC)
    pub IBMMIGLMAGC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:JLHIKGMIDHO.AHKLPJBHPEI)
    pub AHKLPJBHPEI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:JLHIKGMIDHO.GOEHHMLDICL)
    pub GOEHHMLDICL: ::std::vec::Vec<super::BMHINPIMHAH::BMHINPIMHAH>,
    // @@protoc_insertion_point(field:JLHIKGMIDHO.HAANKDFGNCD)
    pub HAANKDFGNCD: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:JLHIKGMIDHO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JLHIKGMIDHO {
    fn default() -> &'a JLHIKGMIDHO {
        <JLHIKGMIDHO as ::protobuf::Message>::default_instance()
    }
}

impl JLHIKGMIDHO {
    pub fn new() -> JLHIKGMIDHO {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KKHIKINKEEF",
            |m: &JLHIKGMIDHO| { &m.KKHIKINKEEF },
            |m: &mut JLHIKGMIDHO| { &mut m.KKHIKINKEEF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PBCOGNHGNOF",
            |m: &JLHIKGMIDHO| { &m.PBCOGNHGNOF },
            |m: &mut JLHIKGMIDHO| { &mut m.PBCOGNHGNOF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MBCNILJGHNC",
            |m: &JLHIKGMIDHO| { &m.MBCNILJGHNC },
            |m: &mut JLHIKGMIDHO| { &mut m.MBCNILJGHNC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IBMMIGLMAGC",
            |m: &JLHIKGMIDHO| { &m.IBMMIGLMAGC },
            |m: &mut JLHIKGMIDHO| { &mut m.IBMMIGLMAGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AHKLPJBHPEI",
            |m: &JLHIKGMIDHO| { &m.AHKLPJBHPEI },
            |m: &mut JLHIKGMIDHO| { &mut m.AHKLPJBHPEI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GOEHHMLDICL",
            |m: &JLHIKGMIDHO| { &m.GOEHHMLDICL },
            |m: &mut JLHIKGMIDHO| { &mut m.GOEHHMLDICL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HAANKDFGNCD",
            |m: &JLHIKGMIDHO| { &m.HAANKDFGNCD },
            |m: &mut JLHIKGMIDHO| { &mut m.HAANKDFGNCD },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JLHIKGMIDHO>(
            "JLHIKGMIDHO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JLHIKGMIDHO {
    const NAME: &'static str = "JLHIKGMIDHO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.KKHIKINKEEF.push(is.read_message()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.PBCOGNHGNOF)?;
                },
                48 => {
                    self.PBCOGNHGNOF.push(is.read_uint32()?);
                },
                58 => {
                    self.MBCNILJGHNC.push(is.read_message()?);
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.IBMMIGLMAGC)?;
                },
                120 => {
                    self.IBMMIGLMAGC.push(is.read_uint32()?);
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.AHKLPJBHPEI)?;
                },
                72 => {
                    self.AHKLPJBHPEI.push(is.read_uint32()?);
                },
                66 => {
                    self.GOEHHMLDICL.push(is.read_message()?);
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.HAANKDFGNCD)?;
                },
                104 => {
                    self.HAANKDFGNCD.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.KKHIKINKEEF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.PBCOGNHGNOF {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        for value in &self.MBCNILJGHNC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.IBMMIGLMAGC {
            my_size += ::protobuf::rt::uint32_size(15, *value);
        };
        for value in &self.AHKLPJBHPEI {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        for value in &self.GOEHHMLDICL {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.HAANKDFGNCD {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.KKHIKINKEEF {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.PBCOGNHGNOF {
            os.write_uint32(6, *v)?;
        };
        for v in &self.MBCNILJGHNC {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.IBMMIGLMAGC {
            os.write_uint32(15, *v)?;
        };
        for v in &self.AHKLPJBHPEI {
            os.write_uint32(9, *v)?;
        };
        for v in &self.GOEHHMLDICL {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.HAANKDFGNCD {
            os.write_uint32(13, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JLHIKGMIDHO {
        JLHIKGMIDHO::new()
    }

    fn clear(&mut self) {
        self.KKHIKINKEEF.clear();
        self.PBCOGNHGNOF.clear();
        self.MBCNILJGHNC.clear();
        self.IBMMIGLMAGC.clear();
        self.AHKLPJBHPEI.clear();
        self.GOEHHMLDICL.clear();
        self.HAANKDFGNCD.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JLHIKGMIDHO {
        static instance: JLHIKGMIDHO = JLHIKGMIDHO {
            KKHIKINKEEF: ::std::vec::Vec::new(),
            PBCOGNHGNOF: ::std::vec::Vec::new(),
            MBCNILJGHNC: ::std::vec::Vec::new(),
            IBMMIGLMAGC: ::std::vec::Vec::new(),
            AHKLPJBHPEI: ::std::vec::Vec::new(),
            GOEHHMLDICL: ::std::vec::Vec::new(),
            HAANKDFGNCD: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JLHIKGMIDHO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JLHIKGMIDHO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JLHIKGMIDHO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JLHIKGMIDHO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JLHIKGMIDHO.proto\x1a\x11BMHINPIMHAH.proto\x1a\x11FBDLAHIKIBJ.prot\
    o\x1a\x11IBFFCOFEENL.proto\"\xa5\x02\n\x0bJLHIKGMIDHO\x12.\n\x0bKKHIKINK\
    EEF\x18\x02\x20\x03(\x0b2\x0c.FBDLAHIKIBJR\x0bKKHIKINKEEF\x12\x20\n\x0bP\
    BCOGNHGNOF\x18\x06\x20\x03(\rR\x0bPBCOGNHGNOF\x12.\n\x0bMBCNILJGHNC\x18\
    \x07\x20\x03(\x0b2\x0c.IBFFCOFEENLR\x0bMBCNILJGHNC\x12\x20\n\x0bIBMMIGLM\
    AGC\x18\x0f\x20\x03(\rR\x0bIBMMIGLMAGC\x12\x20\n\x0bAHKLPJBHPEI\x18\t\
    \x20\x03(\rR\x0bAHKLPJBHPEI\x12.\n\x0bGOEHHMLDICL\x18\x08\x20\x03(\x0b2\
    \x0c.BMHINPIMHAHR\x0bGOEHHMLDICL\x12\x20\n\x0bHAANKDFGNCD\x18\r\x20\x03(\
    \rR\x0bHAANKDFGNCDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BMHINPIMHAH::file_descriptor().clone());
            deps.push(super::FBDLAHIKIBJ::file_descriptor().clone());
            deps.push(super::IBFFCOFEENL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JLHIKGMIDHO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
