// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetPhoneDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetPhoneDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPhoneDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetPhoneDataScRsp.cur_phone_theme)
    pub cur_phone_theme: u32,
    // @@protoc_insertion_point(field:GetPhoneDataScRsp.owned_phone_themes)
    pub owned_phone_themes: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetPhoneDataScRsp.cur_chat_bubble)
    pub cur_chat_bubble: u32,
    // @@protoc_insertion_point(field:GetPhoneDataScRsp.owned_chat_bubbles)
    pub owned_chat_bubbles: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetPhoneDataScRsp.retcode)
    pub retcode: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GetPhoneDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPhoneDataScRsp {
    fn default() -> &'a GetPhoneDataScRsp {
        <GetPhoneDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetPhoneDataScRsp {
    pub fn new() -> GetPhoneDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_phone_theme",
            |m: &GetPhoneDataScRsp| { &m.cur_phone_theme },
            |m: &mut GetPhoneDataScRsp| { &mut m.cur_phone_theme },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "owned_phone_themes",
            |m: &GetPhoneDataScRsp| { &m.owned_phone_themes },
            |m: &mut GetPhoneDataScRsp| { &mut m.owned_phone_themes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_chat_bubble",
            |m: &GetPhoneDataScRsp| { &m.cur_chat_bubble },
            |m: &mut GetPhoneDataScRsp| { &mut m.cur_chat_bubble },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "owned_chat_bubbles",
            |m: &GetPhoneDataScRsp| { &m.owned_chat_bubbles },
            |m: &mut GetPhoneDataScRsp| { &mut m.owned_chat_bubbles },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetPhoneDataScRsp| { &m.retcode },
            |m: &mut GetPhoneDataScRsp| { &mut m.retcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPhoneDataScRsp>(
            "GetPhoneDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPhoneDataScRsp {
    const NAME: &'static str = "GetPhoneDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.cur_phone_theme = is.read_uint32()?;
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.owned_phone_themes)?;
                },
                104 => {
                    self.owned_phone_themes.push(is.read_uint32()?);
                },
                120 => {
                    self.cur_chat_bubble = is.read_uint32()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.owned_chat_bubbles)?;
                },
                40 => {
                    self.owned_chat_bubbles.push(is.read_uint32()?);
                },
                8 => {
                    self.retcode = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.cur_phone_theme != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.cur_phone_theme);
        }
        for value in &self.owned_phone_themes {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        if self.cur_chat_bubble != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.cur_chat_bubble);
        }
        for value in &self.owned_chat_bubbles {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.retcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.cur_phone_theme != 0 {
            os.write_uint32(14, self.cur_phone_theme)?;
        }
        for v in &self.owned_phone_themes {
            os.write_uint32(13, *v)?;
        };
        if self.cur_chat_bubble != 0 {
            os.write_uint32(15, self.cur_chat_bubble)?;
        }
        for v in &self.owned_chat_bubbles {
            os.write_uint32(5, *v)?;
        };
        if self.retcode != 0 {
            os.write_uint32(1, self.retcode)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPhoneDataScRsp {
        GetPhoneDataScRsp::new()
    }

    fn clear(&mut self) {
        self.cur_phone_theme = 0;
        self.owned_phone_themes.clear();
        self.cur_chat_bubble = 0;
        self.owned_chat_bubbles.clear();
        self.retcode = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPhoneDataScRsp {
        static instance: GetPhoneDataScRsp = GetPhoneDataScRsp {
            cur_phone_theme: 0,
            owned_phone_themes: ::std::vec::Vec::new(),
            cur_chat_bubble: 0,
            owned_chat_bubbles: ::std::vec::Vec::new(),
            retcode: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPhoneDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPhoneDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPhoneDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPhoneDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17GetPhoneDataScRsp.proto\"\xd9\x01\n\x11GetPhoneDataScRsp\x12&\n\
    \x0fcur_phone_theme\x18\x0e\x20\x01(\rR\rcurPhoneTheme\x12,\n\x12owned_p\
    hone_themes\x18\r\x20\x03(\rR\x10ownedPhoneThemes\x12&\n\x0fcur_chat_bub\
    ble\x18\x0f\x20\x01(\rR\rcurChatBubble\x12,\n\x12owned_chat_bubbles\x18\
    \x05\x20\x03(\rR\x10ownedChatBubbles\x12\x18\n\x07retcode\x18\x01\x20\
    \x01(\rR\x07retcodeB\x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetPhoneDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
