// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EOJIMNJPNPN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EOJIMNJPNPN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EOJIMNJPNPN {
    // message fields
    // @@protoc_insertion_point(field:EOJIMNJPNPN.MCFPPPONPIE)
    pub MCFPPPONPIE: bool,
    // @@protoc_insertion_point(field:EOJIMNJPNPN.BGGBFKOGGMG)
    pub BGGBFKOGGMG: bool,
    // @@protoc_insertion_point(field:EOJIMNJPNPN.OHFHFCLEBKO)
    pub OHFHFCLEBKO: i64,
    // @@protoc_insertion_point(field:EOJIMNJPNPN.MNAKFNFJLFK)
    pub MNAKFNFJLFK: u32,
    // @@protoc_insertion_point(field:EOJIMNJPNPN.MGHPCLLHAKJ)
    pub MGHPCLLHAKJ: u32,
    // @@protoc_insertion_point(field:EOJIMNJPNPN.MFGOHFEIFCJ)
    pub MFGOHFEIFCJ: i64,
    // @@protoc_insertion_point(field:EOJIMNJPNPN.EPMLNNJLPHK)
    pub EPMLNNJLPHK: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:EOJIMNJPNPN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EOJIMNJPNPN {
    fn default() -> &'a EOJIMNJPNPN {
        <EOJIMNJPNPN as ::protobuf::Message>::default_instance()
    }
}

impl EOJIMNJPNPN {
    pub fn new() -> EOJIMNJPNPN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MCFPPPONPIE",
            |m: &EOJIMNJPNPN| { &m.MCFPPPONPIE },
            |m: &mut EOJIMNJPNPN| { &mut m.MCFPPPONPIE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BGGBFKOGGMG",
            |m: &EOJIMNJPNPN| { &m.BGGBFKOGGMG },
            |m: &mut EOJIMNJPNPN| { &mut m.BGGBFKOGGMG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OHFHFCLEBKO",
            |m: &EOJIMNJPNPN| { &m.OHFHFCLEBKO },
            |m: &mut EOJIMNJPNPN| { &mut m.OHFHFCLEBKO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MNAKFNFJLFK",
            |m: &EOJIMNJPNPN| { &m.MNAKFNFJLFK },
            |m: &mut EOJIMNJPNPN| { &mut m.MNAKFNFJLFK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MGHPCLLHAKJ",
            |m: &EOJIMNJPNPN| { &m.MGHPCLLHAKJ },
            |m: &mut EOJIMNJPNPN| { &mut m.MGHPCLLHAKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MFGOHFEIFCJ",
            |m: &EOJIMNJPNPN| { &m.MFGOHFEIFCJ },
            |m: &mut EOJIMNJPNPN| { &mut m.MFGOHFEIFCJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EPMLNNJLPHK",
            |m: &EOJIMNJPNPN| { &m.EPMLNNJLPHK },
            |m: &mut EOJIMNJPNPN| { &mut m.EPMLNNJLPHK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EOJIMNJPNPN>(
            "EOJIMNJPNPN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EOJIMNJPNPN {
    const NAME: &'static str = "EOJIMNJPNPN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.MCFPPPONPIE = is.read_bool()?;
                },
                32 => {
                    self.BGGBFKOGGMG = is.read_bool()?;
                },
                40 => {
                    self.OHFHFCLEBKO = is.read_int64()?;
                },
                24 => {
                    self.MNAKFNFJLFK = is.read_uint32()?;
                },
                56 => {
                    self.MGHPCLLHAKJ = is.read_uint32()?;
                },
                8 => {
                    self.MFGOHFEIFCJ = is.read_int64()?;
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.EPMLNNJLPHK)?;
                },
                48 => {
                    self.EPMLNNJLPHK.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.MCFPPPONPIE != false {
            my_size += 1 + 1;
        }
        if self.BGGBFKOGGMG != false {
            my_size += 1 + 1;
        }
        if self.OHFHFCLEBKO != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.OHFHFCLEBKO);
        }
        if self.MNAKFNFJLFK != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.MNAKFNFJLFK);
        }
        if self.MGHPCLLHAKJ != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.MGHPCLLHAKJ);
        }
        if self.MFGOHFEIFCJ != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.MFGOHFEIFCJ);
        }
        for value in &self.EPMLNNJLPHK {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.MCFPPPONPIE != false {
            os.write_bool(12, self.MCFPPPONPIE)?;
        }
        if self.BGGBFKOGGMG != false {
            os.write_bool(4, self.BGGBFKOGGMG)?;
        }
        if self.OHFHFCLEBKO != 0 {
            os.write_int64(5, self.OHFHFCLEBKO)?;
        }
        if self.MNAKFNFJLFK != 0 {
            os.write_uint32(3, self.MNAKFNFJLFK)?;
        }
        if self.MGHPCLLHAKJ != 0 {
            os.write_uint32(7, self.MGHPCLLHAKJ)?;
        }
        if self.MFGOHFEIFCJ != 0 {
            os.write_int64(1, self.MFGOHFEIFCJ)?;
        }
        for v in &self.EPMLNNJLPHK {
            os.write_uint32(6, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EOJIMNJPNPN {
        EOJIMNJPNPN::new()
    }

    fn clear(&mut self) {
        self.MCFPPPONPIE = false;
        self.BGGBFKOGGMG = false;
        self.OHFHFCLEBKO = 0;
        self.MNAKFNFJLFK = 0;
        self.MGHPCLLHAKJ = 0;
        self.MFGOHFEIFCJ = 0;
        self.EPMLNNJLPHK.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EOJIMNJPNPN {
        static instance: EOJIMNJPNPN = EOJIMNJPNPN {
            MCFPPPONPIE: false,
            BGGBFKOGGMG: false,
            OHFHFCLEBKO: 0,
            MNAKFNFJLFK: 0,
            MGHPCLLHAKJ: 0,
            MFGOHFEIFCJ: 0,
            EPMLNNJLPHK: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EOJIMNJPNPN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EOJIMNJPNPN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EOJIMNJPNPN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EOJIMNJPNPN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EOJIMNJPNPN.proto\"\xfb\x01\n\x0bEOJIMNJPNPN\x12\x20\n\x0bMCFPPPON\
    PIE\x18\x0c\x20\x01(\x08R\x0bMCFPPPONPIE\x12\x20\n\x0bBGGBFKOGGMG\x18\
    \x04\x20\x01(\x08R\x0bBGGBFKOGGMG\x12\x20\n\x0bOHFHFCLEBKO\x18\x05\x20\
    \x01(\x03R\x0bOHFHFCLEBKO\x12\x20\n\x0bMNAKFNFJLFK\x18\x03\x20\x01(\rR\
    \x0bMNAKFNFJLFK\x12\x20\n\x0bMGHPCLLHAKJ\x18\x07\x20\x01(\rR\x0bMGHPCLLH\
    AKJ\x12\x20\n\x0bMFGOHFEIFCJ\x18\x01\x20\x01(\x03R\x0bMFGOHFEIFCJ\x12\
    \x20\n\x0bEPMLNNJLPHK\x18\x06\x20\x03(\rR\x0bEPMLNNJLPHKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EOJIMNJPNPN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
