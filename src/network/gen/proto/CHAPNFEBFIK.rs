// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CHAPNFEBFIK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CHAPNFEBFIK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CHAPNFEBFIK {
    // message fields
    // @@protoc_insertion_point(field:CHAPNFEBFIK.OJNNCENAHEG)
    pub OJNNCENAHEG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CHAPNFEBFIK.CNLIBKKMGAB)
    pub CNLIBKKMGAB: bool,
    // @@protoc_insertion_point(field:CHAPNFEBFIK.PGHAPHCHHDA)
    pub PGHAPHCHHDA: u32,
    // @@protoc_insertion_point(field:CHAPNFEBFIK.PLIIPNDMHGL)
    pub PLIIPNDMHGL: u32,
    // @@protoc_insertion_point(field:CHAPNFEBFIK.GNFOHBAICKM)
    pub GNFOHBAICKM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CHAPNFEBFIK.BOONCBKEJJJ)
    pub BOONCBKEJJJ: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CHAPNFEBFIK.MLMMAJBPGGJ)
    pub MLMMAJBPGGJ: bool,
    // @@protoc_insertion_point(field:CHAPNFEBFIK.LBMIPLJOCFE)
    pub LBMIPLJOCFE: u32,
    // special fields
    // @@protoc_insertion_point(special_field:CHAPNFEBFIK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CHAPNFEBFIK {
    fn default() -> &'a CHAPNFEBFIK {
        <CHAPNFEBFIK as ::protobuf::Message>::default_instance()
    }
}

impl CHAPNFEBFIK {
    pub fn new() -> CHAPNFEBFIK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OJNNCENAHEG",
            |m: &CHAPNFEBFIK| { &m.OJNNCENAHEG },
            |m: &mut CHAPNFEBFIK| { &mut m.OJNNCENAHEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CNLIBKKMGAB",
            |m: &CHAPNFEBFIK| { &m.CNLIBKKMGAB },
            |m: &mut CHAPNFEBFIK| { &mut m.CNLIBKKMGAB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PGHAPHCHHDA",
            |m: &CHAPNFEBFIK| { &m.PGHAPHCHHDA },
            |m: &mut CHAPNFEBFIK| { &mut m.PGHAPHCHHDA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PLIIPNDMHGL",
            |m: &CHAPNFEBFIK| { &m.PLIIPNDMHGL },
            |m: &mut CHAPNFEBFIK| { &mut m.PLIIPNDMHGL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GNFOHBAICKM",
            |m: &CHAPNFEBFIK| { &m.GNFOHBAICKM },
            |m: &mut CHAPNFEBFIK| { &mut m.GNFOHBAICKM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BOONCBKEJJJ",
            |m: &CHAPNFEBFIK| { &m.BOONCBKEJJJ },
            |m: &mut CHAPNFEBFIK| { &mut m.BOONCBKEJJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MLMMAJBPGGJ",
            |m: &CHAPNFEBFIK| { &m.MLMMAJBPGGJ },
            |m: &mut CHAPNFEBFIK| { &mut m.MLMMAJBPGGJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LBMIPLJOCFE",
            |m: &CHAPNFEBFIK| { &m.LBMIPLJOCFE },
            |m: &mut CHAPNFEBFIK| { &mut m.LBMIPLJOCFE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CHAPNFEBFIK>(
            "CHAPNFEBFIK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CHAPNFEBFIK {
    const NAME: &'static str = "CHAPNFEBFIK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.OJNNCENAHEG)?;
                },
                56 => {
                    self.OJNNCENAHEG.push(is.read_uint32()?);
                },
                112 => {
                    self.CNLIBKKMGAB = is.read_bool()?;
                },
                120 => {
                    self.PGHAPHCHHDA = is.read_uint32()?;
                },
                16 => {
                    self.PLIIPNDMHGL = is.read_uint32()?;
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.GNFOHBAICKM)?;
                },
                80 => {
                    self.GNFOHBAICKM.push(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.BOONCBKEJJJ)?;
                },
                48 => {
                    self.BOONCBKEJJJ.push(is.read_uint32()?);
                },
                88 => {
                    self.MLMMAJBPGGJ = is.read_bool()?;
                },
                96 => {
                    self.LBMIPLJOCFE = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.OJNNCENAHEG {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        if self.CNLIBKKMGAB != false {
            my_size += 1 + 1;
        }
        if self.PGHAPHCHHDA != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.PGHAPHCHHDA);
        }
        if self.PLIIPNDMHGL != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.PLIIPNDMHGL);
        }
        for value in &self.GNFOHBAICKM {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        for value in &self.BOONCBKEJJJ {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        if self.MLMMAJBPGGJ != false {
            my_size += 1 + 1;
        }
        if self.LBMIPLJOCFE != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.LBMIPLJOCFE);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.OJNNCENAHEG {
            os.write_uint32(7, *v)?;
        };
        if self.CNLIBKKMGAB != false {
            os.write_bool(14, self.CNLIBKKMGAB)?;
        }
        if self.PGHAPHCHHDA != 0 {
            os.write_uint32(15, self.PGHAPHCHHDA)?;
        }
        if self.PLIIPNDMHGL != 0 {
            os.write_uint32(2, self.PLIIPNDMHGL)?;
        }
        for v in &self.GNFOHBAICKM {
            os.write_uint32(10, *v)?;
        };
        for v in &self.BOONCBKEJJJ {
            os.write_uint32(6, *v)?;
        };
        if self.MLMMAJBPGGJ != false {
            os.write_bool(11, self.MLMMAJBPGGJ)?;
        }
        if self.LBMIPLJOCFE != 0 {
            os.write_uint32(12, self.LBMIPLJOCFE)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CHAPNFEBFIK {
        CHAPNFEBFIK::new()
    }

    fn clear(&mut self) {
        self.OJNNCENAHEG.clear();
        self.CNLIBKKMGAB = false;
        self.PGHAPHCHHDA = 0;
        self.PLIIPNDMHGL = 0;
        self.GNFOHBAICKM.clear();
        self.BOONCBKEJJJ.clear();
        self.MLMMAJBPGGJ = false;
        self.LBMIPLJOCFE = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CHAPNFEBFIK {
        static instance: CHAPNFEBFIK = CHAPNFEBFIK {
            OJNNCENAHEG: ::std::vec::Vec::new(),
            CNLIBKKMGAB: false,
            PGHAPHCHHDA: 0,
            PLIIPNDMHGL: 0,
            GNFOHBAICKM: ::std::vec::Vec::new(),
            BOONCBKEJJJ: ::std::vec::Vec::new(),
            MLMMAJBPGGJ: false,
            LBMIPLJOCFE: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CHAPNFEBFIK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CHAPNFEBFIK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CHAPNFEBFIK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CHAPNFEBFIK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CHAPNFEBFIK.proto\"\x9d\x02\n\x0bCHAPNFEBFIK\x12\x20\n\x0bOJNNCENA\
    HEG\x18\x07\x20\x03(\rR\x0bOJNNCENAHEG\x12\x20\n\x0bCNLIBKKMGAB\x18\x0e\
    \x20\x01(\x08R\x0bCNLIBKKMGAB\x12\x20\n\x0bPGHAPHCHHDA\x18\x0f\x20\x01(\
    \rR\x0bPGHAPHCHHDA\x12\x20\n\x0bPLIIPNDMHGL\x18\x02\x20\x01(\rR\x0bPLIIP\
    NDMHGL\x12\x20\n\x0bGNFOHBAICKM\x18\n\x20\x03(\rR\x0bGNFOHBAICKM\x12\x20\
    \n\x0bBOONCBKEJJJ\x18\x06\x20\x03(\rR\x0bBOONCBKEJJJ\x12\x20\n\x0bMLMMAJ\
    BPGGJ\x18\x0b\x20\x01(\x08R\x0bMLMMAJBPGGJ\x12\x20\n\x0bLBMIPLJOCFE\x18\
    \x0c\x20\x01(\rR\x0bLBMIPLJOCFEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CHAPNFEBFIK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
