// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetSwordTrainingDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetSwordTrainingDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetSwordTrainingDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetSwordTrainingDataScRsp.PAJLKKDOFME)
    pub PAJLKKDOFME: ::protobuf::MessageField<super::FNAHNBKPHAO::FNAHNBKPHAO>,
    // @@protoc_insertion_point(field:GetSwordTrainingDataScRsp.GCBOJNCKMHJ)
    pub GCBOJNCKMHJ: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetSwordTrainingDataScRsp.DKBILMAPAKF)
    pub DKBILMAPAKF: bool,
    // @@protoc_insertion_point(field:GetSwordTrainingDataScRsp.AMKDGPHBGIB)
    pub AMKDGPHBGIB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetSwordTrainingDataScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetSwordTrainingDataScRsp.BGJMLKLKAPN)
    pub BGJMLKLKAPN: u32,
    // @@protoc_insertion_point(field:GetSwordTrainingDataScRsp.DCFNCDEIEOM)
    pub DCFNCDEIEOM: ::protobuf::MessageField<super::GIBGFEMMKAA::GIBGFEMMKAA>,
    // @@protoc_insertion_point(field:GetSwordTrainingDataScRsp.LNOBDACILGG)
    pub LNOBDACILGG: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:GetSwordTrainingDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSwordTrainingDataScRsp {
    fn default() -> &'a GetSwordTrainingDataScRsp {
        <GetSwordTrainingDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetSwordTrainingDataScRsp {
    pub fn new() -> GetSwordTrainingDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FNAHNBKPHAO::FNAHNBKPHAO>(
            "PAJLKKDOFME",
            |m: &GetSwordTrainingDataScRsp| { &m.PAJLKKDOFME },
            |m: &mut GetSwordTrainingDataScRsp| { &mut m.PAJLKKDOFME },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GCBOJNCKMHJ",
            |m: &GetSwordTrainingDataScRsp| { &m.GCBOJNCKMHJ },
            |m: &mut GetSwordTrainingDataScRsp| { &mut m.GCBOJNCKMHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKBILMAPAKF",
            |m: &GetSwordTrainingDataScRsp| { &m.DKBILMAPAKF },
            |m: &mut GetSwordTrainingDataScRsp| { &mut m.DKBILMAPAKF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AMKDGPHBGIB",
            |m: &GetSwordTrainingDataScRsp| { &m.AMKDGPHBGIB },
            |m: &mut GetSwordTrainingDataScRsp| { &mut m.AMKDGPHBGIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetSwordTrainingDataScRsp| { &m.retcode },
            |m: &mut GetSwordTrainingDataScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BGJMLKLKAPN",
            |m: &GetSwordTrainingDataScRsp| { &m.BGJMLKLKAPN },
            |m: &mut GetSwordTrainingDataScRsp| { &mut m.BGJMLKLKAPN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GIBGFEMMKAA::GIBGFEMMKAA>(
            "DCFNCDEIEOM",
            |m: &GetSwordTrainingDataScRsp| { &m.DCFNCDEIEOM },
            |m: &mut GetSwordTrainingDataScRsp| { &mut m.DCFNCDEIEOM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LNOBDACILGG",
            |m: &GetSwordTrainingDataScRsp| { &m.LNOBDACILGG },
            |m: &mut GetSwordTrainingDataScRsp| { &mut m.LNOBDACILGG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSwordTrainingDataScRsp>(
            "GetSwordTrainingDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSwordTrainingDataScRsp {
    const NAME: &'static str = "GetSwordTrainingDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PAJLKKDOFME)?;
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.GCBOJNCKMHJ)?;
                },
                120 => {
                    self.GCBOJNCKMHJ.push(is.read_uint32()?);
                },
                8 => {
                    self.DKBILMAPAKF = is.read_bool()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.AMKDGPHBGIB)?;
                },
                96 => {
                    self.AMKDGPHBGIB.push(is.read_uint32()?);
                },
                104 => {
                    self.retcode = is.read_uint32()?;
                },
                88 => {
                    self.BGJMLKLKAPN = is.read_uint32()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DCFNCDEIEOM)?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.LNOBDACILGG)?;
                },
                72 => {
                    self.LNOBDACILGG.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.PAJLKKDOFME.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.GCBOJNCKMHJ {
            my_size += ::protobuf::rt::uint32_size(15, *value);
        };
        if self.DKBILMAPAKF != false {
            my_size += 1 + 1;
        }
        for value in &self.AMKDGPHBGIB {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.retcode);
        }
        if self.BGJMLKLKAPN != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.BGJMLKLKAPN);
        }
        if let Some(v) = self.DCFNCDEIEOM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.LNOBDACILGG {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.PAJLKKDOFME.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        for v in &self.GCBOJNCKMHJ {
            os.write_uint32(15, *v)?;
        };
        if self.DKBILMAPAKF != false {
            os.write_bool(1, self.DKBILMAPAKF)?;
        }
        for v in &self.AMKDGPHBGIB {
            os.write_uint32(12, *v)?;
        };
        if self.retcode != 0 {
            os.write_uint32(13, self.retcode)?;
        }
        if self.BGJMLKLKAPN != 0 {
            os.write_uint32(11, self.BGJMLKLKAPN)?;
        }
        if let Some(v) = self.DCFNCDEIEOM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        for v in &self.LNOBDACILGG {
            os.write_uint32(9, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSwordTrainingDataScRsp {
        GetSwordTrainingDataScRsp::new()
    }

    fn clear(&mut self) {
        self.PAJLKKDOFME.clear();
        self.GCBOJNCKMHJ.clear();
        self.DKBILMAPAKF = false;
        self.AMKDGPHBGIB.clear();
        self.retcode = 0;
        self.BGJMLKLKAPN = 0;
        self.DCFNCDEIEOM.clear();
        self.LNOBDACILGG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSwordTrainingDataScRsp {
        static instance: GetSwordTrainingDataScRsp = GetSwordTrainingDataScRsp {
            PAJLKKDOFME: ::protobuf::MessageField::none(),
            GCBOJNCKMHJ: ::std::vec::Vec::new(),
            DKBILMAPAKF: false,
            AMKDGPHBGIB: ::std::vec::Vec::new(),
            retcode: 0,
            BGJMLKLKAPN: 0,
            DCFNCDEIEOM: ::protobuf::MessageField::none(),
            LNOBDACILGG: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSwordTrainingDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSwordTrainingDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSwordTrainingDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSwordTrainingDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fGetSwordTrainingDataScRsp.proto\x1a\x11FNAHNBKPHAO.proto\x1a\x11GI\
    BGFEMMKAA.proto\"\xbf\x02\n\x19GetSwordTrainingDataScRsp\x12.\n\x0bPAJLK\
    KDOFME\x18\x0e\x20\x01(\x0b2\x0c.FNAHNBKPHAOR\x0bPAJLKKDOFME\x12\x20\n\
    \x0bGCBOJNCKMHJ\x18\x0f\x20\x03(\rR\x0bGCBOJNCKMHJ\x12\x20\n\x0bDKBILMAP\
    AKF\x18\x01\x20\x01(\x08R\x0bDKBILMAPAKF\x12\x20\n\x0bAMKDGPHBGIB\x18\
    \x0c\x20\x03(\rR\x0bAMKDGPHBGIB\x12\x18\n\x07retcode\x18\r\x20\x01(\rR\
    \x07retcode\x12\x20\n\x0bBGJMLKLKAPN\x18\x0b\x20\x01(\rR\x0bBGJMLKLKAPN\
    \x12.\n\x0bDCFNCDEIEOM\x18\x07\x20\x01(\x0b2\x0c.GIBGFEMMKAAR\x0bDCFNCDE\
    IEOM\x12\x20\n\x0bLNOBDACILGG\x18\t\x20\x03(\rR\x0bLNOBDACILGGb\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::FNAHNBKPHAO::file_descriptor().clone());
            deps.push(super::GIBGFEMMKAA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetSwordTrainingDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
