// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LDACEMENDGO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LDACEMENDGO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LDACEMENDGO {
    // message fields
    // @@protoc_insertion_point(field:LDACEMENDGO.HDAHAHDPKMP)
    pub HDAHAHDPKMP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:LDACEMENDGO.PKHIJECBKHA)
    pub PKHIJECBKHA: ::protobuf::MessageField<super::APGEBMNDCBD::APGEBMNDCBD>,
    // @@protoc_insertion_point(field:LDACEMENDGO.LMPNOCEABNH)
    pub LMPNOCEABNH: ::protobuf::MessageField<super::LOJNAEKIENP::LOJNAEKIENP>,
    // @@protoc_insertion_point(field:LDACEMENDGO.MKEJBEPHKKB)
    pub MKEJBEPHKKB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:LDACEMENDGO.GJBKMFGLOGA)
    pub GJBKMFGLOGA: ::protobuf::MessageField<super::ADNMNJFEBNI::ADNMNJFEBNI>,
    // @@protoc_insertion_point(field:LDACEMENDGO.MMOHLLKALAK)
    pub MMOHLLKALAK: ::protobuf::MessageField<super::BBECLJOFGPM::BBECLJOFGPM>,
    // @@protoc_insertion_point(field:LDACEMENDGO.LGOFOILNONL)
    pub LGOFOILNONL: ::protobuf::MessageField<super::HEEPKPHCLGB::HEEPKPHCLGB>,
    // special fields
    // @@protoc_insertion_point(special_field:LDACEMENDGO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LDACEMENDGO {
    fn default() -> &'a LDACEMENDGO {
        <LDACEMENDGO as ::protobuf::Message>::default_instance()
    }
}

impl LDACEMENDGO {
    pub fn new() -> LDACEMENDGO {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HDAHAHDPKMP",
            |m: &LDACEMENDGO| { &m.HDAHAHDPKMP },
            |m: &mut LDACEMENDGO| { &mut m.HDAHAHDPKMP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::APGEBMNDCBD::APGEBMNDCBD>(
            "PKHIJECBKHA",
            |m: &LDACEMENDGO| { &m.PKHIJECBKHA },
            |m: &mut LDACEMENDGO| { &mut m.PKHIJECBKHA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LOJNAEKIENP::LOJNAEKIENP>(
            "LMPNOCEABNH",
            |m: &LDACEMENDGO| { &m.LMPNOCEABNH },
            |m: &mut LDACEMENDGO| { &mut m.LMPNOCEABNH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MKEJBEPHKKB",
            |m: &LDACEMENDGO| { &m.MKEJBEPHKKB },
            |m: &mut LDACEMENDGO| { &mut m.MKEJBEPHKKB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ADNMNJFEBNI::ADNMNJFEBNI>(
            "GJBKMFGLOGA",
            |m: &LDACEMENDGO| { &m.GJBKMFGLOGA },
            |m: &mut LDACEMENDGO| { &mut m.GJBKMFGLOGA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BBECLJOFGPM::BBECLJOFGPM>(
            "MMOHLLKALAK",
            |m: &LDACEMENDGO| { &m.MMOHLLKALAK },
            |m: &mut LDACEMENDGO| { &mut m.MMOHLLKALAK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HEEPKPHCLGB::HEEPKPHCLGB>(
            "LGOFOILNONL",
            |m: &LDACEMENDGO| { &m.LGOFOILNONL },
            |m: &mut LDACEMENDGO| { &mut m.LGOFOILNONL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LDACEMENDGO>(
            "LDACEMENDGO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LDACEMENDGO {
    const NAME: &'static str = "LDACEMENDGO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.HDAHAHDPKMP)?;
                },
                96 => {
                    self.HDAHAHDPKMP.push(is.read_uint32()?);
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PKHIJECBKHA)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LMPNOCEABNH)?;
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.MKEJBEPHKKB)?;
                },
                120 => {
                    self.MKEJBEPHKKB.push(is.read_uint32()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GJBKMFGLOGA)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MMOHLLKALAK)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LGOFOILNONL)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.HDAHAHDPKMP {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        if let Some(v) = self.PKHIJECBKHA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LMPNOCEABNH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.MKEJBEPHKKB {
            my_size += ::protobuf::rt::uint32_size(15, *value);
        };
        if let Some(v) = self.GJBKMFGLOGA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MMOHLLKALAK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LGOFOILNONL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.HDAHAHDPKMP {
            os.write_uint32(12, *v)?;
        };
        if let Some(v) = self.PKHIJECBKHA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.LMPNOCEABNH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        for v in &self.MKEJBEPHKKB {
            os.write_uint32(15, *v)?;
        };
        if let Some(v) = self.GJBKMFGLOGA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.MMOHLLKALAK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.LGOFOILNONL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LDACEMENDGO {
        LDACEMENDGO::new()
    }

    fn clear(&mut self) {
        self.HDAHAHDPKMP.clear();
        self.PKHIJECBKHA.clear();
        self.LMPNOCEABNH.clear();
        self.MKEJBEPHKKB.clear();
        self.GJBKMFGLOGA.clear();
        self.MMOHLLKALAK.clear();
        self.LGOFOILNONL.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LDACEMENDGO {
        static instance: LDACEMENDGO = LDACEMENDGO {
            HDAHAHDPKMP: ::std::vec::Vec::new(),
            PKHIJECBKHA: ::protobuf::MessageField::none(),
            LMPNOCEABNH: ::protobuf::MessageField::none(),
            MKEJBEPHKKB: ::std::vec::Vec::new(),
            GJBKMFGLOGA: ::protobuf::MessageField::none(),
            MMOHLLKALAK: ::protobuf::MessageField::none(),
            LGOFOILNONL: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LDACEMENDGO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LDACEMENDGO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LDACEMENDGO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LDACEMENDGO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LDACEMENDGO.proto\x1a\x11ADNMNJFEBNI.proto\x1a\x11APGEBMNDCBD.prot\
    o\x1a\x11BBECLJOFGPM.proto\x1a\x11HEEPKPHCLGB.proto\x1a\x11LOJNAEKIENP.p\
    roto\"\xc1\x02\n\x0bLDACEMENDGO\x12\x20\n\x0bHDAHAHDPKMP\x18\x0c\x20\x03\
    (\rR\x0bHDAHAHDPKMP\x12.\n\x0bPKHIJECBKHA\x18\x0e\x20\x01(\x0b2\x0c.APGE\
    BMNDCBDR\x0bPKHIJECBKHA\x12.\n\x0bLMPNOCEABNH\x18\t\x20\x01(\x0b2\x0c.LO\
    JNAEKIENPR\x0bLMPNOCEABNH\x12\x20\n\x0bMKEJBEPHKKB\x18\x0f\x20\x03(\rR\
    \x0bMKEJBEPHKKB\x12.\n\x0bGJBKMFGLOGA\x18\x07\x20\x01(\x0b2\x0c.ADNMNJFE\
    BNIR\x0bGJBKMFGLOGA\x12.\n\x0bMMOHLLKALAK\x18\x08\x20\x01(\x0b2\x0c.BBEC\
    LJOFGPMR\x0bMMOHLLKALAK\x12.\n\x0bLGOFOILNONL\x18\x03\x20\x01(\x0b2\x0c.\
    HEEPKPHCLGBR\x0bLGOFOILNONLb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::ADNMNJFEBNI::file_descriptor().clone());
            deps.push(super::APGEBMNDCBD::file_descriptor().clone());
            deps.push(super::BBECLJOFGPM::file_descriptor().clone());
            deps.push(super::HEEPKPHCLGB::file_descriptor().clone());
            deps.push(super::LOJNAEKIENP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LDACEMENDGO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
