// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `KLDMJEMIMCN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:KLDMJEMIMCN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KLDMJEMIMCN {
    // message fields
    // @@protoc_insertion_point(field:KLDMJEMIMCN.HBANCCOKOFC)
    pub HBANCCOKOFC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:KLDMJEMIMCN.CPKPINCCEIP)
    pub CPKPINCCEIP: ::std::vec::Vec<super::MEKDNIKFDNA::MEKDNIKFDNA>,
    // @@protoc_insertion_point(field:KLDMJEMIMCN.MCOKHHFPBPJ)
    pub MCOKHHFPBPJ: u64,
    // @@protoc_insertion_point(field:KLDMJEMIMCN.HCBBHCKJNJI)
    pub HCBBHCKJNJI: i32,
    // @@protoc_insertion_point(field:KLDMJEMIMCN.JGIBHFJMOBE)
    pub JGIBHFJMOBE: ::protobuf::EnumOrUnknown<super::DGFCBOFAOIA::DGFCBOFAOIA>,
    // @@protoc_insertion_point(field:KLDMJEMIMCN.MEJDMJIKIMO)
    pub MEJDMJIKIMO: ::protobuf::MessageField<super::MDOHAFBEEPK::MDOHAFBEEPK>,
    // @@protoc_insertion_point(field:KLDMJEMIMCN.DANCCAOJLJN)
    pub DANCCAOJLJN: u32,
    // special fields
    // @@protoc_insertion_point(special_field:KLDMJEMIMCN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KLDMJEMIMCN {
    fn default() -> &'a KLDMJEMIMCN {
        <KLDMJEMIMCN as ::protobuf::Message>::default_instance()
    }
}

impl KLDMJEMIMCN {
    pub fn new() -> KLDMJEMIMCN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HBANCCOKOFC",
            |m: &KLDMJEMIMCN| { &m.HBANCCOKOFC },
            |m: &mut KLDMJEMIMCN| { &mut m.HBANCCOKOFC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CPKPINCCEIP",
            |m: &KLDMJEMIMCN| { &m.CPKPINCCEIP },
            |m: &mut KLDMJEMIMCN| { &mut m.CPKPINCCEIP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MCOKHHFPBPJ",
            |m: &KLDMJEMIMCN| { &m.MCOKHHFPBPJ },
            |m: &mut KLDMJEMIMCN| { &mut m.MCOKHHFPBPJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HCBBHCKJNJI",
            |m: &KLDMJEMIMCN| { &m.HCBBHCKJNJI },
            |m: &mut KLDMJEMIMCN| { &mut m.HCBBHCKJNJI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JGIBHFJMOBE",
            |m: &KLDMJEMIMCN| { &m.JGIBHFJMOBE },
            |m: &mut KLDMJEMIMCN| { &mut m.JGIBHFJMOBE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MDOHAFBEEPK::MDOHAFBEEPK>(
            "MEJDMJIKIMO",
            |m: &KLDMJEMIMCN| { &m.MEJDMJIKIMO },
            |m: &mut KLDMJEMIMCN| { &mut m.MEJDMJIKIMO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DANCCAOJLJN",
            |m: &KLDMJEMIMCN| { &m.DANCCAOJLJN },
            |m: &mut KLDMJEMIMCN| { &mut m.DANCCAOJLJN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KLDMJEMIMCN>(
            "KLDMJEMIMCN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KLDMJEMIMCN {
    const NAME: &'static str = "KLDMJEMIMCN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.HBANCCOKOFC)?;
                },
                64 => {
                    self.HBANCCOKOFC.push(is.read_uint32()?);
                },
                114 => {
                    self.CPKPINCCEIP.push(is.read_message()?);
                },
                16 => {
                    self.MCOKHHFPBPJ = is.read_uint64()?;
                },
                32 => {
                    self.HCBBHCKJNJI = is.read_int32()?;
                },
                96 => {
                    self.JGIBHFJMOBE = is.read_enum_or_unknown()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MEJDMJIKIMO)?;
                },
                40 => {
                    self.DANCCAOJLJN = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(8, &self.HBANCCOKOFC);
        for value in &self.CPKPINCCEIP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.MCOKHHFPBPJ != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.MCOKHHFPBPJ);
        }
        if self.HCBBHCKJNJI != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.HCBBHCKJNJI);
        }
        if self.JGIBHFJMOBE != ::protobuf::EnumOrUnknown::new(super::DGFCBOFAOIA::DGFCBOFAOIA::MATCH3_STATE_IDLE) {
            my_size += ::protobuf::rt::int32_size(12, self.JGIBHFJMOBE.value());
        }
        if let Some(v) = self.MEJDMJIKIMO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.DANCCAOJLJN != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.DANCCAOJLJN);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(8, &self.HBANCCOKOFC)?;
        for v in &self.CPKPINCCEIP {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        if self.MCOKHHFPBPJ != 0 {
            os.write_uint64(2, self.MCOKHHFPBPJ)?;
        }
        if self.HCBBHCKJNJI != 0 {
            os.write_int32(4, self.HCBBHCKJNJI)?;
        }
        if self.JGIBHFJMOBE != ::protobuf::EnumOrUnknown::new(super::DGFCBOFAOIA::DGFCBOFAOIA::MATCH3_STATE_IDLE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.JGIBHFJMOBE))?;
        }
        if let Some(v) = self.MEJDMJIKIMO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.DANCCAOJLJN != 0 {
            os.write_uint32(5, self.DANCCAOJLJN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KLDMJEMIMCN {
        KLDMJEMIMCN::new()
    }

    fn clear(&mut self) {
        self.HBANCCOKOFC.clear();
        self.CPKPINCCEIP.clear();
        self.MCOKHHFPBPJ = 0;
        self.HCBBHCKJNJI = 0;
        self.JGIBHFJMOBE = ::protobuf::EnumOrUnknown::new(super::DGFCBOFAOIA::DGFCBOFAOIA::MATCH3_STATE_IDLE);
        self.MEJDMJIKIMO.clear();
        self.DANCCAOJLJN = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KLDMJEMIMCN {
        static instance: KLDMJEMIMCN = KLDMJEMIMCN {
            HBANCCOKOFC: ::std::vec::Vec::new(),
            CPKPINCCEIP: ::std::vec::Vec::new(),
            MCOKHHFPBPJ: 0,
            HCBBHCKJNJI: 0,
            JGIBHFJMOBE: ::protobuf::EnumOrUnknown::from_i32(0),
            MEJDMJIKIMO: ::protobuf::MessageField::none(),
            DANCCAOJLJN: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KLDMJEMIMCN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KLDMJEMIMCN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KLDMJEMIMCN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KLDMJEMIMCN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11KLDMJEMIMCN.proto\x1a\x11DGFCBOFAOIA.proto\x1a\x11MDOHAFBEEPK.prot\
    o\x1a\x11MEKDNIKFDNA.proto\"\xa5\x02\n\x0bKLDMJEMIMCN\x12\x20\n\x0bHBANC\
    COKOFC\x18\x08\x20\x03(\rR\x0bHBANCCOKOFC\x12.\n\x0bCPKPINCCEIP\x18\x0e\
    \x20\x03(\x0b2\x0c.MEKDNIKFDNAR\x0bCPKPINCCEIP\x12\x20\n\x0bMCOKHHFPBPJ\
    \x18\x02\x20\x01(\x04R\x0bMCOKHHFPBPJ\x12\x20\n\x0bHCBBHCKJNJI\x18\x04\
    \x20\x01(\x05R\x0bHCBBHCKJNJI\x12.\n\x0bJGIBHFJMOBE\x18\x0c\x20\x01(\x0e\
    2\x0c.DGFCBOFAOIAR\x0bJGIBHFJMOBE\x12.\n\x0bMEJDMJIKIMO\x18\x0b\x20\x01(\
    \x0b2\x0c.MDOHAFBEEPKR\x0bMEJDMJIKIMO\x12\x20\n\x0bDANCCAOJLJN\x18\x05\
    \x20\x01(\rR\x0bDANCCAOJLJNb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::DGFCBOFAOIA::file_descriptor().clone());
            deps.push(super::MDOHAFBEEPK::file_descriptor().clone());
            deps.push(super::MEKDNIKFDNA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(KLDMJEMIMCN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
