// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JJIIANKENHO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:JJIIANKENHO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JJIIANKENHO {
    // message fields
    // @@protoc_insertion_point(field:JJIIANKENHO.EMCJNOFILKP)
    pub EMCJNOFILKP: u32,
    // message oneof groups
    pub CHCEFOPJHEP: ::std::option::Option<jjiiankenho::CHCEFOPJHEP>,
    // special fields
    // @@protoc_insertion_point(special_field:JJIIANKENHO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JJIIANKENHO {
    fn default() -> &'a JJIIANKENHO {
        <JJIIANKENHO as ::protobuf::Message>::default_instance()
    }
}

impl JJIIANKENHO {
    pub fn new() -> JJIIANKENHO {
        ::std::default::Default::default()
    }

    // .OONHCKKBHIE HDGBGOMEHGA = 12;

    pub fn HDGBGOMEHGA(&self) -> &super::OONHCKKBHIE::OONHCKKBHIE {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(ref v)) => v,
            _ => <super::OONHCKKBHIE::OONHCKKBHIE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HDGBGOMEHGA(&mut self) {
        self.CHCEFOPJHEP = ::std::option::Option::None;
    }

    pub fn has_HDGBGOMEHGA(&self) -> bool {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HDGBGOMEHGA(&mut self, v: super::OONHCKKBHIE::OONHCKKBHIE) {
        self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HDGBGOMEHGA(&mut self) -> &mut super::OONHCKKBHIE::OONHCKKBHIE {
        if let ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(_)) = self.CHCEFOPJHEP {
        } else {
            self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(super::OONHCKKBHIE::OONHCKKBHIE::new()));
        }
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HDGBGOMEHGA(&mut self) -> super::OONHCKKBHIE::OONHCKKBHIE {
        if self.has_HDGBGOMEHGA() {
            match self.CHCEFOPJHEP.take() {
                ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OONHCKKBHIE::OONHCKKBHIE::new()
        }
    }

    // .GPFGLIEDOIB HECGAGDMHEG = 11;

    pub fn HECGAGDMHEG(&self) -> &super::GPFGLIEDOIB::GPFGLIEDOIB {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(ref v)) => v,
            _ => <super::GPFGLIEDOIB::GPFGLIEDOIB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HECGAGDMHEG(&mut self) {
        self.CHCEFOPJHEP = ::std::option::Option::None;
    }

    pub fn has_HECGAGDMHEG(&self) -> bool {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HECGAGDMHEG(&mut self, v: super::GPFGLIEDOIB::GPFGLIEDOIB) {
        self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HECGAGDMHEG(&mut self) -> &mut super::GPFGLIEDOIB::GPFGLIEDOIB {
        if let ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(_)) = self.CHCEFOPJHEP {
        } else {
            self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(super::GPFGLIEDOIB::GPFGLIEDOIB::new()));
        }
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HECGAGDMHEG(&mut self) -> super::GPFGLIEDOIB::GPFGLIEDOIB {
        if self.has_HECGAGDMHEG() {
            match self.CHCEFOPJHEP.take() {
                ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GPFGLIEDOIB::GPFGLIEDOIB::new()
        }
    }

    // .LBCNNEJJKED EMFFGBBJMDM = 5;

    pub fn EMFFGBBJMDM(&self) -> &super::LBCNNEJJKED::LBCNNEJJKED {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(ref v)) => v,
            _ => <super::LBCNNEJJKED::LBCNNEJJKED as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EMFFGBBJMDM(&mut self) {
        self.CHCEFOPJHEP = ::std::option::Option::None;
    }

    pub fn has_EMFFGBBJMDM(&self) -> bool {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EMFFGBBJMDM(&mut self, v: super::LBCNNEJJKED::LBCNNEJJKED) {
        self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EMFFGBBJMDM(&mut self) -> &mut super::LBCNNEJJKED::LBCNNEJJKED {
        if let ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(_)) = self.CHCEFOPJHEP {
        } else {
            self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(super::LBCNNEJJKED::LBCNNEJJKED::new()));
        }
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EMFFGBBJMDM(&mut self) -> super::LBCNNEJJKED::LBCNNEJJKED {
        if self.has_EMFFGBBJMDM() {
            match self.CHCEFOPJHEP.take() {
                ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LBCNNEJJKED::LBCNNEJJKED::new()
        }
    }

    // .CGPGBDPNNDL JCNFOMENNHM = 14;

    pub fn JCNFOMENNHM(&self) -> &super::CGPGBDPNNDL::CGPGBDPNNDL {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(ref v)) => v,
            _ => <super::CGPGBDPNNDL::CGPGBDPNNDL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JCNFOMENNHM(&mut self) {
        self.CHCEFOPJHEP = ::std::option::Option::None;
    }

    pub fn has_JCNFOMENNHM(&self) -> bool {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JCNFOMENNHM(&mut self, v: super::CGPGBDPNNDL::CGPGBDPNNDL) {
        self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JCNFOMENNHM(&mut self) -> &mut super::CGPGBDPNNDL::CGPGBDPNNDL {
        if let ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(_)) = self.CHCEFOPJHEP {
        } else {
            self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(super::CGPGBDPNNDL::CGPGBDPNNDL::new()));
        }
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JCNFOMENNHM(&mut self) -> super::CGPGBDPNNDL::CGPGBDPNNDL {
        if self.has_JCNFOMENNHM() {
            match self.CHCEFOPJHEP.take() {
                ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGPGBDPNNDL::CGPGBDPNNDL::new()
        }
    }

    // .LIOFEPIOEDB AIDNOMLGEMH = 10;

    pub fn AIDNOMLGEMH(&self) -> &super::LIOFEPIOEDB::LIOFEPIOEDB {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(ref v)) => v,
            _ => <super::LIOFEPIOEDB::LIOFEPIOEDB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AIDNOMLGEMH(&mut self) {
        self.CHCEFOPJHEP = ::std::option::Option::None;
    }

    pub fn has_AIDNOMLGEMH(&self) -> bool {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AIDNOMLGEMH(&mut self, v: super::LIOFEPIOEDB::LIOFEPIOEDB) {
        self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AIDNOMLGEMH(&mut self) -> &mut super::LIOFEPIOEDB::LIOFEPIOEDB {
        if let ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(_)) = self.CHCEFOPJHEP {
        } else {
            self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(super::LIOFEPIOEDB::LIOFEPIOEDB::new()));
        }
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AIDNOMLGEMH(&mut self) -> super::LIOFEPIOEDB::LIOFEPIOEDB {
        if self.has_AIDNOMLGEMH() {
            match self.CHCEFOPJHEP.take() {
                ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LIOFEPIOEDB::LIOFEPIOEDB::new()
        }
    }

    // .MLJPDNBENDF HIMGOFACMCL = 1;

    pub fn HIMGOFACMCL(&self) -> &super::MLJPDNBENDF::MLJPDNBENDF {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(ref v)) => v,
            _ => <super::MLJPDNBENDF::MLJPDNBENDF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HIMGOFACMCL(&mut self) {
        self.CHCEFOPJHEP = ::std::option::Option::None;
    }

    pub fn has_HIMGOFACMCL(&self) -> bool {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HIMGOFACMCL(&mut self, v: super::MLJPDNBENDF::MLJPDNBENDF) {
        self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HIMGOFACMCL(&mut self) -> &mut super::MLJPDNBENDF::MLJPDNBENDF {
        if let ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(_)) = self.CHCEFOPJHEP {
        } else {
            self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(super::MLJPDNBENDF::MLJPDNBENDF::new()));
        }
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HIMGOFACMCL(&mut self) -> super::MLJPDNBENDF::MLJPDNBENDF {
        if self.has_HIMGOFACMCL() {
            match self.CHCEFOPJHEP.take() {
                ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MLJPDNBENDF::MLJPDNBENDF::new()
        }
    }

    // .HDEBCFJIHKA DBOAJOCEDJD = 13;

    pub fn DBOAJOCEDJD(&self) -> &super::HDEBCFJIHKA::HDEBCFJIHKA {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(ref v)) => v,
            _ => <super::HDEBCFJIHKA::HDEBCFJIHKA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DBOAJOCEDJD(&mut self) {
        self.CHCEFOPJHEP = ::std::option::Option::None;
    }

    pub fn has_DBOAJOCEDJD(&self) -> bool {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DBOAJOCEDJD(&mut self, v: super::HDEBCFJIHKA::HDEBCFJIHKA) {
        self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DBOAJOCEDJD(&mut self) -> &mut super::HDEBCFJIHKA::HDEBCFJIHKA {
        if let ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(_)) = self.CHCEFOPJHEP {
        } else {
            self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(super::HDEBCFJIHKA::HDEBCFJIHKA::new()));
        }
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DBOAJOCEDJD(&mut self) -> super::HDEBCFJIHKA::HDEBCFJIHKA {
        if self.has_DBOAJOCEDJD() {
            match self.CHCEFOPJHEP.take() {
                ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HDEBCFJIHKA::HDEBCFJIHKA::new()
        }
    }

    // bool GDBFCCOIPDC = 9;

    pub fn GDBFCCOIPDC(&self) -> bool {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::GDBFCCOIPDC(v)) => v,
            _ => false,
        }
    }

    pub fn clear_GDBFCCOIPDC(&mut self) {
        self.CHCEFOPJHEP = ::std::option::Option::None;
    }

    pub fn has_GDBFCCOIPDC(&self) -> bool {
        match self.CHCEFOPJHEP {
            ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::GDBFCCOIPDC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GDBFCCOIPDC(&mut self, v: bool) {
        self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::GDBFCCOIPDC(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EMCJNOFILKP",
            |m: &JJIIANKENHO| { &m.EMCJNOFILKP },
            |m: &mut JJIIANKENHO| { &mut m.EMCJNOFILKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OONHCKKBHIE::OONHCKKBHIE>(
            "HDGBGOMEHGA",
            JJIIANKENHO::has_HDGBGOMEHGA,
            JJIIANKENHO::HDGBGOMEHGA,
            JJIIANKENHO::mut_HDGBGOMEHGA,
            JJIIANKENHO::set_HDGBGOMEHGA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GPFGLIEDOIB::GPFGLIEDOIB>(
            "HECGAGDMHEG",
            JJIIANKENHO::has_HECGAGDMHEG,
            JJIIANKENHO::HECGAGDMHEG,
            JJIIANKENHO::mut_HECGAGDMHEG,
            JJIIANKENHO::set_HECGAGDMHEG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LBCNNEJJKED::LBCNNEJJKED>(
            "EMFFGBBJMDM",
            JJIIANKENHO::has_EMFFGBBJMDM,
            JJIIANKENHO::EMFFGBBJMDM,
            JJIIANKENHO::mut_EMFFGBBJMDM,
            JJIIANKENHO::set_EMFFGBBJMDM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGPGBDPNNDL::CGPGBDPNNDL>(
            "JCNFOMENNHM",
            JJIIANKENHO::has_JCNFOMENNHM,
            JJIIANKENHO::JCNFOMENNHM,
            JJIIANKENHO::mut_JCNFOMENNHM,
            JJIIANKENHO::set_JCNFOMENNHM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LIOFEPIOEDB::LIOFEPIOEDB>(
            "AIDNOMLGEMH",
            JJIIANKENHO::has_AIDNOMLGEMH,
            JJIIANKENHO::AIDNOMLGEMH,
            JJIIANKENHO::mut_AIDNOMLGEMH,
            JJIIANKENHO::set_AIDNOMLGEMH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MLJPDNBENDF::MLJPDNBENDF>(
            "HIMGOFACMCL",
            JJIIANKENHO::has_HIMGOFACMCL,
            JJIIANKENHO::HIMGOFACMCL,
            JJIIANKENHO::mut_HIMGOFACMCL,
            JJIIANKENHO::set_HIMGOFACMCL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HDEBCFJIHKA::HDEBCFJIHKA>(
            "DBOAJOCEDJD",
            JJIIANKENHO::has_DBOAJOCEDJD,
            JJIIANKENHO::DBOAJOCEDJD,
            JJIIANKENHO::mut_DBOAJOCEDJD,
            JJIIANKENHO::set_DBOAJOCEDJD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "GDBFCCOIPDC",
            JJIIANKENHO::has_GDBFCCOIPDC,
            JJIIANKENHO::GDBFCCOIPDC,
            JJIIANKENHO::set_GDBFCCOIPDC,
        ));
        oneofs.push(jjiiankenho::CHCEFOPJHEP::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JJIIANKENHO>(
            "JJIIANKENHO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JJIIANKENHO {
    const NAME: &'static str = "JJIIANKENHO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.EMCJNOFILKP = is.read_uint32()?;
                },
                98 => {
                    self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(is.read_message()?));
                },
                90 => {
                    self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(is.read_message()?));
                },
                42 => {
                    self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(is.read_message()?));
                },
                114 => {
                    self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(is.read_message()?));
                },
                82 => {
                    self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(is.read_message()?));
                },
                10 => {
                    self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(is.read_message()?));
                },
                106 => {
                    self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(is.read_message()?));
                },
                72 => {
                    self.CHCEFOPJHEP = ::std::option::Option::Some(jjiiankenho::CHCEFOPJHEP::GDBFCCOIPDC(is.read_bool()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.EMCJNOFILKP != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.EMCJNOFILKP);
        }
        if let ::std::option::Option::Some(ref v) = self.CHCEFOPJHEP {
            match v {
                &jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jjiiankenho::CHCEFOPJHEP::GDBFCCOIPDC(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.EMCJNOFILKP != 0 {
            os.write_uint32(6, self.EMCJNOFILKP)?;
        }
        if let ::std::option::Option::Some(ref v) = self.CHCEFOPJHEP {
            match v {
                &jjiiankenho::CHCEFOPJHEP::HDGBGOMEHGA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &jjiiankenho::CHCEFOPJHEP::HECGAGDMHEG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &jjiiankenho::CHCEFOPJHEP::EMFFGBBJMDM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &jjiiankenho::CHCEFOPJHEP::JCNFOMENNHM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &jjiiankenho::CHCEFOPJHEP::AIDNOMLGEMH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &jjiiankenho::CHCEFOPJHEP::HIMGOFACMCL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &jjiiankenho::CHCEFOPJHEP::DBOAJOCEDJD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &jjiiankenho::CHCEFOPJHEP::GDBFCCOIPDC(v) => {
                    os.write_bool(9, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JJIIANKENHO {
        JJIIANKENHO::new()
    }

    fn clear(&mut self) {
        self.EMCJNOFILKP = 0;
        self.CHCEFOPJHEP = ::std::option::Option::None;
        self.CHCEFOPJHEP = ::std::option::Option::None;
        self.CHCEFOPJHEP = ::std::option::Option::None;
        self.CHCEFOPJHEP = ::std::option::Option::None;
        self.CHCEFOPJHEP = ::std::option::Option::None;
        self.CHCEFOPJHEP = ::std::option::Option::None;
        self.CHCEFOPJHEP = ::std::option::Option::None;
        self.CHCEFOPJHEP = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JJIIANKENHO {
        static instance: JJIIANKENHO = JJIIANKENHO {
            EMCJNOFILKP: 0,
            CHCEFOPJHEP: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JJIIANKENHO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JJIIANKENHO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JJIIANKENHO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JJIIANKENHO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `JJIIANKENHO`
pub mod jjiiankenho {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:JJIIANKENHO.CHCEFOPJHEP)
    pub enum CHCEFOPJHEP {
        // @@protoc_insertion_point(oneof_field:JJIIANKENHO.HDGBGOMEHGA)
        HDGBGOMEHGA(super::super::OONHCKKBHIE::OONHCKKBHIE),
        // @@protoc_insertion_point(oneof_field:JJIIANKENHO.HECGAGDMHEG)
        HECGAGDMHEG(super::super::GPFGLIEDOIB::GPFGLIEDOIB),
        // @@protoc_insertion_point(oneof_field:JJIIANKENHO.EMFFGBBJMDM)
        EMFFGBBJMDM(super::super::LBCNNEJJKED::LBCNNEJJKED),
        // @@protoc_insertion_point(oneof_field:JJIIANKENHO.JCNFOMENNHM)
        JCNFOMENNHM(super::super::CGPGBDPNNDL::CGPGBDPNNDL),
        // @@protoc_insertion_point(oneof_field:JJIIANKENHO.AIDNOMLGEMH)
        AIDNOMLGEMH(super::super::LIOFEPIOEDB::LIOFEPIOEDB),
        // @@protoc_insertion_point(oneof_field:JJIIANKENHO.HIMGOFACMCL)
        HIMGOFACMCL(super::super::MLJPDNBENDF::MLJPDNBENDF),
        // @@protoc_insertion_point(oneof_field:JJIIANKENHO.DBOAJOCEDJD)
        DBOAJOCEDJD(super::super::HDEBCFJIHKA::HDEBCFJIHKA),
        // @@protoc_insertion_point(oneof_field:JJIIANKENHO.GDBFCCOIPDC)
        GDBFCCOIPDC(bool),
    }

    impl ::protobuf::Oneof for CHCEFOPJHEP {
    }

    impl ::protobuf::OneofFull for CHCEFOPJHEP {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::JJIIANKENHO as ::protobuf::MessageFull>::descriptor().oneof_by_name("CHCEFOPJHEP").unwrap()).clone()
        }
    }

    impl CHCEFOPJHEP {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<CHCEFOPJHEP>("CHCEFOPJHEP")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JJIIANKENHO.proto\x1a\x11CGPGBDPNNDL.proto\x1a\x11GPFGLIEDOIB.prot\
    o\x1a\x11HDEBCFJIHKA.proto\x1a\x11LBCNNEJJKED.proto\x1a\x11LIOFEPIOEDB.p\
    roto\x1a\x11MLJPDNBENDF.proto\x1a\x11OONHCKKBHIE.proto\"\xc0\x03\n\x0bJJ\
    IIANKENHO\x12\x20\n\x0bEMCJNOFILKP\x18\x06\x20\x01(\rR\x0bEMCJNOFILKP\
    \x120\n\x0bHDGBGOMEHGA\x18\x0c\x20\x01(\x0b2\x0c.OONHCKKBHIEH\0R\x0bHDGB\
    GOMEHGA\x120\n\x0bHECGAGDMHEG\x18\x0b\x20\x01(\x0b2\x0c.GPFGLIEDOIBH\0R\
    \x0bHECGAGDMHEG\x120\n\x0bEMFFGBBJMDM\x18\x05\x20\x01(\x0b2\x0c.LBCNNEJJ\
    KEDH\0R\x0bEMFFGBBJMDM\x120\n\x0bJCNFOMENNHM\x18\x0e\x20\x01(\x0b2\x0c.C\
    GPGBDPNNDLH\0R\x0bJCNFOMENNHM\x120\n\x0bAIDNOMLGEMH\x18\n\x20\x01(\x0b2\
    \x0c.LIOFEPIOEDBH\0R\x0bAIDNOMLGEMH\x120\n\x0bHIMGOFACMCL\x18\x01\x20\
    \x01(\x0b2\x0c.MLJPDNBENDFH\0R\x0bHIMGOFACMCL\x120\n\x0bDBOAJOCEDJD\x18\
    \r\x20\x01(\x0b2\x0c.HDEBCFJIHKAH\0R\x0bDBOAJOCEDJD\x12\"\n\x0bGDBFCCOIP\
    DC\x18\t\x20\x01(\x08H\0R\x0bGDBFCCOIPDCB\r\n\x0bCHCEFOPJHEPb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::CGPGBDPNNDL::file_descriptor().clone());
            deps.push(super::GPFGLIEDOIB::file_descriptor().clone());
            deps.push(super::HDEBCFJIHKA::file_descriptor().clone());
            deps.push(super::LBCNNEJJKED::file_descriptor().clone());
            deps.push(super::LIOFEPIOEDB::file_descriptor().clone());
            deps.push(super::MLJPDNBENDF::file_descriptor().clone());
            deps.push(super::OONHCKKBHIE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JJIIANKENHO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
