// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JAAMBOGEIME.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:JAAMBOGEIME)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JAAMBOGEIME {
    // message fields
    // @@protoc_insertion_point(field:JAAMBOGEIME.FDGGIKKGMPO)
    pub FDGGIKKGMPO: ::std::vec::Vec<super::CDFKDHOELNP::CDFKDHOELNP>,
    // @@protoc_insertion_point(field:JAAMBOGEIME.HLPCGIFLIIO)
    pub HLPCGIFLIIO: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:JAAMBOGEIME.FMFIMBFABMP)
    pub FMFIMBFABMP: ::std::vec::Vec<super::PEIMONAIOEH::PEIMONAIOEH>,
    // @@protoc_insertion_point(field:JAAMBOGEIME.PMCIJKIINJL)
    pub PMCIJKIINJL: u32,
    // @@protoc_insertion_point(field:JAAMBOGEIME.INMBFKKDMCD)
    pub INMBFKKDMCD: ::std::vec::Vec<super::HDEOIPBHBGJ::HDEOIPBHBGJ>,
    // @@protoc_insertion_point(field:JAAMBOGEIME.GIMJLNFBGIH)
    pub GIMJLNFBGIH: u32,
    // @@protoc_insertion_point(field:JAAMBOGEIME.HBCAFGHLIOP)
    pub HBCAFGHLIOP: u32,
    // @@protoc_insertion_point(field:JAAMBOGEIME.CMJMGMEFAPO)
    pub CMJMGMEFAPO: u32,
    // @@protoc_insertion_point(field:JAAMBOGEIME.LOADEBCDKEA)
    pub LOADEBCDKEA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:JAAMBOGEIME.ADADHIHDHJC)
    pub ADADHIHDHJC: u32,
    // @@protoc_insertion_point(field:JAAMBOGEIME.DBLNKHDMFNI)
    pub DBLNKHDMFNI: ::std::collections::HashMap<::std::string::String, i32>,
    // @@protoc_insertion_point(field:JAAMBOGEIME.BBLGKACGAOB)
    pub BBLGKACGAOB: u32,
    // @@protoc_insertion_point(field:JAAMBOGEIME.IIFKPKFLODK)
    pub IIFKPKFLODK: ::std::vec::Vec<super::KFLBEBBNJEM::KFLBEBBNJEM>,
    // special fields
    // @@protoc_insertion_point(special_field:JAAMBOGEIME.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JAAMBOGEIME {
    fn default() -> &'a JAAMBOGEIME {
        <JAAMBOGEIME as ::protobuf::Message>::default_instance()
    }
}

impl JAAMBOGEIME {
    pub fn new() -> JAAMBOGEIME {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FDGGIKKGMPO",
            |m: &JAAMBOGEIME| { &m.FDGGIKKGMPO },
            |m: &mut JAAMBOGEIME| { &mut m.FDGGIKKGMPO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HLPCGIFLIIO",
            |m: &JAAMBOGEIME| { &m.HLPCGIFLIIO },
            |m: &mut JAAMBOGEIME| { &mut m.HLPCGIFLIIO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FMFIMBFABMP",
            |m: &JAAMBOGEIME| { &m.FMFIMBFABMP },
            |m: &mut JAAMBOGEIME| { &mut m.FMFIMBFABMP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PMCIJKIINJL",
            |m: &JAAMBOGEIME| { &m.PMCIJKIINJL },
            |m: &mut JAAMBOGEIME| { &mut m.PMCIJKIINJL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "INMBFKKDMCD",
            |m: &JAAMBOGEIME| { &m.INMBFKKDMCD },
            |m: &mut JAAMBOGEIME| { &mut m.INMBFKKDMCD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GIMJLNFBGIH",
            |m: &JAAMBOGEIME| { &m.GIMJLNFBGIH },
            |m: &mut JAAMBOGEIME| { &mut m.GIMJLNFBGIH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HBCAFGHLIOP",
            |m: &JAAMBOGEIME| { &m.HBCAFGHLIOP },
            |m: &mut JAAMBOGEIME| { &mut m.HBCAFGHLIOP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMJMGMEFAPO",
            |m: &JAAMBOGEIME| { &m.CMJMGMEFAPO },
            |m: &mut JAAMBOGEIME| { &mut m.CMJMGMEFAPO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LOADEBCDKEA",
            |m: &JAAMBOGEIME| { &m.LOADEBCDKEA },
            |m: &mut JAAMBOGEIME| { &mut m.LOADEBCDKEA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADADHIHDHJC",
            |m: &JAAMBOGEIME| { &m.ADADHIHDHJC },
            |m: &mut JAAMBOGEIME| { &mut m.ADADHIHDHJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "DBLNKHDMFNI",
            |m: &JAAMBOGEIME| { &m.DBLNKHDMFNI },
            |m: &mut JAAMBOGEIME| { &mut m.DBLNKHDMFNI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BBLGKACGAOB",
            |m: &JAAMBOGEIME| { &m.BBLGKACGAOB },
            |m: &mut JAAMBOGEIME| { &mut m.BBLGKACGAOB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IIFKPKFLODK",
            |m: &JAAMBOGEIME| { &m.IIFKPKFLODK },
            |m: &mut JAAMBOGEIME| { &mut m.IIFKPKFLODK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JAAMBOGEIME>(
            "JAAMBOGEIME",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JAAMBOGEIME {
    const NAME: &'static str = "JAAMBOGEIME";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.FDGGIKKGMPO.push(is.read_message()?);
                },
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.HLPCGIFLIIO)?;
                },
                112 => {
                    self.HLPCGIFLIIO.push(is.read_uint32()?);
                },
                18 => {
                    self.FMFIMBFABMP.push(is.read_message()?);
                },
                40 => {
                    self.PMCIJKIINJL = is.read_uint32()?;
                },
                90 => {
                    self.INMBFKKDMCD.push(is.read_message()?);
                },
                64 => {
                    self.GIMJLNFBGIH = is.read_uint32()?;
                },
                56 => {
                    self.HBCAFGHLIOP = is.read_uint32()?;
                },
                80 => {
                    self.CMJMGMEFAPO = is.read_uint32()?;
                },
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.LOADEBCDKEA)?;
                },
                8 => {
                    self.LOADEBCDKEA.push(is.read_uint32()?);
                },
                32 => {
                    self.ADADHIHDHJC = is.read_uint32()?;
                },
                98 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.DBLNKHDMFNI.insert(key, value);
                },
                104 => {
                    self.BBLGKACGAOB = is.read_uint32()?;
                },
                74 => {
                    self.IIFKPKFLODK.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.FDGGIKKGMPO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.HLPCGIFLIIO {
            my_size += ::protobuf::rt::uint32_size(14, *value);
        };
        for value in &self.FMFIMBFABMP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.PMCIJKIINJL != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.PMCIJKIINJL);
        }
        for value in &self.INMBFKKDMCD {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.GIMJLNFBGIH != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.GIMJLNFBGIH);
        }
        if self.HBCAFGHLIOP != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.HBCAFGHLIOP);
        }
        if self.CMJMGMEFAPO != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.CMJMGMEFAPO);
        }
        for value in &self.LOADEBCDKEA {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if self.ADADHIHDHJC != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.ADADHIHDHJC);
        }
        for (k, v) in &self.DBLNKHDMFNI {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.BBLGKACGAOB != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.BBLGKACGAOB);
        }
        for value in &self.IIFKPKFLODK {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.FDGGIKKGMPO {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.HLPCGIFLIIO {
            os.write_uint32(14, *v)?;
        };
        for v in &self.FMFIMBFABMP {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.PMCIJKIINJL != 0 {
            os.write_uint32(5, self.PMCIJKIINJL)?;
        }
        for v in &self.INMBFKKDMCD {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if self.GIMJLNFBGIH != 0 {
            os.write_uint32(8, self.GIMJLNFBGIH)?;
        }
        if self.HBCAFGHLIOP != 0 {
            os.write_uint32(7, self.HBCAFGHLIOP)?;
        }
        if self.CMJMGMEFAPO != 0 {
            os.write_uint32(10, self.CMJMGMEFAPO)?;
        }
        for v in &self.LOADEBCDKEA {
            os.write_uint32(1, *v)?;
        };
        if self.ADADHIHDHJC != 0 {
            os.write_uint32(4, self.ADADHIHDHJC)?;
        }
        for (k, v) in &self.DBLNKHDMFNI {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(98)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_int32(2, *v)?;
        };
        if self.BBLGKACGAOB != 0 {
            os.write_uint32(13, self.BBLGKACGAOB)?;
        }
        for v in &self.IIFKPKFLODK {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JAAMBOGEIME {
        JAAMBOGEIME::new()
    }

    fn clear(&mut self) {
        self.FDGGIKKGMPO.clear();
        self.HLPCGIFLIIO.clear();
        self.FMFIMBFABMP.clear();
        self.PMCIJKIINJL = 0;
        self.INMBFKKDMCD.clear();
        self.GIMJLNFBGIH = 0;
        self.HBCAFGHLIOP = 0;
        self.CMJMGMEFAPO = 0;
        self.LOADEBCDKEA.clear();
        self.ADADHIHDHJC = 0;
        self.DBLNKHDMFNI.clear();
        self.BBLGKACGAOB = 0;
        self.IIFKPKFLODK.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JAAMBOGEIME {
        static instance: ::protobuf::rt::Lazy<JAAMBOGEIME> = ::protobuf::rt::Lazy::new();
        instance.get(JAAMBOGEIME::new)
    }
}

impl ::protobuf::MessageFull for JAAMBOGEIME {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JAAMBOGEIME").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JAAMBOGEIME {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JAAMBOGEIME {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JAAMBOGEIME.proto\x1a\x11CDFKDHOELNP.proto\x1a\x11HDEOIPBHBGJ.prot\
    o\x1a\x11KFLBEBBNJEM.proto\x1a\x11PEIMONAIOEH.proto\"\xde\x04\n\x0bJAAMB\
    OGEIME\x12.\n\x0bFDGGIKKGMPO\x18\x06\x20\x03(\x0b2\x0c.CDFKDHOELNPR\x0bF\
    DGGIKKGMPO\x12\x20\n\x0bHLPCGIFLIIO\x18\x0e\x20\x03(\rR\x0bHLPCGIFLIIO\
    \x12.\n\x0bFMFIMBFABMP\x18\x02\x20\x03(\x0b2\x0c.PEIMONAIOEHR\x0bFMFIMBF\
    ABMP\x12\x20\n\x0bPMCIJKIINJL\x18\x05\x20\x01(\rR\x0bPMCIJKIINJL\x12.\n\
    \x0bINMBFKKDMCD\x18\x0b\x20\x03(\x0b2\x0c.HDEOIPBHBGJR\x0bINMBFKKDMCD\
    \x12\x20\n\x0bGIMJLNFBGIH\x18\x08\x20\x01(\rR\x0bGIMJLNFBGIH\x12\x20\n\
    \x0bHBCAFGHLIOP\x18\x07\x20\x01(\rR\x0bHBCAFGHLIOP\x12\x20\n\x0bCMJMGMEF\
    APO\x18\n\x20\x01(\rR\x0bCMJMGMEFAPO\x12\x20\n\x0bLOADEBCDKEA\x18\x01\
    \x20\x03(\rR\x0bLOADEBCDKEA\x12\x20\n\x0bADADHIHDHJC\x18\x04\x20\x01(\rR\
    \x0bADADHIHDHJC\x12?\n\x0bDBLNKHDMFNI\x18\x0c\x20\x03(\x0b2\x1d.JAAMBOGE\
    IME.DBLNKHDMFNIEntryR\x0bDBLNKHDMFNI\x12\x20\n\x0bBBLGKACGAOB\x18\r\x20\
    \x01(\rR\x0bBBLGKACGAOB\x12.\n\x0bIIFKPKFLODK\x18\t\x20\x03(\x0b2\x0c.KF\
    LBEBBNJEMR\x0bIIFKPKFLODK\x1a>\n\x10DBLNKHDMFNIEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x05R\x05\
    value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::CDFKDHOELNP::file_descriptor().clone());
            deps.push(super::HDEOIPBHBGJ::file_descriptor().clone());
            deps.push(super::KFLBEBBNJEM::file_descriptor().clone());
            deps.push(super::PEIMONAIOEH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JAAMBOGEIME::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
