// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CKMHLMLLEHD_OHJAIJKAADK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CKMHLMLLEHD)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CKMHLMLLEHD {
    // message fields
    // @@protoc_insertion_point(field:CKMHLMLLEHD.LMIELHPBBEC)
    pub LMIELHPBBEC: ::std::vec::Vec<OHJAIJKAADK>,
    // @@protoc_insertion_point(field:CKMHLMLLEHD.CAKAEMFCKFL)
    pub CAKAEMFCKFL: u32,
    // special fields
    // @@protoc_insertion_point(special_field:CKMHLMLLEHD.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CKMHLMLLEHD {
    fn default() -> &'a CKMHLMLLEHD {
        <CKMHLMLLEHD as ::protobuf::Message>::default_instance()
    }
}

impl CKMHLMLLEHD {
    pub fn new() -> CKMHLMLLEHD {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LMIELHPBBEC",
            |m: &CKMHLMLLEHD| { &m.LMIELHPBBEC },
            |m: &mut CKMHLMLLEHD| { &mut m.LMIELHPBBEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CAKAEMFCKFL",
            |m: &CKMHLMLLEHD| { &m.CAKAEMFCKFL },
            |m: &mut CKMHLMLLEHD| { &mut m.CAKAEMFCKFL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CKMHLMLLEHD>(
            "CKMHLMLLEHD",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CKMHLMLLEHD {
    const NAME: &'static str = "CKMHLMLLEHD";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    self.LMIELHPBBEC.push(is.read_message()?);
                },
                64 => {
                    self.CAKAEMFCKFL = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.LMIELHPBBEC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CAKAEMFCKFL != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.CAKAEMFCKFL);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.LMIELHPBBEC {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.CAKAEMFCKFL != 0 {
            os.write_uint32(8, self.CAKAEMFCKFL)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CKMHLMLLEHD {
        CKMHLMLLEHD::new()
    }

    fn clear(&mut self) {
        self.LMIELHPBBEC.clear();
        self.CAKAEMFCKFL = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CKMHLMLLEHD {
        static instance: CKMHLMLLEHD = CKMHLMLLEHD {
            LMIELHPBBEC: ::std::vec::Vec::new(),
            CAKAEMFCKFL: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CKMHLMLLEHD {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CKMHLMLLEHD").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CKMHLMLLEHD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CKMHLMLLEHD {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:OHJAIJKAADK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OHJAIJKAADK {
    // message fields
    // @@protoc_insertion_point(field:OHJAIJKAADK.ONKCHDEMOCF)
    pub ONKCHDEMOCF: u32,
    // message oneof groups
    pub GHEIBKDHLPJ: ::std::option::Option<ohjaijkaadk::GHEIBKDHLPJ>,
    // special fields
    // @@protoc_insertion_point(special_field:OHJAIJKAADK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OHJAIJKAADK {
    fn default() -> &'a OHJAIJKAADK {
        <OHJAIJKAADK as ::protobuf::Message>::default_instance()
    }
}

impl OHJAIJKAADK {
    pub fn new() -> OHJAIJKAADK {
        ::std::default::Default::default()
    }

    // .MNMKMPMMOGN AMGPPOOFHLL = 6;

    pub fn AMGPPOOFHLL(&self) -> &super::MNMKMPMMOGN::MNMKMPMMOGN {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(ref v)) => v,
            _ => <super::MNMKMPMMOGN::MNMKMPMMOGN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AMGPPOOFHLL(&mut self) {
        self.GHEIBKDHLPJ = ::std::option::Option::None;
    }

    pub fn has_AMGPPOOFHLL(&self) -> bool {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AMGPPOOFHLL(&mut self, v: super::MNMKMPMMOGN::MNMKMPMMOGN) {
        self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AMGPPOOFHLL(&mut self) -> &mut super::MNMKMPMMOGN::MNMKMPMMOGN {
        if let ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(_)) = self.GHEIBKDHLPJ {
        } else {
            self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(super::MNMKMPMMOGN::MNMKMPMMOGN::new()));
        }
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AMGPPOOFHLL(&mut self) -> super::MNMKMPMMOGN::MNMKMPMMOGN {
        if self.has_AMGPPOOFHLL() {
            match self.GHEIBKDHLPJ.take() {
                ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MNMKMPMMOGN::MNMKMPMMOGN::new()
        }
    }

    // .HCAFGMCIGIH NHELBAHFOIH = 12;

    pub fn NHELBAHFOIH(&self) -> &super::HCAFGMCIGIH::HCAFGMCIGIH {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(ref v)) => v,
            _ => <super::HCAFGMCIGIH::HCAFGMCIGIH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NHELBAHFOIH(&mut self) {
        self.GHEIBKDHLPJ = ::std::option::Option::None;
    }

    pub fn has_NHELBAHFOIH(&self) -> bool {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NHELBAHFOIH(&mut self, v: super::HCAFGMCIGIH::HCAFGMCIGIH) {
        self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NHELBAHFOIH(&mut self) -> &mut super::HCAFGMCIGIH::HCAFGMCIGIH {
        if let ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(_)) = self.GHEIBKDHLPJ {
        } else {
            self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(super::HCAFGMCIGIH::HCAFGMCIGIH::new()));
        }
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NHELBAHFOIH(&mut self) -> super::HCAFGMCIGIH::HCAFGMCIGIH {
        if self.has_NHELBAHFOIH() {
            match self.GHEIBKDHLPJ.take() {
                ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HCAFGMCIGIH::HCAFGMCIGIH::new()
        }
    }

    // .MAGHEDPCPOA FIHPGEEHMMB = 3;

    pub fn FIHPGEEHMMB(&self) -> &super::MAGHEDPCPOA::MAGHEDPCPOA {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(ref v)) => v,
            _ => <super::MAGHEDPCPOA::MAGHEDPCPOA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FIHPGEEHMMB(&mut self) {
        self.GHEIBKDHLPJ = ::std::option::Option::None;
    }

    pub fn has_FIHPGEEHMMB(&self) -> bool {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FIHPGEEHMMB(&mut self, v: super::MAGHEDPCPOA::MAGHEDPCPOA) {
        self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FIHPGEEHMMB(&mut self) -> &mut super::MAGHEDPCPOA::MAGHEDPCPOA {
        if let ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(_)) = self.GHEIBKDHLPJ {
        } else {
            self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(super::MAGHEDPCPOA::MAGHEDPCPOA::new()));
        }
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FIHPGEEHMMB(&mut self) -> super::MAGHEDPCPOA::MAGHEDPCPOA {
        if self.has_FIHPGEEHMMB() {
            match self.GHEIBKDHLPJ.take() {
                ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MAGHEDPCPOA::MAGHEDPCPOA::new()
        }
    }

    // .NNGOCPDILNC LOJCCIEIFPC = 2;

    pub fn LOJCCIEIFPC(&self) -> &super::NNGOCPDILNC::NNGOCPDILNC {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(ref v)) => v,
            _ => <super::NNGOCPDILNC::NNGOCPDILNC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LOJCCIEIFPC(&mut self) {
        self.GHEIBKDHLPJ = ::std::option::Option::None;
    }

    pub fn has_LOJCCIEIFPC(&self) -> bool {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LOJCCIEIFPC(&mut self, v: super::NNGOCPDILNC::NNGOCPDILNC) {
        self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LOJCCIEIFPC(&mut self) -> &mut super::NNGOCPDILNC::NNGOCPDILNC {
        if let ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(_)) = self.GHEIBKDHLPJ {
        } else {
            self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(super::NNGOCPDILNC::NNGOCPDILNC::new()));
        }
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LOJCCIEIFPC(&mut self) -> super::NNGOCPDILNC::NNGOCPDILNC {
        if self.has_LOJCCIEIFPC() {
            match self.GHEIBKDHLPJ.take() {
                ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NNGOCPDILNC::NNGOCPDILNC::new()
        }
    }

    // .GLGFGCLNIIL JLCFPKEHLJD = 13;

    pub fn JLCFPKEHLJD(&self) -> &super::GLGFGCLNIIL::GLGFGCLNIIL {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(ref v)) => v,
            _ => <super::GLGFGCLNIIL::GLGFGCLNIIL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JLCFPKEHLJD(&mut self) {
        self.GHEIBKDHLPJ = ::std::option::Option::None;
    }

    pub fn has_JLCFPKEHLJD(&self) -> bool {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JLCFPKEHLJD(&mut self, v: super::GLGFGCLNIIL::GLGFGCLNIIL) {
        self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JLCFPKEHLJD(&mut self) -> &mut super::GLGFGCLNIIL::GLGFGCLNIIL {
        if let ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(_)) = self.GHEIBKDHLPJ {
        } else {
            self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(super::GLGFGCLNIIL::GLGFGCLNIIL::new()));
        }
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JLCFPKEHLJD(&mut self) -> super::GLGFGCLNIIL::GLGFGCLNIIL {
        if self.has_JLCFPKEHLJD() {
            match self.GHEIBKDHLPJ.take() {
                ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GLGFGCLNIIL::GLGFGCLNIIL::new()
        }
    }

    // .DDKJLLPJNOB DCFNCDEIEOM = 10;

    pub fn DCFNCDEIEOM(&self) -> &super::DDKJLLPJNOB::DDKJLLPJNOB {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(ref v)) => v,
            _ => <super::DDKJLLPJNOB::DDKJLLPJNOB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DCFNCDEIEOM(&mut self) {
        self.GHEIBKDHLPJ = ::std::option::Option::None;
    }

    pub fn has_DCFNCDEIEOM(&self) -> bool {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DCFNCDEIEOM(&mut self, v: super::DDKJLLPJNOB::DDKJLLPJNOB) {
        self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DCFNCDEIEOM(&mut self) -> &mut super::DDKJLLPJNOB::DDKJLLPJNOB {
        if let ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(_)) = self.GHEIBKDHLPJ {
        } else {
            self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(super::DDKJLLPJNOB::DDKJLLPJNOB::new()));
        }
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DCFNCDEIEOM(&mut self) -> super::DDKJLLPJNOB::DDKJLLPJNOB {
        if self.has_DCFNCDEIEOM() {
            match self.GHEIBKDHLPJ.take() {
                ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DDKJLLPJNOB::DDKJLLPJNOB::new()
        }
    }

    // .MEMIECBAAJA PUNK_LORD_SHARE_TYPE_FRIEND = 1;

    pub fn PUNK_LORD_SHARE_TYPE_FRIEND(&self) -> &super::MEMIECBAAJA::MEMIECBAAJA {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(ref v)) => v,
            _ => <super::MEMIECBAAJA::MEMIECBAAJA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PUNK_LORD_SHARE_TYPE_FRIEND(&mut self) {
        self.GHEIBKDHLPJ = ::std::option::Option::None;
    }

    pub fn has_PUNK_LORD_SHARE_TYPE_FRIEND(&self) -> bool {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PUNK_LORD_SHARE_TYPE_FRIEND(&mut self, v: super::MEMIECBAAJA::MEMIECBAAJA) {
        self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PUNK_LORD_SHARE_TYPE_FRIEND(&mut self) -> &mut super::MEMIECBAAJA::MEMIECBAAJA {
        if let ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(_)) = self.GHEIBKDHLPJ {
        } else {
            self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(super::MEMIECBAAJA::MEMIECBAAJA::new()));
        }
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PUNK_LORD_SHARE_TYPE_FRIEND(&mut self) -> super::MEMIECBAAJA::MEMIECBAAJA {
        if self.has_PUNK_LORD_SHARE_TYPE_FRIEND() {
            match self.GHEIBKDHLPJ.take() {
                ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MEMIECBAAJA::MEMIECBAAJA::new()
        }
    }

    // .DJMOGJKNMPK FLOPGKPHEOP = 15;

    pub fn FLOPGKPHEOP(&self) -> &super::DJMOGJKNMPK::DJMOGJKNMPK {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(ref v)) => v,
            _ => <super::DJMOGJKNMPK::DJMOGJKNMPK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FLOPGKPHEOP(&mut self) {
        self.GHEIBKDHLPJ = ::std::option::Option::None;
    }

    pub fn has_FLOPGKPHEOP(&self) -> bool {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FLOPGKPHEOP(&mut self, v: super::DJMOGJKNMPK::DJMOGJKNMPK) {
        self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FLOPGKPHEOP(&mut self) -> &mut super::DJMOGJKNMPK::DJMOGJKNMPK {
        if let ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(_)) = self.GHEIBKDHLPJ {
        } else {
            self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(super::DJMOGJKNMPK::DJMOGJKNMPK::new()));
        }
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FLOPGKPHEOP(&mut self) -> super::DJMOGJKNMPK::DJMOGJKNMPK {
        if self.has_FLOPGKPHEOP() {
            match self.GHEIBKDHLPJ.take() {
                ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DJMOGJKNMPK::DJMOGJKNMPK::new()
        }
    }

    // .CKMHLMLLEHD HKOFFLPCLOG = 7;

    pub fn HKOFFLPCLOG(&self) -> &CKMHLMLLEHD {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(ref v)) => v,
            _ => <CKMHLMLLEHD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HKOFFLPCLOG(&mut self) {
        self.GHEIBKDHLPJ = ::std::option::Option::None;
    }

    pub fn has_HKOFFLPCLOG(&self) -> bool {
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HKOFFLPCLOG(&mut self, v: CKMHLMLLEHD) {
        self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HKOFFLPCLOG(&mut self) -> &mut CKMHLMLLEHD {
        if let ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(_)) = self.GHEIBKDHLPJ {
        } else {
            self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(CKMHLMLLEHD::new()));
        }
        match self.GHEIBKDHLPJ {
            ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HKOFFLPCLOG(&mut self) -> CKMHLMLLEHD {
        if self.has_HKOFFLPCLOG() {
            match self.GHEIBKDHLPJ.take() {
                ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(v)) => v,
                _ => panic!(),
            }
        } else {
            CKMHLMLLEHD::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ONKCHDEMOCF",
            |m: &OHJAIJKAADK| { &m.ONKCHDEMOCF },
            |m: &mut OHJAIJKAADK| { &mut m.ONKCHDEMOCF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MNMKMPMMOGN::MNMKMPMMOGN>(
            "AMGPPOOFHLL",
            OHJAIJKAADK::has_AMGPPOOFHLL,
            OHJAIJKAADK::AMGPPOOFHLL,
            OHJAIJKAADK::mut_AMGPPOOFHLL,
            OHJAIJKAADK::set_AMGPPOOFHLL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HCAFGMCIGIH::HCAFGMCIGIH>(
            "NHELBAHFOIH",
            OHJAIJKAADK::has_NHELBAHFOIH,
            OHJAIJKAADK::NHELBAHFOIH,
            OHJAIJKAADK::mut_NHELBAHFOIH,
            OHJAIJKAADK::set_NHELBAHFOIH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MAGHEDPCPOA::MAGHEDPCPOA>(
            "FIHPGEEHMMB",
            OHJAIJKAADK::has_FIHPGEEHMMB,
            OHJAIJKAADK::FIHPGEEHMMB,
            OHJAIJKAADK::mut_FIHPGEEHMMB,
            OHJAIJKAADK::set_FIHPGEEHMMB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NNGOCPDILNC::NNGOCPDILNC>(
            "LOJCCIEIFPC",
            OHJAIJKAADK::has_LOJCCIEIFPC,
            OHJAIJKAADK::LOJCCIEIFPC,
            OHJAIJKAADK::mut_LOJCCIEIFPC,
            OHJAIJKAADK::set_LOJCCIEIFPC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GLGFGCLNIIL::GLGFGCLNIIL>(
            "JLCFPKEHLJD",
            OHJAIJKAADK::has_JLCFPKEHLJD,
            OHJAIJKAADK::JLCFPKEHLJD,
            OHJAIJKAADK::mut_JLCFPKEHLJD,
            OHJAIJKAADK::set_JLCFPKEHLJD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DDKJLLPJNOB::DDKJLLPJNOB>(
            "DCFNCDEIEOM",
            OHJAIJKAADK::has_DCFNCDEIEOM,
            OHJAIJKAADK::DCFNCDEIEOM,
            OHJAIJKAADK::mut_DCFNCDEIEOM,
            OHJAIJKAADK::set_DCFNCDEIEOM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MEMIECBAAJA::MEMIECBAAJA>(
            "PUNK_LORD_SHARE_TYPE_FRIEND",
            OHJAIJKAADK::has_PUNK_LORD_SHARE_TYPE_FRIEND,
            OHJAIJKAADK::PUNK_LORD_SHARE_TYPE_FRIEND,
            OHJAIJKAADK::mut_PUNK_LORD_SHARE_TYPE_FRIEND,
            OHJAIJKAADK::set_PUNK_LORD_SHARE_TYPE_FRIEND,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DJMOGJKNMPK::DJMOGJKNMPK>(
            "FLOPGKPHEOP",
            OHJAIJKAADK::has_FLOPGKPHEOP,
            OHJAIJKAADK::FLOPGKPHEOP,
            OHJAIJKAADK::mut_FLOPGKPHEOP,
            OHJAIJKAADK::set_FLOPGKPHEOP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CKMHLMLLEHD>(
            "HKOFFLPCLOG",
            OHJAIJKAADK::has_HKOFFLPCLOG,
            OHJAIJKAADK::HKOFFLPCLOG,
            OHJAIJKAADK::mut_HKOFFLPCLOG,
            OHJAIJKAADK::set_HKOFFLPCLOG,
        ));
        oneofs.push(ohjaijkaadk::GHEIBKDHLPJ::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OHJAIJKAADK>(
            "OHJAIJKAADK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OHJAIJKAADK {
    const NAME: &'static str = "OHJAIJKAADK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.ONKCHDEMOCF = is.read_uint32()?;
                },
                50 => {
                    self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(is.read_message()?));
                },
                98 => {
                    self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(is.read_message()?));
                },
                26 => {
                    self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(is.read_message()?));
                },
                18 => {
                    self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(is.read_message()?));
                },
                106 => {
                    self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(is.read_message()?));
                },
                82 => {
                    self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(is.read_message()?));
                },
                10 => {
                    self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(is.read_message()?));
                },
                122 => {
                    self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(is.read_message()?));
                },
                58 => {
                    self.GHEIBKDHLPJ = ::std::option::Option::Some(ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ONKCHDEMOCF != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.ONKCHDEMOCF);
        }
        if let ::std::option::Option::Some(ref v) = self.GHEIBKDHLPJ {
            match v {
                &ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ONKCHDEMOCF != 0 {
            os.write_uint32(4, self.ONKCHDEMOCF)?;
        }
        if let ::std::option::Option::Some(ref v) = self.GHEIBKDHLPJ {
            match v {
                &ohjaijkaadk::GHEIBKDHLPJ::AMGPPOOFHLL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::NHELBAHFOIH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::FIHPGEEHMMB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::LOJCCIEIFPC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::JLCFPKEHLJD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::DCFNCDEIEOM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::PUNKLORDSHARETYPEFRIEND(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::FLOPGKPHEOP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &ohjaijkaadk::GHEIBKDHLPJ::HKOFFLPCLOG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OHJAIJKAADK {
        OHJAIJKAADK::new()
    }

    fn clear(&mut self) {
        self.ONKCHDEMOCF = 0;
        self.GHEIBKDHLPJ = ::std::option::Option::None;
        self.GHEIBKDHLPJ = ::std::option::Option::None;
        self.GHEIBKDHLPJ = ::std::option::Option::None;
        self.GHEIBKDHLPJ = ::std::option::Option::None;
        self.GHEIBKDHLPJ = ::std::option::Option::None;
        self.GHEIBKDHLPJ = ::std::option::Option::None;
        self.GHEIBKDHLPJ = ::std::option::Option::None;
        self.GHEIBKDHLPJ = ::std::option::Option::None;
        self.GHEIBKDHLPJ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OHJAIJKAADK {
        static instance: OHJAIJKAADK = OHJAIJKAADK {
            ONKCHDEMOCF: 0,
            GHEIBKDHLPJ: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OHJAIJKAADK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OHJAIJKAADK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OHJAIJKAADK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OHJAIJKAADK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OHJAIJKAADK`
pub mod ohjaijkaadk {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:OHJAIJKAADK.GHEIBKDHLPJ)
    pub enum GHEIBKDHLPJ {
        // @@protoc_insertion_point(oneof_field:OHJAIJKAADK.AMGPPOOFHLL)
        AMGPPOOFHLL(super::super::MNMKMPMMOGN::MNMKMPMMOGN),
        // @@protoc_insertion_point(oneof_field:OHJAIJKAADK.NHELBAHFOIH)
        NHELBAHFOIH(super::super::HCAFGMCIGIH::HCAFGMCIGIH),
        // @@protoc_insertion_point(oneof_field:OHJAIJKAADK.FIHPGEEHMMB)
        FIHPGEEHMMB(super::super::MAGHEDPCPOA::MAGHEDPCPOA),
        // @@protoc_insertion_point(oneof_field:OHJAIJKAADK.LOJCCIEIFPC)
        LOJCCIEIFPC(super::super::NNGOCPDILNC::NNGOCPDILNC),
        // @@protoc_insertion_point(oneof_field:OHJAIJKAADK.JLCFPKEHLJD)
        JLCFPKEHLJD(super::super::GLGFGCLNIIL::GLGFGCLNIIL),
        // @@protoc_insertion_point(oneof_field:OHJAIJKAADK.DCFNCDEIEOM)
        DCFNCDEIEOM(super::super::DDKJLLPJNOB::DDKJLLPJNOB),
        // @@protoc_insertion_point(oneof_field:OHJAIJKAADK.PUNK_LORD_SHARE_TYPE_FRIEND)
        PUNKLORDSHARETYPEFRIEND(super::super::MEMIECBAAJA::MEMIECBAAJA),
        // @@protoc_insertion_point(oneof_field:OHJAIJKAADK.FLOPGKPHEOP)
        FLOPGKPHEOP(super::super::DJMOGJKNMPK::DJMOGJKNMPK),
        // @@protoc_insertion_point(oneof_field:OHJAIJKAADK.HKOFFLPCLOG)
        HKOFFLPCLOG(super::CKMHLMLLEHD),
    }

    impl ::protobuf::Oneof for GHEIBKDHLPJ {
    }

    impl ::protobuf::OneofFull for GHEIBKDHLPJ {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OHJAIJKAADK as ::protobuf::MessageFull>::descriptor().oneof_by_name("GHEIBKDHLPJ").unwrap()).clone()
        }
    }

    impl GHEIBKDHLPJ {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<GHEIBKDHLPJ>("GHEIBKDHLPJ")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dCKMHLMLLEHD_OHJAIJKAADK.proto\x1a\x11DDKJLLPJNOB.proto\x1a\x11DJMO\
    GJKNMPK.proto\x1a\x11GLGFGCLNIIL.proto\x1a\x11HCAFGMCIGIH.proto\x1a\x11M\
    AGHEDPCPOA.proto\x1a\x11MEMIECBAAJA.proto\x1a\x11MNMKMPMMOGN.proto\x1a\
    \x11NNGOCPDILNC.proto\"_\n\x0bCKMHLMLLEHD\x12.\n\x0bLMIELHPBBEC\x18\x07\
    \x20\x03(\x0b2\x0c.OHJAIJKAADKR\x0bLMIELHPBBEC\x12\x20\n\x0bCAKAEMFCKFL\
    \x18\x08\x20\x01(\rR\x0bCAKAEMFCKFL\"\x9c\x04\n\x0bOHJAIJKAADK\x12\x20\n\
    \x0bONKCHDEMOCF\x18\x04\x20\x01(\rR\x0bONKCHDEMOCF\x120\n\x0bAMGPPOOFHLL\
    \x18\x06\x20\x01(\x0b2\x0c.MNMKMPMMOGNH\0R\x0bAMGPPOOFHLL\x120\n\x0bNHEL\
    BAHFOIH\x18\x0c\x20\x01(\x0b2\x0c.HCAFGMCIGIHH\0R\x0bNHELBAHFOIH\x120\n\
    \x0bFIHPGEEHMMB\x18\x03\x20\x01(\x0b2\x0c.MAGHEDPCPOAH\0R\x0bFIHPGEEHMMB\
    \x120\n\x0bLOJCCIEIFPC\x18\x02\x20\x01(\x0b2\x0c.NNGOCPDILNCH\0R\x0bLOJC\
    CIEIFPC\x120\n\x0bJLCFPKEHLJD\x18\r\x20\x01(\x0b2\x0c.GLGFGCLNIILH\0R\
    \x0bJLCFPKEHLJD\x120\n\x0bDCFNCDEIEOM\x18\n\x20\x01(\x0b2\x0c.DDKJLLPJNO\
    BH\0R\x0bDCFNCDEIEOM\x12L\n\x1bPUNK_LORD_SHARE_TYPE_FRIEND\x18\x01\x20\
    \x01(\x0b2\x0c.MEMIECBAAJAH\0R\x17PUNKLORDSHARETYPEFRIEND\x120\n\x0bFLOP\
    GKPHEOP\x18\x0f\x20\x01(\x0b2\x0c.DJMOGJKNMPKH\0R\x0bFLOPGKPHEOP\x120\n\
    \x0bHKOFFLPCLOG\x18\x07\x20\x01(\x0b2\x0c.CKMHLMLLEHDH\0R\x0bHKOFFLPCLOG\
    B\r\n\x0bGHEIBKDHLPJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::DDKJLLPJNOB::file_descriptor().clone());
            deps.push(super::DJMOGJKNMPK::file_descriptor().clone());
            deps.push(super::GLGFGCLNIIL::file_descriptor().clone());
            deps.push(super::HCAFGMCIGIH::file_descriptor().clone());
            deps.push(super::MAGHEDPCPOA::file_descriptor().clone());
            deps.push(super::MEMIECBAAJA::file_descriptor().clone());
            deps.push(super::MNMKMPMMOGN::file_descriptor().clone());
            deps.push(super::NNGOCPDILNC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CKMHLMLLEHD::generated_message_descriptor_data());
            messages.push(OHJAIJKAADK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
