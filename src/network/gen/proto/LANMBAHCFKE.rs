// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LANMBAHCFKE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LANMBAHCFKE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LANMBAHCFKE {
    // message fields
    // @@protoc_insertion_point(field:LANMBAHCFKE.CKKNAGCAAIG)
    pub CKKNAGCAAIG: u32,
    // @@protoc_insertion_point(field:LANMBAHCFKE.AAOKEEDKGPJ)
    pub AAOKEEDKGPJ: u32,
    // @@protoc_insertion_point(field:LANMBAHCFKE.HBEIKGBDGPJ)
    pub HBEIKGBDGPJ: u32,
    // message oneof groups
    pub MLIPHBHLBEK: ::std::option::Option<lanmbahcfke::MLIPHBHLBEK>,
    // special fields
    // @@protoc_insertion_point(special_field:LANMBAHCFKE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LANMBAHCFKE {
    fn default() -> &'a LANMBAHCFKE {
        <LANMBAHCFKE as ::protobuf::Message>::default_instance()
    }
}

impl LANMBAHCFKE {
    pub fn new() -> LANMBAHCFKE {
        ::std::default::Default::default()
    }

    // .BMIJKHMDCJJ LDNONLFGFED = 1;

    pub fn LDNONLFGFED(&self) -> &super::BMIJKHMDCJJ::BMIJKHMDCJJ {
        match self.MLIPHBHLBEK {
            ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(ref v)) => v,
            _ => <super::BMIJKHMDCJJ::BMIJKHMDCJJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LDNONLFGFED(&mut self) {
        self.MLIPHBHLBEK = ::std::option::Option::None;
    }

    pub fn has_LDNONLFGFED(&self) -> bool {
        match self.MLIPHBHLBEK {
            ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LDNONLFGFED(&mut self, v: super::BMIJKHMDCJJ::BMIJKHMDCJJ) {
        self.MLIPHBHLBEK = ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LDNONLFGFED(&mut self) -> &mut super::BMIJKHMDCJJ::BMIJKHMDCJJ {
        if let ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(_)) = self.MLIPHBHLBEK {
        } else {
            self.MLIPHBHLBEK = ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(super::BMIJKHMDCJJ::BMIJKHMDCJJ::new()));
        }
        match self.MLIPHBHLBEK {
            ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LDNONLFGFED(&mut self) -> super::BMIJKHMDCJJ::BMIJKHMDCJJ {
        if self.has_LDNONLFGFED() {
            match self.MLIPHBHLBEK.take() {
                ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BMIJKHMDCJJ::BMIJKHMDCJJ::new()
        }
    }

    // .FNKMGPNNPKC PMIAEBIEGMD = 3;

    pub fn PMIAEBIEGMD(&self) -> &super::FNKMGPNNPKC::FNKMGPNNPKC {
        match self.MLIPHBHLBEK {
            ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(ref v)) => v,
            _ => <super::FNKMGPNNPKC::FNKMGPNNPKC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMIAEBIEGMD(&mut self) {
        self.MLIPHBHLBEK = ::std::option::Option::None;
    }

    pub fn has_PMIAEBIEGMD(&self) -> bool {
        match self.MLIPHBHLBEK {
            ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMIAEBIEGMD(&mut self, v: super::FNKMGPNNPKC::FNKMGPNNPKC) {
        self.MLIPHBHLBEK = ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMIAEBIEGMD(&mut self) -> &mut super::FNKMGPNNPKC::FNKMGPNNPKC {
        if let ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(_)) = self.MLIPHBHLBEK {
        } else {
            self.MLIPHBHLBEK = ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(super::FNKMGPNNPKC::FNKMGPNNPKC::new()));
        }
        match self.MLIPHBHLBEK {
            ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMIAEBIEGMD(&mut self) -> super::FNKMGPNNPKC::FNKMGPNNPKC {
        if self.has_PMIAEBIEGMD() {
            match self.MLIPHBHLBEK.take() {
                ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FNKMGPNNPKC::FNKMGPNNPKC::new()
        }
    }

    // .LFDBBLDBGFE EBFCINOMNLO = 6;

    pub fn EBFCINOMNLO(&self) -> &super::LFDBBLDBGFE::LFDBBLDBGFE {
        match self.MLIPHBHLBEK {
            ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(ref v)) => v,
            _ => <super::LFDBBLDBGFE::LFDBBLDBGFE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EBFCINOMNLO(&mut self) {
        self.MLIPHBHLBEK = ::std::option::Option::None;
    }

    pub fn has_EBFCINOMNLO(&self) -> bool {
        match self.MLIPHBHLBEK {
            ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EBFCINOMNLO(&mut self, v: super::LFDBBLDBGFE::LFDBBLDBGFE) {
        self.MLIPHBHLBEK = ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EBFCINOMNLO(&mut self) -> &mut super::LFDBBLDBGFE::LFDBBLDBGFE {
        if let ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(_)) = self.MLIPHBHLBEK {
        } else {
            self.MLIPHBHLBEK = ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(super::LFDBBLDBGFE::LFDBBLDBGFE::new()));
        }
        match self.MLIPHBHLBEK {
            ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EBFCINOMNLO(&mut self) -> super::LFDBBLDBGFE::LFDBBLDBGFE {
        if self.has_EBFCINOMNLO() {
            match self.MLIPHBHLBEK.take() {
                ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LFDBBLDBGFE::LFDBBLDBGFE::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CKKNAGCAAIG",
            |m: &LANMBAHCFKE| { &m.CKKNAGCAAIG },
            |m: &mut LANMBAHCFKE| { &mut m.CKKNAGCAAIG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AAOKEEDKGPJ",
            |m: &LANMBAHCFKE| { &m.AAOKEEDKGPJ },
            |m: &mut LANMBAHCFKE| { &mut m.AAOKEEDKGPJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HBEIKGBDGPJ",
            |m: &LANMBAHCFKE| { &m.HBEIKGBDGPJ },
            |m: &mut LANMBAHCFKE| { &mut m.HBEIKGBDGPJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BMIJKHMDCJJ::BMIJKHMDCJJ>(
            "LDNONLFGFED",
            LANMBAHCFKE::has_LDNONLFGFED,
            LANMBAHCFKE::LDNONLFGFED,
            LANMBAHCFKE::mut_LDNONLFGFED,
            LANMBAHCFKE::set_LDNONLFGFED,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FNKMGPNNPKC::FNKMGPNNPKC>(
            "PMIAEBIEGMD",
            LANMBAHCFKE::has_PMIAEBIEGMD,
            LANMBAHCFKE::PMIAEBIEGMD,
            LANMBAHCFKE::mut_PMIAEBIEGMD,
            LANMBAHCFKE::set_PMIAEBIEGMD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LFDBBLDBGFE::LFDBBLDBGFE>(
            "EBFCINOMNLO",
            LANMBAHCFKE::has_EBFCINOMNLO,
            LANMBAHCFKE::EBFCINOMNLO,
            LANMBAHCFKE::mut_EBFCINOMNLO,
            LANMBAHCFKE::set_EBFCINOMNLO,
        ));
        oneofs.push(lanmbahcfke::MLIPHBHLBEK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LANMBAHCFKE>(
            "LANMBAHCFKE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LANMBAHCFKE {
    const NAME: &'static str = "LANMBAHCFKE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.CKKNAGCAAIG = is.read_uint32()?;
                },
                16 => {
                    self.AAOKEEDKGPJ = is.read_uint32()?;
                },
                104 => {
                    self.HBEIKGBDGPJ = is.read_uint32()?;
                },
                10 => {
                    self.MLIPHBHLBEK = ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(is.read_message()?));
                },
                26 => {
                    self.MLIPHBHLBEK = ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(is.read_message()?));
                },
                50 => {
                    self.MLIPHBHLBEK = ::std::option::Option::Some(lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CKKNAGCAAIG != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.CKKNAGCAAIG);
        }
        if self.AAOKEEDKGPJ != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.AAOKEEDKGPJ);
        }
        if self.HBEIKGBDGPJ != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.HBEIKGBDGPJ);
        }
        if let ::std::option::Option::Some(ref v) = self.MLIPHBHLBEK {
            match v {
                &lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CKKNAGCAAIG != 0 {
            os.write_uint32(15, self.CKKNAGCAAIG)?;
        }
        if self.AAOKEEDKGPJ != 0 {
            os.write_uint32(2, self.AAOKEEDKGPJ)?;
        }
        if self.HBEIKGBDGPJ != 0 {
            os.write_uint32(13, self.HBEIKGBDGPJ)?;
        }
        if let ::std::option::Option::Some(ref v) = self.MLIPHBHLBEK {
            match v {
                &lanmbahcfke::MLIPHBHLBEK::LDNONLFGFED(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &lanmbahcfke::MLIPHBHLBEK::PMIAEBIEGMD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &lanmbahcfke::MLIPHBHLBEK::EBFCINOMNLO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LANMBAHCFKE {
        LANMBAHCFKE::new()
    }

    fn clear(&mut self) {
        self.CKKNAGCAAIG = 0;
        self.AAOKEEDKGPJ = 0;
        self.HBEIKGBDGPJ = 0;
        self.MLIPHBHLBEK = ::std::option::Option::None;
        self.MLIPHBHLBEK = ::std::option::Option::None;
        self.MLIPHBHLBEK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LANMBAHCFKE {
        static instance: LANMBAHCFKE = LANMBAHCFKE {
            CKKNAGCAAIG: 0,
            AAOKEEDKGPJ: 0,
            HBEIKGBDGPJ: 0,
            MLIPHBHLBEK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LANMBAHCFKE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LANMBAHCFKE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LANMBAHCFKE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LANMBAHCFKE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LANMBAHCFKE`
pub mod lanmbahcfke {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:LANMBAHCFKE.MLIPHBHLBEK)
    pub enum MLIPHBHLBEK {
        // @@protoc_insertion_point(oneof_field:LANMBAHCFKE.LDNONLFGFED)
        LDNONLFGFED(super::super::BMIJKHMDCJJ::BMIJKHMDCJJ),
        // @@protoc_insertion_point(oneof_field:LANMBAHCFKE.PMIAEBIEGMD)
        PMIAEBIEGMD(super::super::FNKMGPNNPKC::FNKMGPNNPKC),
        // @@protoc_insertion_point(oneof_field:LANMBAHCFKE.EBFCINOMNLO)
        EBFCINOMNLO(super::super::LFDBBLDBGFE::LFDBBLDBGFE),
    }

    impl ::protobuf::Oneof for MLIPHBHLBEK {
    }

    impl ::protobuf::OneofFull for MLIPHBHLBEK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::LANMBAHCFKE as ::protobuf::MessageFull>::descriptor().oneof_by_name("MLIPHBHLBEK").unwrap()).clone()
        }
    }

    impl MLIPHBHLBEK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<MLIPHBHLBEK>("MLIPHBHLBEK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LANMBAHCFKE.proto\x1a\x11BMIJKHMDCJJ.proto\x1a\x11FNKMGPNNPKC.prot\
    o\x1a\x11LFDBBLDBGFE.proto\"\x98\x02\n\x0bLANMBAHCFKE\x12\x20\n\x0bCKKNA\
    GCAAIG\x18\x0f\x20\x01(\rR\x0bCKKNAGCAAIG\x12\x20\n\x0bAAOKEEDKGPJ\x18\
    \x02\x20\x01(\rR\x0bAAOKEEDKGPJ\x12\x20\n\x0bHBEIKGBDGPJ\x18\r\x20\x01(\
    \rR\x0bHBEIKGBDGPJ\x120\n\x0bLDNONLFGFED\x18\x01\x20\x01(\x0b2\x0c.BMIJK\
    HMDCJJH\0R\x0bLDNONLFGFED\x120\n\x0bPMIAEBIEGMD\x18\x03\x20\x01(\x0b2\
    \x0c.FNKMGPNNPKCH\0R\x0bPMIAEBIEGMD\x120\n\x0bEBFCINOMNLO\x18\x06\x20\
    \x01(\x0b2\x0c.LFDBBLDBGFEH\0R\x0bEBFCINOMNLOB\r\n\x0bMLIPHBHLBEKb\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BMIJKHMDCJJ::file_descriptor().clone());
            deps.push(super::FNKMGPNNPKC::file_descriptor().clone());
            deps.push(super::LFDBBLDBGFE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LANMBAHCFKE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
