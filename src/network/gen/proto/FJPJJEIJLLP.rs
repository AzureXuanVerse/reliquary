// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FJPJJEIJLLP.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FJPJJEIJLLP)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FJPJJEIJLLP {
    // message fields
    // @@protoc_insertion_point(field:FJPJJEIJLLP.AGHOPKKDPLI)
    pub AGHOPKKDPLI: bool,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.GANLNDBNHLD)
    pub GANLNDBNHLD: bool,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.ADHEOOBHKOM)
    pub ADHEOOBHKOM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.CNKENHKMFAP)
    pub CNKENHKMFAP: u32,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.avatar_list)
    pub avatar_list: ::std::vec::Vec<super::MNODPOPDMLD::MNODPOPDMLD>,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.CPGDHGKAHHD)
    pub CPGDHGKAHHD: u32,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.CMBBJPPMHPM)
    pub CMBBJPPMHPM: u32,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.IOKADLFHEHK)
    pub IOKADLFHEHK: ::protobuf::EnumOrUnknown<super::ExtraLineupType::ExtraLineupType>,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.HMAINGPKCKF)
    pub HMAINGPKCKF: u32,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.GGHCBPBEFFJ)
    pub GGHCBPBEFFJ: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.DMDNGEEPLFJ)
    pub DMDNGEEPLFJ: ::std::string::String,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.KBEOKEDNENE)
    pub KBEOKEDNENE: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.OGPKNEFGNAN)
    pub OGPKNEFGNAN: u32,
    // @@protoc_insertion_point(field:FJPJJEIJLLP.CCDLNNCGFBF)
    pub CCDLNNCGFBF: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FJPJJEIJLLP.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FJPJJEIJLLP {
    fn default() -> &'a FJPJJEIJLLP {
        <FJPJJEIJLLP as ::protobuf::Message>::default_instance()
    }
}

impl FJPJJEIJLLP {
    pub fn new() -> FJPJJEIJLLP {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AGHOPKKDPLI",
            |m: &FJPJJEIJLLP| { &m.AGHOPKKDPLI },
            |m: &mut FJPJJEIJLLP| { &mut m.AGHOPKKDPLI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GANLNDBNHLD",
            |m: &FJPJJEIJLLP| { &m.GANLNDBNHLD },
            |m: &mut FJPJJEIJLLP| { &mut m.GANLNDBNHLD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ADHEOOBHKOM",
            |m: &FJPJJEIJLLP| { &m.ADHEOOBHKOM },
            |m: &mut FJPJJEIJLLP| { &mut m.ADHEOOBHKOM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CNKENHKMFAP",
            |m: &FJPJJEIJLLP| { &m.CNKENHKMFAP },
            |m: &mut FJPJJEIJLLP| { &mut m.CNKENHKMFAP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_list",
            |m: &FJPJJEIJLLP| { &m.avatar_list },
            |m: &mut FJPJJEIJLLP| { &mut m.avatar_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPGDHGKAHHD",
            |m: &FJPJJEIJLLP| { &m.CPGDHGKAHHD },
            |m: &mut FJPJJEIJLLP| { &mut m.CPGDHGKAHHD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMBBJPPMHPM",
            |m: &FJPJJEIJLLP| { &m.CMBBJPPMHPM },
            |m: &mut FJPJJEIJLLP| { &mut m.CMBBJPPMHPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IOKADLFHEHK",
            |m: &FJPJJEIJLLP| { &m.IOKADLFHEHK },
            |m: &mut FJPJJEIJLLP| { &mut m.IOKADLFHEHK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HMAINGPKCKF",
            |m: &FJPJJEIJLLP| { &m.HMAINGPKCKF },
            |m: &mut FJPJJEIJLLP| { &mut m.HMAINGPKCKF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GGHCBPBEFFJ",
            |m: &FJPJJEIJLLP| { &m.GGHCBPBEFFJ },
            |m: &mut FJPJJEIJLLP| { &mut m.GGHCBPBEFFJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DMDNGEEPLFJ",
            |m: &FJPJJEIJLLP| { &m.DMDNGEEPLFJ },
            |m: &mut FJPJJEIJLLP| { &mut m.DMDNGEEPLFJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KBEOKEDNENE",
            |m: &FJPJJEIJLLP| { &m.KBEOKEDNENE },
            |m: &mut FJPJJEIJLLP| { &mut m.KBEOKEDNENE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OGPKNEFGNAN",
            |m: &FJPJJEIJLLP| { &m.OGPKNEFGNAN },
            |m: &mut FJPJJEIJLLP| { &mut m.OGPKNEFGNAN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CCDLNNCGFBF",
            |m: &FJPJJEIJLLP| { &m.CCDLNNCGFBF },
            |m: &mut FJPJJEIJLLP| { &mut m.CCDLNNCGFBF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FJPJJEIJLLP>(
            "FJPJJEIJLLP",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FJPJJEIJLLP {
    const NAME: &'static str = "FJPJJEIJLLP";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.AGHOPKKDPLI = is.read_bool()?;
                },
                16 => {
                    self.GANLNDBNHLD = is.read_bool()?;
                },
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.ADHEOOBHKOM)?;
                },
                112 => {
                    self.ADHEOOBHKOM.push(is.read_uint32()?);
                },
                120 => {
                    self.CNKENHKMFAP = is.read_uint32()?;
                },
                34 => {
                    self.avatar_list.push(is.read_message()?);
                },
                48 => {
                    self.CPGDHGKAHHD = is.read_uint32()?;
                },
                80 => {
                    self.CMBBJPPMHPM = is.read_uint32()?;
                },
                24 => {
                    self.IOKADLFHEHK = is.read_enum_or_unknown()?;
                },
                96 => {
                    self.HMAINGPKCKF = is.read_uint32()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.GGHCBPBEFFJ)?;
                },
                64 => {
                    self.GGHCBPBEFFJ.push(is.read_uint32()?);
                },
                58 => {
                    self.DMDNGEEPLFJ = is.read_string()?;
                },
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.KBEOKEDNENE)?;
                },
                8 => {
                    self.KBEOKEDNENE.push(is.read_uint32()?);
                },
                72 => {
                    self.OGPKNEFGNAN = is.read_uint32()?;
                },
                40 => {
                    self.CCDLNNCGFBF = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.AGHOPKKDPLI != false {
            my_size += 1 + 1;
        }
        if self.GANLNDBNHLD != false {
            my_size += 1 + 1;
        }
        for value in &self.ADHEOOBHKOM {
            my_size += ::protobuf::rt::uint32_size(14, *value);
        };
        if self.CNKENHKMFAP != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.CNKENHKMFAP);
        }
        for value in &self.avatar_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CPGDHGKAHHD != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.CPGDHGKAHHD);
        }
        if self.CMBBJPPMHPM != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.CMBBJPPMHPM);
        }
        if self.IOKADLFHEHK != ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE) {
            my_size += ::protobuf::rt::int32_size(3, self.IOKADLFHEHK.value());
        }
        if self.HMAINGPKCKF != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.HMAINGPKCKF);
        }
        for value in &self.GGHCBPBEFFJ {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if !self.DMDNGEEPLFJ.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.DMDNGEEPLFJ);
        }
        for value in &self.KBEOKEDNENE {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if self.OGPKNEFGNAN != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.OGPKNEFGNAN);
        }
        if self.CCDLNNCGFBF != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.CCDLNNCGFBF);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.AGHOPKKDPLI != false {
            os.write_bool(13, self.AGHOPKKDPLI)?;
        }
        if self.GANLNDBNHLD != false {
            os.write_bool(2, self.GANLNDBNHLD)?;
        }
        for v in &self.ADHEOOBHKOM {
            os.write_uint32(14, *v)?;
        };
        if self.CNKENHKMFAP != 0 {
            os.write_uint32(15, self.CNKENHKMFAP)?;
        }
        for v in &self.avatar_list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.CPGDHGKAHHD != 0 {
            os.write_uint32(6, self.CPGDHGKAHHD)?;
        }
        if self.CMBBJPPMHPM != 0 {
            os.write_uint32(10, self.CMBBJPPMHPM)?;
        }
        if self.IOKADLFHEHK != ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.IOKADLFHEHK))?;
        }
        if self.HMAINGPKCKF != 0 {
            os.write_uint32(12, self.HMAINGPKCKF)?;
        }
        for v in &self.GGHCBPBEFFJ {
            os.write_uint32(8, *v)?;
        };
        if !self.DMDNGEEPLFJ.is_empty() {
            os.write_string(7, &self.DMDNGEEPLFJ)?;
        }
        for v in &self.KBEOKEDNENE {
            os.write_uint32(1, *v)?;
        };
        if self.OGPKNEFGNAN != 0 {
            os.write_uint32(9, self.OGPKNEFGNAN)?;
        }
        if self.CCDLNNCGFBF != 0 {
            os.write_uint32(5, self.CCDLNNCGFBF)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FJPJJEIJLLP {
        FJPJJEIJLLP::new()
    }

    fn clear(&mut self) {
        self.AGHOPKKDPLI = false;
        self.GANLNDBNHLD = false;
        self.ADHEOOBHKOM.clear();
        self.CNKENHKMFAP = 0;
        self.avatar_list.clear();
        self.CPGDHGKAHHD = 0;
        self.CMBBJPPMHPM = 0;
        self.IOKADLFHEHK = ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE);
        self.HMAINGPKCKF = 0;
        self.GGHCBPBEFFJ.clear();
        self.DMDNGEEPLFJ.clear();
        self.KBEOKEDNENE.clear();
        self.OGPKNEFGNAN = 0;
        self.CCDLNNCGFBF = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FJPJJEIJLLP {
        static instance: FJPJJEIJLLP = FJPJJEIJLLP {
            AGHOPKKDPLI: false,
            GANLNDBNHLD: false,
            ADHEOOBHKOM: ::std::vec::Vec::new(),
            CNKENHKMFAP: 0,
            avatar_list: ::std::vec::Vec::new(),
            CPGDHGKAHHD: 0,
            CMBBJPPMHPM: 0,
            IOKADLFHEHK: ::protobuf::EnumOrUnknown::from_i32(0),
            HMAINGPKCKF: 0,
            GGHCBPBEFFJ: ::std::vec::Vec::new(),
            DMDNGEEPLFJ: ::std::string::String::new(),
            KBEOKEDNENE: ::std::vec::Vec::new(),
            OGPKNEFGNAN: 0,
            CCDLNNCGFBF: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FJPJJEIJLLP {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FJPJJEIJLLP").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FJPJJEIJLLP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FJPJJEIJLLP {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FJPJJEIJLLP.proto\x1a\x15ExtraLineupType.proto\x1a\x11MNODPOPDMLD.\
    proto\"\x88\x04\n\x0bFJPJJEIJLLP\x12\x20\n\x0bAGHOPKKDPLI\x18\r\x20\x01(\
    \x08R\x0bAGHOPKKDPLI\x12\x20\n\x0bGANLNDBNHLD\x18\x02\x20\x01(\x08R\x0bG\
    ANLNDBNHLD\x12\x20\n\x0bADHEOOBHKOM\x18\x0e\x20\x03(\rR\x0bADHEOOBHKOM\
    \x12\x20\n\x0bCNKENHKMFAP\x18\x0f\x20\x01(\rR\x0bCNKENHKMFAP\x12-\n\x0ba\
    vatar_list\x18\x04\x20\x03(\x0b2\x0c.MNODPOPDMLDR\navatarList\x12\x20\n\
    \x0bCPGDHGKAHHD\x18\x06\x20\x01(\rR\x0bCPGDHGKAHHD\x12\x20\n\x0bCMBBJPPM\
    HPM\x18\n\x20\x01(\rR\x0bCMBBJPPMHPM\x122\n\x0bIOKADLFHEHK\x18\x03\x20\
    \x01(\x0e2\x10.ExtraLineupTypeR\x0bIOKADLFHEHK\x12\x20\n\x0bHMAINGPKCKF\
    \x18\x0c\x20\x01(\rR\x0bHMAINGPKCKF\x12\x20\n\x0bGGHCBPBEFFJ\x18\x08\x20\
    \x03(\rR\x0bGGHCBPBEFFJ\x12\x20\n\x0bDMDNGEEPLFJ\x18\x07\x20\x01(\tR\x0b\
    DMDNGEEPLFJ\x12\x20\n\x0bKBEOKEDNENE\x18\x01\x20\x03(\rR\x0bKBEOKEDNENE\
    \x12\x20\n\x0bOGPKNEFGNAN\x18\t\x20\x01(\rR\x0bOGPKNEFGNAN\x12\x20\n\x0b\
    CCDLNNCGFBF\x18\x05\x20\x01(\rR\x0bCCDLNNCGFBFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ExtraLineupType::file_descriptor().clone());
            deps.push(super::MNODPOPDMLD::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FJPJJEIJLLP::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
