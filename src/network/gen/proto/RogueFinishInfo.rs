// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueFinishInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueFinishInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueFinishInfo {
    // message fields
    // @@protoc_insertion_point(field:RogueFinishInfo.NLKJPGGJKKD)
    pub NLKJPGGJKKD: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:RogueFinishInfo.FGFFEBKNMHG)
    pub FGFFEBKNMHG: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.JKCHFNIKOMK)
    pub JKCHFNIKOMK: bool,
    // @@protoc_insertion_point(field:RogueFinishInfo.score)
    pub score: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.ACHNAHDMHEK)
    pub ACHNAHDMHEK: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.FJJEBHKNOEG)
    pub FJJEBHKNOEG: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.HOIMINMJKKG)
    pub HOIMINMJKKG: ::protobuf::MessageField<super::RogueScoreRewardInfo::RogueScoreRewardInfo>,
    // @@protoc_insertion_point(field:RogueFinishInfo.JFGLBIPMPNA)
    pub JFGLBIPMPNA: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.record_info)
    pub record_info: ::protobuf::MessageField<super::RogueRecordInfo::RogueRecordInfo>,
    // @@protoc_insertion_point(field:RogueFinishInfo.is_win)
    pub is_win: bool,
    // @@protoc_insertion_point(field:RogueFinishInfo.AFKOELAGIJP)
    pub AFKOELAGIJP: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:RogueFinishInfo.LOMBKJKBIGE)
    pub LOMBKJKBIGE: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:RogueFinishInfo.FNLFMLEKNNE)
    pub FNLFMLEKNNE: ::protobuf::MessageField<super::RogueScoreRewardInfo::RogueScoreRewardInfo>,
    // @@protoc_insertion_point(field:RogueFinishInfo.FAJODKFNJJD)
    pub FAJODKFNJJD: u32,
    // @@protoc_insertion_point(field:RogueFinishInfo.area_id)
    pub area_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:RogueFinishInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueFinishInfo {
    fn default() -> &'a RogueFinishInfo {
        <RogueFinishInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueFinishInfo {
    pub fn new() -> RogueFinishInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "NLKJPGGJKKD",
            |m: &RogueFinishInfo| { &m.NLKJPGGJKKD },
            |m: &mut RogueFinishInfo| { &mut m.NLKJPGGJKKD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FGFFEBKNMHG",
            |m: &RogueFinishInfo| { &m.FGFFEBKNMHG },
            |m: &mut RogueFinishInfo| { &mut m.FGFFEBKNMHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JKCHFNIKOMK",
            |m: &RogueFinishInfo| { &m.JKCHFNIKOMK },
            |m: &mut RogueFinishInfo| { &mut m.JKCHFNIKOMK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score",
            |m: &RogueFinishInfo| { &m.score },
            |m: &mut RogueFinishInfo| { &mut m.score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACHNAHDMHEK",
            |m: &RogueFinishInfo| { &m.ACHNAHDMHEK },
            |m: &mut RogueFinishInfo| { &mut m.ACHNAHDMHEK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FJJEBHKNOEG",
            |m: &RogueFinishInfo| { &m.FJJEBHKNOEG },
            |m: &mut RogueFinishInfo| { &mut m.FJJEBHKNOEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueScoreRewardInfo::RogueScoreRewardInfo>(
            "HOIMINMJKKG",
            |m: &RogueFinishInfo| { &m.HOIMINMJKKG },
            |m: &mut RogueFinishInfo| { &mut m.HOIMINMJKKG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JFGLBIPMPNA",
            |m: &RogueFinishInfo| { &m.JFGLBIPMPNA },
            |m: &mut RogueFinishInfo| { &mut m.JFGLBIPMPNA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueRecordInfo::RogueRecordInfo>(
            "record_info",
            |m: &RogueFinishInfo| { &m.record_info },
            |m: &mut RogueFinishInfo| { &mut m.record_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_win",
            |m: &RogueFinishInfo| { &m.is_win },
            |m: &mut RogueFinishInfo| { &mut m.is_win },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "AFKOELAGIJP",
            |m: &RogueFinishInfo| { &m.AFKOELAGIJP },
            |m: &mut RogueFinishInfo| { &mut m.AFKOELAGIJP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "LOMBKJKBIGE",
            |m: &RogueFinishInfo| { &m.LOMBKJKBIGE },
            |m: &mut RogueFinishInfo| { &mut m.LOMBKJKBIGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RogueScoreRewardInfo::RogueScoreRewardInfo>(
            "FNLFMLEKNNE",
            |m: &RogueFinishInfo| { &m.FNLFMLEKNNE },
            |m: &mut RogueFinishInfo| { &mut m.FNLFMLEKNNE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FAJODKFNJJD",
            |m: &RogueFinishInfo| { &m.FAJODKFNJJD },
            |m: &mut RogueFinishInfo| { &mut m.FAJODKFNJJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "area_id",
            |m: &RogueFinishInfo| { &m.area_id },
            |m: &mut RogueFinishInfo| { &mut m.area_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueFinishInfo>(
            "RogueFinishInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueFinishInfo {
    const NAME: &'static str = "RogueFinishInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NLKJPGGJKKD)?;
                },
                744 => {
                    self.FGFFEBKNMHG = is.read_uint32()?;
                },
                104 => {
                    self.JKCHFNIKOMK = is.read_bool()?;
                },
                80 => {
                    self.score = is.read_uint32()?;
                },
                24 => {
                    self.ACHNAHDMHEK = is.read_uint32()?;
                },
                88 => {
                    self.FJJEBHKNOEG = is.read_uint32()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HOIMINMJKKG)?;
                },
                32 => {
                    self.JFGLBIPMPNA = is.read_uint32()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.record_info)?;
                },
                96 => {
                    self.is_win = is.read_bool()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AFKOELAGIJP)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LOMBKJKBIGE)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FNLFMLEKNNE)?;
                },
                64 => {
                    self.FAJODKFNJJD = is.read_uint32()?;
                },
                10112 => {
                    self.area_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.NLKJPGGJKKD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.FGFFEBKNMHG != 0 {
            my_size += ::protobuf::rt::uint32_size(93, self.FGFFEBKNMHG);
        }
        if self.JKCHFNIKOMK != false {
            my_size += 1 + 1;
        }
        if self.score != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.score);
        }
        if self.ACHNAHDMHEK != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.ACHNAHDMHEK);
        }
        if self.FJJEBHKNOEG != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.FJJEBHKNOEG);
        }
        if let Some(v) = self.HOIMINMJKKG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.JFGLBIPMPNA != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.JFGLBIPMPNA);
        }
        if let Some(v) = self.record_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.is_win != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.AFKOELAGIJP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LOMBKJKBIGE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.FNLFMLEKNNE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.FAJODKFNJJD != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.FAJODKFNJJD);
        }
        if self.area_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1264, self.area_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.NLKJPGGJKKD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if self.FGFFEBKNMHG != 0 {
            os.write_uint32(93, self.FGFFEBKNMHG)?;
        }
        if self.JKCHFNIKOMK != false {
            os.write_bool(13, self.JKCHFNIKOMK)?;
        }
        if self.score != 0 {
            os.write_uint32(10, self.score)?;
        }
        if self.ACHNAHDMHEK != 0 {
            os.write_uint32(3, self.ACHNAHDMHEK)?;
        }
        if self.FJJEBHKNOEG != 0 {
            os.write_uint32(11, self.FJJEBHKNOEG)?;
        }
        if let Some(v) = self.HOIMINMJKKG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.JFGLBIPMPNA != 0 {
            os.write_uint32(4, self.JFGLBIPMPNA)?;
        }
        if let Some(v) = self.record_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.is_win != false {
            os.write_bool(12, self.is_win)?;
        }
        if let Some(v) = self.AFKOELAGIJP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.LOMBKJKBIGE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.FNLFMLEKNNE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.FAJODKFNJJD != 0 {
            os.write_uint32(8, self.FAJODKFNJJD)?;
        }
        if self.area_id != 0 {
            os.write_uint32(1264, self.area_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueFinishInfo {
        RogueFinishInfo::new()
    }

    fn clear(&mut self) {
        self.NLKJPGGJKKD.clear();
        self.FGFFEBKNMHG = 0;
        self.JKCHFNIKOMK = false;
        self.score = 0;
        self.ACHNAHDMHEK = 0;
        self.FJJEBHKNOEG = 0;
        self.HOIMINMJKKG.clear();
        self.JFGLBIPMPNA = 0;
        self.record_info.clear();
        self.is_win = false;
        self.AFKOELAGIJP.clear();
        self.LOMBKJKBIGE.clear();
        self.FNLFMLEKNNE.clear();
        self.FAJODKFNJJD = 0;
        self.area_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueFinishInfo {
        static instance: RogueFinishInfo = RogueFinishInfo {
            NLKJPGGJKKD: ::protobuf::MessageField::none(),
            FGFFEBKNMHG: 0,
            JKCHFNIKOMK: false,
            score: 0,
            ACHNAHDMHEK: 0,
            FJJEBHKNOEG: 0,
            HOIMINMJKKG: ::protobuf::MessageField::none(),
            JFGLBIPMPNA: 0,
            record_info: ::protobuf::MessageField::none(),
            is_win: false,
            AFKOELAGIJP: ::protobuf::MessageField::none(),
            LOMBKJKBIGE: ::protobuf::MessageField::none(),
            FNLFMLEKNNE: ::protobuf::MessageField::none(),
            FAJODKFNJJD: 0,
            area_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueFinishInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueFinishInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueFinishInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueFinishInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15RogueFinishInfo.proto\x1a\x1aRogueScoreRewardInfo.proto\x1a\x15Rog\
    ueRecordInfo.proto\x1a\x0eItemList.proto\"\xd0\x04\n\x0fRogueFinishInfo\
    \x12+\n\x0bNLKJPGGJKKD\x18\x0e\x20\x01(\x0b2\t.ItemListR\x0bNLKJPGGJKKD\
    \x12\x20\n\x0bFGFFEBKNMHG\x18]\x20\x01(\rR\x0bFGFFEBKNMHG\x12\x20\n\x0bJ\
    KCHFNIKOMK\x18\r\x20\x01(\x08R\x0bJKCHFNIKOMK\x12\x14\n\x05score\x18\n\
    \x20\x01(\rR\x05score\x12\x20\n\x0bACHNAHDMHEK\x18\x03\x20\x01(\rR\x0bAC\
    HNAHDMHEK\x12\x20\n\x0bFJJEBHKNOEG\x18\x0b\x20\x01(\rR\x0bFJJEBHKNOEG\
    \x127\n\x0bHOIMINMJKKG\x18\x07\x20\x01(\x0b2\x15.RogueScoreRewardInfoR\
    \x0bHOIMINMJKKG\x12\x20\n\x0bJFGLBIPMPNA\x18\x04\x20\x01(\rR\x0bJFGLBIPM\
    PNA\x121\n\x0brecord_info\x18\x06\x20\x01(\x0b2\x10.RogueRecordInfoR\nre\
    cordInfo\x12\x15\n\x06is_win\x18\x0c\x20\x01(\x08R\x05isWin\x12+\n\x0bAF\
    KOELAGIJP\x18\x02\x20\x01(\x0b2\t.ItemListR\x0bAFKOELAGIJP\x12+\n\x0bLOM\
    BKJKBIGE\x18\x05\x20\x01(\x0b2\t.ItemListR\x0bLOMBKJKBIGE\x127\n\x0bFNLF\
    MLEKNNE\x18\x01\x20\x01(\x0b2\x15.RogueScoreRewardInfoR\x0bFNLFMLEKNNE\
    \x12\x20\n\x0bFAJODKFNJJD\x18\x08\x20\x01(\rR\x0bFAJODKFNJJD\x12\x18\n\
    \x07area_id\x18\xf0\t\x20\x01(\rR\x06areaIdB\x15\n\x13emu.lunarcore.prot\
    ob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::RogueScoreRewardInfo::file_descriptor().clone());
            deps.push(super::RogueRecordInfo::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueFinishInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
