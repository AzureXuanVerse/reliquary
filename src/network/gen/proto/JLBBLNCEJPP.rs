// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JLBBLNCEJPP.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:JLBBLNCEJPP)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JLBBLNCEJPP {
    // message oneof groups
    pub IIGBPEOBFFH: ::std::option::Option<jlbblncejpp::IIGBPEOBFFH>,
    // special fields
    // @@protoc_insertion_point(special_field:JLBBLNCEJPP.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JLBBLNCEJPP {
    fn default() -> &'a JLBBLNCEJPP {
        <JLBBLNCEJPP as ::protobuf::Message>::default_instance()
    }
}

impl JLBBLNCEJPP {
    pub fn new() -> JLBBLNCEJPP {
        ::std::default::Default::default()
    }

    // .BMKBIJDAEPM HMPCEPIBOFI = 12;

    pub fn HMPCEPIBOFI(&self) -> &super::BMKBIJDAEPM::BMKBIJDAEPM {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(ref v)) => v,
            _ => <super::BMKBIJDAEPM::BMKBIJDAEPM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HMPCEPIBOFI(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_HMPCEPIBOFI(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HMPCEPIBOFI(&mut self, v: super::BMKBIJDAEPM::BMKBIJDAEPM) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HMPCEPIBOFI(&mut self) -> &mut super::BMKBIJDAEPM::BMKBIJDAEPM {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(super::BMKBIJDAEPM::BMKBIJDAEPM::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HMPCEPIBOFI(&mut self) -> super::BMKBIJDAEPM::BMKBIJDAEPM {
        if self.has_HMPCEPIBOFI() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BMKBIJDAEPM::BMKBIJDAEPM::new()
        }
    }

    // .BMKBIJDAEPM EPHEKAMBONB = 10;

    pub fn EPHEKAMBONB(&self) -> &super::BMKBIJDAEPM::BMKBIJDAEPM {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(ref v)) => v,
            _ => <super::BMKBIJDAEPM::BMKBIJDAEPM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EPHEKAMBONB(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_EPHEKAMBONB(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EPHEKAMBONB(&mut self, v: super::BMKBIJDAEPM::BMKBIJDAEPM) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EPHEKAMBONB(&mut self) -> &mut super::BMKBIJDAEPM::BMKBIJDAEPM {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(super::BMKBIJDAEPM::BMKBIJDAEPM::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EPHEKAMBONB(&mut self) -> super::BMKBIJDAEPM::BMKBIJDAEPM {
        if self.has_EPHEKAMBONB() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BMKBIJDAEPM::BMKBIJDAEPM::new()
        }
    }

    // .MONFGAKJBGN MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE = 11;

    pub fn MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&self) -> &super::MONFGAKJBGN::MONFGAKJBGN {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(ref v)) => v,
            _ => <super::MONFGAKJBGN::MONFGAKJBGN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&mut self, v: super::MONFGAKJBGN::MONFGAKJBGN) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&mut self) -> &mut super::MONFGAKJBGN::MONFGAKJBGN {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(super::MONFGAKJBGN::MONFGAKJBGN::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&mut self) -> super::MONFGAKJBGN::MONFGAKJBGN {
        if self.has_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MONFGAKJBGN::MONFGAKJBGN::new()
        }
    }

    // .MONFGAKJBGN CJJAEFCIMGD = 8;

    pub fn CJJAEFCIMGD(&self) -> &super::MONFGAKJBGN::MONFGAKJBGN {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(ref v)) => v,
            _ => <super::MONFGAKJBGN::MONFGAKJBGN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CJJAEFCIMGD(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_CJJAEFCIMGD(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CJJAEFCIMGD(&mut self, v: super::MONFGAKJBGN::MONFGAKJBGN) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CJJAEFCIMGD(&mut self) -> &mut super::MONFGAKJBGN::MONFGAKJBGN {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(super::MONFGAKJBGN::MONFGAKJBGN::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CJJAEFCIMGD(&mut self) -> super::MONFGAKJBGN::MONFGAKJBGN {
        if self.has_CJJAEFCIMGD() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MONFGAKJBGN::MONFGAKJBGN::new()
        }
    }

    // .EAHJNKMLDHG MMLLFOIBJID = 5;

    pub fn MMLLFOIBJID(&self) -> &super::EAHJNKMLDHG::EAHJNKMLDHG {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(ref v)) => v,
            _ => <super::EAHJNKMLDHG::EAHJNKMLDHG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MMLLFOIBJID(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_MMLLFOIBJID(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MMLLFOIBJID(&mut self, v: super::EAHJNKMLDHG::EAHJNKMLDHG) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MMLLFOIBJID(&mut self) -> &mut super::EAHJNKMLDHG::EAHJNKMLDHG {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(super::EAHJNKMLDHG::EAHJNKMLDHG::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MMLLFOIBJID(&mut self) -> super::EAHJNKMLDHG::EAHJNKMLDHG {
        if self.has_MMLLFOIBJID() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EAHJNKMLDHG::EAHJNKMLDHG::new()
        }
    }

    // .EAHJNKMLDHG HENCFGKDMEK = 13;

    pub fn HENCFGKDMEK(&self) -> &super::EAHJNKMLDHG::EAHJNKMLDHG {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(ref v)) => v,
            _ => <super::EAHJNKMLDHG::EAHJNKMLDHG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HENCFGKDMEK(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_HENCFGKDMEK(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HENCFGKDMEK(&mut self, v: super::EAHJNKMLDHG::EAHJNKMLDHG) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HENCFGKDMEK(&mut self) -> &mut super::EAHJNKMLDHG::EAHJNKMLDHG {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(super::EAHJNKMLDHG::EAHJNKMLDHG::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HENCFGKDMEK(&mut self) -> super::EAHJNKMLDHG::EAHJNKMLDHG {
        if self.has_HENCFGKDMEK() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EAHJNKMLDHG::EAHJNKMLDHG::new()
        }
    }

    // .CKIDOMIINKI NIPGEFPKBJG = 14;

    pub fn NIPGEFPKBJG(&self) -> &super::CKIDOMIINKI::CKIDOMIINKI {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(ref v)) => v,
            _ => <super::CKIDOMIINKI::CKIDOMIINKI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NIPGEFPKBJG(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_NIPGEFPKBJG(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NIPGEFPKBJG(&mut self, v: super::CKIDOMIINKI::CKIDOMIINKI) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NIPGEFPKBJG(&mut self) -> &mut super::CKIDOMIINKI::CKIDOMIINKI {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(super::CKIDOMIINKI::CKIDOMIINKI::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NIPGEFPKBJG(&mut self) -> super::CKIDOMIINKI::CKIDOMIINKI {
        if self.has_NIPGEFPKBJG() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CKIDOMIINKI::CKIDOMIINKI::new()
        }
    }

    // .CKIDOMIINKI LOEHJNMPJAK = 1;

    pub fn LOEHJNMPJAK(&self) -> &super::CKIDOMIINKI::CKIDOMIINKI {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(ref v)) => v,
            _ => <super::CKIDOMIINKI::CKIDOMIINKI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LOEHJNMPJAK(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_LOEHJNMPJAK(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LOEHJNMPJAK(&mut self, v: super::CKIDOMIINKI::CKIDOMIINKI) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LOEHJNMPJAK(&mut self) -> &mut super::CKIDOMIINKI::CKIDOMIINKI {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(super::CKIDOMIINKI::CKIDOMIINKI::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LOEHJNMPJAK(&mut self) -> super::CKIDOMIINKI::CKIDOMIINKI {
        if self.has_LOEHJNMPJAK() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CKIDOMIINKI::CKIDOMIINKI::new()
        }
    }

    // .GJNPFNDEHGL CAFCHIBNLNM = 6;

    pub fn CAFCHIBNLNM(&self) -> &super::GJNPFNDEHGL::GJNPFNDEHGL {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(ref v)) => v,
            _ => <super::GJNPFNDEHGL::GJNPFNDEHGL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CAFCHIBNLNM(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_CAFCHIBNLNM(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CAFCHIBNLNM(&mut self, v: super::GJNPFNDEHGL::GJNPFNDEHGL) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CAFCHIBNLNM(&mut self) -> &mut super::GJNPFNDEHGL::GJNPFNDEHGL {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(super::GJNPFNDEHGL::GJNPFNDEHGL::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CAFCHIBNLNM(&mut self) -> super::GJNPFNDEHGL::GJNPFNDEHGL {
        if self.has_CAFCHIBNLNM() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GJNPFNDEHGL::GJNPFNDEHGL::new()
        }
    }

    // .NAJJJDCIDOM KABHLAEPBHC = 3;

    pub fn KABHLAEPBHC(&self) -> &super::NAJJJDCIDOM::NAJJJDCIDOM {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(ref v)) => v,
            _ => <super::NAJJJDCIDOM::NAJJJDCIDOM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KABHLAEPBHC(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_KABHLAEPBHC(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KABHLAEPBHC(&mut self, v: super::NAJJJDCIDOM::NAJJJDCIDOM) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KABHLAEPBHC(&mut self) -> &mut super::NAJJJDCIDOM::NAJJJDCIDOM {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(super::NAJJJDCIDOM::NAJJJDCIDOM::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KABHLAEPBHC(&mut self) -> super::NAJJJDCIDOM::NAJJJDCIDOM {
        if self.has_KABHLAEPBHC() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NAJJJDCIDOM::NAJJJDCIDOM::new()
        }
    }

    // .EAHJNKMLDHG JOABIMPBDPA = 4;

    pub fn JOABIMPBDPA(&self) -> &super::EAHJNKMLDHG::EAHJNKMLDHG {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(ref v)) => v,
            _ => <super::EAHJNKMLDHG::EAHJNKMLDHG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JOABIMPBDPA(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_JOABIMPBDPA(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JOABIMPBDPA(&mut self, v: super::EAHJNKMLDHG::EAHJNKMLDHG) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JOABIMPBDPA(&mut self) -> &mut super::EAHJNKMLDHG::EAHJNKMLDHG {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(super::EAHJNKMLDHG::EAHJNKMLDHG::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JOABIMPBDPA(&mut self) -> super::EAHJNKMLDHG::EAHJNKMLDHG {
        if self.has_JOABIMPBDPA() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EAHJNKMLDHG::EAHJNKMLDHG::new()
        }
    }

    // .CKIDOMIINKI GDGIJKBBBNE = 2;

    pub fn GDGIJKBBBNE(&self) -> &super::CKIDOMIINKI::CKIDOMIINKI {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(ref v)) => v,
            _ => <super::CKIDOMIINKI::CKIDOMIINKI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GDGIJKBBBNE(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_GDGIJKBBBNE(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GDGIJKBBBNE(&mut self, v: super::CKIDOMIINKI::CKIDOMIINKI) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GDGIJKBBBNE(&mut self) -> &mut super::CKIDOMIINKI::CKIDOMIINKI {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(super::CKIDOMIINKI::CKIDOMIINKI::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GDGIJKBBBNE(&mut self) -> super::CKIDOMIINKI::CKIDOMIINKI {
        if self.has_GDGIJKBBBNE() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CKIDOMIINKI::CKIDOMIINKI::new()
        }
    }

    // .DOGNBLOFDOL JPJICBLLLAL = 15;

    pub fn JPJICBLLLAL(&self) -> &super::DOGNBLOFDOL::DOGNBLOFDOL {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(ref v)) => v,
            _ => <super::DOGNBLOFDOL::DOGNBLOFDOL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JPJICBLLLAL(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
    }

    pub fn has_JPJICBLLLAL(&self) -> bool {
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JPJICBLLLAL(&mut self, v: super::DOGNBLOFDOL::DOGNBLOFDOL) {
        self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JPJICBLLLAL(&mut self) -> &mut super::DOGNBLOFDOL::DOGNBLOFDOL {
        if let ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(_)) = self.IIGBPEOBFFH {
        } else {
            self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(super::DOGNBLOFDOL::DOGNBLOFDOL::new()));
        }
        match self.IIGBPEOBFFH {
            ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JPJICBLLLAL(&mut self) -> super::DOGNBLOFDOL::DOGNBLOFDOL {
        if self.has_JPJICBLLLAL() {
            match self.IIGBPEOBFFH.take() {
                ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DOGNBLOFDOL::DOGNBLOFDOL::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BMKBIJDAEPM::BMKBIJDAEPM>(
            "HMPCEPIBOFI",
            JLBBLNCEJPP::has_HMPCEPIBOFI,
            JLBBLNCEJPP::HMPCEPIBOFI,
            JLBBLNCEJPP::mut_HMPCEPIBOFI,
            JLBBLNCEJPP::set_HMPCEPIBOFI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BMKBIJDAEPM::BMKBIJDAEPM>(
            "EPHEKAMBONB",
            JLBBLNCEJPP::has_EPHEKAMBONB,
            JLBBLNCEJPP::EPHEKAMBONB,
            JLBBLNCEJPP::mut_EPHEKAMBONB,
            JLBBLNCEJPP::set_EPHEKAMBONB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MONFGAKJBGN::MONFGAKJBGN>(
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE",
            JLBBLNCEJPP::has_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE,
            JLBBLNCEJPP::MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE,
            JLBBLNCEJPP::mut_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE,
            JLBBLNCEJPP::set_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MONFGAKJBGN::MONFGAKJBGN>(
            "CJJAEFCIMGD",
            JLBBLNCEJPP::has_CJJAEFCIMGD,
            JLBBLNCEJPP::CJJAEFCIMGD,
            JLBBLNCEJPP::mut_CJJAEFCIMGD,
            JLBBLNCEJPP::set_CJJAEFCIMGD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EAHJNKMLDHG::EAHJNKMLDHG>(
            "MMLLFOIBJID",
            JLBBLNCEJPP::has_MMLLFOIBJID,
            JLBBLNCEJPP::MMLLFOIBJID,
            JLBBLNCEJPP::mut_MMLLFOIBJID,
            JLBBLNCEJPP::set_MMLLFOIBJID,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EAHJNKMLDHG::EAHJNKMLDHG>(
            "HENCFGKDMEK",
            JLBBLNCEJPP::has_HENCFGKDMEK,
            JLBBLNCEJPP::HENCFGKDMEK,
            JLBBLNCEJPP::mut_HENCFGKDMEK,
            JLBBLNCEJPP::set_HENCFGKDMEK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CKIDOMIINKI::CKIDOMIINKI>(
            "NIPGEFPKBJG",
            JLBBLNCEJPP::has_NIPGEFPKBJG,
            JLBBLNCEJPP::NIPGEFPKBJG,
            JLBBLNCEJPP::mut_NIPGEFPKBJG,
            JLBBLNCEJPP::set_NIPGEFPKBJG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CKIDOMIINKI::CKIDOMIINKI>(
            "LOEHJNMPJAK",
            JLBBLNCEJPP::has_LOEHJNMPJAK,
            JLBBLNCEJPP::LOEHJNMPJAK,
            JLBBLNCEJPP::mut_LOEHJNMPJAK,
            JLBBLNCEJPP::set_LOEHJNMPJAK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GJNPFNDEHGL::GJNPFNDEHGL>(
            "CAFCHIBNLNM",
            JLBBLNCEJPP::has_CAFCHIBNLNM,
            JLBBLNCEJPP::CAFCHIBNLNM,
            JLBBLNCEJPP::mut_CAFCHIBNLNM,
            JLBBLNCEJPP::set_CAFCHIBNLNM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NAJJJDCIDOM::NAJJJDCIDOM>(
            "KABHLAEPBHC",
            JLBBLNCEJPP::has_KABHLAEPBHC,
            JLBBLNCEJPP::KABHLAEPBHC,
            JLBBLNCEJPP::mut_KABHLAEPBHC,
            JLBBLNCEJPP::set_KABHLAEPBHC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EAHJNKMLDHG::EAHJNKMLDHG>(
            "JOABIMPBDPA",
            JLBBLNCEJPP::has_JOABIMPBDPA,
            JLBBLNCEJPP::JOABIMPBDPA,
            JLBBLNCEJPP::mut_JOABIMPBDPA,
            JLBBLNCEJPP::set_JOABIMPBDPA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CKIDOMIINKI::CKIDOMIINKI>(
            "GDGIJKBBBNE",
            JLBBLNCEJPP::has_GDGIJKBBBNE,
            JLBBLNCEJPP::GDGIJKBBBNE,
            JLBBLNCEJPP::mut_GDGIJKBBBNE,
            JLBBLNCEJPP::set_GDGIJKBBBNE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DOGNBLOFDOL::DOGNBLOFDOL>(
            "JPJICBLLLAL",
            JLBBLNCEJPP::has_JPJICBLLLAL,
            JLBBLNCEJPP::JPJICBLLLAL,
            JLBBLNCEJPP::mut_JPJICBLLLAL,
            JLBBLNCEJPP::set_JPJICBLLLAL,
        ));
        oneofs.push(jlbblncejpp::IIGBPEOBFFH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JLBBLNCEJPP>(
            "JLBBLNCEJPP",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JLBBLNCEJPP {
    const NAME: &'static str = "JLBBLNCEJPP";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                98 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(is.read_message()?));
                },
                82 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(is.read_message()?));
                },
                90 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(is.read_message()?));
                },
                66 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(is.read_message()?));
                },
                42 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(is.read_message()?));
                },
                106 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(is.read_message()?));
                },
                114 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(is.read_message()?));
                },
                10 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(is.read_message()?));
                },
                50 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(is.read_message()?));
                },
                26 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(is.read_message()?));
                },
                34 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(is.read_message()?));
                },
                18 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(is.read_message()?));
                },
                122 => {
                    self.IIGBPEOBFFH = ::std::option::Option::Some(jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.IIGBPEOBFFH {
            match v {
                &jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.IIGBPEOBFFH {
            match v {
                &jlbblncejpp::IIGBPEOBFFH::HMPCEPIBOFI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::EPHEKAMBONB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::CJJAEFCIMGD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::MMLLFOIBJID(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::HENCFGKDMEK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::NIPGEFPKBJG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::LOEHJNMPJAK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::CAFCHIBNLNM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::KABHLAEPBHC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::JOABIMPBDPA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::GDGIJKBBBNE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &jlbblncejpp::IIGBPEOBFFH::JPJICBLLLAL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JLBBLNCEJPP {
        JLBBLNCEJPP::new()
    }

    fn clear(&mut self) {
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.IIGBPEOBFFH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JLBBLNCEJPP {
        static instance: JLBBLNCEJPP = JLBBLNCEJPP {
            IIGBPEOBFFH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JLBBLNCEJPP {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JLBBLNCEJPP").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JLBBLNCEJPP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JLBBLNCEJPP {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `JLBBLNCEJPP`
pub mod jlbblncejpp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:JLBBLNCEJPP.IIGBPEOBFFH)
    pub enum IIGBPEOBFFH {
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.HMPCEPIBOFI)
        HMPCEPIBOFI(super::super::BMKBIJDAEPM::BMKBIJDAEPM),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.EPHEKAMBONB)
        EPHEKAMBONB(super::super::BMKBIJDAEPM::BMKBIJDAEPM),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE)
        MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(super::super::MONFGAKJBGN::MONFGAKJBGN),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.CJJAEFCIMGD)
        CJJAEFCIMGD(super::super::MONFGAKJBGN::MONFGAKJBGN),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.MMLLFOIBJID)
        MMLLFOIBJID(super::super::EAHJNKMLDHG::EAHJNKMLDHG),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.HENCFGKDMEK)
        HENCFGKDMEK(super::super::EAHJNKMLDHG::EAHJNKMLDHG),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.NIPGEFPKBJG)
        NIPGEFPKBJG(super::super::CKIDOMIINKI::CKIDOMIINKI),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.LOEHJNMPJAK)
        LOEHJNMPJAK(super::super::CKIDOMIINKI::CKIDOMIINKI),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.CAFCHIBNLNM)
        CAFCHIBNLNM(super::super::GJNPFNDEHGL::GJNPFNDEHGL),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.KABHLAEPBHC)
        KABHLAEPBHC(super::super::NAJJJDCIDOM::NAJJJDCIDOM),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.JOABIMPBDPA)
        JOABIMPBDPA(super::super::EAHJNKMLDHG::EAHJNKMLDHG),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.GDGIJKBBBNE)
        GDGIJKBBBNE(super::super::CKIDOMIINKI::CKIDOMIINKI),
        // @@protoc_insertion_point(oneof_field:JLBBLNCEJPP.JPJICBLLLAL)
        JPJICBLLLAL(super::super::DOGNBLOFDOL::DOGNBLOFDOL),
    }

    impl ::protobuf::Oneof for IIGBPEOBFFH {
    }

    impl ::protobuf::OneofFull for IIGBPEOBFFH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::JLBBLNCEJPP as ::protobuf::MessageFull>::descriptor().oneof_by_name("IIGBPEOBFFH").unwrap()).clone()
        }
    }

    impl IIGBPEOBFFH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<IIGBPEOBFFH>("IIGBPEOBFFH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JLBBLNCEJPP.proto\x1a\x11BMKBIJDAEPM.proto\x1a\x11CKIDOMIINKI.prot\
    o\x1a\x11DOGNBLOFDOL.proto\x1a\x11EAHJNKMLDHG.proto\x1a\x11GJNPFNDEHGL.p\
    roto\x1a\x11MONFGAKJBGN.proto\x1a\x11NAJJJDCIDOM.proto\"\xea\x05\n\x0bJL\
    BBLNCEJPP\x120\n\x0bHMPCEPIBOFI\x18\x0c\x20\x01(\x0b2\x0c.BMKBIJDAEPMH\0\
    R\x0bHMPCEPIBOFI\x120\n\x0bEPHEKAMBONB\x18\n\x20\x01(\x0b2\x0c.BMKBIJDAE\
    PMH\0R\x0bEPHEKAMBONB\x12t\n0MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UP\
    GRADE\x18\x0b\x20\x01(\x0b2\x0c.MONFGAKJBGNH\0R*MONOPOLYACTIONRESULTSOUR\
    CETYPEASSETUPGRADE\x120\n\x0bCJJAEFCIMGD\x18\x08\x20\x01(\x0b2\x0c.MONFG\
    AKJBGNH\0R\x0bCJJAEFCIMGD\x120\n\x0bMMLLFOIBJID\x18\x05\x20\x01(\x0b2\
    \x0c.EAHJNKMLDHGH\0R\x0bMMLLFOIBJID\x120\n\x0bHENCFGKDMEK\x18\r\x20\x01(\
    \x0b2\x0c.EAHJNKMLDHGH\0R\x0bHENCFGKDMEK\x120\n\x0bNIPGEFPKBJG\x18\x0e\
    \x20\x01(\x0b2\x0c.CKIDOMIINKIH\0R\x0bNIPGEFPKBJG\x120\n\x0bLOEHJNMPJAK\
    \x18\x01\x20\x01(\x0b2\x0c.CKIDOMIINKIH\0R\x0bLOEHJNMPJAK\x120\n\x0bCAFC\
    HIBNLNM\x18\x06\x20\x01(\x0b2\x0c.GJNPFNDEHGLH\0R\x0bCAFCHIBNLNM\x120\n\
    \x0bKABHLAEPBHC\x18\x03\x20\x01(\x0b2\x0c.NAJJJDCIDOMH\0R\x0bKABHLAEPBHC\
    \x120\n\x0bJOABIMPBDPA\x18\x04\x20\x01(\x0b2\x0c.EAHJNKMLDHGH\0R\x0bJOAB\
    IMPBDPA\x120\n\x0bGDGIJKBBBNE\x18\x02\x20\x01(\x0b2\x0c.CKIDOMIINKIH\0R\
    \x0bGDGIJKBBBNE\x120\n\x0bJPJICBLLLAL\x18\x0f\x20\x01(\x0b2\x0c.DOGNBLOF\
    DOLH\0R\x0bJPJICBLLLALB\r\n\x0bIIGBPEOBFFHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::BMKBIJDAEPM::file_descriptor().clone());
            deps.push(super::CKIDOMIINKI::file_descriptor().clone());
            deps.push(super::DOGNBLOFDOL::file_descriptor().clone());
            deps.push(super::EAHJNKMLDHG::file_descriptor().clone());
            deps.push(super::GJNPFNDEHGL::file_descriptor().clone());
            deps.push(super::MONFGAKJBGN::file_descriptor().clone());
            deps.push(super::NAJJJDCIDOM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JLBBLNCEJPP::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
