// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HIAAMAPMJIA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HIAAMAPMJIA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HIAAMAPMJIA {
    // message oneof groups
    pub ELPNOOCAFBE: ::std::option::Option<hiaamapmjia::ELPNOOCAFBE>,
    // special fields
    // @@protoc_insertion_point(special_field:HIAAMAPMJIA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HIAAMAPMJIA {
    fn default() -> &'a HIAAMAPMJIA {
        <HIAAMAPMJIA as ::protobuf::Message>::default_instance()
    }
}

impl HIAAMAPMJIA {
    pub fn new() -> HIAAMAPMJIA {
        ::std::default::Default::default()
    }

    // .PKAAOLAGDJC AFIBLIMJCLJ = 5;

    pub fn AFIBLIMJCLJ(&self) -> &super::PKAAOLAGDJC::PKAAOLAGDJC {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(ref v)) => v,
            _ => <super::PKAAOLAGDJC::PKAAOLAGDJC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AFIBLIMJCLJ(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_AFIBLIMJCLJ(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AFIBLIMJCLJ(&mut self, v: super::PKAAOLAGDJC::PKAAOLAGDJC) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AFIBLIMJCLJ(&mut self) -> &mut super::PKAAOLAGDJC::PKAAOLAGDJC {
        if let ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(super::PKAAOLAGDJC::PKAAOLAGDJC::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AFIBLIMJCLJ(&mut self) -> super::PKAAOLAGDJC::PKAAOLAGDJC {
        if self.has_AFIBLIMJCLJ() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PKAAOLAGDJC::PKAAOLAGDJC::new()
        }
    }

    // .BOHEIGLEOON FIDGGPOOEOC = 6;

    pub fn FIDGGPOOEOC(&self) -> &super::BOHEIGLEOON::BOHEIGLEOON {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(ref v)) => v,
            _ => <super::BOHEIGLEOON::BOHEIGLEOON as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FIDGGPOOEOC(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_FIDGGPOOEOC(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FIDGGPOOEOC(&mut self, v: super::BOHEIGLEOON::BOHEIGLEOON) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FIDGGPOOEOC(&mut self) -> &mut super::BOHEIGLEOON::BOHEIGLEOON {
        if let ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(super::BOHEIGLEOON::BOHEIGLEOON::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FIDGGPOOEOC(&mut self) -> super::BOHEIGLEOON::BOHEIGLEOON {
        if self.has_FIDGGPOOEOC() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BOHEIGLEOON::BOHEIGLEOON::new()
        }
    }

    // .BOHEIGLEOON LPCICEOFNIG = 2;

    pub fn LPCICEOFNIG(&self) -> &super::BOHEIGLEOON::BOHEIGLEOON {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(ref v)) => v,
            _ => <super::BOHEIGLEOON::BOHEIGLEOON as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LPCICEOFNIG(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_LPCICEOFNIG(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LPCICEOFNIG(&mut self, v: super::BOHEIGLEOON::BOHEIGLEOON) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LPCICEOFNIG(&mut self) -> &mut super::BOHEIGLEOON::BOHEIGLEOON {
        if let ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(super::BOHEIGLEOON::BOHEIGLEOON::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LPCICEOFNIG(&mut self) -> super::BOHEIGLEOON::BOHEIGLEOON {
        if self.has_LPCICEOFNIG() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BOHEIGLEOON::BOHEIGLEOON::new()
        }
    }

    // .KLOLLKLLFPA INEKPCGLEEB = 11;

    pub fn INEKPCGLEEB(&self) -> &super::KLOLLKLLFPA::KLOLLKLLFPA {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(ref v)) => v,
            _ => <super::KLOLLKLLFPA::KLOLLKLLFPA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_INEKPCGLEEB(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_INEKPCGLEEB(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_INEKPCGLEEB(&mut self, v: super::KLOLLKLLFPA::KLOLLKLLFPA) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_INEKPCGLEEB(&mut self) -> &mut super::KLOLLKLLFPA::KLOLLKLLFPA {
        if let ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(super::KLOLLKLLFPA::KLOLLKLLFPA::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_INEKPCGLEEB(&mut self) -> super::KLOLLKLLFPA::KLOLLKLLFPA {
        if self.has_INEKPCGLEEB() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KLOLLKLLFPA::KLOLLKLLFPA::new()
        }
    }

    // .OMEOPMDBKOB FKCCLAAOMMC = 8;

    pub fn FKCCLAAOMMC(&self) -> &super::OMEOPMDBKOB::OMEOPMDBKOB {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(ref v)) => v,
            _ => <super::OMEOPMDBKOB::OMEOPMDBKOB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FKCCLAAOMMC(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_FKCCLAAOMMC(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FKCCLAAOMMC(&mut self, v: super::OMEOPMDBKOB::OMEOPMDBKOB) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FKCCLAAOMMC(&mut self) -> &mut super::OMEOPMDBKOB::OMEOPMDBKOB {
        if let ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(super::OMEOPMDBKOB::OMEOPMDBKOB::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FKCCLAAOMMC(&mut self) -> super::OMEOPMDBKOB::OMEOPMDBKOB {
        if self.has_FKCCLAAOMMC() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMEOPMDBKOB::OMEOPMDBKOB::new()
        }
    }

    // .NDDBKIHEOPD DBLJOBNHPHF = 4;

    pub fn DBLJOBNHPHF(&self) -> &super::NDDBKIHEOPD::NDDBKIHEOPD {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(ref v)) => v,
            _ => <super::NDDBKIHEOPD::NDDBKIHEOPD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DBLJOBNHPHF(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_DBLJOBNHPHF(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DBLJOBNHPHF(&mut self, v: super::NDDBKIHEOPD::NDDBKIHEOPD) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DBLJOBNHPHF(&mut self) -> &mut super::NDDBKIHEOPD::NDDBKIHEOPD {
        if let ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(super::NDDBKIHEOPD::NDDBKIHEOPD::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DBLJOBNHPHF(&mut self) -> super::NDDBKIHEOPD::NDDBKIHEOPD {
        if self.has_DBLJOBNHPHF() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NDDBKIHEOPD::NDDBKIHEOPD::new()
        }
    }

    // .POBNDLOOKCI NECEAJDCOLD = 12;

    pub fn NECEAJDCOLD(&self) -> &super::POBNDLOOKCI::POBNDLOOKCI {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(ref v)) => v,
            _ => <super::POBNDLOOKCI::POBNDLOOKCI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NECEAJDCOLD(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_NECEAJDCOLD(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NECEAJDCOLD(&mut self, v: super::POBNDLOOKCI::POBNDLOOKCI) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NECEAJDCOLD(&mut self) -> &mut super::POBNDLOOKCI::POBNDLOOKCI {
        if let ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(super::POBNDLOOKCI::POBNDLOOKCI::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NECEAJDCOLD(&mut self) -> super::POBNDLOOKCI::POBNDLOOKCI {
        if self.has_NECEAJDCOLD() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::POBNDLOOKCI::POBNDLOOKCI::new()
        }
    }

    // uint32 OJJGDMFPMCO = 13;

    pub fn OJJGDMFPMCO(&self) -> u32 {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::OJJGDMFPMCO(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_OJJGDMFPMCO(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_OJJGDMFPMCO(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::OJJGDMFPMCO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OJJGDMFPMCO(&mut self, v: u32) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::OJJGDMFPMCO(v))
    }

    // uint32 APKOPANFCFI = 331;

    pub fn APKOPANFCFI(&self) -> u32 {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::APKOPANFCFI(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_APKOPANFCFI(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_APKOPANFCFI(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::APKOPANFCFI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_APKOPANFCFI(&mut self, v: u32) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::APKOPANFCFI(v))
    }

    // .ENBCCINOJNE PFMFFIOCJLJ = 1909;

    pub fn PFMFFIOCJLJ(&self) -> &super::ENBCCINOJNE::ENBCCINOJNE {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(ref v)) => v,
            _ => <super::ENBCCINOJNE::ENBCCINOJNE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PFMFFIOCJLJ(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_PFMFFIOCJLJ(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PFMFFIOCJLJ(&mut self, v: super::ENBCCINOJNE::ENBCCINOJNE) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PFMFFIOCJLJ(&mut self) -> &mut super::ENBCCINOJNE::ENBCCINOJNE {
        if let ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(super::ENBCCINOJNE::ENBCCINOJNE::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PFMFFIOCJLJ(&mut self) -> super::ENBCCINOJNE::ENBCCINOJNE {
        if self.has_PFMFFIOCJLJ() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ENBCCINOJNE::ENBCCINOJNE::new()
        }
    }

    // .IHEMHBKFEOB MNOHAJNGPJC = 479;

    pub fn MNOHAJNGPJC(&self) -> &super::IHEMHBKFEOB::IHEMHBKFEOB {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(ref v)) => v,
            _ => <super::IHEMHBKFEOB::IHEMHBKFEOB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MNOHAJNGPJC(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_MNOHAJNGPJC(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MNOHAJNGPJC(&mut self, v: super::IHEMHBKFEOB::IHEMHBKFEOB) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MNOHAJNGPJC(&mut self) -> &mut super::IHEMHBKFEOB::IHEMHBKFEOB {
        if let ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(_)) = self.ELPNOOCAFBE {
        } else {
            self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(super::IHEMHBKFEOB::IHEMHBKFEOB::new()));
        }
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MNOHAJNGPJC(&mut self) -> super::IHEMHBKFEOB::IHEMHBKFEOB {
        if self.has_MNOHAJNGPJC() {
            match self.ELPNOOCAFBE.take() {
                ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IHEMHBKFEOB::IHEMHBKFEOB::new()
        }
    }

    // uint32 DMMANMCNOMF = 1436;

    pub fn DMMANMCNOMF(&self) -> u32 {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DMMANMCNOMF(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_DMMANMCNOMF(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
    }

    pub fn has_DMMANMCNOMF(&self) -> bool {
        match self.ELPNOOCAFBE {
            ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DMMANMCNOMF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DMMANMCNOMF(&mut self, v: u32) {
        self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DMMANMCNOMF(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PKAAOLAGDJC::PKAAOLAGDJC>(
            "AFIBLIMJCLJ",
            HIAAMAPMJIA::has_AFIBLIMJCLJ,
            HIAAMAPMJIA::AFIBLIMJCLJ,
            HIAAMAPMJIA::mut_AFIBLIMJCLJ,
            HIAAMAPMJIA::set_AFIBLIMJCLJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BOHEIGLEOON::BOHEIGLEOON>(
            "FIDGGPOOEOC",
            HIAAMAPMJIA::has_FIDGGPOOEOC,
            HIAAMAPMJIA::FIDGGPOOEOC,
            HIAAMAPMJIA::mut_FIDGGPOOEOC,
            HIAAMAPMJIA::set_FIDGGPOOEOC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BOHEIGLEOON::BOHEIGLEOON>(
            "LPCICEOFNIG",
            HIAAMAPMJIA::has_LPCICEOFNIG,
            HIAAMAPMJIA::LPCICEOFNIG,
            HIAAMAPMJIA::mut_LPCICEOFNIG,
            HIAAMAPMJIA::set_LPCICEOFNIG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KLOLLKLLFPA::KLOLLKLLFPA>(
            "INEKPCGLEEB",
            HIAAMAPMJIA::has_INEKPCGLEEB,
            HIAAMAPMJIA::INEKPCGLEEB,
            HIAAMAPMJIA::mut_INEKPCGLEEB,
            HIAAMAPMJIA::set_INEKPCGLEEB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMEOPMDBKOB::OMEOPMDBKOB>(
            "FKCCLAAOMMC",
            HIAAMAPMJIA::has_FKCCLAAOMMC,
            HIAAMAPMJIA::FKCCLAAOMMC,
            HIAAMAPMJIA::mut_FKCCLAAOMMC,
            HIAAMAPMJIA::set_FKCCLAAOMMC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NDDBKIHEOPD::NDDBKIHEOPD>(
            "DBLJOBNHPHF",
            HIAAMAPMJIA::has_DBLJOBNHPHF,
            HIAAMAPMJIA::DBLJOBNHPHF,
            HIAAMAPMJIA::mut_DBLJOBNHPHF,
            HIAAMAPMJIA::set_DBLJOBNHPHF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::POBNDLOOKCI::POBNDLOOKCI>(
            "NECEAJDCOLD",
            HIAAMAPMJIA::has_NECEAJDCOLD,
            HIAAMAPMJIA::NECEAJDCOLD,
            HIAAMAPMJIA::mut_NECEAJDCOLD,
            HIAAMAPMJIA::set_NECEAJDCOLD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "OJJGDMFPMCO",
            HIAAMAPMJIA::has_OJJGDMFPMCO,
            HIAAMAPMJIA::OJJGDMFPMCO,
            HIAAMAPMJIA::set_OJJGDMFPMCO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "APKOPANFCFI",
            HIAAMAPMJIA::has_APKOPANFCFI,
            HIAAMAPMJIA::APKOPANFCFI,
            HIAAMAPMJIA::set_APKOPANFCFI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ENBCCINOJNE::ENBCCINOJNE>(
            "PFMFFIOCJLJ",
            HIAAMAPMJIA::has_PFMFFIOCJLJ,
            HIAAMAPMJIA::PFMFFIOCJLJ,
            HIAAMAPMJIA::mut_PFMFFIOCJLJ,
            HIAAMAPMJIA::set_PFMFFIOCJLJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IHEMHBKFEOB::IHEMHBKFEOB>(
            "MNOHAJNGPJC",
            HIAAMAPMJIA::has_MNOHAJNGPJC,
            HIAAMAPMJIA::MNOHAJNGPJC,
            HIAAMAPMJIA::mut_MNOHAJNGPJC,
            HIAAMAPMJIA::set_MNOHAJNGPJC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "DMMANMCNOMF",
            HIAAMAPMJIA::has_DMMANMCNOMF,
            HIAAMAPMJIA::DMMANMCNOMF,
            HIAAMAPMJIA::set_DMMANMCNOMF,
        ));
        oneofs.push(hiaamapmjia::ELPNOOCAFBE::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HIAAMAPMJIA>(
            "HIAAMAPMJIA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HIAAMAPMJIA {
    const NAME: &'static str = "HIAAMAPMJIA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                42 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(is.read_message()?));
                },
                50 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(is.read_message()?));
                },
                18 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(is.read_message()?));
                },
                90 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(is.read_message()?));
                },
                66 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(is.read_message()?));
                },
                34 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(is.read_message()?));
                },
                98 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(is.read_message()?));
                },
                104 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::OJJGDMFPMCO(is.read_uint32()?));
                },
                2648 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::APKOPANFCFI(is.read_uint32()?));
                },
                15274 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(is.read_message()?));
                },
                3834 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(is.read_message()?));
                },
                11488 => {
                    self.ELPNOOCAFBE = ::std::option::Option::Some(hiaamapmjia::ELPNOOCAFBE::DMMANMCNOMF(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ELPNOOCAFBE {
            match v {
                &hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hiaamapmjia::ELPNOOCAFBE::OJJGDMFPMCO(v) => {
                    my_size += ::protobuf::rt::uint32_size(13, v);
                },
                &hiaamapmjia::ELPNOOCAFBE::APKOPANFCFI(v) => {
                    my_size += ::protobuf::rt::uint32_size(331, v);
                },
                &hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hiaamapmjia::ELPNOOCAFBE::DMMANMCNOMF(v) => {
                    my_size += ::protobuf::rt::uint32_size(1436, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ELPNOOCAFBE {
            match v {
                &hiaamapmjia::ELPNOOCAFBE::AFIBLIMJCLJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::FIDGGPOOEOC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::LPCICEOFNIG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::INEKPCGLEEB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::FKCCLAAOMMC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::DBLJOBNHPHF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::NECEAJDCOLD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::OJJGDMFPMCO(v) => {
                    os.write_uint32(13, v)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::APKOPANFCFI(v) => {
                    os.write_uint32(331, v)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::PFMFFIOCJLJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1909, v, os)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::MNOHAJNGPJC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(479, v, os)?;
                },
                &hiaamapmjia::ELPNOOCAFBE::DMMANMCNOMF(v) => {
                    os.write_uint32(1436, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HIAAMAPMJIA {
        HIAAMAPMJIA::new()
    }

    fn clear(&mut self) {
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.ELPNOOCAFBE = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HIAAMAPMJIA {
        static instance: HIAAMAPMJIA = HIAAMAPMJIA {
            ELPNOOCAFBE: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HIAAMAPMJIA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HIAAMAPMJIA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HIAAMAPMJIA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HIAAMAPMJIA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HIAAMAPMJIA`
pub mod hiaamapmjia {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:HIAAMAPMJIA.ELPNOOCAFBE)
    pub enum ELPNOOCAFBE {
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.AFIBLIMJCLJ)
        AFIBLIMJCLJ(super::super::PKAAOLAGDJC::PKAAOLAGDJC),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.FIDGGPOOEOC)
        FIDGGPOOEOC(super::super::BOHEIGLEOON::BOHEIGLEOON),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.LPCICEOFNIG)
        LPCICEOFNIG(super::super::BOHEIGLEOON::BOHEIGLEOON),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.INEKPCGLEEB)
        INEKPCGLEEB(super::super::KLOLLKLLFPA::KLOLLKLLFPA),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.FKCCLAAOMMC)
        FKCCLAAOMMC(super::super::OMEOPMDBKOB::OMEOPMDBKOB),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.DBLJOBNHPHF)
        DBLJOBNHPHF(super::super::NDDBKIHEOPD::NDDBKIHEOPD),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.NECEAJDCOLD)
        NECEAJDCOLD(super::super::POBNDLOOKCI::POBNDLOOKCI),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.OJJGDMFPMCO)
        OJJGDMFPMCO(u32),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.APKOPANFCFI)
        APKOPANFCFI(u32),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.PFMFFIOCJLJ)
        PFMFFIOCJLJ(super::super::ENBCCINOJNE::ENBCCINOJNE),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.MNOHAJNGPJC)
        MNOHAJNGPJC(super::super::IHEMHBKFEOB::IHEMHBKFEOB),
        // @@protoc_insertion_point(oneof_field:HIAAMAPMJIA.DMMANMCNOMF)
        DMMANMCNOMF(u32),
    }

    impl ::protobuf::Oneof for ELPNOOCAFBE {
    }

    impl ::protobuf::OneofFull for ELPNOOCAFBE {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::HIAAMAPMJIA as ::protobuf::MessageFull>::descriptor().oneof_by_name("ELPNOOCAFBE").unwrap()).clone()
        }
    }

    impl ELPNOOCAFBE {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ELPNOOCAFBE>("ELPNOOCAFBE")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HIAAMAPMJIA.proto\x1a\x11BOHEIGLEOON.proto\x1a\x11ENBCCINOJNE.prot\
    o\x1a\x11IHEMHBKFEOB.proto\x1a\x11KLOLLKLLFPA.proto\x1a\x11NDDBKIHEOPD.p\
    roto\x1a\x11OMEOPMDBKOB.proto\x1a\x11PKAAOLAGDJC.proto\x1a\x11POBNDLOOKC\
    I.proto\"\xce\x04\n\x0bHIAAMAPMJIA\x120\n\x0bAFIBLIMJCLJ\x18\x05\x20\x01\
    (\x0b2\x0c.PKAAOLAGDJCH\0R\x0bAFIBLIMJCLJ\x120\n\x0bFIDGGPOOEOC\x18\x06\
    \x20\x01(\x0b2\x0c.BOHEIGLEOONH\0R\x0bFIDGGPOOEOC\x120\n\x0bLPCICEOFNIG\
    \x18\x02\x20\x01(\x0b2\x0c.BOHEIGLEOONH\0R\x0bLPCICEOFNIG\x120\n\x0bINEK\
    PCGLEEB\x18\x0b\x20\x01(\x0b2\x0c.KLOLLKLLFPAH\0R\x0bINEKPCGLEEB\x120\n\
    \x0bFKCCLAAOMMC\x18\x08\x20\x01(\x0b2\x0c.OMEOPMDBKOBH\0R\x0bFKCCLAAOMMC\
    \x120\n\x0bDBLJOBNHPHF\x18\x04\x20\x01(\x0b2\x0c.NDDBKIHEOPDH\0R\x0bDBLJ\
    OBNHPHF\x120\n\x0bNECEAJDCOLD\x18\x0c\x20\x01(\x0b2\x0c.POBNDLOOKCIH\0R\
    \x0bNECEAJDCOLD\x12\"\n\x0bOJJGDMFPMCO\x18\r\x20\x01(\rH\0R\x0bOJJGDMFPM\
    CO\x12#\n\x0bAPKOPANFCFI\x18\xcb\x02\x20\x01(\rH\0R\x0bAPKOPANFCFI\x121\
    \n\x0bPFMFFIOCJLJ\x18\xf5\x0e\x20\x01(\x0b2\x0c.ENBCCINOJNEH\0R\x0bPFMFF\
    IOCJLJ\x121\n\x0bMNOHAJNGPJC\x18\xdf\x03\x20\x01(\x0b2\x0c.IHEMHBKFEOBH\
    \0R\x0bMNOHAJNGPJC\x12#\n\x0bDMMANMCNOMF\x18\x9c\x0b\x20\x01(\rH\0R\x0bD\
    MMANMCNOMFB\r\n\x0bELPNOOCAFBEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::BOHEIGLEOON::file_descriptor().clone());
            deps.push(super::ENBCCINOJNE::file_descriptor().clone());
            deps.push(super::IHEMHBKFEOB::file_descriptor().clone());
            deps.push(super::KLOLLKLLFPA::file_descriptor().clone());
            deps.push(super::NDDBKIHEOPD::file_descriptor().clone());
            deps.push(super::OMEOPMDBKOB::file_descriptor().clone());
            deps.push(super::PKAAOLAGDJC::file_descriptor().clone());
            deps.push(super::POBNDLOOKCI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HIAAMAPMJIA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
