// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LCLCENKCILA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LCLCENKCILA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LCLCENKCILA {
    // message fields
    // @@protoc_insertion_point(field:LCLCENKCILA.LCLCDINHHNP)
    pub LCLCDINHHNP: u32,
    // @@protoc_insertion_point(field:LCLCENKCILA.BCBBGLCMDPG)
    pub BCBBGLCMDPG: ::std::string::String,
    // @@protoc_insertion_point(field:LCLCENKCILA.NKEMIDOEGOG)
    pub NKEMIDOEGOG: u32,
    // @@protoc_insertion_point(field:LCLCENKCILA.GIHCNBKELDI)
    pub GIHCNBKELDI: u32,
    // @@protoc_insertion_point(field:LCLCENKCILA.HNIKOCPBKAI)
    pub HNIKOCPBKAI: u32,
    // @@protoc_insertion_point(field:LCLCENKCILA.GBCBAOLECKP)
    pub GBCBAOLECKP: u32,
    // @@protoc_insertion_point(field:LCLCENKCILA.EHKNAGAOGHB)
    pub EHKNAGAOGHB: u32,
    // @@protoc_insertion_point(field:LCLCENKCILA.NJMAMCPGEIK)
    pub NJMAMCPGEIK: u32,
    // @@protoc_insertion_point(field:LCLCENKCILA.DMPHGMKHLNG)
    pub DMPHGMKHLNG: u32,
    // special fields
    // @@protoc_insertion_point(special_field:LCLCENKCILA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LCLCENKCILA {
    fn default() -> &'a LCLCENKCILA {
        <LCLCENKCILA as ::protobuf::Message>::default_instance()
    }
}

impl LCLCENKCILA {
    pub fn new() -> LCLCENKCILA {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LCLCDINHHNP",
            |m: &LCLCENKCILA| { &m.LCLCDINHHNP },
            |m: &mut LCLCENKCILA| { &mut m.LCLCDINHHNP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BCBBGLCMDPG",
            |m: &LCLCENKCILA| { &m.BCBBGLCMDPG },
            |m: &mut LCLCENKCILA| { &mut m.BCBBGLCMDPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NKEMIDOEGOG",
            |m: &LCLCENKCILA| { &m.NKEMIDOEGOG },
            |m: &mut LCLCENKCILA| { &mut m.NKEMIDOEGOG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GIHCNBKELDI",
            |m: &LCLCENKCILA| { &m.GIHCNBKELDI },
            |m: &mut LCLCENKCILA| { &mut m.GIHCNBKELDI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HNIKOCPBKAI",
            |m: &LCLCENKCILA| { &m.HNIKOCPBKAI },
            |m: &mut LCLCENKCILA| { &mut m.HNIKOCPBKAI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GBCBAOLECKP",
            |m: &LCLCENKCILA| { &m.GBCBAOLECKP },
            |m: &mut LCLCENKCILA| { &mut m.GBCBAOLECKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EHKNAGAOGHB",
            |m: &LCLCENKCILA| { &m.EHKNAGAOGHB },
            |m: &mut LCLCENKCILA| { &mut m.EHKNAGAOGHB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NJMAMCPGEIK",
            |m: &LCLCENKCILA| { &m.NJMAMCPGEIK },
            |m: &mut LCLCENKCILA| { &mut m.NJMAMCPGEIK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DMPHGMKHLNG",
            |m: &LCLCENKCILA| { &m.DMPHGMKHLNG },
            |m: &mut LCLCENKCILA| { &mut m.DMPHGMKHLNG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LCLCENKCILA>(
            "LCLCENKCILA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LCLCENKCILA {
    const NAME: &'static str = "LCLCENKCILA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.LCLCDINHHNP = is.read_uint32()?;
                },
                18 => {
                    self.BCBBGLCMDPG = is.read_string()?;
                },
                24 => {
                    self.NKEMIDOEGOG = is.read_uint32()?;
                },
                32 => {
                    self.GIHCNBKELDI = is.read_uint32()?;
                },
                40 => {
                    self.HNIKOCPBKAI = is.read_uint32()?;
                },
                48 => {
                    self.GBCBAOLECKP = is.read_uint32()?;
                },
                56 => {
                    self.EHKNAGAOGHB = is.read_uint32()?;
                },
                64 => {
                    self.NJMAMCPGEIK = is.read_uint32()?;
                },
                72 => {
                    self.DMPHGMKHLNG = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.LCLCDINHHNP != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.LCLCDINHHNP);
        }
        if !self.BCBBGLCMDPG.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.BCBBGLCMDPG);
        }
        if self.NKEMIDOEGOG != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.NKEMIDOEGOG);
        }
        if self.GIHCNBKELDI != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.GIHCNBKELDI);
        }
        if self.HNIKOCPBKAI != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.HNIKOCPBKAI);
        }
        if self.GBCBAOLECKP != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.GBCBAOLECKP);
        }
        if self.EHKNAGAOGHB != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.EHKNAGAOGHB);
        }
        if self.NJMAMCPGEIK != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.NJMAMCPGEIK);
        }
        if self.DMPHGMKHLNG != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.DMPHGMKHLNG);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.LCLCDINHHNP != 0 {
            os.write_uint32(1, self.LCLCDINHHNP)?;
        }
        if !self.BCBBGLCMDPG.is_empty() {
            os.write_string(2, &self.BCBBGLCMDPG)?;
        }
        if self.NKEMIDOEGOG != 0 {
            os.write_uint32(3, self.NKEMIDOEGOG)?;
        }
        if self.GIHCNBKELDI != 0 {
            os.write_uint32(4, self.GIHCNBKELDI)?;
        }
        if self.HNIKOCPBKAI != 0 {
            os.write_uint32(5, self.HNIKOCPBKAI)?;
        }
        if self.GBCBAOLECKP != 0 {
            os.write_uint32(6, self.GBCBAOLECKP)?;
        }
        if self.EHKNAGAOGHB != 0 {
            os.write_uint32(7, self.EHKNAGAOGHB)?;
        }
        if self.NJMAMCPGEIK != 0 {
            os.write_uint32(8, self.NJMAMCPGEIK)?;
        }
        if self.DMPHGMKHLNG != 0 {
            os.write_uint32(9, self.DMPHGMKHLNG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LCLCENKCILA {
        LCLCENKCILA::new()
    }

    fn clear(&mut self) {
        self.LCLCDINHHNP = 0;
        self.BCBBGLCMDPG.clear();
        self.NKEMIDOEGOG = 0;
        self.GIHCNBKELDI = 0;
        self.HNIKOCPBKAI = 0;
        self.GBCBAOLECKP = 0;
        self.EHKNAGAOGHB = 0;
        self.NJMAMCPGEIK = 0;
        self.DMPHGMKHLNG = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LCLCENKCILA {
        static instance: LCLCENKCILA = LCLCENKCILA {
            LCLCDINHHNP: 0,
            BCBBGLCMDPG: ::std::string::String::new(),
            NKEMIDOEGOG: 0,
            GIHCNBKELDI: 0,
            HNIKOCPBKAI: 0,
            GBCBAOLECKP: 0,
            EHKNAGAOGHB: 0,
            NJMAMCPGEIK: 0,
            DMPHGMKHLNG: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LCLCENKCILA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LCLCENKCILA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LCLCENKCILA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LCLCENKCILA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LCLCENKCILA.proto\"\xbf\x02\n\x0bLCLCENKCILA\x12\x20\n\x0bLCLCDINH\
    HNP\x18\x01\x20\x01(\rR\x0bLCLCDINHHNP\x12\x20\n\x0bBCBBGLCMDPG\x18\x02\
    \x20\x01(\tR\x0bBCBBGLCMDPG\x12\x20\n\x0bNKEMIDOEGOG\x18\x03\x20\x01(\rR\
    \x0bNKEMIDOEGOG\x12\x20\n\x0bGIHCNBKELDI\x18\x04\x20\x01(\rR\x0bGIHCNBKE\
    LDI\x12\x20\n\x0bHNIKOCPBKAI\x18\x05\x20\x01(\rR\x0bHNIKOCPBKAI\x12\x20\
    \n\x0bGBCBAOLECKP\x18\x06\x20\x01(\rR\x0bGBCBAOLECKP\x12\x20\n\x0bEHKNAG\
    AOGHB\x18\x07\x20\x01(\rR\x0bEHKNAGAOGHB\x12\x20\n\x0bNJMAMCPGEIK\x18\
    \x08\x20\x01(\rR\x0bNJMAMCPGEIK\x12\x20\n\x0bDMPHGMKHLNG\x18\t\x20\x01(\
    \rR\x0bDMPHGMKHLNGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LCLCENKCILA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
