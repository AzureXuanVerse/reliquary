// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EMLPKGJNAJK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EMLPKGJNAJK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EMLPKGJNAJK {
    // message fields
    // @@protoc_insertion_point(field:EMLPKGJNAJK.JKGBGFOPMHM)
    pub JKGBGFOPMHM: u32,
    // @@protoc_insertion_point(field:EMLPKGJNAJK.MHFMCEICFPJ)
    pub MHFMCEICFPJ: bool,
    // @@protoc_insertion_point(field:EMLPKGJNAJK.MCNHHCHABOA)
    pub MCNHHCHABOA: u32,
    // @@protoc_insertion_point(field:EMLPKGJNAJK.FINCLAOCOGH)
    pub FINCLAOCOGH: u32,
    // special fields
    // @@protoc_insertion_point(special_field:EMLPKGJNAJK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EMLPKGJNAJK {
    fn default() -> &'a EMLPKGJNAJK {
        <EMLPKGJNAJK as ::protobuf::Message>::default_instance()
    }
}

impl EMLPKGJNAJK {
    pub fn new() -> EMLPKGJNAJK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JKGBGFOPMHM",
            |m: &EMLPKGJNAJK| { &m.JKGBGFOPMHM },
            |m: &mut EMLPKGJNAJK| { &mut m.JKGBGFOPMHM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MHFMCEICFPJ",
            |m: &EMLPKGJNAJK| { &m.MHFMCEICFPJ },
            |m: &mut EMLPKGJNAJK| { &mut m.MHFMCEICFPJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MCNHHCHABOA",
            |m: &EMLPKGJNAJK| { &m.MCNHHCHABOA },
            |m: &mut EMLPKGJNAJK| { &mut m.MCNHHCHABOA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FINCLAOCOGH",
            |m: &EMLPKGJNAJK| { &m.FINCLAOCOGH },
            |m: &mut EMLPKGJNAJK| { &mut m.FINCLAOCOGH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EMLPKGJNAJK>(
            "EMLPKGJNAJK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EMLPKGJNAJK {
    const NAME: &'static str = "EMLPKGJNAJK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.JKGBGFOPMHM = is.read_uint32()?;
                },
                16 => {
                    self.MHFMCEICFPJ = is.read_bool()?;
                },
                24 => {
                    self.MCNHHCHABOA = is.read_uint32()?;
                },
                32 => {
                    self.FINCLAOCOGH = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.JKGBGFOPMHM != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.JKGBGFOPMHM);
        }
        if self.MHFMCEICFPJ != false {
            my_size += 1 + 1;
        }
        if self.MCNHHCHABOA != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.MCNHHCHABOA);
        }
        if self.FINCLAOCOGH != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.FINCLAOCOGH);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.JKGBGFOPMHM != 0 {
            os.write_uint32(1, self.JKGBGFOPMHM)?;
        }
        if self.MHFMCEICFPJ != false {
            os.write_bool(2, self.MHFMCEICFPJ)?;
        }
        if self.MCNHHCHABOA != 0 {
            os.write_uint32(3, self.MCNHHCHABOA)?;
        }
        if self.FINCLAOCOGH != 0 {
            os.write_uint32(4, self.FINCLAOCOGH)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EMLPKGJNAJK {
        EMLPKGJNAJK::new()
    }

    fn clear(&mut self) {
        self.JKGBGFOPMHM = 0;
        self.MHFMCEICFPJ = false;
        self.MCNHHCHABOA = 0;
        self.FINCLAOCOGH = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EMLPKGJNAJK {
        static instance: EMLPKGJNAJK = EMLPKGJNAJK {
            JKGBGFOPMHM: 0,
            MHFMCEICFPJ: false,
            MCNHHCHABOA: 0,
            FINCLAOCOGH: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EMLPKGJNAJK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EMLPKGJNAJK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EMLPKGJNAJK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EMLPKGJNAJK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EMLPKGJNAJK.proto\"\x95\x01\n\x0bEMLPKGJNAJK\x12\x20\n\x0bJKGBGFOP\
    MHM\x18\x01\x20\x01(\rR\x0bJKGBGFOPMHM\x12\x20\n\x0bMHFMCEICFPJ\x18\x02\
    \x20\x01(\x08R\x0bMHFMCEICFPJ\x12\x20\n\x0bMCNHHCHABOA\x18\x03\x20\x01(\
    \rR\x0bMCNHHCHABOA\x12\x20\n\x0bFINCLAOCOGH\x18\x04\x20\x01(\rR\x0bFINCL\
    AOCOGHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EMLPKGJNAJK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
