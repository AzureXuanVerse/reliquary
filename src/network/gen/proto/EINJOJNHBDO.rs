// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EINJOJNHBDO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EINJOJNHBDO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EINJOJNHBDO {
    // message fields
    // @@protoc_insertion_point(field:EINJOJNHBDO.PNCMIMEPLPA)
    pub PNCMIMEPLPA: ::std::vec::Vec<super::BCIHKEKHFEE::BCIHKEKHFEE>,
    // @@protoc_insertion_point(field:EINJOJNHBDO.MGAICFJKNEJ)
    pub MGAICFJKNEJ: u32,
    // @@protoc_insertion_point(field:EINJOJNHBDO.OIMDCMIJBFD)
    pub OIMDCMIJBFD: u32,
    // @@protoc_insertion_point(field:EINJOJNHBDO.JCOHFKJGPGF)
    pub JCOHFKJGPGF: u32,
    // @@protoc_insertion_point(field:EINJOJNHBDO.ANIICEJBFMI)
    pub ANIICEJBFMI: u32,
    // @@protoc_insertion_point(field:EINJOJNHBDO.LLBICIFCPPM)
    pub LLBICIFCPPM: u32,
    // @@protoc_insertion_point(field:EINJOJNHBDO.JBKHLDIOBCA)
    pub JBKHLDIOBCA: u32,
    // @@protoc_insertion_point(field:EINJOJNHBDO.IFJNGOLCGPI)
    pub IFJNGOLCGPI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EINJOJNHBDO.HDIHMDPGHMB)
    pub HDIHMDPGHMB: u32,
    // @@protoc_insertion_point(field:EINJOJNHBDO.FGIDGHFMJAF)
    pub FGIDGHFMJAF: u32,
    // @@protoc_insertion_point(field:EINJOJNHBDO.HAEONCCBKEG)
    pub HAEONCCBKEG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EINJOJNHBDO.MMLANFIFPJJ)
    pub MMLANFIFPJJ: ::std::vec::Vec<super::JMMFBCMMKLL::JMMFBCMMKLL>,
    // @@protoc_insertion_point(field:EINJOJNHBDO.IJLNNIGIOEA)
    pub IJLNNIGIOEA: u32,
    // special fields
    // @@protoc_insertion_point(special_field:EINJOJNHBDO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EINJOJNHBDO {
    fn default() -> &'a EINJOJNHBDO {
        <EINJOJNHBDO as ::protobuf::Message>::default_instance()
    }
}

impl EINJOJNHBDO {
    pub fn new() -> EINJOJNHBDO {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PNCMIMEPLPA",
            |m: &EINJOJNHBDO| { &m.PNCMIMEPLPA },
            |m: &mut EINJOJNHBDO| { &mut m.PNCMIMEPLPA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MGAICFJKNEJ",
            |m: &EINJOJNHBDO| { &m.MGAICFJKNEJ },
            |m: &mut EINJOJNHBDO| { &mut m.MGAICFJKNEJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OIMDCMIJBFD",
            |m: &EINJOJNHBDO| { &m.OIMDCMIJBFD },
            |m: &mut EINJOJNHBDO| { &mut m.OIMDCMIJBFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JCOHFKJGPGF",
            |m: &EINJOJNHBDO| { &m.JCOHFKJGPGF },
            |m: &mut EINJOJNHBDO| { &mut m.JCOHFKJGPGF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ANIICEJBFMI",
            |m: &EINJOJNHBDO| { &m.ANIICEJBFMI },
            |m: &mut EINJOJNHBDO| { &mut m.ANIICEJBFMI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LLBICIFCPPM",
            |m: &EINJOJNHBDO| { &m.LLBICIFCPPM },
            |m: &mut EINJOJNHBDO| { &mut m.LLBICIFCPPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JBKHLDIOBCA",
            |m: &EINJOJNHBDO| { &m.JBKHLDIOBCA },
            |m: &mut EINJOJNHBDO| { &mut m.JBKHLDIOBCA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IFJNGOLCGPI",
            |m: &EINJOJNHBDO| { &m.IFJNGOLCGPI },
            |m: &mut EINJOJNHBDO| { &mut m.IFJNGOLCGPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HDIHMDPGHMB",
            |m: &EINJOJNHBDO| { &m.HDIHMDPGHMB },
            |m: &mut EINJOJNHBDO| { &mut m.HDIHMDPGHMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FGIDGHFMJAF",
            |m: &EINJOJNHBDO| { &m.FGIDGHFMJAF },
            |m: &mut EINJOJNHBDO| { &mut m.FGIDGHFMJAF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HAEONCCBKEG",
            |m: &EINJOJNHBDO| { &m.HAEONCCBKEG },
            |m: &mut EINJOJNHBDO| { &mut m.HAEONCCBKEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MMLANFIFPJJ",
            |m: &EINJOJNHBDO| { &m.MMLANFIFPJJ },
            |m: &mut EINJOJNHBDO| { &mut m.MMLANFIFPJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IJLNNIGIOEA",
            |m: &EINJOJNHBDO| { &m.IJLNNIGIOEA },
            |m: &mut EINJOJNHBDO| { &mut m.IJLNNIGIOEA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EINJOJNHBDO>(
            "EINJOJNHBDO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EINJOJNHBDO {
    const NAME: &'static str = "EINJOJNHBDO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                938 => {
                    self.PNCMIMEPLPA.push(is.read_message()?);
                },
                56 => {
                    self.MGAICFJKNEJ = is.read_uint32()?;
                },
                48 => {
                    self.OIMDCMIJBFD = is.read_uint32()?;
                },
                40 => {
                    self.JCOHFKJGPGF = is.read_uint32()?;
                },
                32 => {
                    self.ANIICEJBFMI = is.read_uint32()?;
                },
                24 => {
                    self.LLBICIFCPPM = is.read_uint32()?;
                },
                120 => {
                    self.JBKHLDIOBCA = is.read_uint32()?;
                },
                3042 => {
                    is.read_repeated_packed_uint32_into(&mut self.IFJNGOLCGPI)?;
                },
                3040 => {
                    self.IFJNGOLCGPI.push(is.read_uint32()?);
                },
                8 => {
                    self.HDIHMDPGHMB = is.read_uint32()?;
                },
                104 => {
                    self.FGIDGHFMJAF = is.read_uint32()?;
                },
                3762 => {
                    is.read_repeated_packed_uint32_into(&mut self.HAEONCCBKEG)?;
                },
                3760 => {
                    self.HAEONCCBKEG.push(is.read_uint32()?);
                },
                4378 => {
                    self.MMLANFIFPJJ.push(is.read_message()?);
                },
                72 => {
                    self.IJLNNIGIOEA = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.PNCMIMEPLPA {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.MGAICFJKNEJ != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.MGAICFJKNEJ);
        }
        if self.OIMDCMIJBFD != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.OIMDCMIJBFD);
        }
        if self.JCOHFKJGPGF != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.JCOHFKJGPGF);
        }
        if self.ANIICEJBFMI != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.ANIICEJBFMI);
        }
        if self.LLBICIFCPPM != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.LLBICIFCPPM);
        }
        if self.JBKHLDIOBCA != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.JBKHLDIOBCA);
        }
        for value in &self.IFJNGOLCGPI {
            my_size += ::protobuf::rt::uint32_size(380, *value);
        };
        if self.HDIHMDPGHMB != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.HDIHMDPGHMB);
        }
        if self.FGIDGHFMJAF != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.FGIDGHFMJAF);
        }
        for value in &self.HAEONCCBKEG {
            my_size += ::protobuf::rt::uint32_size(470, *value);
        };
        for value in &self.MMLANFIFPJJ {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.IJLNNIGIOEA != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.IJLNNIGIOEA);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.PNCMIMEPLPA {
            ::protobuf::rt::write_message_field_with_cached_size(117, v, os)?;
        };
        if self.MGAICFJKNEJ != 0 {
            os.write_uint32(7, self.MGAICFJKNEJ)?;
        }
        if self.OIMDCMIJBFD != 0 {
            os.write_uint32(6, self.OIMDCMIJBFD)?;
        }
        if self.JCOHFKJGPGF != 0 {
            os.write_uint32(5, self.JCOHFKJGPGF)?;
        }
        if self.ANIICEJBFMI != 0 {
            os.write_uint32(4, self.ANIICEJBFMI)?;
        }
        if self.LLBICIFCPPM != 0 {
            os.write_uint32(3, self.LLBICIFCPPM)?;
        }
        if self.JBKHLDIOBCA != 0 {
            os.write_uint32(15, self.JBKHLDIOBCA)?;
        }
        for v in &self.IFJNGOLCGPI {
            os.write_uint32(380, *v)?;
        };
        if self.HDIHMDPGHMB != 0 {
            os.write_uint32(1, self.HDIHMDPGHMB)?;
        }
        if self.FGIDGHFMJAF != 0 {
            os.write_uint32(13, self.FGIDGHFMJAF)?;
        }
        for v in &self.HAEONCCBKEG {
            os.write_uint32(470, *v)?;
        };
        for v in &self.MMLANFIFPJJ {
            ::protobuf::rt::write_message_field_with_cached_size(547, v, os)?;
        };
        if self.IJLNNIGIOEA != 0 {
            os.write_uint32(9, self.IJLNNIGIOEA)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EINJOJNHBDO {
        EINJOJNHBDO::new()
    }

    fn clear(&mut self) {
        self.PNCMIMEPLPA.clear();
        self.MGAICFJKNEJ = 0;
        self.OIMDCMIJBFD = 0;
        self.JCOHFKJGPGF = 0;
        self.ANIICEJBFMI = 0;
        self.LLBICIFCPPM = 0;
        self.JBKHLDIOBCA = 0;
        self.IFJNGOLCGPI.clear();
        self.HDIHMDPGHMB = 0;
        self.FGIDGHFMJAF = 0;
        self.HAEONCCBKEG.clear();
        self.MMLANFIFPJJ.clear();
        self.IJLNNIGIOEA = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EINJOJNHBDO {
        static instance: EINJOJNHBDO = EINJOJNHBDO {
            PNCMIMEPLPA: ::std::vec::Vec::new(),
            MGAICFJKNEJ: 0,
            OIMDCMIJBFD: 0,
            JCOHFKJGPGF: 0,
            ANIICEJBFMI: 0,
            LLBICIFCPPM: 0,
            JBKHLDIOBCA: 0,
            IFJNGOLCGPI: ::std::vec::Vec::new(),
            HDIHMDPGHMB: 0,
            FGIDGHFMJAF: 0,
            HAEONCCBKEG: ::std::vec::Vec::new(),
            MMLANFIFPJJ: ::std::vec::Vec::new(),
            IJLNNIGIOEA: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EINJOJNHBDO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EINJOJNHBDO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EINJOJNHBDO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EINJOJNHBDO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EINJOJNHBDO.proto\x1a\x11BCIHKEKHFEE.proto\x1a\x11JMMFBCMMKLL.prot\
    o\"\xe6\x03\n\x0bEINJOJNHBDO\x12.\n\x0bPNCMIMEPLPA\x18u\x20\x03(\x0b2\
    \x0c.BCIHKEKHFEER\x0bPNCMIMEPLPA\x12\x20\n\x0bMGAICFJKNEJ\x18\x07\x20\
    \x01(\rR\x0bMGAICFJKNEJ\x12\x20\n\x0bOIMDCMIJBFD\x18\x06\x20\x01(\rR\x0b\
    OIMDCMIJBFD\x12\x20\n\x0bJCOHFKJGPGF\x18\x05\x20\x01(\rR\x0bJCOHFKJGPGF\
    \x12\x20\n\x0bANIICEJBFMI\x18\x04\x20\x01(\rR\x0bANIICEJBFMI\x12\x20\n\
    \x0bLLBICIFCPPM\x18\x03\x20\x01(\rR\x0bLLBICIFCPPM\x12\x20\n\x0bJBKHLDIO\
    BCA\x18\x0f\x20\x01(\rR\x0bJBKHLDIOBCA\x12!\n\x0bIFJNGOLCGPI\x18\xfc\x02\
    \x20\x03(\rR\x0bIFJNGOLCGPI\x12\x20\n\x0bHDIHMDPGHMB\x18\x01\x20\x01(\rR\
    \x0bHDIHMDPGHMB\x12\x20\n\x0bFGIDGHFMJAF\x18\r\x20\x01(\rR\x0bFGIDGHFMJA\
    F\x12!\n\x0bHAEONCCBKEG\x18\xd6\x03\x20\x03(\rR\x0bHAEONCCBKEG\x12/\n\
    \x0bMMLANFIFPJJ\x18\xa3\x04\x20\x03(\x0b2\x0c.JMMFBCMMKLLR\x0bMMLANFIFPJ\
    J\x12\x20\n\x0bIJLNNIGIOEA\x18\t\x20\x01(\rR\x0bIJLNNIGIOEAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::BCIHKEKHFEE::file_descriptor().clone());
            deps.push(super::JMMFBCMMKLL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EINJOJNHBDO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
