// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BCCNMFHBAIJ.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BCCNMFHBAIJ)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BCCNMFHBAIJ {
    // message oneof groups
    pub MNMKDFJFCLC: ::std::option::Option<bccnmfhbaij::MNMKDFJFCLC>,
    // special fields
    // @@protoc_insertion_point(special_field:BCCNMFHBAIJ.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BCCNMFHBAIJ {
    fn default() -> &'a BCCNMFHBAIJ {
        <BCCNMFHBAIJ as ::protobuf::Message>::default_instance()
    }
}

impl BCCNMFHBAIJ {
    pub fn new() -> BCCNMFHBAIJ {
        ::std::default::Default::default()
    }

    // .CBPOHNLHLBJ KLNIBEFPLCL = 11;

    pub fn KLNIBEFPLCL(&self) -> &super::CBPOHNLHLBJ::CBPOHNLHLBJ {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(ref v)) => v,
            _ => <super::CBPOHNLHLBJ::CBPOHNLHLBJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KLNIBEFPLCL(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_KLNIBEFPLCL(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KLNIBEFPLCL(&mut self, v: super::CBPOHNLHLBJ::CBPOHNLHLBJ) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KLNIBEFPLCL(&mut self) -> &mut super::CBPOHNLHLBJ::CBPOHNLHLBJ {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(super::CBPOHNLHLBJ::CBPOHNLHLBJ::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KLNIBEFPLCL(&mut self) -> super::CBPOHNLHLBJ::CBPOHNLHLBJ {
        if self.has_KLNIBEFPLCL() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CBPOHNLHLBJ::CBPOHNLHLBJ::new()
        }
    }

    // .CPMCAAPFHAH AJPKMOHNMHC = 2;

    pub fn AJPKMOHNMHC(&self) -> &super::CPMCAAPFHAH::CPMCAAPFHAH {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(ref v)) => v,
            _ => <super::CPMCAAPFHAH::CPMCAAPFHAH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AJPKMOHNMHC(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_AJPKMOHNMHC(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AJPKMOHNMHC(&mut self, v: super::CPMCAAPFHAH::CPMCAAPFHAH) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AJPKMOHNMHC(&mut self) -> &mut super::CPMCAAPFHAH::CPMCAAPFHAH {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(super::CPMCAAPFHAH::CPMCAAPFHAH::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AJPKMOHNMHC(&mut self) -> super::CPMCAAPFHAH::CPMCAAPFHAH {
        if self.has_AJPKMOHNMHC() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CPMCAAPFHAH::CPMCAAPFHAH::new()
        }
    }

    // .HNBIBECBILH FEJJPBCCJFD = 7;

    pub fn FEJJPBCCJFD(&self) -> &super::HNBIBECBILH::HNBIBECBILH {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(ref v)) => v,
            _ => <super::HNBIBECBILH::HNBIBECBILH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FEJJPBCCJFD(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_FEJJPBCCJFD(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FEJJPBCCJFD(&mut self, v: super::HNBIBECBILH::HNBIBECBILH) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FEJJPBCCJFD(&mut self) -> &mut super::HNBIBECBILH::HNBIBECBILH {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(super::HNBIBECBILH::HNBIBECBILH::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FEJJPBCCJFD(&mut self) -> super::HNBIBECBILH::HNBIBECBILH {
        if self.has_FEJJPBCCJFD() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HNBIBECBILH::HNBIBECBILH::new()
        }
    }

    // .MHAANJCANDO GDNALENILEI = 3;

    pub fn GDNALENILEI(&self) -> &super::MHAANJCANDO::MHAANJCANDO {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(ref v)) => v,
            _ => <super::MHAANJCANDO::MHAANJCANDO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GDNALENILEI(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_GDNALENILEI(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GDNALENILEI(&mut self, v: super::MHAANJCANDO::MHAANJCANDO) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GDNALENILEI(&mut self) -> &mut super::MHAANJCANDO::MHAANJCANDO {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(super::MHAANJCANDO::MHAANJCANDO::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GDNALENILEI(&mut self) -> super::MHAANJCANDO::MHAANJCANDO {
        if self.has_GDNALENILEI() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MHAANJCANDO::MHAANJCANDO::new()
        }
    }

    // .MJMACMEEGNP IOPGGONMNNL = 9;

    pub fn IOPGGONMNNL(&self) -> &super::MJMACMEEGNP::MJMACMEEGNP {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(ref v)) => v,
            _ => <super::MJMACMEEGNP::MJMACMEEGNP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IOPGGONMNNL(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_IOPGGONMNNL(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IOPGGONMNNL(&mut self, v: super::MJMACMEEGNP::MJMACMEEGNP) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IOPGGONMNNL(&mut self) -> &mut super::MJMACMEEGNP::MJMACMEEGNP {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(super::MJMACMEEGNP::MJMACMEEGNP::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IOPGGONMNNL(&mut self) -> super::MJMACMEEGNP::MJMACMEEGNP {
        if self.has_IOPGGONMNNL() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MJMACMEEGNP::MJMACMEEGNP::new()
        }
    }

    // .JJPMMCJHGLH MOBJJPMIAAB = 10;

    pub fn MOBJJPMIAAB(&self) -> &super::JJPMMCJHGLH::JJPMMCJHGLH {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(ref v)) => v,
            _ => <super::JJPMMCJHGLH::JJPMMCJHGLH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MOBJJPMIAAB(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_MOBJJPMIAAB(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MOBJJPMIAAB(&mut self, v: super::JJPMMCJHGLH::JJPMMCJHGLH) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MOBJJPMIAAB(&mut self) -> &mut super::JJPMMCJHGLH::JJPMMCJHGLH {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(super::JJPMMCJHGLH::JJPMMCJHGLH::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MOBJJPMIAAB(&mut self) -> super::JJPMMCJHGLH::JJPMMCJHGLH {
        if self.has_MOBJJPMIAAB() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JJPMMCJHGLH::JJPMMCJHGLH::new()
        }
    }

    // .PKPCIJJPIAK CFJMOBMCLBI = 13;

    pub fn CFJMOBMCLBI(&self) -> &super::PKPCIJJPIAK::PKPCIJJPIAK {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(ref v)) => v,
            _ => <super::PKPCIJJPIAK::PKPCIJJPIAK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CFJMOBMCLBI(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_CFJMOBMCLBI(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CFJMOBMCLBI(&mut self, v: super::PKPCIJJPIAK::PKPCIJJPIAK) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CFJMOBMCLBI(&mut self) -> &mut super::PKPCIJJPIAK::PKPCIJJPIAK {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(super::PKPCIJJPIAK::PKPCIJJPIAK::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CFJMOBMCLBI(&mut self) -> super::PKPCIJJPIAK::PKPCIJJPIAK {
        if self.has_CFJMOBMCLBI() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PKPCIJJPIAK::PKPCIJJPIAK::new()
        }
    }

    // .NKNBNKGEEMH GLCGKNINAOG = 5;

    pub fn GLCGKNINAOG(&self) -> &super::NKNBNKGEEMH::NKNBNKGEEMH {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(ref v)) => v,
            _ => <super::NKNBNKGEEMH::NKNBNKGEEMH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GLCGKNINAOG(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_GLCGKNINAOG(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GLCGKNINAOG(&mut self, v: super::NKNBNKGEEMH::NKNBNKGEEMH) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GLCGKNINAOG(&mut self) -> &mut super::NKNBNKGEEMH::NKNBNKGEEMH {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(super::NKNBNKGEEMH::NKNBNKGEEMH::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GLCGKNINAOG(&mut self) -> super::NKNBNKGEEMH::NKNBNKGEEMH {
        if self.has_GLCGKNINAOG() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NKNBNKGEEMH::NKNBNKGEEMH::new()
        }
    }

    // .OCJMFGFLDEE JEOEJADOGDF = 12;

    pub fn JEOEJADOGDF(&self) -> &super::OCJMFGFLDEE::OCJMFGFLDEE {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(ref v)) => v,
            _ => <super::OCJMFGFLDEE::OCJMFGFLDEE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JEOEJADOGDF(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_JEOEJADOGDF(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JEOEJADOGDF(&mut self, v: super::OCJMFGFLDEE::OCJMFGFLDEE) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JEOEJADOGDF(&mut self) -> &mut super::OCJMFGFLDEE::OCJMFGFLDEE {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(super::OCJMFGFLDEE::OCJMFGFLDEE::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JEOEJADOGDF(&mut self) -> super::OCJMFGFLDEE::OCJMFGFLDEE {
        if self.has_JEOEJADOGDF() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OCJMFGFLDEE::OCJMFGFLDEE::new()
        }
    }

    // .OMHEHLELGBN BAGHNHIKFDC = 4;

    pub fn BAGHNHIKFDC(&self) -> &super::OMHEHLELGBN::OMHEHLELGBN {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(ref v)) => v,
            _ => <super::OMHEHLELGBN::OMHEHLELGBN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BAGHNHIKFDC(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
    }

    pub fn has_BAGHNHIKFDC(&self) -> bool {
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BAGHNHIKFDC(&mut self, v: super::OMHEHLELGBN::OMHEHLELGBN) {
        self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BAGHNHIKFDC(&mut self) -> &mut super::OMHEHLELGBN::OMHEHLELGBN {
        if let ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(_)) = self.MNMKDFJFCLC {
        } else {
            self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(super::OMHEHLELGBN::OMHEHLELGBN::new()));
        }
        match self.MNMKDFJFCLC {
            ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BAGHNHIKFDC(&mut self) -> super::OMHEHLELGBN::OMHEHLELGBN {
        if self.has_BAGHNHIKFDC() {
            match self.MNMKDFJFCLC.take() {
                ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMHEHLELGBN::OMHEHLELGBN::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CBPOHNLHLBJ::CBPOHNLHLBJ>(
            "KLNIBEFPLCL",
            BCCNMFHBAIJ::has_KLNIBEFPLCL,
            BCCNMFHBAIJ::KLNIBEFPLCL,
            BCCNMFHBAIJ::mut_KLNIBEFPLCL,
            BCCNMFHBAIJ::set_KLNIBEFPLCL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CPMCAAPFHAH::CPMCAAPFHAH>(
            "AJPKMOHNMHC",
            BCCNMFHBAIJ::has_AJPKMOHNMHC,
            BCCNMFHBAIJ::AJPKMOHNMHC,
            BCCNMFHBAIJ::mut_AJPKMOHNMHC,
            BCCNMFHBAIJ::set_AJPKMOHNMHC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HNBIBECBILH::HNBIBECBILH>(
            "FEJJPBCCJFD",
            BCCNMFHBAIJ::has_FEJJPBCCJFD,
            BCCNMFHBAIJ::FEJJPBCCJFD,
            BCCNMFHBAIJ::mut_FEJJPBCCJFD,
            BCCNMFHBAIJ::set_FEJJPBCCJFD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MHAANJCANDO::MHAANJCANDO>(
            "GDNALENILEI",
            BCCNMFHBAIJ::has_GDNALENILEI,
            BCCNMFHBAIJ::GDNALENILEI,
            BCCNMFHBAIJ::mut_GDNALENILEI,
            BCCNMFHBAIJ::set_GDNALENILEI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MJMACMEEGNP::MJMACMEEGNP>(
            "IOPGGONMNNL",
            BCCNMFHBAIJ::has_IOPGGONMNNL,
            BCCNMFHBAIJ::IOPGGONMNNL,
            BCCNMFHBAIJ::mut_IOPGGONMNNL,
            BCCNMFHBAIJ::set_IOPGGONMNNL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JJPMMCJHGLH::JJPMMCJHGLH>(
            "MOBJJPMIAAB",
            BCCNMFHBAIJ::has_MOBJJPMIAAB,
            BCCNMFHBAIJ::MOBJJPMIAAB,
            BCCNMFHBAIJ::mut_MOBJJPMIAAB,
            BCCNMFHBAIJ::set_MOBJJPMIAAB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PKPCIJJPIAK::PKPCIJJPIAK>(
            "CFJMOBMCLBI",
            BCCNMFHBAIJ::has_CFJMOBMCLBI,
            BCCNMFHBAIJ::CFJMOBMCLBI,
            BCCNMFHBAIJ::mut_CFJMOBMCLBI,
            BCCNMFHBAIJ::set_CFJMOBMCLBI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NKNBNKGEEMH::NKNBNKGEEMH>(
            "GLCGKNINAOG",
            BCCNMFHBAIJ::has_GLCGKNINAOG,
            BCCNMFHBAIJ::GLCGKNINAOG,
            BCCNMFHBAIJ::mut_GLCGKNINAOG,
            BCCNMFHBAIJ::set_GLCGKNINAOG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OCJMFGFLDEE::OCJMFGFLDEE>(
            "JEOEJADOGDF",
            BCCNMFHBAIJ::has_JEOEJADOGDF,
            BCCNMFHBAIJ::JEOEJADOGDF,
            BCCNMFHBAIJ::mut_JEOEJADOGDF,
            BCCNMFHBAIJ::set_JEOEJADOGDF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMHEHLELGBN::OMHEHLELGBN>(
            "BAGHNHIKFDC",
            BCCNMFHBAIJ::has_BAGHNHIKFDC,
            BCCNMFHBAIJ::BAGHNHIKFDC,
            BCCNMFHBAIJ::mut_BAGHNHIKFDC,
            BCCNMFHBAIJ::set_BAGHNHIKFDC,
        ));
        oneofs.push(bccnmfhbaij::MNMKDFJFCLC::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BCCNMFHBAIJ>(
            "BCCNMFHBAIJ",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BCCNMFHBAIJ {
    const NAME: &'static str = "BCCNMFHBAIJ";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                90 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(is.read_message()?));
                },
                18 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(is.read_message()?));
                },
                58 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(is.read_message()?));
                },
                26 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(is.read_message()?));
                },
                74 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(is.read_message()?));
                },
                82 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(is.read_message()?));
                },
                106 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(is.read_message()?));
                },
                42 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(is.read_message()?));
                },
                98 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(is.read_message()?));
                },
                34 => {
                    self.MNMKDFJFCLC = ::std::option::Option::Some(bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.MNMKDFJFCLC {
            match v {
                &bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.MNMKDFJFCLC {
            match v {
                &bccnmfhbaij::MNMKDFJFCLC::KLNIBEFPLCL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &bccnmfhbaij::MNMKDFJFCLC::AJPKMOHNMHC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &bccnmfhbaij::MNMKDFJFCLC::FEJJPBCCJFD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &bccnmfhbaij::MNMKDFJFCLC::GDNALENILEI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &bccnmfhbaij::MNMKDFJFCLC::IOPGGONMNNL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &bccnmfhbaij::MNMKDFJFCLC::MOBJJPMIAAB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &bccnmfhbaij::MNMKDFJFCLC::CFJMOBMCLBI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &bccnmfhbaij::MNMKDFJFCLC::GLCGKNINAOG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &bccnmfhbaij::MNMKDFJFCLC::JEOEJADOGDF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &bccnmfhbaij::MNMKDFJFCLC::BAGHNHIKFDC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BCCNMFHBAIJ {
        BCCNMFHBAIJ::new()
    }

    fn clear(&mut self) {
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.MNMKDFJFCLC = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BCCNMFHBAIJ {
        static instance: BCCNMFHBAIJ = BCCNMFHBAIJ {
            MNMKDFJFCLC: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BCCNMFHBAIJ {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BCCNMFHBAIJ").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BCCNMFHBAIJ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BCCNMFHBAIJ {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BCCNMFHBAIJ`
pub mod bccnmfhbaij {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:BCCNMFHBAIJ.MNMKDFJFCLC)
    pub enum MNMKDFJFCLC {
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.KLNIBEFPLCL)
        KLNIBEFPLCL(super::super::CBPOHNLHLBJ::CBPOHNLHLBJ),
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.AJPKMOHNMHC)
        AJPKMOHNMHC(super::super::CPMCAAPFHAH::CPMCAAPFHAH),
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.FEJJPBCCJFD)
        FEJJPBCCJFD(super::super::HNBIBECBILH::HNBIBECBILH),
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.GDNALENILEI)
        GDNALENILEI(super::super::MHAANJCANDO::MHAANJCANDO),
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.IOPGGONMNNL)
        IOPGGONMNNL(super::super::MJMACMEEGNP::MJMACMEEGNP),
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.MOBJJPMIAAB)
        MOBJJPMIAAB(super::super::JJPMMCJHGLH::JJPMMCJHGLH),
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.CFJMOBMCLBI)
        CFJMOBMCLBI(super::super::PKPCIJJPIAK::PKPCIJJPIAK),
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.GLCGKNINAOG)
        GLCGKNINAOG(super::super::NKNBNKGEEMH::NKNBNKGEEMH),
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.JEOEJADOGDF)
        JEOEJADOGDF(super::super::OCJMFGFLDEE::OCJMFGFLDEE),
        // @@protoc_insertion_point(oneof_field:BCCNMFHBAIJ.BAGHNHIKFDC)
        BAGHNHIKFDC(super::super::OMHEHLELGBN::OMHEHLELGBN),
    }

    impl ::protobuf::Oneof for MNMKDFJFCLC {
    }

    impl ::protobuf::OneofFull for MNMKDFJFCLC {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BCCNMFHBAIJ as ::protobuf::MessageFull>::descriptor().oneof_by_name("MNMKDFJFCLC").unwrap()).clone()
        }
    }

    impl MNMKDFJFCLC {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<MNMKDFJFCLC>("MNMKDFJFCLC")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BCCNMFHBAIJ.proto\x1a\x11CBPOHNLHLBJ.proto\x1a\x11CPMCAAPFHAH.prot\
    o\x1a\x11HNBIBECBILH.proto\x1a\x11JJPMMCJHGLH.proto\x1a\x11MHAANJCANDO.p\
    roto\x1a\x11MJMACMEEGNP.proto\x1a\x11NKNBNKGEEMH.proto\x1a\x11OCJMFGFLDE\
    E.proto\x1a\x11OMHEHLELGBN.proto\x1a\x11PKPCIJJPIAK.proto\"\x90\x04\n\
    \x0bBCCNMFHBAIJ\x120\n\x0bKLNIBEFPLCL\x18\x0b\x20\x01(\x0b2\x0c.CBPOHNLH\
    LBJH\0R\x0bKLNIBEFPLCL\x120\n\x0bAJPKMOHNMHC\x18\x02\x20\x01(\x0b2\x0c.C\
    PMCAAPFHAHH\0R\x0bAJPKMOHNMHC\x120\n\x0bFEJJPBCCJFD\x18\x07\x20\x01(\x0b\
    2\x0c.HNBIBECBILHH\0R\x0bFEJJPBCCJFD\x120\n\x0bGDNALENILEI\x18\x03\x20\
    \x01(\x0b2\x0c.MHAANJCANDOH\0R\x0bGDNALENILEI\x120\n\x0bIOPGGONMNNL\x18\
    \t\x20\x01(\x0b2\x0c.MJMACMEEGNPH\0R\x0bIOPGGONMNNL\x120\n\x0bMOBJJPMIAA\
    B\x18\n\x20\x01(\x0b2\x0c.JJPMMCJHGLHH\0R\x0bMOBJJPMIAAB\x120\n\x0bCFJMO\
    BMCLBI\x18\r\x20\x01(\x0b2\x0c.PKPCIJJPIAKH\0R\x0bCFJMOBMCLBI\x120\n\x0b\
    GLCGKNINAOG\x18\x05\x20\x01(\x0b2\x0c.NKNBNKGEEMHH\0R\x0bGLCGKNINAOG\x12\
    0\n\x0bJEOEJADOGDF\x18\x0c\x20\x01(\x0b2\x0c.OCJMFGFLDEEH\0R\x0bJEOEJADO\
    GDF\x120\n\x0bBAGHNHIKFDC\x18\x04\x20\x01(\x0b2\x0c.OMHEHLELGBNH\0R\x0bB\
    AGHNHIKFDCB\r\n\x0bMNMKDFJFCLCb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::CBPOHNLHLBJ::file_descriptor().clone());
            deps.push(super::CPMCAAPFHAH::file_descriptor().clone());
            deps.push(super::HNBIBECBILH::file_descriptor().clone());
            deps.push(super::JJPMMCJHGLH::file_descriptor().clone());
            deps.push(super::MHAANJCANDO::file_descriptor().clone());
            deps.push(super::MJMACMEEGNP::file_descriptor().clone());
            deps.push(super::NKNBNKGEEMH::file_descriptor().clone());
            deps.push(super::OCJMFGFLDEE::file_descriptor().clone());
            deps.push(super::OMHEHLELGBN::file_descriptor().clone());
            deps.push(super::PKPCIJJPIAK::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BCCNMFHBAIJ::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
