// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ClockParkGetOngoingScriptInfoScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ClockParkGetOngoingScriptInfoScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClockParkGetOngoingScriptInfoScRsp {
    // message fields
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.FMPDFFAGKFO)
    pub FMPDFFAGKFO: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.ABKOHABEMMF)
    pub ABKOHABEMMF: ::protobuf::MessageField<super::OKIOOBNBDEB::OKIOOBNBDEB>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.JFMPKBHGOPE)
    pub JFMPKBHGOPE: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.GKEADPKKANG)
    pub GKEADPKKANG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.OCBBEAJPFGF)
    pub OCBBEAJPFGF: ::protobuf::MessageField<super::IMJPKICFBLI::IMJPKICFBLI>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.FIHJEFNGFEK)
    pub FIHJEFNGFEK: ::protobuf::MessageField<super::CMEBMINNJON::CMEBMINNJON>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.FMHJAGNLOFD)
    pub FMHJAGNLOFD: ::std::string::String,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.IBFECHKNJAL)
    pub IBFECHKNJAL: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.GAKDAENACOD)
    pub GAKDAENACOD: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.CIGPMMBDEJD)
    pub CIGPMMBDEJD: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.LKGNGHCPJAG)
    pub LKGNGHCPJAG: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ClockParkGetOngoingScriptInfoScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClockParkGetOngoingScriptInfoScRsp {
    fn default() -> &'a ClockParkGetOngoingScriptInfoScRsp {
        <ClockParkGetOngoingScriptInfoScRsp as ::protobuf::Message>::default_instance()
    }
}

impl ClockParkGetOngoingScriptInfoScRsp {
    pub fn new() -> ClockParkGetOngoingScriptInfoScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMPDFFAGKFO",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.FMPDFFAGKFO },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.FMPDFFAGKFO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.retcode },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OKIOOBNBDEB::OKIOOBNBDEB>(
            "ABKOHABEMMF",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.ABKOHABEMMF },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.ABKOHABEMMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JFMPKBHGOPE",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.JFMPKBHGOPE },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.JFMPKBHGOPE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GKEADPKKANG",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.GKEADPKKANG },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.GKEADPKKANG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IMJPKICFBLI::IMJPKICFBLI>(
            "OCBBEAJPFGF",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.OCBBEAJPFGF },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.OCBBEAJPFGF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CMEBMINNJON::CMEBMINNJON>(
            "FIHJEFNGFEK",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.FIHJEFNGFEK },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.FIHJEFNGFEK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMHJAGNLOFD",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.FMHJAGNLOFD },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.FMHJAGNLOFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IBFECHKNJAL",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.IBFECHKNJAL },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.IBFECHKNJAL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GAKDAENACOD",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.GAKDAENACOD },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.GAKDAENACOD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CIGPMMBDEJD",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.CIGPMMBDEJD },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.CIGPMMBDEJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LKGNGHCPJAG",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.LKGNGHCPJAG },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.LKGNGHCPJAG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClockParkGetOngoingScriptInfoScRsp>(
            "ClockParkGetOngoingScriptInfoScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClockParkGetOngoingScriptInfoScRsp {
    const NAME: &'static str = "ClockParkGetOngoingScriptInfoScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.FMPDFFAGKFO = is.read_uint32()?;
                },
                40 => {
                    self.retcode = is.read_uint32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ABKOHABEMMF)?;
                },
                120 => {
                    self.JFMPKBHGOPE = is.read_uint32()?;
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.GKEADPKKANG)?;
                },
                80 => {
                    self.GKEADPKKANG.push(is.read_uint32()?);
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OCBBEAJPFGF)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FIHJEFNGFEK)?;
                },
                18 => {
                    self.FMHJAGNLOFD = is.read_string()?;
                },
                8 => {
                    self.IBFECHKNJAL = is.read_uint32()?;
                },
                96 => {
                    self.GAKDAENACOD = is.read_uint32()?;
                },
                32 => {
                    self.CIGPMMBDEJD = is.read_uint32()?;
                },
                24 => {
                    self.LKGNGHCPJAG = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.FMPDFFAGKFO != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.FMPDFFAGKFO);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.retcode);
        }
        if let Some(v) = self.ABKOHABEMMF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.JFMPKBHGOPE != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.JFMPKBHGOPE);
        }
        for value in &self.GKEADPKKANG {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        if let Some(v) = self.OCBBEAJPFGF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.FIHJEFNGFEK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.FMHJAGNLOFD.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.FMHJAGNLOFD);
        }
        if self.IBFECHKNJAL != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.IBFECHKNJAL);
        }
        if self.GAKDAENACOD != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.GAKDAENACOD);
        }
        if self.CIGPMMBDEJD != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.CIGPMMBDEJD);
        }
        if self.LKGNGHCPJAG != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.LKGNGHCPJAG);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.FMPDFFAGKFO != 0 {
            os.write_uint32(6, self.FMPDFFAGKFO)?;
        }
        if self.retcode != 0 {
            os.write_uint32(5, self.retcode)?;
        }
        if let Some(v) = self.ABKOHABEMMF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.JFMPKBHGOPE != 0 {
            os.write_uint32(15, self.JFMPKBHGOPE)?;
        }
        for v in &self.GKEADPKKANG {
            os.write_uint32(10, *v)?;
        };
        if let Some(v) = self.OCBBEAJPFGF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.FIHJEFNGFEK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if !self.FMHJAGNLOFD.is_empty() {
            os.write_string(2, &self.FMHJAGNLOFD)?;
        }
        if self.IBFECHKNJAL != 0 {
            os.write_uint32(1, self.IBFECHKNJAL)?;
        }
        if self.GAKDAENACOD != 0 {
            os.write_uint32(12, self.GAKDAENACOD)?;
        }
        if self.CIGPMMBDEJD != 0 {
            os.write_uint32(4, self.CIGPMMBDEJD)?;
        }
        if self.LKGNGHCPJAG != 0 {
            os.write_uint32(3, self.LKGNGHCPJAG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClockParkGetOngoingScriptInfoScRsp {
        ClockParkGetOngoingScriptInfoScRsp::new()
    }

    fn clear(&mut self) {
        self.FMPDFFAGKFO = 0;
        self.retcode = 0;
        self.ABKOHABEMMF.clear();
        self.JFMPKBHGOPE = 0;
        self.GKEADPKKANG.clear();
        self.OCBBEAJPFGF.clear();
        self.FIHJEFNGFEK.clear();
        self.FMHJAGNLOFD.clear();
        self.IBFECHKNJAL = 0;
        self.GAKDAENACOD = 0;
        self.CIGPMMBDEJD = 0;
        self.LKGNGHCPJAG = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClockParkGetOngoingScriptInfoScRsp {
        static instance: ClockParkGetOngoingScriptInfoScRsp = ClockParkGetOngoingScriptInfoScRsp {
            FMPDFFAGKFO: 0,
            retcode: 0,
            ABKOHABEMMF: ::protobuf::MessageField::none(),
            JFMPKBHGOPE: 0,
            GKEADPKKANG: ::std::vec::Vec::new(),
            OCBBEAJPFGF: ::protobuf::MessageField::none(),
            FIHJEFNGFEK: ::protobuf::MessageField::none(),
            FMHJAGNLOFD: ::std::string::String::new(),
            IBFECHKNJAL: 0,
            GAKDAENACOD: 0,
            CIGPMMBDEJD: 0,
            LKGNGHCPJAG: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClockParkGetOngoingScriptInfoScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClockParkGetOngoingScriptInfoScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClockParkGetOngoingScriptInfoScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClockParkGetOngoingScriptInfoScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(ClockParkGetOngoingScriptInfoScRsp.proto\x1a\x11CMEBMINNJON.proto\x1a\
    \x11IMJPKICFBLI.proto\x1a\x11OKIOOBNBDEB.proto\"\xde\x03\n\"ClockParkGet\
    OngoingScriptInfoScRsp\x12\x20\n\x0bFMPDFFAGKFO\x18\x06\x20\x01(\rR\x0bF\
    MPDFFAGKFO\x12\x18\n\x07retcode\x18\x05\x20\x01(\rR\x07retcode\x12.\n\
    \x0bABKOHABEMMF\x18\x08\x20\x01(\x0b2\x0c.OKIOOBNBDEBR\x0bABKOHABEMMF\
    \x12\x20\n\x0bJFMPKBHGOPE\x18\x0f\x20\x01(\rR\x0bJFMPKBHGOPE\x12\x20\n\
    \x0bGKEADPKKANG\x18\n\x20\x03(\rR\x0bGKEADPKKANG\x12.\n\x0bOCBBEAJPFGF\
    \x18\t\x20\x01(\x0b2\x0c.IMJPKICFBLIR\x0bOCBBEAJPFGF\x12.\n\x0bFIHJEFNGF\
    EK\x18\x0b\x20\x01(\x0b2\x0c.CMEBMINNJONR\x0bFIHJEFNGFEK\x12\x20\n\x0bFM\
    HJAGNLOFD\x18\x02\x20\x01(\tR\x0bFMHJAGNLOFD\x12\x20\n\x0bIBFECHKNJAL\
    \x18\x01\x20\x01(\rR\x0bIBFECHKNJAL\x12\x20\n\x0bGAKDAENACOD\x18\x0c\x20\
    \x01(\rR\x0bGAKDAENACOD\x12\x20\n\x0bCIGPMMBDEJD\x18\x04\x20\x01(\rR\x0b\
    CIGPMMBDEJD\x12\x20\n\x0bLKGNGHCPJAG\x18\x03\x20\x01(\rR\x0bLKGNGHCPJAGb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::CMEBMINNJON::file_descriptor().clone());
            deps.push(super::IMJPKICFBLI::file_descriptor().clone());
            deps.push(super::OKIOOBNBDEB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ClockParkGetOngoingScriptInfoScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
