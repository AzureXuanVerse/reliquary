// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ClockParkGetOngoingScriptInfoScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ClockParkGetOngoingScriptInfoScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClockParkGetOngoingScriptInfoScRsp {
    // message fields
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.NPONPMGNKIE)
    pub NPONPMGNKIE: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.LCEEDIGELGM)
    pub LCEEDIGELGM: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.JPECEHHAMPE)
    pub JPECEHHAMPE: ::std::string::String,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.ADADHIHDHJC)
    pub ADADHIHDHJC: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.AOGMMEFAIFJ)
    pub AOGMMEFAIFJ: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.PFBOBBMELFB)
    pub PFBOBBMELFB: ::protobuf::MessageField<super::AMIGGMENHFA::AMIGGMENHFA>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.JOIPFMCOINI)
    pub JOIPFMCOINI: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.PNOAKGNANBO)
    pub PNOAKGNANBO: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.FHEODGILEEP)
    pub FHEODGILEEP: ::protobuf::MessageField<super::MGGJKPGEGLP::MGGJKPGEGLP>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.EJOMHILNCMC)
    pub EJOMHILNCMC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.DMBNHOFLDFO)
    pub DMBNHOFLDFO: ::protobuf::MessageField<super::HJLBLONCPML::HJLBLONCPML>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.FBELDFBDFAG)
    pub FBELDFBDFAG: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ClockParkGetOngoingScriptInfoScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClockParkGetOngoingScriptInfoScRsp {
    fn default() -> &'a ClockParkGetOngoingScriptInfoScRsp {
        <ClockParkGetOngoingScriptInfoScRsp as ::protobuf::Message>::default_instance()
    }
}

impl ClockParkGetOngoingScriptInfoScRsp {
    pub fn new() -> ClockParkGetOngoingScriptInfoScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NPONPMGNKIE",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.NPONPMGNKIE },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.NPONPMGNKIE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LCEEDIGELGM",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.LCEEDIGELGM },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.LCEEDIGELGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JPECEHHAMPE",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.JPECEHHAMPE },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.JPECEHHAMPE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADADHIHDHJC",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.ADADHIHDHJC },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.ADADHIHDHJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AOGMMEFAIFJ",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.AOGMMEFAIFJ },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.AOGMMEFAIFJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AMIGGMENHFA::AMIGGMENHFA>(
            "PFBOBBMELFB",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.PFBOBBMELFB },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.PFBOBBMELFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JOIPFMCOINI",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.JOIPFMCOINI },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.JOIPFMCOINI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PNOAKGNANBO",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.PNOAKGNANBO },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.PNOAKGNANBO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MGGJKPGEGLP::MGGJKPGEGLP>(
            "FHEODGILEEP",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.FHEODGILEEP },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.FHEODGILEEP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EJOMHILNCMC",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.EJOMHILNCMC },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.EJOMHILNCMC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HJLBLONCPML::HJLBLONCPML>(
            "DMBNHOFLDFO",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.DMBNHOFLDFO },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.DMBNHOFLDFO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FBELDFBDFAG",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.FBELDFBDFAG },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.FBELDFBDFAG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClockParkGetOngoingScriptInfoScRsp>(
            "ClockParkGetOngoingScriptInfoScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClockParkGetOngoingScriptInfoScRsp {
    const NAME: &'static str = "ClockParkGetOngoingScriptInfoScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.NPONPMGNKIE = is.read_uint32()?;
                },
                64 => {
                    self.LCEEDIGELGM = is.read_uint32()?;
                },
                82 => {
                    self.JPECEHHAMPE = is.read_string()?;
                },
                56 => {
                    self.ADADHIHDHJC = is.read_uint32()?;
                },
                112 => {
                    self.AOGMMEFAIFJ = is.read_uint32()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PFBOBBMELFB)?;
                },
                48 => {
                    self.JOIPFMCOINI = is.read_uint32()?;
                },
                104 => {
                    self.PNOAKGNANBO = is.read_uint32()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FHEODGILEEP)?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.EJOMHILNCMC)?;
                },
                16 => {
                    self.EJOMHILNCMC.push(is.read_uint32()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DMBNHOFLDFO)?;
                },
                8 => {
                    self.FBELDFBDFAG = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.NPONPMGNKIE != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.NPONPMGNKIE);
        }
        if self.LCEEDIGELGM != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.LCEEDIGELGM);
        }
        if !self.JPECEHHAMPE.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.JPECEHHAMPE);
        }
        if self.ADADHIHDHJC != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.ADADHIHDHJC);
        }
        if self.AOGMMEFAIFJ != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.AOGMMEFAIFJ);
        }
        if let Some(v) = self.PFBOBBMELFB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.JOIPFMCOINI != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.JOIPFMCOINI);
        }
        if self.PNOAKGNANBO != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.PNOAKGNANBO);
        }
        if let Some(v) = self.FHEODGILEEP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.EJOMHILNCMC {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        if let Some(v) = self.DMBNHOFLDFO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.FBELDFBDFAG != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.FBELDFBDFAG);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.NPONPMGNKIE != 0 {
            os.write_uint32(15, self.NPONPMGNKIE)?;
        }
        if self.LCEEDIGELGM != 0 {
            os.write_uint32(8, self.LCEEDIGELGM)?;
        }
        if !self.JPECEHHAMPE.is_empty() {
            os.write_string(10, &self.JPECEHHAMPE)?;
        }
        if self.ADADHIHDHJC != 0 {
            os.write_uint32(7, self.ADADHIHDHJC)?;
        }
        if self.AOGMMEFAIFJ != 0 {
            os.write_uint32(14, self.AOGMMEFAIFJ)?;
        }
        if let Some(v) = self.PFBOBBMELFB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.JOIPFMCOINI != 0 {
            os.write_uint32(6, self.JOIPFMCOINI)?;
        }
        if self.PNOAKGNANBO != 0 {
            os.write_uint32(13, self.PNOAKGNANBO)?;
        }
        if let Some(v) = self.FHEODGILEEP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        for v in &self.EJOMHILNCMC {
            os.write_uint32(2, *v)?;
        };
        if let Some(v) = self.DMBNHOFLDFO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.FBELDFBDFAG != 0 {
            os.write_uint32(1, self.FBELDFBDFAG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClockParkGetOngoingScriptInfoScRsp {
        ClockParkGetOngoingScriptInfoScRsp::new()
    }

    fn clear(&mut self) {
        self.NPONPMGNKIE = 0;
        self.LCEEDIGELGM = 0;
        self.JPECEHHAMPE.clear();
        self.ADADHIHDHJC = 0;
        self.AOGMMEFAIFJ = 0;
        self.PFBOBBMELFB.clear();
        self.JOIPFMCOINI = 0;
        self.PNOAKGNANBO = 0;
        self.FHEODGILEEP.clear();
        self.EJOMHILNCMC.clear();
        self.DMBNHOFLDFO.clear();
        self.FBELDFBDFAG = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClockParkGetOngoingScriptInfoScRsp {
        static instance: ClockParkGetOngoingScriptInfoScRsp = ClockParkGetOngoingScriptInfoScRsp {
            NPONPMGNKIE: 0,
            LCEEDIGELGM: 0,
            JPECEHHAMPE: ::std::string::String::new(),
            ADADHIHDHJC: 0,
            AOGMMEFAIFJ: 0,
            PFBOBBMELFB: ::protobuf::MessageField::none(),
            JOIPFMCOINI: 0,
            PNOAKGNANBO: 0,
            FHEODGILEEP: ::protobuf::MessageField::none(),
            EJOMHILNCMC: ::std::vec::Vec::new(),
            DMBNHOFLDFO: ::protobuf::MessageField::none(),
            FBELDFBDFAG: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClockParkGetOngoingScriptInfoScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClockParkGetOngoingScriptInfoScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClockParkGetOngoingScriptInfoScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClockParkGetOngoingScriptInfoScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(ClockParkGetOngoingScriptInfoScRsp.proto\x1a\x11AMIGGMENHFA.proto\x1a\
    \x11HJLBLONCPML.proto\x1a\x11MGGJKPGEGLP.proto\"\xe6\x03\n\"ClockParkGet\
    OngoingScriptInfoScRsp\x12\x20\n\x0bNPONPMGNKIE\x18\x0f\x20\x01(\rR\x0bN\
    PONPMGNKIE\x12\x20\n\x0bLCEEDIGELGM\x18\x08\x20\x01(\rR\x0bLCEEDIGELGM\
    \x12\x20\n\x0bJPECEHHAMPE\x18\n\x20\x01(\tR\x0bJPECEHHAMPE\x12\x20\n\x0b\
    ADADHIHDHJC\x18\x07\x20\x01(\rR\x0bADADHIHDHJC\x12\x20\n\x0bAOGMMEFAIFJ\
    \x18\x0e\x20\x01(\rR\x0bAOGMMEFAIFJ\x12.\n\x0bPFBOBBMELFB\x18\x0b\x20\
    \x01(\x0b2\x0c.AMIGGMENHFAR\x0bPFBOBBMELFB\x12\x20\n\x0bJOIPFMCOINI\x18\
    \x06\x20\x01(\rR\x0bJOIPFMCOINI\x12\x20\n\x0bPNOAKGNANBO\x18\r\x20\x01(\
    \rR\x0bPNOAKGNANBO\x12.\n\x0bFHEODGILEEP\x18\x0c\x20\x01(\x0b2\x0c.MGGJK\
    PGEGLPR\x0bFHEODGILEEP\x12\x20\n\x0bEJOMHILNCMC\x18\x02\x20\x03(\rR\x0bE\
    JOMHILNCMC\x12.\n\x0bDMBNHOFLDFO\x18\x04\x20\x01(\x0b2\x0c.HJLBLONCPMLR\
    \x0bDMBNHOFLDFO\x12\x20\n\x0bFBELDFBDFAG\x18\x01\x20\x01(\rR\x0bFBELDFBD\
    FAGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::AMIGGMENHFA::file_descriptor().clone());
            deps.push(super::HJLBLONCPML::file_descriptor().clone());
            deps.push(super::MGGJKPGEGLP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ClockParkGetOngoingScriptInfoScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
