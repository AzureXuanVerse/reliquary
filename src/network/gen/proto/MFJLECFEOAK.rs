// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MFJLECFEOAK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MFJLECFEOAK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MFJLECFEOAK {
    // message fields
    // @@protoc_insertion_point(field:MFJLECFEOAK.DDALCGLIHDE)
    pub DDALCGLIHDE: u32,
    // @@protoc_insertion_point(field:MFJLECFEOAK.BNNIJDPHLMN)
    pub BNNIJDPHLMN: u32,
    // @@protoc_insertion_point(field:MFJLECFEOAK.IDIEPEFFGIC)
    pub IDIEPEFFGIC: u32,
    // @@protoc_insertion_point(field:MFJLECFEOAK.COCFMLGGMKE)
    pub COCFMLGGMKE: ::protobuf::MessageField<super::ACOCEMFFEEE::ACOCEMFFEEE>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.PFLLJAIGCLI)
    pub PFLLJAIGCLI: ::std::vec::Vec<super::KGFGBNFOADO::KGFGBNFOADO>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.PDAAJCKOAFF)
    pub PDAAJCKOAFF: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.KJNLPEFLCNF)
    pub KJNLPEFLCNF: u32,
    // @@protoc_insertion_point(field:MFJLECFEOAK.FELEKBCBPFN)
    pub FELEKBCBPFN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.NKFMMKOBDBC)
    pub NKFMMKOBDBC: bool,
    // @@protoc_insertion_point(field:MFJLECFEOAK.HLLGOGDPKJB)
    pub HLLGOGDPKJB: ::protobuf::EnumOrUnknown<super::IELPCHNGNOF::IELPCHNGNOF>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.AGICJPNNFPN)
    pub AGICJPNNFPN: ::protobuf::EnumOrUnknown<super::BattleModuleType::BattleModuleType>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.AEPCAMCNNPE)
    pub AEPCAMCNNPE: ::std::vec::Vec<super::DEIBGGKJEME::DEIBGGKJEME>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.HFJJPEFHJLA)
    pub HFJJPEFHJLA: u32,
    // @@protoc_insertion_point(field:MFJLECFEOAK.ALKEMGPPEJE)
    pub ALKEMGPPEJE: ::protobuf::MessageField<super::JIHNGGNEKKO::JIHNGGNEKKO>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.FJOHNJPOHAO)
    pub FJOHNJPOHAO: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.FLJNOLCHBBC)
    pub FLJNOLCHBBC: u32,
    // @@protoc_insertion_point(field:MFJLECFEOAK.AFHKNCHFNLE)
    pub AFHKNCHFNLE: u32,
    // @@protoc_insertion_point(field:MFJLECFEOAK.BMCGKJFIEEH)
    pub BMCGKJFIEEH: ::protobuf::MessageField<super::DFHFLPPEFGN::DFHFLPPEFGN>,
    // @@protoc_insertion_point(field:MFJLECFEOAK.KCMHCLLEKHO)
    pub KCMHCLLEKHO: ::protobuf::MessageField<super::EFNNGHDBBHH::EFNNGHDBBHH>,
    // special fields
    // @@protoc_insertion_point(special_field:MFJLECFEOAK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MFJLECFEOAK {
    fn default() -> &'a MFJLECFEOAK {
        <MFJLECFEOAK as ::protobuf::Message>::default_instance()
    }
}

impl MFJLECFEOAK {
    pub fn new() -> MFJLECFEOAK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(19);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DDALCGLIHDE",
            |m: &MFJLECFEOAK| { &m.DDALCGLIHDE },
            |m: &mut MFJLECFEOAK| { &mut m.DDALCGLIHDE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BNNIJDPHLMN",
            |m: &MFJLECFEOAK| { &m.BNNIJDPHLMN },
            |m: &mut MFJLECFEOAK| { &mut m.BNNIJDPHLMN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IDIEPEFFGIC",
            |m: &MFJLECFEOAK| { &m.IDIEPEFFGIC },
            |m: &mut MFJLECFEOAK| { &mut m.IDIEPEFFGIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ACOCEMFFEEE::ACOCEMFFEEE>(
            "COCFMLGGMKE",
            |m: &MFJLECFEOAK| { &m.COCFMLGGMKE },
            |m: &mut MFJLECFEOAK| { &mut m.COCFMLGGMKE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PFLLJAIGCLI",
            |m: &MFJLECFEOAK| { &m.PFLLJAIGCLI },
            |m: &mut MFJLECFEOAK| { &mut m.PFLLJAIGCLI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PDAAJCKOAFF",
            |m: &MFJLECFEOAK| { &m.PDAAJCKOAFF },
            |m: &mut MFJLECFEOAK| { &mut m.PDAAJCKOAFF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KJNLPEFLCNF",
            |m: &MFJLECFEOAK| { &m.KJNLPEFLCNF },
            |m: &mut MFJLECFEOAK| { &mut m.KJNLPEFLCNF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FELEKBCBPFN",
            |m: &MFJLECFEOAK| { &m.FELEKBCBPFN },
            |m: &mut MFJLECFEOAK| { &mut m.FELEKBCBPFN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NKFMMKOBDBC",
            |m: &MFJLECFEOAK| { &m.NKFMMKOBDBC },
            |m: &mut MFJLECFEOAK| { &mut m.NKFMMKOBDBC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HLLGOGDPKJB",
            |m: &MFJLECFEOAK| { &m.HLLGOGDPKJB },
            |m: &mut MFJLECFEOAK| { &mut m.HLLGOGDPKJB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AGICJPNNFPN",
            |m: &MFJLECFEOAK| { &m.AGICJPNNFPN },
            |m: &mut MFJLECFEOAK| { &mut m.AGICJPNNFPN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AEPCAMCNNPE",
            |m: &MFJLECFEOAK| { &m.AEPCAMCNNPE },
            |m: &mut MFJLECFEOAK| { &mut m.AEPCAMCNNPE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HFJJPEFHJLA",
            |m: &MFJLECFEOAK| { &m.HFJJPEFHJLA },
            |m: &mut MFJLECFEOAK| { &mut m.HFJJPEFHJLA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JIHNGGNEKKO::JIHNGGNEKKO>(
            "ALKEMGPPEJE",
            |m: &MFJLECFEOAK| { &m.ALKEMGPPEJE },
            |m: &mut MFJLECFEOAK| { &mut m.ALKEMGPPEJE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FJOHNJPOHAO",
            |m: &MFJLECFEOAK| { &m.FJOHNJPOHAO },
            |m: &mut MFJLECFEOAK| { &mut m.FJOHNJPOHAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FLJNOLCHBBC",
            |m: &MFJLECFEOAK| { &m.FLJNOLCHBBC },
            |m: &mut MFJLECFEOAK| { &mut m.FLJNOLCHBBC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AFHKNCHFNLE",
            |m: &MFJLECFEOAK| { &m.AFHKNCHFNLE },
            |m: &mut MFJLECFEOAK| { &mut m.AFHKNCHFNLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DFHFLPPEFGN::DFHFLPPEFGN>(
            "BMCGKJFIEEH",
            |m: &MFJLECFEOAK| { &m.BMCGKJFIEEH },
            |m: &mut MFJLECFEOAK| { &mut m.BMCGKJFIEEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EFNNGHDBBHH::EFNNGHDBBHH>(
            "KCMHCLLEKHO",
            |m: &MFJLECFEOAK| { &m.KCMHCLLEKHO },
            |m: &mut MFJLECFEOAK| { &mut m.KCMHCLLEKHO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MFJLECFEOAK>(
            "MFJLECFEOAK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MFJLECFEOAK {
    const NAME: &'static str = "MFJLECFEOAK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.DDALCGLIHDE = is.read_uint32()?;
                },
                16 => {
                    self.BNNIJDPHLMN = is.read_uint32()?;
                },
                24 => {
                    self.IDIEPEFFGIC = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.COCFMLGGMKE)?;
                },
                42 => {
                    self.PFLLJAIGCLI.push(is.read_message()?);
                },
                50 => {
                    self.PDAAJCKOAFF = is.read_bytes()?;
                },
                56 => {
                    self.KJNLPEFLCNF = is.read_uint32()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.FELEKBCBPFN)?;
                },
                64 => {
                    self.FELEKBCBPFN.push(is.read_uint32()?);
                },
                72 => {
                    self.NKFMMKOBDBC = is.read_bool()?;
                },
                80 => {
                    self.HLLGOGDPKJB = is.read_enum_or_unknown()?;
                },
                88 => {
                    self.AGICJPNNFPN = is.read_enum_or_unknown()?;
                },
                98 => {
                    self.AEPCAMCNNPE.push(is.read_message()?);
                },
                112 => {
                    self.HFJJPEFHJLA = is.read_uint32()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ALKEMGPPEJE)?;
                },
                130 => {
                    self.FJOHNJPOHAO = is.read_bytes()?;
                },
                136 => {
                    self.FLJNOLCHBBC = is.read_uint32()?;
                },
                144 => {
                    self.AFHKNCHFNLE = is.read_uint32()?;
                },
                154 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BMCGKJFIEEH)?;
                },
                802 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KCMHCLLEKHO)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.DDALCGLIHDE != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.DDALCGLIHDE);
        }
        if self.BNNIJDPHLMN != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.BNNIJDPHLMN);
        }
        if self.IDIEPEFFGIC != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.IDIEPEFFGIC);
        }
        if let Some(v) = self.COCFMLGGMKE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.PFLLJAIGCLI {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.PDAAJCKOAFF.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.PDAAJCKOAFF);
        }
        if self.KJNLPEFLCNF != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.KJNLPEFLCNF);
        }
        for value in &self.FELEKBCBPFN {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if self.NKFMMKOBDBC != false {
            my_size += 1 + 1;
        }
        if self.HLLGOGDPKJB != ::protobuf::EnumOrUnknown::new(super::IELPCHNGNOF::IELPCHNGNOF::BATTLE_CHECK_STRATEGY_IDENTICAL) {
            my_size += ::protobuf::rt::int32_size(10, self.HLLGOGDPKJB.value());
        }
        if self.AGICJPNNFPN != ::protobuf::EnumOrUnknown::new(super::BattleModuleType::BattleModuleType::BATTLE_MODULE_MAZE) {
            my_size += ::protobuf::rt::int32_size(11, self.AGICJPNNFPN.value());
        }
        for value in &self.AEPCAMCNNPE {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.HFJJPEFHJLA != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.HFJJPEFHJLA);
        }
        if let Some(v) = self.ALKEMGPPEJE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.FJOHNJPOHAO.is_empty() {
            my_size += ::protobuf::rt::bytes_size(16, &self.FJOHNJPOHAO);
        }
        if self.FLJNOLCHBBC != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.FLJNOLCHBBC);
        }
        if self.AFHKNCHFNLE != 0 {
            my_size += ::protobuf::rt::uint32_size(18, self.AFHKNCHFNLE);
        }
        if let Some(v) = self.BMCGKJFIEEH.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.KCMHCLLEKHO.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.DDALCGLIHDE != 0 {
            os.write_uint32(1, self.DDALCGLIHDE)?;
        }
        if self.BNNIJDPHLMN != 0 {
            os.write_uint32(2, self.BNNIJDPHLMN)?;
        }
        if self.IDIEPEFFGIC != 0 {
            os.write_uint32(3, self.IDIEPEFFGIC)?;
        }
        if let Some(v) = self.COCFMLGGMKE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.PFLLJAIGCLI {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if !self.PDAAJCKOAFF.is_empty() {
            os.write_bytes(6, &self.PDAAJCKOAFF)?;
        }
        if self.KJNLPEFLCNF != 0 {
            os.write_uint32(7, self.KJNLPEFLCNF)?;
        }
        for v in &self.FELEKBCBPFN {
            os.write_uint32(8, *v)?;
        };
        if self.NKFMMKOBDBC != false {
            os.write_bool(9, self.NKFMMKOBDBC)?;
        }
        if self.HLLGOGDPKJB != ::protobuf::EnumOrUnknown::new(super::IELPCHNGNOF::IELPCHNGNOF::BATTLE_CHECK_STRATEGY_IDENTICAL) {
            os.write_enum(10, ::protobuf::EnumOrUnknown::value(&self.HLLGOGDPKJB))?;
        }
        if self.AGICJPNNFPN != ::protobuf::EnumOrUnknown::new(super::BattleModuleType::BattleModuleType::BATTLE_MODULE_MAZE) {
            os.write_enum(11, ::protobuf::EnumOrUnknown::value(&self.AGICJPNNFPN))?;
        }
        for v in &self.AEPCAMCNNPE {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if self.HFJJPEFHJLA != 0 {
            os.write_uint32(14, self.HFJJPEFHJLA)?;
        }
        if let Some(v) = self.ALKEMGPPEJE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if !self.FJOHNJPOHAO.is_empty() {
            os.write_bytes(16, &self.FJOHNJPOHAO)?;
        }
        if self.FLJNOLCHBBC != 0 {
            os.write_uint32(17, self.FLJNOLCHBBC)?;
        }
        if self.AFHKNCHFNLE != 0 {
            os.write_uint32(18, self.AFHKNCHFNLE)?;
        }
        if let Some(v) = self.BMCGKJFIEEH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
        }
        if let Some(v) = self.KCMHCLLEKHO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MFJLECFEOAK {
        MFJLECFEOAK::new()
    }

    fn clear(&mut self) {
        self.DDALCGLIHDE = 0;
        self.BNNIJDPHLMN = 0;
        self.IDIEPEFFGIC = 0;
        self.COCFMLGGMKE.clear();
        self.PFLLJAIGCLI.clear();
        self.PDAAJCKOAFF.clear();
        self.KJNLPEFLCNF = 0;
        self.FELEKBCBPFN.clear();
        self.NKFMMKOBDBC = false;
        self.HLLGOGDPKJB = ::protobuf::EnumOrUnknown::new(super::IELPCHNGNOF::IELPCHNGNOF::BATTLE_CHECK_STRATEGY_IDENTICAL);
        self.AGICJPNNFPN = ::protobuf::EnumOrUnknown::new(super::BattleModuleType::BattleModuleType::BATTLE_MODULE_MAZE);
        self.AEPCAMCNNPE.clear();
        self.HFJJPEFHJLA = 0;
        self.ALKEMGPPEJE.clear();
        self.FJOHNJPOHAO.clear();
        self.FLJNOLCHBBC = 0;
        self.AFHKNCHFNLE = 0;
        self.BMCGKJFIEEH.clear();
        self.KCMHCLLEKHO.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MFJLECFEOAK {
        static instance: MFJLECFEOAK = MFJLECFEOAK {
            DDALCGLIHDE: 0,
            BNNIJDPHLMN: 0,
            IDIEPEFFGIC: 0,
            COCFMLGGMKE: ::protobuf::MessageField::none(),
            PFLLJAIGCLI: ::std::vec::Vec::new(),
            PDAAJCKOAFF: ::std::vec::Vec::new(),
            KJNLPEFLCNF: 0,
            FELEKBCBPFN: ::std::vec::Vec::new(),
            NKFMMKOBDBC: false,
            HLLGOGDPKJB: ::protobuf::EnumOrUnknown::from_i32(0),
            AGICJPNNFPN: ::protobuf::EnumOrUnknown::from_i32(0),
            AEPCAMCNNPE: ::std::vec::Vec::new(),
            HFJJPEFHJLA: 0,
            ALKEMGPPEJE: ::protobuf::MessageField::none(),
            FJOHNJPOHAO: ::std::vec::Vec::new(),
            FLJNOLCHBBC: 0,
            AFHKNCHFNLE: 0,
            BMCGKJFIEEH: ::protobuf::MessageField::none(),
            KCMHCLLEKHO: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MFJLECFEOAK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MFJLECFEOAK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MFJLECFEOAK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MFJLECFEOAK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MFJLECFEOAK.proto\x1a\x11ACOCEMFFEEE.proto\x1a\x16BattleModuleType\
    .proto\x1a\x11DEIBGGKJEME.proto\x1a\x11DFHFLPPEFGN.proto\x1a\x11EFNNGHDB\
    BHH.proto\x1a\x11IELPCHNGNOF.proto\x1a\x11JIHNGGNEKKO.proto\x1a\x11KGFGB\
    NFOADO.proto\"\x88\x06\n\x0bMFJLECFEOAK\x12\x20\n\x0bDDALCGLIHDE\x18\x01\
    \x20\x01(\rR\x0bDDALCGLIHDE\x12\x20\n\x0bBNNIJDPHLMN\x18\x02\x20\x01(\rR\
    \x0bBNNIJDPHLMN\x12\x20\n\x0bIDIEPEFFGIC\x18\x03\x20\x01(\rR\x0bIDIEPEFF\
    GIC\x12.\n\x0bCOCFMLGGMKE\x18\x04\x20\x01(\x0b2\x0c.ACOCEMFFEEER\x0bCOCF\
    MLGGMKE\x12.\n\x0bPFLLJAIGCLI\x18\x05\x20\x03(\x0b2\x0c.KGFGBNFOADOR\x0b\
    PFLLJAIGCLI\x12\x20\n\x0bPDAAJCKOAFF\x18\x06\x20\x01(\x0cR\x0bPDAAJCKOAF\
    F\x12\x20\n\x0bKJNLPEFLCNF\x18\x07\x20\x01(\rR\x0bKJNLPEFLCNF\x12\x20\n\
    \x0bFELEKBCBPFN\x18\x08\x20\x03(\rR\x0bFELEKBCBPFN\x12\x20\n\x0bNKFMMKOB\
    DBC\x18\t\x20\x01(\x08R\x0bNKFMMKOBDBC\x12.\n\x0bHLLGOGDPKJB\x18\n\x20\
    \x01(\x0e2\x0c.IELPCHNGNOFR\x0bHLLGOGDPKJB\x123\n\x0bAGICJPNNFPN\x18\x0b\
    \x20\x01(\x0e2\x11.BattleModuleTypeR\x0bAGICJPNNFPN\x12.\n\x0bAEPCAMCNNP\
    E\x18\x0c\x20\x03(\x0b2\x0c.DEIBGGKJEMER\x0bAEPCAMCNNPE\x12\x20\n\x0bHFJ\
    JPEFHJLA\x18\x0e\x20\x01(\rR\x0bHFJJPEFHJLA\x12.\n\x0bALKEMGPPEJE\x18\
    \x0f\x20\x01(\x0b2\x0c.JIHNGGNEKKOR\x0bALKEMGPPEJE\x12\x20\n\x0bFJOHNJPO\
    HAO\x18\x10\x20\x01(\x0cR\x0bFJOHNJPOHAO\x12\x20\n\x0bFLJNOLCHBBC\x18\
    \x11\x20\x01(\rR\x0bFLJNOLCHBBC\x12\x20\n\x0bAFHKNCHFNLE\x18\x12\x20\x01\
    (\rR\x0bAFHKNCHFNLE\x12.\n\x0bBMCGKJFIEEH\x18\x13\x20\x01(\x0b2\x0c.DFHF\
    LPPEFGNR\x0bBMCGKJFIEEH\x12.\n\x0bKCMHCLLEKHO\x18d\x20\x01(\x0b2\x0c.EFN\
    NGHDBBHHR\x0bKCMHCLLEKHOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::ACOCEMFFEEE::file_descriptor().clone());
            deps.push(super::BattleModuleType::file_descriptor().clone());
            deps.push(super::DEIBGGKJEME::file_descriptor().clone());
            deps.push(super::DFHFLPPEFGN::file_descriptor().clone());
            deps.push(super::EFNNGHDBBHH::file_descriptor().clone());
            deps.push(super::IELPCHNGNOF::file_descriptor().clone());
            deps.push(super::JIHNGGNEKKO::file_descriptor().clone());
            deps.push(super::KGFGBNFOADO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MFJLECFEOAK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
