// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AEFCDDKDPCG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AEFCDDKDPCG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AEFCDDKDPCG {
    // message oneof groups
    pub KJHGDIAABNA: ::std::option::Option<aefcddkdpcg::KJHGDIAABNA>,
    // special fields
    // @@protoc_insertion_point(special_field:AEFCDDKDPCG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AEFCDDKDPCG {
    fn default() -> &'a AEFCDDKDPCG {
        <AEFCDDKDPCG as ::protobuf::Message>::default_instance()
    }
}

impl AEFCDDKDPCG {
    pub fn new() -> AEFCDDKDPCG {
        ::std::default::Default::default()
    }

    // .RogueCommonBuffSelectInfo NNBGPHJBJMF = 112;

    pub fn NNBGPHJBJMF(&self) -> &super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(ref v)) => v,
            _ => <super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NNBGPHJBJMF(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_NNBGPHJBJMF(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NNBGPHJBJMF(&mut self, v: super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NNBGPHJBJMF(&mut self) -> &mut super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NNBGPHJBJMF(&mut self) -> super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if self.has_NNBGPHJBJMF() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()
        }
    }

    // .IMBNANICJLH DFKFJAOMNLP = 1827;

    pub fn DFKFJAOMNLP(&self) -> &super::IMBNANICJLH::IMBNANICJLH {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(ref v)) => v,
            _ => <super::IMBNANICJLH::IMBNANICJLH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DFKFJAOMNLP(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_DFKFJAOMNLP(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DFKFJAOMNLP(&mut self, v: super::IMBNANICJLH::IMBNANICJLH) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DFKFJAOMNLP(&mut self) -> &mut super::IMBNANICJLH::IMBNANICJLH {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(super::IMBNANICJLH::IMBNANICJLH::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DFKFJAOMNLP(&mut self) -> super::IMBNANICJLH::IMBNANICJLH {
        if self.has_DFKFJAOMNLP() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IMBNANICJLH::IMBNANICJLH::new()
        }
    }

    // .EDIOJBCALHB EMCJEPOJPAI = 654;

    pub fn EMCJEPOJPAI(&self) -> &super::EDIOJBCALHB::EDIOJBCALHB {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(ref v)) => v,
            _ => <super::EDIOJBCALHB::EDIOJBCALHB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EMCJEPOJPAI(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_EMCJEPOJPAI(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EMCJEPOJPAI(&mut self, v: super::EDIOJBCALHB::EDIOJBCALHB) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EMCJEPOJPAI(&mut self) -> &mut super::EDIOJBCALHB::EDIOJBCALHB {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(super::EDIOJBCALHB::EDIOJBCALHB::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EMCJEPOJPAI(&mut self) -> super::EDIOJBCALHB::EDIOJBCALHB {
        if self.has_EMCJEPOJPAI() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EDIOJBCALHB::EDIOJBCALHB::new()
        }
    }

    // .APMMDOHBDFC HPKNHHNFKAO = 1578;

    pub fn HPKNHHNFKAO(&self) -> &super::APMMDOHBDFC::APMMDOHBDFC {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(ref v)) => v,
            _ => <super::APMMDOHBDFC::APMMDOHBDFC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HPKNHHNFKAO(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_HPKNHHNFKAO(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HPKNHHNFKAO(&mut self, v: super::APMMDOHBDFC::APMMDOHBDFC) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HPKNHHNFKAO(&mut self) -> &mut super::APMMDOHBDFC::APMMDOHBDFC {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(super::APMMDOHBDFC::APMMDOHBDFC::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HPKNHHNFKAO(&mut self) -> super::APMMDOHBDFC::APMMDOHBDFC {
        if self.has_HPKNHHNFKAO() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::APMMDOHBDFC::APMMDOHBDFC::new()
        }
    }

    // .INEIFALBFIL LBKKLNJLALE = 1714;

    pub fn LBKKLNJLALE(&self) -> &super::INEIFALBFIL::INEIFALBFIL {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(ref v)) => v,
            _ => <super::INEIFALBFIL::INEIFALBFIL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LBKKLNJLALE(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_LBKKLNJLALE(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LBKKLNJLALE(&mut self, v: super::INEIFALBFIL::INEIFALBFIL) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LBKKLNJLALE(&mut self) -> &mut super::INEIFALBFIL::INEIFALBFIL {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(super::INEIFALBFIL::INEIFALBFIL::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LBKKLNJLALE(&mut self) -> super::INEIFALBFIL::INEIFALBFIL {
        if self.has_LBKKLNJLALE() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::INEIFALBFIL::INEIFALBFIL::new()
        }
    }

    // .BOEHIOPOPAF BCHBIBOMEPE = 571;

    pub fn BCHBIBOMEPE(&self) -> &super::BOEHIOPOPAF::BOEHIOPOPAF {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(ref v)) => v,
            _ => <super::BOEHIOPOPAF::BOEHIOPOPAF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BCHBIBOMEPE(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_BCHBIBOMEPE(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BCHBIBOMEPE(&mut self, v: super::BOEHIOPOPAF::BOEHIOPOPAF) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BCHBIBOMEPE(&mut self) -> &mut super::BOEHIOPOPAF::BOEHIOPOPAF {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(super::BOEHIOPOPAF::BOEHIOPOPAF::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BCHBIBOMEPE(&mut self) -> super::BOEHIOPOPAF::BOEHIOPOPAF {
        if self.has_BCHBIBOMEPE() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BOEHIOPOPAF::BOEHIOPOPAF::new()
        }
    }

    // .PBBBGAMJGID IALFJGKDPAK = 868;

    pub fn IALFJGKDPAK(&self) -> &super::PBBBGAMJGID::PBBBGAMJGID {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(ref v)) => v,
            _ => <super::PBBBGAMJGID::PBBBGAMJGID as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IALFJGKDPAK(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_IALFJGKDPAK(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IALFJGKDPAK(&mut self, v: super::PBBBGAMJGID::PBBBGAMJGID) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IALFJGKDPAK(&mut self) -> &mut super::PBBBGAMJGID::PBBBGAMJGID {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(super::PBBBGAMJGID::PBBBGAMJGID::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IALFJGKDPAK(&mut self) -> super::PBBBGAMJGID::PBBBGAMJGID {
        if self.has_IALFJGKDPAK() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PBBBGAMJGID::PBBBGAMJGID::new()
        }
    }

    // .FBGCMFJANMH IEODNFDGPOH = 1036;

    pub fn IEODNFDGPOH(&self) -> &super::FBGCMFJANMH::FBGCMFJANMH {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(ref v)) => v,
            _ => <super::FBGCMFJANMH::FBGCMFJANMH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IEODNFDGPOH(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_IEODNFDGPOH(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IEODNFDGPOH(&mut self, v: super::FBGCMFJANMH::FBGCMFJANMH) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IEODNFDGPOH(&mut self) -> &mut super::FBGCMFJANMH::FBGCMFJANMH {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(super::FBGCMFJANMH::FBGCMFJANMH::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IEODNFDGPOH(&mut self) -> super::FBGCMFJANMH::FBGCMFJANMH {
        if self.has_IEODNFDGPOH() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FBGCMFJANMH::FBGCMFJANMH::new()
        }
    }

    // .PIMBOBLCAJF KFMEODPLFIK = 557;

    pub fn KFMEODPLFIK(&self) -> &super::PIMBOBLCAJF::PIMBOBLCAJF {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(ref v)) => v,
            _ => <super::PIMBOBLCAJF::PIMBOBLCAJF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KFMEODPLFIK(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_KFMEODPLFIK(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KFMEODPLFIK(&mut self, v: super::PIMBOBLCAJF::PIMBOBLCAJF) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KFMEODPLFIK(&mut self) -> &mut super::PIMBOBLCAJF::PIMBOBLCAJF {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(super::PIMBOBLCAJF::PIMBOBLCAJF::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KFMEODPLFIK(&mut self) -> super::PIMBOBLCAJF::PIMBOBLCAJF {
        if self.has_KFMEODPLFIK() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PIMBOBLCAJF::PIMBOBLCAJF::new()
        }
    }

    // .EEDHHFNHLBH MJGMJDLLEJP = 1150;

    pub fn MJGMJDLLEJP(&self) -> &super::EEDHHFNHLBH::EEDHHFNHLBH {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(ref v)) => v,
            _ => <super::EEDHHFNHLBH::EEDHHFNHLBH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MJGMJDLLEJP(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_MJGMJDLLEJP(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MJGMJDLLEJP(&mut self, v: super::EEDHHFNHLBH::EEDHHFNHLBH) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MJGMJDLLEJP(&mut self) -> &mut super::EEDHHFNHLBH::EEDHHFNHLBH {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(super::EEDHHFNHLBH::EEDHHFNHLBH::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MJGMJDLLEJP(&mut self) -> super::EEDHHFNHLBH::EEDHHFNHLBH {
        if self.has_MJGMJDLLEJP() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EEDHHFNHLBH::EEDHHFNHLBH::new()
        }
    }

    // .NLBICHBHJAN LLJFLIBFKGF = 57;

    pub fn LLJFLIBFKGF(&self) -> &super::NLBICHBHJAN::NLBICHBHJAN {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(ref v)) => v,
            _ => <super::NLBICHBHJAN::NLBICHBHJAN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LLJFLIBFKGF(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_LLJFLIBFKGF(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LLJFLIBFKGF(&mut self, v: super::NLBICHBHJAN::NLBICHBHJAN) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LLJFLIBFKGF(&mut self) -> &mut super::NLBICHBHJAN::NLBICHBHJAN {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(super::NLBICHBHJAN::NLBICHBHJAN::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LLJFLIBFKGF(&mut self) -> super::NLBICHBHJAN::NLBICHBHJAN {
        if self.has_LLJFLIBFKGF() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NLBICHBHJAN::NLBICHBHJAN::new()
        }
    }

    // .GAOHJBIGBGB GLICLFECINJ = 1260;

    pub fn GLICLFECINJ(&self) -> &super::GAOHJBIGBGB::GAOHJBIGBGB {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(ref v)) => v,
            _ => <super::GAOHJBIGBGB::GAOHJBIGBGB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GLICLFECINJ(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_GLICLFECINJ(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GLICLFECINJ(&mut self, v: super::GAOHJBIGBGB::GAOHJBIGBGB) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GLICLFECINJ(&mut self) -> &mut super::GAOHJBIGBGB::GAOHJBIGBGB {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(super::GAOHJBIGBGB::GAOHJBIGBGB::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GLICLFECINJ(&mut self) -> super::GAOHJBIGBGB::GAOHJBIGBGB {
        if self.has_GLICLFECINJ() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GAOHJBIGBGB::GAOHJBIGBGB::new()
        }
    }

    // .DJJOEFNMBDL EMAJJKOPLBL = 850;

    pub fn EMAJJKOPLBL(&self) -> &super::DJJOEFNMBDL::DJJOEFNMBDL {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(ref v)) => v,
            _ => <super::DJJOEFNMBDL::DJJOEFNMBDL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EMAJJKOPLBL(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_EMAJJKOPLBL(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EMAJJKOPLBL(&mut self, v: super::DJJOEFNMBDL::DJJOEFNMBDL) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EMAJJKOPLBL(&mut self) -> &mut super::DJJOEFNMBDL::DJJOEFNMBDL {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(super::DJJOEFNMBDL::DJJOEFNMBDL::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EMAJJKOPLBL(&mut self) -> super::DJJOEFNMBDL::DJJOEFNMBDL {
        if self.has_EMAJJKOPLBL() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DJJOEFNMBDL::DJJOEFNMBDL::new()
        }
    }

    // .RogueFormulaSelectInfo DICHDDDAFJH = 894;

    pub fn DICHDDDAFJH(&self) -> &super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(ref v)) => v,
            _ => <super::RogueFormulaSelectInfo::RogueFormulaSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DICHDDDAFJH(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_DICHDDDAFJH(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DICHDDDAFJH(&mut self, v: super::RogueFormulaSelectInfo::RogueFormulaSelectInfo) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DICHDDDAFJH(&mut self) -> &mut super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DICHDDDAFJH(&mut self) -> super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if self.has_DICHDDDAFJH() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()
        }
    }

    // .BGCNBANPDDM PNGAAMIAKAD = 1713;

    pub fn PNGAAMIAKAD(&self) -> &super::BGCNBANPDDM::BGCNBANPDDM {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(ref v)) => v,
            _ => <super::BGCNBANPDDM::BGCNBANPDDM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PNGAAMIAKAD(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_PNGAAMIAKAD(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PNGAAMIAKAD(&mut self, v: super::BGCNBANPDDM::BGCNBANPDDM) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PNGAAMIAKAD(&mut self) -> &mut super::BGCNBANPDDM::BGCNBANPDDM {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(super::BGCNBANPDDM::BGCNBANPDDM::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PNGAAMIAKAD(&mut self) -> super::BGCNBANPDDM::BGCNBANPDDM {
        if self.has_PNGAAMIAKAD() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BGCNBANPDDM::BGCNBANPDDM::new()
        }
    }

    // .CAPFBCKHMCD HHNILCOPBFB = 2041;

    pub fn HHNILCOPBFB(&self) -> &super::CAPFBCKHMCD::CAPFBCKHMCD {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(ref v)) => v,
            _ => <super::CAPFBCKHMCD::CAPFBCKHMCD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HHNILCOPBFB(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_HHNILCOPBFB(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HHNILCOPBFB(&mut self, v: super::CAPFBCKHMCD::CAPFBCKHMCD) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HHNILCOPBFB(&mut self) -> &mut super::CAPFBCKHMCD::CAPFBCKHMCD {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(super::CAPFBCKHMCD::CAPFBCKHMCD::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HHNILCOPBFB(&mut self) -> super::CAPFBCKHMCD::CAPFBCKHMCD {
        if self.has_HHNILCOPBFB() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CAPFBCKHMCD::CAPFBCKHMCD::new()
        }
    }

    // .CGICOCKLACO AECANIJLIBB = 50;

    pub fn AECANIJLIBB(&self) -> &super::CGICOCKLACO::CGICOCKLACO {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(ref v)) => v,
            _ => <super::CGICOCKLACO::CGICOCKLACO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AECANIJLIBB(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_AECANIJLIBB(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AECANIJLIBB(&mut self, v: super::CGICOCKLACO::CGICOCKLACO) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AECANIJLIBB(&mut self) -> &mut super::CGICOCKLACO::CGICOCKLACO {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(super::CGICOCKLACO::CGICOCKLACO::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AECANIJLIBB(&mut self) -> super::CGICOCKLACO::CGICOCKLACO {
        if self.has_AECANIJLIBB() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGICOCKLACO::CGICOCKLACO::new()
        }
    }

    // .AFHLLPDMCJF JONMIOAMMLB = 268;

    pub fn JONMIOAMMLB(&self) -> &super::AFHLLPDMCJF::AFHLLPDMCJF {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(ref v)) => v,
            _ => <super::AFHLLPDMCJF::AFHLLPDMCJF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JONMIOAMMLB(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_JONMIOAMMLB(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JONMIOAMMLB(&mut self, v: super::AFHLLPDMCJF::AFHLLPDMCJF) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JONMIOAMMLB(&mut self) -> &mut super::AFHLLPDMCJF::AFHLLPDMCJF {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(super::AFHLLPDMCJF::AFHLLPDMCJF::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JONMIOAMMLB(&mut self) -> super::AFHLLPDMCJF::AFHLLPDMCJF {
        if self.has_JONMIOAMMLB() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AFHLLPDMCJF::AFHLLPDMCJF::new()
        }
    }

    // .JDGBFNHLADP KHCBEFJJMPI = 1404;

    pub fn KHCBEFJJMPI(&self) -> &super::JDGBFNHLADP::JDGBFNHLADP {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(ref v)) => v,
            _ => <super::JDGBFNHLADP::JDGBFNHLADP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KHCBEFJJMPI(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_KHCBEFJJMPI(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KHCBEFJJMPI(&mut self, v: super::JDGBFNHLADP::JDGBFNHLADP) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KHCBEFJJMPI(&mut self) -> &mut super::JDGBFNHLADP::JDGBFNHLADP {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(super::JDGBFNHLADP::JDGBFNHLADP::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KHCBEFJJMPI(&mut self) -> super::JDGBFNHLADP::JDGBFNHLADP {
        if self.has_KHCBEFJJMPI() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JDGBFNHLADP::JDGBFNHLADP::new()
        }
    }

    // .CGICOCKLACO KGFLENGNFNP = 424;

    pub fn KGFLENGNFNP(&self) -> &super::CGICOCKLACO::CGICOCKLACO {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(ref v)) => v,
            _ => <super::CGICOCKLACO::CGICOCKLACO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KGFLENGNFNP(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_KGFLENGNFNP(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KGFLENGNFNP(&mut self, v: super::CGICOCKLACO::CGICOCKLACO) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KGFLENGNFNP(&mut self) -> &mut super::CGICOCKLACO::CGICOCKLACO {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(super::CGICOCKLACO::CGICOCKLACO::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KGFLENGNFNP(&mut self) -> super::CGICOCKLACO::CGICOCKLACO {
        if self.has_KGFLENGNFNP() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGICOCKLACO::CGICOCKLACO::new()
        }
    }

    // .CGICOCKLACO KGICGMLDGHD = 1121;

    pub fn KGICGMLDGHD(&self) -> &super::CGICOCKLACO::CGICOCKLACO {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(ref v)) => v,
            _ => <super::CGICOCKLACO::CGICOCKLACO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KGICGMLDGHD(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_KGICGMLDGHD(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KGICGMLDGHD(&mut self, v: super::CGICOCKLACO::CGICOCKLACO) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KGICGMLDGHD(&mut self) -> &mut super::CGICOCKLACO::CGICOCKLACO {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(super::CGICOCKLACO::CGICOCKLACO::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KGICGMLDGHD(&mut self) -> super::CGICOCKLACO::CGICOCKLACO {
        if self.has_KGICGMLDGHD() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGICOCKLACO::CGICOCKLACO::new()
        }
    }

    // .CGICOCKLACO EHIHHECNPGN = 431;

    pub fn EHIHHECNPGN(&self) -> &super::CGICOCKLACO::CGICOCKLACO {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(ref v)) => v,
            _ => <super::CGICOCKLACO::CGICOCKLACO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EHIHHECNPGN(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_EHIHHECNPGN(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EHIHHECNPGN(&mut self, v: super::CGICOCKLACO::CGICOCKLACO) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EHIHHECNPGN(&mut self) -> &mut super::CGICOCKLACO::CGICOCKLACO {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(super::CGICOCKLACO::CGICOCKLACO::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EHIHHECNPGN(&mut self) -> super::CGICOCKLACO::CGICOCKLACO {
        if self.has_EHIHHECNPGN() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGICOCKLACO::CGICOCKLACO::new()
        }
    }

    // .CBDOEBJHECH MPPOOKADLFL = 1590;

    pub fn MPPOOKADLFL(&self) -> &super::CBDOEBJHECH::CBDOEBJHECH {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(ref v)) => v,
            _ => <super::CBDOEBJHECH::CBDOEBJHECH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MPPOOKADLFL(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_MPPOOKADLFL(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MPPOOKADLFL(&mut self, v: super::CBDOEBJHECH::CBDOEBJHECH) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MPPOOKADLFL(&mut self) -> &mut super::CBDOEBJHECH::CBDOEBJHECH {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(super::CBDOEBJHECH::CBDOEBJHECH::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MPPOOKADLFL(&mut self) -> super::CBDOEBJHECH::CBDOEBJHECH {
        if self.has_MPPOOKADLFL() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CBDOEBJHECH::CBDOEBJHECH::new()
        }
    }

    // .CBDOEBJHECH EDDHKBBHCEN = 921;

    pub fn EDDHKBBHCEN(&self) -> &super::CBDOEBJHECH::CBDOEBJHECH {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(ref v)) => v,
            _ => <super::CBDOEBJHECH::CBDOEBJHECH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EDDHKBBHCEN(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_EDDHKBBHCEN(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EDDHKBBHCEN(&mut self, v: super::CBDOEBJHECH::CBDOEBJHECH) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EDDHKBBHCEN(&mut self) -> &mut super::CBDOEBJHECH::CBDOEBJHECH {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(super::CBDOEBJHECH::CBDOEBJHECH::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EDDHKBBHCEN(&mut self) -> super::CBDOEBJHECH::CBDOEBJHECH {
        if self.has_EDDHKBBHCEN() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CBDOEBJHECH::CBDOEBJHECH::new()
        }
    }

    // .CBDOEBJHECH KLNIIJKJEKF = 1290;

    pub fn KLNIIJKJEKF(&self) -> &super::CBDOEBJHECH::CBDOEBJHECH {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(ref v)) => v,
            _ => <super::CBDOEBJHECH::CBDOEBJHECH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KLNIIJKJEKF(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_KLNIIJKJEKF(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KLNIIJKJEKF(&mut self, v: super::CBDOEBJHECH::CBDOEBJHECH) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KLNIIJKJEKF(&mut self) -> &mut super::CBDOEBJHECH::CBDOEBJHECH {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(super::CBDOEBJHECH::CBDOEBJHECH::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KLNIIJKJEKF(&mut self) -> super::CBDOEBJHECH::CBDOEBJHECH {
        if self.has_KLNIIJKJEKF() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CBDOEBJHECH::CBDOEBJHECH::new()
        }
    }

    // .PIKBKJJKHBP KEBOMHDMCEA = 463;

    pub fn KEBOMHDMCEA(&self) -> &super::PIKBKJJKHBP::PIKBKJJKHBP {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(ref v)) => v,
            _ => <super::PIKBKJJKHBP::PIKBKJJKHBP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KEBOMHDMCEA(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
    }

    pub fn has_KEBOMHDMCEA(&self) -> bool {
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KEBOMHDMCEA(&mut self, v: super::PIKBKJJKHBP::PIKBKJJKHBP) {
        self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KEBOMHDMCEA(&mut self) -> &mut super::PIKBKJJKHBP::PIKBKJJKHBP {
        if let ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(_)) = self.KJHGDIAABNA {
        } else {
            self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(super::PIKBKJJKHBP::PIKBKJJKHBP::new()));
        }
        match self.KJHGDIAABNA {
            ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KEBOMHDMCEA(&mut self) -> super::PIKBKJJKHBP::PIKBKJJKHBP {
        if self.has_KEBOMHDMCEA() {
            match self.KJHGDIAABNA.take() {
                ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PIKBKJJKHBP::PIKBKJJKHBP::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(26);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo>(
            "NNBGPHJBJMF",
            AEFCDDKDPCG::has_NNBGPHJBJMF,
            AEFCDDKDPCG::NNBGPHJBJMF,
            AEFCDDKDPCG::mut_NNBGPHJBJMF,
            AEFCDDKDPCG::set_NNBGPHJBJMF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IMBNANICJLH::IMBNANICJLH>(
            "DFKFJAOMNLP",
            AEFCDDKDPCG::has_DFKFJAOMNLP,
            AEFCDDKDPCG::DFKFJAOMNLP,
            AEFCDDKDPCG::mut_DFKFJAOMNLP,
            AEFCDDKDPCG::set_DFKFJAOMNLP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EDIOJBCALHB::EDIOJBCALHB>(
            "EMCJEPOJPAI",
            AEFCDDKDPCG::has_EMCJEPOJPAI,
            AEFCDDKDPCG::EMCJEPOJPAI,
            AEFCDDKDPCG::mut_EMCJEPOJPAI,
            AEFCDDKDPCG::set_EMCJEPOJPAI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::APMMDOHBDFC::APMMDOHBDFC>(
            "HPKNHHNFKAO",
            AEFCDDKDPCG::has_HPKNHHNFKAO,
            AEFCDDKDPCG::HPKNHHNFKAO,
            AEFCDDKDPCG::mut_HPKNHHNFKAO,
            AEFCDDKDPCG::set_HPKNHHNFKAO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::INEIFALBFIL::INEIFALBFIL>(
            "LBKKLNJLALE",
            AEFCDDKDPCG::has_LBKKLNJLALE,
            AEFCDDKDPCG::LBKKLNJLALE,
            AEFCDDKDPCG::mut_LBKKLNJLALE,
            AEFCDDKDPCG::set_LBKKLNJLALE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BOEHIOPOPAF::BOEHIOPOPAF>(
            "BCHBIBOMEPE",
            AEFCDDKDPCG::has_BCHBIBOMEPE,
            AEFCDDKDPCG::BCHBIBOMEPE,
            AEFCDDKDPCG::mut_BCHBIBOMEPE,
            AEFCDDKDPCG::set_BCHBIBOMEPE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PBBBGAMJGID::PBBBGAMJGID>(
            "IALFJGKDPAK",
            AEFCDDKDPCG::has_IALFJGKDPAK,
            AEFCDDKDPCG::IALFJGKDPAK,
            AEFCDDKDPCG::mut_IALFJGKDPAK,
            AEFCDDKDPCG::set_IALFJGKDPAK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FBGCMFJANMH::FBGCMFJANMH>(
            "IEODNFDGPOH",
            AEFCDDKDPCG::has_IEODNFDGPOH,
            AEFCDDKDPCG::IEODNFDGPOH,
            AEFCDDKDPCG::mut_IEODNFDGPOH,
            AEFCDDKDPCG::set_IEODNFDGPOH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PIMBOBLCAJF::PIMBOBLCAJF>(
            "KFMEODPLFIK",
            AEFCDDKDPCG::has_KFMEODPLFIK,
            AEFCDDKDPCG::KFMEODPLFIK,
            AEFCDDKDPCG::mut_KFMEODPLFIK,
            AEFCDDKDPCG::set_KFMEODPLFIK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EEDHHFNHLBH::EEDHHFNHLBH>(
            "MJGMJDLLEJP",
            AEFCDDKDPCG::has_MJGMJDLLEJP,
            AEFCDDKDPCG::MJGMJDLLEJP,
            AEFCDDKDPCG::mut_MJGMJDLLEJP,
            AEFCDDKDPCG::set_MJGMJDLLEJP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NLBICHBHJAN::NLBICHBHJAN>(
            "LLJFLIBFKGF",
            AEFCDDKDPCG::has_LLJFLIBFKGF,
            AEFCDDKDPCG::LLJFLIBFKGF,
            AEFCDDKDPCG::mut_LLJFLIBFKGF,
            AEFCDDKDPCG::set_LLJFLIBFKGF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GAOHJBIGBGB::GAOHJBIGBGB>(
            "GLICLFECINJ",
            AEFCDDKDPCG::has_GLICLFECINJ,
            AEFCDDKDPCG::GLICLFECINJ,
            AEFCDDKDPCG::mut_GLICLFECINJ,
            AEFCDDKDPCG::set_GLICLFECINJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DJJOEFNMBDL::DJJOEFNMBDL>(
            "EMAJJKOPLBL",
            AEFCDDKDPCG::has_EMAJJKOPLBL,
            AEFCDDKDPCG::EMAJJKOPLBL,
            AEFCDDKDPCG::mut_EMAJJKOPLBL,
            AEFCDDKDPCG::set_EMAJJKOPLBL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueFormulaSelectInfo::RogueFormulaSelectInfo>(
            "DICHDDDAFJH",
            AEFCDDKDPCG::has_DICHDDDAFJH,
            AEFCDDKDPCG::DICHDDDAFJH,
            AEFCDDKDPCG::mut_DICHDDDAFJH,
            AEFCDDKDPCG::set_DICHDDDAFJH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BGCNBANPDDM::BGCNBANPDDM>(
            "PNGAAMIAKAD",
            AEFCDDKDPCG::has_PNGAAMIAKAD,
            AEFCDDKDPCG::PNGAAMIAKAD,
            AEFCDDKDPCG::mut_PNGAAMIAKAD,
            AEFCDDKDPCG::set_PNGAAMIAKAD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CAPFBCKHMCD::CAPFBCKHMCD>(
            "HHNILCOPBFB",
            AEFCDDKDPCG::has_HHNILCOPBFB,
            AEFCDDKDPCG::HHNILCOPBFB,
            AEFCDDKDPCG::mut_HHNILCOPBFB,
            AEFCDDKDPCG::set_HHNILCOPBFB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGICOCKLACO::CGICOCKLACO>(
            "AECANIJLIBB",
            AEFCDDKDPCG::has_AECANIJLIBB,
            AEFCDDKDPCG::AECANIJLIBB,
            AEFCDDKDPCG::mut_AECANIJLIBB,
            AEFCDDKDPCG::set_AECANIJLIBB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AFHLLPDMCJF::AFHLLPDMCJF>(
            "JONMIOAMMLB",
            AEFCDDKDPCG::has_JONMIOAMMLB,
            AEFCDDKDPCG::JONMIOAMMLB,
            AEFCDDKDPCG::mut_JONMIOAMMLB,
            AEFCDDKDPCG::set_JONMIOAMMLB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JDGBFNHLADP::JDGBFNHLADP>(
            "KHCBEFJJMPI",
            AEFCDDKDPCG::has_KHCBEFJJMPI,
            AEFCDDKDPCG::KHCBEFJJMPI,
            AEFCDDKDPCG::mut_KHCBEFJJMPI,
            AEFCDDKDPCG::set_KHCBEFJJMPI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGICOCKLACO::CGICOCKLACO>(
            "KGFLENGNFNP",
            AEFCDDKDPCG::has_KGFLENGNFNP,
            AEFCDDKDPCG::KGFLENGNFNP,
            AEFCDDKDPCG::mut_KGFLENGNFNP,
            AEFCDDKDPCG::set_KGFLENGNFNP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGICOCKLACO::CGICOCKLACO>(
            "KGICGMLDGHD",
            AEFCDDKDPCG::has_KGICGMLDGHD,
            AEFCDDKDPCG::KGICGMLDGHD,
            AEFCDDKDPCG::mut_KGICGMLDGHD,
            AEFCDDKDPCG::set_KGICGMLDGHD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGICOCKLACO::CGICOCKLACO>(
            "EHIHHECNPGN",
            AEFCDDKDPCG::has_EHIHHECNPGN,
            AEFCDDKDPCG::EHIHHECNPGN,
            AEFCDDKDPCG::mut_EHIHHECNPGN,
            AEFCDDKDPCG::set_EHIHHECNPGN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CBDOEBJHECH::CBDOEBJHECH>(
            "MPPOOKADLFL",
            AEFCDDKDPCG::has_MPPOOKADLFL,
            AEFCDDKDPCG::MPPOOKADLFL,
            AEFCDDKDPCG::mut_MPPOOKADLFL,
            AEFCDDKDPCG::set_MPPOOKADLFL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CBDOEBJHECH::CBDOEBJHECH>(
            "EDDHKBBHCEN",
            AEFCDDKDPCG::has_EDDHKBBHCEN,
            AEFCDDKDPCG::EDDHKBBHCEN,
            AEFCDDKDPCG::mut_EDDHKBBHCEN,
            AEFCDDKDPCG::set_EDDHKBBHCEN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CBDOEBJHECH::CBDOEBJHECH>(
            "KLNIIJKJEKF",
            AEFCDDKDPCG::has_KLNIIJKJEKF,
            AEFCDDKDPCG::KLNIIJKJEKF,
            AEFCDDKDPCG::mut_KLNIIJKJEKF,
            AEFCDDKDPCG::set_KLNIIJKJEKF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PIKBKJJKHBP::PIKBKJJKHBP>(
            "KEBOMHDMCEA",
            AEFCDDKDPCG::has_KEBOMHDMCEA,
            AEFCDDKDPCG::KEBOMHDMCEA,
            AEFCDDKDPCG::mut_KEBOMHDMCEA,
            AEFCDDKDPCG::set_KEBOMHDMCEA,
        ));
        oneofs.push(aefcddkdpcg::KJHGDIAABNA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AEFCDDKDPCG>(
            "AEFCDDKDPCG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AEFCDDKDPCG {
    const NAME: &'static str = "AEFCDDKDPCG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                898 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(is.read_message()?));
                },
                14618 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(is.read_message()?));
                },
                5234 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(is.read_message()?));
                },
                12626 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(is.read_message()?));
                },
                13714 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(is.read_message()?));
                },
                4570 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(is.read_message()?));
                },
                6946 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(is.read_message()?));
                },
                8290 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(is.read_message()?));
                },
                4458 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(is.read_message()?));
                },
                9202 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(is.read_message()?));
                },
                458 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(is.read_message()?));
                },
                10082 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(is.read_message()?));
                },
                6802 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(is.read_message()?));
                },
                7154 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(is.read_message()?));
                },
                13706 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(is.read_message()?));
                },
                16330 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(is.read_message()?));
                },
                402 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(is.read_message()?));
                },
                2146 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(is.read_message()?));
                },
                11234 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(is.read_message()?));
                },
                3394 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(is.read_message()?));
                },
                8970 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(is.read_message()?));
                },
                3450 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(is.read_message()?));
                },
                12722 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(is.read_message()?));
                },
                7370 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(is.read_message()?));
                },
                10322 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(is.read_message()?));
                },
                3706 => {
                    self.KJHGDIAABNA = ::std::option::Option::Some(aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.KJHGDIAABNA {
            match v {
                &aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.KJHGDIAABNA {
            match v {
                &aefcddkdpcg::KJHGDIAABNA::NNBGPHJBJMF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(112, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::DFKFJAOMNLP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1827, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::EMCJEPOJPAI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(654, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::HPKNHHNFKAO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1578, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::LBKKLNJLALE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1714, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::BCHBIBOMEPE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(571, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::IALFJGKDPAK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(868, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::IEODNFDGPOH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1036, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::KFMEODPLFIK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(557, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::MJGMJDLLEJP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1150, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::LLJFLIBFKGF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(57, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::GLICLFECINJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1260, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::EMAJJKOPLBL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(850, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::DICHDDDAFJH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(894, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::PNGAAMIAKAD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1713, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::HHNILCOPBFB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2041, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::AECANIJLIBB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(50, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::JONMIOAMMLB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(268, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::KHCBEFJJMPI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1404, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::KGFLENGNFNP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(424, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::KGICGMLDGHD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1121, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::EHIHHECNPGN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(431, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::MPPOOKADLFL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1590, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::EDDHKBBHCEN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(921, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::KLNIIJKJEKF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1290, v, os)?;
                },
                &aefcddkdpcg::KJHGDIAABNA::KEBOMHDMCEA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(463, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AEFCDDKDPCG {
        AEFCDDKDPCG::new()
    }

    fn clear(&mut self) {
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.KJHGDIAABNA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AEFCDDKDPCG {
        static instance: AEFCDDKDPCG = AEFCDDKDPCG {
            KJHGDIAABNA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AEFCDDKDPCG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AEFCDDKDPCG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AEFCDDKDPCG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AEFCDDKDPCG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AEFCDDKDPCG`
pub mod aefcddkdpcg {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AEFCDDKDPCG.KJHGDIAABNA)
    pub enum KJHGDIAABNA {
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.NNBGPHJBJMF)
        NNBGPHJBJMF(super::super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.DFKFJAOMNLP)
        DFKFJAOMNLP(super::super::IMBNANICJLH::IMBNANICJLH),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.EMCJEPOJPAI)
        EMCJEPOJPAI(super::super::EDIOJBCALHB::EDIOJBCALHB),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.HPKNHHNFKAO)
        HPKNHHNFKAO(super::super::APMMDOHBDFC::APMMDOHBDFC),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.LBKKLNJLALE)
        LBKKLNJLALE(super::super::INEIFALBFIL::INEIFALBFIL),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.BCHBIBOMEPE)
        BCHBIBOMEPE(super::super::BOEHIOPOPAF::BOEHIOPOPAF),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.IALFJGKDPAK)
        IALFJGKDPAK(super::super::PBBBGAMJGID::PBBBGAMJGID),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.IEODNFDGPOH)
        IEODNFDGPOH(super::super::FBGCMFJANMH::FBGCMFJANMH),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.KFMEODPLFIK)
        KFMEODPLFIK(super::super::PIMBOBLCAJF::PIMBOBLCAJF),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.MJGMJDLLEJP)
        MJGMJDLLEJP(super::super::EEDHHFNHLBH::EEDHHFNHLBH),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.LLJFLIBFKGF)
        LLJFLIBFKGF(super::super::NLBICHBHJAN::NLBICHBHJAN),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.GLICLFECINJ)
        GLICLFECINJ(super::super::GAOHJBIGBGB::GAOHJBIGBGB),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.EMAJJKOPLBL)
        EMAJJKOPLBL(super::super::DJJOEFNMBDL::DJJOEFNMBDL),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.DICHDDDAFJH)
        DICHDDDAFJH(super::super::RogueFormulaSelectInfo::RogueFormulaSelectInfo),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.PNGAAMIAKAD)
        PNGAAMIAKAD(super::super::BGCNBANPDDM::BGCNBANPDDM),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.HHNILCOPBFB)
        HHNILCOPBFB(super::super::CAPFBCKHMCD::CAPFBCKHMCD),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.AECANIJLIBB)
        AECANIJLIBB(super::super::CGICOCKLACO::CGICOCKLACO),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.JONMIOAMMLB)
        JONMIOAMMLB(super::super::AFHLLPDMCJF::AFHLLPDMCJF),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.KHCBEFJJMPI)
        KHCBEFJJMPI(super::super::JDGBFNHLADP::JDGBFNHLADP),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.KGFLENGNFNP)
        KGFLENGNFNP(super::super::CGICOCKLACO::CGICOCKLACO),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.KGICGMLDGHD)
        KGICGMLDGHD(super::super::CGICOCKLACO::CGICOCKLACO),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.EHIHHECNPGN)
        EHIHHECNPGN(super::super::CGICOCKLACO::CGICOCKLACO),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.MPPOOKADLFL)
        MPPOOKADLFL(super::super::CBDOEBJHECH::CBDOEBJHECH),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.EDDHKBBHCEN)
        EDDHKBBHCEN(super::super::CBDOEBJHECH::CBDOEBJHECH),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.KLNIIJKJEKF)
        KLNIIJKJEKF(super::super::CBDOEBJHECH::CBDOEBJHECH),
        // @@protoc_insertion_point(oneof_field:AEFCDDKDPCG.KEBOMHDMCEA)
        KEBOMHDMCEA(super::super::PIKBKJJKHBP::PIKBKJJKHBP),
    }

    impl ::protobuf::Oneof for KJHGDIAABNA {
    }

    impl ::protobuf::OneofFull for KJHGDIAABNA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AEFCDDKDPCG as ::protobuf::MessageFull>::descriptor().oneof_by_name("KJHGDIAABNA").unwrap()).clone()
        }
    }

    impl KJHGDIAABNA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KJHGDIAABNA>("KJHGDIAABNA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AEFCDDKDPCG.proto\x1a\x11AFHLLPDMCJF.proto\x1a\x11APMMDOHBDFC.prot\
    o\x1a\x11BGCNBANPDDM.proto\x1a\x11BOEHIOPOPAF.proto\x1a\x11CAPFBCKHMCD.p\
    roto\x1a\x11CBDOEBJHECH.proto\x1a\x11CGICOCKLACO.proto\x1a\x11DJJOEFNMBD\
    L.proto\x1a\x11EDIOJBCALHB.proto\x1a\x11EEDHHFNHLBH.proto\x1a\x11FBGCMFJ\
    ANMH.proto\x1a\x11GAOHJBIGBGB.proto\x1a\x11IMBNANICJLH.proto\x1a\x11INEI\
    FALBFIL.proto\x1a\x11JDGBFNHLADP.proto\x1a\x11NLBICHBHJAN.proto\x1a\x11P\
    BBBGAMJGID.proto\x1a\x11PIKBKJJKHBP.proto\x1a\x11PIMBOBLCAJF.proto\x1a\
    \x1fRogueCommonBuffSelectInfo.proto\x1a\x1cRogueFormulaSelectInfo.proto\
    \"\xe0\n\n\x0bAEFCDDKDPCG\x12>\n\x0bNNBGPHJBJMF\x18p\x20\x01(\x0b2\x1a.R\
    ogueCommonBuffSelectInfoH\0R\x0bNNBGPHJBJMF\x121\n\x0bDFKFJAOMNLP\x18\
    \xa3\x0e\x20\x01(\x0b2\x0c.IMBNANICJLHH\0R\x0bDFKFJAOMNLP\x121\n\x0bEMCJ\
    EPOJPAI\x18\x8e\x05\x20\x01(\x0b2\x0c.EDIOJBCALHBH\0R\x0bEMCJEPOJPAI\x12\
    1\n\x0bHPKNHHNFKAO\x18\xaa\x0c\x20\x01(\x0b2\x0c.APMMDOHBDFCH\0R\x0bHPKN\
    HHNFKAO\x121\n\x0bLBKKLNJLALE\x18\xb2\r\x20\x01(\x0b2\x0c.INEIFALBFILH\0\
    R\x0bLBKKLNJLALE\x121\n\x0bBCHBIBOMEPE\x18\xbb\x04\x20\x01(\x0b2\x0c.BOE\
    HIOPOPAFH\0R\x0bBCHBIBOMEPE\x121\n\x0bIALFJGKDPAK\x18\xe4\x06\x20\x01(\
    \x0b2\x0c.PBBBGAMJGIDH\0R\x0bIALFJGKDPAK\x121\n\x0bIEODNFDGPOH\x18\x8c\
    \x08\x20\x01(\x0b2\x0c.FBGCMFJANMHH\0R\x0bIEODNFDGPOH\x121\n\x0bKFMEODPL\
    FIK\x18\xad\x04\x20\x01(\x0b2\x0c.PIMBOBLCAJFH\0R\x0bKFMEODPLFIK\x121\n\
    \x0bMJGMJDLLEJP\x18\xfe\x08\x20\x01(\x0b2\x0c.EEDHHFNHLBHH\0R\x0bMJGMJDL\
    LEJP\x120\n\x0bLLJFLIBFKGF\x189\x20\x01(\x0b2\x0c.NLBICHBHJANH\0R\x0bLLJ\
    FLIBFKGF\x121\n\x0bGLICLFECINJ\x18\xec\t\x20\x01(\x0b2\x0c.GAOHJBIGBGBH\
    \0R\x0bGLICLFECINJ\x121\n\x0bEMAJJKOPLBL\x18\xd2\x06\x20\x01(\x0b2\x0c.D\
    JJOEFNMBDLH\0R\x0bEMAJJKOPLBL\x12<\n\x0bDICHDDDAFJH\x18\xfe\x06\x20\x01(\
    \x0b2\x17.RogueFormulaSelectInfoH\0R\x0bDICHDDDAFJH\x121\n\x0bPNGAAMIAKA\
    D\x18\xb1\r\x20\x01(\x0b2\x0c.BGCNBANPDDMH\0R\x0bPNGAAMIAKAD\x121\n\x0bH\
    HNILCOPBFB\x18\xf9\x0f\x20\x01(\x0b2\x0c.CAPFBCKHMCDH\0R\x0bHHNILCOPBFB\
    \x120\n\x0bAECANIJLIBB\x182\x20\x01(\x0b2\x0c.CGICOCKLACOH\0R\x0bAECANIJ\
    LIBB\x121\n\x0bJONMIOAMMLB\x18\x8c\x02\x20\x01(\x0b2\x0c.AFHLLPDMCJFH\0R\
    \x0bJONMIOAMMLB\x121\n\x0bKHCBEFJJMPI\x18\xfc\n\x20\x01(\x0b2\x0c.JDGBFN\
    HLADPH\0R\x0bKHCBEFJJMPI\x121\n\x0bKGFLENGNFNP\x18\xa8\x03\x20\x01(\x0b2\
    \x0c.CGICOCKLACOH\0R\x0bKGFLENGNFNP\x121\n\x0bKGICGMLDGHD\x18\xe1\x08\
    \x20\x01(\x0b2\x0c.CGICOCKLACOH\0R\x0bKGICGMLDGHD\x121\n\x0bEHIHHECNPGN\
    \x18\xaf\x03\x20\x01(\x0b2\x0c.CGICOCKLACOH\0R\x0bEHIHHECNPGN\x121\n\x0b\
    MPPOOKADLFL\x18\xb6\x0c\x20\x01(\x0b2\x0c.CBDOEBJHECHH\0R\x0bMPPOOKADLFL\
    \x121\n\x0bEDDHKBBHCEN\x18\x99\x07\x20\x01(\x0b2\x0c.CBDOEBJHECHH\0R\x0b\
    EDDHKBBHCEN\x121\n\x0bKLNIIJKJEKF\x18\x8a\n\x20\x01(\x0b2\x0c.CBDOEBJHEC\
    HH\0R\x0bKLNIIJKJEKF\x121\n\x0bKEBOMHDMCEA\x18\xcf\x03\x20\x01(\x0b2\x0c\
    .PIKBKJJKHBPH\0R\x0bKEBOMHDMCEAB\r\n\x0bKJHGDIAABNAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(21);
            deps.push(super::AFHLLPDMCJF::file_descriptor().clone());
            deps.push(super::APMMDOHBDFC::file_descriptor().clone());
            deps.push(super::BGCNBANPDDM::file_descriptor().clone());
            deps.push(super::BOEHIOPOPAF::file_descriptor().clone());
            deps.push(super::CAPFBCKHMCD::file_descriptor().clone());
            deps.push(super::CBDOEBJHECH::file_descriptor().clone());
            deps.push(super::CGICOCKLACO::file_descriptor().clone());
            deps.push(super::DJJOEFNMBDL::file_descriptor().clone());
            deps.push(super::EDIOJBCALHB::file_descriptor().clone());
            deps.push(super::EEDHHFNHLBH::file_descriptor().clone());
            deps.push(super::FBGCMFJANMH::file_descriptor().clone());
            deps.push(super::GAOHJBIGBGB::file_descriptor().clone());
            deps.push(super::IMBNANICJLH::file_descriptor().clone());
            deps.push(super::INEIFALBFIL::file_descriptor().clone());
            deps.push(super::JDGBFNHLADP::file_descriptor().clone());
            deps.push(super::NLBICHBHJAN::file_descriptor().clone());
            deps.push(super::PBBBGAMJGID::file_descriptor().clone());
            deps.push(super::PIKBKJJKHBP::file_descriptor().clone());
            deps.push(super::PIMBOBLCAJF::file_descriptor().clone());
            deps.push(super::RogueCommonBuffSelectInfo::file_descriptor().clone());
            deps.push(super::RogueFormulaSelectInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AEFCDDKDPCG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
