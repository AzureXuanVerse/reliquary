// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdTalkEventType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdTalkEventType)
pub enum CmdTalkEventType {
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdTalkRewardTypeNone)
    CmdTalkRewardTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdFinishFirstTalkByPerformanceNpcCsReq)
    CmdFinishFirstTalkByPerformanceNpcCsReq = 2130,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdFinishFirstTalkNpcCsReq)
    CmdFinishFirstTalkNpcCsReq = 2134,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdGetFirstTalkNpcCsReq)
    CmdGetFirstTalkNpcCsReq = 2139,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdGetNpcTakenRewardCsReq)
    CmdGetNpcTakenRewardCsReq = 2159,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdSelectInclinationTextScRsp)
    CmdSelectInclinationTextScRsp = 2116,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdFinishFirstTalkNpcScRsp)
    CmdFinishFirstTalkNpcScRsp = 2137,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdTakeTalkRewardCsReq)
    CmdTakeTalkRewardCsReq = 2103,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdSelectInclinationTextCsReq)
    CmdSelectInclinationTextCsReq = 2180,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdGetFirstTalkByPerformanceNpcScRsp)
    CmdGetFirstTalkByPerformanceNpcScRsp = 2174,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdGetFirstTalkByPerformanceNpcCsReq)
    CmdGetFirstTalkByPerformanceNpcCsReq = 2147,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdGetNpcTakenRewardScRsp)
    CmdGetNpcTakenRewardScRsp = 2120,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdGetFirstTalkNpcScRsp)
    CmdGetFirstTalkNpcScRsp = 2153,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdFinishFirstTalkByPerformanceNpcScRsp)
    CmdFinishFirstTalkByPerformanceNpcScRsp = 2175,
    // @@protoc_insertion_point(enum_value:CmdTalkEventType.CmdTakeTalkRewardScRsp)
    CmdTakeTalkRewardScRsp = 2146,
}

impl ::protobuf::Enum for CmdTalkEventType {
    const NAME: &'static str = "CmdTalkEventType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdTalkEventType> {
        match value {
            0 => ::std::option::Option::Some(CmdTalkEventType::CmdTalkRewardTypeNone),
            2130 => ::std::option::Option::Some(CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcCsReq),
            2134 => ::std::option::Option::Some(CmdTalkEventType::CmdFinishFirstTalkNpcCsReq),
            2139 => ::std::option::Option::Some(CmdTalkEventType::CmdGetFirstTalkNpcCsReq),
            2159 => ::std::option::Option::Some(CmdTalkEventType::CmdGetNpcTakenRewardCsReq),
            2116 => ::std::option::Option::Some(CmdTalkEventType::CmdSelectInclinationTextScRsp),
            2137 => ::std::option::Option::Some(CmdTalkEventType::CmdFinishFirstTalkNpcScRsp),
            2103 => ::std::option::Option::Some(CmdTalkEventType::CmdTakeTalkRewardCsReq),
            2180 => ::std::option::Option::Some(CmdTalkEventType::CmdSelectInclinationTextCsReq),
            2174 => ::std::option::Option::Some(CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcScRsp),
            2147 => ::std::option::Option::Some(CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcCsReq),
            2120 => ::std::option::Option::Some(CmdTalkEventType::CmdGetNpcTakenRewardScRsp),
            2153 => ::std::option::Option::Some(CmdTalkEventType::CmdGetFirstTalkNpcScRsp),
            2175 => ::std::option::Option::Some(CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcScRsp),
            2146 => ::std::option::Option::Some(CmdTalkEventType::CmdTakeTalkRewardScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdTalkEventType> {
        match str {
            "CmdTalkRewardTypeNone" => ::std::option::Option::Some(CmdTalkEventType::CmdTalkRewardTypeNone),
            "CmdFinishFirstTalkByPerformanceNpcCsReq" => ::std::option::Option::Some(CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcCsReq),
            "CmdFinishFirstTalkNpcCsReq" => ::std::option::Option::Some(CmdTalkEventType::CmdFinishFirstTalkNpcCsReq),
            "CmdGetFirstTalkNpcCsReq" => ::std::option::Option::Some(CmdTalkEventType::CmdGetFirstTalkNpcCsReq),
            "CmdGetNpcTakenRewardCsReq" => ::std::option::Option::Some(CmdTalkEventType::CmdGetNpcTakenRewardCsReq),
            "CmdSelectInclinationTextScRsp" => ::std::option::Option::Some(CmdTalkEventType::CmdSelectInclinationTextScRsp),
            "CmdFinishFirstTalkNpcScRsp" => ::std::option::Option::Some(CmdTalkEventType::CmdFinishFirstTalkNpcScRsp),
            "CmdTakeTalkRewardCsReq" => ::std::option::Option::Some(CmdTalkEventType::CmdTakeTalkRewardCsReq),
            "CmdSelectInclinationTextCsReq" => ::std::option::Option::Some(CmdTalkEventType::CmdSelectInclinationTextCsReq),
            "CmdGetFirstTalkByPerformanceNpcScRsp" => ::std::option::Option::Some(CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcScRsp),
            "CmdGetFirstTalkByPerformanceNpcCsReq" => ::std::option::Option::Some(CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcCsReq),
            "CmdGetNpcTakenRewardScRsp" => ::std::option::Option::Some(CmdTalkEventType::CmdGetNpcTakenRewardScRsp),
            "CmdGetFirstTalkNpcScRsp" => ::std::option::Option::Some(CmdTalkEventType::CmdGetFirstTalkNpcScRsp),
            "CmdFinishFirstTalkByPerformanceNpcScRsp" => ::std::option::Option::Some(CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcScRsp),
            "CmdTakeTalkRewardScRsp" => ::std::option::Option::Some(CmdTalkEventType::CmdTakeTalkRewardScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdTalkEventType] = &[
        CmdTalkEventType::CmdTalkRewardTypeNone,
        CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcCsReq,
        CmdTalkEventType::CmdFinishFirstTalkNpcCsReq,
        CmdTalkEventType::CmdGetFirstTalkNpcCsReq,
        CmdTalkEventType::CmdGetNpcTakenRewardCsReq,
        CmdTalkEventType::CmdSelectInclinationTextScRsp,
        CmdTalkEventType::CmdFinishFirstTalkNpcScRsp,
        CmdTalkEventType::CmdTakeTalkRewardCsReq,
        CmdTalkEventType::CmdSelectInclinationTextCsReq,
        CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcScRsp,
        CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcCsReq,
        CmdTalkEventType::CmdGetNpcTakenRewardScRsp,
        CmdTalkEventType::CmdGetFirstTalkNpcScRsp,
        CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcScRsp,
        CmdTalkEventType::CmdTakeTalkRewardScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdTalkEventType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdTalkEventType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdTalkEventType::CmdTalkRewardTypeNone => 0,
            CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcCsReq => 1,
            CmdTalkEventType::CmdFinishFirstTalkNpcCsReq => 2,
            CmdTalkEventType::CmdGetFirstTalkNpcCsReq => 3,
            CmdTalkEventType::CmdGetNpcTakenRewardCsReq => 4,
            CmdTalkEventType::CmdSelectInclinationTextScRsp => 5,
            CmdTalkEventType::CmdFinishFirstTalkNpcScRsp => 6,
            CmdTalkEventType::CmdTakeTalkRewardCsReq => 7,
            CmdTalkEventType::CmdSelectInclinationTextCsReq => 8,
            CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcScRsp => 9,
            CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcCsReq => 10,
            CmdTalkEventType::CmdGetNpcTakenRewardScRsp => 11,
            CmdTalkEventType::CmdGetFirstTalkNpcScRsp => 12,
            CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcScRsp => 13,
            CmdTalkEventType::CmdTakeTalkRewardScRsp => 14,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdTalkEventType {
    fn default() -> Self {
        CmdTalkEventType::CmdTalkRewardTypeNone
    }
}

impl CmdTalkEventType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdTalkEventType>("CmdTalkEventType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16CmdTalkEventType.proto*\x9f\x04\n\x10CmdTalkEventType\x12\x19\n\
    \x15CmdTalkRewardTypeNone\x10\0\x12,\n'CmdFinishFirstTalkByPerformanceNp\
    cCsReq\x10\xd2\x10\x12\x1f\n\x1aCmdFinishFirstTalkNpcCsReq\x10\xd6\x10\
    \x12\x1c\n\x17CmdGetFirstTalkNpcCsReq\x10\xdb\x10\x12\x1e\n\x19CmdGetNpc\
    TakenRewardCsReq\x10\xef\x10\x12\"\n\x1dCmdSelectInclinationTextScRsp\
    \x10\xc4\x10\x12\x1f\n\x1aCmdFinishFirstTalkNpcScRsp\x10\xd9\x10\x12\x1b\
    \n\x16CmdTakeTalkRewardCsReq\x10\xb7\x10\x12\"\n\x1dCmdSelectInclination\
    TextCsReq\x10\x84\x11\x12)\n$CmdGetFirstTalkByPerformanceNpcScRsp\x10\
    \xfe\x10\x12)\n$CmdGetFirstTalkByPerformanceNpcCsReq\x10\xe3\x10\x12\x1e\
    \n\x19CmdGetNpcTakenRewardScRsp\x10\xc8\x10\x12\x1c\n\x17CmdGetFirstTalk\
    NpcScRsp\x10\xe9\x10\x12,\n'CmdFinishFirstTalkByPerformanceNpcScRsp\x10\
    \xff\x10\x12\x1b\n\x16CmdTakeTalkRewardScRsp\x10\xe2\x10b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdTalkEventType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
