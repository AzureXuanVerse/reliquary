// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ELAMGBPKDFA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ELAMGBPKDFA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ELAMGBPKDFA {
    // message fields
    // @@protoc_insertion_point(field:ELAMGBPKDFA.NMPBLIBMIAO)
    pub NMPBLIBMIAO: u32,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.AIIHHFJBMHD)
    pub AIIHHFJBMHD: u32,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.ICGBAEJGBOI)
    pub ICGBAEJGBOI: u32,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.PHCBICGEPLE)
    pub PHCBICGEPLE: u32,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.CCMFCONAOGP)
    pub CCMFCONAOGP: u32,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.GDGNEAHCLBE)
    pub GDGNEAHCLBE: ::protobuf::EnumOrUnknown<super::EOFOHACMKEP::EOFOHACMKEP>,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.JOKEIGFCDOI)
    pub JOKEIGFCDOI: ::protobuf::MessageField<super::MLBKADJEBNA::MLBKADJEBNA>,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.ECPBMACJICO)
    pub ECPBMACJICO: u32,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.ANOCFAKALLP)
    pub ANOCFAKALLP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.OFAGGKBMPJN)
    pub OFAGGKBMPJN: u32,
    // @@protoc_insertion_point(field:ELAMGBPKDFA.BBBOAIAPOCG)
    pub BBBOAIAPOCG: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ELAMGBPKDFA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ELAMGBPKDFA {
    fn default() -> &'a ELAMGBPKDFA {
        <ELAMGBPKDFA as ::protobuf::Message>::default_instance()
    }
}

impl ELAMGBPKDFA {
    pub fn new() -> ELAMGBPKDFA {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NMPBLIBMIAO",
            |m: &ELAMGBPKDFA| { &m.NMPBLIBMIAO },
            |m: &mut ELAMGBPKDFA| { &mut m.NMPBLIBMIAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AIIHHFJBMHD",
            |m: &ELAMGBPKDFA| { &m.AIIHHFJBMHD },
            |m: &mut ELAMGBPKDFA| { &mut m.AIIHHFJBMHD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ICGBAEJGBOI",
            |m: &ELAMGBPKDFA| { &m.ICGBAEJGBOI },
            |m: &mut ELAMGBPKDFA| { &mut m.ICGBAEJGBOI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PHCBICGEPLE",
            |m: &ELAMGBPKDFA| { &m.PHCBICGEPLE },
            |m: &mut ELAMGBPKDFA| { &mut m.PHCBICGEPLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CCMFCONAOGP",
            |m: &ELAMGBPKDFA| { &m.CCMFCONAOGP },
            |m: &mut ELAMGBPKDFA| { &mut m.CCMFCONAOGP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GDGNEAHCLBE",
            |m: &ELAMGBPKDFA| { &m.GDGNEAHCLBE },
            |m: &mut ELAMGBPKDFA| { &mut m.GDGNEAHCLBE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MLBKADJEBNA::MLBKADJEBNA>(
            "JOKEIGFCDOI",
            |m: &ELAMGBPKDFA| { &m.JOKEIGFCDOI },
            |m: &mut ELAMGBPKDFA| { &mut m.JOKEIGFCDOI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ECPBMACJICO",
            |m: &ELAMGBPKDFA| { &m.ECPBMACJICO },
            |m: &mut ELAMGBPKDFA| { &mut m.ECPBMACJICO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ANOCFAKALLP",
            |m: &ELAMGBPKDFA| { &m.ANOCFAKALLP },
            |m: &mut ELAMGBPKDFA| { &mut m.ANOCFAKALLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OFAGGKBMPJN",
            |m: &ELAMGBPKDFA| { &m.OFAGGKBMPJN },
            |m: &mut ELAMGBPKDFA| { &mut m.OFAGGKBMPJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BBBOAIAPOCG",
            |m: &ELAMGBPKDFA| { &m.BBBOAIAPOCG },
            |m: &mut ELAMGBPKDFA| { &mut m.BBBOAIAPOCG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ELAMGBPKDFA>(
            "ELAMGBPKDFA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ELAMGBPKDFA {
    const NAME: &'static str = "ELAMGBPKDFA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.NMPBLIBMIAO = is.read_uint32()?;
                },
                40 => {
                    self.AIIHHFJBMHD = is.read_uint32()?;
                },
                64 => {
                    self.ICGBAEJGBOI = is.read_uint32()?;
                },
                24 => {
                    self.PHCBICGEPLE = is.read_uint32()?;
                },
                88 => {
                    self.CCMFCONAOGP = is.read_uint32()?;
                },
                96 => {
                    self.GDGNEAHCLBE = is.read_enum_or_unknown()?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JOKEIGFCDOI)?;
                },
                48 => {
                    self.ECPBMACJICO = is.read_uint32()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.ANOCFAKALLP)?;
                },
                32 => {
                    self.ANOCFAKALLP.push(is.read_uint32()?);
                },
                104 => {
                    self.OFAGGKBMPJN = is.read_uint32()?;
                },
                72 => {
                    self.BBBOAIAPOCG = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.NMPBLIBMIAO != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.NMPBLIBMIAO);
        }
        if self.AIIHHFJBMHD != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.AIIHHFJBMHD);
        }
        if self.ICGBAEJGBOI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.ICGBAEJGBOI);
        }
        if self.PHCBICGEPLE != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.PHCBICGEPLE);
        }
        if self.CCMFCONAOGP != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.CCMFCONAOGP);
        }
        if self.GDGNEAHCLBE != ::protobuf::EnumOrUnknown::new(super::EOFOHACMKEP::EOFOHACMKEP::MATCH3_PLAYER_STATE_ALIVE) {
            my_size += ::protobuf::rt::int32_size(12, self.GDGNEAHCLBE.value());
        }
        if let Some(v) = self.JOKEIGFCDOI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.ECPBMACJICO != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.ECPBMACJICO);
        }
        for value in &self.ANOCFAKALLP {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        if self.OFAGGKBMPJN != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.OFAGGKBMPJN);
        }
        if self.BBBOAIAPOCG != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.BBBOAIAPOCG);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.NMPBLIBMIAO != 0 {
            os.write_uint32(2, self.NMPBLIBMIAO)?;
        }
        if self.AIIHHFJBMHD != 0 {
            os.write_uint32(5, self.AIIHHFJBMHD)?;
        }
        if self.ICGBAEJGBOI != 0 {
            os.write_uint32(8, self.ICGBAEJGBOI)?;
        }
        if self.PHCBICGEPLE != 0 {
            os.write_uint32(3, self.PHCBICGEPLE)?;
        }
        if self.CCMFCONAOGP != 0 {
            os.write_uint32(11, self.CCMFCONAOGP)?;
        }
        if self.GDGNEAHCLBE != ::protobuf::EnumOrUnknown::new(super::EOFOHACMKEP::EOFOHACMKEP::MATCH3_PLAYER_STATE_ALIVE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.GDGNEAHCLBE))?;
        }
        if let Some(v) = self.JOKEIGFCDOI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if self.ECPBMACJICO != 0 {
            os.write_uint32(6, self.ECPBMACJICO)?;
        }
        for v in &self.ANOCFAKALLP {
            os.write_uint32(4, *v)?;
        };
        if self.OFAGGKBMPJN != 0 {
            os.write_uint32(13, self.OFAGGKBMPJN)?;
        }
        if self.BBBOAIAPOCG != 0 {
            os.write_uint32(9, self.BBBOAIAPOCG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ELAMGBPKDFA {
        ELAMGBPKDFA::new()
    }

    fn clear(&mut self) {
        self.NMPBLIBMIAO = 0;
        self.AIIHHFJBMHD = 0;
        self.ICGBAEJGBOI = 0;
        self.PHCBICGEPLE = 0;
        self.CCMFCONAOGP = 0;
        self.GDGNEAHCLBE = ::protobuf::EnumOrUnknown::new(super::EOFOHACMKEP::EOFOHACMKEP::MATCH3_PLAYER_STATE_ALIVE);
        self.JOKEIGFCDOI.clear();
        self.ECPBMACJICO = 0;
        self.ANOCFAKALLP.clear();
        self.OFAGGKBMPJN = 0;
        self.BBBOAIAPOCG = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ELAMGBPKDFA {
        static instance: ELAMGBPKDFA = ELAMGBPKDFA {
            NMPBLIBMIAO: 0,
            AIIHHFJBMHD: 0,
            ICGBAEJGBOI: 0,
            PHCBICGEPLE: 0,
            CCMFCONAOGP: 0,
            GDGNEAHCLBE: ::protobuf::EnumOrUnknown::from_i32(0),
            JOKEIGFCDOI: ::protobuf::MessageField::none(),
            ECPBMACJICO: 0,
            ANOCFAKALLP: ::std::vec::Vec::new(),
            OFAGGKBMPJN: 0,
            BBBOAIAPOCG: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ELAMGBPKDFA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ELAMGBPKDFA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ELAMGBPKDFA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ELAMGBPKDFA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ELAMGBPKDFA.proto\x1a\x11EOFOHACMKEP.proto\x1a\x11MLBKADJEBNA.prot\
    o\"\x9f\x03\n\x0bELAMGBPKDFA\x12\x20\n\x0bNMPBLIBMIAO\x18\x02\x20\x01(\r\
    R\x0bNMPBLIBMIAO\x12\x20\n\x0bAIIHHFJBMHD\x18\x05\x20\x01(\rR\x0bAIIHHFJ\
    BMHD\x12\x20\n\x0bICGBAEJGBOI\x18\x08\x20\x01(\rR\x0bICGBAEJGBOI\x12\x20\
    \n\x0bPHCBICGEPLE\x18\x03\x20\x01(\rR\x0bPHCBICGEPLE\x12\x20\n\x0bCCMFCO\
    NAOGP\x18\x0b\x20\x01(\rR\x0bCCMFCONAOGP\x12.\n\x0bGDGNEAHCLBE\x18\x0c\
    \x20\x01(\x0e2\x0c.EOFOHACMKEPR\x0bGDGNEAHCLBE\x12.\n\x0bJOKEIGFCDOI\x18\
    \x0e\x20\x01(\x0b2\x0c.MLBKADJEBNAR\x0bJOKEIGFCDOI\x12\x20\n\x0bECPBMACJ\
    ICO\x18\x06\x20\x01(\rR\x0bECPBMACJICO\x12\x20\n\x0bANOCFAKALLP\x18\x04\
    \x20\x03(\rR\x0bANOCFAKALLP\x12\x20\n\x0bOFAGGKBMPJN\x18\r\x20\x01(\rR\
    \x0bOFAGGKBMPJN\x12\x20\n\x0bBBBOAIAPOCG\x18\t\x20\x01(\rR\x0bBBBOAIAPOC\
    Gb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::EOFOHACMKEP::file_descriptor().clone());
            deps.push(super::MLBKADJEBNA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ELAMGBPKDFA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
