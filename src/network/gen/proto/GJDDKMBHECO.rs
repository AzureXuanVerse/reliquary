// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GJDDKMBHECO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GJDDKMBHECO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GJDDKMBHECO {
    // message fields
    // @@protoc_insertion_point(field:GJDDKMBHECO.HMJBGDPIMCP)
    pub HMJBGDPIMCP: u32,
    // @@protoc_insertion_point(field:GJDDKMBHECO.JCFMBCNIHLK)
    pub JCFMBCNIHLK: u32,
    // @@protoc_insertion_point(field:GJDDKMBHECO.MOCLGIGGHNE)
    pub MOCLGIGGHNE: u32,
    // message oneof groups
    pub AOBDFPJOECK: ::std::option::Option<gjddkmbheco::AOBDFPJOECK>,
    // special fields
    // @@protoc_insertion_point(special_field:GJDDKMBHECO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GJDDKMBHECO {
    fn default() -> &'a GJDDKMBHECO {
        <GJDDKMBHECO as ::protobuf::Message>::default_instance()
    }
}

impl GJDDKMBHECO {
    pub fn new() -> GJDDKMBHECO {
        ::std::default::Default::default()
    }

    // .PCNPNIAJHEJ NDAGIFBOPCP = 11;

    pub fn NDAGIFBOPCP(&self) -> &super::PCNPNIAJHEJ::PCNPNIAJHEJ {
        match self.AOBDFPJOECK {
            ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(ref v)) => v,
            _ => <super::PCNPNIAJHEJ::PCNPNIAJHEJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NDAGIFBOPCP(&mut self) {
        self.AOBDFPJOECK = ::std::option::Option::None;
    }

    pub fn has_NDAGIFBOPCP(&self) -> bool {
        match self.AOBDFPJOECK {
            ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NDAGIFBOPCP(&mut self, v: super::PCNPNIAJHEJ::PCNPNIAJHEJ) {
        self.AOBDFPJOECK = ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NDAGIFBOPCP(&mut self) -> &mut super::PCNPNIAJHEJ::PCNPNIAJHEJ {
        if let ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(_)) = self.AOBDFPJOECK {
        } else {
            self.AOBDFPJOECK = ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(super::PCNPNIAJHEJ::PCNPNIAJHEJ::new()));
        }
        match self.AOBDFPJOECK {
            ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NDAGIFBOPCP(&mut self) -> super::PCNPNIAJHEJ::PCNPNIAJHEJ {
        if self.has_NDAGIFBOPCP() {
            match self.AOBDFPJOECK.take() {
                ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PCNPNIAJHEJ::PCNPNIAJHEJ::new()
        }
    }

    // .KPEMDIANBGO BGHALKPKCOA = 1;

    pub fn BGHALKPKCOA(&self) -> &super::KPEMDIANBGO::KPEMDIANBGO {
        match self.AOBDFPJOECK {
            ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(ref v)) => v,
            _ => <super::KPEMDIANBGO::KPEMDIANBGO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BGHALKPKCOA(&mut self) {
        self.AOBDFPJOECK = ::std::option::Option::None;
    }

    pub fn has_BGHALKPKCOA(&self) -> bool {
        match self.AOBDFPJOECK {
            ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BGHALKPKCOA(&mut self, v: super::KPEMDIANBGO::KPEMDIANBGO) {
        self.AOBDFPJOECK = ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BGHALKPKCOA(&mut self) -> &mut super::KPEMDIANBGO::KPEMDIANBGO {
        if let ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(_)) = self.AOBDFPJOECK {
        } else {
            self.AOBDFPJOECK = ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(super::KPEMDIANBGO::KPEMDIANBGO::new()));
        }
        match self.AOBDFPJOECK {
            ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BGHALKPKCOA(&mut self) -> super::KPEMDIANBGO::KPEMDIANBGO {
        if self.has_BGHALKPKCOA() {
            match self.AOBDFPJOECK.take() {
                ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KPEMDIANBGO::KPEMDIANBGO::new()
        }
    }

    // .LCIGGKJMKJL MGENEAGKLOL = 8;

    pub fn MGENEAGKLOL(&self) -> &super::LCIGGKJMKJL::LCIGGKJMKJL {
        match self.AOBDFPJOECK {
            ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(ref v)) => v,
            _ => <super::LCIGGKJMKJL::LCIGGKJMKJL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MGENEAGKLOL(&mut self) {
        self.AOBDFPJOECK = ::std::option::Option::None;
    }

    pub fn has_MGENEAGKLOL(&self) -> bool {
        match self.AOBDFPJOECK {
            ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MGENEAGKLOL(&mut self, v: super::LCIGGKJMKJL::LCIGGKJMKJL) {
        self.AOBDFPJOECK = ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MGENEAGKLOL(&mut self) -> &mut super::LCIGGKJMKJL::LCIGGKJMKJL {
        if let ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(_)) = self.AOBDFPJOECK {
        } else {
            self.AOBDFPJOECK = ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(super::LCIGGKJMKJL::LCIGGKJMKJL::new()));
        }
        match self.AOBDFPJOECK {
            ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MGENEAGKLOL(&mut self) -> super::LCIGGKJMKJL::LCIGGKJMKJL {
        if self.has_MGENEAGKLOL() {
            match self.AOBDFPJOECK.take() {
                ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCIGGKJMKJL::LCIGGKJMKJL::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HMJBGDPIMCP",
            |m: &GJDDKMBHECO| { &m.HMJBGDPIMCP },
            |m: &mut GJDDKMBHECO| { &mut m.HMJBGDPIMCP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JCFMBCNIHLK",
            |m: &GJDDKMBHECO| { &m.JCFMBCNIHLK },
            |m: &mut GJDDKMBHECO| { &mut m.JCFMBCNIHLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MOCLGIGGHNE",
            |m: &GJDDKMBHECO| { &m.MOCLGIGGHNE },
            |m: &mut GJDDKMBHECO| { &mut m.MOCLGIGGHNE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PCNPNIAJHEJ::PCNPNIAJHEJ>(
            "NDAGIFBOPCP",
            GJDDKMBHECO::has_NDAGIFBOPCP,
            GJDDKMBHECO::NDAGIFBOPCP,
            GJDDKMBHECO::mut_NDAGIFBOPCP,
            GJDDKMBHECO::set_NDAGIFBOPCP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KPEMDIANBGO::KPEMDIANBGO>(
            "BGHALKPKCOA",
            GJDDKMBHECO::has_BGHALKPKCOA,
            GJDDKMBHECO::BGHALKPKCOA,
            GJDDKMBHECO::mut_BGHALKPKCOA,
            GJDDKMBHECO::set_BGHALKPKCOA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCIGGKJMKJL::LCIGGKJMKJL>(
            "MGENEAGKLOL",
            GJDDKMBHECO::has_MGENEAGKLOL,
            GJDDKMBHECO::MGENEAGKLOL,
            GJDDKMBHECO::mut_MGENEAGKLOL,
            GJDDKMBHECO::set_MGENEAGKLOL,
        ));
        oneofs.push(gjddkmbheco::AOBDFPJOECK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GJDDKMBHECO>(
            "GJDDKMBHECO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GJDDKMBHECO {
    const NAME: &'static str = "GJDDKMBHECO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.HMJBGDPIMCP = is.read_uint32()?;
                },
                24 => {
                    self.JCFMBCNIHLK = is.read_uint32()?;
                },
                80 => {
                    self.MOCLGIGGHNE = is.read_uint32()?;
                },
                90 => {
                    self.AOBDFPJOECK = ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(is.read_message()?));
                },
                10 => {
                    self.AOBDFPJOECK = ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(is.read_message()?));
                },
                66 => {
                    self.AOBDFPJOECK = ::std::option::Option::Some(gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HMJBGDPIMCP != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.HMJBGDPIMCP);
        }
        if self.JCFMBCNIHLK != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.JCFMBCNIHLK);
        }
        if self.MOCLGIGGHNE != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.MOCLGIGGHNE);
        }
        if let ::std::option::Option::Some(ref v) = self.AOBDFPJOECK {
            match v {
                &gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HMJBGDPIMCP != 0 {
            os.write_uint32(2, self.HMJBGDPIMCP)?;
        }
        if self.JCFMBCNIHLK != 0 {
            os.write_uint32(3, self.JCFMBCNIHLK)?;
        }
        if self.MOCLGIGGHNE != 0 {
            os.write_uint32(10, self.MOCLGIGGHNE)?;
        }
        if let ::std::option::Option::Some(ref v) = self.AOBDFPJOECK {
            match v {
                &gjddkmbheco::AOBDFPJOECK::NDAGIFBOPCP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &gjddkmbheco::AOBDFPJOECK::BGHALKPKCOA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &gjddkmbheco::AOBDFPJOECK::MGENEAGKLOL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GJDDKMBHECO {
        GJDDKMBHECO::new()
    }

    fn clear(&mut self) {
        self.HMJBGDPIMCP = 0;
        self.JCFMBCNIHLK = 0;
        self.MOCLGIGGHNE = 0;
        self.AOBDFPJOECK = ::std::option::Option::None;
        self.AOBDFPJOECK = ::std::option::Option::None;
        self.AOBDFPJOECK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GJDDKMBHECO {
        static instance: GJDDKMBHECO = GJDDKMBHECO {
            HMJBGDPIMCP: 0,
            JCFMBCNIHLK: 0,
            MOCLGIGGHNE: 0,
            AOBDFPJOECK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GJDDKMBHECO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GJDDKMBHECO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GJDDKMBHECO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GJDDKMBHECO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GJDDKMBHECO`
pub mod gjddkmbheco {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:GJDDKMBHECO.AOBDFPJOECK)
    pub enum AOBDFPJOECK {
        // @@protoc_insertion_point(oneof_field:GJDDKMBHECO.NDAGIFBOPCP)
        NDAGIFBOPCP(super::super::PCNPNIAJHEJ::PCNPNIAJHEJ),
        // @@protoc_insertion_point(oneof_field:GJDDKMBHECO.BGHALKPKCOA)
        BGHALKPKCOA(super::super::KPEMDIANBGO::KPEMDIANBGO),
        // @@protoc_insertion_point(oneof_field:GJDDKMBHECO.MGENEAGKLOL)
        MGENEAGKLOL(super::super::LCIGGKJMKJL::LCIGGKJMKJL),
    }

    impl ::protobuf::Oneof for AOBDFPJOECK {
    }

    impl ::protobuf::OneofFull for AOBDFPJOECK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GJDDKMBHECO as ::protobuf::MessageFull>::descriptor().oneof_by_name("AOBDFPJOECK").unwrap()).clone()
        }
    }

    impl AOBDFPJOECK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<AOBDFPJOECK>("AOBDFPJOECK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GJDDKMBHECO.proto\x1a\x11KPEMDIANBGO.proto\x1a\x11LCIGGKJMKJL.prot\
    o\x1a\x11PCNPNIAJHEJ.proto\"\x98\x02\n\x0bGJDDKMBHECO\x12\x20\n\x0bHMJBG\
    DPIMCP\x18\x02\x20\x01(\rR\x0bHMJBGDPIMCP\x12\x20\n\x0bJCFMBCNIHLK\x18\
    \x03\x20\x01(\rR\x0bJCFMBCNIHLK\x12\x20\n\x0bMOCLGIGGHNE\x18\n\x20\x01(\
    \rR\x0bMOCLGIGGHNE\x120\n\x0bNDAGIFBOPCP\x18\x0b\x20\x01(\x0b2\x0c.PCNPN\
    IAJHEJH\0R\x0bNDAGIFBOPCP\x120\n\x0bBGHALKPKCOA\x18\x01\x20\x01(\x0b2\
    \x0c.KPEMDIANBGOH\0R\x0bBGHALKPKCOA\x120\n\x0bMGENEAGKLOL\x18\x08\x20\
    \x01(\x0b2\x0c.LCIGGKJMKJLH\0R\x0bMGENEAGKLOLB\r\n\x0bAOBDFPJOECKb\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::KPEMDIANBGO::file_descriptor().clone());
            deps.push(super::LCIGGKJMKJL::file_descriptor().clone());
            deps.push(super::PCNPNIAJHEJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GJDDKMBHECO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
