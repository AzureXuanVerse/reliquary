// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueCommonBuffSelectInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueCommonBuffSelectInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueCommonBuffSelectInfo {
    // message fields
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.FirstBuffTypeList)
    pub FirstBuffTypeList: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.RollBuffCount)
    pub RollBuffCount: u32,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.RollBuffMaxCount)
    pub RollBuffMaxCount: u32,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.CanRoll)
    pub CanRoll: bool,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.SourceType)
    pub SourceType: ::protobuf::EnumOrUnknown<super::RogueCommonBuffSelectSource::RogueCommonBuffSelectSource>,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.SourceHintId)
    pub SourceHintId: u32,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.RollBuffFreeCount)
    pub RollBuffFreeCount: u32,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.HandbookUnlockBuffIdList)
    pub HandbookUnlockBuffIdList: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.SourceCurCount)
    pub SourceCurCount: u32,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.SourceTotalCount)
    pub SourceTotalCount: u32,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.SelectBuffList)
    pub SelectBuffList: ::std::vec::Vec<super::RogueCommonBuff::RogueCommonBuff>,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.CertainSelectBuffId)
    pub CertainSelectBuffId: u32,
    // @@protoc_insertion_point(field:RogueCommonBuffSelectInfo.RollBuffCostData)
    pub RollBuffCostData: ::protobuf::MessageField<super::ItemCostList::ItemCostList>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueCommonBuffSelectInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueCommonBuffSelectInfo {
    fn default() -> &'a RogueCommonBuffSelectInfo {
        <RogueCommonBuffSelectInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueCommonBuffSelectInfo {
    pub fn new() -> RogueCommonBuffSelectInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FirstBuffTypeList",
            |m: &RogueCommonBuffSelectInfo| { &m.FirstBuffTypeList },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.FirstBuffTypeList },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "RollBuffCount",
            |m: &RogueCommonBuffSelectInfo| { &m.RollBuffCount },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.RollBuffCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "RollBuffMaxCount",
            |m: &RogueCommonBuffSelectInfo| { &m.RollBuffMaxCount },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.RollBuffMaxCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CanRoll",
            |m: &RogueCommonBuffSelectInfo| { &m.CanRoll },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.CanRoll },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SourceType",
            |m: &RogueCommonBuffSelectInfo| { &m.SourceType },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.SourceType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SourceHintId",
            |m: &RogueCommonBuffSelectInfo| { &m.SourceHintId },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.SourceHintId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "RollBuffFreeCount",
            |m: &RogueCommonBuffSelectInfo| { &m.RollBuffFreeCount },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.RollBuffFreeCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HandbookUnlockBuffIdList",
            |m: &RogueCommonBuffSelectInfo| { &m.HandbookUnlockBuffIdList },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.HandbookUnlockBuffIdList },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SourceCurCount",
            |m: &RogueCommonBuffSelectInfo| { &m.SourceCurCount },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.SourceCurCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SourceTotalCount",
            |m: &RogueCommonBuffSelectInfo| { &m.SourceTotalCount },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.SourceTotalCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "SelectBuffList",
            |m: &RogueCommonBuffSelectInfo| { &m.SelectBuffList },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.SelectBuffList },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CertainSelectBuffId",
            |m: &RogueCommonBuffSelectInfo| { &m.CertainSelectBuffId },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.CertainSelectBuffId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemCostList::ItemCostList>(
            "RollBuffCostData",
            |m: &RogueCommonBuffSelectInfo| { &m.RollBuffCostData },
            |m: &mut RogueCommonBuffSelectInfo| { &mut m.RollBuffCostData },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueCommonBuffSelectInfo>(
            "RogueCommonBuffSelectInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueCommonBuffSelectInfo {
    const NAME: &'static str = "RogueCommonBuffSelectInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.FirstBuffTypeList)?;
                },
                32 => {
                    self.FirstBuffTypeList.push(is.read_uint32()?);
                },
                120 => {
                    self.RollBuffCount = is.read_uint32()?;
                },
                64 => {
                    self.RollBuffMaxCount = is.read_uint32()?;
                },
                24 => {
                    self.CanRoll = is.read_bool()?;
                },
                40 => {
                    self.SourceType = is.read_enum_or_unknown()?;
                },
                112 => {
                    self.SourceHintId = is.read_uint32()?;
                },
                56 => {
                    self.RollBuffFreeCount = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.HandbookUnlockBuffIdList)?;
                },
                72 => {
                    self.HandbookUnlockBuffIdList.push(is.read_uint32()?);
                },
                16 => {
                    self.SourceCurCount = is.read_uint32()?;
                },
                80 => {
                    self.SourceTotalCount = is.read_uint32()?;
                },
                106 => {
                    self.SelectBuffList.push(is.read_message()?);
                },
                88 => {
                    self.CertainSelectBuffId = is.read_uint32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.RollBuffCostData)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.FirstBuffTypeList {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        if self.RollBuffCount != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.RollBuffCount);
        }
        if self.RollBuffMaxCount != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.RollBuffMaxCount);
        }
        if self.CanRoll != false {
            my_size += 1 + 1;
        }
        if self.SourceType != ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSource::RogueCommonBuffSelectSource::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(5, self.SourceType.value());
        }
        if self.SourceHintId != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.SourceHintId);
        }
        if self.RollBuffFreeCount != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.RollBuffFreeCount);
        }
        for value in &self.HandbookUnlockBuffIdList {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        if self.SourceCurCount != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.SourceCurCount);
        }
        if self.SourceTotalCount != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.SourceTotalCount);
        }
        for value in &self.SelectBuffList {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CertainSelectBuffId != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.CertainSelectBuffId);
        }
        if let Some(v) = self.RollBuffCostData.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.FirstBuffTypeList {
            os.write_uint32(4, *v)?;
        };
        if self.RollBuffCount != 0 {
            os.write_uint32(15, self.RollBuffCount)?;
        }
        if self.RollBuffMaxCount != 0 {
            os.write_uint32(8, self.RollBuffMaxCount)?;
        }
        if self.CanRoll != false {
            os.write_bool(3, self.CanRoll)?;
        }
        if self.SourceType != ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSource::RogueCommonBuffSelectSource::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.SourceType))?;
        }
        if self.SourceHintId != 0 {
            os.write_uint32(14, self.SourceHintId)?;
        }
        if self.RollBuffFreeCount != 0 {
            os.write_uint32(7, self.RollBuffFreeCount)?;
        }
        for v in &self.HandbookUnlockBuffIdList {
            os.write_uint32(9, *v)?;
        };
        if self.SourceCurCount != 0 {
            os.write_uint32(2, self.SourceCurCount)?;
        }
        if self.SourceTotalCount != 0 {
            os.write_uint32(10, self.SourceTotalCount)?;
        }
        for v in &self.SelectBuffList {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        if self.CertainSelectBuffId != 0 {
            os.write_uint32(11, self.CertainSelectBuffId)?;
        }
        if let Some(v) = self.RollBuffCostData.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueCommonBuffSelectInfo {
        RogueCommonBuffSelectInfo::new()
    }

    fn clear(&mut self) {
        self.FirstBuffTypeList.clear();
        self.RollBuffCount = 0;
        self.RollBuffMaxCount = 0;
        self.CanRoll = false;
        self.SourceType = ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSource::RogueCommonBuffSelectSource::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE);
        self.SourceHintId = 0;
        self.RollBuffFreeCount = 0;
        self.HandbookUnlockBuffIdList.clear();
        self.SourceCurCount = 0;
        self.SourceTotalCount = 0;
        self.SelectBuffList.clear();
        self.CertainSelectBuffId = 0;
        self.RollBuffCostData.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueCommonBuffSelectInfo {
        static instance: RogueCommonBuffSelectInfo = RogueCommonBuffSelectInfo {
            FirstBuffTypeList: ::std::vec::Vec::new(),
            RollBuffCount: 0,
            RollBuffMaxCount: 0,
            CanRoll: false,
            SourceType: ::protobuf::EnumOrUnknown::from_i32(0),
            SourceHintId: 0,
            RollBuffFreeCount: 0,
            HandbookUnlockBuffIdList: ::std::vec::Vec::new(),
            SourceCurCount: 0,
            SourceTotalCount: 0,
            SelectBuffList: ::std::vec::Vec::new(),
            CertainSelectBuffId: 0,
            RollBuffCostData: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueCommonBuffSelectInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueCommonBuffSelectInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueCommonBuffSelectInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueCommonBuffSelectInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fRogueCommonBuffSelectInfo.proto\x1a\x12ItemCostList.proto\x1a!Rogu\
    eCommonBuffSelectSource.proto\x1a\x15RogueCommonBuff.proto\"\xfc\x04\n\
    \x19RogueCommonBuffSelectInfo\x12,\n\x11FirstBuffTypeList\x18\x04\x20\
    \x03(\rR\x11FirstBuffTypeList\x12$\n\rRollBuffCount\x18\x0f\x20\x01(\rR\
    \rRollBuffCount\x12*\n\x10RollBuffMaxCount\x18\x08\x20\x01(\rR\x10RollBu\
    ffMaxCount\x12\x18\n\x07CanRoll\x18\x03\x20\x01(\x08R\x07CanRoll\x12<\n\
    \nSourceType\x18\x05\x20\x01(\x0e2\x1c.RogueCommonBuffSelectSourceR\nSou\
    rceType\x12\"\n\x0cSourceHintId\x18\x0e\x20\x01(\rR\x0cSourceHintId\x12,\
    \n\x11RollBuffFreeCount\x18\x07\x20\x01(\rR\x11RollBuffFreeCount\x12:\n\
    \x18HandbookUnlockBuffIdList\x18\t\x20\x03(\rR\x18HandbookUnlockBuffIdLi\
    st\x12&\n\x0eSourceCurCount\x18\x02\x20\x01(\rR\x0eSourceCurCount\x12*\n\
    \x10SourceTotalCount\x18\n\x20\x01(\rR\x10SourceTotalCount\x128\n\x0eSel\
    ectBuffList\x18\r\x20\x03(\x0b2\x10.RogueCommonBuffR\x0eSelectBuffList\
    \x120\n\x13CertainSelectBuffId\x18\x0b\x20\x01(\rR\x13CertainSelectBuffI\
    d\x129\n\x10RollBuffCostData\x18\x01\x20\x01(\x0b2\r.ItemCostListR\x10Ro\
    llBuffCostDataB\x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ItemCostList::file_descriptor().clone());
            deps.push(super::RogueCommonBuffSelectSource::file_descriptor().clone());
            deps.push(super::RogueCommonBuff::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueCommonBuffSelectInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
