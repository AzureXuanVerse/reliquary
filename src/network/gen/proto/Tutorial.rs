// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `Tutorial.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:Tutorial)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Tutorial {
    // message fields
    // @@protoc_insertion_point(field:Tutorial.id)
    pub id: u32,
    // @@protoc_insertion_point(field:Tutorial.status)
    pub status: ::protobuf::EnumOrUnknown<super::TutorialStatus::TutorialStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:Tutorial.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Tutorial {
    fn default() -> &'a Tutorial {
        <Tutorial as ::protobuf::Message>::default_instance()
    }
}

impl Tutorial {
    pub fn new() -> Tutorial {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Tutorial| { &m.id },
            |m: &mut Tutorial| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Tutorial| { &m.status },
            |m: &mut Tutorial| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Tutorial>(
            "Tutorial",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Tutorial {
    const NAME: &'static str = "Tutorial";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.id = is.read_uint32()?;
                },
                32 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.id);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::TutorialStatus::TutorialStatus::TUTORIAL_NONE) {
            my_size += ::protobuf::rt::int32_size(4, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(13, self.id)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::TutorialStatus::TutorialStatus::TUTORIAL_NONE) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Tutorial {
        Tutorial::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.status = ::protobuf::EnumOrUnknown::new(super::TutorialStatus::TutorialStatus::TUTORIAL_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Tutorial {
        static instance: Tutorial = Tutorial {
            id: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Tutorial {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Tutorial").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Tutorial {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tutorial {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:TutorialGuide)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TutorialGuide {
    // message fields
    // @@protoc_insertion_point(field:TutorialGuide.id)
    pub id: u32,
    // @@protoc_insertion_point(field:TutorialGuide.status)
    pub status: ::protobuf::EnumOrUnknown<super::TutorialStatus::TutorialStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:TutorialGuide.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TutorialGuide {
    fn default() -> &'a TutorialGuide {
        <TutorialGuide as ::protobuf::Message>::default_instance()
    }
}

impl TutorialGuide {
    pub fn new() -> TutorialGuide {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &TutorialGuide| { &m.id },
            |m: &mut TutorialGuide| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &TutorialGuide| { &m.status },
            |m: &mut TutorialGuide| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TutorialGuide>(
            "TutorialGuide",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TutorialGuide {
    const NAME: &'static str = "TutorialGuide";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.id = is.read_uint32()?;
                },
                64 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.id);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::TutorialStatus::TutorialStatus::TUTORIAL_NONE) {
            my_size += ::protobuf::rt::int32_size(8, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(3, self.id)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::TutorialStatus::TutorialStatus::TUTORIAL_NONE) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TutorialGuide {
        TutorialGuide::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.status = ::protobuf::EnumOrUnknown::new(super::TutorialStatus::TutorialStatus::TUTORIAL_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TutorialGuide {
        static instance: TutorialGuide = TutorialGuide {
            id: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TutorialGuide {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TutorialGuide").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TutorialGuide {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TutorialGuide {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetTutorialCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTutorialCsReq {
    // special fields
    // @@protoc_insertion_point(special_field:GetTutorialCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTutorialCsReq {
    fn default() -> &'a GetTutorialCsReq {
        <GetTutorialCsReq as ::protobuf::Message>::default_instance()
    }
}

impl GetTutorialCsReq {
    pub fn new() -> GetTutorialCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTutorialCsReq>(
            "GetTutorialCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTutorialCsReq {
    const NAME: &'static str = "GetTutorialCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTutorialCsReq {
        GetTutorialCsReq::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTutorialCsReq {
        static instance: GetTutorialCsReq = GetTutorialCsReq {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTutorialCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTutorialCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTutorialCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTutorialCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetTutorialScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTutorialScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetTutorialScRsp.tutorial_list)
    pub tutorial_list: ::std::vec::Vec<Tutorial>,
    // @@protoc_insertion_point(field:GetTutorialScRsp.retcode)
    pub retcode: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GetTutorialScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTutorialScRsp {
    fn default() -> &'a GetTutorialScRsp {
        <GetTutorialScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetTutorialScRsp {
    pub fn new() -> GetTutorialScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tutorial_list",
            |m: &GetTutorialScRsp| { &m.tutorial_list },
            |m: &mut GetTutorialScRsp| { &mut m.tutorial_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetTutorialScRsp| { &m.retcode },
            |m: &mut GetTutorialScRsp| { &mut m.retcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTutorialScRsp>(
            "GetTutorialScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTutorialScRsp {
    const NAME: &'static str = "GetTutorialScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                74 => {
                    self.tutorial_list.push(is.read_message()?);
                },
                112 => {
                    self.retcode = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tutorial_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.retcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.tutorial_list {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(14, self.retcode)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTutorialScRsp {
        GetTutorialScRsp::new()
    }

    fn clear(&mut self) {
        self.tutorial_list.clear();
        self.retcode = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTutorialScRsp {
        static instance: GetTutorialScRsp = GetTutorialScRsp {
            tutorial_list: ::std::vec::Vec::new(),
            retcode: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTutorialScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTutorialScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTutorialScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTutorialScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetTutorialGuideCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTutorialGuideCsReq {
    // special fields
    // @@protoc_insertion_point(special_field:GetTutorialGuideCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTutorialGuideCsReq {
    fn default() -> &'a GetTutorialGuideCsReq {
        <GetTutorialGuideCsReq as ::protobuf::Message>::default_instance()
    }
}

impl GetTutorialGuideCsReq {
    pub fn new() -> GetTutorialGuideCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTutorialGuideCsReq>(
            "GetTutorialGuideCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTutorialGuideCsReq {
    const NAME: &'static str = "GetTutorialGuideCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTutorialGuideCsReq {
        GetTutorialGuideCsReq::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTutorialGuideCsReq {
        static instance: GetTutorialGuideCsReq = GetTutorialGuideCsReq {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTutorialGuideCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTutorialGuideCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTutorialGuideCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTutorialGuideCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetTutorialGuideScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTutorialGuideScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetTutorialGuideScRsp.tutorial_guide_list)
    pub tutorial_guide_list: ::std::vec::Vec<super::TutorialGuide::TutorialGuide>,
    // @@protoc_insertion_point(field:GetTutorialGuideScRsp.retcode)
    pub retcode: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GetTutorialGuideScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTutorialGuideScRsp {
    fn default() -> &'a GetTutorialGuideScRsp {
        <GetTutorialGuideScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetTutorialGuideScRsp {
    pub fn new() -> GetTutorialGuideScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tutorial_guide_list",
            |m: &GetTutorialGuideScRsp| { &m.tutorial_guide_list },
            |m: &mut GetTutorialGuideScRsp| { &mut m.tutorial_guide_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetTutorialGuideScRsp| { &m.retcode },
            |m: &mut GetTutorialGuideScRsp| { &mut m.retcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTutorialGuideScRsp>(
            "GetTutorialGuideScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTutorialGuideScRsp {
    const NAME: &'static str = "GetTutorialGuideScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                42 => {
                    self.tutorial_guide_list.push(is.read_message()?);
                },
                120 => {
                    self.retcode = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tutorial_guide_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.retcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.tutorial_guide_list {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(15, self.retcode)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTutorialGuideScRsp {
        GetTutorialGuideScRsp::new()
    }

    fn clear(&mut self) {
        self.tutorial_guide_list.clear();
        self.retcode = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTutorialGuideScRsp {
        static instance: GetTutorialGuideScRsp = GetTutorialGuideScRsp {
            tutorial_guide_list: ::std::vec::Vec::new(),
            retcode: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTutorialGuideScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTutorialGuideScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTutorialGuideScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTutorialGuideScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UnlockTutorialCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnlockTutorialCsReq {
    // message fields
    // @@protoc_insertion_point(field:UnlockTutorialCsReq.tutorial_id)
    pub tutorial_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:UnlockTutorialCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnlockTutorialCsReq {
    fn default() -> &'a UnlockTutorialCsReq {
        <UnlockTutorialCsReq as ::protobuf::Message>::default_instance()
    }
}

impl UnlockTutorialCsReq {
    pub fn new() -> UnlockTutorialCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tutorial_id",
            |m: &UnlockTutorialCsReq| { &m.tutorial_id },
            |m: &mut UnlockTutorialCsReq| { &mut m.tutorial_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnlockTutorialCsReq>(
            "UnlockTutorialCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnlockTutorialCsReq {
    const NAME: &'static str = "UnlockTutorialCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.tutorial_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.tutorial_id != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.tutorial_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.tutorial_id != 0 {
            os.write_uint32(7, self.tutorial_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnlockTutorialCsReq {
        UnlockTutorialCsReq::new()
    }

    fn clear(&mut self) {
        self.tutorial_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnlockTutorialCsReq {
        static instance: UnlockTutorialCsReq = UnlockTutorialCsReq {
            tutorial_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnlockTutorialCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnlockTutorialCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnlockTutorialCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnlockTutorialCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UnlockTutorialScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnlockTutorialScRsp {
    // message fields
    // @@protoc_insertion_point(field:UnlockTutorialScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:UnlockTutorialScRsp.tutorial)
    pub tutorial: ::protobuf::MessageField<Tutorial>,
    // special fields
    // @@protoc_insertion_point(special_field:UnlockTutorialScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnlockTutorialScRsp {
    fn default() -> &'a UnlockTutorialScRsp {
        <UnlockTutorialScRsp as ::protobuf::Message>::default_instance()
    }
}

impl UnlockTutorialScRsp {
    pub fn new() -> UnlockTutorialScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &UnlockTutorialScRsp| { &m.retcode },
            |m: &mut UnlockTutorialScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Tutorial>(
            "tutorial",
            |m: &UnlockTutorialScRsp| { &m.tutorial },
            |m: &mut UnlockTutorialScRsp| { &mut m.tutorial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnlockTutorialScRsp>(
            "UnlockTutorialScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnlockTutorialScRsp {
    const NAME: &'static str = "UnlockTutorialScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.retcode = is.read_uint32()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tutorial)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.retcode);
        }
        if let Some(v) = self.tutorial.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(14, self.retcode)?;
        }
        if let Some(v) = self.tutorial.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnlockTutorialScRsp {
        UnlockTutorialScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.tutorial.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnlockTutorialScRsp {
        static instance: UnlockTutorialScRsp = UnlockTutorialScRsp {
            retcode: 0,
            tutorial: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnlockTutorialScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnlockTutorialScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnlockTutorialScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnlockTutorialScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UnlockTutorialGuideCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnlockTutorialGuideCsReq {
    // message fields
    // @@protoc_insertion_point(field:UnlockTutorialGuideCsReq.group_id)
    pub group_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:UnlockTutorialGuideCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnlockTutorialGuideCsReq {
    fn default() -> &'a UnlockTutorialGuideCsReq {
        <UnlockTutorialGuideCsReq as ::protobuf::Message>::default_instance()
    }
}

impl UnlockTutorialGuideCsReq {
    pub fn new() -> UnlockTutorialGuideCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &UnlockTutorialGuideCsReq| { &m.group_id },
            |m: &mut UnlockTutorialGuideCsReq| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnlockTutorialGuideCsReq>(
            "UnlockTutorialGuideCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnlockTutorialGuideCsReq {
    const NAME: &'static str = "UnlockTutorialGuideCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.group_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.group_id != 0 {
            os.write_uint32(6, self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnlockTutorialGuideCsReq {
        UnlockTutorialGuideCsReq::new()
    }

    fn clear(&mut self) {
        self.group_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnlockTutorialGuideCsReq {
        static instance: UnlockTutorialGuideCsReq = UnlockTutorialGuideCsReq {
            group_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnlockTutorialGuideCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnlockTutorialGuideCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnlockTutorialGuideCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnlockTutorialGuideCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UnlockTutorialGuideScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnlockTutorialGuideScRsp {
    // message fields
    // @@protoc_insertion_point(field:UnlockTutorialGuideScRsp.tutorial_guide)
    pub tutorial_guide: ::protobuf::MessageField<super::TutorialGuide::TutorialGuide>,
    // @@protoc_insertion_point(field:UnlockTutorialGuideScRsp.retcode)
    pub retcode: u32,
    // special fields
    // @@protoc_insertion_point(special_field:UnlockTutorialGuideScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnlockTutorialGuideScRsp {
    fn default() -> &'a UnlockTutorialGuideScRsp {
        <UnlockTutorialGuideScRsp as ::protobuf::Message>::default_instance()
    }
}

impl UnlockTutorialGuideScRsp {
    pub fn new() -> UnlockTutorialGuideScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::TutorialGuide::TutorialGuide>(
            "tutorial_guide",
            |m: &UnlockTutorialGuideScRsp| { &m.tutorial_guide },
            |m: &mut UnlockTutorialGuideScRsp| { &mut m.tutorial_guide },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &UnlockTutorialGuideScRsp| { &m.retcode },
            |m: &mut UnlockTutorialGuideScRsp| { &mut m.retcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnlockTutorialGuideScRsp>(
            "UnlockTutorialGuideScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnlockTutorialGuideScRsp {
    const NAME: &'static str = "UnlockTutorialGuideScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tutorial_guide)?;
                },
                32 => {
                    self.retcode = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tutorial_guide.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.retcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tutorial_guide.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.retcode != 0 {
            os.write_uint32(4, self.retcode)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnlockTutorialGuideScRsp {
        UnlockTutorialGuideScRsp::new()
    }

    fn clear(&mut self) {
        self.tutorial_guide.clear();
        self.retcode = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnlockTutorialGuideScRsp {
        static instance: UnlockTutorialGuideScRsp = UnlockTutorialGuideScRsp {
            tutorial_guide: ::protobuf::MessageField::none(),
            retcode: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnlockTutorialGuideScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnlockTutorialGuideScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnlockTutorialGuideScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnlockTutorialGuideScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:FinishTutorialCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FinishTutorialCsReq {
    // message fields
    // @@protoc_insertion_point(field:FinishTutorialCsReq.tutorial_id)
    pub tutorial_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FinishTutorialCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FinishTutorialCsReq {
    fn default() -> &'a FinishTutorialCsReq {
        <FinishTutorialCsReq as ::protobuf::Message>::default_instance()
    }
}

impl FinishTutorialCsReq {
    pub fn new() -> FinishTutorialCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tutorial_id",
            |m: &FinishTutorialCsReq| { &m.tutorial_id },
            |m: &mut FinishTutorialCsReq| { &mut m.tutorial_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FinishTutorialCsReq>(
            "FinishTutorialCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FinishTutorialCsReq {
    const NAME: &'static str = "FinishTutorialCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.tutorial_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.tutorial_id != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.tutorial_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.tutorial_id != 0 {
            os.write_uint32(14, self.tutorial_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FinishTutorialCsReq {
        FinishTutorialCsReq::new()
    }

    fn clear(&mut self) {
        self.tutorial_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FinishTutorialCsReq {
        static instance: FinishTutorialCsReq = FinishTutorialCsReq {
            tutorial_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FinishTutorialCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FinishTutorialCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FinishTutorialCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FinishTutorialCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:FinishTutorialScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FinishTutorialScRsp {
    // message fields
    // @@protoc_insertion_point(field:FinishTutorialScRsp.tutorial)
    pub tutorial: ::protobuf::MessageField<Tutorial>,
    // @@protoc_insertion_point(field:FinishTutorialScRsp.retcode)
    pub retcode: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FinishTutorialScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FinishTutorialScRsp {
    fn default() -> &'a FinishTutorialScRsp {
        <FinishTutorialScRsp as ::protobuf::Message>::default_instance()
    }
}

impl FinishTutorialScRsp {
    pub fn new() -> FinishTutorialScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Tutorial>(
            "tutorial",
            |m: &FinishTutorialScRsp| { &m.tutorial },
            |m: &mut FinishTutorialScRsp| { &mut m.tutorial },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &FinishTutorialScRsp| { &m.retcode },
            |m: &mut FinishTutorialScRsp| { &mut m.retcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FinishTutorialScRsp>(
            "FinishTutorialScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FinishTutorialScRsp {
    const NAME: &'static str = "FinishTutorialScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tutorial)?;
                },
                112 => {
                    self.retcode = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tutorial.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.retcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tutorial.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.retcode != 0 {
            os.write_uint32(14, self.retcode)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FinishTutorialScRsp {
        FinishTutorialScRsp::new()
    }

    fn clear(&mut self) {
        self.tutorial.clear();
        self.retcode = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FinishTutorialScRsp {
        static instance: FinishTutorialScRsp = FinishTutorialScRsp {
            tutorial: ::protobuf::MessageField::none(),
            retcode: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FinishTutorialScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FinishTutorialScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FinishTutorialScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FinishTutorialScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:FinishTutorialGuideCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FinishTutorialGuideCsReq {
    // message fields
    // @@protoc_insertion_point(field:FinishTutorialGuideCsReq.group_id)
    pub group_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:FinishTutorialGuideCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FinishTutorialGuideCsReq {
    fn default() -> &'a FinishTutorialGuideCsReq {
        <FinishTutorialGuideCsReq as ::protobuf::Message>::default_instance()
    }
}

impl FinishTutorialGuideCsReq {
    pub fn new() -> FinishTutorialGuideCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &FinishTutorialGuideCsReq| { &m.group_id },
            |m: &mut FinishTutorialGuideCsReq| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FinishTutorialGuideCsReq>(
            "FinishTutorialGuideCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FinishTutorialGuideCsReq {
    const NAME: &'static str = "FinishTutorialGuideCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.group_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.group_id != 0 {
            os.write_uint32(1, self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FinishTutorialGuideCsReq {
        FinishTutorialGuideCsReq::new()
    }

    fn clear(&mut self) {
        self.group_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FinishTutorialGuideCsReq {
        static instance: FinishTutorialGuideCsReq = FinishTutorialGuideCsReq {
            group_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FinishTutorialGuideCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FinishTutorialGuideCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FinishTutorialGuideCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FinishTutorialGuideCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:FinishTutorialGuideScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FinishTutorialGuideScRsp {
    // message fields
    // @@protoc_insertion_point(field:FinishTutorialGuideScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:FinishTutorialGuideScRsp.tutorial_guide)
    pub tutorial_guide: ::protobuf::MessageField<super::TutorialGuide::TutorialGuide>,
    // @@protoc_insertion_point(field:FinishTutorialGuideScRsp.reward)
    pub reward: ::protobuf::MessageField<super::ItemList::ItemList>,
    // special fields
    // @@protoc_insertion_point(special_field:FinishTutorialGuideScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FinishTutorialGuideScRsp {
    fn default() -> &'a FinishTutorialGuideScRsp {
        <FinishTutorialGuideScRsp as ::protobuf::Message>::default_instance()
    }
}

impl FinishTutorialGuideScRsp {
    pub fn new() -> FinishTutorialGuideScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &FinishTutorialGuideScRsp| { &m.retcode },
            |m: &mut FinishTutorialGuideScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::TutorialGuide::TutorialGuide>(
            "tutorial_guide",
            |m: &FinishTutorialGuideScRsp| { &m.tutorial_guide },
            |m: &mut FinishTutorialGuideScRsp| { &mut m.tutorial_guide },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "reward",
            |m: &FinishTutorialGuideScRsp| { &m.reward },
            |m: &mut FinishTutorialGuideScRsp| { &mut m.reward },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FinishTutorialGuideScRsp>(
            "FinishTutorialGuideScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FinishTutorialGuideScRsp {
    const NAME: &'static str = "FinishTutorialGuideScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.retcode = is.read_uint32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tutorial_guide)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reward)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.retcode);
        }
        if let Some(v) = self.tutorial_guide.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reward.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(4, self.retcode)?;
        }
        if let Some(v) = self.tutorial_guide.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.reward.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FinishTutorialGuideScRsp {
        FinishTutorialGuideScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.tutorial_guide.clear();
        self.reward.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FinishTutorialGuideScRsp {
        static instance: FinishTutorialGuideScRsp = FinishTutorialGuideScRsp {
            retcode: 0,
            tutorial_guide: ::protobuf::MessageField::none(),
            reward: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FinishTutorialGuideScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FinishTutorialGuideScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FinishTutorialGuideScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FinishTutorialGuideScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:TutorialStatus)
pub enum TutorialStatus {
    // @@protoc_insertion_point(enum_value:TutorialStatus.TUTORIAL_NONE)
    TUTORIAL_NONE = 0,
    // @@protoc_insertion_point(enum_value:TutorialStatus.TUTORIAL_UNLOCK)
    TUTORIAL_UNLOCK = 1,
    // @@protoc_insertion_point(enum_value:TutorialStatus.TUTORIAL_FINISH)
    TUTORIAL_FINISH = 2,
}

impl ::protobuf::Enum for TutorialStatus {
    const NAME: &'static str = "TutorialStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TutorialStatus> {
        match value {
            0 => ::std::option::Option::Some(TutorialStatus::TUTORIAL_NONE),
            1 => ::std::option::Option::Some(TutorialStatus::TUTORIAL_UNLOCK),
            2 => ::std::option::Option::Some(TutorialStatus::TUTORIAL_FINISH),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<TutorialStatus> {
        match str {
            "TUTORIAL_NONE" => ::std::option::Option::Some(TutorialStatus::TUTORIAL_NONE),
            "TUTORIAL_UNLOCK" => ::std::option::Option::Some(TutorialStatus::TUTORIAL_UNLOCK),
            "TUTORIAL_FINISH" => ::std::option::Option::Some(TutorialStatus::TUTORIAL_FINISH),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [TutorialStatus] = &[
        TutorialStatus::TUTORIAL_NONE,
        TutorialStatus::TUTORIAL_UNLOCK,
        TutorialStatus::TUTORIAL_FINISH,
    ];
}

impl ::protobuf::EnumFull for TutorialStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("TutorialStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for TutorialStatus {
    fn default() -> Self {
        TutorialStatus::TUTORIAL_NONE
    }
}

impl TutorialStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TutorialStatus>("TutorialStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eTutorial.proto\x1a\x0eItemList.proto\"C\n\x08Tutorial\x12\x0e\n\
    \x02id\x18\r\x20\x01(\rR\x02id\x12'\n\x06status\x18\x04\x20\x01(\x0e2\
    \x0f.TutorialStatusR\x06status\"H\n\rTutorialGuide\x12\x0e\n\x02id\x18\
    \x03\x20\x01(\rR\x02id\x12'\n\x06status\x18\x08\x20\x01(\x0e2\x0f.Tutori\
    alStatusR\x06status\"\x12\n\x10GetTutorialCsReq\"\\\n\x10GetTutorialScRs\
    p\x12.\n\rtutorial_list\x18\t\x20\x03(\x0b2\t.TutorialR\x0ctutorialList\
    \x12\x18\n\x07retcode\x18\x0e\x20\x01(\rR\x07retcode\"\x17\n\x15GetTutor\
    ialGuideCsReq\"q\n\x15GetTutorialGuideScRsp\x12>\n\x13tutorial_guide_lis\
    t\x18\x05\x20\x03(\x0b2\x0e.TutorialGuideR\x11tutorialGuideList\x12\x18\
    \n\x07retcode\x18\x0f\x20\x01(\rR\x07retcode\"6\n\x13UnlockTutorialCsReq\
    \x12\x1f\n\x0btutorial_id\x18\x07\x20\x01(\rR\ntutorialId\"V\n\x13Unlock\
    TutorialScRsp\x12\x18\n\x07retcode\x18\x0e\x20\x01(\rR\x07retcode\x12%\n\
    \x08tutorial\x18\x0c\x20\x01(\x0b2\t.TutorialR\x08tutorial\"5\n\x18Unloc\
    kTutorialGuideCsReq\x12\x19\n\x08group_id\x18\x06\x20\x01(\rR\x07groupId\
    \"k\n\x18UnlockTutorialGuideScRsp\x125\n\x0etutorial_guide\x18\x08\x20\
    \x01(\x0b2\x0e.TutorialGuideR\rtutorialGuide\x12\x18\n\x07retcode\x18\
    \x04\x20\x01(\rR\x07retcode\"6\n\x13FinishTutorialCsReq\x12\x1f\n\x0btut\
    orial_id\x18\x0e\x20\x01(\rR\ntutorialId\"V\n\x13FinishTutorialScRsp\x12\
    %\n\x08tutorial\x18\x07\x20\x01(\x0b2\t.TutorialR\x08tutorial\x12\x18\n\
    \x07retcode\x18\x0e\x20\x01(\rR\x07retcode\"5\n\x18FinishTutorialGuideCs\
    Req\x12\x19\n\x08group_id\x18\x01\x20\x01(\rR\x07groupId\"\x8e\x01\n\x18\
    FinishTutorialGuideScRsp\x12\x18\n\x07retcode\x18\x04\x20\x01(\rR\x07ret\
    code\x125\n\x0etutorial_guide\x18\x01\x20\x01(\x0b2\x0e.TutorialGuideR\r\
    tutorialGuide\x12!\n\x06reward\x18\x0f\x20\x01(\x0b2\t.ItemListR\x06rewa\
    rd*M\n\x0eTutorialStatus\x12\x11\n\rTUTORIAL_NONE\x10\0\x12\x13\n\x0fTUT\
    ORIAL_UNLOCK\x10\x01\x12\x13\n\x0fTUTORIAL_FINISH\x10\x02B\x15\n\x13emu.\
    lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ItemList::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(14);
            messages.push(Tutorial::generated_message_descriptor_data());
            messages.push(TutorialGuide::generated_message_descriptor_data());
            messages.push(GetTutorialCsReq::generated_message_descriptor_data());
            messages.push(GetTutorialScRsp::generated_message_descriptor_data());
            messages.push(GetTutorialGuideCsReq::generated_message_descriptor_data());
            messages.push(GetTutorialGuideScRsp::generated_message_descriptor_data());
            messages.push(UnlockTutorialCsReq::generated_message_descriptor_data());
            messages.push(UnlockTutorialScRsp::generated_message_descriptor_data());
            messages.push(UnlockTutorialGuideCsReq::generated_message_descriptor_data());
            messages.push(UnlockTutorialGuideScRsp::generated_message_descriptor_data());
            messages.push(FinishTutorialCsReq::generated_message_descriptor_data());
            messages.push(FinishTutorialScRsp::generated_message_descriptor_data());
            messages.push(FinishTutorialGuideCsReq::generated_message_descriptor_data());
            messages.push(FinishTutorialGuideScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(TutorialStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
