// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EBEONHJDGMG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EBEONHJDGMG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EBEONHJDGMG {
    // message fields
    // @@protoc_insertion_point(field:EBEONHJDGMG.GFJENINMLLG)
    pub GFJENINMLLG: ::protobuf::MessageField<super::BDJJIBBPHOE::BDJJIBBPHOE>,
    // @@protoc_insertion_point(field:EBEONHJDGMG.DOGFMMDKGDC)
    pub DOGFMMDKGDC: ::protobuf::MessageField<super::FIIDPGGKANO::FIIDPGGKANO>,
    // @@protoc_insertion_point(field:EBEONHJDGMG.JKOCJIMAGBN)
    pub JKOCJIMAGBN: ::protobuf::MessageField<super::HAAGHLDJLCL::HAAGHLDJLCL>,
    // @@protoc_insertion_point(field:EBEONHJDGMG.FGMIAFDCPAG)
    pub FGMIAFDCPAG: ::protobuf::MessageField<super::LABLHOAFNBJ::LABLHOAFNBJ>,
    // @@protoc_insertion_point(field:EBEONHJDGMG.CKANMMBNALN)
    pub CKANMMBNALN: ::protobuf::MessageField<super::POOAECFIIGH::POOAECFIIGH>,
    // @@protoc_insertion_point(field:EBEONHJDGMG.CDKPFIKHPKG)
    pub CDKPFIKHPKG: ::protobuf::MessageField<super::OBDLNIHMBBP::OBDLNIHMBBP>,
    // @@protoc_insertion_point(field:EBEONHJDGMG.KIMFHLMFCAJ)
    pub KIMFHLMFCAJ: ::protobuf::MessageField<super::FMJPHHJIKEK::FMJPHHJIKEK>,
    // @@protoc_insertion_point(field:EBEONHJDGMG.GOOIEHKAGLC)
    pub GOOIEHKAGLC: ::protobuf::MessageField<super::PKANLCNEDOC::PKANLCNEDOC>,
    // @@protoc_insertion_point(field:EBEONHJDGMG.HOJJFBAEBDA)
    pub HOJJFBAEBDA: ::protobuf::MessageField<super::JHGGMOKNOJB::JHGGMOKNOJB>,
    // @@protoc_insertion_point(field:EBEONHJDGMG.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF)
    pub ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF: ::protobuf::MessageField<super::ICNPHJAADDE::ICNPHJAADDE>,
    // special fields
    // @@protoc_insertion_point(special_field:EBEONHJDGMG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EBEONHJDGMG {
    fn default() -> &'a EBEONHJDGMG {
        <EBEONHJDGMG as ::protobuf::Message>::default_instance()
    }
}

impl EBEONHJDGMG {
    pub fn new() -> EBEONHJDGMG {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BDJJIBBPHOE::BDJJIBBPHOE>(
            "GFJENINMLLG",
            |m: &EBEONHJDGMG| { &m.GFJENINMLLG },
            |m: &mut EBEONHJDGMG| { &mut m.GFJENINMLLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FIIDPGGKANO::FIIDPGGKANO>(
            "DOGFMMDKGDC",
            |m: &EBEONHJDGMG| { &m.DOGFMMDKGDC },
            |m: &mut EBEONHJDGMG| { &mut m.DOGFMMDKGDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HAAGHLDJLCL::HAAGHLDJLCL>(
            "JKOCJIMAGBN",
            |m: &EBEONHJDGMG| { &m.JKOCJIMAGBN },
            |m: &mut EBEONHJDGMG| { &mut m.JKOCJIMAGBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LABLHOAFNBJ::LABLHOAFNBJ>(
            "FGMIAFDCPAG",
            |m: &EBEONHJDGMG| { &m.FGMIAFDCPAG },
            |m: &mut EBEONHJDGMG| { &mut m.FGMIAFDCPAG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::POOAECFIIGH::POOAECFIIGH>(
            "CKANMMBNALN",
            |m: &EBEONHJDGMG| { &m.CKANMMBNALN },
            |m: &mut EBEONHJDGMG| { &mut m.CKANMMBNALN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OBDLNIHMBBP::OBDLNIHMBBP>(
            "CDKPFIKHPKG",
            |m: &EBEONHJDGMG| { &m.CDKPFIKHPKG },
            |m: &mut EBEONHJDGMG| { &mut m.CDKPFIKHPKG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FMJPHHJIKEK::FMJPHHJIKEK>(
            "KIMFHLMFCAJ",
            |m: &EBEONHJDGMG| { &m.KIMFHLMFCAJ },
            |m: &mut EBEONHJDGMG| { &mut m.KIMFHLMFCAJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PKANLCNEDOC::PKANLCNEDOC>(
            "GOOIEHKAGLC",
            |m: &EBEONHJDGMG| { &m.GOOIEHKAGLC },
            |m: &mut EBEONHJDGMG| { &mut m.GOOIEHKAGLC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JHGGMOKNOJB::JHGGMOKNOJB>(
            "HOJJFBAEBDA",
            |m: &EBEONHJDGMG| { &m.HOJJFBAEBDA },
            |m: &mut EBEONHJDGMG| { &mut m.HOJJFBAEBDA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ICNPHJAADDE::ICNPHJAADDE>(
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF",
            |m: &EBEONHJDGMG| { &m.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF },
            |m: &mut EBEONHJDGMG| { &mut m.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EBEONHJDGMG>(
            "EBEONHJDGMG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EBEONHJDGMG {
    const NAME: &'static str = "EBEONHJDGMG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GFJENINMLLG)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DOGFMMDKGDC)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JKOCJIMAGBN)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FGMIAFDCPAG)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CKANMMBNALN)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CDKPFIKHPKG)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KIMFHLMFCAJ)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GOOIEHKAGLC)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HOJJFBAEBDA)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.GFJENINMLLG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DOGFMMDKGDC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JKOCJIMAGBN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.FGMIAFDCPAG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CKANMMBNALN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CDKPFIKHPKG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.KIMFHLMFCAJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.GOOIEHKAGLC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.HOJJFBAEBDA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.GFJENINMLLG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.DOGFMMDKGDC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.JKOCJIMAGBN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.FGMIAFDCPAG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.CKANMMBNALN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.CDKPFIKHPKG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.KIMFHLMFCAJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.GOOIEHKAGLC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.HOJJFBAEBDA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EBEONHJDGMG {
        EBEONHJDGMG::new()
    }

    fn clear(&mut self) {
        self.GFJENINMLLG.clear();
        self.DOGFMMDKGDC.clear();
        self.JKOCJIMAGBN.clear();
        self.FGMIAFDCPAG.clear();
        self.CKANMMBNALN.clear();
        self.CDKPFIKHPKG.clear();
        self.KIMFHLMFCAJ.clear();
        self.GOOIEHKAGLC.clear();
        self.HOJJFBAEBDA.clear();
        self.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EBEONHJDGMG {
        static instance: EBEONHJDGMG = EBEONHJDGMG {
            GFJENINMLLG: ::protobuf::MessageField::none(),
            DOGFMMDKGDC: ::protobuf::MessageField::none(),
            JKOCJIMAGBN: ::protobuf::MessageField::none(),
            FGMIAFDCPAG: ::protobuf::MessageField::none(),
            CKANMMBNALN: ::protobuf::MessageField::none(),
            CDKPFIKHPKG: ::protobuf::MessageField::none(),
            KIMFHLMFCAJ: ::protobuf::MessageField::none(),
            GOOIEHKAGLC: ::protobuf::MessageField::none(),
            HOJJFBAEBDA: ::protobuf::MessageField::none(),
            ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EBEONHJDGMG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EBEONHJDGMG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EBEONHJDGMG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EBEONHJDGMG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EBEONHJDGMG.proto\x1a\x11BDJJIBBPHOE.proto\x1a\x11FIIDPGGKANO.prot\
    o\x1a\x11FMJPHHJIKEK.proto\x1a\x11HAAGHLDJLCL.proto\x1a\x11ICNPHJAADDE.p\
    roto\x1a\x11JHGGMOKNOJB.proto\x1a\x11LABLHOAFNBJ.proto\x1a\x11OBDLNIHMBB\
    P.proto\x1a\x11PKANLCNEDOC.proto\x1a\x11POOAECFIIGH.proto\"\xa7\x04\n\
    \x0bEBEONHJDGMG\x12.\n\x0bGFJENINMLLG\x18\x04\x20\x01(\x0b2\x0c.BDJJIBBP\
    HOER\x0bGFJENINMLLG\x12.\n\x0bDOGFMMDKGDC\x18\x01\x20\x01(\x0b2\x0c.FIID\
    PGGKANOR\x0bDOGFMMDKGDC\x12.\n\x0bJKOCJIMAGBN\x18\t\x20\x01(\x0b2\x0c.HA\
    AGHLDJLCLR\x0bJKOCJIMAGBN\x12.\n\x0bFGMIAFDCPAG\x18\x05\x20\x01(\x0b2\
    \x0c.LABLHOAFNBJR\x0bFGMIAFDCPAG\x12.\n\x0bCKANMMBNALN\x18\x07\x20\x01(\
    \x0b2\x0c.POOAECFIIGHR\x0bCKANMMBNALN\x12.\n\x0bCDKPFIKHPKG\x18\x0c\x20\
    \x01(\x0b2\x0c.OBDLNIHMBBPR\x0bCDKPFIKHPKG\x12.\n\x0bKIMFHLMFCAJ\x18\x08\
    \x20\x01(\x0b2\x0c.FMJPHHJIKEKR\x0bKIMFHLMFCAJ\x12.\n\x0bGOOIEHKAGLC\x18\
    \n\x20\x01(\x0b2\x0c.PKANLCNEDOCR\x0bGOOIEHKAGLC\x12.\n\x0bHOJJFBAEBDA\
    \x18\x0e\x20\x01(\x0b2\x0c.JHGGMOKNOJBR\x0bHOJJFBAEBDA\x12h\n+ROGUE_COMM\
    ON_ACTION_RESULT_SOURCE_TYPE_BUFF\x18\x02\x20\x01(\x0b2\x0c.ICNPHJAADDER\
    %ROGUECOMMONACTIONRESULTSOURCETYPEBUFFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::BDJJIBBPHOE::file_descriptor().clone());
            deps.push(super::FIIDPGGKANO::file_descriptor().clone());
            deps.push(super::FMJPHHJIKEK::file_descriptor().clone());
            deps.push(super::HAAGHLDJLCL::file_descriptor().clone());
            deps.push(super::ICNPHJAADDE::file_descriptor().clone());
            deps.push(super::JHGGMOKNOJB::file_descriptor().clone());
            deps.push(super::LABLHOAFNBJ::file_descriptor().clone());
            deps.push(super::OBDLNIHMBBP::file_descriptor().clone());
            deps.push(super::PKANLCNEDOC::file_descriptor().clone());
            deps.push(super::POOAECFIIGH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EBEONHJDGMG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
