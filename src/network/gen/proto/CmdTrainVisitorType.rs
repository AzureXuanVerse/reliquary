// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdTrainVisitorType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdTrainVisitorType)
pub enum CmdTrainVisitorType {
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdTrainVisitorTypeNone)
    CmdTrainVisitorTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdTrainVisitorRewardSendNotify)
    CmdTrainVisitorRewardSendNotify = 3728,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdTrainVisitorBehaviorFinishCsReq)
    CmdTrainVisitorBehaviorFinishCsReq = 3736,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdShowNewSupplementVisitorCsReq)
    CmdShowNewSupplementVisitorCsReq = 3734,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdGetTrainVisitorRegisterScRsp)
    CmdGetTrainVisitorRegisterScRsp = 3774,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdTrainVisitorBehaviorFinishScRsp)
    CmdTrainVisitorBehaviorFinishScRsp = 3795,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdGetTrainVisitorRegisterCsReq)
    CmdGetTrainVisitorRegisterCsReq = 3752,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdTrainRefreshTimeNotify)
    CmdTrainRefreshTimeNotify = 3767,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdGetTrainVisitorBehaviorCsReq)
    CmdGetTrainVisitorBehaviorCsReq = 3784,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdGetTrainVisitorBehaviorScRsp)
    CmdGetTrainVisitorBehaviorScRsp = 3727,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdShowNewSupplementVisitorScRsp)
    CmdShowNewSupplementVisitorScRsp = 3743,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdTakeTrainVisitorUntakenBehaviorRewardCsReq)
    CmdTakeTrainVisitorUntakenBehaviorRewardCsReq = 3724,
    // @@protoc_insertion_point(enum_value:CmdTrainVisitorType.CmdTakeTrainVisitorUntakenBehaviorRewardScRsp)
    CmdTakeTrainVisitorUntakenBehaviorRewardScRsp = 3793,
}

impl ::protobuf::Enum for CmdTrainVisitorType {
    const NAME: &'static str = "CmdTrainVisitorType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdTrainVisitorType> {
        match value {
            0 => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainVisitorTypeNone),
            3728 => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainVisitorRewardSendNotify),
            3736 => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainVisitorBehaviorFinishCsReq),
            3734 => ::std::option::Option::Some(CmdTrainVisitorType::CmdShowNewSupplementVisitorCsReq),
            3774 => ::std::option::Option::Some(CmdTrainVisitorType::CmdGetTrainVisitorRegisterScRsp),
            3795 => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainVisitorBehaviorFinishScRsp),
            3752 => ::std::option::Option::Some(CmdTrainVisitorType::CmdGetTrainVisitorRegisterCsReq),
            3767 => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainRefreshTimeNotify),
            3784 => ::std::option::Option::Some(CmdTrainVisitorType::CmdGetTrainVisitorBehaviorCsReq),
            3727 => ::std::option::Option::Some(CmdTrainVisitorType::CmdGetTrainVisitorBehaviorScRsp),
            3743 => ::std::option::Option::Some(CmdTrainVisitorType::CmdShowNewSupplementVisitorScRsp),
            3724 => ::std::option::Option::Some(CmdTrainVisitorType::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq),
            3793 => ::std::option::Option::Some(CmdTrainVisitorType::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdTrainVisitorType> {
        match str {
            "CmdTrainVisitorTypeNone" => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainVisitorTypeNone),
            "CmdTrainVisitorRewardSendNotify" => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainVisitorRewardSendNotify),
            "CmdTrainVisitorBehaviorFinishCsReq" => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainVisitorBehaviorFinishCsReq),
            "CmdShowNewSupplementVisitorCsReq" => ::std::option::Option::Some(CmdTrainVisitorType::CmdShowNewSupplementVisitorCsReq),
            "CmdGetTrainVisitorRegisterScRsp" => ::std::option::Option::Some(CmdTrainVisitorType::CmdGetTrainVisitorRegisterScRsp),
            "CmdTrainVisitorBehaviorFinishScRsp" => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainVisitorBehaviorFinishScRsp),
            "CmdGetTrainVisitorRegisterCsReq" => ::std::option::Option::Some(CmdTrainVisitorType::CmdGetTrainVisitorRegisterCsReq),
            "CmdTrainRefreshTimeNotify" => ::std::option::Option::Some(CmdTrainVisitorType::CmdTrainRefreshTimeNotify),
            "CmdGetTrainVisitorBehaviorCsReq" => ::std::option::Option::Some(CmdTrainVisitorType::CmdGetTrainVisitorBehaviorCsReq),
            "CmdGetTrainVisitorBehaviorScRsp" => ::std::option::Option::Some(CmdTrainVisitorType::CmdGetTrainVisitorBehaviorScRsp),
            "CmdShowNewSupplementVisitorScRsp" => ::std::option::Option::Some(CmdTrainVisitorType::CmdShowNewSupplementVisitorScRsp),
            "CmdTakeTrainVisitorUntakenBehaviorRewardCsReq" => ::std::option::Option::Some(CmdTrainVisitorType::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq),
            "CmdTakeTrainVisitorUntakenBehaviorRewardScRsp" => ::std::option::Option::Some(CmdTrainVisitorType::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdTrainVisitorType] = &[
        CmdTrainVisitorType::CmdTrainVisitorTypeNone,
        CmdTrainVisitorType::CmdTrainVisitorRewardSendNotify,
        CmdTrainVisitorType::CmdTrainVisitorBehaviorFinishCsReq,
        CmdTrainVisitorType::CmdShowNewSupplementVisitorCsReq,
        CmdTrainVisitorType::CmdGetTrainVisitorRegisterScRsp,
        CmdTrainVisitorType::CmdTrainVisitorBehaviorFinishScRsp,
        CmdTrainVisitorType::CmdGetTrainVisitorRegisterCsReq,
        CmdTrainVisitorType::CmdTrainRefreshTimeNotify,
        CmdTrainVisitorType::CmdGetTrainVisitorBehaviorCsReq,
        CmdTrainVisitorType::CmdGetTrainVisitorBehaviorScRsp,
        CmdTrainVisitorType::CmdShowNewSupplementVisitorScRsp,
        CmdTrainVisitorType::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq,
        CmdTrainVisitorType::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdTrainVisitorType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdTrainVisitorType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdTrainVisitorType::CmdTrainVisitorTypeNone => 0,
            CmdTrainVisitorType::CmdTrainVisitorRewardSendNotify => 1,
            CmdTrainVisitorType::CmdTrainVisitorBehaviorFinishCsReq => 2,
            CmdTrainVisitorType::CmdShowNewSupplementVisitorCsReq => 3,
            CmdTrainVisitorType::CmdGetTrainVisitorRegisterScRsp => 4,
            CmdTrainVisitorType::CmdTrainVisitorBehaviorFinishScRsp => 5,
            CmdTrainVisitorType::CmdGetTrainVisitorRegisterCsReq => 6,
            CmdTrainVisitorType::CmdTrainRefreshTimeNotify => 7,
            CmdTrainVisitorType::CmdGetTrainVisitorBehaviorCsReq => 8,
            CmdTrainVisitorType::CmdGetTrainVisitorBehaviorScRsp => 9,
            CmdTrainVisitorType::CmdShowNewSupplementVisitorScRsp => 10,
            CmdTrainVisitorType::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq => 11,
            CmdTrainVisitorType::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp => 12,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdTrainVisitorType {
    fn default() -> Self {
        CmdTrainVisitorType::CmdTrainVisitorTypeNone
    }
}

impl CmdTrainVisitorType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdTrainVisitorType>("CmdTrainVisitorType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19CmdTrainVisitorType.proto*\x98\x04\n\x13CmdTrainVisitorType\x12\
    \x1b\n\x17CmdTrainVisitorTypeNone\x10\0\x12$\n\x1fCmdTrainVisitorRewardS\
    endNotify\x10\x90\x1d\x12'\n\"CmdTrainVisitorBehaviorFinishCsReq\x10\x98\
    \x1d\x12%\n\x20CmdShowNewSupplementVisitorCsReq\x10\x96\x1d\x12$\n\x1fCm\
    dGetTrainVisitorRegisterScRsp\x10\xbe\x1d\x12'\n\"CmdTrainVisitorBehavio\
    rFinishScRsp\x10\xd3\x1d\x12$\n\x1fCmdGetTrainVisitorRegisterCsReq\x10\
    \xa8\x1d\x12\x1e\n\x19CmdTrainRefreshTimeNotify\x10\xb7\x1d\x12$\n\x1fCm\
    dGetTrainVisitorBehaviorCsReq\x10\xc8\x1d\x12$\n\x1fCmdGetTrainVisitorBe\
    haviorScRsp\x10\x8f\x1d\x12%\n\x20CmdShowNewSupplementVisitorScRsp\x10\
    \x9f\x1d\x122\n-CmdTakeTrainVisitorUntakenBehaviorRewardCsReq\x10\x8c\
    \x1d\x122\n-CmdTakeTrainVisitorUntakenBehaviorRewardScRsp\x10\xd1\x1db\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdTrainVisitorType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
