// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LNFJDOCNPOM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LNFJDOCNPOM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LNFJDOCNPOM {
    // message fields
    // @@protoc_insertion_point(field:LNFJDOCNPOM.MFKKHJJAOPM)
    pub MFKKHJJAOPM: u32,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.IJLJOKPEJCP)
    pub IJLJOKPEJCP: u32,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.HHCJNJKJIKF)
    pub HHCJNJKJIKF: i32,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.HELCMBDCECH)
    pub HELCMBDCECH: u32,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.AMFBDDACHKB)
    pub AMFBDDACHKB: bool,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.IPNFHJEFGAM)
    pub IPNFHJEFGAM: ::protobuf::MessageField<super::JPEGOGNDPJJ::JPEGOGNDPJJ>,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.JDGBODPPAMA)
    pub JDGBODPPAMA: ::protobuf::MessageField<super::AKBBEFHMGNC::AKBBEFHMGNC>,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.LJDDCBNKEBN)
    pub LJDDCBNKEBN: u32,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.CFOJCCEFFPJ)
    pub CFOJCCEFFPJ: u32,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.BFPKLLPAFMA)
    pub BFPKLLPAFMA: bool,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.OIFJDEGIDNB)
    pub OIFJDEGIDNB: ::protobuf::EnumOrUnknown<super::ChessRogueDiceStatus::ChessRogueDiceStatus>,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.ELGHPLPJJDE)
    pub ELGHPLPJJDE: ::protobuf::EnumOrUnknown<super::ChessRogueDiceType::ChessRogueDiceType>,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.FGEILPDBBGC)
    pub FGEILPDBBGC: u32,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.FMFPKEGJDGM)
    pub FMFPKEGJDGM: u32,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.FCOKDGMLODJ)
    pub FCOKDGMLODJ: ::protobuf::MessageField<super::KEMOBLDNBCG::KEMOBLDNBCG>,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.AJMLGICAGBD)
    pub AJMLGICAGBD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:LNFJDOCNPOM.BKCABNMFKKM)
    pub BKCABNMFKKM: u32,
    // special fields
    // @@protoc_insertion_point(special_field:LNFJDOCNPOM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LNFJDOCNPOM {
    fn default() -> &'a LNFJDOCNPOM {
        <LNFJDOCNPOM as ::protobuf::Message>::default_instance()
    }
}

impl LNFJDOCNPOM {
    pub fn new() -> LNFJDOCNPOM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(17);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MFKKHJJAOPM",
            |m: &LNFJDOCNPOM| { &m.MFKKHJJAOPM },
            |m: &mut LNFJDOCNPOM| { &mut m.MFKKHJJAOPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IJLJOKPEJCP",
            |m: &LNFJDOCNPOM| { &m.IJLJOKPEJCP },
            |m: &mut LNFJDOCNPOM| { &mut m.IJLJOKPEJCP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HHCJNJKJIKF",
            |m: &LNFJDOCNPOM| { &m.HHCJNJKJIKF },
            |m: &mut LNFJDOCNPOM| { &mut m.HHCJNJKJIKF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HELCMBDCECH",
            |m: &LNFJDOCNPOM| { &m.HELCMBDCECH },
            |m: &mut LNFJDOCNPOM| { &mut m.HELCMBDCECH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AMFBDDACHKB",
            |m: &LNFJDOCNPOM| { &m.AMFBDDACHKB },
            |m: &mut LNFJDOCNPOM| { &mut m.AMFBDDACHKB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JPEGOGNDPJJ::JPEGOGNDPJJ>(
            "IPNFHJEFGAM",
            |m: &LNFJDOCNPOM| { &m.IPNFHJEFGAM },
            |m: &mut LNFJDOCNPOM| { &mut m.IPNFHJEFGAM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AKBBEFHMGNC::AKBBEFHMGNC>(
            "JDGBODPPAMA",
            |m: &LNFJDOCNPOM| { &m.JDGBODPPAMA },
            |m: &mut LNFJDOCNPOM| { &mut m.JDGBODPPAMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LJDDCBNKEBN",
            |m: &LNFJDOCNPOM| { &m.LJDDCBNKEBN },
            |m: &mut LNFJDOCNPOM| { &mut m.LJDDCBNKEBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CFOJCCEFFPJ",
            |m: &LNFJDOCNPOM| { &m.CFOJCCEFFPJ },
            |m: &mut LNFJDOCNPOM| { &mut m.CFOJCCEFFPJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BFPKLLPAFMA",
            |m: &LNFJDOCNPOM| { &m.BFPKLLPAFMA },
            |m: &mut LNFJDOCNPOM| { &mut m.BFPKLLPAFMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OIFJDEGIDNB",
            |m: &LNFJDOCNPOM| { &m.OIFJDEGIDNB },
            |m: &mut LNFJDOCNPOM| { &mut m.OIFJDEGIDNB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ELGHPLPJJDE",
            |m: &LNFJDOCNPOM| { &m.ELGHPLPJJDE },
            |m: &mut LNFJDOCNPOM| { &mut m.ELGHPLPJJDE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FGEILPDBBGC",
            |m: &LNFJDOCNPOM| { &m.FGEILPDBBGC },
            |m: &mut LNFJDOCNPOM| { &mut m.FGEILPDBBGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMFPKEGJDGM",
            |m: &LNFJDOCNPOM| { &m.FMFPKEGJDGM },
            |m: &mut LNFJDOCNPOM| { &mut m.FMFPKEGJDGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KEMOBLDNBCG::KEMOBLDNBCG>(
            "FCOKDGMLODJ",
            |m: &LNFJDOCNPOM| { &m.FCOKDGMLODJ },
            |m: &mut LNFJDOCNPOM| { &mut m.FCOKDGMLODJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AJMLGICAGBD",
            |m: &LNFJDOCNPOM| { &m.AJMLGICAGBD },
            |m: &mut LNFJDOCNPOM| { &mut m.AJMLGICAGBD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BKCABNMFKKM",
            |m: &LNFJDOCNPOM| { &m.BKCABNMFKKM },
            |m: &mut LNFJDOCNPOM| { &mut m.BKCABNMFKKM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LNFJDOCNPOM>(
            "LNFJDOCNPOM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LNFJDOCNPOM {
    const NAME: &'static str = "LNFJDOCNPOM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.MFKKHJJAOPM = is.read_uint32()?;
                },
                104 => {
                    self.IJLJOKPEJCP = is.read_uint32()?;
                },
                2928 => {
                    self.HHCJNJKJIKF = is.read_int32()?;
                },
                48 => {
                    self.HELCMBDCECH = is.read_uint32()?;
                },
                72 => {
                    self.AMFBDDACHKB = is.read_bool()?;
                },
                11106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IPNFHJEFGAM)?;
                },
                4194 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JDGBODPPAMA)?;
                },
                112 => {
                    self.LJDDCBNKEBN = is.read_uint32()?;
                },
                40 => {
                    self.CFOJCCEFFPJ = is.read_uint32()?;
                },
                10384 => {
                    self.BFPKLLPAFMA = is.read_bool()?;
                },
                56 => {
                    self.OIFJDEGIDNB = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.ELGHPLPJJDE = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.FGEILPDBBGC = is.read_uint32()?;
                },
                16 => {
                    self.FMFPKEGJDGM = is.read_uint32()?;
                },
                8026 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FCOKDGMLODJ)?;
                },
                2706 => {
                    is.read_repeated_packed_uint32_into(&mut self.AJMLGICAGBD)?;
                },
                2704 => {
                    self.AJMLGICAGBD.push(is.read_uint32()?);
                },
                80 => {
                    self.BKCABNMFKKM = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.MFKKHJJAOPM != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.MFKKHJJAOPM);
        }
        if self.IJLJOKPEJCP != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.IJLJOKPEJCP);
        }
        if self.HHCJNJKJIKF != 0 {
            my_size += ::protobuf::rt::int32_size(366, self.HHCJNJKJIKF);
        }
        if self.HELCMBDCECH != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.HELCMBDCECH);
        }
        if self.AMFBDDACHKB != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.IPNFHJEFGAM.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JDGBODPPAMA.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.LJDDCBNKEBN != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.LJDDCBNKEBN);
        }
        if self.CFOJCCEFFPJ != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.CFOJCCEFFPJ);
        }
        if self.BFPKLLPAFMA != false {
            my_size += 2 + 1;
        }
        if self.OIFJDEGIDNB != ::protobuf::EnumOrUnknown::new(super::ChessRogueDiceStatus::ChessRogueDiceStatus::CHESS_ROGUE_DICE_IDLE) {
            my_size += ::protobuf::rt::int32_size(7, self.OIFJDEGIDNB.value());
        }
        if self.ELGHPLPJJDE != ::protobuf::EnumOrUnknown::new(super::ChessRogueDiceType::ChessRogueDiceType::CHESS_ROGUE_DICE_FIXED) {
            my_size += ::protobuf::rt::int32_size(4, self.ELGHPLPJJDE.value());
        }
        if self.FGEILPDBBGC != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.FGEILPDBBGC);
        }
        if self.FMFPKEGJDGM != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.FMFPKEGJDGM);
        }
        if let Some(v) = self.FCOKDGMLODJ.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.AJMLGICAGBD {
            my_size += ::protobuf::rt::uint32_size(338, *value);
        };
        if self.BKCABNMFKKM != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.BKCABNMFKKM);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.MFKKHJJAOPM != 0 {
            os.write_uint32(11, self.MFKKHJJAOPM)?;
        }
        if self.IJLJOKPEJCP != 0 {
            os.write_uint32(13, self.IJLJOKPEJCP)?;
        }
        if self.HHCJNJKJIKF != 0 {
            os.write_int32(366, self.HHCJNJKJIKF)?;
        }
        if self.HELCMBDCECH != 0 {
            os.write_uint32(6, self.HELCMBDCECH)?;
        }
        if self.AMFBDDACHKB != false {
            os.write_bool(9, self.AMFBDDACHKB)?;
        }
        if let Some(v) = self.IPNFHJEFGAM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1388, v, os)?;
        }
        if let Some(v) = self.JDGBODPPAMA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(524, v, os)?;
        }
        if self.LJDDCBNKEBN != 0 {
            os.write_uint32(14, self.LJDDCBNKEBN)?;
        }
        if self.CFOJCCEFFPJ != 0 {
            os.write_uint32(5, self.CFOJCCEFFPJ)?;
        }
        if self.BFPKLLPAFMA != false {
            os.write_bool(1298, self.BFPKLLPAFMA)?;
        }
        if self.OIFJDEGIDNB != ::protobuf::EnumOrUnknown::new(super::ChessRogueDiceStatus::ChessRogueDiceStatus::CHESS_ROGUE_DICE_IDLE) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.OIFJDEGIDNB))?;
        }
        if self.ELGHPLPJJDE != ::protobuf::EnumOrUnknown::new(super::ChessRogueDiceType::ChessRogueDiceType::CHESS_ROGUE_DICE_FIXED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.ELGHPLPJJDE))?;
        }
        if self.FGEILPDBBGC != 0 {
            os.write_uint32(3, self.FGEILPDBBGC)?;
        }
        if self.FMFPKEGJDGM != 0 {
            os.write_uint32(2, self.FMFPKEGJDGM)?;
        }
        if let Some(v) = self.FCOKDGMLODJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1003, v, os)?;
        }
        for v in &self.AJMLGICAGBD {
            os.write_uint32(338, *v)?;
        };
        if self.BKCABNMFKKM != 0 {
            os.write_uint32(10, self.BKCABNMFKKM)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LNFJDOCNPOM {
        LNFJDOCNPOM::new()
    }

    fn clear(&mut self) {
        self.MFKKHJJAOPM = 0;
        self.IJLJOKPEJCP = 0;
        self.HHCJNJKJIKF = 0;
        self.HELCMBDCECH = 0;
        self.AMFBDDACHKB = false;
        self.IPNFHJEFGAM.clear();
        self.JDGBODPPAMA.clear();
        self.LJDDCBNKEBN = 0;
        self.CFOJCCEFFPJ = 0;
        self.BFPKLLPAFMA = false;
        self.OIFJDEGIDNB = ::protobuf::EnumOrUnknown::new(super::ChessRogueDiceStatus::ChessRogueDiceStatus::CHESS_ROGUE_DICE_IDLE);
        self.ELGHPLPJJDE = ::protobuf::EnumOrUnknown::new(super::ChessRogueDiceType::ChessRogueDiceType::CHESS_ROGUE_DICE_FIXED);
        self.FGEILPDBBGC = 0;
        self.FMFPKEGJDGM = 0;
        self.FCOKDGMLODJ.clear();
        self.AJMLGICAGBD.clear();
        self.BKCABNMFKKM = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LNFJDOCNPOM {
        static instance: LNFJDOCNPOM = LNFJDOCNPOM {
            MFKKHJJAOPM: 0,
            IJLJOKPEJCP: 0,
            HHCJNJKJIKF: 0,
            HELCMBDCECH: 0,
            AMFBDDACHKB: false,
            IPNFHJEFGAM: ::protobuf::MessageField::none(),
            JDGBODPPAMA: ::protobuf::MessageField::none(),
            LJDDCBNKEBN: 0,
            CFOJCCEFFPJ: 0,
            BFPKLLPAFMA: false,
            OIFJDEGIDNB: ::protobuf::EnumOrUnknown::from_i32(0),
            ELGHPLPJJDE: ::protobuf::EnumOrUnknown::from_i32(0),
            FGEILPDBBGC: 0,
            FMFPKEGJDGM: 0,
            FCOKDGMLODJ: ::protobuf::MessageField::none(),
            AJMLGICAGBD: ::std::vec::Vec::new(),
            BKCABNMFKKM: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LNFJDOCNPOM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LNFJDOCNPOM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LNFJDOCNPOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LNFJDOCNPOM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LNFJDOCNPOM.proto\x1a\x11AKBBEFHMGNC.proto\x1a\x1aChessRogueDiceSt\
    atus.proto\x1a\x18ChessRogueDiceType.proto\x1a\x11JPEGOGNDPJJ.proto\x1a\
    \x11KEMOBLDNBCG.proto\"\xab\x05\n\x0bLNFJDOCNPOM\x12\x20\n\x0bMFKKHJJAOP\
    M\x18\x0b\x20\x01(\rR\x0bMFKKHJJAOPM\x12\x20\n\x0bIJLJOKPEJCP\x18\r\x20\
    \x01(\rR\x0bIJLJOKPEJCP\x12!\n\x0bHHCJNJKJIKF\x18\xee\x02\x20\x01(\x05R\
    \x0bHHCJNJKJIKF\x12\x20\n\x0bHELCMBDCECH\x18\x06\x20\x01(\rR\x0bHELCMBDC\
    ECH\x12\x20\n\x0bAMFBDDACHKB\x18\t\x20\x01(\x08R\x0bAMFBDDACHKB\x12/\n\
    \x0bIPNFHJEFGAM\x18\xec\n\x20\x01(\x0b2\x0c.JPEGOGNDPJJR\x0bIPNFHJEFGAM\
    \x12/\n\x0bJDGBODPPAMA\x18\x8c\x04\x20\x01(\x0b2\x0c.AKBBEFHMGNCR\x0bJDG\
    BODPPAMA\x12\x20\n\x0bLJDDCBNKEBN\x18\x0e\x20\x01(\rR\x0bLJDDCBNKEBN\x12\
    \x20\n\x0bCFOJCCEFFPJ\x18\x05\x20\x01(\rR\x0bCFOJCCEFFPJ\x12!\n\x0bBFPKL\
    LPAFMA\x18\x92\n\x20\x01(\x08R\x0bBFPKLLPAFMA\x127\n\x0bOIFJDEGIDNB\x18\
    \x07\x20\x01(\x0e2\x15.ChessRogueDiceStatusR\x0bOIFJDEGIDNB\x125\n\x0bEL\
    GHPLPJJDE\x18\x04\x20\x01(\x0e2\x13.ChessRogueDiceTypeR\x0bELGHPLPJJDE\
    \x12\x20\n\x0bFGEILPDBBGC\x18\x03\x20\x01(\rR\x0bFGEILPDBBGC\x12\x20\n\
    \x0bFMFPKEGJDGM\x18\x02\x20\x01(\rR\x0bFMFPKEGJDGM\x12/\n\x0bFCOKDGMLODJ\
    \x18\xeb\x07\x20\x01(\x0b2\x0c.KEMOBLDNBCGR\x0bFCOKDGMLODJ\x12!\n\x0bAJM\
    LGICAGBD\x18\xd2\x02\x20\x03(\rR\x0bAJMLGICAGBD\x12\x20\n\x0bBKCABNMFKKM\
    \x18\n\x20\x01(\rR\x0bBKCABNMFKKMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::AKBBEFHMGNC::file_descriptor().clone());
            deps.push(super::ChessRogueDiceStatus::file_descriptor().clone());
            deps.push(super::ChessRogueDiceType::file_descriptor().clone());
            deps.push(super::JPEGOGNDPJJ::file_descriptor().clone());
            deps.push(super::KEMOBLDNBCG::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LNFJDOCNPOM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
