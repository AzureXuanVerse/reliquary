// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PVEBattleResultCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PVEBattleResultCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PVEBattleResultCsReq {
    // message fields
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.GDIKNOBMEAM)
    pub GDIKNOBMEAM: bool,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.HGGIODCBEAB)
    pub HGGIODCBEAB: bool,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.BPGAPMPCEIF)
    pub BPGAPMPCEIF: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.KMEHINFEHAL)
    pub KMEHINFEHAL: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.BLGPIKHEGCC)
    pub BLGPIKHEGCC: ::protobuf::MessageField<super::DEDFMIPCCEC::DEDFMIPCCEC>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.JIGKOPPBLCA)
    pub JIGKOPPBLCA: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.IOOJBIKELEK)
    pub IOOJBIKELEK: ::std::string::String,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.PKBFAGGNGLE)
    pub PKBFAGGNGLE: ::std::vec::Vec<super::MLLIHAFDLNI::MLLIHAFDLNI>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.KBAHKPHAGJO)
    pub KBAHKPHAGJO: ::std::collections::HashMap<::std::string::String, u32>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.GOHCIBDGPEL)
    pub GOHCIBDGPEL: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.DFEMBEANPPF)
    pub DFEMBEANPPF: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.IOAHDINJFDM)
    pub IOAHDINJFDM: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.LKFNJAKABLB)
    pub LKFNJAKABLB: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.CEBNDLGFFEC)
    pub CEBNDLGFFEC: ::protobuf::EnumOrUnknown<super::BOCMMBMNBCK::BOCMMBMNBCK>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.ANPAFOEPAHF)
    pub ANPAFOEPAHF: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PVEBattleResultCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PVEBattleResultCsReq {
    fn default() -> &'a PVEBattleResultCsReq {
        <PVEBattleResultCsReq as ::protobuf::Message>::default_instance()
    }
}

impl PVEBattleResultCsReq {
    pub fn new() -> PVEBattleResultCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GDIKNOBMEAM",
            |m: &PVEBattleResultCsReq| { &m.GDIKNOBMEAM },
            |m: &mut PVEBattleResultCsReq| { &mut m.GDIKNOBMEAM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HGGIODCBEAB",
            |m: &PVEBattleResultCsReq| { &m.HGGIODCBEAB },
            |m: &mut PVEBattleResultCsReq| { &mut m.HGGIODCBEAB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BPGAPMPCEIF",
            |m: &PVEBattleResultCsReq| { &m.BPGAPMPCEIF },
            |m: &mut PVEBattleResultCsReq| { &mut m.BPGAPMPCEIF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KMEHINFEHAL",
            |m: &PVEBattleResultCsReq| { &m.KMEHINFEHAL },
            |m: &mut PVEBattleResultCsReq| { &mut m.KMEHINFEHAL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DEDFMIPCCEC::DEDFMIPCCEC>(
            "BLGPIKHEGCC",
            |m: &PVEBattleResultCsReq| { &m.BLGPIKHEGCC },
            |m: &mut PVEBattleResultCsReq| { &mut m.BLGPIKHEGCC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JIGKOPPBLCA",
            |m: &PVEBattleResultCsReq| { &m.JIGKOPPBLCA },
            |m: &mut PVEBattleResultCsReq| { &mut m.JIGKOPPBLCA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IOOJBIKELEK",
            |m: &PVEBattleResultCsReq| { &m.IOOJBIKELEK },
            |m: &mut PVEBattleResultCsReq| { &mut m.IOOJBIKELEK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PKBFAGGNGLE",
            |m: &PVEBattleResultCsReq| { &m.PKBFAGGNGLE },
            |m: &mut PVEBattleResultCsReq| { &mut m.PKBFAGGNGLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "KBAHKPHAGJO",
            |m: &PVEBattleResultCsReq| { &m.KBAHKPHAGJO },
            |m: &mut PVEBattleResultCsReq| { &mut m.KBAHKPHAGJO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GOHCIBDGPEL",
            |m: &PVEBattleResultCsReq| { &m.GOHCIBDGPEL },
            |m: &mut PVEBattleResultCsReq| { &mut m.GOHCIBDGPEL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DFEMBEANPPF",
            |m: &PVEBattleResultCsReq| { &m.DFEMBEANPPF },
            |m: &mut PVEBattleResultCsReq| { &mut m.DFEMBEANPPF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IOAHDINJFDM",
            |m: &PVEBattleResultCsReq| { &m.IOAHDINJFDM },
            |m: &mut PVEBattleResultCsReq| { &mut m.IOAHDINJFDM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LKFNJAKABLB",
            |m: &PVEBattleResultCsReq| { &m.LKFNJAKABLB },
            |m: &mut PVEBattleResultCsReq| { &mut m.LKFNJAKABLB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CEBNDLGFFEC",
            |m: &PVEBattleResultCsReq| { &m.CEBNDLGFFEC },
            |m: &mut PVEBattleResultCsReq| { &mut m.CEBNDLGFFEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ANPAFOEPAHF",
            |m: &PVEBattleResultCsReq| { &m.ANPAFOEPAHF },
            |m: &mut PVEBattleResultCsReq| { &mut m.ANPAFOEPAHF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PVEBattleResultCsReq>(
            "PVEBattleResultCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PVEBattleResultCsReq {
    const NAME: &'static str = "PVEBattleResultCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.GDIKNOBMEAM = is.read_bool()?;
                },
                88 => {
                    self.HGGIODCBEAB = is.read_bool()?;
                },
                40 => {
                    self.BPGAPMPCEIF = is.read_uint32()?;
                },
                24 => {
                    self.KMEHINFEHAL = is.read_uint32()?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BLGPIKHEGCC)?;
                },
                48 => {
                    self.JIGKOPPBLCA = is.read_uint32()?;
                },
                58 => {
                    self.IOOJBIKELEK = is.read_string()?;
                },
                74 => {
                    self.PKBFAGGNGLE.push(is.read_message()?);
                },
                66 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.KBAHKPHAGJO.insert(key, value);
                },
                32 => {
                    self.GOHCIBDGPEL = is.read_uint32()?;
                },
                80 => {
                    self.DFEMBEANPPF = is.read_uint32()?;
                },
                122 => {
                    self.IOAHDINJFDM = is.read_bytes()?;
                },
                16 => {
                    self.LKFNJAKABLB = is.read_uint32()?;
                },
                104 => {
                    self.CEBNDLGFFEC = is.read_enum_or_unknown()?;
                },
                96 => {
                    self.ANPAFOEPAHF = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.GDIKNOBMEAM != false {
            my_size += 1 + 1;
        }
        if self.HGGIODCBEAB != false {
            my_size += 1 + 1;
        }
        if self.BPGAPMPCEIF != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.BPGAPMPCEIF);
        }
        if self.KMEHINFEHAL != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.KMEHINFEHAL);
        }
        if let Some(v) = self.BLGPIKHEGCC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.JIGKOPPBLCA != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.JIGKOPPBLCA);
        }
        if !self.IOOJBIKELEK.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.IOOJBIKELEK);
        }
        for value in &self.PKBFAGGNGLE {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.KBAHKPHAGJO {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.GOHCIBDGPEL != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.GOHCIBDGPEL);
        }
        if self.DFEMBEANPPF != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.DFEMBEANPPF);
        }
        if !self.IOAHDINJFDM.is_empty() {
            my_size += ::protobuf::rt::bytes_size(15, &self.IOAHDINJFDM);
        }
        if self.LKFNJAKABLB != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.LKFNJAKABLB);
        }
        if self.CEBNDLGFFEC != ::protobuf::EnumOrUnknown::new(super::BOCMMBMNBCK::BOCMMBMNBCK::BATTLE_END_NONE) {
            my_size += ::protobuf::rt::int32_size(13, self.CEBNDLGFFEC.value());
        }
        if self.ANPAFOEPAHF != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.GDIKNOBMEAM != false {
            os.write_bool(1, self.GDIKNOBMEAM)?;
        }
        if self.HGGIODCBEAB != false {
            os.write_bool(11, self.HGGIODCBEAB)?;
        }
        if self.BPGAPMPCEIF != 0 {
            os.write_uint32(5, self.BPGAPMPCEIF)?;
        }
        if self.KMEHINFEHAL != 0 {
            os.write_uint32(3, self.KMEHINFEHAL)?;
        }
        if let Some(v) = self.BLGPIKHEGCC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if self.JIGKOPPBLCA != 0 {
            os.write_uint32(6, self.JIGKOPPBLCA)?;
        }
        if !self.IOOJBIKELEK.is_empty() {
            os.write_string(7, &self.IOOJBIKELEK)?;
        }
        for v in &self.PKBFAGGNGLE {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for (k, v) in &self.KBAHKPHAGJO {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(66)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_uint32(2, *v)?;
        };
        if self.GOHCIBDGPEL != 0 {
            os.write_uint32(4, self.GOHCIBDGPEL)?;
        }
        if self.DFEMBEANPPF != 0 {
            os.write_uint32(10, self.DFEMBEANPPF)?;
        }
        if !self.IOAHDINJFDM.is_empty() {
            os.write_bytes(15, &self.IOAHDINJFDM)?;
        }
        if self.LKFNJAKABLB != 0 {
            os.write_uint32(2, self.LKFNJAKABLB)?;
        }
        if self.CEBNDLGFFEC != ::protobuf::EnumOrUnknown::new(super::BOCMMBMNBCK::BOCMMBMNBCK::BATTLE_END_NONE) {
            os.write_enum(13, ::protobuf::EnumOrUnknown::value(&self.CEBNDLGFFEC))?;
        }
        if self.ANPAFOEPAHF != false {
            os.write_bool(12, self.ANPAFOEPAHF)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PVEBattleResultCsReq {
        PVEBattleResultCsReq::new()
    }

    fn clear(&mut self) {
        self.GDIKNOBMEAM = false;
        self.HGGIODCBEAB = false;
        self.BPGAPMPCEIF = 0;
        self.KMEHINFEHAL = 0;
        self.BLGPIKHEGCC.clear();
        self.JIGKOPPBLCA = 0;
        self.IOOJBIKELEK.clear();
        self.PKBFAGGNGLE.clear();
        self.KBAHKPHAGJO.clear();
        self.GOHCIBDGPEL = 0;
        self.DFEMBEANPPF = 0;
        self.IOAHDINJFDM.clear();
        self.LKFNJAKABLB = 0;
        self.CEBNDLGFFEC = ::protobuf::EnumOrUnknown::new(super::BOCMMBMNBCK::BOCMMBMNBCK::BATTLE_END_NONE);
        self.ANPAFOEPAHF = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PVEBattleResultCsReq {
        static instance: ::protobuf::rt::Lazy<PVEBattleResultCsReq> = ::protobuf::rt::Lazy::new();
        instance.get(PVEBattleResultCsReq::new)
    }
}

impl ::protobuf::MessageFull for PVEBattleResultCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PVEBattleResultCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PVEBattleResultCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PVEBattleResultCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aPVEBattleResultCsReq.proto\x1a\x11BOCMMBMNBCK.proto\x1a\x11DEDFMIP\
    CCEC.proto\x1a\x11MLLIHAFDLNI.proto\"\xa6\x05\n\x14PVEBattleResultCsReq\
    \x12\x20\n\x0bGDIKNOBMEAM\x18\x01\x20\x01(\x08R\x0bGDIKNOBMEAM\x12\x20\n\
    \x0bHGGIODCBEAB\x18\x0b\x20\x01(\x08R\x0bHGGIODCBEAB\x12\x20\n\x0bBPGAPM\
    PCEIF\x18\x05\x20\x01(\rR\x0bBPGAPMPCEIF\x12\x20\n\x0bKMEHINFEHAL\x18\
    \x03\x20\x01(\rR\x0bKMEHINFEHAL\x12.\n\x0bBLGPIKHEGCC\x18\x0e\x20\x01(\
    \x0b2\x0c.DEDFMIPCCECR\x0bBLGPIKHEGCC\x12\x20\n\x0bJIGKOPPBLCA\x18\x06\
    \x20\x01(\rR\x0bJIGKOPPBLCA\x12\x20\n\x0bIOOJBIKELEK\x18\x07\x20\x01(\tR\
    \x0bIOOJBIKELEK\x12.\n\x0bPKBFAGGNGLE\x18\t\x20\x03(\x0b2\x0c.MLLIHAFDLN\
    IR\x0bPKBFAGGNGLE\x12H\n\x0bKBAHKPHAGJO\x18\x08\x20\x03(\x0b2&.PVEBattle\
    ResultCsReq.KBAHKPHAGJOEntryR\x0bKBAHKPHAGJO\x12\x20\n\x0bGOHCIBDGPEL\
    \x18\x04\x20\x01(\rR\x0bGOHCIBDGPEL\x12\x20\n\x0bDFEMBEANPPF\x18\n\x20\
    \x01(\rR\x0bDFEMBEANPPF\x12\x20\n\x0bIOAHDINJFDM\x18\x0f\x20\x01(\x0cR\
    \x0bIOAHDINJFDM\x12\x20\n\x0bLKFNJAKABLB\x18\x02\x20\x01(\rR\x0bLKFNJAKA\
    BLB\x12.\n\x0bCEBNDLGFFEC\x18\r\x20\x01(\x0e2\x0c.BOCMMBMNBCKR\x0bCEBNDL\
    GFFEC\x12\x20\n\x0bANPAFOEPAHF\x18\x0c\x20\x01(\x08R\x0bANPAFOEPAHF\x1a>\
    \n\x10KBAHKPHAGJOEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BOCMMBMNBCK::file_descriptor().clone());
            deps.push(super::DEDFMIPCCEC::file_descriptor().clone());
            deps.push(super::MLLIHAFDLNI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PVEBattleResultCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
