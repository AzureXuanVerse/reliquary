// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PVEBattleResultCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PVEBattleResultCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PVEBattleResultCsReq {
    // message fields
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.LAOIGBICBAO)
    pub LAOIGBICBAO: ::std::collections::HashMap<::std::string::String, u32>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.DBBKNBLOCAH)
    pub DBBKNBLOCAH: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.MHFKKEAJPJI)
    pub MHFKKEAJPJI: ::protobuf::EnumOrUnknown<super::MHNHDNOPKML::MHNHDNOPKML>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.KNFEGGDGFGC)
    pub KNFEGGDGFGC: bool,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.KBGEDOLPOIL)
    pub KBGEDOLPOIL: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.IDIEPEFFGIC)
    pub IDIEPEFFGIC: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.BNPJHJNLFDH)
    pub BNPJHJNLFDH: bool,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.IJEPENGMPLG)
    pub IJEPENGMPLG: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.DDFLFFFIPIC)
    pub DDFLFFFIPIC: ::protobuf::MessageField<super::GENDFBIMJBG::GENDFBIMJBG>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.LFDDAGOMEGB)
    pub LFDDAGOMEGB: ::std::string::String,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.FLJNOLCHBBC)
    pub FLJNOLCHBBC: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.PFLLJAIGCLI)
    pub PFLLJAIGCLI: ::std::vec::Vec<super::KGFGBNFOADO::KGFGBNFOADO>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.EJELPBGNINF)
    pub EJELPBGNINF: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.PDAAJCKOAFF)
    pub PDAAJCKOAFF: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.NKFMMKOBDBC)
    pub NKFMMKOBDBC: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PVEBattleResultCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PVEBattleResultCsReq {
    fn default() -> &'a PVEBattleResultCsReq {
        <PVEBattleResultCsReq as ::protobuf::Message>::default_instance()
    }
}

impl PVEBattleResultCsReq {
    pub fn new() -> PVEBattleResultCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "LAOIGBICBAO",
            |m: &PVEBattleResultCsReq| { &m.LAOIGBICBAO },
            |m: &mut PVEBattleResultCsReq| { &mut m.LAOIGBICBAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBBKNBLOCAH",
            |m: &PVEBattleResultCsReq| { &m.DBBKNBLOCAH },
            |m: &mut PVEBattleResultCsReq| { &mut m.DBBKNBLOCAH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MHFKKEAJPJI",
            |m: &PVEBattleResultCsReq| { &m.MHFKKEAJPJI },
            |m: &mut PVEBattleResultCsReq| { &mut m.MHFKKEAJPJI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KNFEGGDGFGC",
            |m: &PVEBattleResultCsReq| { &m.KNFEGGDGFGC },
            |m: &mut PVEBattleResultCsReq| { &mut m.KNFEGGDGFGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KBGEDOLPOIL",
            |m: &PVEBattleResultCsReq| { &m.KBGEDOLPOIL },
            |m: &mut PVEBattleResultCsReq| { &mut m.KBGEDOLPOIL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IDIEPEFFGIC",
            |m: &PVEBattleResultCsReq| { &m.IDIEPEFFGIC },
            |m: &mut PVEBattleResultCsReq| { &mut m.IDIEPEFFGIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BNPJHJNLFDH",
            |m: &PVEBattleResultCsReq| { &m.BNPJHJNLFDH },
            |m: &mut PVEBattleResultCsReq| { &mut m.BNPJHJNLFDH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IJEPENGMPLG",
            |m: &PVEBattleResultCsReq| { &m.IJEPENGMPLG },
            |m: &mut PVEBattleResultCsReq| { &mut m.IJEPENGMPLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GENDFBIMJBG::GENDFBIMJBG>(
            "DDFLFFFIPIC",
            |m: &PVEBattleResultCsReq| { &m.DDFLFFFIPIC },
            |m: &mut PVEBattleResultCsReq| { &mut m.DDFLFFFIPIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LFDDAGOMEGB",
            |m: &PVEBattleResultCsReq| { &m.LFDDAGOMEGB },
            |m: &mut PVEBattleResultCsReq| { &mut m.LFDDAGOMEGB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FLJNOLCHBBC",
            |m: &PVEBattleResultCsReq| { &m.FLJNOLCHBBC },
            |m: &mut PVEBattleResultCsReq| { &mut m.FLJNOLCHBBC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PFLLJAIGCLI",
            |m: &PVEBattleResultCsReq| { &m.PFLLJAIGCLI },
            |m: &mut PVEBattleResultCsReq| { &mut m.PFLLJAIGCLI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EJELPBGNINF",
            |m: &PVEBattleResultCsReq| { &m.EJELPBGNINF },
            |m: &mut PVEBattleResultCsReq| { &mut m.EJELPBGNINF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PDAAJCKOAFF",
            |m: &PVEBattleResultCsReq| { &m.PDAAJCKOAFF },
            |m: &mut PVEBattleResultCsReq| { &mut m.PDAAJCKOAFF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NKFMMKOBDBC",
            |m: &PVEBattleResultCsReq| { &m.NKFMMKOBDBC },
            |m: &mut PVEBattleResultCsReq| { &mut m.NKFMMKOBDBC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PVEBattleResultCsReq>(
            "PVEBattleResultCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PVEBattleResultCsReq {
    const NAME: &'static str = "PVEBattleResultCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.LAOIGBICBAO.insert(key, value);
                },
                16 => {
                    self.DBBKNBLOCAH = is.read_uint32()?;
                },
                72 => {
                    self.MHFKKEAJPJI = is.read_enum_or_unknown()?;
                },
                120 => {
                    self.KNFEGGDGFGC = is.read_bool()?;
                },
                104 => {
                    self.KBGEDOLPOIL = is.read_uint32()?;
                },
                56 => {
                    self.IDIEPEFFGIC = is.read_uint32()?;
                },
                88 => {
                    self.BNPJHJNLFDH = is.read_bool()?;
                },
                8 => {
                    self.IJEPENGMPLG = is.read_uint32()?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DDFLFFFIPIC)?;
                },
                42 => {
                    self.LFDDAGOMEGB = is.read_string()?;
                },
                80 => {
                    self.FLJNOLCHBBC = is.read_uint32()?;
                },
                26 => {
                    self.PFLLJAIGCLI.push(is.read_message()?);
                },
                48 => {
                    self.EJELPBGNINF = is.read_uint32()?;
                },
                98 => {
                    self.PDAAJCKOAFF = is.read_bytes()?;
                },
                64 => {
                    self.NKFMMKOBDBC = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.LAOIGBICBAO {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.DBBKNBLOCAH != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.DBBKNBLOCAH);
        }
        if self.MHFKKEAJPJI != ::protobuf::EnumOrUnknown::new(super::MHNHDNOPKML::MHNHDNOPKML::BATTLE_END_NONE) {
            my_size += ::protobuf::rt::int32_size(9, self.MHFKKEAJPJI.value());
        }
        if self.KNFEGGDGFGC != false {
            my_size += 1 + 1;
        }
        if self.KBGEDOLPOIL != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.KBGEDOLPOIL);
        }
        if self.IDIEPEFFGIC != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.IDIEPEFFGIC);
        }
        if self.BNPJHJNLFDH != false {
            my_size += 1 + 1;
        }
        if self.IJEPENGMPLG != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.IJEPENGMPLG);
        }
        if let Some(v) = self.DDFLFFFIPIC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.LFDDAGOMEGB.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.LFDDAGOMEGB);
        }
        if self.FLJNOLCHBBC != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.FLJNOLCHBBC);
        }
        for value in &self.PFLLJAIGCLI {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.EJELPBGNINF != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.EJELPBGNINF);
        }
        if !self.PDAAJCKOAFF.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.PDAAJCKOAFF);
        }
        if self.NKFMMKOBDBC != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.LAOIGBICBAO {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_uint32(2, *v)?;
        };
        if self.DBBKNBLOCAH != 0 {
            os.write_uint32(2, self.DBBKNBLOCAH)?;
        }
        if self.MHFKKEAJPJI != ::protobuf::EnumOrUnknown::new(super::MHNHDNOPKML::MHNHDNOPKML::BATTLE_END_NONE) {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&self.MHFKKEAJPJI))?;
        }
        if self.KNFEGGDGFGC != false {
            os.write_bool(15, self.KNFEGGDGFGC)?;
        }
        if self.KBGEDOLPOIL != 0 {
            os.write_uint32(13, self.KBGEDOLPOIL)?;
        }
        if self.IDIEPEFFGIC != 0 {
            os.write_uint32(7, self.IDIEPEFFGIC)?;
        }
        if self.BNPJHJNLFDH != false {
            os.write_bool(11, self.BNPJHJNLFDH)?;
        }
        if self.IJEPENGMPLG != 0 {
            os.write_uint32(1, self.IJEPENGMPLG)?;
        }
        if let Some(v) = self.DDFLFFFIPIC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if !self.LFDDAGOMEGB.is_empty() {
            os.write_string(5, &self.LFDDAGOMEGB)?;
        }
        if self.FLJNOLCHBBC != 0 {
            os.write_uint32(10, self.FLJNOLCHBBC)?;
        }
        for v in &self.PFLLJAIGCLI {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.EJELPBGNINF != 0 {
            os.write_uint32(6, self.EJELPBGNINF)?;
        }
        if !self.PDAAJCKOAFF.is_empty() {
            os.write_bytes(12, &self.PDAAJCKOAFF)?;
        }
        if self.NKFMMKOBDBC != false {
            os.write_bool(8, self.NKFMMKOBDBC)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PVEBattleResultCsReq {
        PVEBattleResultCsReq::new()
    }

    fn clear(&mut self) {
        self.LAOIGBICBAO.clear();
        self.DBBKNBLOCAH = 0;
        self.MHFKKEAJPJI = ::protobuf::EnumOrUnknown::new(super::MHNHDNOPKML::MHNHDNOPKML::BATTLE_END_NONE);
        self.KNFEGGDGFGC = false;
        self.KBGEDOLPOIL = 0;
        self.IDIEPEFFGIC = 0;
        self.BNPJHJNLFDH = false;
        self.IJEPENGMPLG = 0;
        self.DDFLFFFIPIC.clear();
        self.LFDDAGOMEGB.clear();
        self.FLJNOLCHBBC = 0;
        self.PFLLJAIGCLI.clear();
        self.EJELPBGNINF = 0;
        self.PDAAJCKOAFF.clear();
        self.NKFMMKOBDBC = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PVEBattleResultCsReq {
        static instance: ::protobuf::rt::Lazy<PVEBattleResultCsReq> = ::protobuf::rt::Lazy::new();
        instance.get(PVEBattleResultCsReq::new)
    }
}

impl ::protobuf::MessageFull for PVEBattleResultCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PVEBattleResultCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PVEBattleResultCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PVEBattleResultCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aPVEBattleResultCsReq.proto\x1a\x11GENDFBIMJBG.proto\x1a\x11KGFGBNF\
    OADO.proto\x1a\x11MHNHDNOPKML.proto\"\xa6\x05\n\x14PVEBattleResultCsReq\
    \x12H\n\x0bLAOIGBICBAO\x18\x04\x20\x03(\x0b2&.PVEBattleResultCsReq.LAOIG\
    BICBAOEntryR\x0bLAOIGBICBAO\x12\x20\n\x0bDBBKNBLOCAH\x18\x02\x20\x01(\rR\
    \x0bDBBKNBLOCAH\x12.\n\x0bMHFKKEAJPJI\x18\t\x20\x01(\x0e2\x0c.MHNHDNOPKM\
    LR\x0bMHFKKEAJPJI\x12\x20\n\x0bKNFEGGDGFGC\x18\x0f\x20\x01(\x08R\x0bKNFE\
    GGDGFGC\x12\x20\n\x0bKBGEDOLPOIL\x18\r\x20\x01(\rR\x0bKBGEDOLPOIL\x12\
    \x20\n\x0bIDIEPEFFGIC\x18\x07\x20\x01(\rR\x0bIDIEPEFFGIC\x12\x20\n\x0bBN\
    PJHJNLFDH\x18\x0b\x20\x01(\x08R\x0bBNPJHJNLFDH\x12\x20\n\x0bIJEPENGMPLG\
    \x18\x01\x20\x01(\rR\x0bIJEPENGMPLG\x12.\n\x0bDDFLFFFIPIC\x18\x0e\x20\
    \x01(\x0b2\x0c.GENDFBIMJBGR\x0bDDFLFFFIPIC\x12\x20\n\x0bLFDDAGOMEGB\x18\
    \x05\x20\x01(\tR\x0bLFDDAGOMEGB\x12\x20\n\x0bFLJNOLCHBBC\x18\n\x20\x01(\
    \rR\x0bFLJNOLCHBBC\x12.\n\x0bPFLLJAIGCLI\x18\x03\x20\x03(\x0b2\x0c.KGFGB\
    NFOADOR\x0bPFLLJAIGCLI\x12\x20\n\x0bEJELPBGNINF\x18\x06\x20\x01(\rR\x0bE\
    JELPBGNINF\x12\x20\n\x0bPDAAJCKOAFF\x18\x0c\x20\x01(\x0cR\x0bPDAAJCKOAFF\
    \x12\x20\n\x0bNKFMMKOBDBC\x18\x08\x20\x01(\x08R\x0bNKFMMKOBDBC\x1a>\n\
    \x10LAOIGBICBAOEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\
    \n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::GENDFBIMJBG::file_descriptor().clone());
            deps.push(super::KGFGBNFOADO::file_descriptor().clone());
            deps.push(super::MHNHDNOPKML::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PVEBattleResultCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
