// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HJJDFBODGFD.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HJJDFBODGFD)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HJJDFBODGFD {
    // message fields
    // @@protoc_insertion_point(field:HJJDFBODGFD.ELCIIOJMHOM)
    pub ELCIIOJMHOM: u32,
    // @@protoc_insertion_point(field:HJJDFBODGFD.HHIHINPMODI)
    pub HHIHINPMODI: u32,
    // @@protoc_insertion_point(field:HJJDFBODGFD.FKECNPCBMHL)
    pub FKECNPCBMHL: u32,
    // @@protoc_insertion_point(field:HJJDFBODGFD.MLHMMLIAIDI)
    pub MLHMMLIAIDI: u32,
    // @@protoc_insertion_point(field:HJJDFBODGFD.PIAOGAKAPDG)
    pub PIAOGAKAPDG: u32,
    // @@protoc_insertion_point(field:HJJDFBODGFD.EDDAGIBDEGO)
    pub EDDAGIBDEGO: u32,
    // @@protoc_insertion_point(field:HJJDFBODGFD.BJGGCIEAJHE)
    pub BJGGCIEAJHE: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HJJDFBODGFD.FEAOMKPJJLC)
    pub FEAOMKPJJLC: ::std::vec::Vec<super::AIHKDBCHPPG::AIHKDBCHPPG>,
    // special fields
    // @@protoc_insertion_point(special_field:HJJDFBODGFD.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HJJDFBODGFD {
    fn default() -> &'a HJJDFBODGFD {
        <HJJDFBODGFD as ::protobuf::Message>::default_instance()
    }
}

impl HJJDFBODGFD {
    pub fn new() -> HJJDFBODGFD {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ELCIIOJMHOM",
            |m: &HJJDFBODGFD| { &m.ELCIIOJMHOM },
            |m: &mut HJJDFBODGFD| { &mut m.ELCIIOJMHOM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HHIHINPMODI",
            |m: &HJJDFBODGFD| { &m.HHIHINPMODI },
            |m: &mut HJJDFBODGFD| { &mut m.HHIHINPMODI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FKECNPCBMHL",
            |m: &HJJDFBODGFD| { &m.FKECNPCBMHL },
            |m: &mut HJJDFBODGFD| { &mut m.FKECNPCBMHL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MLHMMLIAIDI",
            |m: &HJJDFBODGFD| { &m.MLHMMLIAIDI },
            |m: &mut HJJDFBODGFD| { &mut m.MLHMMLIAIDI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PIAOGAKAPDG",
            |m: &HJJDFBODGFD| { &m.PIAOGAKAPDG },
            |m: &mut HJJDFBODGFD| { &mut m.PIAOGAKAPDG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EDDAGIBDEGO",
            |m: &HJJDFBODGFD| { &m.EDDAGIBDEGO },
            |m: &mut HJJDFBODGFD| { &mut m.EDDAGIBDEGO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BJGGCIEAJHE",
            |m: &HJJDFBODGFD| { &m.BJGGCIEAJHE },
            |m: &mut HJJDFBODGFD| { &mut m.BJGGCIEAJHE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FEAOMKPJJLC",
            |m: &HJJDFBODGFD| { &m.FEAOMKPJJLC },
            |m: &mut HJJDFBODGFD| { &mut m.FEAOMKPJJLC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HJJDFBODGFD>(
            "HJJDFBODGFD",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HJJDFBODGFD {
    const NAME: &'static str = "HJJDFBODGFD";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ELCIIOJMHOM = is.read_uint32()?;
                },
                16 => {
                    self.HHIHINPMODI = is.read_uint32()?;
                },
                24 => {
                    self.FKECNPCBMHL = is.read_uint32()?;
                },
                32 => {
                    self.MLHMMLIAIDI = is.read_uint32()?;
                },
                40 => {
                    self.PIAOGAKAPDG = is.read_uint32()?;
                },
                48 => {
                    self.EDDAGIBDEGO = is.read_uint32()?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.BJGGCIEAJHE)?;
                },
                56 => {
                    self.BJGGCIEAJHE.push(is.read_uint32()?);
                },
                66 => {
                    self.FEAOMKPJJLC.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ELCIIOJMHOM != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.ELCIIOJMHOM);
        }
        if self.HHIHINPMODI != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.HHIHINPMODI);
        }
        if self.FKECNPCBMHL != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.FKECNPCBMHL);
        }
        if self.MLHMMLIAIDI != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.MLHMMLIAIDI);
        }
        if self.PIAOGAKAPDG != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.PIAOGAKAPDG);
        }
        if self.EDDAGIBDEGO != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.EDDAGIBDEGO);
        }
        for value in &self.BJGGCIEAJHE {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        for value in &self.FEAOMKPJJLC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ELCIIOJMHOM != 0 {
            os.write_uint32(1, self.ELCIIOJMHOM)?;
        }
        if self.HHIHINPMODI != 0 {
            os.write_uint32(2, self.HHIHINPMODI)?;
        }
        if self.FKECNPCBMHL != 0 {
            os.write_uint32(3, self.FKECNPCBMHL)?;
        }
        if self.MLHMMLIAIDI != 0 {
            os.write_uint32(4, self.MLHMMLIAIDI)?;
        }
        if self.PIAOGAKAPDG != 0 {
            os.write_uint32(5, self.PIAOGAKAPDG)?;
        }
        if self.EDDAGIBDEGO != 0 {
            os.write_uint32(6, self.EDDAGIBDEGO)?;
        }
        for v in &self.BJGGCIEAJHE {
            os.write_uint32(7, *v)?;
        };
        for v in &self.FEAOMKPJJLC {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HJJDFBODGFD {
        HJJDFBODGFD::new()
    }

    fn clear(&mut self) {
        self.ELCIIOJMHOM = 0;
        self.HHIHINPMODI = 0;
        self.FKECNPCBMHL = 0;
        self.MLHMMLIAIDI = 0;
        self.PIAOGAKAPDG = 0;
        self.EDDAGIBDEGO = 0;
        self.BJGGCIEAJHE.clear();
        self.FEAOMKPJJLC.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HJJDFBODGFD {
        static instance: HJJDFBODGFD = HJJDFBODGFD {
            ELCIIOJMHOM: 0,
            HHIHINPMODI: 0,
            FKECNPCBMHL: 0,
            MLHMMLIAIDI: 0,
            PIAOGAKAPDG: 0,
            EDDAGIBDEGO: 0,
            BJGGCIEAJHE: ::std::vec::Vec::new(),
            FEAOMKPJJLC: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HJJDFBODGFD {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HJJDFBODGFD").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HJJDFBODGFD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HJJDFBODGFD {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HJJDFBODGFD.proto\x1a\x11AIHKDBCHPPG.proto\"\xab\x02\n\x0bHJJDFBOD\
    GFD\x12\x20\n\x0bELCIIOJMHOM\x18\x01\x20\x01(\rR\x0bELCIIOJMHOM\x12\x20\
    \n\x0bHHIHINPMODI\x18\x02\x20\x01(\rR\x0bHHIHINPMODI\x12\x20\n\x0bFKECNP\
    CBMHL\x18\x03\x20\x01(\rR\x0bFKECNPCBMHL\x12\x20\n\x0bMLHMMLIAIDI\x18\
    \x04\x20\x01(\rR\x0bMLHMMLIAIDI\x12\x20\n\x0bPIAOGAKAPDG\x18\x05\x20\x01\
    (\rR\x0bPIAOGAKAPDG\x12\x20\n\x0bEDDAGIBDEGO\x18\x06\x20\x01(\rR\x0bEDDA\
    GIBDEGO\x12\x20\n\x0bBJGGCIEAJHE\x18\x07\x20\x03(\rR\x0bBJGGCIEAJHE\x12.\
    \n\x0bFEAOMKPJJLC\x18\x08\x20\x03(\x0b2\x0c.AIHKDBCHPPGR\x0bFEAOMKPJJLCb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::AIHKDBCHPPG::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HJJDFBODGFD::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
