// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DEDFMIPCCEC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:DEDFMIPCCEC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DEDFMIPCCEC {
    // message fields
    // @@protoc_insertion_point(field:DEDFMIPCCEC.HILBBHBPBEB)
    pub HILBBHBPBEB: u32,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.HOEJKBNJHLJ)
    pub HOEJKBNJHLJ: u32,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.IBBAMPCADEC)
    pub IBBAMPCADEC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.LIDDCJJFPNI)
    pub LIDDCJJFPNI: u32,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.HGGFBLCDOMN)
    pub HGGFBLCDOMN: f64,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.BPGAPMPCEIF)
    pub BPGAPMPCEIF: f64,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.BEBIGGHAEDA)
    pub BEBIGGHAEDA: ::std::vec::Vec<super::FMLLGGHMEGO::FMLLGGHMEGO>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.MLDDLIIMPCK)
    pub MLDDLIIMPCK: ::std::vec::Vec<super::EPKDNNBKEAO::EPKDNNBKEAO>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.OCGPICBEDAK)
    pub OCGPICBEDAK: u32,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.DFMBJOPAHOI)
    pub DFMBJOPAHOI: u32,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.DGFODEKBPKK)
    pub DGFODEKBPKK: u32,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.KFHIBDOCADO)
    pub KFHIBDOCADO: u32,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.JJHJOOMBNHN)
    pub JJHJOOMBNHN: ::std::collections::HashMap<::std::string::String, f32>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.BATTLE_TARGET_TYPE_CHALLENGE_SCORE)
    pub BATTLE_TARGET_TYPE_CHALLENGE_SCORE: u32,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.DOLGLIJAIGD)
    pub DOLGLIJAIGD: ::std::vec::Vec<super::PPPOCCACKFK::PPPOCCACKFK>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.NGNDBABLCGH)
    pub NGNDBABLCGH: ::protobuf::EnumOrUnknown<super::CENLGFLJELG::CENLGFLJELG>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.PCILCJILFPH)
    pub PCILCJILFPH: ::std::vec::Vec<super::BKNHOHPNCLG::BKNHOHPNCLG>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.ENDMHKFFPHM)
    pub ENDMHKFFPHM: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.EHGBIOGIFBA)
    pub EHGBIOGIFBA: ::std::vec::Vec<super::ONCGADJDPNO::ONCGADJDPNO>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.BDMGNLOKBMK)
    pub BDMGNLOKBMK: ::std::vec::Vec<super::CAJBBBDBCAP::CAJBBBDBCAP>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.MEBHHFJLPAF)
    pub MEBHHFJLPAF: ::std::vec::Vec<super::IKLJPHJLPFG::IKLJPHJLPFG>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.CAPBIHHHLIC)
    pub CAPBIHHHLIC: ::std::collections::HashMap<u32, super::CPKNPHCIJIB::CPKNPHCIJIB>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.GGBDODLGHLM)
    pub GGBDODLGHLM: ::std::vec::Vec<super::OEIIHFPFKJJ::OEIIHFPFKJJ>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.ADAFAOHFLMA)
    pub ADAFAOHFLMA: ::protobuf::MessageField<super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.OJJNMPMJCON)
    pub OJJNMPMJCON: ::protobuf::MessageField<super::MAOCCAPKJNE::MAOCCAPKJNE>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.JHFCBEEKKFE)
    pub JHFCBEEKKFE: bool,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.PEELIIKFGFK)
    pub PEELIIKFGFK: ::std::vec::Vec<super::EKCJEBJLGCG::EKCJEBJLGCG>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.CPJONNDMMFB)
    pub CPJONNDMMFB: ::std::vec::Vec<super::PGJELADPNCM::PGJELADPNCM>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.HJABNGMOLMH)
    pub HJABNGMOLMH: u32,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.KPJLIJCMMMK)
    pub KPJLIJCMMMK: ::protobuf::MessageField<super::JHPLJAMDBKL::JHPLJAMDBKL>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.MKPNGJEKGJL)
    pub MKPNGJEKGJL: ::protobuf::MessageField<super::EKJMGDMBJJC::EKJMGDMBJJC>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.AEHAKHDCCCC)
    pub AEHAKHDCCCC: ::protobuf::MessageField<super::NHOFBAKNEOF::NHOFBAKNEOF>,
    // @@protoc_insertion_point(field:DEDFMIPCCEC.AIABHJNIALE)
    pub AIABHJNIALE: ::protobuf::MessageField<super::PKEJPPIEKKE::PKEJPPIEKKE>,
    // special fields
    // @@protoc_insertion_point(special_field:DEDFMIPCCEC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DEDFMIPCCEC {
    fn default() -> &'a DEDFMIPCCEC {
        <DEDFMIPCCEC as ::protobuf::Message>::default_instance()
    }
}

impl DEDFMIPCCEC {
    pub fn new() -> DEDFMIPCCEC {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(33);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HILBBHBPBEB",
            |m: &DEDFMIPCCEC| { &m.HILBBHBPBEB },
            |m: &mut DEDFMIPCCEC| { &mut m.HILBBHBPBEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HOEJKBNJHLJ",
            |m: &DEDFMIPCCEC| { &m.HOEJKBNJHLJ },
            |m: &mut DEDFMIPCCEC| { &mut m.HOEJKBNJHLJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IBBAMPCADEC",
            |m: &DEDFMIPCCEC| { &m.IBBAMPCADEC },
            |m: &mut DEDFMIPCCEC| { &mut m.IBBAMPCADEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LIDDCJJFPNI",
            |m: &DEDFMIPCCEC| { &m.LIDDCJJFPNI },
            |m: &mut DEDFMIPCCEC| { &mut m.LIDDCJJFPNI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HGGFBLCDOMN",
            |m: &DEDFMIPCCEC| { &m.HGGFBLCDOMN },
            |m: &mut DEDFMIPCCEC| { &mut m.HGGFBLCDOMN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BPGAPMPCEIF",
            |m: &DEDFMIPCCEC| { &m.BPGAPMPCEIF },
            |m: &mut DEDFMIPCCEC| { &mut m.BPGAPMPCEIF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BEBIGGHAEDA",
            |m: &DEDFMIPCCEC| { &m.BEBIGGHAEDA },
            |m: &mut DEDFMIPCCEC| { &mut m.BEBIGGHAEDA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MLDDLIIMPCK",
            |m: &DEDFMIPCCEC| { &m.MLDDLIIMPCK },
            |m: &mut DEDFMIPCCEC| { &mut m.MLDDLIIMPCK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OCGPICBEDAK",
            |m: &DEDFMIPCCEC| { &m.OCGPICBEDAK },
            |m: &mut DEDFMIPCCEC| { &mut m.OCGPICBEDAK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DFMBJOPAHOI",
            |m: &DEDFMIPCCEC| { &m.DFMBJOPAHOI },
            |m: &mut DEDFMIPCCEC| { &mut m.DFMBJOPAHOI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DGFODEKBPKK",
            |m: &DEDFMIPCCEC| { &m.DGFODEKBPKK },
            |m: &mut DEDFMIPCCEC| { &mut m.DGFODEKBPKK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KFHIBDOCADO",
            |m: &DEDFMIPCCEC| { &m.KFHIBDOCADO },
            |m: &mut DEDFMIPCCEC| { &mut m.KFHIBDOCADO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "JJHJOOMBNHN",
            |m: &DEDFMIPCCEC| { &m.JJHJOOMBNHN },
            |m: &mut DEDFMIPCCEC| { &mut m.JJHJOOMBNHN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BATTLE_TARGET_TYPE_CHALLENGE_SCORE",
            |m: &DEDFMIPCCEC| { &m.BATTLE_TARGET_TYPE_CHALLENGE_SCORE },
            |m: &mut DEDFMIPCCEC| { &mut m.BATTLE_TARGET_TYPE_CHALLENGE_SCORE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DOLGLIJAIGD",
            |m: &DEDFMIPCCEC| { &m.DOLGLIJAIGD },
            |m: &mut DEDFMIPCCEC| { &mut m.DOLGLIJAIGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NGNDBABLCGH",
            |m: &DEDFMIPCCEC| { &m.NGNDBABLCGH },
            |m: &mut DEDFMIPCCEC| { &mut m.NGNDBABLCGH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PCILCJILFPH",
            |m: &DEDFMIPCCEC| { &m.PCILCJILFPH },
            |m: &mut DEDFMIPCCEC| { &mut m.PCILCJILFPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ENDMHKFFPHM",
            |m: &DEDFMIPCCEC| { &m.ENDMHKFFPHM },
            |m: &mut DEDFMIPCCEC| { &mut m.ENDMHKFFPHM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EHGBIOGIFBA",
            |m: &DEDFMIPCCEC| { &m.EHGBIOGIFBA },
            |m: &mut DEDFMIPCCEC| { &mut m.EHGBIOGIFBA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BDMGNLOKBMK",
            |m: &DEDFMIPCCEC| { &m.BDMGNLOKBMK },
            |m: &mut DEDFMIPCCEC| { &mut m.BDMGNLOKBMK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MEBHHFJLPAF",
            |m: &DEDFMIPCCEC| { &m.MEBHHFJLPAF },
            |m: &mut DEDFMIPCCEC| { &mut m.MEBHHFJLPAF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "CAPBIHHHLIC",
            |m: &DEDFMIPCCEC| { &m.CAPBIHHHLIC },
            |m: &mut DEDFMIPCCEC| { &mut m.CAPBIHHHLIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GGBDODLGHLM",
            |m: &DEDFMIPCCEC| { &m.GGBDODLGHLM },
            |m: &mut DEDFMIPCCEC| { &mut m.GGBDODLGHLM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EvolveBuildBattleInfo::EvolveBuildBattleInfo>(
            "ADAFAOHFLMA",
            |m: &DEDFMIPCCEC| { &m.ADAFAOHFLMA },
            |m: &mut DEDFMIPCCEC| { &mut m.ADAFAOHFLMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MAOCCAPKJNE::MAOCCAPKJNE>(
            "OJJNMPMJCON",
            |m: &DEDFMIPCCEC| { &m.OJJNMPMJCON },
            |m: &mut DEDFMIPCCEC| { &mut m.OJJNMPMJCON },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JHFCBEEKKFE",
            |m: &DEDFMIPCCEC| { &m.JHFCBEEKKFE },
            |m: &mut DEDFMIPCCEC| { &mut m.JHFCBEEKKFE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PEELIIKFGFK",
            |m: &DEDFMIPCCEC| { &m.PEELIIKFGFK },
            |m: &mut DEDFMIPCCEC| { &mut m.PEELIIKFGFK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CPJONNDMMFB",
            |m: &DEDFMIPCCEC| { &m.CPJONNDMMFB },
            |m: &mut DEDFMIPCCEC| { &mut m.CPJONNDMMFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HJABNGMOLMH",
            |m: &DEDFMIPCCEC| { &m.HJABNGMOLMH },
            |m: &mut DEDFMIPCCEC| { &mut m.HJABNGMOLMH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JHPLJAMDBKL::JHPLJAMDBKL>(
            "KPJLIJCMMMK",
            |m: &DEDFMIPCCEC| { &m.KPJLIJCMMMK },
            |m: &mut DEDFMIPCCEC| { &mut m.KPJLIJCMMMK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EKJMGDMBJJC::EKJMGDMBJJC>(
            "MKPNGJEKGJL",
            |m: &DEDFMIPCCEC| { &m.MKPNGJEKGJL },
            |m: &mut DEDFMIPCCEC| { &mut m.MKPNGJEKGJL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NHOFBAKNEOF::NHOFBAKNEOF>(
            "AEHAKHDCCCC",
            |m: &DEDFMIPCCEC| { &m.AEHAKHDCCCC },
            |m: &mut DEDFMIPCCEC| { &mut m.AEHAKHDCCCC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PKEJPPIEKKE::PKEJPPIEKKE>(
            "AIABHJNIALE",
            |m: &DEDFMIPCCEC| { &m.AIABHJNIALE },
            |m: &mut DEDFMIPCCEC| { &mut m.AIABHJNIALE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DEDFMIPCCEC>(
            "DEDFMIPCCEC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DEDFMIPCCEC {
    const NAME: &'static str = "DEDFMIPCCEC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.HILBBHBPBEB = is.read_uint32()?;
                },
                16 => {
                    self.HOEJKBNJHLJ = is.read_uint32()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.IBBAMPCADEC)?;
                },
                24 => {
                    self.IBBAMPCADEC.push(is.read_uint32()?);
                },
                32 => {
                    self.LIDDCJJFPNI = is.read_uint32()?;
                },
                41 => {
                    self.HGGFBLCDOMN = is.read_double()?;
                },
                49 => {
                    self.BPGAPMPCEIF = is.read_double()?;
                },
                58 => {
                    self.BEBIGGHAEDA.push(is.read_message()?);
                },
                66 => {
                    self.MLDDLIIMPCK.push(is.read_message()?);
                },
                72 => {
                    self.OCGPICBEDAK = is.read_uint32()?;
                },
                80 => {
                    self.DFMBJOPAHOI = is.read_uint32()?;
                },
                88 => {
                    self.DGFODEKBPKK = is.read_uint32()?;
                },
                96 => {
                    self.KFHIBDOCADO = is.read_uint32()?;
                },
                106 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            21 => value = is.read_float()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.JJHJOOMBNHN.insert(key, value);
                },
                112 => {
                    self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE = is.read_uint32()?;
                },
                130 => {
                    self.DOLGLIJAIGD.push(is.read_message()?);
                },
                152 => {
                    self.NGNDBABLCGH = is.read_enum_or_unknown()?;
                },
                170 => {
                    self.PCILCJILFPH.push(is.read_message()?);
                },
                178 => {
                    is.read_repeated_packed_int32_into(&mut self.ENDMHKFFPHM)?;
                },
                176 => {
                    self.ENDMHKFFPHM.push(is.read_int32()?);
                },
                186 => {
                    self.EHGBIOGIFBA.push(is.read_message()?);
                },
                210 => {
                    self.BDMGNLOKBMK.push(is.read_message()?);
                },
                218 => {
                    self.MEBHHFJLPAF.push(is.read_message()?);
                },
                226 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.CAPBIHHHLIC.insert(key, value);
                },
                234 => {
                    self.GGBDODLGHLM.push(is.read_message()?);
                },
                242 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ADAFAOHFLMA)?;
                },
                250 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OJJNMPMJCON)?;
                },
                256 => {
                    self.JHFCBEEKKFE = is.read_bool()?;
                },
                266 => {
                    self.PEELIIKFGFK.push(is.read_message()?);
                },
                274 => {
                    self.CPJONNDMMFB.push(is.read_message()?);
                },
                280 => {
                    self.HJABNGMOLMH = is.read_uint32()?;
                },
                290 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KPJLIJCMMMK)?;
                },
                298 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MKPNGJEKGJL)?;
                },
                306 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AEHAKHDCCCC)?;
                },
                314 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AIABHJNIALE)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HILBBHBPBEB != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.HILBBHBPBEB);
        }
        if self.HOEJKBNJHLJ != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.HOEJKBNJHLJ);
        }
        for value in &self.IBBAMPCADEC {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        if self.LIDDCJJFPNI != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.LIDDCJJFPNI);
        }
        if self.HGGFBLCDOMN != 0. {
            my_size += 1 + 8;
        }
        if self.BPGAPMPCEIF != 0. {
            my_size += 1 + 8;
        }
        for value in &self.BEBIGGHAEDA {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.MLDDLIIMPCK {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.OCGPICBEDAK != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.OCGPICBEDAK);
        }
        if self.DFMBJOPAHOI != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.DFMBJOPAHOI);
        }
        if self.DGFODEKBPKK != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.DGFODEKBPKK);
        }
        if self.KFHIBDOCADO != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.KFHIBDOCADO);
        }
        for (k, v) in &self.JJHJOOMBNHN {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 4;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE);
        }
        for value in &self.DOLGLIJAIGD {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.NGNDBABLCGH != ::protobuf::EnumOrUnknown::new(super::CENLGFLJELG::CENLGFLJELG::BATTLE_END_REASON_NONE) {
            my_size += ::protobuf::rt::int32_size(19, self.NGNDBABLCGH.value());
        }
        for value in &self.PCILCJILFPH {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.ENDMHKFFPHM {
            my_size += ::protobuf::rt::int32_size(22, *value);
        };
        for value in &self.EHGBIOGIFBA {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.BDMGNLOKBMK {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.MEBHHFJLPAF {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.CAPBIHHHLIC {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.GGBDODLGHLM {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.ADAFAOHFLMA.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OJJNMPMJCON.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.JHFCBEEKKFE != false {
            my_size += 2 + 1;
        }
        for value in &self.PEELIIKFGFK {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.CPJONNDMMFB {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.HJABNGMOLMH != 0 {
            my_size += ::protobuf::rt::uint32_size(35, self.HJABNGMOLMH);
        }
        if let Some(v) = self.KPJLIJCMMMK.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MKPNGJEKGJL.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.AEHAKHDCCCC.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.AIABHJNIALE.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HILBBHBPBEB != 0 {
            os.write_uint32(1, self.HILBBHBPBEB)?;
        }
        if self.HOEJKBNJHLJ != 0 {
            os.write_uint32(2, self.HOEJKBNJHLJ)?;
        }
        for v in &self.IBBAMPCADEC {
            os.write_uint32(3, *v)?;
        };
        if self.LIDDCJJFPNI != 0 {
            os.write_uint32(4, self.LIDDCJJFPNI)?;
        }
        if self.HGGFBLCDOMN != 0. {
            os.write_double(5, self.HGGFBLCDOMN)?;
        }
        if self.BPGAPMPCEIF != 0. {
            os.write_double(6, self.BPGAPMPCEIF)?;
        }
        for v in &self.BEBIGGHAEDA {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.MLDDLIIMPCK {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.OCGPICBEDAK != 0 {
            os.write_uint32(9, self.OCGPICBEDAK)?;
        }
        if self.DFMBJOPAHOI != 0 {
            os.write_uint32(10, self.DFMBJOPAHOI)?;
        }
        if self.DGFODEKBPKK != 0 {
            os.write_uint32(11, self.DGFODEKBPKK)?;
        }
        if self.KFHIBDOCADO != 0 {
            os.write_uint32(12, self.KFHIBDOCADO)?;
        }
        for (k, v) in &self.JJHJOOMBNHN {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 4;
            os.write_raw_varint32(106)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_float(2, *v)?;
        };
        if self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE != 0 {
            os.write_uint32(14, self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE)?;
        }
        for v in &self.DOLGLIJAIGD {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        };
        if self.NGNDBABLCGH != ::protobuf::EnumOrUnknown::new(super::CENLGFLJELG::CENLGFLJELG::BATTLE_END_REASON_NONE) {
            os.write_enum(19, ::protobuf::EnumOrUnknown::value(&self.NGNDBABLCGH))?;
        }
        for v in &self.PCILCJILFPH {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        for v in &self.ENDMHKFFPHM {
            os.write_int32(22, *v)?;
        };
        for v in &self.EHGBIOGIFBA {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        };
        for v in &self.BDMGNLOKBMK {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        };
        for v in &self.MEBHHFJLPAF {
            ::protobuf::rt::write_message_field_with_cached_size(27, v, os)?;
        };
        for (k, v) in &self.CAPBIHHHLIC {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(226)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.GGBDODLGHLM {
            ::protobuf::rt::write_message_field_with_cached_size(29, v, os)?;
        };
        if let Some(v) = self.ADAFAOHFLMA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(30, v, os)?;
        }
        if let Some(v) = self.OJJNMPMJCON.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(31, v, os)?;
        }
        if self.JHFCBEEKKFE != false {
            os.write_bool(32, self.JHFCBEEKKFE)?;
        }
        for v in &self.PEELIIKFGFK {
            ::protobuf::rt::write_message_field_with_cached_size(33, v, os)?;
        };
        for v in &self.CPJONNDMMFB {
            ::protobuf::rt::write_message_field_with_cached_size(34, v, os)?;
        };
        if self.HJABNGMOLMH != 0 {
            os.write_uint32(35, self.HJABNGMOLMH)?;
        }
        if let Some(v) = self.KPJLIJCMMMK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(36, v, os)?;
        }
        if let Some(v) = self.MKPNGJEKGJL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(37, v, os)?;
        }
        if let Some(v) = self.AEHAKHDCCCC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(38, v, os)?;
        }
        if let Some(v) = self.AIABHJNIALE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(39, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DEDFMIPCCEC {
        DEDFMIPCCEC::new()
    }

    fn clear(&mut self) {
        self.HILBBHBPBEB = 0;
        self.HOEJKBNJHLJ = 0;
        self.IBBAMPCADEC.clear();
        self.LIDDCJJFPNI = 0;
        self.HGGFBLCDOMN = 0.;
        self.BPGAPMPCEIF = 0.;
        self.BEBIGGHAEDA.clear();
        self.MLDDLIIMPCK.clear();
        self.OCGPICBEDAK = 0;
        self.DFMBJOPAHOI = 0;
        self.DGFODEKBPKK = 0;
        self.KFHIBDOCADO = 0;
        self.JJHJOOMBNHN.clear();
        self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE = 0;
        self.DOLGLIJAIGD.clear();
        self.NGNDBABLCGH = ::protobuf::EnumOrUnknown::new(super::CENLGFLJELG::CENLGFLJELG::BATTLE_END_REASON_NONE);
        self.PCILCJILFPH.clear();
        self.ENDMHKFFPHM.clear();
        self.EHGBIOGIFBA.clear();
        self.BDMGNLOKBMK.clear();
        self.MEBHHFJLPAF.clear();
        self.CAPBIHHHLIC.clear();
        self.GGBDODLGHLM.clear();
        self.ADAFAOHFLMA.clear();
        self.OJJNMPMJCON.clear();
        self.JHFCBEEKKFE = false;
        self.PEELIIKFGFK.clear();
        self.CPJONNDMMFB.clear();
        self.HJABNGMOLMH = 0;
        self.KPJLIJCMMMK.clear();
        self.MKPNGJEKGJL.clear();
        self.AEHAKHDCCCC.clear();
        self.AIABHJNIALE.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DEDFMIPCCEC {
        static instance: ::protobuf::rt::Lazy<DEDFMIPCCEC> = ::protobuf::rt::Lazy::new();
        instance.get(DEDFMIPCCEC::new)
    }
}

impl ::protobuf::MessageFull for DEDFMIPCCEC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DEDFMIPCCEC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DEDFMIPCCEC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DEDFMIPCCEC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DEDFMIPCCEC.proto\x1a\x11BKNHOHPNCLG.proto\x1a\x11CAJBBBDBCAP.prot\
    o\x1a\x11CENLGFLJELG.proto\x1a\x11CPKNPHCIJIB.proto\x1a\x11EKCJEBJLGCG.p\
    roto\x1a\x11EKJMGDMBJJC.proto\x1a\x11EPKDNNBKEAO.proto\x1a\x1bEvolveBuil\
    dBattleInfo.proto\x1a\x11FMLLGGHMEGO.proto\x1a\x11IKLJPHJLPFG.proto\x1a\
    \x11JHPLJAMDBKL.proto\x1a\x11MAOCCAPKJNE.proto\x1a\x11NHOFBAKNEOF.proto\
    \x1a\x11OEIIHFPFKJJ.proto\x1a\x11ONCGADJDPNO.proto\x1a\x11PGJELADPNCM.pr\
    oto\x1a\x11PKEJPPIEKKE.proto\x1a\x11PPPOCCACKFK.proto\"\xdd\x0c\n\x0bDED\
    FMIPCCEC\x12\x20\n\x0bHILBBHBPBEB\x18\x01\x20\x01(\rR\x0bHILBBHBPBEB\x12\
    \x20\n\x0bHOEJKBNJHLJ\x18\x02\x20\x01(\rR\x0bHOEJKBNJHLJ\x12\x20\n\x0bIB\
    BAMPCADEC\x18\x03\x20\x03(\rR\x0bIBBAMPCADEC\x12\x20\n\x0bLIDDCJJFPNI\
    \x18\x04\x20\x01(\rR\x0bLIDDCJJFPNI\x12\x20\n\x0bHGGFBLCDOMN\x18\x05\x20\
    \x01(\x01R\x0bHGGFBLCDOMN\x12\x20\n\x0bBPGAPMPCEIF\x18\x06\x20\x01(\x01R\
    \x0bBPGAPMPCEIF\x12.\n\x0bBEBIGGHAEDA\x18\x07\x20\x03(\x0b2\x0c.FMLLGGHM\
    EGOR\x0bBEBIGGHAEDA\x12.\n\x0bMLDDLIIMPCK\x18\x08\x20\x03(\x0b2\x0c.EPKD\
    NNBKEAOR\x0bMLDDLIIMPCK\x12\x20\n\x0bOCGPICBEDAK\x18\t\x20\x01(\rR\x0bOC\
    GPICBEDAK\x12\x20\n\x0bDFMBJOPAHOI\x18\n\x20\x01(\rR\x0bDFMBJOPAHOI\x12\
    \x20\n\x0bDGFODEKBPKK\x18\x0b\x20\x01(\rR\x0bDGFODEKBPKK\x12\x20\n\x0bKF\
    HIBDOCADO\x18\x0c\x20\x01(\rR\x0bKFHIBDOCADO\x12?\n\x0bJJHJOOMBNHN\x18\r\
    \x20\x03(\x0b2\x1d.DEDFMIPCCEC.JJHJOOMBNHNEntryR\x0bJJHJOOMBNHN\x12J\n\"\
    BATTLE_TARGET_TYPE_CHALLENGE_SCORE\x18\x0e\x20\x01(\rR\x1eBATTLETARGETTY\
    PECHALLENGESCORE\x12.\n\x0bDOLGLIJAIGD\x18\x10\x20\x03(\x0b2\x0c.PPPOCCA\
    CKFKR\x0bDOLGLIJAIGD\x12.\n\x0bNGNDBABLCGH\x18\x13\x20\x01(\x0e2\x0c.CEN\
    LGFLJELGR\x0bNGNDBABLCGH\x12.\n\x0bPCILCJILFPH\x18\x15\x20\x03(\x0b2\x0c\
    .BKNHOHPNCLGR\x0bPCILCJILFPH\x12\x20\n\x0bENDMHKFFPHM\x18\x16\x20\x03(\
    \x05R\x0bENDMHKFFPHM\x12.\n\x0bEHGBIOGIFBA\x18\x17\x20\x03(\x0b2\x0c.ONC\
    GADJDPNOR\x0bEHGBIOGIFBA\x12.\n\x0bBDMGNLOKBMK\x18\x1a\x20\x03(\x0b2\x0c\
    .CAJBBBDBCAPR\x0bBDMGNLOKBMK\x12.\n\x0bMEBHHFJLPAF\x18\x1b\x20\x03(\x0b2\
    \x0c.IKLJPHJLPFGR\x0bMEBHHFJLPAF\x12?\n\x0bCAPBIHHHLIC\x18\x1c\x20\x03(\
    \x0b2\x1d.DEDFMIPCCEC.CAPBIHHHLICEntryR\x0bCAPBIHHHLIC\x12.\n\x0bGGBDODL\
    GHLM\x18\x1d\x20\x03(\x0b2\x0c.OEIIHFPFKJJR\x0bGGBDODLGHLM\x128\n\x0bADA\
    FAOHFLMA\x18\x1e\x20\x01(\x0b2\x16.EvolveBuildBattleInfoR\x0bADAFAOHFLMA\
    \x12.\n\x0bOJJNMPMJCON\x18\x1f\x20\x01(\x0b2\x0c.MAOCCAPKJNER\x0bOJJNMPM\
    JCON\x12\x20\n\x0bJHFCBEEKKFE\x18\x20\x20\x01(\x08R\x0bJHFCBEEKKFE\x12.\
    \n\x0bPEELIIKFGFK\x18!\x20\x03(\x0b2\x0c.EKCJEBJLGCGR\x0bPEELIIKFGFK\x12\
    .\n\x0bCPJONNDMMFB\x18\"\x20\x03(\x0b2\x0c.PGJELADPNCMR\x0bCPJONNDMMFB\
    \x12\x20\n\x0bHJABNGMOLMH\x18#\x20\x01(\rR\x0bHJABNGMOLMH\x12.\n\x0bKPJL\
    IJCMMMK\x18$\x20\x01(\x0b2\x0c.JHPLJAMDBKLR\x0bKPJLIJCMMMK\x12.\n\x0bMKP\
    NGJEKGJL\x18%\x20\x01(\x0b2\x0c.EKJMGDMBJJCR\x0bMKPNGJEKGJL\x12.\n\x0bAE\
    HAKHDCCCC\x18&\x20\x01(\x0b2\x0c.NHOFBAKNEOFR\x0bAEHAKHDCCCC\x12.\n\x0bA\
    IABHJNIALE\x18'\x20\x01(\x0b2\x0c.PKEJPPIEKKER\x0bAIABHJNIALE\x1a>\n\x10\
    JJHJOOMBNHNEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\x02R\x05value:\x028\x01\x1aL\n\x10CAPBIHHHLIC\
    Entry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\"\n\x05value\x18\
    \x02\x20\x01(\x0b2\x0c.CPKNPHCIJIBR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(18);
            deps.push(super::BKNHOHPNCLG::file_descriptor().clone());
            deps.push(super::CAJBBBDBCAP::file_descriptor().clone());
            deps.push(super::CENLGFLJELG::file_descriptor().clone());
            deps.push(super::CPKNPHCIJIB::file_descriptor().clone());
            deps.push(super::EKCJEBJLGCG::file_descriptor().clone());
            deps.push(super::EKJMGDMBJJC::file_descriptor().clone());
            deps.push(super::EPKDNNBKEAO::file_descriptor().clone());
            deps.push(super::EvolveBuildBattleInfo::file_descriptor().clone());
            deps.push(super::FMLLGGHMEGO::file_descriptor().clone());
            deps.push(super::IKLJPHJLPFG::file_descriptor().clone());
            deps.push(super::JHPLJAMDBKL::file_descriptor().clone());
            deps.push(super::MAOCCAPKJNE::file_descriptor().clone());
            deps.push(super::NHOFBAKNEOF::file_descriptor().clone());
            deps.push(super::OEIIHFPFKJJ::file_descriptor().clone());
            deps.push(super::ONCGADJDPNO::file_descriptor().clone());
            deps.push(super::PGJELADPNCM::file_descriptor().clone());
            deps.push(super::PKEJPPIEKKE::file_descriptor().clone());
            deps.push(super::PPPOCCACKFK::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DEDFMIPCCEC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
