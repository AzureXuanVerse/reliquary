// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdPunkLordType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdPunkLordType)
pub enum CmdPunkLordType {
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdPunkLordTypeNone)
    CmdPunkLordTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdGetPunkLordMonsterDataCsReq)
    CmdGetPunkLordMonsterDataCsReq = 3211,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdPunkLordRaidTimeOutScNotify)
    CmdPunkLordRaidTimeOutScNotify = 3257,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdSharePunkLordMonsterCsReq)
    CmdSharePunkLordMonsterCsReq = 3235,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdGetPunkLordDataScRsp)
    CmdGetPunkLordDataScRsp = 3291,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdPunkLordMonsterKilledNotify)
    CmdPunkLordMonsterKilledNotify = 3252,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdGetPunkLordBattleRecordScRsp)
    CmdGetPunkLordBattleRecordScRsp = 3224,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdGetPunkLordDataCsReq)
    CmdGetPunkLordDataCsReq = 3277,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdSummonPunkLordMonsterCsReq)
    CmdSummonPunkLordMonsterCsReq = 3270,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdGetKilledPunkLordMonsterDataScRsp)
    CmdGetKilledPunkLordMonsterDataScRsp = 3251,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdGetKilledPunkLordMonsterDataCsReq)
    CmdGetKilledPunkLordMonsterDataCsReq = 3282,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdGetPunkLordMonsterDataScRsp)
    CmdGetPunkLordMonsterDataScRsp = 3213,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdPunkLordDataChangeNotify)
    CmdPunkLordDataChangeNotify = 3292,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdTakeKilledPunkLordMonsterScoreCsReq)
    CmdTakeKilledPunkLordMonsterScoreCsReq = 3222,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdTakePunkLordPointRewardScRsp)
    CmdTakePunkLordPointRewardScRsp = 3250,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdTakeKilledPunkLordMonsterScoreScRsp)
    CmdTakeKilledPunkLordMonsterScoreScRsp = 3286,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdPunkLordMonsterInfoScNotify)
    CmdPunkLordMonsterInfoScNotify = 3273,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdTakePunkLordPointRewardCsReq)
    CmdTakePunkLordPointRewardCsReq = 3236,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdSharePunkLordMonsterScRsp)
    CmdSharePunkLordMonsterScRsp = 3206,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdStartPunkLordRaidScRsp)
    CmdStartPunkLordRaidScRsp = 3209,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdGetPunkLordBattleRecordCsReq)
    CmdGetPunkLordBattleRecordCsReq = 3253,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdStartPunkLordRaidCsReq)
    CmdStartPunkLordRaidCsReq = 3247,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdSummonPunkLordMonsterScRsp)
    CmdSummonPunkLordMonsterScRsp = 3289,
    // @@protoc_insertion_point(enum_value:CmdPunkLordType.CmdPunkLordBattleResultScNotify)
    CmdPunkLordBattleResultScNotify = 3271,
}

impl ::protobuf::Enum for CmdPunkLordType {
    const NAME: &'static str = "CmdPunkLordType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdPunkLordType> {
        match value {
            0 => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordTypeNone),
            3211 => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordMonsterDataCsReq),
            3257 => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordRaidTimeOutScNotify),
            3235 => ::std::option::Option::Some(CmdPunkLordType::CmdSharePunkLordMonsterCsReq),
            3291 => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordDataScRsp),
            3252 => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordMonsterKilledNotify),
            3224 => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordBattleRecordScRsp),
            3277 => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordDataCsReq),
            3270 => ::std::option::Option::Some(CmdPunkLordType::CmdSummonPunkLordMonsterCsReq),
            3251 => ::std::option::Option::Some(CmdPunkLordType::CmdGetKilledPunkLordMonsterDataScRsp),
            3282 => ::std::option::Option::Some(CmdPunkLordType::CmdGetKilledPunkLordMonsterDataCsReq),
            3213 => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordMonsterDataScRsp),
            3292 => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordDataChangeNotify),
            3222 => ::std::option::Option::Some(CmdPunkLordType::CmdTakeKilledPunkLordMonsterScoreCsReq),
            3250 => ::std::option::Option::Some(CmdPunkLordType::CmdTakePunkLordPointRewardScRsp),
            3286 => ::std::option::Option::Some(CmdPunkLordType::CmdTakeKilledPunkLordMonsterScoreScRsp),
            3273 => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordMonsterInfoScNotify),
            3236 => ::std::option::Option::Some(CmdPunkLordType::CmdTakePunkLordPointRewardCsReq),
            3206 => ::std::option::Option::Some(CmdPunkLordType::CmdSharePunkLordMonsterScRsp),
            3209 => ::std::option::Option::Some(CmdPunkLordType::CmdStartPunkLordRaidScRsp),
            3253 => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordBattleRecordCsReq),
            3247 => ::std::option::Option::Some(CmdPunkLordType::CmdStartPunkLordRaidCsReq),
            3289 => ::std::option::Option::Some(CmdPunkLordType::CmdSummonPunkLordMonsterScRsp),
            3271 => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordBattleResultScNotify),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdPunkLordType> {
        match str {
            "CmdPunkLordTypeNone" => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordTypeNone),
            "CmdGetPunkLordMonsterDataCsReq" => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordMonsterDataCsReq),
            "CmdPunkLordRaidTimeOutScNotify" => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordRaidTimeOutScNotify),
            "CmdSharePunkLordMonsterCsReq" => ::std::option::Option::Some(CmdPunkLordType::CmdSharePunkLordMonsterCsReq),
            "CmdGetPunkLordDataScRsp" => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordDataScRsp),
            "CmdPunkLordMonsterKilledNotify" => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordMonsterKilledNotify),
            "CmdGetPunkLordBattleRecordScRsp" => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordBattleRecordScRsp),
            "CmdGetPunkLordDataCsReq" => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordDataCsReq),
            "CmdSummonPunkLordMonsterCsReq" => ::std::option::Option::Some(CmdPunkLordType::CmdSummonPunkLordMonsterCsReq),
            "CmdGetKilledPunkLordMonsterDataScRsp" => ::std::option::Option::Some(CmdPunkLordType::CmdGetKilledPunkLordMonsterDataScRsp),
            "CmdGetKilledPunkLordMonsterDataCsReq" => ::std::option::Option::Some(CmdPunkLordType::CmdGetKilledPunkLordMonsterDataCsReq),
            "CmdGetPunkLordMonsterDataScRsp" => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordMonsterDataScRsp),
            "CmdPunkLordDataChangeNotify" => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordDataChangeNotify),
            "CmdTakeKilledPunkLordMonsterScoreCsReq" => ::std::option::Option::Some(CmdPunkLordType::CmdTakeKilledPunkLordMonsterScoreCsReq),
            "CmdTakePunkLordPointRewardScRsp" => ::std::option::Option::Some(CmdPunkLordType::CmdTakePunkLordPointRewardScRsp),
            "CmdTakeKilledPunkLordMonsterScoreScRsp" => ::std::option::Option::Some(CmdPunkLordType::CmdTakeKilledPunkLordMonsterScoreScRsp),
            "CmdPunkLordMonsterInfoScNotify" => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordMonsterInfoScNotify),
            "CmdTakePunkLordPointRewardCsReq" => ::std::option::Option::Some(CmdPunkLordType::CmdTakePunkLordPointRewardCsReq),
            "CmdSharePunkLordMonsterScRsp" => ::std::option::Option::Some(CmdPunkLordType::CmdSharePunkLordMonsterScRsp),
            "CmdStartPunkLordRaidScRsp" => ::std::option::Option::Some(CmdPunkLordType::CmdStartPunkLordRaidScRsp),
            "CmdGetPunkLordBattleRecordCsReq" => ::std::option::Option::Some(CmdPunkLordType::CmdGetPunkLordBattleRecordCsReq),
            "CmdStartPunkLordRaidCsReq" => ::std::option::Option::Some(CmdPunkLordType::CmdStartPunkLordRaidCsReq),
            "CmdSummonPunkLordMonsterScRsp" => ::std::option::Option::Some(CmdPunkLordType::CmdSummonPunkLordMonsterScRsp),
            "CmdPunkLordBattleResultScNotify" => ::std::option::Option::Some(CmdPunkLordType::CmdPunkLordBattleResultScNotify),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdPunkLordType] = &[
        CmdPunkLordType::CmdPunkLordTypeNone,
        CmdPunkLordType::CmdGetPunkLordMonsterDataCsReq,
        CmdPunkLordType::CmdPunkLordRaidTimeOutScNotify,
        CmdPunkLordType::CmdSharePunkLordMonsterCsReq,
        CmdPunkLordType::CmdGetPunkLordDataScRsp,
        CmdPunkLordType::CmdPunkLordMonsterKilledNotify,
        CmdPunkLordType::CmdGetPunkLordBattleRecordScRsp,
        CmdPunkLordType::CmdGetPunkLordDataCsReq,
        CmdPunkLordType::CmdSummonPunkLordMonsterCsReq,
        CmdPunkLordType::CmdGetKilledPunkLordMonsterDataScRsp,
        CmdPunkLordType::CmdGetKilledPunkLordMonsterDataCsReq,
        CmdPunkLordType::CmdGetPunkLordMonsterDataScRsp,
        CmdPunkLordType::CmdPunkLordDataChangeNotify,
        CmdPunkLordType::CmdTakeKilledPunkLordMonsterScoreCsReq,
        CmdPunkLordType::CmdTakePunkLordPointRewardScRsp,
        CmdPunkLordType::CmdTakeKilledPunkLordMonsterScoreScRsp,
        CmdPunkLordType::CmdPunkLordMonsterInfoScNotify,
        CmdPunkLordType::CmdTakePunkLordPointRewardCsReq,
        CmdPunkLordType::CmdSharePunkLordMonsterScRsp,
        CmdPunkLordType::CmdStartPunkLordRaidScRsp,
        CmdPunkLordType::CmdGetPunkLordBattleRecordCsReq,
        CmdPunkLordType::CmdStartPunkLordRaidCsReq,
        CmdPunkLordType::CmdSummonPunkLordMonsterScRsp,
        CmdPunkLordType::CmdPunkLordBattleResultScNotify,
    ];
}

impl ::protobuf::EnumFull for CmdPunkLordType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdPunkLordType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdPunkLordType::CmdPunkLordTypeNone => 0,
            CmdPunkLordType::CmdGetPunkLordMonsterDataCsReq => 1,
            CmdPunkLordType::CmdPunkLordRaidTimeOutScNotify => 2,
            CmdPunkLordType::CmdSharePunkLordMonsterCsReq => 3,
            CmdPunkLordType::CmdGetPunkLordDataScRsp => 4,
            CmdPunkLordType::CmdPunkLordMonsterKilledNotify => 5,
            CmdPunkLordType::CmdGetPunkLordBattleRecordScRsp => 6,
            CmdPunkLordType::CmdGetPunkLordDataCsReq => 7,
            CmdPunkLordType::CmdSummonPunkLordMonsterCsReq => 8,
            CmdPunkLordType::CmdGetKilledPunkLordMonsterDataScRsp => 9,
            CmdPunkLordType::CmdGetKilledPunkLordMonsterDataCsReq => 10,
            CmdPunkLordType::CmdGetPunkLordMonsterDataScRsp => 11,
            CmdPunkLordType::CmdPunkLordDataChangeNotify => 12,
            CmdPunkLordType::CmdTakeKilledPunkLordMonsterScoreCsReq => 13,
            CmdPunkLordType::CmdTakePunkLordPointRewardScRsp => 14,
            CmdPunkLordType::CmdTakeKilledPunkLordMonsterScoreScRsp => 15,
            CmdPunkLordType::CmdPunkLordMonsterInfoScNotify => 16,
            CmdPunkLordType::CmdTakePunkLordPointRewardCsReq => 17,
            CmdPunkLordType::CmdSharePunkLordMonsterScRsp => 18,
            CmdPunkLordType::CmdStartPunkLordRaidScRsp => 19,
            CmdPunkLordType::CmdGetPunkLordBattleRecordCsReq => 20,
            CmdPunkLordType::CmdStartPunkLordRaidCsReq => 21,
            CmdPunkLordType::CmdSummonPunkLordMonsterScRsp => 22,
            CmdPunkLordType::CmdPunkLordBattleResultScNotify => 23,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdPunkLordType {
    fn default() -> Self {
        CmdPunkLordType::CmdPunkLordTypeNone
    }
}

impl CmdPunkLordType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdPunkLordType>("CmdPunkLordType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15CmdPunkLordType.proto*\xfd\x06\n\x0fCmdPunkLordType\x12\x17\n\x13C\
    mdPunkLordTypeNone\x10\0\x12#\n\x1eCmdGetPunkLordMonsterDataCsReq\x10\
    \x8b\x19\x12#\n\x1eCmdPunkLordRaidTimeOutScNotify\x10\xb9\x19\x12!\n\x1c\
    CmdSharePunkLordMonsterCsReq\x10\xa3\x19\x12\x1c\n\x17CmdGetPunkLordData\
    ScRsp\x10\xdb\x19\x12#\n\x1eCmdPunkLordMonsterKilledNotify\x10\xb4\x19\
    \x12$\n\x1fCmdGetPunkLordBattleRecordScRsp\x10\x98\x19\x12\x1c\n\x17CmdG\
    etPunkLordDataCsReq\x10\xcd\x19\x12\"\n\x1dCmdSummonPunkLordMonsterCsReq\
    \x10\xc6\x19\x12)\n$CmdGetKilledPunkLordMonsterDataScRsp\x10\xb3\x19\x12\
    )\n$CmdGetKilledPunkLordMonsterDataCsReq\x10\xd2\x19\x12#\n\x1eCmdGetPun\
    kLordMonsterDataScRsp\x10\x8d\x19\x12\x20\n\x1bCmdPunkLordDataChangeNoti\
    fy\x10\xdc\x19\x12+\n&CmdTakeKilledPunkLordMonsterScoreCsReq\x10\x96\x19\
    \x12$\n\x1fCmdTakePunkLordPointRewardScRsp\x10\xb2\x19\x12+\n&CmdTakeKil\
    ledPunkLordMonsterScoreScRsp\x10\xd6\x19\x12#\n\x1eCmdPunkLordMonsterInf\
    oScNotify\x10\xc9\x19\x12$\n\x1fCmdTakePunkLordPointRewardCsReq\x10\xa4\
    \x19\x12!\n\x1cCmdSharePunkLordMonsterScRsp\x10\x86\x19\x12\x1e\n\x19Cmd\
    StartPunkLordRaidScRsp\x10\x89\x19\x12$\n\x1fCmdGetPunkLordBattleRecordC\
    sReq\x10\xb5\x19\x12\x1e\n\x19CmdStartPunkLordRaidCsReq\x10\xaf\x19\x12\
    \"\n\x1dCmdSummonPunkLordMonsterScRsp\x10\xd9\x19\x12$\n\x1fCmdPunkLordB\
    attleResultScNotify\x10\xc7\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdPunkLordType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
