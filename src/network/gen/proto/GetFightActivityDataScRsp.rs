// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetFightActivityDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FightActivityGroup)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FightActivityGroup {
    // message fields
    // @@protoc_insertion_point(field:FightActivityGroup.group_id)
    pub group_id: u32,
    // @@protoc_insertion_point(field:FightActivityGroup.endless_max_wave)
    pub endless_max_wave: u32,
    // @@protoc_insertion_point(field:FightActivityGroup.passed_max_difficulty_level)
    pub passed_max_difficulty_level: u32,
    // @@protoc_insertion_point(field:FightActivityGroup.taken_difficulty_level_reward_list)
    pub taken_difficulty_level_reward_list: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:FightActivityGroup.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FightActivityGroup {
    fn default() -> &'a FightActivityGroup {
        <FightActivityGroup as ::protobuf::Message>::default_instance()
    }
}

impl FightActivityGroup {
    pub fn new() -> FightActivityGroup {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &FightActivityGroup| { &m.group_id },
            |m: &mut FightActivityGroup| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "endless_max_wave",
            |m: &FightActivityGroup| { &m.endless_max_wave },
            |m: &mut FightActivityGroup| { &mut m.endless_max_wave },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "passed_max_difficulty_level",
            |m: &FightActivityGroup| { &m.passed_max_difficulty_level },
            |m: &mut FightActivityGroup| { &mut m.passed_max_difficulty_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "taken_difficulty_level_reward_list",
            |m: &FightActivityGroup| { &m.taken_difficulty_level_reward_list },
            |m: &mut FightActivityGroup| { &mut m.taken_difficulty_level_reward_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FightActivityGroup>(
            "FightActivityGroup",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FightActivityGroup {
    const NAME: &'static str = "FightActivityGroup";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                64 => {
                    self.group_id = is.read_uint32()?;
                },
                40 => {
                    self.endless_max_wave = is.read_uint32()?;
                },
                16 => {
                    self.passed_max_difficulty_level = is.read_uint32()?;
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.taken_difficulty_level_reward_list)?;
                },
                88 => {
                    self.taken_difficulty_level_reward_list.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.group_id);
        }
        if self.endless_max_wave != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.endless_max_wave);
        }
        if self.passed_max_difficulty_level != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.passed_max_difficulty_level);
        }
        for value in &self.taken_difficulty_level_reward_list {
            my_size += ::protobuf::rt::uint32_size(11, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.group_id != 0 {
            os.write_uint32(8, self.group_id)?;
        }
        if self.endless_max_wave != 0 {
            os.write_uint32(5, self.endless_max_wave)?;
        }
        if self.passed_max_difficulty_level != 0 {
            os.write_uint32(2, self.passed_max_difficulty_level)?;
        }
        for v in &self.taken_difficulty_level_reward_list {
            os.write_uint32(11, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FightActivityGroup {
        FightActivityGroup::new()
    }

    fn clear(&mut self) {
        self.group_id = 0;
        self.endless_max_wave = 0;
        self.passed_max_difficulty_level = 0;
        self.taken_difficulty_level_reward_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FightActivityGroup {
        static instance: FightActivityGroup = FightActivityGroup {
            group_id: 0,
            endless_max_wave: 0,
            passed_max_difficulty_level: 0,
            taken_difficulty_level_reward_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FightActivityGroup {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FightActivityGroup").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FightActivityGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FightActivityGroup {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetFightActivityDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetFightActivityDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetFightActivityDataScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetFightActivityDataScRsp.EIBGBNAEBOD)
    pub EIBGBNAEBOD: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:GetFightActivityDataScRsp.world_level)
    pub world_level: u32,
    // @@protoc_insertion_point(field:GetFightActivityDataScRsp.HNHHDACCOGM)
    pub HNHHDACCOGM: ::std::vec::Vec<super::FightActivityGroup::FightActivityGroup>,
    // @@protoc_insertion_point(field:GetFightActivityDataScRsp.BIOKAKGPHOP)
    pub BIOKAKGPHOP: bool,
    // special fields
    // @@protoc_insertion_point(special_field:GetFightActivityDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetFightActivityDataScRsp {
    fn default() -> &'a GetFightActivityDataScRsp {
        <GetFightActivityDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetFightActivityDataScRsp {
    pub fn new() -> GetFightActivityDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetFightActivityDataScRsp| { &m.retcode },
            |m: &mut GetFightActivityDataScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "EIBGBNAEBOD",
            |m: &GetFightActivityDataScRsp| { &m.EIBGBNAEBOD },
            |m: &mut GetFightActivityDataScRsp| { &mut m.EIBGBNAEBOD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "world_level",
            |m: &GetFightActivityDataScRsp| { &m.world_level },
            |m: &mut GetFightActivityDataScRsp| { &mut m.world_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HNHHDACCOGM",
            |m: &GetFightActivityDataScRsp| { &m.HNHHDACCOGM },
            |m: &mut GetFightActivityDataScRsp| { &mut m.HNHHDACCOGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BIOKAKGPHOP",
            |m: &GetFightActivityDataScRsp| { &m.BIOKAKGPHOP },
            |m: &mut GetFightActivityDataScRsp| { &mut m.BIOKAKGPHOP },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetFightActivityDataScRsp>(
            "GetFightActivityDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetFightActivityDataScRsp {
    const NAME: &'static str = "GetFightActivityDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.retcode = is.read_uint32()?;
                },
                106 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.EIBGBNAEBOD.insert(key, value);
                },
                56 => {
                    self.world_level = is.read_uint32()?;
                },
                82 => {
                    self.HNHHDACCOGM.push(is.read_message()?);
                },
                8 => {
                    self.BIOKAKGPHOP = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.retcode);
        }
        for (k, v) in &self.EIBGBNAEBOD {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.world_level != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.world_level);
        }
        for value in &self.HNHHDACCOGM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.BIOKAKGPHOP != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(2, self.retcode)?;
        }
        for (k, v) in &self.EIBGBNAEBOD {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(106)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.world_level != 0 {
            os.write_uint32(7, self.world_level)?;
        }
        for v in &self.HNHHDACCOGM {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        if self.BIOKAKGPHOP != false {
            os.write_bool(1, self.BIOKAKGPHOP)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetFightActivityDataScRsp {
        GetFightActivityDataScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.EIBGBNAEBOD.clear();
        self.world_level = 0;
        self.HNHHDACCOGM.clear();
        self.BIOKAKGPHOP = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetFightActivityDataScRsp {
        static instance: ::protobuf::rt::Lazy<GetFightActivityDataScRsp> = ::protobuf::rt::Lazy::new();
        instance.get(GetFightActivityDataScRsp::new)
    }
}

impl ::protobuf::MessageFull for GetFightActivityDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetFightActivityDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetFightActivityDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetFightActivityDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fGetFightActivityDataScRsp.proto\"\xe4\x01\n\x12FightActivityGroup\
    \x12\x19\n\x08group_id\x18\x08\x20\x01(\rR\x07groupId\x12(\n\x10endless_\
    max_wave\x18\x05\x20\x01(\rR\x0eendlessMaxWave\x12=\n\x1bpassed_max_diff\
    iculty_level\x18\x02\x20\x01(\rR\x18passedMaxDifficultyLevel\x12J\n\"tak\
    en_difficulty_level_reward_list\x18\x0b\x20\x03(\rR\x1etakenDifficultyLe\
    velRewardList\"\xbe\x02\n\x19GetFightActivityDataScRsp\x12\x18\n\x07retc\
    ode\x18\x02\x20\x01(\rR\x07retcode\x12M\n\x0bEIBGBNAEBOD\x18\r\x20\x03(\
    \x0b2+.GetFightActivityDataScRsp.EIBGBNAEBODEntryR\x0bEIBGBNAEBOD\x12\
    \x1f\n\x0bworld_level\x18\x07\x20\x01(\rR\nworldLevel\x125\n\x0bHNHHDACC\
    OGM\x18\n\x20\x03(\x0b2\x13.FightActivityGroupR\x0bHNHHDACCOGM\x12\x20\n\
    \x0bBIOKAKGPHOP\x18\x01\x20\x01(\x08R\x0bBIOKAKGPHOP\x1a>\n\x10EIBGBNAEB\
    ODEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\rR\x05value:\x028\x01B\x15\n\x13emu.lunarcore.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(FightActivityGroup::generated_message_descriptor_data());
            messages.push(GetFightActivityDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
