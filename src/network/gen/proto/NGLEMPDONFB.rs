// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `NGLEMPDONFB.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:NGLEMPDONFB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NGLEMPDONFB {
    // message fields
    // @@protoc_insertion_point(field:NGLEMPDONFB.DOBMNOEEFGN)
    pub DOBMNOEEFGN: ::protobuf::MessageField<super::HMLIPDGBHIO::HMLIPDGBHIO>,
    // @@protoc_insertion_point(field:NGLEMPDONFB.DBLMBLPLAPI)
    pub DBLMBLPLAPI: ::protobuf::MessageField<super::BFDMEAFKMGJ::BFDMEAFKMGJ>,
    // @@protoc_insertion_point(field:NGLEMPDONFB.DNKPLIAACPN)
    pub DNKPLIAACPN: ::protobuf::MessageField<super::EIBOMPMNAOL::EIBOMPMNAOL>,
    // message oneof groups
    pub LIOLAILLPBA: ::std::option::Option<nglempdonfb::LIOLAILLPBA>,
    // special fields
    // @@protoc_insertion_point(special_field:NGLEMPDONFB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NGLEMPDONFB {
    fn default() -> &'a NGLEMPDONFB {
        <NGLEMPDONFB as ::protobuf::Message>::default_instance()
    }
}

impl NGLEMPDONFB {
    pub fn new() -> NGLEMPDONFB {
        ::std::default::Default::default()
    }

    // .BAEJDHMJMKC EBKEHINMGCO = 2010;

    pub fn EBKEHINMGCO(&self) -> &super::BAEJDHMJMKC::BAEJDHMJMKC {
        match self.LIOLAILLPBA {
            ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(ref v)) => v,
            _ => <super::BAEJDHMJMKC::BAEJDHMJMKC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EBKEHINMGCO(&mut self) {
        self.LIOLAILLPBA = ::std::option::Option::None;
    }

    pub fn has_EBKEHINMGCO(&self) -> bool {
        match self.LIOLAILLPBA {
            ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EBKEHINMGCO(&mut self, v: super::BAEJDHMJMKC::BAEJDHMJMKC) {
        self.LIOLAILLPBA = ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EBKEHINMGCO(&mut self) -> &mut super::BAEJDHMJMKC::BAEJDHMJMKC {
        if let ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(_)) = self.LIOLAILLPBA {
        } else {
            self.LIOLAILLPBA = ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(super::BAEJDHMJMKC::BAEJDHMJMKC::new()));
        }
        match self.LIOLAILLPBA {
            ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EBKEHINMGCO(&mut self) -> super::BAEJDHMJMKC::BAEJDHMJMKC {
        if self.has_EBKEHINMGCO() {
            match self.LIOLAILLPBA.take() {
                ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BAEJDHMJMKC::BAEJDHMJMKC::new()
        }
    }

    // .HNMNMFPPJFM HOHGGPCGGHN = 1943;

    pub fn HOHGGPCGGHN(&self) -> &super::HNMNMFPPJFM::HNMNMFPPJFM {
        match self.LIOLAILLPBA {
            ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(ref v)) => v,
            _ => <super::HNMNMFPPJFM::HNMNMFPPJFM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HOHGGPCGGHN(&mut self) {
        self.LIOLAILLPBA = ::std::option::Option::None;
    }

    pub fn has_HOHGGPCGGHN(&self) -> bool {
        match self.LIOLAILLPBA {
            ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HOHGGPCGGHN(&mut self, v: super::HNMNMFPPJFM::HNMNMFPPJFM) {
        self.LIOLAILLPBA = ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HOHGGPCGGHN(&mut self) -> &mut super::HNMNMFPPJFM::HNMNMFPPJFM {
        if let ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(_)) = self.LIOLAILLPBA {
        } else {
            self.LIOLAILLPBA = ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(super::HNMNMFPPJFM::HNMNMFPPJFM::new()));
        }
        match self.LIOLAILLPBA {
            ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HOHGGPCGGHN(&mut self) -> super::HNMNMFPPJFM::HNMNMFPPJFM {
        if self.has_HOHGGPCGGHN() {
            match self.LIOLAILLPBA.take() {
                ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HNMNMFPPJFM::HNMNMFPPJFM::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HMLIPDGBHIO::HMLIPDGBHIO>(
            "DOBMNOEEFGN",
            |m: &NGLEMPDONFB| { &m.DOBMNOEEFGN },
            |m: &mut NGLEMPDONFB| { &mut m.DOBMNOEEFGN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BFDMEAFKMGJ::BFDMEAFKMGJ>(
            "DBLMBLPLAPI",
            |m: &NGLEMPDONFB| { &m.DBLMBLPLAPI },
            |m: &mut NGLEMPDONFB| { &mut m.DBLMBLPLAPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EIBOMPMNAOL::EIBOMPMNAOL>(
            "DNKPLIAACPN",
            |m: &NGLEMPDONFB| { &m.DNKPLIAACPN },
            |m: &mut NGLEMPDONFB| { &mut m.DNKPLIAACPN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BAEJDHMJMKC::BAEJDHMJMKC>(
            "EBKEHINMGCO",
            NGLEMPDONFB::has_EBKEHINMGCO,
            NGLEMPDONFB::EBKEHINMGCO,
            NGLEMPDONFB::mut_EBKEHINMGCO,
            NGLEMPDONFB::set_EBKEHINMGCO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HNMNMFPPJFM::HNMNMFPPJFM>(
            "HOHGGPCGGHN",
            NGLEMPDONFB::has_HOHGGPCGGHN,
            NGLEMPDONFB::HOHGGPCGGHN,
            NGLEMPDONFB::mut_HOHGGPCGGHN,
            NGLEMPDONFB::set_HOHGGPCGGHN,
        ));
        oneofs.push(nglempdonfb::LIOLAILLPBA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NGLEMPDONFB>(
            "NGLEMPDONFB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NGLEMPDONFB {
    const NAME: &'static str = "NGLEMPDONFB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DOBMNOEEFGN)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DBLMBLPLAPI)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DNKPLIAACPN)?;
                },
                16082 => {
                    self.LIOLAILLPBA = ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(is.read_message()?));
                },
                15546 => {
                    self.LIOLAILLPBA = ::std::option::Option::Some(nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.DOBMNOEEFGN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DBLMBLPLAPI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DNKPLIAACPN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.LIOLAILLPBA {
            match v {
                &nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.DOBMNOEEFGN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.DBLMBLPLAPI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.DNKPLIAACPN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.LIOLAILLPBA {
            match v {
                &nglempdonfb::LIOLAILLPBA::EBKEHINMGCO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2010, v, os)?;
                },
                &nglempdonfb::LIOLAILLPBA::HOHGGPCGGHN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1943, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NGLEMPDONFB {
        NGLEMPDONFB::new()
    }

    fn clear(&mut self) {
        self.DOBMNOEEFGN.clear();
        self.DBLMBLPLAPI.clear();
        self.DNKPLIAACPN.clear();
        self.LIOLAILLPBA = ::std::option::Option::None;
        self.LIOLAILLPBA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NGLEMPDONFB {
        static instance: NGLEMPDONFB = NGLEMPDONFB {
            DOBMNOEEFGN: ::protobuf::MessageField::none(),
            DBLMBLPLAPI: ::protobuf::MessageField::none(),
            DNKPLIAACPN: ::protobuf::MessageField::none(),
            LIOLAILLPBA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NGLEMPDONFB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NGLEMPDONFB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NGLEMPDONFB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NGLEMPDONFB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `NGLEMPDONFB`
pub mod nglempdonfb {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:NGLEMPDONFB.LIOLAILLPBA)
    pub enum LIOLAILLPBA {
        // @@protoc_insertion_point(oneof_field:NGLEMPDONFB.EBKEHINMGCO)
        EBKEHINMGCO(super::super::BAEJDHMJMKC::BAEJDHMJMKC),
        // @@protoc_insertion_point(oneof_field:NGLEMPDONFB.HOHGGPCGGHN)
        HOHGGPCGGHN(super::super::HNMNMFPPJFM::HNMNMFPPJFM),
    }

    impl ::protobuf::Oneof for LIOLAILLPBA {
    }

    impl ::protobuf::OneofFull for LIOLAILLPBA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::NGLEMPDONFB as ::protobuf::MessageFull>::descriptor().oneof_by_name("LIOLAILLPBA").unwrap()).clone()
        }
    }

    impl LIOLAILLPBA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<LIOLAILLPBA>("LIOLAILLPBA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11NGLEMPDONFB.proto\x1a\x11BAEJDHMJMKC.proto\x1a\x11BFDMEAFKMGJ.prot\
    o\x1a\x11EIBOMPMNAOL.proto\x1a\x11HMLIPDGBHIO.proto\x1a\x11HNMNMFPPJFM.p\
    roto\"\x92\x02\n\x0bNGLEMPDONFB\x12.\n\x0bDOBMNOEEFGN\x18\x07\x20\x01(\
    \x0b2\x0c.HMLIPDGBHIOR\x0bDOBMNOEEFGN\x12.\n\x0bDBLMBLPLAPI\x18\x0f\x20\
    \x01(\x0b2\x0c.BFDMEAFKMGJR\x0bDBLMBLPLAPI\x12.\n\x0bDNKPLIAACPN\x18\x0b\
    \x20\x01(\x0b2\x0c.EIBOMPMNAOLR\x0bDNKPLIAACPN\x121\n\x0bEBKEHINMGCO\x18\
    \xda\x0f\x20\x01(\x0b2\x0c.BAEJDHMJMKCH\0R\x0bEBKEHINMGCO\x121\n\x0bHOHG\
    GPCGGHN\x18\x97\x0f\x20\x01(\x0b2\x0c.HNMNMFPPJFMH\0R\x0bHOHGGPCGGHNB\r\
    \n\x0bLIOLAILLPBAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::BAEJDHMJMKC::file_descriptor().clone());
            deps.push(super::BFDMEAFKMGJ::file_descriptor().clone());
            deps.push(super::EIBOMPMNAOL::file_descriptor().clone());
            deps.push(super::HMLIPDGBHIO::file_descriptor().clone());
            deps.push(super::HNMNMFPPJFM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(NGLEMPDONFB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
