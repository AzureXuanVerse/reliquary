// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `IJKIMBLIPID.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:IJKIMBLIPID)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IJKIMBLIPID {
    // message oneof groups
    pub DKFKPIPNNLF: ::std::option::Option<ijkimblipid::DKFKPIPNNLF>,
    // special fields
    // @@protoc_insertion_point(special_field:IJKIMBLIPID.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IJKIMBLIPID {
    fn default() -> &'a IJKIMBLIPID {
        <IJKIMBLIPID as ::protobuf::Message>::default_instance()
    }
}

impl IJKIMBLIPID {
    pub fn new() -> IJKIMBLIPID {
        ::std::default::Default::default()
    }

    // .OKGIBEBKJLJ PBNAKGPGBIN = 7;

    pub fn PBNAKGPGBIN(&self) -> &super::OKGIBEBKJLJ::OKGIBEBKJLJ {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(ref v)) => v,
            _ => <super::OKGIBEBKJLJ::OKGIBEBKJLJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PBNAKGPGBIN(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_PBNAKGPGBIN(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PBNAKGPGBIN(&mut self, v: super::OKGIBEBKJLJ::OKGIBEBKJLJ) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PBNAKGPGBIN(&mut self) -> &mut super::OKGIBEBKJLJ::OKGIBEBKJLJ {
        if let ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(super::OKGIBEBKJLJ::OKGIBEBKJLJ::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PBNAKGPGBIN(&mut self) -> super::OKGIBEBKJLJ::OKGIBEBKJLJ {
        if self.has_PBNAKGPGBIN() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OKGIBEBKJLJ::OKGIBEBKJLJ::new()
        }
    }

    // .OFOAGEOMFCN ACFKGONEDKJ = 3;

    pub fn ACFKGONEDKJ(&self) -> &super::OFOAGEOMFCN::OFOAGEOMFCN {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(ref v)) => v,
            _ => <super::OFOAGEOMFCN::OFOAGEOMFCN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ACFKGONEDKJ(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_ACFKGONEDKJ(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ACFKGONEDKJ(&mut self, v: super::OFOAGEOMFCN::OFOAGEOMFCN) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ACFKGONEDKJ(&mut self) -> &mut super::OFOAGEOMFCN::OFOAGEOMFCN {
        if let ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(super::OFOAGEOMFCN::OFOAGEOMFCN::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ACFKGONEDKJ(&mut self) -> super::OFOAGEOMFCN::OFOAGEOMFCN {
        if self.has_ACFKGONEDKJ() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OFOAGEOMFCN::OFOAGEOMFCN::new()
        }
    }

    // .ODHKOKKCDME GFHGOBJMHLA = 6;

    pub fn GFHGOBJMHLA(&self) -> &super::ODHKOKKCDME::ODHKOKKCDME {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(ref v)) => v,
            _ => <super::ODHKOKKCDME::ODHKOKKCDME as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GFHGOBJMHLA(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_GFHGOBJMHLA(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GFHGOBJMHLA(&mut self, v: super::ODHKOKKCDME::ODHKOKKCDME) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GFHGOBJMHLA(&mut self) -> &mut super::ODHKOKKCDME::ODHKOKKCDME {
        if let ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(super::ODHKOKKCDME::ODHKOKKCDME::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GFHGOBJMHLA(&mut self) -> super::ODHKOKKCDME::ODHKOKKCDME {
        if self.has_GFHGOBJMHLA() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ODHKOKKCDME::ODHKOKKCDME::new()
        }
    }

    // .BLNHPKHDACH IPDAJEGEHKC = 2;

    pub fn IPDAJEGEHKC(&self) -> &super::BLNHPKHDACH::BLNHPKHDACH {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(ref v)) => v,
            _ => <super::BLNHPKHDACH::BLNHPKHDACH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IPDAJEGEHKC(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_IPDAJEGEHKC(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IPDAJEGEHKC(&mut self, v: super::BLNHPKHDACH::BLNHPKHDACH) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IPDAJEGEHKC(&mut self) -> &mut super::BLNHPKHDACH::BLNHPKHDACH {
        if let ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(super::BLNHPKHDACH::BLNHPKHDACH::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IPDAJEGEHKC(&mut self) -> super::BLNHPKHDACH::BLNHPKHDACH {
        if self.has_IPDAJEGEHKC() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BLNHPKHDACH::BLNHPKHDACH::new()
        }
    }

    // .PHFDOEOEGBL KMCDONBPDOB = 8;

    pub fn KMCDONBPDOB(&self) -> &super::PHFDOEOEGBL::PHFDOEOEGBL {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(ref v)) => v,
            _ => <super::PHFDOEOEGBL::PHFDOEOEGBL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KMCDONBPDOB(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_KMCDONBPDOB(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KMCDONBPDOB(&mut self, v: super::PHFDOEOEGBL::PHFDOEOEGBL) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KMCDONBPDOB(&mut self) -> &mut super::PHFDOEOEGBL::PHFDOEOEGBL {
        if let ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(super::PHFDOEOEGBL::PHFDOEOEGBL::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KMCDONBPDOB(&mut self) -> super::PHFDOEOEGBL::PHFDOEOEGBL {
        if self.has_KMCDONBPDOB() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PHFDOEOEGBL::PHFDOEOEGBL::new()
        }
    }

    // .AGIOJLEAMKK ECINHIFEEEE = 12;

    pub fn ECINHIFEEEE(&self) -> &super::AGIOJLEAMKK::AGIOJLEAMKK {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(ref v)) => v,
            _ => <super::AGIOJLEAMKK::AGIOJLEAMKK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ECINHIFEEEE(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_ECINHIFEEEE(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ECINHIFEEEE(&mut self, v: super::AGIOJLEAMKK::AGIOJLEAMKK) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ECINHIFEEEE(&mut self) -> &mut super::AGIOJLEAMKK::AGIOJLEAMKK {
        if let ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(super::AGIOJLEAMKK::AGIOJLEAMKK::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ECINHIFEEEE(&mut self) -> super::AGIOJLEAMKK::AGIOJLEAMKK {
        if self.has_ECINHIFEEEE() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AGIOJLEAMKK::AGIOJLEAMKK::new()
        }
    }

    // .ECFOMPDNODB CLOBNPJPGLB = 11;

    pub fn CLOBNPJPGLB(&self) -> &super::ECFOMPDNODB::ECFOMPDNODB {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(ref v)) => v,
            _ => <super::ECFOMPDNODB::ECFOMPDNODB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CLOBNPJPGLB(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_CLOBNPJPGLB(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CLOBNPJPGLB(&mut self, v: super::ECFOMPDNODB::ECFOMPDNODB) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CLOBNPJPGLB(&mut self) -> &mut super::ECFOMPDNODB::ECFOMPDNODB {
        if let ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(super::ECFOMPDNODB::ECFOMPDNODB::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CLOBNPJPGLB(&mut self) -> super::ECFOMPDNODB::ECFOMPDNODB {
        if self.has_CLOBNPJPGLB() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ECFOMPDNODB::ECFOMPDNODB::new()
        }
    }

    // .DKLPPHOPHFA EADMHPHKFMK = 14;

    pub fn EADMHPHKFMK(&self) -> &super::DKLPPHOPHFA::DKLPPHOPHFA {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(ref v)) => v,
            _ => <super::DKLPPHOPHFA::DKLPPHOPHFA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EADMHPHKFMK(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_EADMHPHKFMK(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EADMHPHKFMK(&mut self, v: super::DKLPPHOPHFA::DKLPPHOPHFA) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EADMHPHKFMK(&mut self) -> &mut super::DKLPPHOPHFA::DKLPPHOPHFA {
        if let ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(super::DKLPPHOPHFA::DKLPPHOPHFA::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EADMHPHKFMK(&mut self) -> super::DKLPPHOPHFA::DKLPPHOPHFA {
        if self.has_EADMHPHKFMK() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DKLPPHOPHFA::DKLPPHOPHFA::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OKGIBEBKJLJ::OKGIBEBKJLJ>(
            "PBNAKGPGBIN",
            IJKIMBLIPID::has_PBNAKGPGBIN,
            IJKIMBLIPID::PBNAKGPGBIN,
            IJKIMBLIPID::mut_PBNAKGPGBIN,
            IJKIMBLIPID::set_PBNAKGPGBIN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OFOAGEOMFCN::OFOAGEOMFCN>(
            "ACFKGONEDKJ",
            IJKIMBLIPID::has_ACFKGONEDKJ,
            IJKIMBLIPID::ACFKGONEDKJ,
            IJKIMBLIPID::mut_ACFKGONEDKJ,
            IJKIMBLIPID::set_ACFKGONEDKJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ODHKOKKCDME::ODHKOKKCDME>(
            "GFHGOBJMHLA",
            IJKIMBLIPID::has_GFHGOBJMHLA,
            IJKIMBLIPID::GFHGOBJMHLA,
            IJKIMBLIPID::mut_GFHGOBJMHLA,
            IJKIMBLIPID::set_GFHGOBJMHLA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BLNHPKHDACH::BLNHPKHDACH>(
            "IPDAJEGEHKC",
            IJKIMBLIPID::has_IPDAJEGEHKC,
            IJKIMBLIPID::IPDAJEGEHKC,
            IJKIMBLIPID::mut_IPDAJEGEHKC,
            IJKIMBLIPID::set_IPDAJEGEHKC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PHFDOEOEGBL::PHFDOEOEGBL>(
            "KMCDONBPDOB",
            IJKIMBLIPID::has_KMCDONBPDOB,
            IJKIMBLIPID::KMCDONBPDOB,
            IJKIMBLIPID::mut_KMCDONBPDOB,
            IJKIMBLIPID::set_KMCDONBPDOB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AGIOJLEAMKK::AGIOJLEAMKK>(
            "ECINHIFEEEE",
            IJKIMBLIPID::has_ECINHIFEEEE,
            IJKIMBLIPID::ECINHIFEEEE,
            IJKIMBLIPID::mut_ECINHIFEEEE,
            IJKIMBLIPID::set_ECINHIFEEEE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ECFOMPDNODB::ECFOMPDNODB>(
            "CLOBNPJPGLB",
            IJKIMBLIPID::has_CLOBNPJPGLB,
            IJKIMBLIPID::CLOBNPJPGLB,
            IJKIMBLIPID::mut_CLOBNPJPGLB,
            IJKIMBLIPID::set_CLOBNPJPGLB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DKLPPHOPHFA::DKLPPHOPHFA>(
            "EADMHPHKFMK",
            IJKIMBLIPID::has_EADMHPHKFMK,
            IJKIMBLIPID::EADMHPHKFMK,
            IJKIMBLIPID::mut_EADMHPHKFMK,
            IJKIMBLIPID::set_EADMHPHKFMK,
        ));
        oneofs.push(ijkimblipid::DKFKPIPNNLF::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IJKIMBLIPID>(
            "IJKIMBLIPID",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IJKIMBLIPID {
    const NAME: &'static str = "IJKIMBLIPID";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(is.read_message()?));
                },
                26 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(is.read_message()?));
                },
                50 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(is.read_message()?));
                },
                18 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(is.read_message()?));
                },
                66 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(is.read_message()?));
                },
                98 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(is.read_message()?));
                },
                90 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(is.read_message()?));
                },
                114 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.DKFKPIPNNLF {
            match v {
                &ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.DKFKPIPNNLF {
            match v {
                &ijkimblipid::DKFKPIPNNLF::PBNAKGPGBIN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &ijkimblipid::DKFKPIPNNLF::ACFKGONEDKJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &ijkimblipid::DKFKPIPNNLF::GFHGOBJMHLA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &ijkimblipid::DKFKPIPNNLF::IPDAJEGEHKC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &ijkimblipid::DKFKPIPNNLF::KMCDONBPDOB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &ijkimblipid::DKFKPIPNNLF::ECINHIFEEEE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &ijkimblipid::DKFKPIPNNLF::CLOBNPJPGLB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &ijkimblipid::DKFKPIPNNLF::EADMHPHKFMK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IJKIMBLIPID {
        IJKIMBLIPID::new()
    }

    fn clear(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IJKIMBLIPID {
        static instance: IJKIMBLIPID = IJKIMBLIPID {
            DKFKPIPNNLF: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IJKIMBLIPID {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IJKIMBLIPID").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IJKIMBLIPID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IJKIMBLIPID {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `IJKIMBLIPID`
pub mod ijkimblipid {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:IJKIMBLIPID.DKFKPIPNNLF)
    pub enum DKFKPIPNNLF {
        // @@protoc_insertion_point(oneof_field:IJKIMBLIPID.PBNAKGPGBIN)
        PBNAKGPGBIN(super::super::OKGIBEBKJLJ::OKGIBEBKJLJ),
        // @@protoc_insertion_point(oneof_field:IJKIMBLIPID.ACFKGONEDKJ)
        ACFKGONEDKJ(super::super::OFOAGEOMFCN::OFOAGEOMFCN),
        // @@protoc_insertion_point(oneof_field:IJKIMBLIPID.GFHGOBJMHLA)
        GFHGOBJMHLA(super::super::ODHKOKKCDME::ODHKOKKCDME),
        // @@protoc_insertion_point(oneof_field:IJKIMBLIPID.IPDAJEGEHKC)
        IPDAJEGEHKC(super::super::BLNHPKHDACH::BLNHPKHDACH),
        // @@protoc_insertion_point(oneof_field:IJKIMBLIPID.KMCDONBPDOB)
        KMCDONBPDOB(super::super::PHFDOEOEGBL::PHFDOEOEGBL),
        // @@protoc_insertion_point(oneof_field:IJKIMBLIPID.ECINHIFEEEE)
        ECINHIFEEEE(super::super::AGIOJLEAMKK::AGIOJLEAMKK),
        // @@protoc_insertion_point(oneof_field:IJKIMBLIPID.CLOBNPJPGLB)
        CLOBNPJPGLB(super::super::ECFOMPDNODB::ECFOMPDNODB),
        // @@protoc_insertion_point(oneof_field:IJKIMBLIPID.EADMHPHKFMK)
        EADMHPHKFMK(super::super::DKLPPHOPHFA::DKLPPHOPHFA),
    }

    impl ::protobuf::Oneof for DKFKPIPNNLF {
    }

    impl ::protobuf::OneofFull for DKFKPIPNNLF {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::IJKIMBLIPID as ::protobuf::MessageFull>::descriptor().oneof_by_name("DKFKPIPNNLF").unwrap()).clone()
        }
    }

    impl DKFKPIPNNLF {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DKFKPIPNNLF>("DKFKPIPNNLF")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11IJKIMBLIPID.proto\x1a\x11AGIOJLEAMKK.proto\x1a\x11BLNHPKHDACH.prot\
    o\x1a\x11DKLPPHOPHFA.proto\x1a\x11ECFOMPDNODB.proto\x1a\x11ODHKOKKCDME.p\
    roto\x1a\x11OFOAGEOMFCN.proto\x1a\x11OKGIBEBKJLJ.proto\x1a\x11PHFDOEOEGB\
    L.proto\"\xac\x03\n\x0bIJKIMBLIPID\x120\n\x0bPBNAKGPGBIN\x18\x07\x20\x01\
    (\x0b2\x0c.OKGIBEBKJLJH\0R\x0bPBNAKGPGBIN\x120\n\x0bACFKGONEDKJ\x18\x03\
    \x20\x01(\x0b2\x0c.OFOAGEOMFCNH\0R\x0bACFKGONEDKJ\x120\n\x0bGFHGOBJMHLA\
    \x18\x06\x20\x01(\x0b2\x0c.ODHKOKKCDMEH\0R\x0bGFHGOBJMHLA\x120\n\x0bIPDA\
    JEGEHKC\x18\x02\x20\x01(\x0b2\x0c.BLNHPKHDACHH\0R\x0bIPDAJEGEHKC\x120\n\
    \x0bKMCDONBPDOB\x18\x08\x20\x01(\x0b2\x0c.PHFDOEOEGBLH\0R\x0bKMCDONBPDOB\
    \x120\n\x0bECINHIFEEEE\x18\x0c\x20\x01(\x0b2\x0c.AGIOJLEAMKKH\0R\x0bECIN\
    HIFEEEE\x120\n\x0bCLOBNPJPGLB\x18\x0b\x20\x01(\x0b2\x0c.ECFOMPDNODBH\0R\
    \x0bCLOBNPJPGLB\x120\n\x0bEADMHPHKFMK\x18\x0e\x20\x01(\x0b2\x0c.DKLPPHOP\
    HFAH\0R\x0bEADMHPHKFMKB\r\n\x0bDKFKPIPNNLFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::AGIOJLEAMKK::file_descriptor().clone());
            deps.push(super::BLNHPKHDACH::file_descriptor().clone());
            deps.push(super::DKLPPHOPHFA::file_descriptor().clone());
            deps.push(super::ECFOMPDNODB::file_descriptor().clone());
            deps.push(super::ODHKOKKCDME::file_descriptor().clone());
            deps.push(super::OFOAGEOMFCN::file_descriptor().clone());
            deps.push(super::OKGIBEBKJLJ::file_descriptor().clone());
            deps.push(super::PHFDOEOEGBL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(IJKIMBLIPID::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
