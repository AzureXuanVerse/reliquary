// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdBoxingClubType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdBoxingClubType)
pub enum CmdBoxingClubType {
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdBoxingClubTypeNone)
    CmdBoxingClubTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdSetBoxingClubResonanceLineupScRsp)
    CmdSetBoxingClubResonanceLineupScRsp = 4225,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdBoxingClubRewardScNotify)
    CmdBoxingClubRewardScNotify = 4224,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdGiveUpBoxingClubChallengeCsReq)
    CmdGiveUpBoxingClubChallengeCsReq = 4252,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdMatchBoxingClubOpponentScRsp)
    CmdMatchBoxingClubOpponentScRsp = 4227,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdSetBoxingClubResonanceLineupCsReq)
    CmdSetBoxingClubResonanceLineupCsReq = 4246,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdChooseBoxingClubStageOptionalBuffScRsp)
    CmdChooseBoxingClubStageOptionalBuffScRsp = 4205,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdBoxingClubChallengeUpdateScNotify)
    CmdBoxingClubChallengeUpdateScNotify = 4293,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdChooseBoxingClubStageOptionalBuffCsReq)
    CmdChooseBoxingClubStageOptionalBuffCsReq = 4296,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdChooseBoxingClubResonanceCsReq)
    CmdChooseBoxingClubResonanceCsReq = 4234,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdMatchBoxingClubOpponentCsReq)
    CmdMatchBoxingClubOpponentCsReq = 4284,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdStartBoxingClubBattleScRsp)
    CmdStartBoxingClubBattleScRsp = 4228,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdGiveUpBoxingClubChallengeScRsp)
    CmdGiveUpBoxingClubChallengeScRsp = 4274,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdChooseBoxingClubResonanceScRsp)
    CmdChooseBoxingClubResonanceScRsp = 4243,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdGetBoxingClubInfoScRsp)
    CmdGetBoxingClubInfoScRsp = 4295,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdStartBoxingClubBattleCsReq)
    CmdStartBoxingClubBattleCsReq = 4267,
    // @@protoc_insertion_point(enum_value:CmdBoxingClubType.CmdGetBoxingClubInfoCsReq)
    CmdGetBoxingClubInfoCsReq = 4236,
}

impl ::protobuf::Enum for CmdBoxingClubType {
    const NAME: &'static str = "CmdBoxingClubType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdBoxingClubType> {
        match value {
            0 => ::std::option::Option::Some(CmdBoxingClubType::CmdBoxingClubTypeNone),
            4225 => ::std::option::Option::Some(CmdBoxingClubType::CmdSetBoxingClubResonanceLineupScRsp),
            4224 => ::std::option::Option::Some(CmdBoxingClubType::CmdBoxingClubRewardScNotify),
            4252 => ::std::option::Option::Some(CmdBoxingClubType::CmdGiveUpBoxingClubChallengeCsReq),
            4227 => ::std::option::Option::Some(CmdBoxingClubType::CmdMatchBoxingClubOpponentScRsp),
            4246 => ::std::option::Option::Some(CmdBoxingClubType::CmdSetBoxingClubResonanceLineupCsReq),
            4205 => ::std::option::Option::Some(CmdBoxingClubType::CmdChooseBoxingClubStageOptionalBuffScRsp),
            4293 => ::std::option::Option::Some(CmdBoxingClubType::CmdBoxingClubChallengeUpdateScNotify),
            4296 => ::std::option::Option::Some(CmdBoxingClubType::CmdChooseBoxingClubStageOptionalBuffCsReq),
            4234 => ::std::option::Option::Some(CmdBoxingClubType::CmdChooseBoxingClubResonanceCsReq),
            4284 => ::std::option::Option::Some(CmdBoxingClubType::CmdMatchBoxingClubOpponentCsReq),
            4228 => ::std::option::Option::Some(CmdBoxingClubType::CmdStartBoxingClubBattleScRsp),
            4274 => ::std::option::Option::Some(CmdBoxingClubType::CmdGiveUpBoxingClubChallengeScRsp),
            4243 => ::std::option::Option::Some(CmdBoxingClubType::CmdChooseBoxingClubResonanceScRsp),
            4295 => ::std::option::Option::Some(CmdBoxingClubType::CmdGetBoxingClubInfoScRsp),
            4267 => ::std::option::Option::Some(CmdBoxingClubType::CmdStartBoxingClubBattleCsReq),
            4236 => ::std::option::Option::Some(CmdBoxingClubType::CmdGetBoxingClubInfoCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdBoxingClubType> {
        match str {
            "CmdBoxingClubTypeNone" => ::std::option::Option::Some(CmdBoxingClubType::CmdBoxingClubTypeNone),
            "CmdSetBoxingClubResonanceLineupScRsp" => ::std::option::Option::Some(CmdBoxingClubType::CmdSetBoxingClubResonanceLineupScRsp),
            "CmdBoxingClubRewardScNotify" => ::std::option::Option::Some(CmdBoxingClubType::CmdBoxingClubRewardScNotify),
            "CmdGiveUpBoxingClubChallengeCsReq" => ::std::option::Option::Some(CmdBoxingClubType::CmdGiveUpBoxingClubChallengeCsReq),
            "CmdMatchBoxingClubOpponentScRsp" => ::std::option::Option::Some(CmdBoxingClubType::CmdMatchBoxingClubOpponentScRsp),
            "CmdSetBoxingClubResonanceLineupCsReq" => ::std::option::Option::Some(CmdBoxingClubType::CmdSetBoxingClubResonanceLineupCsReq),
            "CmdChooseBoxingClubStageOptionalBuffScRsp" => ::std::option::Option::Some(CmdBoxingClubType::CmdChooseBoxingClubStageOptionalBuffScRsp),
            "CmdBoxingClubChallengeUpdateScNotify" => ::std::option::Option::Some(CmdBoxingClubType::CmdBoxingClubChallengeUpdateScNotify),
            "CmdChooseBoxingClubStageOptionalBuffCsReq" => ::std::option::Option::Some(CmdBoxingClubType::CmdChooseBoxingClubStageOptionalBuffCsReq),
            "CmdChooseBoxingClubResonanceCsReq" => ::std::option::Option::Some(CmdBoxingClubType::CmdChooseBoxingClubResonanceCsReq),
            "CmdMatchBoxingClubOpponentCsReq" => ::std::option::Option::Some(CmdBoxingClubType::CmdMatchBoxingClubOpponentCsReq),
            "CmdStartBoxingClubBattleScRsp" => ::std::option::Option::Some(CmdBoxingClubType::CmdStartBoxingClubBattleScRsp),
            "CmdGiveUpBoxingClubChallengeScRsp" => ::std::option::Option::Some(CmdBoxingClubType::CmdGiveUpBoxingClubChallengeScRsp),
            "CmdChooseBoxingClubResonanceScRsp" => ::std::option::Option::Some(CmdBoxingClubType::CmdChooseBoxingClubResonanceScRsp),
            "CmdGetBoxingClubInfoScRsp" => ::std::option::Option::Some(CmdBoxingClubType::CmdGetBoxingClubInfoScRsp),
            "CmdStartBoxingClubBattleCsReq" => ::std::option::Option::Some(CmdBoxingClubType::CmdStartBoxingClubBattleCsReq),
            "CmdGetBoxingClubInfoCsReq" => ::std::option::Option::Some(CmdBoxingClubType::CmdGetBoxingClubInfoCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdBoxingClubType] = &[
        CmdBoxingClubType::CmdBoxingClubTypeNone,
        CmdBoxingClubType::CmdSetBoxingClubResonanceLineupScRsp,
        CmdBoxingClubType::CmdBoxingClubRewardScNotify,
        CmdBoxingClubType::CmdGiveUpBoxingClubChallengeCsReq,
        CmdBoxingClubType::CmdMatchBoxingClubOpponentScRsp,
        CmdBoxingClubType::CmdSetBoxingClubResonanceLineupCsReq,
        CmdBoxingClubType::CmdChooseBoxingClubStageOptionalBuffScRsp,
        CmdBoxingClubType::CmdBoxingClubChallengeUpdateScNotify,
        CmdBoxingClubType::CmdChooseBoxingClubStageOptionalBuffCsReq,
        CmdBoxingClubType::CmdChooseBoxingClubResonanceCsReq,
        CmdBoxingClubType::CmdMatchBoxingClubOpponentCsReq,
        CmdBoxingClubType::CmdStartBoxingClubBattleScRsp,
        CmdBoxingClubType::CmdGiveUpBoxingClubChallengeScRsp,
        CmdBoxingClubType::CmdChooseBoxingClubResonanceScRsp,
        CmdBoxingClubType::CmdGetBoxingClubInfoScRsp,
        CmdBoxingClubType::CmdStartBoxingClubBattleCsReq,
        CmdBoxingClubType::CmdGetBoxingClubInfoCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdBoxingClubType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdBoxingClubType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdBoxingClubType::CmdBoxingClubTypeNone => 0,
            CmdBoxingClubType::CmdSetBoxingClubResonanceLineupScRsp => 1,
            CmdBoxingClubType::CmdBoxingClubRewardScNotify => 2,
            CmdBoxingClubType::CmdGiveUpBoxingClubChallengeCsReq => 3,
            CmdBoxingClubType::CmdMatchBoxingClubOpponentScRsp => 4,
            CmdBoxingClubType::CmdSetBoxingClubResonanceLineupCsReq => 5,
            CmdBoxingClubType::CmdChooseBoxingClubStageOptionalBuffScRsp => 6,
            CmdBoxingClubType::CmdBoxingClubChallengeUpdateScNotify => 7,
            CmdBoxingClubType::CmdChooseBoxingClubStageOptionalBuffCsReq => 8,
            CmdBoxingClubType::CmdChooseBoxingClubResonanceCsReq => 9,
            CmdBoxingClubType::CmdMatchBoxingClubOpponentCsReq => 10,
            CmdBoxingClubType::CmdStartBoxingClubBattleScRsp => 11,
            CmdBoxingClubType::CmdGiveUpBoxingClubChallengeScRsp => 12,
            CmdBoxingClubType::CmdChooseBoxingClubResonanceScRsp => 13,
            CmdBoxingClubType::CmdGetBoxingClubInfoScRsp => 14,
            CmdBoxingClubType::CmdStartBoxingClubBattleCsReq => 15,
            CmdBoxingClubType::CmdGetBoxingClubInfoCsReq => 16,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdBoxingClubType {
    fn default() -> Self {
        CmdBoxingClubType::CmdBoxingClubTypeNone
    }
}

impl CmdBoxingClubType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdBoxingClubType>("CmdBoxingClubType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17CmdBoxingClubType.proto*\xa5\x05\n\x11CmdBoxingClubType\x12\x19\n\
    \x15CmdBoxingClubTypeNone\x10\0\x12)\n$CmdSetBoxingClubResonanceLineupSc\
    Rsp\x10\x81!\x12\x20\n\x1bCmdBoxingClubRewardScNotify\x10\x80!\x12&\n!Cm\
    dGiveUpBoxingClubChallengeCsReq\x10\x9c!\x12$\n\x1fCmdMatchBoxingClubOpp\
    onentScRsp\x10\x83!\x12)\n$CmdSetBoxingClubResonanceLineupCsReq\x10\x96!\
    \x12.\n)CmdChooseBoxingClubStageOptionalBuffScRsp\x10\xed\x20\x12)\n$Cmd\
    BoxingClubChallengeUpdateScNotify\x10\xc5!\x12.\n)CmdChooseBoxingClubSta\
    geOptionalBuffCsReq\x10\xc8!\x12&\n!CmdChooseBoxingClubResonanceCsReq\
    \x10\x8a!\x12$\n\x1fCmdMatchBoxingClubOpponentCsReq\x10\xbc!\x12\"\n\x1d\
    CmdStartBoxingClubBattleScRsp\x10\x84!\x12&\n!CmdGiveUpBoxingClubChallen\
    geScRsp\x10\xb2!\x12&\n!CmdChooseBoxingClubResonanceScRsp\x10\x93!\x12\
    \x1e\n\x19CmdGetBoxingClubInfoScRsp\x10\xc7!\x12\"\n\x1dCmdStartBoxingCl\
    ubBattleCsReq\x10\xab!\x12\x1e\n\x19CmdGetBoxingClubInfoCsReq\x10\x8c!b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdBoxingClubType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
