// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FFKJEABAMKI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FFKJEABAMKI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FFKJEABAMKI {
    // message fields
    // @@protoc_insertion_point(field:FFKJEABAMKI.NIBGHGMEGMG)
    pub NIBGHGMEGMG: ::protobuf::EnumOrUnknown<super::HNHGKGHJLGP::HNHGKGHJLGP>,
    // message oneof groups
    pub OAHCMPDEGGK: ::std::option::Option<ffkjeabamki::OAHCMPDEGGK>,
    // special fields
    // @@protoc_insertion_point(special_field:FFKJEABAMKI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FFKJEABAMKI {
    fn default() -> &'a FFKJEABAMKI {
        <FFKJEABAMKI as ::protobuf::Message>::default_instance()
    }
}

impl FFKJEABAMKI {
    pub fn new() -> FFKJEABAMKI {
        ::std::default::Default::default()
    }

    // .AEODHKIMPAF FOAFPCNJNAM = 1945;

    pub fn FOAFPCNJNAM(&self) -> &super::AEODHKIMPAF::AEODHKIMPAF {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(ref v)) => v,
            _ => <super::AEODHKIMPAF::AEODHKIMPAF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FOAFPCNJNAM(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_FOAFPCNJNAM(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FOAFPCNJNAM(&mut self, v: super::AEODHKIMPAF::AEODHKIMPAF) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FOAFPCNJNAM(&mut self) -> &mut super::AEODHKIMPAF::AEODHKIMPAF {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(super::AEODHKIMPAF::AEODHKIMPAF::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FOAFPCNJNAM(&mut self) -> super::AEODHKIMPAF::AEODHKIMPAF {
        if self.has_FOAFPCNJNAM() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AEODHKIMPAF::AEODHKIMPAF::new()
        }
    }

    // .BFFIEMJEDIL IHKAOGHIMDN = 1705;

    pub fn IHKAOGHIMDN(&self) -> &super::BFFIEMJEDIL::BFFIEMJEDIL {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(ref v)) => v,
            _ => <super::BFFIEMJEDIL::BFFIEMJEDIL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IHKAOGHIMDN(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_IHKAOGHIMDN(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IHKAOGHIMDN(&mut self, v: super::BFFIEMJEDIL::BFFIEMJEDIL) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IHKAOGHIMDN(&mut self) -> &mut super::BFFIEMJEDIL::BFFIEMJEDIL {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(super::BFFIEMJEDIL::BFFIEMJEDIL::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IHKAOGHIMDN(&mut self) -> super::BFFIEMJEDIL::BFFIEMJEDIL {
        if self.has_IHKAOGHIMDN() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BFFIEMJEDIL::BFFIEMJEDIL::new()
        }
    }

    // .MINMHDAEEHH GJKIGLGOOAF = 1085;

    pub fn GJKIGLGOOAF(&self) -> &super::MINMHDAEEHH::MINMHDAEEHH {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(ref v)) => v,
            _ => <super::MINMHDAEEHH::MINMHDAEEHH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GJKIGLGOOAF(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_GJKIGLGOOAF(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GJKIGLGOOAF(&mut self, v: super::MINMHDAEEHH::MINMHDAEEHH) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GJKIGLGOOAF(&mut self) -> &mut super::MINMHDAEEHH::MINMHDAEEHH {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(super::MINMHDAEEHH::MINMHDAEEHH::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GJKIGLGOOAF(&mut self) -> super::MINMHDAEEHH::MINMHDAEEHH {
        if self.has_GJKIGLGOOAF() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MINMHDAEEHH::MINMHDAEEHH::new()
        }
    }

    // .LFHKDENCECI EEAFEPKNKMI = 661;

    pub fn EEAFEPKNKMI(&self) -> &super::LFHKDENCECI::LFHKDENCECI {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(ref v)) => v,
            _ => <super::LFHKDENCECI::LFHKDENCECI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EEAFEPKNKMI(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_EEAFEPKNKMI(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EEAFEPKNKMI(&mut self, v: super::LFHKDENCECI::LFHKDENCECI) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EEAFEPKNKMI(&mut self) -> &mut super::LFHKDENCECI::LFHKDENCECI {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(super::LFHKDENCECI::LFHKDENCECI::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EEAFEPKNKMI(&mut self) -> super::LFHKDENCECI::LFHKDENCECI {
        if self.has_EEAFEPKNKMI() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LFHKDENCECI::LFHKDENCECI::new()
        }
    }

    // .EKLMKFCKLAA LKCLGKLDNHE = 1547;

    pub fn LKCLGKLDNHE(&self) -> &super::EKLMKFCKLAA::EKLMKFCKLAA {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(ref v)) => v,
            _ => <super::EKLMKFCKLAA::EKLMKFCKLAA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LKCLGKLDNHE(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_LKCLGKLDNHE(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LKCLGKLDNHE(&mut self, v: super::EKLMKFCKLAA::EKLMKFCKLAA) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LKCLGKLDNHE(&mut self) -> &mut super::EKLMKFCKLAA::EKLMKFCKLAA {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(super::EKLMKFCKLAA::EKLMKFCKLAA::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LKCLGKLDNHE(&mut self) -> super::EKLMKFCKLAA::EKLMKFCKLAA {
        if self.has_LKCLGKLDNHE() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EKLMKFCKLAA::EKLMKFCKLAA::new()
        }
    }

    // .LOCAOOGDAMB IDMPFCHCPHO = 840;

    pub fn IDMPFCHCPHO(&self) -> &super::LOCAOOGDAMB::LOCAOOGDAMB {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(ref v)) => v,
            _ => <super::LOCAOOGDAMB::LOCAOOGDAMB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IDMPFCHCPHO(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_IDMPFCHCPHO(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IDMPFCHCPHO(&mut self, v: super::LOCAOOGDAMB::LOCAOOGDAMB) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IDMPFCHCPHO(&mut self) -> &mut super::LOCAOOGDAMB::LOCAOOGDAMB {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(super::LOCAOOGDAMB::LOCAOOGDAMB::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IDMPFCHCPHO(&mut self) -> super::LOCAOOGDAMB::LOCAOOGDAMB {
        if self.has_IDMPFCHCPHO() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LOCAOOGDAMB::LOCAOOGDAMB::new()
        }
    }

    // .NHNNJJPBOMJ CKECMALEPAA = 1390;

    pub fn CKECMALEPAA(&self) -> &super::NHNNJJPBOMJ::NHNNJJPBOMJ {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(ref v)) => v,
            _ => <super::NHNNJJPBOMJ::NHNNJJPBOMJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CKECMALEPAA(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_CKECMALEPAA(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CKECMALEPAA(&mut self, v: super::NHNNJJPBOMJ::NHNNJJPBOMJ) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CKECMALEPAA(&mut self) -> &mut super::NHNNJJPBOMJ::NHNNJJPBOMJ {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(super::NHNNJJPBOMJ::NHNNJJPBOMJ::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CKECMALEPAA(&mut self) -> super::NHNNJJPBOMJ::NHNNJJPBOMJ {
        if self.has_CKECMALEPAA() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NHNNJJPBOMJ::NHNNJJPBOMJ::new()
        }
    }

    // .JCDCKOAPGEE NCLOBABIAHI = 79;

    pub fn NCLOBABIAHI(&self) -> &super::JCDCKOAPGEE::JCDCKOAPGEE {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(ref v)) => v,
            _ => <super::JCDCKOAPGEE::JCDCKOAPGEE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NCLOBABIAHI(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_NCLOBABIAHI(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NCLOBABIAHI(&mut self, v: super::JCDCKOAPGEE::JCDCKOAPGEE) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NCLOBABIAHI(&mut self) -> &mut super::JCDCKOAPGEE::JCDCKOAPGEE {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(super::JCDCKOAPGEE::JCDCKOAPGEE::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NCLOBABIAHI(&mut self) -> super::JCDCKOAPGEE::JCDCKOAPGEE {
        if self.has_NCLOBABIAHI() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JCDCKOAPGEE::JCDCKOAPGEE::new()
        }
    }

    // .KNINCLCJODM APGDKAPIMGF = 780;

    pub fn APGDKAPIMGF(&self) -> &super::KNINCLCJODM::KNINCLCJODM {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(ref v)) => v,
            _ => <super::KNINCLCJODM::KNINCLCJODM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_APGDKAPIMGF(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_APGDKAPIMGF(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_APGDKAPIMGF(&mut self, v: super::KNINCLCJODM::KNINCLCJODM) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_APGDKAPIMGF(&mut self) -> &mut super::KNINCLCJODM::KNINCLCJODM {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(super::KNINCLCJODM::KNINCLCJODM::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_APGDKAPIMGF(&mut self) -> super::KNINCLCJODM::KNINCLCJODM {
        if self.has_APGDKAPIMGF() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KNINCLCJODM::KNINCLCJODM::new()
        }
    }

    // .IOBPKBJAMEF PDBDAJPADCO = 969;

    pub fn PDBDAJPADCO(&self) -> &super::IOBPKBJAMEF::IOBPKBJAMEF {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(ref v)) => v,
            _ => <super::IOBPKBJAMEF::IOBPKBJAMEF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PDBDAJPADCO(&mut self) {
        self.OAHCMPDEGGK = ::std::option::Option::None;
    }

    pub fn has_PDBDAJPADCO(&self) -> bool {
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PDBDAJPADCO(&mut self, v: super::IOBPKBJAMEF::IOBPKBJAMEF) {
        self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PDBDAJPADCO(&mut self) -> &mut super::IOBPKBJAMEF::IOBPKBJAMEF {
        if let ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(_)) = self.OAHCMPDEGGK {
        } else {
            self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(super::IOBPKBJAMEF::IOBPKBJAMEF::new()));
        }
        match self.OAHCMPDEGGK {
            ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PDBDAJPADCO(&mut self) -> super::IOBPKBJAMEF::IOBPKBJAMEF {
        if self.has_PDBDAJPADCO() {
            match self.OAHCMPDEGGK.take() {
                ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IOBPKBJAMEF::IOBPKBJAMEF::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NIBGHGMEGMG",
            |m: &FFKJEABAMKI| { &m.NIBGHGMEGMG },
            |m: &mut FFKJEABAMKI| { &mut m.NIBGHGMEGMG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AEODHKIMPAF::AEODHKIMPAF>(
            "FOAFPCNJNAM",
            FFKJEABAMKI::has_FOAFPCNJNAM,
            FFKJEABAMKI::FOAFPCNJNAM,
            FFKJEABAMKI::mut_FOAFPCNJNAM,
            FFKJEABAMKI::set_FOAFPCNJNAM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BFFIEMJEDIL::BFFIEMJEDIL>(
            "IHKAOGHIMDN",
            FFKJEABAMKI::has_IHKAOGHIMDN,
            FFKJEABAMKI::IHKAOGHIMDN,
            FFKJEABAMKI::mut_IHKAOGHIMDN,
            FFKJEABAMKI::set_IHKAOGHIMDN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MINMHDAEEHH::MINMHDAEEHH>(
            "GJKIGLGOOAF",
            FFKJEABAMKI::has_GJKIGLGOOAF,
            FFKJEABAMKI::GJKIGLGOOAF,
            FFKJEABAMKI::mut_GJKIGLGOOAF,
            FFKJEABAMKI::set_GJKIGLGOOAF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LFHKDENCECI::LFHKDENCECI>(
            "EEAFEPKNKMI",
            FFKJEABAMKI::has_EEAFEPKNKMI,
            FFKJEABAMKI::EEAFEPKNKMI,
            FFKJEABAMKI::mut_EEAFEPKNKMI,
            FFKJEABAMKI::set_EEAFEPKNKMI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EKLMKFCKLAA::EKLMKFCKLAA>(
            "LKCLGKLDNHE",
            FFKJEABAMKI::has_LKCLGKLDNHE,
            FFKJEABAMKI::LKCLGKLDNHE,
            FFKJEABAMKI::mut_LKCLGKLDNHE,
            FFKJEABAMKI::set_LKCLGKLDNHE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LOCAOOGDAMB::LOCAOOGDAMB>(
            "IDMPFCHCPHO",
            FFKJEABAMKI::has_IDMPFCHCPHO,
            FFKJEABAMKI::IDMPFCHCPHO,
            FFKJEABAMKI::mut_IDMPFCHCPHO,
            FFKJEABAMKI::set_IDMPFCHCPHO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NHNNJJPBOMJ::NHNNJJPBOMJ>(
            "CKECMALEPAA",
            FFKJEABAMKI::has_CKECMALEPAA,
            FFKJEABAMKI::CKECMALEPAA,
            FFKJEABAMKI::mut_CKECMALEPAA,
            FFKJEABAMKI::set_CKECMALEPAA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JCDCKOAPGEE::JCDCKOAPGEE>(
            "NCLOBABIAHI",
            FFKJEABAMKI::has_NCLOBABIAHI,
            FFKJEABAMKI::NCLOBABIAHI,
            FFKJEABAMKI::mut_NCLOBABIAHI,
            FFKJEABAMKI::set_NCLOBABIAHI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KNINCLCJODM::KNINCLCJODM>(
            "APGDKAPIMGF",
            FFKJEABAMKI::has_APGDKAPIMGF,
            FFKJEABAMKI::APGDKAPIMGF,
            FFKJEABAMKI::mut_APGDKAPIMGF,
            FFKJEABAMKI::set_APGDKAPIMGF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IOBPKBJAMEF::IOBPKBJAMEF>(
            "PDBDAJPADCO",
            FFKJEABAMKI::has_PDBDAJPADCO,
            FFKJEABAMKI::PDBDAJPADCO,
            FFKJEABAMKI::mut_PDBDAJPADCO,
            FFKJEABAMKI::set_PDBDAJPADCO,
        ));
        oneofs.push(ffkjeabamki::OAHCMPDEGGK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FFKJEABAMKI>(
            "FFKJEABAMKI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FFKJEABAMKI {
    const NAME: &'static str = "FFKJEABAMKI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.NIBGHGMEGMG = is.read_enum_or_unknown()?;
                },
                15562 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(is.read_message()?));
                },
                13642 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(is.read_message()?));
                },
                8682 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(is.read_message()?));
                },
                5290 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(is.read_message()?));
                },
                12378 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(is.read_message()?));
                },
                6722 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(is.read_message()?));
                },
                11122 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(is.read_message()?));
                },
                634 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(is.read_message()?));
                },
                6242 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(is.read_message()?));
                },
                7754 => {
                    self.OAHCMPDEGGK = ::std::option::Option::Some(ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.NIBGHGMEGMG != ::protobuf::EnumOrUnknown::new(super::HNHGKGHJLGP::HNHGKGHJLGP::kTrainPartySrcNone) {
            my_size += ::protobuf::rt::int32_size(13, self.NIBGHGMEGMG.value());
        }
        if let ::std::option::Option::Some(ref v) = self.OAHCMPDEGGK {
            match v {
                &ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.NIBGHGMEGMG != ::protobuf::EnumOrUnknown::new(super::HNHGKGHJLGP::HNHGKGHJLGP::kTrainPartySrcNone) {
            os.write_enum(13, ::protobuf::EnumOrUnknown::value(&self.NIBGHGMEGMG))?;
        }
        if let ::std::option::Option::Some(ref v) = self.OAHCMPDEGGK {
            match v {
                &ffkjeabamki::OAHCMPDEGGK::FOAFPCNJNAM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1945, v, os)?;
                },
                &ffkjeabamki::OAHCMPDEGGK::IHKAOGHIMDN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1705, v, os)?;
                },
                &ffkjeabamki::OAHCMPDEGGK::GJKIGLGOOAF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1085, v, os)?;
                },
                &ffkjeabamki::OAHCMPDEGGK::EEAFEPKNKMI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(661, v, os)?;
                },
                &ffkjeabamki::OAHCMPDEGGK::LKCLGKLDNHE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1547, v, os)?;
                },
                &ffkjeabamki::OAHCMPDEGGK::IDMPFCHCPHO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(840, v, os)?;
                },
                &ffkjeabamki::OAHCMPDEGGK::CKECMALEPAA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1390, v, os)?;
                },
                &ffkjeabamki::OAHCMPDEGGK::NCLOBABIAHI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(79, v, os)?;
                },
                &ffkjeabamki::OAHCMPDEGGK::APGDKAPIMGF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(780, v, os)?;
                },
                &ffkjeabamki::OAHCMPDEGGK::PDBDAJPADCO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(969, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FFKJEABAMKI {
        FFKJEABAMKI::new()
    }

    fn clear(&mut self) {
        self.NIBGHGMEGMG = ::protobuf::EnumOrUnknown::new(super::HNHGKGHJLGP::HNHGKGHJLGP::kTrainPartySrcNone);
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.OAHCMPDEGGK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FFKJEABAMKI {
        static instance: FFKJEABAMKI = FFKJEABAMKI {
            NIBGHGMEGMG: ::protobuf::EnumOrUnknown::from_i32(0),
            OAHCMPDEGGK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FFKJEABAMKI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FFKJEABAMKI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FFKJEABAMKI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FFKJEABAMKI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FFKJEABAMKI`
pub mod ffkjeabamki {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:FFKJEABAMKI.OAHCMPDEGGK)
    pub enum OAHCMPDEGGK {
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.FOAFPCNJNAM)
        FOAFPCNJNAM(super::super::AEODHKIMPAF::AEODHKIMPAF),
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.IHKAOGHIMDN)
        IHKAOGHIMDN(super::super::BFFIEMJEDIL::BFFIEMJEDIL),
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.GJKIGLGOOAF)
        GJKIGLGOOAF(super::super::MINMHDAEEHH::MINMHDAEEHH),
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.EEAFEPKNKMI)
        EEAFEPKNKMI(super::super::LFHKDENCECI::LFHKDENCECI),
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.LKCLGKLDNHE)
        LKCLGKLDNHE(super::super::EKLMKFCKLAA::EKLMKFCKLAA),
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.IDMPFCHCPHO)
        IDMPFCHCPHO(super::super::LOCAOOGDAMB::LOCAOOGDAMB),
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.CKECMALEPAA)
        CKECMALEPAA(super::super::NHNNJJPBOMJ::NHNNJJPBOMJ),
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.NCLOBABIAHI)
        NCLOBABIAHI(super::super::JCDCKOAPGEE::JCDCKOAPGEE),
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.APGDKAPIMGF)
        APGDKAPIMGF(super::super::KNINCLCJODM::KNINCLCJODM),
        // @@protoc_insertion_point(oneof_field:FFKJEABAMKI.PDBDAJPADCO)
        PDBDAJPADCO(super::super::IOBPKBJAMEF::IOBPKBJAMEF),
    }

    impl ::protobuf::Oneof for OAHCMPDEGGK {
    }

    impl ::protobuf::OneofFull for OAHCMPDEGGK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FFKJEABAMKI as ::protobuf::MessageFull>::descriptor().oneof_by_name("OAHCMPDEGGK").unwrap()).clone()
        }
    }

    impl OAHCMPDEGGK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<OAHCMPDEGGK>("OAHCMPDEGGK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FFKJEABAMKI.proto\x1a\x11AEODHKIMPAF.proto\x1a\x11BFFIEMJEDIL.prot\
    o\x1a\x11EKLMKFCKLAA.proto\x1a\x11HNHGKGHJLGP.proto\x1a\x11IOBPKBJAMEF.p\
    roto\x1a\x11JCDCKOAPGEE.proto\x1a\x11KNINCLCJODM.proto\x1a\x11LFHKDENCEC\
    I.proto\x1a\x11LOCAOOGDAMB.proto\x1a\x11MINMHDAEEHH.proto\x1a\x11NHNNJJP\
    BOMJ.proto\"\xc9\x04\n\x0bFFKJEABAMKI\x12.\n\x0bNIBGHGMEGMG\x18\r\x20\
    \x01(\x0e2\x0c.HNHGKGHJLGPR\x0bNIBGHGMEGMG\x121\n\x0bFOAFPCNJNAM\x18\x99\
    \x0f\x20\x01(\x0b2\x0c.AEODHKIMPAFH\0R\x0bFOAFPCNJNAM\x121\n\x0bIHKAOGHI\
    MDN\x18\xa9\r\x20\x01(\x0b2\x0c.BFFIEMJEDILH\0R\x0bIHKAOGHIMDN\x121\n\
    \x0bGJKIGLGOOAF\x18\xbd\x08\x20\x01(\x0b2\x0c.MINMHDAEEHHH\0R\x0bGJKIGLG\
    OOAF\x121\n\x0bEEAFEPKNKMI\x18\x95\x05\x20\x01(\x0b2\x0c.LFHKDENCECIH\0R\
    \x0bEEAFEPKNKMI\x121\n\x0bLKCLGKLDNHE\x18\x8b\x0c\x20\x01(\x0b2\x0c.EKLM\
    KFCKLAAH\0R\x0bLKCLGKLDNHE\x121\n\x0bIDMPFCHCPHO\x18\xc8\x06\x20\x01(\
    \x0b2\x0c.LOCAOOGDAMBH\0R\x0bIDMPFCHCPHO\x121\n\x0bCKECMALEPAA\x18\xee\n\
    \x20\x01(\x0b2\x0c.NHNNJJPBOMJH\0R\x0bCKECMALEPAA\x120\n\x0bNCLOBABIAHI\
    \x18O\x20\x01(\x0b2\x0c.JCDCKOAPGEEH\0R\x0bNCLOBABIAHI\x121\n\x0bAPGDKAP\
    IMGF\x18\x8c\x06\x20\x01(\x0b2\x0c.KNINCLCJODMH\0R\x0bAPGDKAPIMGF\x121\n\
    \x0bPDBDAJPADCO\x18\xc9\x07\x20\x01(\x0b2\x0c.IOBPKBJAMEFH\0R\x0bPDBDAJP\
    ADCOB\r\n\x0bOAHCMPDEGGKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(11);
            deps.push(super::AEODHKIMPAF::file_descriptor().clone());
            deps.push(super::BFFIEMJEDIL::file_descriptor().clone());
            deps.push(super::EKLMKFCKLAA::file_descriptor().clone());
            deps.push(super::HNHGKGHJLGP::file_descriptor().clone());
            deps.push(super::IOBPKBJAMEF::file_descriptor().clone());
            deps.push(super::JCDCKOAPGEE::file_descriptor().clone());
            deps.push(super::KNINCLCJODM::file_descriptor().clone());
            deps.push(super::LFHKDENCECI::file_descriptor().clone());
            deps.push(super::LOCAOOGDAMB::file_descriptor().clone());
            deps.push(super::MINMHDAEEHH::file_descriptor().clone());
            deps.push(super::NHNNJJPBOMJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FFKJEABAMKI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
