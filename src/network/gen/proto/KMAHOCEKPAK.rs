// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `KMAHOCEKPAK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:KMAHOCEKPAK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KMAHOCEKPAK {
    // message fields
    // @@protoc_insertion_point(field:KMAHOCEKPAK.EGDCHJHBOOK)
    pub EGDCHJHBOOK: u32,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.BBMFFDEAMGA)
    pub BBMFFDEAMGA: u32,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.IFJNGOLCGPI)
    pub IFJNGOLCGPI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.NCOFBHLDOGE)
    pub NCOFBHLDOGE: u32,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.JDPJFHDFGJD)
    pub JDPJFHDFGJD: f64,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.PCCPLLHICJM)
    pub PCCPLLHICJM: f64,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.FFFEDABNMMP)
    pub FFFEDABNMMP: ::std::vec::Vec<super::BIBKLIBHNOA::BIBKLIBHNOA>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.EAPAAMOIOBC)
    pub EAPAAMOIOBC: ::std::vec::Vec<super::LJMAKLAPMNM::LJMAKLAPMNM>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.EGDADLJAPHF)
    pub EGDADLJAPHF: u32,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.OLBOBJLJOPP)
    pub OLBOBJLJOPP: u32,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.AJHIOMAHODB)
    pub AJHIOMAHODB: u32,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.ELODBOHCDPC)
    pub ELODBOHCDPC: u32,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.KJEOPDDDFPK)
    pub KJEOPDDDFPK: ::std::collections::HashMap<::std::string::String, f32>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.BATTLE_TARGET_TYPE_CHALLENGE_SCORE)
    pub BATTLE_TARGET_TYPE_CHALLENGE_SCORE: u32,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.FOCOBLGNPMG)
    pub FOCOBLGNPMG: ::std::vec::Vec<super::PJDIBBHNNIO::PJDIBBHNNIO>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.BOEKPDLNCID)
    pub BOEKPDLNCID: ::protobuf::EnumOrUnknown<super::GGHKLGKHKIO::GGHKLGKHKIO>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.DNOIPPCLEDE)
    pub DNOIPPCLEDE: ::std::vec::Vec<super::HOMHNAPNMOJ::HOMHNAPNMOJ>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.HMPLDBHPDLL)
    pub HMPLDBHPDLL: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.DPCKIEJEMNK)
    pub DPCKIEJEMNK: ::std::vec::Vec<super::OPFMJDAHFNH::OPFMJDAHFNH>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.EEPGAJEKAPC)
    pub EEPGAJEKAPC: ::std::vec::Vec<super::PJJHDBEBACA::PJJHDBEBACA>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.HHHEIHBDHNJ)
    pub HHHEIHBDHNJ: ::std::vec::Vec<super::LMAABNNONAB::LMAABNNONAB>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.PGKJOGNBOPO)
    pub PGKJOGNBOPO: ::std::collections::HashMap<u32, super::JGOIHDOBEEK::JGOIHDOBEEK>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.BNKNCBKGKAG)
    pub BNKNCBKGKAG: ::std::vec::Vec<super::LHCDPDEBAGB::LHCDPDEBAGB>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.KAHOEKAEFHD)
    pub KAHOEKAEFHD: ::protobuf::MessageField<super::EvolveBuild::EvolveBuildBattleInfo>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.HHPLDBGIHKH)
    pub HHPLDBGIHKH: ::protobuf::MessageField<super::CDMOBGLKKEC::CDMOBGLKKEC>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.KIDHPNPJHJO)
    pub KIDHPNPJHJO: bool,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.NHEAAFNOMIA)
    pub NHEAAFNOMIA: ::std::vec::Vec<super::JIIEMIPIOHI::JIIEMIPIOHI>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.HCNNDINHMIH)
    pub HCNNDINHMIH: ::std::vec::Vec<super::CMKJGNPDMDF::CMKJGNPDMDF>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.KMCHDAPGOIC)
    pub KMCHDAPGOIC: u32,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.LNIFFKGIONN)
    pub LNIFFKGIONN: ::protobuf::MessageField<super::DAJHFPCHDMM::DAJHFPCHDMM>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.GBBNDMPHECA)
    pub GBBNDMPHECA: ::protobuf::MessageField<super::NJBIOGNJJMD::NJBIOGNJJMD>,
    // @@protoc_insertion_point(field:KMAHOCEKPAK.PHEDLBGBNHN)
    pub PHEDLBGBNHN: ::protobuf::MessageField<super::GPAJCMPCOGB::GPAJCMPCOGB>,
    // special fields
    // @@protoc_insertion_point(special_field:KMAHOCEKPAK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KMAHOCEKPAK {
    fn default() -> &'a KMAHOCEKPAK {
        <KMAHOCEKPAK as ::protobuf::Message>::default_instance()
    }
}

impl KMAHOCEKPAK {
    pub fn new() -> KMAHOCEKPAK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(32);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EGDCHJHBOOK",
            |m: &KMAHOCEKPAK| { &m.EGDCHJHBOOK },
            |m: &mut KMAHOCEKPAK| { &mut m.EGDCHJHBOOK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BBMFFDEAMGA",
            |m: &KMAHOCEKPAK| { &m.BBMFFDEAMGA },
            |m: &mut KMAHOCEKPAK| { &mut m.BBMFFDEAMGA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IFJNGOLCGPI",
            |m: &KMAHOCEKPAK| { &m.IFJNGOLCGPI },
            |m: &mut KMAHOCEKPAK| { &mut m.IFJNGOLCGPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NCOFBHLDOGE",
            |m: &KMAHOCEKPAK| { &m.NCOFBHLDOGE },
            |m: &mut KMAHOCEKPAK| { &mut m.NCOFBHLDOGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JDPJFHDFGJD",
            |m: &KMAHOCEKPAK| { &m.JDPJFHDFGJD },
            |m: &mut KMAHOCEKPAK| { &mut m.JDPJFHDFGJD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PCCPLLHICJM",
            |m: &KMAHOCEKPAK| { &m.PCCPLLHICJM },
            |m: &mut KMAHOCEKPAK| { &mut m.PCCPLLHICJM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FFFEDABNMMP",
            |m: &KMAHOCEKPAK| { &m.FFFEDABNMMP },
            |m: &mut KMAHOCEKPAK| { &mut m.FFFEDABNMMP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EAPAAMOIOBC",
            |m: &KMAHOCEKPAK| { &m.EAPAAMOIOBC },
            |m: &mut KMAHOCEKPAK| { &mut m.EAPAAMOIOBC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EGDADLJAPHF",
            |m: &KMAHOCEKPAK| { &m.EGDADLJAPHF },
            |m: &mut KMAHOCEKPAK| { &mut m.EGDADLJAPHF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OLBOBJLJOPP",
            |m: &KMAHOCEKPAK| { &m.OLBOBJLJOPP },
            |m: &mut KMAHOCEKPAK| { &mut m.OLBOBJLJOPP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AJHIOMAHODB",
            |m: &KMAHOCEKPAK| { &m.AJHIOMAHODB },
            |m: &mut KMAHOCEKPAK| { &mut m.AJHIOMAHODB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ELODBOHCDPC",
            |m: &KMAHOCEKPAK| { &m.ELODBOHCDPC },
            |m: &mut KMAHOCEKPAK| { &mut m.ELODBOHCDPC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "KJEOPDDDFPK",
            |m: &KMAHOCEKPAK| { &m.KJEOPDDDFPK },
            |m: &mut KMAHOCEKPAK| { &mut m.KJEOPDDDFPK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BATTLE_TARGET_TYPE_CHALLENGE_SCORE",
            |m: &KMAHOCEKPAK| { &m.BATTLE_TARGET_TYPE_CHALLENGE_SCORE },
            |m: &mut KMAHOCEKPAK| { &mut m.BATTLE_TARGET_TYPE_CHALLENGE_SCORE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FOCOBLGNPMG",
            |m: &KMAHOCEKPAK| { &m.FOCOBLGNPMG },
            |m: &mut KMAHOCEKPAK| { &mut m.FOCOBLGNPMG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BOEKPDLNCID",
            |m: &KMAHOCEKPAK| { &m.BOEKPDLNCID },
            |m: &mut KMAHOCEKPAK| { &mut m.BOEKPDLNCID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DNOIPPCLEDE",
            |m: &KMAHOCEKPAK| { &m.DNOIPPCLEDE },
            |m: &mut KMAHOCEKPAK| { &mut m.DNOIPPCLEDE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HMPLDBHPDLL",
            |m: &KMAHOCEKPAK| { &m.HMPLDBHPDLL },
            |m: &mut KMAHOCEKPAK| { &mut m.HMPLDBHPDLL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DPCKIEJEMNK",
            |m: &KMAHOCEKPAK| { &m.DPCKIEJEMNK },
            |m: &mut KMAHOCEKPAK| { &mut m.DPCKIEJEMNK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EEPGAJEKAPC",
            |m: &KMAHOCEKPAK| { &m.EEPGAJEKAPC },
            |m: &mut KMAHOCEKPAK| { &mut m.EEPGAJEKAPC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HHHEIHBDHNJ",
            |m: &KMAHOCEKPAK| { &m.HHHEIHBDHNJ },
            |m: &mut KMAHOCEKPAK| { &mut m.HHHEIHBDHNJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "PGKJOGNBOPO",
            |m: &KMAHOCEKPAK| { &m.PGKJOGNBOPO },
            |m: &mut KMAHOCEKPAK| { &mut m.PGKJOGNBOPO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BNKNCBKGKAG",
            |m: &KMAHOCEKPAK| { &m.BNKNCBKGKAG },
            |m: &mut KMAHOCEKPAK| { &mut m.BNKNCBKGKAG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EvolveBuild::EvolveBuildBattleInfo>(
            "KAHOEKAEFHD",
            |m: &KMAHOCEKPAK| { &m.KAHOEKAEFHD },
            |m: &mut KMAHOCEKPAK| { &mut m.KAHOEKAEFHD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CDMOBGLKKEC::CDMOBGLKKEC>(
            "HHPLDBGIHKH",
            |m: &KMAHOCEKPAK| { &m.HHPLDBGIHKH },
            |m: &mut KMAHOCEKPAK| { &mut m.HHPLDBGIHKH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KIDHPNPJHJO",
            |m: &KMAHOCEKPAK| { &m.KIDHPNPJHJO },
            |m: &mut KMAHOCEKPAK| { &mut m.KIDHPNPJHJO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NHEAAFNOMIA",
            |m: &KMAHOCEKPAK| { &m.NHEAAFNOMIA },
            |m: &mut KMAHOCEKPAK| { &mut m.NHEAAFNOMIA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HCNNDINHMIH",
            |m: &KMAHOCEKPAK| { &m.HCNNDINHMIH },
            |m: &mut KMAHOCEKPAK| { &mut m.HCNNDINHMIH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KMCHDAPGOIC",
            |m: &KMAHOCEKPAK| { &m.KMCHDAPGOIC },
            |m: &mut KMAHOCEKPAK| { &mut m.KMCHDAPGOIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DAJHFPCHDMM::DAJHFPCHDMM>(
            "LNIFFKGIONN",
            |m: &KMAHOCEKPAK| { &m.LNIFFKGIONN },
            |m: &mut KMAHOCEKPAK| { &mut m.LNIFFKGIONN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NJBIOGNJJMD::NJBIOGNJJMD>(
            "GBBNDMPHECA",
            |m: &KMAHOCEKPAK| { &m.GBBNDMPHECA },
            |m: &mut KMAHOCEKPAK| { &mut m.GBBNDMPHECA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GPAJCMPCOGB::GPAJCMPCOGB>(
            "PHEDLBGBNHN",
            |m: &KMAHOCEKPAK| { &m.PHEDLBGBNHN },
            |m: &mut KMAHOCEKPAK| { &mut m.PHEDLBGBNHN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KMAHOCEKPAK>(
            "KMAHOCEKPAK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KMAHOCEKPAK {
    const NAME: &'static str = "KMAHOCEKPAK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.EGDCHJHBOOK = is.read_uint32()?;
                },
                16 => {
                    self.BBMFFDEAMGA = is.read_uint32()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.IFJNGOLCGPI)?;
                },
                24 => {
                    self.IFJNGOLCGPI.push(is.read_uint32()?);
                },
                32 => {
                    self.NCOFBHLDOGE = is.read_uint32()?;
                },
                41 => {
                    self.JDPJFHDFGJD = is.read_double()?;
                },
                49 => {
                    self.PCCPLLHICJM = is.read_double()?;
                },
                58 => {
                    self.FFFEDABNMMP.push(is.read_message()?);
                },
                66 => {
                    self.EAPAAMOIOBC.push(is.read_message()?);
                },
                72 => {
                    self.EGDADLJAPHF = is.read_uint32()?;
                },
                80 => {
                    self.OLBOBJLJOPP = is.read_uint32()?;
                },
                88 => {
                    self.AJHIOMAHODB = is.read_uint32()?;
                },
                96 => {
                    self.ELODBOHCDPC = is.read_uint32()?;
                },
                106 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            21 => value = is.read_float()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.KJEOPDDDFPK.insert(key, value);
                },
                112 => {
                    self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE = is.read_uint32()?;
                },
                130 => {
                    self.FOCOBLGNPMG.push(is.read_message()?);
                },
                152 => {
                    self.BOEKPDLNCID = is.read_enum_or_unknown()?;
                },
                170 => {
                    self.DNOIPPCLEDE.push(is.read_message()?);
                },
                178 => {
                    is.read_repeated_packed_int32_into(&mut self.HMPLDBHPDLL)?;
                },
                176 => {
                    self.HMPLDBHPDLL.push(is.read_int32()?);
                },
                186 => {
                    self.DPCKIEJEMNK.push(is.read_message()?);
                },
                210 => {
                    self.EEPGAJEKAPC.push(is.read_message()?);
                },
                218 => {
                    self.HHHEIHBDHNJ.push(is.read_message()?);
                },
                226 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.PGKJOGNBOPO.insert(key, value);
                },
                234 => {
                    self.BNKNCBKGKAG.push(is.read_message()?);
                },
                242 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KAHOEKAEFHD)?;
                },
                250 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HHPLDBGIHKH)?;
                },
                256 => {
                    self.KIDHPNPJHJO = is.read_bool()?;
                },
                266 => {
                    self.NHEAAFNOMIA.push(is.read_message()?);
                },
                274 => {
                    self.HCNNDINHMIH.push(is.read_message()?);
                },
                280 => {
                    self.KMCHDAPGOIC = is.read_uint32()?;
                },
                290 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LNIFFKGIONN)?;
                },
                298 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GBBNDMPHECA)?;
                },
                306 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PHEDLBGBNHN)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.EGDCHJHBOOK != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.EGDCHJHBOOK);
        }
        if self.BBMFFDEAMGA != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.BBMFFDEAMGA);
        }
        for value in &self.IFJNGOLCGPI {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        if self.NCOFBHLDOGE != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.NCOFBHLDOGE);
        }
        if self.JDPJFHDFGJD != 0. {
            my_size += 1 + 8;
        }
        if self.PCCPLLHICJM != 0. {
            my_size += 1 + 8;
        }
        for value in &self.FFFEDABNMMP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.EAPAAMOIOBC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.EGDADLJAPHF != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.EGDADLJAPHF);
        }
        if self.OLBOBJLJOPP != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.OLBOBJLJOPP);
        }
        if self.AJHIOMAHODB != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.AJHIOMAHODB);
        }
        if self.ELODBOHCDPC != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.ELODBOHCDPC);
        }
        for (k, v) in &self.KJEOPDDDFPK {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 4;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE);
        }
        for value in &self.FOCOBLGNPMG {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.BOEKPDLNCID != ::protobuf::EnumOrUnknown::new(super::GGHKLGKHKIO::GGHKLGKHKIO::BATTLE_END_REASON_NONE) {
            my_size += ::protobuf::rt::int32_size(19, self.BOEKPDLNCID.value());
        }
        for value in &self.DNOIPPCLEDE {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.HMPLDBHPDLL {
            my_size += ::protobuf::rt::int32_size(22, *value);
        };
        for value in &self.DPCKIEJEMNK {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.EEPGAJEKAPC {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.HHHEIHBDHNJ {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.PGKJOGNBOPO {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.BNKNCBKGKAG {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.KAHOEKAEFHD.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.HHPLDBGIHKH.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.KIDHPNPJHJO != false {
            my_size += 2 + 1;
        }
        for value in &self.NHEAAFNOMIA {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.HCNNDINHMIH {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.KMCHDAPGOIC != 0 {
            my_size += ::protobuf::rt::uint32_size(35, self.KMCHDAPGOIC);
        }
        if let Some(v) = self.LNIFFKGIONN.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.GBBNDMPHECA.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.PHEDLBGBNHN.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.EGDCHJHBOOK != 0 {
            os.write_uint32(1, self.EGDCHJHBOOK)?;
        }
        if self.BBMFFDEAMGA != 0 {
            os.write_uint32(2, self.BBMFFDEAMGA)?;
        }
        for v in &self.IFJNGOLCGPI {
            os.write_uint32(3, *v)?;
        };
        if self.NCOFBHLDOGE != 0 {
            os.write_uint32(4, self.NCOFBHLDOGE)?;
        }
        if self.JDPJFHDFGJD != 0. {
            os.write_double(5, self.JDPJFHDFGJD)?;
        }
        if self.PCCPLLHICJM != 0. {
            os.write_double(6, self.PCCPLLHICJM)?;
        }
        for v in &self.FFFEDABNMMP {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.EAPAAMOIOBC {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.EGDADLJAPHF != 0 {
            os.write_uint32(9, self.EGDADLJAPHF)?;
        }
        if self.OLBOBJLJOPP != 0 {
            os.write_uint32(10, self.OLBOBJLJOPP)?;
        }
        if self.AJHIOMAHODB != 0 {
            os.write_uint32(11, self.AJHIOMAHODB)?;
        }
        if self.ELODBOHCDPC != 0 {
            os.write_uint32(12, self.ELODBOHCDPC)?;
        }
        for (k, v) in &self.KJEOPDDDFPK {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 4;
            os.write_raw_varint32(106)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_float(2, *v)?;
        };
        if self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE != 0 {
            os.write_uint32(14, self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE)?;
        }
        for v in &self.FOCOBLGNPMG {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        };
        if self.BOEKPDLNCID != ::protobuf::EnumOrUnknown::new(super::GGHKLGKHKIO::GGHKLGKHKIO::BATTLE_END_REASON_NONE) {
            os.write_enum(19, ::protobuf::EnumOrUnknown::value(&self.BOEKPDLNCID))?;
        }
        for v in &self.DNOIPPCLEDE {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        for v in &self.HMPLDBHPDLL {
            os.write_int32(22, *v)?;
        };
        for v in &self.DPCKIEJEMNK {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        };
        for v in &self.EEPGAJEKAPC {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        };
        for v in &self.HHHEIHBDHNJ {
            ::protobuf::rt::write_message_field_with_cached_size(27, v, os)?;
        };
        for (k, v) in &self.PGKJOGNBOPO {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(226)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.BNKNCBKGKAG {
            ::protobuf::rt::write_message_field_with_cached_size(29, v, os)?;
        };
        if let Some(v) = self.KAHOEKAEFHD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(30, v, os)?;
        }
        if let Some(v) = self.HHPLDBGIHKH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(31, v, os)?;
        }
        if self.KIDHPNPJHJO != false {
            os.write_bool(32, self.KIDHPNPJHJO)?;
        }
        for v in &self.NHEAAFNOMIA {
            ::protobuf::rt::write_message_field_with_cached_size(33, v, os)?;
        };
        for v in &self.HCNNDINHMIH {
            ::protobuf::rt::write_message_field_with_cached_size(34, v, os)?;
        };
        if self.KMCHDAPGOIC != 0 {
            os.write_uint32(35, self.KMCHDAPGOIC)?;
        }
        if let Some(v) = self.LNIFFKGIONN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(36, v, os)?;
        }
        if let Some(v) = self.GBBNDMPHECA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(37, v, os)?;
        }
        if let Some(v) = self.PHEDLBGBNHN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(38, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KMAHOCEKPAK {
        KMAHOCEKPAK::new()
    }

    fn clear(&mut self) {
        self.EGDCHJHBOOK = 0;
        self.BBMFFDEAMGA = 0;
        self.IFJNGOLCGPI.clear();
        self.NCOFBHLDOGE = 0;
        self.JDPJFHDFGJD = 0.;
        self.PCCPLLHICJM = 0.;
        self.FFFEDABNMMP.clear();
        self.EAPAAMOIOBC.clear();
        self.EGDADLJAPHF = 0;
        self.OLBOBJLJOPP = 0;
        self.AJHIOMAHODB = 0;
        self.ELODBOHCDPC = 0;
        self.KJEOPDDDFPK.clear();
        self.BATTLE_TARGET_TYPE_CHALLENGE_SCORE = 0;
        self.FOCOBLGNPMG.clear();
        self.BOEKPDLNCID = ::protobuf::EnumOrUnknown::new(super::GGHKLGKHKIO::GGHKLGKHKIO::BATTLE_END_REASON_NONE);
        self.DNOIPPCLEDE.clear();
        self.HMPLDBHPDLL.clear();
        self.DPCKIEJEMNK.clear();
        self.EEPGAJEKAPC.clear();
        self.HHHEIHBDHNJ.clear();
        self.PGKJOGNBOPO.clear();
        self.BNKNCBKGKAG.clear();
        self.KAHOEKAEFHD.clear();
        self.HHPLDBGIHKH.clear();
        self.KIDHPNPJHJO = false;
        self.NHEAAFNOMIA.clear();
        self.HCNNDINHMIH.clear();
        self.KMCHDAPGOIC = 0;
        self.LNIFFKGIONN.clear();
        self.GBBNDMPHECA.clear();
        self.PHEDLBGBNHN.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KMAHOCEKPAK {
        static instance: ::protobuf::rt::Lazy<KMAHOCEKPAK> = ::protobuf::rt::Lazy::new();
        instance.get(KMAHOCEKPAK::new)
    }
}

impl ::protobuf::MessageFull for KMAHOCEKPAK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KMAHOCEKPAK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KMAHOCEKPAK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KMAHOCEKPAK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11KMAHOCEKPAK.proto\x1a\x11BIBKLIBHNOA.proto\x1a\x11CDMOBGLKKEC.prot\
    o\x1a\x11CMKJGNPDMDF.proto\x1a\x11DAJHFPCHDMM.proto\x1a\x1bEvolveBuildBa\
    ttleInfo.proto\x1a\x11GGHKLGKHKIO.proto\x1a\x11GPAJCMPCOGB.proto\x1a\x11\
    HOMHNAPNMOJ.proto\x1a\x11JGOIHDOBEEK.proto\x1a\x11JIIEMIPIOHI.proto\x1a\
    \x11LHCDPDEBAGB.proto\x1a\x11LJMAKLAPMNM.proto\x1a\x11LMAABNNONAB.proto\
    \x1a\x11NJBIOGNJJMD.proto\x1a\x11OPFMJDAHFNH.proto\x1a\x11PJDIBBHNNIO.pr\
    oto\x1a\x11PJJHDBEBACA.proto\"\xad\x0c\n\x0bKMAHOCEKPAK\x12\x20\n\x0bEGD\
    CHJHBOOK\x18\x01\x20\x01(\rR\x0bEGDCHJHBOOK\x12\x20\n\x0bBBMFFDEAMGA\x18\
    \x02\x20\x01(\rR\x0bBBMFFDEAMGA\x12\x20\n\x0bIFJNGOLCGPI\x18\x03\x20\x03\
    (\rR\x0bIFJNGOLCGPI\x12\x20\n\x0bNCOFBHLDOGE\x18\x04\x20\x01(\rR\x0bNCOF\
    BHLDOGE\x12\x20\n\x0bJDPJFHDFGJD\x18\x05\x20\x01(\x01R\x0bJDPJFHDFGJD\
    \x12\x20\n\x0bPCCPLLHICJM\x18\x06\x20\x01(\x01R\x0bPCCPLLHICJM\x12.\n\
    \x0bFFFEDABNMMP\x18\x07\x20\x03(\x0b2\x0c.BIBKLIBHNOAR\x0bFFFEDABNMMP\
    \x12.\n\x0bEAPAAMOIOBC\x18\x08\x20\x03(\x0b2\x0c.LJMAKLAPMNMR\x0bEAPAAMO\
    IOBC\x12\x20\n\x0bEGDADLJAPHF\x18\t\x20\x01(\rR\x0bEGDADLJAPHF\x12\x20\n\
    \x0bOLBOBJLJOPP\x18\n\x20\x01(\rR\x0bOLBOBJLJOPP\x12\x20\n\x0bAJHIOMAHOD\
    B\x18\x0b\x20\x01(\rR\x0bAJHIOMAHODB\x12\x20\n\x0bELODBOHCDPC\x18\x0c\
    \x20\x01(\rR\x0bELODBOHCDPC\x12?\n\x0bKJEOPDDDFPK\x18\r\x20\x03(\x0b2\
    \x1d.KMAHOCEKPAK.KJEOPDDDFPKEntryR\x0bKJEOPDDDFPK\x12J\n\"BATTLE_TARGET_\
    TYPE_CHALLENGE_SCORE\x18\x0e\x20\x01(\rR\x1eBATTLETARGETTYPECHALLENGESCO\
    RE\x12.\n\x0bFOCOBLGNPMG\x18\x10\x20\x03(\x0b2\x0c.PJDIBBHNNIOR\x0bFOCOB\
    LGNPMG\x12.\n\x0bBOEKPDLNCID\x18\x13\x20\x01(\x0e2\x0c.GGHKLGKHKIOR\x0bB\
    OEKPDLNCID\x12.\n\x0bDNOIPPCLEDE\x18\x15\x20\x03(\x0b2\x0c.HOMHNAPNMOJR\
    \x0bDNOIPPCLEDE\x12\x20\n\x0bHMPLDBHPDLL\x18\x16\x20\x03(\x05R\x0bHMPLDB\
    HPDLL\x12.\n\x0bDPCKIEJEMNK\x18\x17\x20\x03(\x0b2\x0c.OPFMJDAHFNHR\x0bDP\
    CKIEJEMNK\x12.\n\x0bEEPGAJEKAPC\x18\x1a\x20\x03(\x0b2\x0c.PJJHDBEBACAR\
    \x0bEEPGAJEKAPC\x12.\n\x0bHHHEIHBDHNJ\x18\x1b\x20\x03(\x0b2\x0c.LMAABNNO\
    NABR\x0bHHHEIHBDHNJ\x12?\n\x0bPGKJOGNBOPO\x18\x1c\x20\x03(\x0b2\x1d.KMAH\
    OCEKPAK.PGKJOGNBOPOEntryR\x0bPGKJOGNBOPO\x12.\n\x0bBNKNCBKGKAG\x18\x1d\
    \x20\x03(\x0b2\x0c.LHCDPDEBAGBR\x0bBNKNCBKGKAG\x128\n\x0bKAHOEKAEFHD\x18\
    \x1e\x20\x01(\x0b2\x16.EvolveBuildBattleInfoR\x0bKAHOEKAEFHD\x12.\n\x0bH\
    HPLDBGIHKH\x18\x1f\x20\x01(\x0b2\x0c.CDMOBGLKKECR\x0bHHPLDBGIHKH\x12\x20\
    \n\x0bKIDHPNPJHJO\x18\x20\x20\x01(\x08R\x0bKIDHPNPJHJO\x12.\n\x0bNHEAAFN\
    OMIA\x18!\x20\x03(\x0b2\x0c.JIIEMIPIOHIR\x0bNHEAAFNOMIA\x12.\n\x0bHCNNDI\
    NHMIH\x18\"\x20\x03(\x0b2\x0c.CMKJGNPDMDFR\x0bHCNNDINHMIH\x12\x20\n\x0bK\
    MCHDAPGOIC\x18#\x20\x01(\rR\x0bKMCHDAPGOIC\x12.\n\x0bLNIFFKGIONN\x18$\
    \x20\x01(\x0b2\x0c.DAJHFPCHDMMR\x0bLNIFFKGIONN\x12.\n\x0bGBBNDMPHECA\x18\
    %\x20\x01(\x0b2\x0c.NJBIOGNJJMDR\x0bGBBNDMPHECA\x12.\n\x0bPHEDLBGBNHN\
    \x18&\x20\x01(\x0b2\x0c.GPAJCMPCOGBR\x0bPHEDLBGBNHN\x1a>\n\x10KJEOPDDDFP\
    KEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\x02R\x05value:\x028\x01\x1aL\n\x10PGKJOGNBOPOEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\"\n\x05value\x18\x02\x20\
    \x01(\x0b2\x0c.JGOIHDOBEEKR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(17);
            deps.push(super::BIBKLIBHNOA::file_descriptor().clone());
            deps.push(super::CDMOBGLKKEC::file_descriptor().clone());
            deps.push(super::CMKJGNPDMDF::file_descriptor().clone());
            deps.push(super::DAJHFPCHDMM::file_descriptor().clone());
            deps.push(super::EvolveBuildBattleInfo::file_descriptor().clone());
            deps.push(super::GGHKLGKHKIO::file_descriptor().clone());
            deps.push(super::GPAJCMPCOGB::file_descriptor().clone());
            deps.push(super::HOMHNAPNMOJ::file_descriptor().clone());
            deps.push(super::JGOIHDOBEEK::file_descriptor().clone());
            deps.push(super::JIIEMIPIOHI::file_descriptor().clone());
            deps.push(super::LHCDPDEBAGB::file_descriptor().clone());
            deps.push(super::LJMAKLAPMNM::file_descriptor().clone());
            deps.push(super::LMAABNNONAB::file_descriptor().clone());
            deps.push(super::NJBIOGNJJMD::file_descriptor().clone());
            deps.push(super::OPFMJDAHFNH::file_descriptor().clone());
            deps.push(super::PJDIBBHNNIO::file_descriptor().clone());
            deps.push(super::PJJHDBEBACA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(KMAHOCEKPAK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
