// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MonsterBattleInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MonsterBattleInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MonsterBattleInfo {
    // message fields
    // @@protoc_insertion_point(field:MonsterBattleInfo.entity_id)
    pub entity_id: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.monster_id)
    pub monster_id: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.monster_template_id)
    pub monster_template_id: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.monster_level)
    pub monster_level: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_turns)
    pub total_turns: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_damage)
    pub total_damage: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_heal)
    pub total_heal: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_damage_taken)
    pub total_damage_taken: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_stance_damage_taken)
    pub total_stance_damage_taken: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_hp_recover)
    pub total_hp_recover: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.stage_id)
    pub stage_id: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.battle_id)
    pub battle_id: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.monster_type)
    pub monster_type: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.stage_type)
    pub stage_type: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.total_break_damage_taken)
    pub total_break_damage_taken: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.delay_cumulate)
    pub delay_cumulate: f64,
    // @@protoc_insertion_point(field:MonsterBattleInfo.wave)
    pub wave: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.index_in_wave)
    pub index_in_wave: i32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.stars)
    pub stars: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.max_phase)
    pub max_phase: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.EAMKAKODOME)
    pub EAMKAKODOME: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.DMNFJCOIPCH)
    pub DMNFJCOIPCH: u32,
    // @@protoc_insertion_point(field:MonsterBattleInfo.FPFDDEFFPPG)
    pub FPFDDEFFPPG: u32,
    // special fields
    // @@protoc_insertion_point(special_field:MonsterBattleInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MonsterBattleInfo {
    fn default() -> &'a MonsterBattleInfo {
        <MonsterBattleInfo as ::protobuf::Message>::default_instance()
    }
}

impl MonsterBattleInfo {
    pub fn new() -> MonsterBattleInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(23);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &MonsterBattleInfo| { &m.entity_id },
            |m: &mut MonsterBattleInfo| { &mut m.entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_id",
            |m: &MonsterBattleInfo| { &m.monster_id },
            |m: &mut MonsterBattleInfo| { &mut m.monster_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_template_id",
            |m: &MonsterBattleInfo| { &m.monster_template_id },
            |m: &mut MonsterBattleInfo| { &mut m.monster_template_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_level",
            |m: &MonsterBattleInfo| { &m.monster_level },
            |m: &mut MonsterBattleInfo| { &mut m.monster_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_turns",
            |m: &MonsterBattleInfo| { &m.total_turns },
            |m: &mut MonsterBattleInfo| { &mut m.total_turns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_damage",
            |m: &MonsterBattleInfo| { &m.total_damage },
            |m: &mut MonsterBattleInfo| { &mut m.total_damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_heal",
            |m: &MonsterBattleInfo| { &m.total_heal },
            |m: &mut MonsterBattleInfo| { &mut m.total_heal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_damage_taken",
            |m: &MonsterBattleInfo| { &m.total_damage_taken },
            |m: &mut MonsterBattleInfo| { &mut m.total_damage_taken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_stance_damage_taken",
            |m: &MonsterBattleInfo| { &m.total_stance_damage_taken },
            |m: &mut MonsterBattleInfo| { &mut m.total_stance_damage_taken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_hp_recover",
            |m: &MonsterBattleInfo| { &m.total_hp_recover },
            |m: &mut MonsterBattleInfo| { &mut m.total_hp_recover },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stage_id",
            |m: &MonsterBattleInfo| { &m.stage_id },
            |m: &mut MonsterBattleInfo| { &mut m.stage_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "battle_id",
            |m: &MonsterBattleInfo| { &m.battle_id },
            |m: &mut MonsterBattleInfo| { &mut m.battle_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "monster_type",
            |m: &MonsterBattleInfo| { &m.monster_type },
            |m: &mut MonsterBattleInfo| { &mut m.monster_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stage_type",
            |m: &MonsterBattleInfo| { &m.stage_type },
            |m: &mut MonsterBattleInfo| { &mut m.stage_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_break_damage_taken",
            |m: &MonsterBattleInfo| { &m.total_break_damage_taken },
            |m: &mut MonsterBattleInfo| { &mut m.total_break_damage_taken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delay_cumulate",
            |m: &MonsterBattleInfo| { &m.delay_cumulate },
            |m: &mut MonsterBattleInfo| { &mut m.delay_cumulate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wave",
            |m: &MonsterBattleInfo| { &m.wave },
            |m: &mut MonsterBattleInfo| { &mut m.wave },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index_in_wave",
            |m: &MonsterBattleInfo| { &m.index_in_wave },
            |m: &mut MonsterBattleInfo| { &mut m.index_in_wave },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stars",
            |m: &MonsterBattleInfo| { &m.stars },
            |m: &mut MonsterBattleInfo| { &mut m.stars },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_phase",
            |m: &MonsterBattleInfo| { &m.max_phase },
            |m: &mut MonsterBattleInfo| { &mut m.max_phase },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EAMKAKODOME",
            |m: &MonsterBattleInfo| { &m.EAMKAKODOME },
            |m: &mut MonsterBattleInfo| { &mut m.EAMKAKODOME },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DMNFJCOIPCH",
            |m: &MonsterBattleInfo| { &m.DMNFJCOIPCH },
            |m: &mut MonsterBattleInfo| { &mut m.DMNFJCOIPCH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FPFDDEFFPPG",
            |m: &MonsterBattleInfo| { &m.FPFDDEFFPPG },
            |m: &mut MonsterBattleInfo| { &mut m.FPFDDEFFPPG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MonsterBattleInfo>(
            "MonsterBattleInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MonsterBattleInfo {
    const NAME: &'static str = "MonsterBattleInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.entity_id = is.read_uint32()?;
                },
                16 => {
                    self.monster_id = is.read_uint32()?;
                },
                24 => {
                    self.monster_template_id = is.read_uint32()?;
                },
                32 => {
                    self.monster_level = is.read_uint32()?;
                },
                48 => {
                    self.total_turns = is.read_uint32()?;
                },
                57 => {
                    self.total_damage = is.read_double()?;
                },
                65 => {
                    self.total_heal = is.read_double()?;
                },
                73 => {
                    self.total_damage_taken = is.read_double()?;
                },
                81 => {
                    self.total_stance_damage_taken = is.read_double()?;
                },
                89 => {
                    self.total_hp_recover = is.read_double()?;
                },
                96 => {
                    self.stage_id = is.read_uint32()?;
                },
                104 => {
                    self.battle_id = is.read_uint32()?;
                },
                112 => {
                    self.monster_type = is.read_uint32()?;
                },
                136 => {
                    self.stage_type = is.read_uint32()?;
                },
                145 => {
                    self.total_break_damage_taken = is.read_double()?;
                },
                153 => {
                    self.delay_cumulate = is.read_double()?;
                },
                168 => {
                    self.wave = is.read_uint32()?;
                },
                176 => {
                    self.index_in_wave = is.read_int32()?;
                },
                184 => {
                    self.stars = is.read_uint32()?;
                },
                192 => {
                    self.max_phase = is.read_uint32()?;
                },
                216 => {
                    self.EAMKAKODOME = is.read_uint32()?;
                },
                232 => {
                    self.DMNFJCOIPCH = is.read_uint32()?;
                },
                240 => {
                    self.FPFDDEFFPPG = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.entity_id);
        }
        if self.monster_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.monster_id);
        }
        if self.monster_template_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.monster_template_id);
        }
        if self.monster_level != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.monster_level);
        }
        if self.total_turns != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.total_turns);
        }
        if self.total_damage != 0. {
            my_size += 1 + 8;
        }
        if self.total_heal != 0. {
            my_size += 1 + 8;
        }
        if self.total_damage_taken != 0. {
            my_size += 1 + 8;
        }
        if self.total_stance_damage_taken != 0. {
            my_size += 1 + 8;
        }
        if self.total_hp_recover != 0. {
            my_size += 1 + 8;
        }
        if self.stage_id != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.stage_id);
        }
        if self.battle_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.battle_id);
        }
        if self.monster_type != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.monster_type);
        }
        if self.stage_type != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.stage_type);
        }
        if self.total_break_damage_taken != 0. {
            my_size += 2 + 8;
        }
        if self.delay_cumulate != 0. {
            my_size += 2 + 8;
        }
        if self.wave != 0 {
            my_size += ::protobuf::rt::uint32_size(21, self.wave);
        }
        if self.index_in_wave != 0 {
            my_size += ::protobuf::rt::int32_size(22, self.index_in_wave);
        }
        if self.stars != 0 {
            my_size += ::protobuf::rt::uint32_size(23, self.stars);
        }
        if self.max_phase != 0 {
            my_size += ::protobuf::rt::uint32_size(24, self.max_phase);
        }
        if self.EAMKAKODOME != 0 {
            my_size += ::protobuf::rt::uint32_size(27, self.EAMKAKODOME);
        }
        if self.DMNFJCOIPCH != 0 {
            my_size += ::protobuf::rt::uint32_size(29, self.DMNFJCOIPCH);
        }
        if self.FPFDDEFFPPG != 0 {
            my_size += ::protobuf::rt::uint32_size(30, self.FPFDDEFFPPG);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.entity_id != 0 {
            os.write_uint32(1, self.entity_id)?;
        }
        if self.monster_id != 0 {
            os.write_uint32(2, self.monster_id)?;
        }
        if self.monster_template_id != 0 {
            os.write_uint32(3, self.monster_template_id)?;
        }
        if self.monster_level != 0 {
            os.write_uint32(4, self.monster_level)?;
        }
        if self.total_turns != 0 {
            os.write_uint32(6, self.total_turns)?;
        }
        if self.total_damage != 0. {
            os.write_double(7, self.total_damage)?;
        }
        if self.total_heal != 0. {
            os.write_double(8, self.total_heal)?;
        }
        if self.total_damage_taken != 0. {
            os.write_double(9, self.total_damage_taken)?;
        }
        if self.total_stance_damage_taken != 0. {
            os.write_double(10, self.total_stance_damage_taken)?;
        }
        if self.total_hp_recover != 0. {
            os.write_double(11, self.total_hp_recover)?;
        }
        if self.stage_id != 0 {
            os.write_uint32(12, self.stage_id)?;
        }
        if self.battle_id != 0 {
            os.write_uint32(13, self.battle_id)?;
        }
        if self.monster_type != 0 {
            os.write_uint32(14, self.monster_type)?;
        }
        if self.stage_type != 0 {
            os.write_uint32(17, self.stage_type)?;
        }
        if self.total_break_damage_taken != 0. {
            os.write_double(18, self.total_break_damage_taken)?;
        }
        if self.delay_cumulate != 0. {
            os.write_double(19, self.delay_cumulate)?;
        }
        if self.wave != 0 {
            os.write_uint32(21, self.wave)?;
        }
        if self.index_in_wave != 0 {
            os.write_int32(22, self.index_in_wave)?;
        }
        if self.stars != 0 {
            os.write_uint32(23, self.stars)?;
        }
        if self.max_phase != 0 {
            os.write_uint32(24, self.max_phase)?;
        }
        if self.EAMKAKODOME != 0 {
            os.write_uint32(27, self.EAMKAKODOME)?;
        }
        if self.DMNFJCOIPCH != 0 {
            os.write_uint32(29, self.DMNFJCOIPCH)?;
        }
        if self.FPFDDEFFPPG != 0 {
            os.write_uint32(30, self.FPFDDEFFPPG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MonsterBattleInfo {
        MonsterBattleInfo::new()
    }

    fn clear(&mut self) {
        self.entity_id = 0;
        self.monster_id = 0;
        self.monster_template_id = 0;
        self.monster_level = 0;
        self.total_turns = 0;
        self.total_damage = 0.;
        self.total_heal = 0.;
        self.total_damage_taken = 0.;
        self.total_stance_damage_taken = 0.;
        self.total_hp_recover = 0.;
        self.stage_id = 0;
        self.battle_id = 0;
        self.monster_type = 0;
        self.stage_type = 0;
        self.total_break_damage_taken = 0.;
        self.delay_cumulate = 0.;
        self.wave = 0;
        self.index_in_wave = 0;
        self.stars = 0;
        self.max_phase = 0;
        self.EAMKAKODOME = 0;
        self.DMNFJCOIPCH = 0;
        self.FPFDDEFFPPG = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MonsterBattleInfo {
        static instance: MonsterBattleInfo = MonsterBattleInfo {
            entity_id: 0,
            monster_id: 0,
            monster_template_id: 0,
            monster_level: 0,
            total_turns: 0,
            total_damage: 0.,
            total_heal: 0.,
            total_damage_taken: 0.,
            total_stance_damage_taken: 0.,
            total_hp_recover: 0.,
            stage_id: 0,
            battle_id: 0,
            monster_type: 0,
            stage_type: 0,
            total_break_damage_taken: 0.,
            delay_cumulate: 0.,
            wave: 0,
            index_in_wave: 0,
            stars: 0,
            max_phase: 0,
            EAMKAKODOME: 0,
            DMNFJCOIPCH: 0,
            FPFDDEFFPPG: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MonsterBattleInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MonsterBattleInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MonsterBattleInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonsterBattleInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17MonsterBattleInfo.proto\"\xc5\x06\n\x11MonsterBattleInfo\x12\x1b\n\
    \tentity_id\x18\x01\x20\x01(\rR\x08entityId\x12\x1d\n\nmonster_id\x18\
    \x02\x20\x01(\rR\tmonsterId\x12.\n\x13monster_template_id\x18\x03\x20\
    \x01(\rR\x11monsterTemplateId\x12#\n\rmonster_level\x18\x04\x20\x01(\rR\
    \x0cmonsterLevel\x12\x1f\n\x0btotal_turns\x18\x06\x20\x01(\rR\ntotalTurn\
    s\x12!\n\x0ctotal_damage\x18\x07\x20\x01(\x01R\x0btotalDamage\x12\x1d\n\
    \ntotal_heal\x18\x08\x20\x01(\x01R\ttotalHeal\x12,\n\x12total_damage_tak\
    en\x18\t\x20\x01(\x01R\x10totalDamageTaken\x129\n\x19total_stance_damage\
    _taken\x18\n\x20\x01(\x01R\x16totalStanceDamageTaken\x12(\n\x10total_hp_\
    recover\x18\x0b\x20\x01(\x01R\x0etotalHpRecover\x12\x19\n\x08stage_id\
    \x18\x0c\x20\x01(\rR\x07stageId\x12\x1b\n\tbattle_id\x18\r\x20\x01(\rR\
    \x08battleId\x12!\n\x0cmonster_type\x18\x0e\x20\x01(\rR\x0bmonsterType\
    \x12\x1d\n\nstage_type\x18\x11\x20\x01(\rR\tstageType\x127\n\x18total_br\
    eak_damage_taken\x18\x12\x20\x01(\x01R\x15totalBreakDamageTaken\x12%\n\
    \x0edelay_cumulate\x18\x13\x20\x01(\x01R\rdelayCumulate\x12\x12\n\x04wav\
    e\x18\x15\x20\x01(\rR\x04wave\x12\"\n\rindex_in_wave\x18\x16\x20\x01(\
    \x05R\x0bindexInWave\x12\x14\n\x05stars\x18\x17\x20\x01(\rR\x05stars\x12\
    \x1b\n\tmax_phase\x18\x18\x20\x01(\rR\x08maxPhase\x12\x20\n\x0bEAMKAKODO\
    ME\x18\x1b\x20\x01(\rR\x0bEAMKAKODOME\x12\x20\n\x0bDMNFJCOIPCH\x18\x1d\
    \x20\x01(\rR\x0bDMNFJCOIPCH\x12\x20\n\x0bFPFDDEFFPPG\x18\x1e\x20\x01(\rR\
    \x0bFPFDDEFFPPGB\x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MonsterBattleInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
