// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PNAKEEEOLEC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PNAKEEEOLEC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PNAKEEEOLEC {
    // message fields
    // @@protoc_insertion_point(field:PNAKEEEOLEC.GODJAGEMHEO)
    pub GODJAGEMHEO: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.ABDAAEFGGMG)
    pub ABDAAEFGGMG: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.LALLEANGOKA)
    pub LALLEANGOKA: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.EPJNJKCBOAO)
    pub EPJNJKCBOAO: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.AMBEFLABBPF)
    pub AMBEFLABBPF: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.HFHMNFHFLDN)
    pub HFHMNFHFLDN: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.BAJHJCJGDHA)
    pub BAJHJCJGDHA: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.DJCNIJNPOGF)
    pub DJCNIJNPOGF: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.AMHDMCJFOIA)
    pub AMHDMCJFOIA: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.EMMBAIHOJJE)
    pub EMMBAIHOJJE: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.IPNHCCODNDI)
    pub IPNHCCODNDI: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.LDJAJPJGBDB)
    pub LDJAJPJGBDB: u32,
    // @@protoc_insertion_point(field:PNAKEEEOLEC.KEDIEGELKJN)
    pub KEDIEGELKJN: u32,
    // special fields
    // @@protoc_insertion_point(special_field:PNAKEEEOLEC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PNAKEEEOLEC {
    fn default() -> &'a PNAKEEEOLEC {
        <PNAKEEEOLEC as ::protobuf::Message>::default_instance()
    }
}

impl PNAKEEEOLEC {
    pub fn new() -> PNAKEEEOLEC {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GODJAGEMHEO",
            |m: &PNAKEEEOLEC| { &m.GODJAGEMHEO },
            |m: &mut PNAKEEEOLEC| { &mut m.GODJAGEMHEO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ABDAAEFGGMG",
            |m: &PNAKEEEOLEC| { &m.ABDAAEFGGMG },
            |m: &mut PNAKEEEOLEC| { &mut m.ABDAAEFGGMG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LALLEANGOKA",
            |m: &PNAKEEEOLEC| { &m.LALLEANGOKA },
            |m: &mut PNAKEEEOLEC| { &mut m.LALLEANGOKA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EPJNJKCBOAO",
            |m: &PNAKEEEOLEC| { &m.EPJNJKCBOAO },
            |m: &mut PNAKEEEOLEC| { &mut m.EPJNJKCBOAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AMBEFLABBPF",
            |m: &PNAKEEEOLEC| { &m.AMBEFLABBPF },
            |m: &mut PNAKEEEOLEC| { &mut m.AMBEFLABBPF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HFHMNFHFLDN",
            |m: &PNAKEEEOLEC| { &m.HFHMNFHFLDN },
            |m: &mut PNAKEEEOLEC| { &mut m.HFHMNFHFLDN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BAJHJCJGDHA",
            |m: &PNAKEEEOLEC| { &m.BAJHJCJGDHA },
            |m: &mut PNAKEEEOLEC| { &mut m.BAJHJCJGDHA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DJCNIJNPOGF",
            |m: &PNAKEEEOLEC| { &m.DJCNIJNPOGF },
            |m: &mut PNAKEEEOLEC| { &mut m.DJCNIJNPOGF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AMHDMCJFOIA",
            |m: &PNAKEEEOLEC| { &m.AMHDMCJFOIA },
            |m: &mut PNAKEEEOLEC| { &mut m.AMHDMCJFOIA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EMMBAIHOJJE",
            |m: &PNAKEEEOLEC| { &m.EMMBAIHOJJE },
            |m: &mut PNAKEEEOLEC| { &mut m.EMMBAIHOJJE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IPNHCCODNDI",
            |m: &PNAKEEEOLEC| { &m.IPNHCCODNDI },
            |m: &mut PNAKEEEOLEC| { &mut m.IPNHCCODNDI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LDJAJPJGBDB",
            |m: &PNAKEEEOLEC| { &m.LDJAJPJGBDB },
            |m: &mut PNAKEEEOLEC| { &mut m.LDJAJPJGBDB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KEDIEGELKJN",
            |m: &PNAKEEEOLEC| { &m.KEDIEGELKJN },
            |m: &mut PNAKEEEOLEC| { &mut m.KEDIEGELKJN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PNAKEEEOLEC>(
            "PNAKEEEOLEC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PNAKEEEOLEC {
    const NAME: &'static str = "PNAKEEEOLEC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.GODJAGEMHEO = is.read_uint32()?;
                },
                16 => {
                    self.ABDAAEFGGMG = is.read_uint32()?;
                },
                24 => {
                    self.LALLEANGOKA = is.read_uint32()?;
                },
                32 => {
                    self.EPJNJKCBOAO = is.read_uint32()?;
                },
                40 => {
                    self.AMBEFLABBPF = is.read_uint32()?;
                },
                48 => {
                    self.HFHMNFHFLDN = is.read_uint32()?;
                },
                56 => {
                    self.BAJHJCJGDHA = is.read_uint32()?;
                },
                64 => {
                    self.DJCNIJNPOGF = is.read_uint32()?;
                },
                72 => {
                    self.AMHDMCJFOIA = is.read_uint32()?;
                },
                80 => {
                    self.EMMBAIHOJJE = is.read_uint32()?;
                },
                88 => {
                    self.IPNHCCODNDI = is.read_uint32()?;
                },
                96 => {
                    self.LDJAJPJGBDB = is.read_uint32()?;
                },
                104 => {
                    self.KEDIEGELKJN = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.GODJAGEMHEO != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.GODJAGEMHEO);
        }
        if self.ABDAAEFGGMG != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.ABDAAEFGGMG);
        }
        if self.LALLEANGOKA != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.LALLEANGOKA);
        }
        if self.EPJNJKCBOAO != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.EPJNJKCBOAO);
        }
        if self.AMBEFLABBPF != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.AMBEFLABBPF);
        }
        if self.HFHMNFHFLDN != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.HFHMNFHFLDN);
        }
        if self.BAJHJCJGDHA != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.BAJHJCJGDHA);
        }
        if self.DJCNIJNPOGF != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.DJCNIJNPOGF);
        }
        if self.AMHDMCJFOIA != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.AMHDMCJFOIA);
        }
        if self.EMMBAIHOJJE != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.EMMBAIHOJJE);
        }
        if self.IPNHCCODNDI != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.IPNHCCODNDI);
        }
        if self.LDJAJPJGBDB != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.LDJAJPJGBDB);
        }
        if self.KEDIEGELKJN != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.KEDIEGELKJN);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.GODJAGEMHEO != 0 {
            os.write_uint32(1, self.GODJAGEMHEO)?;
        }
        if self.ABDAAEFGGMG != 0 {
            os.write_uint32(2, self.ABDAAEFGGMG)?;
        }
        if self.LALLEANGOKA != 0 {
            os.write_uint32(3, self.LALLEANGOKA)?;
        }
        if self.EPJNJKCBOAO != 0 {
            os.write_uint32(4, self.EPJNJKCBOAO)?;
        }
        if self.AMBEFLABBPF != 0 {
            os.write_uint32(5, self.AMBEFLABBPF)?;
        }
        if self.HFHMNFHFLDN != 0 {
            os.write_uint32(6, self.HFHMNFHFLDN)?;
        }
        if self.BAJHJCJGDHA != 0 {
            os.write_uint32(7, self.BAJHJCJGDHA)?;
        }
        if self.DJCNIJNPOGF != 0 {
            os.write_uint32(8, self.DJCNIJNPOGF)?;
        }
        if self.AMHDMCJFOIA != 0 {
            os.write_uint32(9, self.AMHDMCJFOIA)?;
        }
        if self.EMMBAIHOJJE != 0 {
            os.write_uint32(10, self.EMMBAIHOJJE)?;
        }
        if self.IPNHCCODNDI != 0 {
            os.write_uint32(11, self.IPNHCCODNDI)?;
        }
        if self.LDJAJPJGBDB != 0 {
            os.write_uint32(12, self.LDJAJPJGBDB)?;
        }
        if self.KEDIEGELKJN != 0 {
            os.write_uint32(13, self.KEDIEGELKJN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PNAKEEEOLEC {
        PNAKEEEOLEC::new()
    }

    fn clear(&mut self) {
        self.GODJAGEMHEO = 0;
        self.ABDAAEFGGMG = 0;
        self.LALLEANGOKA = 0;
        self.EPJNJKCBOAO = 0;
        self.AMBEFLABBPF = 0;
        self.HFHMNFHFLDN = 0;
        self.BAJHJCJGDHA = 0;
        self.DJCNIJNPOGF = 0;
        self.AMHDMCJFOIA = 0;
        self.EMMBAIHOJJE = 0;
        self.IPNHCCODNDI = 0;
        self.LDJAJPJGBDB = 0;
        self.KEDIEGELKJN = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PNAKEEEOLEC {
        static instance: PNAKEEEOLEC = PNAKEEEOLEC {
            GODJAGEMHEO: 0,
            ABDAAEFGGMG: 0,
            LALLEANGOKA: 0,
            EPJNJKCBOAO: 0,
            AMBEFLABBPF: 0,
            HFHMNFHFLDN: 0,
            BAJHJCJGDHA: 0,
            DJCNIJNPOGF: 0,
            AMHDMCJFOIA: 0,
            EMMBAIHOJJE: 0,
            IPNHCCODNDI: 0,
            LDJAJPJGBDB: 0,
            KEDIEGELKJN: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PNAKEEEOLEC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PNAKEEEOLEC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PNAKEEEOLEC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PNAKEEEOLEC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11PNAKEEEOLEC.proto\"\xc7\x03\n\x0bPNAKEEEOLEC\x12\x20\n\x0bGODJAGEM\
    HEO\x18\x01\x20\x01(\rR\x0bGODJAGEMHEO\x12\x20\n\x0bABDAAEFGGMG\x18\x02\
    \x20\x01(\rR\x0bABDAAEFGGMG\x12\x20\n\x0bLALLEANGOKA\x18\x03\x20\x01(\rR\
    \x0bLALLEANGOKA\x12\x20\n\x0bEPJNJKCBOAO\x18\x04\x20\x01(\rR\x0bEPJNJKCB\
    OAO\x12\x20\n\x0bAMBEFLABBPF\x18\x05\x20\x01(\rR\x0bAMBEFLABBPF\x12\x20\
    \n\x0bHFHMNFHFLDN\x18\x06\x20\x01(\rR\x0bHFHMNFHFLDN\x12\x20\n\x0bBAJHJC\
    JGDHA\x18\x07\x20\x01(\rR\x0bBAJHJCJGDHA\x12\x20\n\x0bDJCNIJNPOGF\x18\
    \x08\x20\x01(\rR\x0bDJCNIJNPOGF\x12\x20\n\x0bAMHDMCJFOIA\x18\t\x20\x01(\
    \rR\x0bAMHDMCJFOIA\x12\x20\n\x0bEMMBAIHOJJE\x18\n\x20\x01(\rR\x0bEMMBAIH\
    OJJE\x12\x20\n\x0bIPNHCCODNDI\x18\x0b\x20\x01(\rR\x0bIPNHCCODNDI\x12\x20\
    \n\x0bLDJAJPJGBDB\x18\x0c\x20\x01(\rR\x0bLDJAJPJGBDB\x12\x20\n\x0bKEDIEG\
    ELKJN\x18\r\x20\x01(\rR\x0bKEDIEGELKJNb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PNAKEEEOLEC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
