// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `COKMEFOLDDH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:COKMEFOLDDH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COKMEFOLDDH {
    // message fields
    // @@protoc_insertion_point(field:COKMEFOLDDH.OBEPJIDJDCN)
    pub OBEPJIDJDCN: u32,
    // @@protoc_insertion_point(field:COKMEFOLDDH.DGKCNKGFDFH)
    pub DGKCNKGFDFH: u32,
    // @@protoc_insertion_point(field:COKMEFOLDDH.AOAMAGDFGPD)
    pub AOAMAGDFGPD: u32,
    // @@protoc_insertion_point(field:COKMEFOLDDH.GEKMLHBEAON)
    pub GEKMLHBEAON: u32,
    // @@protoc_insertion_point(field:COKMEFOLDDH.HGACEJKHJLK)
    pub HGACEJKHJLK: u32,
    // @@protoc_insertion_point(field:COKMEFOLDDH.BMEMAHBFFIM)
    pub BMEMAHBFFIM: u32,
    // @@protoc_insertion_point(field:COKMEFOLDDH.OAMKCDDNGCG)
    pub OAMKCDDNGCG: u32,
    // @@protoc_insertion_point(field:COKMEFOLDDH.MIFPOOAJFAM)
    pub MIFPOOAJFAM: u32,
    // @@protoc_insertion_point(field:COKMEFOLDDH.HPACKBOLBNL)
    pub HPACKBOLBNL: u32,
    // @@protoc_insertion_point(field:COKMEFOLDDH.PMEHDEKLGIA)
    pub PMEHDEKLGIA: u32,
    // special fields
    // @@protoc_insertion_point(special_field:COKMEFOLDDH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COKMEFOLDDH {
    fn default() -> &'a COKMEFOLDDH {
        <COKMEFOLDDH as ::protobuf::Message>::default_instance()
    }
}

impl COKMEFOLDDH {
    pub fn new() -> COKMEFOLDDH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBEPJIDJDCN",
            |m: &COKMEFOLDDH| { &m.OBEPJIDJDCN },
            |m: &mut COKMEFOLDDH| { &mut m.OBEPJIDJDCN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DGKCNKGFDFH",
            |m: &COKMEFOLDDH| { &m.DGKCNKGFDFH },
            |m: &mut COKMEFOLDDH| { &mut m.DGKCNKGFDFH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AOAMAGDFGPD",
            |m: &COKMEFOLDDH| { &m.AOAMAGDFGPD },
            |m: &mut COKMEFOLDDH| { &mut m.AOAMAGDFGPD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GEKMLHBEAON",
            |m: &COKMEFOLDDH| { &m.GEKMLHBEAON },
            |m: &mut COKMEFOLDDH| { &mut m.GEKMLHBEAON },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HGACEJKHJLK",
            |m: &COKMEFOLDDH| { &m.HGACEJKHJLK },
            |m: &mut COKMEFOLDDH| { &mut m.HGACEJKHJLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BMEMAHBFFIM",
            |m: &COKMEFOLDDH| { &m.BMEMAHBFFIM },
            |m: &mut COKMEFOLDDH| { &mut m.BMEMAHBFFIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OAMKCDDNGCG",
            |m: &COKMEFOLDDH| { &m.OAMKCDDNGCG },
            |m: &mut COKMEFOLDDH| { &mut m.OAMKCDDNGCG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MIFPOOAJFAM",
            |m: &COKMEFOLDDH| { &m.MIFPOOAJFAM },
            |m: &mut COKMEFOLDDH| { &mut m.MIFPOOAJFAM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HPACKBOLBNL",
            |m: &COKMEFOLDDH| { &m.HPACKBOLBNL },
            |m: &mut COKMEFOLDDH| { &mut m.HPACKBOLBNL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PMEHDEKLGIA",
            |m: &COKMEFOLDDH| { &m.PMEHDEKLGIA },
            |m: &mut COKMEFOLDDH| { &mut m.PMEHDEKLGIA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<COKMEFOLDDH>(
            "COKMEFOLDDH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for COKMEFOLDDH {
    const NAME: &'static str = "COKMEFOLDDH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.OBEPJIDJDCN = is.read_uint32()?;
                },
                16 => {
                    self.DGKCNKGFDFH = is.read_uint32()?;
                },
                24 => {
                    self.AOAMAGDFGPD = is.read_uint32()?;
                },
                32 => {
                    self.GEKMLHBEAON = is.read_uint32()?;
                },
                40 => {
                    self.HGACEJKHJLK = is.read_uint32()?;
                },
                48 => {
                    self.BMEMAHBFFIM = is.read_uint32()?;
                },
                56 => {
                    self.OAMKCDDNGCG = is.read_uint32()?;
                },
                64 => {
                    self.MIFPOOAJFAM = is.read_uint32()?;
                },
                72 => {
                    self.HPACKBOLBNL = is.read_uint32()?;
                },
                80 => {
                    self.PMEHDEKLGIA = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OBEPJIDJDCN != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.OBEPJIDJDCN);
        }
        if self.DGKCNKGFDFH != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.DGKCNKGFDFH);
        }
        if self.AOAMAGDFGPD != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.AOAMAGDFGPD);
        }
        if self.GEKMLHBEAON != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.GEKMLHBEAON);
        }
        if self.HGACEJKHJLK != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.HGACEJKHJLK);
        }
        if self.BMEMAHBFFIM != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.BMEMAHBFFIM);
        }
        if self.OAMKCDDNGCG != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.OAMKCDDNGCG);
        }
        if self.MIFPOOAJFAM != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.MIFPOOAJFAM);
        }
        if self.HPACKBOLBNL != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.HPACKBOLBNL);
        }
        if self.PMEHDEKLGIA != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.PMEHDEKLGIA);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OBEPJIDJDCN != 0 {
            os.write_uint32(1, self.OBEPJIDJDCN)?;
        }
        if self.DGKCNKGFDFH != 0 {
            os.write_uint32(2, self.DGKCNKGFDFH)?;
        }
        if self.AOAMAGDFGPD != 0 {
            os.write_uint32(3, self.AOAMAGDFGPD)?;
        }
        if self.GEKMLHBEAON != 0 {
            os.write_uint32(4, self.GEKMLHBEAON)?;
        }
        if self.HGACEJKHJLK != 0 {
            os.write_uint32(5, self.HGACEJKHJLK)?;
        }
        if self.BMEMAHBFFIM != 0 {
            os.write_uint32(6, self.BMEMAHBFFIM)?;
        }
        if self.OAMKCDDNGCG != 0 {
            os.write_uint32(7, self.OAMKCDDNGCG)?;
        }
        if self.MIFPOOAJFAM != 0 {
            os.write_uint32(8, self.MIFPOOAJFAM)?;
        }
        if self.HPACKBOLBNL != 0 {
            os.write_uint32(9, self.HPACKBOLBNL)?;
        }
        if self.PMEHDEKLGIA != 0 {
            os.write_uint32(10, self.PMEHDEKLGIA)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COKMEFOLDDH {
        COKMEFOLDDH::new()
    }

    fn clear(&mut self) {
        self.OBEPJIDJDCN = 0;
        self.DGKCNKGFDFH = 0;
        self.AOAMAGDFGPD = 0;
        self.GEKMLHBEAON = 0;
        self.HGACEJKHJLK = 0;
        self.BMEMAHBFFIM = 0;
        self.OAMKCDDNGCG = 0;
        self.MIFPOOAJFAM = 0;
        self.HPACKBOLBNL = 0;
        self.PMEHDEKLGIA = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COKMEFOLDDH {
        static instance: COKMEFOLDDH = COKMEFOLDDH {
            OBEPJIDJDCN: 0,
            DGKCNKGFDFH: 0,
            AOAMAGDFGPD: 0,
            GEKMLHBEAON: 0,
            HGACEJKHJLK: 0,
            BMEMAHBFFIM: 0,
            OAMKCDDNGCG: 0,
            MIFPOOAJFAM: 0,
            HPACKBOLBNL: 0,
            PMEHDEKLGIA: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for COKMEFOLDDH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("COKMEFOLDDH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for COKMEFOLDDH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COKMEFOLDDH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11COKMEFOLDDH.proto\"\xe1\x02\n\x0bCOKMEFOLDDH\x12\x20\n\x0bOBEPJIDJ\
    DCN\x18\x01\x20\x01(\rR\x0bOBEPJIDJDCN\x12\x20\n\x0bDGKCNKGFDFH\x18\x02\
    \x20\x01(\rR\x0bDGKCNKGFDFH\x12\x20\n\x0bAOAMAGDFGPD\x18\x03\x20\x01(\rR\
    \x0bAOAMAGDFGPD\x12\x20\n\x0bGEKMLHBEAON\x18\x04\x20\x01(\rR\x0bGEKMLHBE\
    AON\x12\x20\n\x0bHGACEJKHJLK\x18\x05\x20\x01(\rR\x0bHGACEJKHJLK\x12\x20\
    \n\x0bBMEMAHBFFIM\x18\x06\x20\x01(\rR\x0bBMEMAHBFFIM\x12\x20\n\x0bOAMKCD\
    DNGCG\x18\x07\x20\x01(\rR\x0bOAMKCDDNGCG\x12\x20\n\x0bMIFPOOAJFAM\x18\
    \x08\x20\x01(\rR\x0bMIFPOOAJFAM\x12\x20\n\x0bHPACKBOLBNL\x18\t\x20\x01(\
    \rR\x0bHPACKBOLBNL\x12\x20\n\x0bPMEHDEKLGIA\x18\n\x20\x01(\rR\x0bPMEHDEK\
    LGIAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(COKMEFOLDDH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
