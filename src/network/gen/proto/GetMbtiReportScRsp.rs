// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetMbtiReportScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetMbtiReportScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetMbtiReportScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetMbtiReportScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetMbtiReportScRsp.PPNMMPFAMDA)
    pub PPNMMPFAMDA: bool,
    // @@protoc_insertion_point(field:GetMbtiReportScRsp.LAEAHDLHOGD)
    pub LAEAHDLHOGD: bool,
    // @@protoc_insertion_point(field:GetMbtiReportScRsp.KLHMMAAHANI)
    pub KLHMMAAHANI: i32,
    // @@protoc_insertion_point(field:GetMbtiReportScRsp.JLAFELNGAKD)
    pub JLAFELNGAKD: i32,
    // @@protoc_insertion_point(field:GetMbtiReportScRsp.progress)
    pub progress: u32,
    // @@protoc_insertion_point(field:GetMbtiReportScRsp.AKJJGCIEJMP)
    pub AKJJGCIEJMP: ::std::vec::Vec<super::BFGPPMDHKJH::BFGPPMDHKJH>,
    // @@protoc_insertion_point(field:GetMbtiReportScRsp.PHAKIBBELNK)
    pub PHAKIBBELNK: ::std::vec::Vec<super::GODFNMFIENL::GODFNMFIENL>,
    // special fields
    // @@protoc_insertion_point(special_field:GetMbtiReportScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMbtiReportScRsp {
    fn default() -> &'a GetMbtiReportScRsp {
        <GetMbtiReportScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetMbtiReportScRsp {
    pub fn new() -> GetMbtiReportScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetMbtiReportScRsp| { &m.retcode },
            |m: &mut GetMbtiReportScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PPNMMPFAMDA",
            |m: &GetMbtiReportScRsp| { &m.PPNMMPFAMDA },
            |m: &mut GetMbtiReportScRsp| { &mut m.PPNMMPFAMDA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LAEAHDLHOGD",
            |m: &GetMbtiReportScRsp| { &m.LAEAHDLHOGD },
            |m: &mut GetMbtiReportScRsp| { &mut m.LAEAHDLHOGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KLHMMAAHANI",
            |m: &GetMbtiReportScRsp| { &m.KLHMMAAHANI },
            |m: &mut GetMbtiReportScRsp| { &mut m.KLHMMAAHANI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JLAFELNGAKD",
            |m: &GetMbtiReportScRsp| { &m.JLAFELNGAKD },
            |m: &mut GetMbtiReportScRsp| { &mut m.JLAFELNGAKD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "progress",
            |m: &GetMbtiReportScRsp| { &m.progress },
            |m: &mut GetMbtiReportScRsp| { &mut m.progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AKJJGCIEJMP",
            |m: &GetMbtiReportScRsp| { &m.AKJJGCIEJMP },
            |m: &mut GetMbtiReportScRsp| { &mut m.AKJJGCIEJMP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PHAKIBBELNK",
            |m: &GetMbtiReportScRsp| { &m.PHAKIBBELNK },
            |m: &mut GetMbtiReportScRsp| { &mut m.PHAKIBBELNK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMbtiReportScRsp>(
            "GetMbtiReportScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMbtiReportScRsp {
    const NAME: &'static str = "GetMbtiReportScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                80 => {
                    self.retcode = is.read_uint32()?;
                },
                32 => {
                    self.PPNMMPFAMDA = is.read_bool()?;
                },
                40 => {
                    self.LAEAHDLHOGD = is.read_bool()?;
                },
                88 => {
                    self.KLHMMAAHANI = is.read_int32()?;
                },
                8 => {
                    self.JLAFELNGAKD = is.read_int32()?;
                },
                112 => {
                    self.progress = is.read_uint32()?;
                },
                50 => {
                    self.AKJJGCIEJMP.push(is.read_message()?);
                },
                66 => {
                    self.PHAKIBBELNK.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.retcode);
        }
        if self.PPNMMPFAMDA != false {
            my_size += 1 + 1;
        }
        if self.LAEAHDLHOGD != false {
            my_size += 1 + 1;
        }
        if self.KLHMMAAHANI != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.KLHMMAAHANI);
        }
        if self.JLAFELNGAKD != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.JLAFELNGAKD);
        }
        if self.progress != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.progress);
        }
        for value in &self.AKJJGCIEJMP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.PHAKIBBELNK {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(10, self.retcode)?;
        }
        if self.PPNMMPFAMDA != false {
            os.write_bool(4, self.PPNMMPFAMDA)?;
        }
        if self.LAEAHDLHOGD != false {
            os.write_bool(5, self.LAEAHDLHOGD)?;
        }
        if self.KLHMMAAHANI != 0 {
            os.write_int32(11, self.KLHMMAAHANI)?;
        }
        if self.JLAFELNGAKD != 0 {
            os.write_int32(1, self.JLAFELNGAKD)?;
        }
        if self.progress != 0 {
            os.write_uint32(14, self.progress)?;
        }
        for v in &self.AKJJGCIEJMP {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.PHAKIBBELNK {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMbtiReportScRsp {
        GetMbtiReportScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.PPNMMPFAMDA = false;
        self.LAEAHDLHOGD = false;
        self.KLHMMAAHANI = 0;
        self.JLAFELNGAKD = 0;
        self.progress = 0;
        self.AKJJGCIEJMP.clear();
        self.PHAKIBBELNK.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMbtiReportScRsp {
        static instance: GetMbtiReportScRsp = GetMbtiReportScRsp {
            retcode: 0,
            PPNMMPFAMDA: false,
            LAEAHDLHOGD: false,
            KLHMMAAHANI: 0,
            JLAFELNGAKD: 0,
            progress: 0,
            AKJJGCIEJMP: ::std::vec::Vec::new(),
            PHAKIBBELNK: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMbtiReportScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMbtiReportScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMbtiReportScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMbtiReportScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18GetMbtiReportScRsp.proto\x1a\x11BFGPPMDHKJH.proto\x1a\x11GODFNMFIE\
    NL.proto\"\xb2\x02\n\x12GetMbtiReportScRsp\x12\x18\n\x07retcode\x18\n\
    \x20\x01(\rR\x07retcode\x12\x20\n\x0bPPNMMPFAMDA\x18\x04\x20\x01(\x08R\
    \x0bPPNMMPFAMDA\x12\x20\n\x0bLAEAHDLHOGD\x18\x05\x20\x01(\x08R\x0bLAEAHD\
    LHOGD\x12\x20\n\x0bKLHMMAAHANI\x18\x0b\x20\x01(\x05R\x0bKLHMMAAHANI\x12\
    \x20\n\x0bJLAFELNGAKD\x18\x01\x20\x01(\x05R\x0bJLAFELNGAKD\x12\x1a\n\x08\
    progress\x18\x0e\x20\x01(\rR\x08progress\x12.\n\x0bAKJJGCIEJMP\x18\x06\
    \x20\x03(\x0b2\x0c.BFGPPMDHKJHR\x0bAKJJGCIEJMP\x12.\n\x0bPHAKIBBELNK\x18\
    \x08\x20\x03(\x0b2\x0c.GODFNMFIENLR\x0bPHAKIBBELNKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::BFGPPMDHKJH::file_descriptor().clone());
            deps.push(super::GODFNMFIENL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetMbtiReportScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
