// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChessRogueQuitScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChessRogueQuitScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChessRogueQuitScRsp {
    // message fields
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.HLDLDAPNILF)
    pub HLDLDAPNILF: ::protobuf::MessageField<super::MOHDEOFNBNK::MOHDEOFNBNK>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.ROGUE_DEBUG_MESSAGE_TYPE_INFO)
    pub ROGUE_DEBUG_MESSAGE_TYPE_INFO: ::protobuf::MessageField<super::NLGOGJBLJFE::NLGOGJBLJFE>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.CBLEOKIPEEA)
    pub CBLEOKIPEEA: ::protobuf::MessageField<super::LCGKENFJICO::LCGKENFJICO>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.GGHEBMCAJKI)
    pub GGHEBMCAJKI: ::protobuf::MessageField<super::NECPIBKAFJE::NECPIBKAFJE>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.DAKOPHLKOGK)
    pub DAKOPHLKOGK: ::protobuf::MessageField<super::ANGHJLBFOAL::ANGHJLBFOAL>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.CMPAKCFPGJN)
    pub CMPAKCFPGJN: ::protobuf::MessageField<super::JHPFGKKNOGF::JHPFGKKNOGF>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.CMDGDKBACOD)
    pub CMDGDKBACOD: ::protobuf::MessageField<super::EOIFAHBJKDA::EOIFAHBJKDA>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.JMGAILLNCEL)
    pub JMGAILLNCEL: ::protobuf::MessageField<super::KFDJPCGIBEH::KFDJPCGIBEH>,
    // special fields
    // @@protoc_insertion_point(special_field:ChessRogueQuitScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChessRogueQuitScRsp {
    fn default() -> &'a ChessRogueQuitScRsp {
        <ChessRogueQuitScRsp as ::protobuf::Message>::default_instance()
    }
}

impl ChessRogueQuitScRsp {
    pub fn new() -> ChessRogueQuitScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MOHDEOFNBNK::MOHDEOFNBNK>(
            "HLDLDAPNILF",
            |m: &ChessRogueQuitScRsp| { &m.HLDLDAPNILF },
            |m: &mut ChessRogueQuitScRsp| { &mut m.HLDLDAPNILF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NLGOGJBLJFE::NLGOGJBLJFE>(
            "ROGUE_DEBUG_MESSAGE_TYPE_INFO",
            |m: &ChessRogueQuitScRsp| { &m.ROGUE_DEBUG_MESSAGE_TYPE_INFO },
            |m: &mut ChessRogueQuitScRsp| { &mut m.ROGUE_DEBUG_MESSAGE_TYPE_INFO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LCGKENFJICO::LCGKENFJICO>(
            "CBLEOKIPEEA",
            |m: &ChessRogueQuitScRsp| { &m.CBLEOKIPEEA },
            |m: &mut ChessRogueQuitScRsp| { &mut m.CBLEOKIPEEA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NECPIBKAFJE::NECPIBKAFJE>(
            "GGHEBMCAJKI",
            |m: &ChessRogueQuitScRsp| { &m.GGHEBMCAJKI },
            |m: &mut ChessRogueQuitScRsp| { &mut m.GGHEBMCAJKI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &ChessRogueQuitScRsp| { &m.retcode },
            |m: &mut ChessRogueQuitScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ANGHJLBFOAL::ANGHJLBFOAL>(
            "DAKOPHLKOGK",
            |m: &ChessRogueQuitScRsp| { &m.DAKOPHLKOGK },
            |m: &mut ChessRogueQuitScRsp| { &mut m.DAKOPHLKOGK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JHPFGKKNOGF::JHPFGKKNOGF>(
            "CMPAKCFPGJN",
            |m: &ChessRogueQuitScRsp| { &m.CMPAKCFPGJN },
            |m: &mut ChessRogueQuitScRsp| { &mut m.CMPAKCFPGJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EOIFAHBJKDA::EOIFAHBJKDA>(
            "CMDGDKBACOD",
            |m: &ChessRogueQuitScRsp| { &m.CMDGDKBACOD },
            |m: &mut ChessRogueQuitScRsp| { &mut m.CMDGDKBACOD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KFDJPCGIBEH::KFDJPCGIBEH>(
            "JMGAILLNCEL",
            |m: &ChessRogueQuitScRsp| { &m.JMGAILLNCEL },
            |m: &mut ChessRogueQuitScRsp| { &mut m.JMGAILLNCEL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChessRogueQuitScRsp>(
            "ChessRogueQuitScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChessRogueQuitScRsp {
    const NAME: &'static str = "ChessRogueQuitScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HLDLDAPNILF)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ROGUE_DEBUG_MESSAGE_TYPE_INFO)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CBLEOKIPEEA)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GGHEBMCAJKI)?;
                },
                96 => {
                    self.retcode = is.read_uint32()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DAKOPHLKOGK)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CMPAKCFPGJN)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CMDGDKBACOD)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JMGAILLNCEL)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.HLDLDAPNILF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ROGUE_DEBUG_MESSAGE_TYPE_INFO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CBLEOKIPEEA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.GGHEBMCAJKI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.retcode);
        }
        if let Some(v) = self.DAKOPHLKOGK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CMPAKCFPGJN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CMDGDKBACOD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JMGAILLNCEL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.HLDLDAPNILF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.ROGUE_DEBUG_MESSAGE_TYPE_INFO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.CBLEOKIPEEA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.GGHEBMCAJKI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.retcode != 0 {
            os.write_uint32(12, self.retcode)?;
        }
        if let Some(v) = self.DAKOPHLKOGK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.CMPAKCFPGJN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.CMDGDKBACOD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.JMGAILLNCEL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChessRogueQuitScRsp {
        ChessRogueQuitScRsp::new()
    }

    fn clear(&mut self) {
        self.HLDLDAPNILF.clear();
        self.ROGUE_DEBUG_MESSAGE_TYPE_INFO.clear();
        self.CBLEOKIPEEA.clear();
        self.GGHEBMCAJKI.clear();
        self.retcode = 0;
        self.DAKOPHLKOGK.clear();
        self.CMPAKCFPGJN.clear();
        self.CMDGDKBACOD.clear();
        self.JMGAILLNCEL.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChessRogueQuitScRsp {
        static instance: ChessRogueQuitScRsp = ChessRogueQuitScRsp {
            HLDLDAPNILF: ::protobuf::MessageField::none(),
            ROGUE_DEBUG_MESSAGE_TYPE_INFO: ::protobuf::MessageField::none(),
            CBLEOKIPEEA: ::protobuf::MessageField::none(),
            GGHEBMCAJKI: ::protobuf::MessageField::none(),
            retcode: 0,
            DAKOPHLKOGK: ::protobuf::MessageField::none(),
            CMPAKCFPGJN: ::protobuf::MessageField::none(),
            CMDGDKBACOD: ::protobuf::MessageField::none(),
            JMGAILLNCEL: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChessRogueQuitScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChessRogueQuitScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChessRogueQuitScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChessRogueQuitScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19ChessRogueQuitScRsp.proto\x1a\x11ANGHJLBFOAL.proto\x1a\x11EOIFAHBJ\
    KDA.proto\x1a\x11JHPFGKKNOGF.proto\x1a\x11KFDJPCGIBEH.proto\x1a\x11LCGKE\
    NFJICO.proto\x1a\x11MOHDEOFNBNK.proto\x1a\x11NECPIBKAFJE.proto\x1a\x11NL\
    GOGJBLJFE.proto\"\xcf\x03\n\x13ChessRogueQuitScRsp\x12.\n\x0bHLDLDAPNILF\
    \x18\x03\x20\x01(\x0b2\x0c.MOHDEOFNBNKR\x0bHLDLDAPNILF\x12N\n\x1dROGUE_D\
    EBUG_MESSAGE_TYPE_INFO\x18\r\x20\x01(\x0b2\x0c.NLGOGJBLJFER\x19ROGUEDEBU\
    GMESSAGETYPEINFO\x12.\n\x0bCBLEOKIPEEA\x18\x05\x20\x01(\x0b2\x0c.LCGKENF\
    JICOR\x0bCBLEOKIPEEA\x12.\n\x0bGGHEBMCAJKI\x18\x04\x20\x01(\x0b2\x0c.NEC\
    PIBKAFJER\x0bGGHEBMCAJKI\x12\x18\n\x07retcode\x18\x0c\x20\x01(\rR\x07ret\
    code\x12.\n\x0bDAKOPHLKOGK\x18\x06\x20\x01(\x0b2\x0c.ANGHJLBFOALR\x0bDAK\
    OPHLKOGK\x12.\n\x0bCMPAKCFPGJN\x18\x07\x20\x01(\x0b2\x0c.JHPFGKKNOGFR\
    \x0bCMPAKCFPGJN\x12.\n\x0bCMDGDKBACOD\x18\x0b\x20\x01(\x0b2\x0c.EOIFAHBJ\
    KDAR\x0bCMDGDKBACOD\x12.\n\x0bJMGAILLNCEL\x18\x02\x20\x01(\x0b2\x0c.KFDJ\
    PCGIBEHR\x0bJMGAILLNCELb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::ANGHJLBFOAL::file_descriptor().clone());
            deps.push(super::EOIFAHBJKDA::file_descriptor().clone());
            deps.push(super::JHPFGKKNOGF::file_descriptor().clone());
            deps.push(super::KFDJPCGIBEH::file_descriptor().clone());
            deps.push(super::LCGKENFJICO::file_descriptor().clone());
            deps.push(super::MOHDEOFNBNK::file_descriptor().clone());
            deps.push(super::NECPIBKAFJE::file_descriptor().clone());
            deps.push(super::NLGOGJBLJFE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChessRogueQuitScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
