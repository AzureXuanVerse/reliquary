// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChessRogueQuitScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ChessRogueQuitScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChessRogueQuitScRsp {
    // message fields
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.LAGBGLDLGCB)
    pub LAGBGLDLGCB: ::protobuf::MessageField<super::IHNJGHALKJB::IHNJGHALKJB>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.HNDLHICDNPC)
    pub HNDLHICDNPC: ::protobuf::MessageField<super::FFLAPKOLHCM::FFLAPKOLHCM>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.CHMHPCNGFAO)
    pub CHMHPCNGFAO: ::protobuf::MessageField<super::CJEMBCBCBKJ::CJEMBCBCBKJ>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.MIFOLPKEOOO)
    pub MIFOLPKEOOO: ::protobuf::MessageField<super::EHANAPNJFJD::EHANAPNJFJD>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.BLNDMFGKPMJ)
    pub BLNDMFGKPMJ: ::protobuf::MessageField<super::JACMENOKJFM::JACMENOKJFM>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.LMGKMAOICGC)
    pub LMGKMAOICGC: ::protobuf::MessageField<super::AFABKDEFDDG::AFABKDEFDDG>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.BOIKABLFKEC)
    pub BOIKABLFKEC: ::protobuf::MessageField<super::CCODJOAHOLB::CCODJOAHOLB>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.OMCBCGCHLGN)
    pub OMCBCGCHLGN: ::protobuf::MessageField<super::BIPDDEJAADC::BIPDDEJAADC>,
    // @@protoc_insertion_point(field:ChessRogueQuitScRsp.retcode)
    pub retcode: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ChessRogueQuitScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChessRogueQuitScRsp {
    fn default() -> &'a ChessRogueQuitScRsp {
        <ChessRogueQuitScRsp as ::protobuf::Message>::default_instance()
    }
}

impl ChessRogueQuitScRsp {
    pub fn new() -> ChessRogueQuitScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IHNJGHALKJB::IHNJGHALKJB>(
            "LAGBGLDLGCB",
            |m: &ChessRogueQuitScRsp| { &m.LAGBGLDLGCB },
            |m: &mut ChessRogueQuitScRsp| { &mut m.LAGBGLDLGCB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FFLAPKOLHCM::FFLAPKOLHCM>(
            "HNDLHICDNPC",
            |m: &ChessRogueQuitScRsp| { &m.HNDLHICDNPC },
            |m: &mut ChessRogueQuitScRsp| { &mut m.HNDLHICDNPC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CJEMBCBCBKJ::CJEMBCBCBKJ>(
            "CHMHPCNGFAO",
            |m: &ChessRogueQuitScRsp| { &m.CHMHPCNGFAO },
            |m: &mut ChessRogueQuitScRsp| { &mut m.CHMHPCNGFAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EHANAPNJFJD::EHANAPNJFJD>(
            "MIFOLPKEOOO",
            |m: &ChessRogueQuitScRsp| { &m.MIFOLPKEOOO },
            |m: &mut ChessRogueQuitScRsp| { &mut m.MIFOLPKEOOO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JACMENOKJFM::JACMENOKJFM>(
            "BLNDMFGKPMJ",
            |m: &ChessRogueQuitScRsp| { &m.BLNDMFGKPMJ },
            |m: &mut ChessRogueQuitScRsp| { &mut m.BLNDMFGKPMJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AFABKDEFDDG::AFABKDEFDDG>(
            "LMGKMAOICGC",
            |m: &ChessRogueQuitScRsp| { &m.LMGKMAOICGC },
            |m: &mut ChessRogueQuitScRsp| { &mut m.LMGKMAOICGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CCODJOAHOLB::CCODJOAHOLB>(
            "BOIKABLFKEC",
            |m: &ChessRogueQuitScRsp| { &m.BOIKABLFKEC },
            |m: &mut ChessRogueQuitScRsp| { &mut m.BOIKABLFKEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BIPDDEJAADC::BIPDDEJAADC>(
            "OMCBCGCHLGN",
            |m: &ChessRogueQuitScRsp| { &m.OMCBCGCHLGN },
            |m: &mut ChessRogueQuitScRsp| { &mut m.OMCBCGCHLGN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &ChessRogueQuitScRsp| { &m.retcode },
            |m: &mut ChessRogueQuitScRsp| { &mut m.retcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChessRogueQuitScRsp>(
            "ChessRogueQuitScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChessRogueQuitScRsp {
    const NAME: &'static str = "ChessRogueQuitScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LAGBGLDLGCB)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HNDLHICDNPC)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CHMHPCNGFAO)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MIFOLPKEOOO)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BLNDMFGKPMJ)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LMGKMAOICGC)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BOIKABLFKEC)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OMCBCGCHLGN)?;
                },
                96 => {
                    self.retcode = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.LAGBGLDLGCB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.HNDLHICDNPC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CHMHPCNGFAO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.MIFOLPKEOOO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.BLNDMFGKPMJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LMGKMAOICGC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.BOIKABLFKEC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OMCBCGCHLGN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.retcode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.LAGBGLDLGCB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.HNDLHICDNPC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.CHMHPCNGFAO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.MIFOLPKEOOO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.BLNDMFGKPMJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.LMGKMAOICGC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.BOIKABLFKEC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.OMCBCGCHLGN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.retcode != 0 {
            os.write_uint32(12, self.retcode)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChessRogueQuitScRsp {
        ChessRogueQuitScRsp::new()
    }

    fn clear(&mut self) {
        self.LAGBGLDLGCB.clear();
        self.HNDLHICDNPC.clear();
        self.CHMHPCNGFAO.clear();
        self.MIFOLPKEOOO.clear();
        self.BLNDMFGKPMJ.clear();
        self.LMGKMAOICGC.clear();
        self.BOIKABLFKEC.clear();
        self.OMCBCGCHLGN.clear();
        self.retcode = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChessRogueQuitScRsp {
        static instance: ChessRogueQuitScRsp = ChessRogueQuitScRsp {
            LAGBGLDLGCB: ::protobuf::MessageField::none(),
            HNDLHICDNPC: ::protobuf::MessageField::none(),
            CHMHPCNGFAO: ::protobuf::MessageField::none(),
            MIFOLPKEOOO: ::protobuf::MessageField::none(),
            BLNDMFGKPMJ: ::protobuf::MessageField::none(),
            LMGKMAOICGC: ::protobuf::MessageField::none(),
            BOIKABLFKEC: ::protobuf::MessageField::none(),
            OMCBCGCHLGN: ::protobuf::MessageField::none(),
            retcode: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChessRogueQuitScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChessRogueQuitScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChessRogueQuitScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChessRogueQuitScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19ChessRogueQuitScRsp.proto\x1a\x11AFABKDEFDDG.proto\x1a\x11BIPDDEJA\
    ADC.proto\x1a\x11CCODJOAHOLB.proto\x1a\x11CJEMBCBCBKJ.proto\x1a\x11EHANA\
    PNJFJD.proto\x1a\x11FFLAPKOLHCM.proto\x1a\x11IHNJGHALKJB.proto\x1a\x11JA\
    CMENOKJFM.proto\"\xaf\x03\n\x13ChessRogueQuitScRsp\x12.\n\x0bLAGBGLDLGCB\
    \x18\t\x20\x01(\x0b2\x0c.IHNJGHALKJBR\x0bLAGBGLDLGCB\x12.\n\x0bHNDLHICDN\
    PC\x18\x06\x20\x01(\x0b2\x0c.FFLAPKOLHCMR\x0bHNDLHICDNPC\x12.\n\x0bCHMHP\
    CNGFAO\x18\x01\x20\x01(\x0b2\x0c.CJEMBCBCBKJR\x0bCHMHPCNGFAO\x12.\n\x0bM\
    IFOLPKEOOO\x18\x08\x20\x01(\x0b2\x0c.EHANAPNJFJDR\x0bMIFOLPKEOOO\x12.\n\
    \x0bBLNDMFGKPMJ\x18\x03\x20\x01(\x0b2\x0c.JACMENOKJFMR\x0bBLNDMFGKPMJ\
    \x12.\n\x0bLMGKMAOICGC\x18\x0b\x20\x01(\x0b2\x0c.AFABKDEFDDGR\x0bLMGKMAO\
    ICGC\x12.\n\x0bBOIKABLFKEC\x18\x02\x20\x01(\x0b2\x0c.CCODJOAHOLBR\x0bBOI\
    KABLFKEC\x12.\n\x0bOMCBCGCHLGN\x18\x04\x20\x01(\x0b2\x0c.BIPDDEJAADCR\
    \x0bOMCBCGCHLGN\x12\x18\n\x07retcode\x18\x0c\x20\x01(\rR\x07retcodeb\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::AFABKDEFDDG::file_descriptor().clone());
            deps.push(super::BIPDDEJAADC::file_descriptor().clone());
            deps.push(super::CCODJOAHOLB::file_descriptor().clone());
            deps.push(super::CJEMBCBCBKJ::file_descriptor().clone());
            deps.push(super::EHANAPNJFJD::file_descriptor().clone());
            deps.push(super::FFLAPKOLHCM::file_descriptor().clone());
            deps.push(super::IHNJGHALKJB::file_descriptor().clone());
            deps.push(super::JACMENOKJFM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ChessRogueQuitScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
