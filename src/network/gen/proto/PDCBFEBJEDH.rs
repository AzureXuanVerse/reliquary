// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PDCBFEBJEDH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PDCBFEBJEDH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PDCBFEBJEDH {
    // message fields
    // @@protoc_insertion_point(field:PDCBFEBJEDH.HLCDJBLKODE)
    pub HLCDJBLKODE: u32,
    // @@protoc_insertion_point(field:PDCBFEBJEDH.ILIFHHJFMIH)
    pub ILIFHHJFMIH: u32,
    // message oneof groups
    pub CBOHHPHHCEJ: ::std::option::Option<pdcbfebjedh::CBOHHPHHCEJ>,
    // special fields
    // @@protoc_insertion_point(special_field:PDCBFEBJEDH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PDCBFEBJEDH {
    fn default() -> &'a PDCBFEBJEDH {
        <PDCBFEBJEDH as ::protobuf::Message>::default_instance()
    }
}

impl PDCBFEBJEDH {
    pub fn new() -> PDCBFEBJEDH {
        ::std::default::Default::default()
    }

    // .LGHCCONCDND IHDHILFGKPC = 199;

    pub fn IHDHILFGKPC(&self) -> &super::LGHCCONCDND::LGHCCONCDND {
        match self.CBOHHPHHCEJ {
            ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(ref v)) => v,
            _ => <super::LGHCCONCDND::LGHCCONCDND as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IHDHILFGKPC(&mut self) {
        self.CBOHHPHHCEJ = ::std::option::Option::None;
    }

    pub fn has_IHDHILFGKPC(&self) -> bool {
        match self.CBOHHPHHCEJ {
            ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IHDHILFGKPC(&mut self, v: super::LGHCCONCDND::LGHCCONCDND) {
        self.CBOHHPHHCEJ = ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IHDHILFGKPC(&mut self) -> &mut super::LGHCCONCDND::LGHCCONCDND {
        if let ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(_)) = self.CBOHHPHHCEJ {
        } else {
            self.CBOHHPHHCEJ = ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(super::LGHCCONCDND::LGHCCONCDND::new()));
        }
        match self.CBOHHPHHCEJ {
            ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IHDHILFGKPC(&mut self) -> super::LGHCCONCDND::LGHCCONCDND {
        if self.has_IHDHILFGKPC() {
            match self.CBOHHPHHCEJ.take() {
                ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LGHCCONCDND::LGHCCONCDND::new()
        }
    }

    // .LACFFODHCBM HFCHCPJDBNG = 1020;

    pub fn HFCHCPJDBNG(&self) -> &super::LACFFODHCBM::LACFFODHCBM {
        match self.CBOHHPHHCEJ {
            ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(ref v)) => v,
            _ => <super::LACFFODHCBM::LACFFODHCBM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HFCHCPJDBNG(&mut self) {
        self.CBOHHPHHCEJ = ::std::option::Option::None;
    }

    pub fn has_HFCHCPJDBNG(&self) -> bool {
        match self.CBOHHPHHCEJ {
            ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HFCHCPJDBNG(&mut self, v: super::LACFFODHCBM::LACFFODHCBM) {
        self.CBOHHPHHCEJ = ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HFCHCPJDBNG(&mut self) -> &mut super::LACFFODHCBM::LACFFODHCBM {
        if let ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(_)) = self.CBOHHPHHCEJ {
        } else {
            self.CBOHHPHHCEJ = ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(super::LACFFODHCBM::LACFFODHCBM::new()));
        }
        match self.CBOHHPHHCEJ {
            ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HFCHCPJDBNG(&mut self) -> super::LACFFODHCBM::LACFFODHCBM {
        if self.has_HFCHCPJDBNG() {
            match self.CBOHHPHHCEJ.take() {
                ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LACFFODHCBM::LACFFODHCBM::new()
        }
    }

    // .IBKIPHGHHFC OLPJNEOLJIM = 1142;

    pub fn OLPJNEOLJIM(&self) -> &super::IBKIPHGHHFC::IBKIPHGHHFC {
        match self.CBOHHPHHCEJ {
            ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(ref v)) => v,
            _ => <super::IBKIPHGHHFC::IBKIPHGHHFC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OLPJNEOLJIM(&mut self) {
        self.CBOHHPHHCEJ = ::std::option::Option::None;
    }

    pub fn has_OLPJNEOLJIM(&self) -> bool {
        match self.CBOHHPHHCEJ {
            ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OLPJNEOLJIM(&mut self, v: super::IBKIPHGHHFC::IBKIPHGHHFC) {
        self.CBOHHPHHCEJ = ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OLPJNEOLJIM(&mut self) -> &mut super::IBKIPHGHHFC::IBKIPHGHHFC {
        if let ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(_)) = self.CBOHHPHHCEJ {
        } else {
            self.CBOHHPHHCEJ = ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(super::IBKIPHGHHFC::IBKIPHGHHFC::new()));
        }
        match self.CBOHHPHHCEJ {
            ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OLPJNEOLJIM(&mut self) -> super::IBKIPHGHHFC::IBKIPHGHHFC {
        if self.has_OLPJNEOLJIM() {
            match self.CBOHHPHHCEJ.take() {
                ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IBKIPHGHHFC::IBKIPHGHHFC::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HLCDJBLKODE",
            |m: &PDCBFEBJEDH| { &m.HLCDJBLKODE },
            |m: &mut PDCBFEBJEDH| { &mut m.HLCDJBLKODE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ILIFHHJFMIH",
            |m: &PDCBFEBJEDH| { &m.ILIFHHJFMIH },
            |m: &mut PDCBFEBJEDH| { &mut m.ILIFHHJFMIH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LGHCCONCDND::LGHCCONCDND>(
            "IHDHILFGKPC",
            PDCBFEBJEDH::has_IHDHILFGKPC,
            PDCBFEBJEDH::IHDHILFGKPC,
            PDCBFEBJEDH::mut_IHDHILFGKPC,
            PDCBFEBJEDH::set_IHDHILFGKPC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LACFFODHCBM::LACFFODHCBM>(
            "HFCHCPJDBNG",
            PDCBFEBJEDH::has_HFCHCPJDBNG,
            PDCBFEBJEDH::HFCHCPJDBNG,
            PDCBFEBJEDH::mut_HFCHCPJDBNG,
            PDCBFEBJEDH::set_HFCHCPJDBNG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IBKIPHGHHFC::IBKIPHGHHFC>(
            "OLPJNEOLJIM",
            PDCBFEBJEDH::has_OLPJNEOLJIM,
            PDCBFEBJEDH::OLPJNEOLJIM,
            PDCBFEBJEDH::mut_OLPJNEOLJIM,
            PDCBFEBJEDH::set_OLPJNEOLJIM,
        ));
        oneofs.push(pdcbfebjedh::CBOHHPHHCEJ::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PDCBFEBJEDH>(
            "PDCBFEBJEDH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PDCBFEBJEDH {
    const NAME: &'static str = "PDCBFEBJEDH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.HLCDJBLKODE = is.read_uint32()?;
                },
                104 => {
                    self.ILIFHHJFMIH = is.read_uint32()?;
                },
                1594 => {
                    self.CBOHHPHHCEJ = ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(is.read_message()?));
                },
                8162 => {
                    self.CBOHHPHHCEJ = ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(is.read_message()?));
                },
                9138 => {
                    self.CBOHHPHHCEJ = ::std::option::Option::Some(pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HLCDJBLKODE != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.HLCDJBLKODE);
        }
        if self.ILIFHHJFMIH != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.ILIFHHJFMIH);
        }
        if let ::std::option::Option::Some(ref v) = self.CBOHHPHHCEJ {
            match v {
                &pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HLCDJBLKODE != 0 {
            os.write_uint32(9, self.HLCDJBLKODE)?;
        }
        if self.ILIFHHJFMIH != 0 {
            os.write_uint32(13, self.ILIFHHJFMIH)?;
        }
        if let ::std::option::Option::Some(ref v) = self.CBOHHPHHCEJ {
            match v {
                &pdcbfebjedh::CBOHHPHHCEJ::IHDHILFGKPC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(199, v, os)?;
                },
                &pdcbfebjedh::CBOHHPHHCEJ::HFCHCPJDBNG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1020, v, os)?;
                },
                &pdcbfebjedh::CBOHHPHHCEJ::OLPJNEOLJIM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1142, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PDCBFEBJEDH {
        PDCBFEBJEDH::new()
    }

    fn clear(&mut self) {
        self.HLCDJBLKODE = 0;
        self.ILIFHHJFMIH = 0;
        self.CBOHHPHHCEJ = ::std::option::Option::None;
        self.CBOHHPHHCEJ = ::std::option::Option::None;
        self.CBOHHPHHCEJ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PDCBFEBJEDH {
        static instance: PDCBFEBJEDH = PDCBFEBJEDH {
            HLCDJBLKODE: 0,
            ILIFHHJFMIH: 0,
            CBOHHPHHCEJ: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PDCBFEBJEDH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PDCBFEBJEDH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PDCBFEBJEDH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PDCBFEBJEDH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PDCBFEBJEDH`
pub mod pdcbfebjedh {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:PDCBFEBJEDH.CBOHHPHHCEJ)
    pub enum CBOHHPHHCEJ {
        // @@protoc_insertion_point(oneof_field:PDCBFEBJEDH.IHDHILFGKPC)
        IHDHILFGKPC(super::super::LGHCCONCDND::LGHCCONCDND),
        // @@protoc_insertion_point(oneof_field:PDCBFEBJEDH.HFCHCPJDBNG)
        HFCHCPJDBNG(super::super::LACFFODHCBM::LACFFODHCBM),
        // @@protoc_insertion_point(oneof_field:PDCBFEBJEDH.OLPJNEOLJIM)
        OLPJNEOLJIM(super::super::IBKIPHGHHFC::IBKIPHGHHFC),
    }

    impl ::protobuf::Oneof for CBOHHPHHCEJ {
    }

    impl ::protobuf::OneofFull for CBOHHPHHCEJ {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PDCBFEBJEDH as ::protobuf::MessageFull>::descriptor().oneof_by_name("CBOHHPHHCEJ").unwrap()).clone()
        }
    }

    impl CBOHHPHHCEJ {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<CBOHHPHHCEJ>("CBOHHPHHCEJ")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11PDCBFEBJEDH.proto\x1a\x11IBKIPHGHHFC.proto\x1a\x11LACFFODHCBM.prot\
    o\x1a\x11LGHCCONCDND.proto\"\xf9\x01\n\x0bPDCBFEBJEDH\x12\x20\n\x0bHLCDJ\
    BLKODE\x18\t\x20\x01(\rR\x0bHLCDJBLKODE\x12\x20\n\x0bILIFHHJFMIH\x18\r\
    \x20\x01(\rR\x0bILIFHHJFMIH\x121\n\x0bIHDHILFGKPC\x18\xc7\x01\x20\x01(\
    \x0b2\x0c.LGHCCONCDNDH\0R\x0bIHDHILFGKPC\x121\n\x0bHFCHCPJDBNG\x18\xfc\
    \x07\x20\x01(\x0b2\x0c.LACFFODHCBMH\0R\x0bHFCHCPJDBNG\x121\n\x0bOLPJNEOL\
    JIM\x18\xf6\x08\x20\x01(\x0b2\x0c.IBKIPHGHHFCH\0R\x0bOLPJNEOLJIMB\r\n\
    \x0bCBOHHPHHCEJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::IBKIPHGHHFC::file_descriptor().clone());
            deps.push(super::LACFFODHCBM::file_descriptor().clone());
            deps.push(super::LGHCCONCDND::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PDCBFEBJEDH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
