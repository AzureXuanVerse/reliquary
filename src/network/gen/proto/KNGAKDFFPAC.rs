// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `KNGAKDFFPAC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:KNGAKDFFPAC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KNGAKDFFPAC {
    // message fields
    // @@protoc_insertion_point(field:KNGAKDFFPAC.IBLACDLDIKB)
    pub IBLACDLDIKB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:KNGAKDFFPAC.INMJJGOEMPO)
    pub INMJJGOEMPO: u32,
    // @@protoc_insertion_point(field:KNGAKDFFPAC.JCABAGAFILO)
    pub JCABAGAFILO: u32,
    // @@protoc_insertion_point(field:KNGAKDFFPAC.PLBDCHFPHFM)
    pub PLBDCHFPHFM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:KNGAKDFFPAC.PNJIJAJMCMG)
    pub PNJIJAJMCMG: u32,
    // @@protoc_insertion_point(field:KNGAKDFFPAC.CGLIMNDCKBI)
    pub CGLIMNDCKBI: u32,
    // @@protoc_insertion_point(field:KNGAKDFFPAC.ANKIOLGBBHB)
    pub ANKIOLGBBHB: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:KNGAKDFFPAC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KNGAKDFFPAC {
    fn default() -> &'a KNGAKDFFPAC {
        <KNGAKDFFPAC as ::protobuf::Message>::default_instance()
    }
}

impl KNGAKDFFPAC {
    pub fn new() -> KNGAKDFFPAC {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IBLACDLDIKB",
            |m: &KNGAKDFFPAC| { &m.IBLACDLDIKB },
            |m: &mut KNGAKDFFPAC| { &mut m.IBLACDLDIKB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "INMJJGOEMPO",
            |m: &KNGAKDFFPAC| { &m.INMJJGOEMPO },
            |m: &mut KNGAKDFFPAC| { &mut m.INMJJGOEMPO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JCABAGAFILO",
            |m: &KNGAKDFFPAC| { &m.JCABAGAFILO },
            |m: &mut KNGAKDFFPAC| { &mut m.JCABAGAFILO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PLBDCHFPHFM",
            |m: &KNGAKDFFPAC| { &m.PLBDCHFPHFM },
            |m: &mut KNGAKDFFPAC| { &mut m.PLBDCHFPHFM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PNJIJAJMCMG",
            |m: &KNGAKDFFPAC| { &m.PNJIJAJMCMG },
            |m: &mut KNGAKDFFPAC| { &mut m.PNJIJAJMCMG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CGLIMNDCKBI",
            |m: &KNGAKDFFPAC| { &m.CGLIMNDCKBI },
            |m: &mut KNGAKDFFPAC| { &mut m.CGLIMNDCKBI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ANKIOLGBBHB",
            |m: &KNGAKDFFPAC| { &m.ANKIOLGBBHB },
            |m: &mut KNGAKDFFPAC| { &mut m.ANKIOLGBBHB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KNGAKDFFPAC>(
            "KNGAKDFFPAC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KNGAKDFFPAC {
    const NAME: &'static str = "KNGAKDFFPAC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.IBLACDLDIKB)?;
                },
                104 => {
                    self.IBLACDLDIKB.push(is.read_uint32()?);
                },
                96 => {
                    self.INMJJGOEMPO = is.read_uint32()?;
                },
                56 => {
                    self.JCABAGAFILO = is.read_uint32()?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.PLBDCHFPHFM)?;
                },
                16 => {
                    self.PLBDCHFPHFM.push(is.read_uint32()?);
                },
                120 => {
                    self.PNJIJAJMCMG = is.read_uint32()?;
                },
                112 => {
                    self.CGLIMNDCKBI = is.read_uint32()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.ANKIOLGBBHB)?;
                },
                64 => {
                    self.ANKIOLGBBHB.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.IBLACDLDIKB {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        if self.INMJJGOEMPO != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.INMJJGOEMPO);
        }
        if self.JCABAGAFILO != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.JCABAGAFILO);
        }
        for value in &self.PLBDCHFPHFM {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        if self.PNJIJAJMCMG != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.PNJIJAJMCMG);
        }
        if self.CGLIMNDCKBI != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.CGLIMNDCKBI);
        }
        for value in &self.ANKIOLGBBHB {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.IBLACDLDIKB {
            os.write_uint32(13, *v)?;
        };
        if self.INMJJGOEMPO != 0 {
            os.write_uint32(12, self.INMJJGOEMPO)?;
        }
        if self.JCABAGAFILO != 0 {
            os.write_uint32(7, self.JCABAGAFILO)?;
        }
        for v in &self.PLBDCHFPHFM {
            os.write_uint32(2, *v)?;
        };
        if self.PNJIJAJMCMG != 0 {
            os.write_uint32(15, self.PNJIJAJMCMG)?;
        }
        if self.CGLIMNDCKBI != 0 {
            os.write_uint32(14, self.CGLIMNDCKBI)?;
        }
        for v in &self.ANKIOLGBBHB {
            os.write_uint32(8, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KNGAKDFFPAC {
        KNGAKDFFPAC::new()
    }

    fn clear(&mut self) {
        self.IBLACDLDIKB.clear();
        self.INMJJGOEMPO = 0;
        self.JCABAGAFILO = 0;
        self.PLBDCHFPHFM.clear();
        self.PNJIJAJMCMG = 0;
        self.CGLIMNDCKBI = 0;
        self.ANKIOLGBBHB.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KNGAKDFFPAC {
        static instance: KNGAKDFFPAC = KNGAKDFFPAC {
            IBLACDLDIKB: ::std::vec::Vec::new(),
            INMJJGOEMPO: 0,
            JCABAGAFILO: 0,
            PLBDCHFPHFM: ::std::vec::Vec::new(),
            PNJIJAJMCMG: 0,
            CGLIMNDCKBI: 0,
            ANKIOLGBBHB: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KNGAKDFFPAC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KNGAKDFFPAC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KNGAKDFFPAC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KNGAKDFFPAC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11KNGAKDFFPAC.proto\"\xfb\x01\n\x0bKNGAKDFFPAC\x12\x20\n\x0bIBLACDLD\
    IKB\x18\r\x20\x03(\rR\x0bIBLACDLDIKB\x12\x20\n\x0bINMJJGOEMPO\x18\x0c\
    \x20\x01(\rR\x0bINMJJGOEMPO\x12\x20\n\x0bJCABAGAFILO\x18\x07\x20\x01(\rR\
    \x0bJCABAGAFILO\x12\x20\n\x0bPLBDCHFPHFM\x18\x02\x20\x03(\rR\x0bPLBDCHFP\
    HFM\x12\x20\n\x0bPNJIJAJMCMG\x18\x0f\x20\x01(\rR\x0bPNJIJAJMCMG\x12\x20\
    \n\x0bCGLIMNDCKBI\x18\x0e\x20\x01(\rR\x0bCGLIMNDCKBI\x12\x20\n\x0bANKIOL\
    GBBHB\x18\x08\x20\x03(\rR\x0bANKIOLGBBHBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(KNGAKDFFPAC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
