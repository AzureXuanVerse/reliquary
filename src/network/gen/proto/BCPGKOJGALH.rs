// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BCPGKOJGALH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BCPGKOJGALH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BCPGKOJGALH {
    // message fields
    // @@protoc_insertion_point(field:BCPGKOJGALH.OBBCMJFANIO)
    pub OBBCMJFANIO: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.DLPHKDBOPEJ)
    pub DLPHKDBOPEJ: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.LMDCFEKCCGM)
    pub LMDCFEKCCGM: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.MODAPKFGHFM)
    pub MODAPKFGHFM: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.AKLIKCFFBBB)
    pub AKLIKCFFBBB: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.DKNNNPHGCJK)
    pub DKNNNPHGCJK: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.OAACKHACNBA)
    pub OAACKHACNBA: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.FFAEHLFLPPN)
    pub FFAEHLFLPPN: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.JIAINHJCBJF)
    pub JIAINHJCBJF: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.KLFAKFGCGFG)
    pub KLFAKFGCGFG: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.FFKNMAONGIB)
    pub FFKNMAONGIB: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.CFKIAMFJPKB)
    pub CFKIAMFJPKB: u32,
    // @@protoc_insertion_point(field:BCPGKOJGALH.JAKNIEKONCD)
    pub JAKNIEKONCD: u32,
    // special fields
    // @@protoc_insertion_point(special_field:BCPGKOJGALH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BCPGKOJGALH {
    fn default() -> &'a BCPGKOJGALH {
        <BCPGKOJGALH as ::protobuf::Message>::default_instance()
    }
}

impl BCPGKOJGALH {
    pub fn new() -> BCPGKOJGALH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBBCMJFANIO",
            |m: &BCPGKOJGALH| { &m.OBBCMJFANIO },
            |m: &mut BCPGKOJGALH| { &mut m.OBBCMJFANIO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DLPHKDBOPEJ",
            |m: &BCPGKOJGALH| { &m.DLPHKDBOPEJ },
            |m: &mut BCPGKOJGALH| { &mut m.DLPHKDBOPEJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LMDCFEKCCGM",
            |m: &BCPGKOJGALH| { &m.LMDCFEKCCGM },
            |m: &mut BCPGKOJGALH| { &mut m.LMDCFEKCCGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MODAPKFGHFM",
            |m: &BCPGKOJGALH| { &m.MODAPKFGHFM },
            |m: &mut BCPGKOJGALH| { &mut m.MODAPKFGHFM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AKLIKCFFBBB",
            |m: &BCPGKOJGALH| { &m.AKLIKCFFBBB },
            |m: &mut BCPGKOJGALH| { &mut m.AKLIKCFFBBB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKNNNPHGCJK",
            |m: &BCPGKOJGALH| { &m.DKNNNPHGCJK },
            |m: &mut BCPGKOJGALH| { &mut m.DKNNNPHGCJK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OAACKHACNBA",
            |m: &BCPGKOJGALH| { &m.OAACKHACNBA },
            |m: &mut BCPGKOJGALH| { &mut m.OAACKHACNBA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FFAEHLFLPPN",
            |m: &BCPGKOJGALH| { &m.FFAEHLFLPPN },
            |m: &mut BCPGKOJGALH| { &mut m.FFAEHLFLPPN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JIAINHJCBJF",
            |m: &BCPGKOJGALH| { &m.JIAINHJCBJF },
            |m: &mut BCPGKOJGALH| { &mut m.JIAINHJCBJF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KLFAKFGCGFG",
            |m: &BCPGKOJGALH| { &m.KLFAKFGCGFG },
            |m: &mut BCPGKOJGALH| { &mut m.KLFAKFGCGFG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FFKNMAONGIB",
            |m: &BCPGKOJGALH| { &m.FFKNMAONGIB },
            |m: &mut BCPGKOJGALH| { &mut m.FFKNMAONGIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CFKIAMFJPKB",
            |m: &BCPGKOJGALH| { &m.CFKIAMFJPKB },
            |m: &mut BCPGKOJGALH| { &mut m.CFKIAMFJPKB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JAKNIEKONCD",
            |m: &BCPGKOJGALH| { &m.JAKNIEKONCD },
            |m: &mut BCPGKOJGALH| { &mut m.JAKNIEKONCD },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BCPGKOJGALH>(
            "BCPGKOJGALH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BCPGKOJGALH {
    const NAME: &'static str = "BCPGKOJGALH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.OBBCMJFANIO = is.read_uint32()?;
                },
                16 => {
                    self.DLPHKDBOPEJ = is.read_uint32()?;
                },
                24 => {
                    self.LMDCFEKCCGM = is.read_uint32()?;
                },
                32 => {
                    self.MODAPKFGHFM = is.read_uint32()?;
                },
                40 => {
                    self.AKLIKCFFBBB = is.read_uint32()?;
                },
                48 => {
                    self.DKNNNPHGCJK = is.read_uint32()?;
                },
                56 => {
                    self.OAACKHACNBA = is.read_uint32()?;
                },
                64 => {
                    self.FFAEHLFLPPN = is.read_uint32()?;
                },
                72 => {
                    self.JIAINHJCBJF = is.read_uint32()?;
                },
                80 => {
                    self.KLFAKFGCGFG = is.read_uint32()?;
                },
                88 => {
                    self.FFKNMAONGIB = is.read_uint32()?;
                },
                96 => {
                    self.CFKIAMFJPKB = is.read_uint32()?;
                },
                104 => {
                    self.JAKNIEKONCD = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OBBCMJFANIO != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.OBBCMJFANIO);
        }
        if self.DLPHKDBOPEJ != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.DLPHKDBOPEJ);
        }
        if self.LMDCFEKCCGM != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.LMDCFEKCCGM);
        }
        if self.MODAPKFGHFM != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.MODAPKFGHFM);
        }
        if self.AKLIKCFFBBB != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.AKLIKCFFBBB);
        }
        if self.DKNNNPHGCJK != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.DKNNNPHGCJK);
        }
        if self.OAACKHACNBA != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.OAACKHACNBA);
        }
        if self.FFAEHLFLPPN != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.FFAEHLFLPPN);
        }
        if self.JIAINHJCBJF != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.JIAINHJCBJF);
        }
        if self.KLFAKFGCGFG != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.KLFAKFGCGFG);
        }
        if self.FFKNMAONGIB != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.FFKNMAONGIB);
        }
        if self.CFKIAMFJPKB != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.CFKIAMFJPKB);
        }
        if self.JAKNIEKONCD != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.JAKNIEKONCD);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OBBCMJFANIO != 0 {
            os.write_uint32(1, self.OBBCMJFANIO)?;
        }
        if self.DLPHKDBOPEJ != 0 {
            os.write_uint32(2, self.DLPHKDBOPEJ)?;
        }
        if self.LMDCFEKCCGM != 0 {
            os.write_uint32(3, self.LMDCFEKCCGM)?;
        }
        if self.MODAPKFGHFM != 0 {
            os.write_uint32(4, self.MODAPKFGHFM)?;
        }
        if self.AKLIKCFFBBB != 0 {
            os.write_uint32(5, self.AKLIKCFFBBB)?;
        }
        if self.DKNNNPHGCJK != 0 {
            os.write_uint32(6, self.DKNNNPHGCJK)?;
        }
        if self.OAACKHACNBA != 0 {
            os.write_uint32(7, self.OAACKHACNBA)?;
        }
        if self.FFAEHLFLPPN != 0 {
            os.write_uint32(8, self.FFAEHLFLPPN)?;
        }
        if self.JIAINHJCBJF != 0 {
            os.write_uint32(9, self.JIAINHJCBJF)?;
        }
        if self.KLFAKFGCGFG != 0 {
            os.write_uint32(10, self.KLFAKFGCGFG)?;
        }
        if self.FFKNMAONGIB != 0 {
            os.write_uint32(11, self.FFKNMAONGIB)?;
        }
        if self.CFKIAMFJPKB != 0 {
            os.write_uint32(12, self.CFKIAMFJPKB)?;
        }
        if self.JAKNIEKONCD != 0 {
            os.write_uint32(13, self.JAKNIEKONCD)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BCPGKOJGALH {
        BCPGKOJGALH::new()
    }

    fn clear(&mut self) {
        self.OBBCMJFANIO = 0;
        self.DLPHKDBOPEJ = 0;
        self.LMDCFEKCCGM = 0;
        self.MODAPKFGHFM = 0;
        self.AKLIKCFFBBB = 0;
        self.DKNNNPHGCJK = 0;
        self.OAACKHACNBA = 0;
        self.FFAEHLFLPPN = 0;
        self.JIAINHJCBJF = 0;
        self.KLFAKFGCGFG = 0;
        self.FFKNMAONGIB = 0;
        self.CFKIAMFJPKB = 0;
        self.JAKNIEKONCD = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BCPGKOJGALH {
        static instance: BCPGKOJGALH = BCPGKOJGALH {
            OBBCMJFANIO: 0,
            DLPHKDBOPEJ: 0,
            LMDCFEKCCGM: 0,
            MODAPKFGHFM: 0,
            AKLIKCFFBBB: 0,
            DKNNNPHGCJK: 0,
            OAACKHACNBA: 0,
            FFAEHLFLPPN: 0,
            JIAINHJCBJF: 0,
            KLFAKFGCGFG: 0,
            FFKNMAONGIB: 0,
            CFKIAMFJPKB: 0,
            JAKNIEKONCD: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BCPGKOJGALH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BCPGKOJGALH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BCPGKOJGALH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BCPGKOJGALH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BCPGKOJGALH.proto\"\xc7\x03\n\x0bBCPGKOJGALH\x12\x20\n\x0bOBBCMJFA\
    NIO\x18\x01\x20\x01(\rR\x0bOBBCMJFANIO\x12\x20\n\x0bDLPHKDBOPEJ\x18\x02\
    \x20\x01(\rR\x0bDLPHKDBOPEJ\x12\x20\n\x0bLMDCFEKCCGM\x18\x03\x20\x01(\rR\
    \x0bLMDCFEKCCGM\x12\x20\n\x0bMODAPKFGHFM\x18\x04\x20\x01(\rR\x0bMODAPKFG\
    HFM\x12\x20\n\x0bAKLIKCFFBBB\x18\x05\x20\x01(\rR\x0bAKLIKCFFBBB\x12\x20\
    \n\x0bDKNNNPHGCJK\x18\x06\x20\x01(\rR\x0bDKNNNPHGCJK\x12\x20\n\x0bOAACKH\
    ACNBA\x18\x07\x20\x01(\rR\x0bOAACKHACNBA\x12\x20\n\x0bFFAEHLFLPPN\x18\
    \x08\x20\x01(\rR\x0bFFAEHLFLPPN\x12\x20\n\x0bJIAINHJCBJF\x18\t\x20\x01(\
    \rR\x0bJIAINHJCBJF\x12\x20\n\x0bKLFAKFGCGFG\x18\n\x20\x01(\rR\x0bKLFAKFG\
    CGFG\x12\x20\n\x0bFFKNMAONGIB\x18\x0b\x20\x01(\rR\x0bFFKNMAONGIB\x12\x20\
    \n\x0bCFKIAMFJPKB\x18\x0c\x20\x01(\rR\x0bCFKIAMFJPKB\x12\x20\n\x0bJAKNIE\
    KONCD\x18\r\x20\x01(\rR\x0bJAKNIEKONCDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BCPGKOJGALH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
