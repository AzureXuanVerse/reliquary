// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MLBKADJEBNA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MLBKADJEBNA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MLBKADJEBNA {
    // message fields
    // @@protoc_insertion_point(field:MLBKADJEBNA.JBDJJGLGIAP)
    pub JBDJJGLGIAP: u32,
    // @@protoc_insertion_point(field:MLBKADJEBNA.CEOJMJKPMIE)
    pub CEOJMJKPMIE: u32,
    // @@protoc_insertion_point(field:MLBKADJEBNA.GPOLPHBKPEE)
    pub GPOLPHBKPEE: u32,
    // @@protoc_insertion_point(field:MLBKADJEBNA.BNBMHICNNAH)
    pub BNBMHICNNAH: u32,
    // @@protoc_insertion_point(field:MLBKADJEBNA.ACAJKFKMLHN)
    pub ACAJKFKMLHN: u32,
    // @@protoc_insertion_point(field:MLBKADJEBNA.MDIIGCHEBLF)
    pub MDIIGCHEBLF: u32,
    // @@protoc_insertion_point(field:MLBKADJEBNA.IPGIPFBAACF)
    pub IPGIPFBAACF: u32,
    // @@protoc_insertion_point(field:MLBKADJEBNA.PGCBICDHLAF)
    pub PGCBICDHLAF: u32,
    // @@protoc_insertion_point(field:MLBKADJEBNA.PFHLIBNMHAI)
    pub PFHLIBNMHAI: u32,
    // @@protoc_insertion_point(field:MLBKADJEBNA.FHODBAEIPJN)
    pub FHODBAEIPJN: u32,
    // special fields
    // @@protoc_insertion_point(special_field:MLBKADJEBNA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MLBKADJEBNA {
    fn default() -> &'a MLBKADJEBNA {
        <MLBKADJEBNA as ::protobuf::Message>::default_instance()
    }
}

impl MLBKADJEBNA {
    pub fn new() -> MLBKADJEBNA {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JBDJJGLGIAP",
            |m: &MLBKADJEBNA| { &m.JBDJJGLGIAP },
            |m: &mut MLBKADJEBNA| { &mut m.JBDJJGLGIAP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CEOJMJKPMIE",
            |m: &MLBKADJEBNA| { &m.CEOJMJKPMIE },
            |m: &mut MLBKADJEBNA| { &mut m.CEOJMJKPMIE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GPOLPHBKPEE",
            |m: &MLBKADJEBNA| { &m.GPOLPHBKPEE },
            |m: &mut MLBKADJEBNA| { &mut m.GPOLPHBKPEE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BNBMHICNNAH",
            |m: &MLBKADJEBNA| { &m.BNBMHICNNAH },
            |m: &mut MLBKADJEBNA| { &mut m.BNBMHICNNAH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACAJKFKMLHN",
            |m: &MLBKADJEBNA| { &m.ACAJKFKMLHN },
            |m: &mut MLBKADJEBNA| { &mut m.ACAJKFKMLHN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MDIIGCHEBLF",
            |m: &MLBKADJEBNA| { &m.MDIIGCHEBLF },
            |m: &mut MLBKADJEBNA| { &mut m.MDIIGCHEBLF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IPGIPFBAACF",
            |m: &MLBKADJEBNA| { &m.IPGIPFBAACF },
            |m: &mut MLBKADJEBNA| { &mut m.IPGIPFBAACF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PGCBICDHLAF",
            |m: &MLBKADJEBNA| { &m.PGCBICDHLAF },
            |m: &mut MLBKADJEBNA| { &mut m.PGCBICDHLAF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PFHLIBNMHAI",
            |m: &MLBKADJEBNA| { &m.PFHLIBNMHAI },
            |m: &mut MLBKADJEBNA| { &mut m.PFHLIBNMHAI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FHODBAEIPJN",
            |m: &MLBKADJEBNA| { &m.FHODBAEIPJN },
            |m: &mut MLBKADJEBNA| { &mut m.FHODBAEIPJN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MLBKADJEBNA>(
            "MLBKADJEBNA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MLBKADJEBNA {
    const NAME: &'static str = "MLBKADJEBNA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.JBDJJGLGIAP = is.read_uint32()?;
                },
                16 => {
                    self.CEOJMJKPMIE = is.read_uint32()?;
                },
                24 => {
                    self.GPOLPHBKPEE = is.read_uint32()?;
                },
                32 => {
                    self.BNBMHICNNAH = is.read_uint32()?;
                },
                40 => {
                    self.ACAJKFKMLHN = is.read_uint32()?;
                },
                48 => {
                    self.MDIIGCHEBLF = is.read_uint32()?;
                },
                56 => {
                    self.IPGIPFBAACF = is.read_uint32()?;
                },
                64 => {
                    self.PGCBICDHLAF = is.read_uint32()?;
                },
                72 => {
                    self.PFHLIBNMHAI = is.read_uint32()?;
                },
                80 => {
                    self.FHODBAEIPJN = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.JBDJJGLGIAP != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.JBDJJGLGIAP);
        }
        if self.CEOJMJKPMIE != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.CEOJMJKPMIE);
        }
        if self.GPOLPHBKPEE != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.GPOLPHBKPEE);
        }
        if self.BNBMHICNNAH != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.BNBMHICNNAH);
        }
        if self.ACAJKFKMLHN != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.ACAJKFKMLHN);
        }
        if self.MDIIGCHEBLF != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.MDIIGCHEBLF);
        }
        if self.IPGIPFBAACF != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.IPGIPFBAACF);
        }
        if self.PGCBICDHLAF != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.PGCBICDHLAF);
        }
        if self.PFHLIBNMHAI != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.PFHLIBNMHAI);
        }
        if self.FHODBAEIPJN != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.FHODBAEIPJN);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.JBDJJGLGIAP != 0 {
            os.write_uint32(1, self.JBDJJGLGIAP)?;
        }
        if self.CEOJMJKPMIE != 0 {
            os.write_uint32(2, self.CEOJMJKPMIE)?;
        }
        if self.GPOLPHBKPEE != 0 {
            os.write_uint32(3, self.GPOLPHBKPEE)?;
        }
        if self.BNBMHICNNAH != 0 {
            os.write_uint32(4, self.BNBMHICNNAH)?;
        }
        if self.ACAJKFKMLHN != 0 {
            os.write_uint32(5, self.ACAJKFKMLHN)?;
        }
        if self.MDIIGCHEBLF != 0 {
            os.write_uint32(6, self.MDIIGCHEBLF)?;
        }
        if self.IPGIPFBAACF != 0 {
            os.write_uint32(7, self.IPGIPFBAACF)?;
        }
        if self.PGCBICDHLAF != 0 {
            os.write_uint32(8, self.PGCBICDHLAF)?;
        }
        if self.PFHLIBNMHAI != 0 {
            os.write_uint32(9, self.PFHLIBNMHAI)?;
        }
        if self.FHODBAEIPJN != 0 {
            os.write_uint32(10, self.FHODBAEIPJN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MLBKADJEBNA {
        MLBKADJEBNA::new()
    }

    fn clear(&mut self) {
        self.JBDJJGLGIAP = 0;
        self.CEOJMJKPMIE = 0;
        self.GPOLPHBKPEE = 0;
        self.BNBMHICNNAH = 0;
        self.ACAJKFKMLHN = 0;
        self.MDIIGCHEBLF = 0;
        self.IPGIPFBAACF = 0;
        self.PGCBICDHLAF = 0;
        self.PFHLIBNMHAI = 0;
        self.FHODBAEIPJN = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MLBKADJEBNA {
        static instance: MLBKADJEBNA = MLBKADJEBNA {
            JBDJJGLGIAP: 0,
            CEOJMJKPMIE: 0,
            GPOLPHBKPEE: 0,
            BNBMHICNNAH: 0,
            ACAJKFKMLHN: 0,
            MDIIGCHEBLF: 0,
            IPGIPFBAACF: 0,
            PGCBICDHLAF: 0,
            PFHLIBNMHAI: 0,
            FHODBAEIPJN: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MLBKADJEBNA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MLBKADJEBNA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MLBKADJEBNA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MLBKADJEBNA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MLBKADJEBNA.proto\"\xe1\x02\n\x0bMLBKADJEBNA\x12\x20\n\x0bJBDJJGLG\
    IAP\x18\x01\x20\x01(\rR\x0bJBDJJGLGIAP\x12\x20\n\x0bCEOJMJKPMIE\x18\x02\
    \x20\x01(\rR\x0bCEOJMJKPMIE\x12\x20\n\x0bGPOLPHBKPEE\x18\x03\x20\x01(\rR\
    \x0bGPOLPHBKPEE\x12\x20\n\x0bBNBMHICNNAH\x18\x04\x20\x01(\rR\x0bBNBMHICN\
    NAH\x12\x20\n\x0bACAJKFKMLHN\x18\x05\x20\x01(\rR\x0bACAJKFKMLHN\x12\x20\
    \n\x0bMDIIGCHEBLF\x18\x06\x20\x01(\rR\x0bMDIIGCHEBLF\x12\x20\n\x0bIPGIPF\
    BAACF\x18\x07\x20\x01(\rR\x0bIPGIPFBAACF\x12\x20\n\x0bPGCBICDHLAF\x18\
    \x08\x20\x01(\rR\x0bPGCBICDHLAF\x12\x20\n\x0bPFHLIBNMHAI\x18\t\x20\x01(\
    \rR\x0bPFHLIBNMHAI\x12\x20\n\x0bFHODBAEIPJN\x18\n\x20\x01(\rR\x0bFHODBAE\
    IPJNb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MLBKADJEBNA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
