// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `NEKEEJIKGKJ.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:NEKEEJIKGKJ)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NEKEEJIKGKJ {
    // message fields
    // @@protoc_insertion_point(field:NEKEEJIKGKJ.GOOIEHKAGLC)
    pub GOOIEHKAGLC: ::protobuf::MessageField<super::PKANLCNEDOC::PKANLCNEDOC>,
    // @@protoc_insertion_point(field:NEKEEJIKGKJ.IGGNGJGPCLK)
    pub IGGNGJGPCLK: ::protobuf::MessageField<super::CJOIECNKEGD::CJOIECNKEGD>,
    // @@protoc_insertion_point(field:NEKEEJIKGKJ.JKOCJIMAGBN)
    pub JKOCJIMAGBN: ::protobuf::MessageField<super::FGACBPEEBEL::FGACBPEEBEL>,
    // @@protoc_insertion_point(field:NEKEEJIKGKJ.HOJJFBAEBDA)
    pub HOJJFBAEBDA: ::protobuf::MessageField<super::JHGGMOKNOJB::JHGGMOKNOJB>,
    // @@protoc_insertion_point(field:NEKEEJIKGKJ.CBBFEFKKNPB)
    pub CBBFEFKKNPB: ::protobuf::MessageField<super::NOFEAJCBDOA::NOFEAJCBDOA>,
    // @@protoc_insertion_point(field:NEKEEJIKGKJ.EBKNNOPMDCG)
    pub EBKNNOPMDCG: ::protobuf::MessageField<super::JLOBAJOINGI::JLOBAJOINGI>,
    // @@protoc_insertion_point(field:NEKEEJIKGKJ.DOGFMMDKGDC)
    pub DOGFMMDKGDC: ::protobuf::MessageField<super::FIIDPGGKANO::FIIDPGGKANO>,
    // @@protoc_insertion_point(field:NEKEEJIKGKJ.GFJENINMLLG)
    pub GFJENINMLLG: ::protobuf::MessageField<super::DBKIKLKEMMP::DBKIKLKEMMP>,
    // special fields
    // @@protoc_insertion_point(special_field:NEKEEJIKGKJ.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NEKEEJIKGKJ {
    fn default() -> &'a NEKEEJIKGKJ {
        <NEKEEJIKGKJ as ::protobuf::Message>::default_instance()
    }
}

impl NEKEEJIKGKJ {
    pub fn new() -> NEKEEJIKGKJ {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PKANLCNEDOC::PKANLCNEDOC>(
            "GOOIEHKAGLC",
            |m: &NEKEEJIKGKJ| { &m.GOOIEHKAGLC },
            |m: &mut NEKEEJIKGKJ| { &mut m.GOOIEHKAGLC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CJOIECNKEGD::CJOIECNKEGD>(
            "IGGNGJGPCLK",
            |m: &NEKEEJIKGKJ| { &m.IGGNGJGPCLK },
            |m: &mut NEKEEJIKGKJ| { &mut m.IGGNGJGPCLK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FGACBPEEBEL::FGACBPEEBEL>(
            "JKOCJIMAGBN",
            |m: &NEKEEJIKGKJ| { &m.JKOCJIMAGBN },
            |m: &mut NEKEEJIKGKJ| { &mut m.JKOCJIMAGBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JHGGMOKNOJB::JHGGMOKNOJB>(
            "HOJJFBAEBDA",
            |m: &NEKEEJIKGKJ| { &m.HOJJFBAEBDA },
            |m: &mut NEKEEJIKGKJ| { &mut m.HOJJFBAEBDA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NOFEAJCBDOA::NOFEAJCBDOA>(
            "CBBFEFKKNPB",
            |m: &NEKEEJIKGKJ| { &m.CBBFEFKKNPB },
            |m: &mut NEKEEJIKGKJ| { &mut m.CBBFEFKKNPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JLOBAJOINGI::JLOBAJOINGI>(
            "EBKNNOPMDCG",
            |m: &NEKEEJIKGKJ| { &m.EBKNNOPMDCG },
            |m: &mut NEKEEJIKGKJ| { &mut m.EBKNNOPMDCG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FIIDPGGKANO::FIIDPGGKANO>(
            "DOGFMMDKGDC",
            |m: &NEKEEJIKGKJ| { &m.DOGFMMDKGDC },
            |m: &mut NEKEEJIKGKJ| { &mut m.DOGFMMDKGDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DBKIKLKEMMP::DBKIKLKEMMP>(
            "GFJENINMLLG",
            |m: &NEKEEJIKGKJ| { &m.GFJENINMLLG },
            |m: &mut NEKEEJIKGKJ| { &mut m.GFJENINMLLG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NEKEEJIKGKJ>(
            "NEKEEJIKGKJ",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NEKEEJIKGKJ {
    const NAME: &'static str = "NEKEEJIKGKJ";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GOOIEHKAGLC)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IGGNGJGPCLK)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JKOCJIMAGBN)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HOJJFBAEBDA)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CBBFEFKKNPB)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EBKNNOPMDCG)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DOGFMMDKGDC)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GFJENINMLLG)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.GOOIEHKAGLC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.IGGNGJGPCLK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JKOCJIMAGBN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.HOJJFBAEBDA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CBBFEFKKNPB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.EBKNNOPMDCG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DOGFMMDKGDC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.GFJENINMLLG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.GOOIEHKAGLC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.IGGNGJGPCLK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.JKOCJIMAGBN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.HOJJFBAEBDA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.CBBFEFKKNPB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.EBKNNOPMDCG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.DOGFMMDKGDC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.GFJENINMLLG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NEKEEJIKGKJ {
        NEKEEJIKGKJ::new()
    }

    fn clear(&mut self) {
        self.GOOIEHKAGLC.clear();
        self.IGGNGJGPCLK.clear();
        self.JKOCJIMAGBN.clear();
        self.HOJJFBAEBDA.clear();
        self.CBBFEFKKNPB.clear();
        self.EBKNNOPMDCG.clear();
        self.DOGFMMDKGDC.clear();
        self.GFJENINMLLG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NEKEEJIKGKJ {
        static instance: NEKEEJIKGKJ = NEKEEJIKGKJ {
            GOOIEHKAGLC: ::protobuf::MessageField::none(),
            IGGNGJGPCLK: ::protobuf::MessageField::none(),
            JKOCJIMAGBN: ::protobuf::MessageField::none(),
            HOJJFBAEBDA: ::protobuf::MessageField::none(),
            CBBFEFKKNPB: ::protobuf::MessageField::none(),
            EBKNNOPMDCG: ::protobuf::MessageField::none(),
            DOGFMMDKGDC: ::protobuf::MessageField::none(),
            GFJENINMLLG: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NEKEEJIKGKJ {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NEKEEJIKGKJ").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NEKEEJIKGKJ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NEKEEJIKGKJ {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11NEKEEJIKGKJ.proto\x1a\x11CJOIECNKEGD.proto\x1a\x11DBKIKLKEMMP.prot\
    o\x1a\x11FGACBPEEBEL.proto\x1a\x11FIIDPGGKANO.proto\x1a\x11JHGGMOKNOJB.p\
    roto\x1a\x11JLOBAJOINGI.proto\x1a\x11NOFEAJCBDOA.proto\x1a\x11PKANLCNEDO\
    C.proto\"\x8d\x03\n\x0bNEKEEJIKGKJ\x12.\n\x0bGOOIEHKAGLC\x18\x0e\x20\x01\
    (\x0b2\x0c.PKANLCNEDOCR\x0bGOOIEHKAGLC\x12.\n\x0bIGGNGJGPCLK\x18\x04\x20\
    \x01(\x0b2\x0c.CJOIECNKEGDR\x0bIGGNGJGPCLK\x12.\n\x0bJKOCJIMAGBN\x18\x0b\
    \x20\x01(\x0b2\x0c.FGACBPEEBELR\x0bJKOCJIMAGBN\x12.\n\x0bHOJJFBAEBDA\x18\
    \x06\x20\x01(\x0b2\x0c.JHGGMOKNOJBR\x0bHOJJFBAEBDA\x12.\n\x0bCBBFEFKKNPB\
    \x18\n\x20\x01(\x0b2\x0c.NOFEAJCBDOAR\x0bCBBFEFKKNPB\x12.\n\x0bEBKNNOPMD\
    CG\x18\x08\x20\x01(\x0b2\x0c.JLOBAJOINGIR\x0bEBKNNOPMDCG\x12.\n\x0bDOGFM\
    MDKGDC\x18\x0f\x20\x01(\x0b2\x0c.FIIDPGGKANOR\x0bDOGFMMDKGDC\x12.\n\x0bG\
    FJENINMLLG\x18\x0c\x20\x01(\x0b2\x0c.DBKIKLKEMMPR\x0bGFJENINMLLGb\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::CJOIECNKEGD::file_descriptor().clone());
            deps.push(super::DBKIKLKEMMP::file_descriptor().clone());
            deps.push(super::FGACBPEEBEL::file_descriptor().clone());
            deps.push(super::FIIDPGGKANO::file_descriptor().clone());
            deps.push(super::JHGGMOKNOJB::file_descriptor().clone());
            deps.push(super::JLOBAJOINGI::file_descriptor().clone());
            deps.push(super::NOFEAJCBDOA::file_descriptor().clone());
            deps.push(super::PKANLCNEDOC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(NEKEEJIKGKJ::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
