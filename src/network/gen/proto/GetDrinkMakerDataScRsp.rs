// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetDrinkMakerDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetDrinkMakerDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetDrinkMakerDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.CNINLAJDEHG)
    pub CNINLAJDEHG: u32,
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.MAMKEEKMJHA)
    pub MAMKEEKMJHA: u32,
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.CNFKHMNAAMP)
    pub CNFKHMNAAMP: ::protobuf::MessageField<super::PNLHADCBNMN::PNLHADCBNMN>,
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.JKOCJIMAGBN)
    pub JKOCJIMAGBN: u32,
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.BBICFBOEDHG)
    pub BBICFBOEDHG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.ADADHIHDHJC)
    pub ADADHIHDHJC: u32,
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.PICFNHKDGMI)
    pub PICFNHKDGMI: u32,
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.CDMPAMDGMHD)
    pub CDMPAMDGMHD: u32,
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.JIJKPFBLGKE)
    pub JIJKPFBLGKE: u32,
    // @@protoc_insertion_point(field:GetDrinkMakerDataScRsp.FCCOMPHNCCP)
    pub FCCOMPHNCCP: ::std::vec::Vec<super::DrinkMakerGuest::DrinkMakerGuest>,
    // special fields
    // @@protoc_insertion_point(special_field:GetDrinkMakerDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDrinkMakerDataScRsp {
    fn default() -> &'a GetDrinkMakerDataScRsp {
        <GetDrinkMakerDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetDrinkMakerDataScRsp {
    pub fn new() -> GetDrinkMakerDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CNINLAJDEHG",
            |m: &GetDrinkMakerDataScRsp| { &m.CNINLAJDEHG },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.CNINLAJDEHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MAMKEEKMJHA",
            |m: &GetDrinkMakerDataScRsp| { &m.MAMKEEKMJHA },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.MAMKEEKMJHA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PNLHADCBNMN::PNLHADCBNMN>(
            "CNFKHMNAAMP",
            |m: &GetDrinkMakerDataScRsp| { &m.CNFKHMNAAMP },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.CNFKHMNAAMP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JKOCJIMAGBN",
            |m: &GetDrinkMakerDataScRsp| { &m.JKOCJIMAGBN },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.JKOCJIMAGBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BBICFBOEDHG",
            |m: &GetDrinkMakerDataScRsp| { &m.BBICFBOEDHG },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.BBICFBOEDHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADADHIHDHJC",
            |m: &GetDrinkMakerDataScRsp| { &m.ADADHIHDHJC },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.ADADHIHDHJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PICFNHKDGMI",
            |m: &GetDrinkMakerDataScRsp| { &m.PICFNHKDGMI },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.PICFNHKDGMI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CDMPAMDGMHD",
            |m: &GetDrinkMakerDataScRsp| { &m.CDMPAMDGMHD },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.CDMPAMDGMHD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JIJKPFBLGKE",
            |m: &GetDrinkMakerDataScRsp| { &m.JIJKPFBLGKE },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.JIJKPFBLGKE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FCCOMPHNCCP",
            |m: &GetDrinkMakerDataScRsp| { &m.FCCOMPHNCCP },
            |m: &mut GetDrinkMakerDataScRsp| { &mut m.FCCOMPHNCCP },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDrinkMakerDataScRsp>(
            "GetDrinkMakerDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDrinkMakerDataScRsp {
    const NAME: &'static str = "GetDrinkMakerDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.CNINLAJDEHG = is.read_uint32()?;
                },
                80 => {
                    self.MAMKEEKMJHA = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CNFKHMNAAMP)?;
                },
                56 => {
                    self.JKOCJIMAGBN = is.read_uint32()?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.BBICFBOEDHG)?;
                },
                16 => {
                    self.BBICFBOEDHG.push(is.read_uint32()?);
                },
                48 => {
                    self.ADADHIHDHJC = is.read_uint32()?;
                },
                64 => {
                    self.PICFNHKDGMI = is.read_uint32()?;
                },
                112 => {
                    self.CDMPAMDGMHD = is.read_uint32()?;
                },
                120 => {
                    self.JIJKPFBLGKE = is.read_uint32()?;
                },
                10 => {
                    self.FCCOMPHNCCP.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CNINLAJDEHG != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.CNINLAJDEHG);
        }
        if self.MAMKEEKMJHA != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.MAMKEEKMJHA);
        }
        if let Some(v) = self.CNFKHMNAAMP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.JKOCJIMAGBN != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.JKOCJIMAGBN);
        }
        for value in &self.BBICFBOEDHG {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        if self.ADADHIHDHJC != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.ADADHIHDHJC);
        }
        if self.PICFNHKDGMI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.PICFNHKDGMI);
        }
        if self.CDMPAMDGMHD != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.CDMPAMDGMHD);
        }
        if self.JIJKPFBLGKE != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.JIJKPFBLGKE);
        }
        for value in &self.FCCOMPHNCCP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CNINLAJDEHG != 0 {
            os.write_uint32(3, self.CNINLAJDEHG)?;
        }
        if self.MAMKEEKMJHA != 0 {
            os.write_uint32(10, self.MAMKEEKMJHA)?;
        }
        if let Some(v) = self.CNFKHMNAAMP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.JKOCJIMAGBN != 0 {
            os.write_uint32(7, self.JKOCJIMAGBN)?;
        }
        for v in &self.BBICFBOEDHG {
            os.write_uint32(2, *v)?;
        };
        if self.ADADHIHDHJC != 0 {
            os.write_uint32(6, self.ADADHIHDHJC)?;
        }
        if self.PICFNHKDGMI != 0 {
            os.write_uint32(8, self.PICFNHKDGMI)?;
        }
        if self.CDMPAMDGMHD != 0 {
            os.write_uint32(14, self.CDMPAMDGMHD)?;
        }
        if self.JIJKPFBLGKE != 0 {
            os.write_uint32(15, self.JIJKPFBLGKE)?;
        }
        for v in &self.FCCOMPHNCCP {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDrinkMakerDataScRsp {
        GetDrinkMakerDataScRsp::new()
    }

    fn clear(&mut self) {
        self.CNINLAJDEHG = 0;
        self.MAMKEEKMJHA = 0;
        self.CNFKHMNAAMP.clear();
        self.JKOCJIMAGBN = 0;
        self.BBICFBOEDHG.clear();
        self.ADADHIHDHJC = 0;
        self.PICFNHKDGMI = 0;
        self.CDMPAMDGMHD = 0;
        self.JIJKPFBLGKE = 0;
        self.FCCOMPHNCCP.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDrinkMakerDataScRsp {
        static instance: GetDrinkMakerDataScRsp = GetDrinkMakerDataScRsp {
            CNINLAJDEHG: 0,
            MAMKEEKMJHA: 0,
            CNFKHMNAAMP: ::protobuf::MessageField::none(),
            JKOCJIMAGBN: 0,
            BBICFBOEDHG: ::std::vec::Vec::new(),
            ADADHIHDHJC: 0,
            PICFNHKDGMI: 0,
            CDMPAMDGMHD: 0,
            JIJKPFBLGKE: 0,
            FCCOMPHNCCP: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDrinkMakerDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDrinkMakerDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDrinkMakerDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDrinkMakerDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cGetDrinkMakerDataScRsp.proto\x1a\x15DrinkMakerGuest.proto\x1a\x11P\
    NLHADCBNMN.proto\"\x8c\x03\n\x16GetDrinkMakerDataScRsp\x12\x20\n\x0bCNIN\
    LAJDEHG\x18\x03\x20\x01(\rR\x0bCNINLAJDEHG\x12\x20\n\x0bMAMKEEKMJHA\x18\
    \n\x20\x01(\rR\x0bMAMKEEKMJHA\x12.\n\x0bCNFKHMNAAMP\x18\t\x20\x01(\x0b2\
    \x0c.PNLHADCBNMNR\x0bCNFKHMNAAMP\x12\x20\n\x0bJKOCJIMAGBN\x18\x07\x20\
    \x01(\rR\x0bJKOCJIMAGBN\x12\x20\n\x0bBBICFBOEDHG\x18\x02\x20\x03(\rR\x0b\
    BBICFBOEDHG\x12\x20\n\x0bADADHIHDHJC\x18\x06\x20\x01(\rR\x0bADADHIHDHJC\
    \x12\x20\n\x0bPICFNHKDGMI\x18\x08\x20\x01(\rR\x0bPICFNHKDGMI\x12\x20\n\
    \x0bCDMPAMDGMHD\x18\x0e\x20\x01(\rR\x0bCDMPAMDGMHD\x12\x20\n\x0bJIJKPFBL\
    GKE\x18\x0f\x20\x01(\rR\x0bJIJKPFBLGKE\x122\n\x0bFCCOMPHNCCP\x18\x01\x20\
    \x03(\x0b2\x10.DrinkMakerGuestR\x0bFCCOMPHNCCPb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::DrinkMakerGuest::file_descriptor().clone());
            deps.push(super::PNLHADCBNMN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetDrinkMakerDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
