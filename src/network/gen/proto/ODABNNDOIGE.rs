// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ODABNNDOIGE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ODABNNDOIGE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ODABNNDOIGE {
    // message fields
    // @@protoc_insertion_point(field:ODABNNDOIGE.BOHCEMCLFLL)
    pub BOHCEMCLFLL: bool,
    // @@protoc_insertion_point(field:ODABNNDOIGE.MPFMPMLGOGE)
    pub MPFMPMLGOGE: u32,
    // @@protoc_insertion_point(field:ODABNNDOIGE.CBFNCMIAONH)
    pub CBFNCMIAONH: u32,
    // @@protoc_insertion_point(field:ODABNNDOIGE.exp)
    pub exp: u32,
    // @@protoc_insertion_point(field:ODABNNDOIGE.MDPPFPBFKFM)
    pub MDPPFPBFKFM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ODABNNDOIGE.JPNMHGFIMBM)
    pub JPNMHGFIMBM: ::std::vec::Vec<super::GCNDMGBJHPN::GCNDMGBJHPN>,
    // @@protoc_insertion_point(field:ODABNNDOIGE.HIIDNFAFCBP)
    pub HIIDNFAFCBP: ::std::vec::Vec<super::LMDEKCEFMJC::LMDEKCEFMJC>,
    // @@protoc_insertion_point(field:ODABNNDOIGE.LAHJFGAGLEM)
    pub LAHJFGAGLEM: ::std::vec::Vec<super::ENPCBHHGEGJ::ENPCBHHGEGJ>,
    // @@protoc_insertion_point(field:ODABNNDOIGE.FCNKNBOICOH)
    pub FCNKNBOICOH: bool,
    // @@protoc_insertion_point(field:ODABNNDOIGE.JOIBIKHEOOH)
    pub JOIBIKHEOOH: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ODABNNDOIGE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ODABNNDOIGE {
    fn default() -> &'a ODABNNDOIGE {
        <ODABNNDOIGE as ::protobuf::Message>::default_instance()
    }
}

impl ODABNNDOIGE {
    pub fn new() -> ODABNNDOIGE {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BOHCEMCLFLL",
            |m: &ODABNNDOIGE| { &m.BOHCEMCLFLL },
            |m: &mut ODABNNDOIGE| { &mut m.BOHCEMCLFLL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPFMPMLGOGE",
            |m: &ODABNNDOIGE| { &m.MPFMPMLGOGE },
            |m: &mut ODABNNDOIGE| { &mut m.MPFMPMLGOGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CBFNCMIAONH",
            |m: &ODABNNDOIGE| { &m.CBFNCMIAONH },
            |m: &mut ODABNNDOIGE| { &mut m.CBFNCMIAONH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exp",
            |m: &ODABNNDOIGE| { &m.exp },
            |m: &mut ODABNNDOIGE| { &mut m.exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MDPPFPBFKFM",
            |m: &ODABNNDOIGE| { &m.MDPPFPBFKFM },
            |m: &mut ODABNNDOIGE| { &mut m.MDPPFPBFKFM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JPNMHGFIMBM",
            |m: &ODABNNDOIGE| { &m.JPNMHGFIMBM },
            |m: &mut ODABNNDOIGE| { &mut m.JPNMHGFIMBM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HIIDNFAFCBP",
            |m: &ODABNNDOIGE| { &m.HIIDNFAFCBP },
            |m: &mut ODABNNDOIGE| { &mut m.HIIDNFAFCBP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LAHJFGAGLEM",
            |m: &ODABNNDOIGE| { &m.LAHJFGAGLEM },
            |m: &mut ODABNNDOIGE| { &mut m.LAHJFGAGLEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FCNKNBOICOH",
            |m: &ODABNNDOIGE| { &m.FCNKNBOICOH },
            |m: &mut ODABNNDOIGE| { &mut m.FCNKNBOICOH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JOIBIKHEOOH",
            |m: &ODABNNDOIGE| { &m.JOIBIKHEOOH },
            |m: &mut ODABNNDOIGE| { &mut m.JOIBIKHEOOH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ODABNNDOIGE>(
            "ODABNNDOIGE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ODABNNDOIGE {
    const NAME: &'static str = "ODABNNDOIGE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.BOHCEMCLFLL = is.read_bool()?;
                },
                8 => {
                    self.MPFMPMLGOGE = is.read_uint32()?;
                },
                96 => {
                    self.CBFNCMIAONH = is.read_uint32()?;
                },
                72 => {
                    self.exp = is.read_uint32()?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.MDPPFPBFKFM)?;
                },
                16 => {
                    self.MDPPFPBFKFM.push(is.read_uint32()?);
                },
                26 => {
                    self.JPNMHGFIMBM.push(is.read_message()?);
                },
                122 => {
                    self.HIIDNFAFCBP.push(is.read_message()?);
                },
                66 => {
                    self.LAHJFGAGLEM.push(is.read_message()?);
                },
                88 => {
                    self.FCNKNBOICOH = is.read_bool()?;
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.JOIBIKHEOOH)?;
                },
                80 => {
                    self.JOIBIKHEOOH.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.BOHCEMCLFLL != false {
            my_size += 1 + 1;
        }
        if self.MPFMPMLGOGE != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.MPFMPMLGOGE);
        }
        if self.CBFNCMIAONH != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.CBFNCMIAONH);
        }
        if self.exp != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.exp);
        }
        for value in &self.MDPPFPBFKFM {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        for value in &self.JPNMHGFIMBM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.HIIDNFAFCBP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.LAHJFGAGLEM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.FCNKNBOICOH != false {
            my_size += 1 + 1;
        }
        for value in &self.JOIBIKHEOOH {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.BOHCEMCLFLL != false {
            os.write_bool(14, self.BOHCEMCLFLL)?;
        }
        if self.MPFMPMLGOGE != 0 {
            os.write_uint32(1, self.MPFMPMLGOGE)?;
        }
        if self.CBFNCMIAONH != 0 {
            os.write_uint32(12, self.CBFNCMIAONH)?;
        }
        if self.exp != 0 {
            os.write_uint32(9, self.exp)?;
        }
        for v in &self.MDPPFPBFKFM {
            os.write_uint32(2, *v)?;
        };
        for v in &self.JPNMHGFIMBM {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.HIIDNFAFCBP {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        for v in &self.LAHJFGAGLEM {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.FCNKNBOICOH != false {
            os.write_bool(11, self.FCNKNBOICOH)?;
        }
        for v in &self.JOIBIKHEOOH {
            os.write_uint32(10, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ODABNNDOIGE {
        ODABNNDOIGE::new()
    }

    fn clear(&mut self) {
        self.BOHCEMCLFLL = false;
        self.MPFMPMLGOGE = 0;
        self.CBFNCMIAONH = 0;
        self.exp = 0;
        self.MDPPFPBFKFM.clear();
        self.JPNMHGFIMBM.clear();
        self.HIIDNFAFCBP.clear();
        self.LAHJFGAGLEM.clear();
        self.FCNKNBOICOH = false;
        self.JOIBIKHEOOH.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ODABNNDOIGE {
        static instance: ODABNNDOIGE = ODABNNDOIGE {
            BOHCEMCLFLL: false,
            MPFMPMLGOGE: 0,
            CBFNCMIAONH: 0,
            exp: 0,
            MDPPFPBFKFM: ::std::vec::Vec::new(),
            JPNMHGFIMBM: ::std::vec::Vec::new(),
            HIIDNFAFCBP: ::std::vec::Vec::new(),
            LAHJFGAGLEM: ::std::vec::Vec::new(),
            FCNKNBOICOH: false,
            JOIBIKHEOOH: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ODABNNDOIGE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ODABNNDOIGE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ODABNNDOIGE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ODABNNDOIGE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ODABNNDOIGE.proto\x1a\x11ENPCBHHGEGJ.proto\x1a\x11GCNDMGBJHPN.prot\
    o\x1a\x11LMDEKCEFMJC.proto\"\xfb\x02\n\x0bODABNNDOIGE\x12\x20\n\x0bBOHCE\
    MCLFLL\x18\x0e\x20\x01(\x08R\x0bBOHCEMCLFLL\x12\x20\n\x0bMPFMPMLGOGE\x18\
    \x01\x20\x01(\rR\x0bMPFMPMLGOGE\x12\x20\n\x0bCBFNCMIAONH\x18\x0c\x20\x01\
    (\rR\x0bCBFNCMIAONH\x12\x10\n\x03exp\x18\t\x20\x01(\rR\x03exp\x12\x20\n\
    \x0bMDPPFPBFKFM\x18\x02\x20\x03(\rR\x0bMDPPFPBFKFM\x12.\n\x0bJPNMHGFIMBM\
    \x18\x03\x20\x03(\x0b2\x0c.GCNDMGBJHPNR\x0bJPNMHGFIMBM\x12.\n\x0bHIIDNFA\
    FCBP\x18\x0f\x20\x03(\x0b2\x0c.LMDEKCEFMJCR\x0bHIIDNFAFCBP\x12.\n\x0bLAH\
    JFGAGLEM\x18\x08\x20\x03(\x0b2\x0c.ENPCBHHGEGJR\x0bLAHJFGAGLEM\x12\x20\n\
    \x0bFCNKNBOICOH\x18\x0b\x20\x01(\x08R\x0bFCNKNBOICOH\x12\x20\n\x0bJOIBIK\
    HEOOH\x18\n\x20\x03(\rR\x0bJOIBIKHEOOHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ENPCBHHGEGJ::file_descriptor().clone());
            deps.push(super::GCNDMGBJHPN::file_descriptor().clone());
            deps.push(super::LMDEKCEFMJC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ODABNNDOIGE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
