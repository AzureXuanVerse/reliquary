// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BattlePassInfoNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BattlePassInfoNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BattlePassInfoNotify {
    // message fields
    // @@protoc_insertion_point(field:BattlePassInfoNotify.KCDLOGOCBIA)
    pub KCDLOGOCBIA: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.IEBLHEIEBCP)
    pub IEBLHEIEBCP: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.exp)
    pub exp: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.CEOEKKKLNEH)
    pub CEOEKKKLNEH: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.KOIDCIFMOGG)
    pub KOIDCIFMOGG: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.GHMFIOCLBMB)
    pub GHMFIOCLBMB: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.NOLCAKLMPEG)
    pub NOLCAKLMPEG: ::protobuf::EnumOrUnknown<super::BpTierType::BpTierType>,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.CPOHGJLGCPH)
    pub CPOHGJLGCPH: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.IIIPCOPGJHJ)
    pub IIIPCOPGJHJ: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.level)
    pub level: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.DNBMKBMAPCE)
    pub DNBMKBMAPCE: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.PKAGDALDBIK)
    pub PKAGDALDBIK: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.LFGKIPCCMHM)
    pub LFGKIPCCMHM: u64,
    // special fields
    // @@protoc_insertion_point(special_field:BattlePassInfoNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BattlePassInfoNotify {
    fn default() -> &'a BattlePassInfoNotify {
        <BattlePassInfoNotify as ::protobuf::Message>::default_instance()
    }
}

impl BattlePassInfoNotify {
    pub fn new() -> BattlePassInfoNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KCDLOGOCBIA",
            |m: &BattlePassInfoNotify| { &m.KCDLOGOCBIA },
            |m: &mut BattlePassInfoNotify| { &mut m.KCDLOGOCBIA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IEBLHEIEBCP",
            |m: &BattlePassInfoNotify| { &m.IEBLHEIEBCP },
            |m: &mut BattlePassInfoNotify| { &mut m.IEBLHEIEBCP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exp",
            |m: &BattlePassInfoNotify| { &m.exp },
            |m: &mut BattlePassInfoNotify| { &mut m.exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CEOEKKKLNEH",
            |m: &BattlePassInfoNotify| { &m.CEOEKKKLNEH },
            |m: &mut BattlePassInfoNotify| { &mut m.CEOEKKKLNEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KOIDCIFMOGG",
            |m: &BattlePassInfoNotify| { &m.KOIDCIFMOGG },
            |m: &mut BattlePassInfoNotify| { &mut m.KOIDCIFMOGG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GHMFIOCLBMB",
            |m: &BattlePassInfoNotify| { &m.GHMFIOCLBMB },
            |m: &mut BattlePassInfoNotify| { &mut m.GHMFIOCLBMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NOLCAKLMPEG",
            |m: &BattlePassInfoNotify| { &m.NOLCAKLMPEG },
            |m: &mut BattlePassInfoNotify| { &mut m.NOLCAKLMPEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPOHGJLGCPH",
            |m: &BattlePassInfoNotify| { &m.CPOHGJLGCPH },
            |m: &mut BattlePassInfoNotify| { &mut m.CPOHGJLGCPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IIIPCOPGJHJ",
            |m: &BattlePassInfoNotify| { &m.IIIPCOPGJHJ },
            |m: &mut BattlePassInfoNotify| { &mut m.IIIPCOPGJHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &BattlePassInfoNotify| { &m.level },
            |m: &mut BattlePassInfoNotify| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DNBMKBMAPCE",
            |m: &BattlePassInfoNotify| { &m.DNBMKBMAPCE },
            |m: &mut BattlePassInfoNotify| { &mut m.DNBMKBMAPCE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PKAGDALDBIK",
            |m: &BattlePassInfoNotify| { &m.PKAGDALDBIK },
            |m: &mut BattlePassInfoNotify| { &mut m.PKAGDALDBIK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LFGKIPCCMHM",
            |m: &BattlePassInfoNotify| { &m.LFGKIPCCMHM },
            |m: &mut BattlePassInfoNotify| { &mut m.LFGKIPCCMHM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BattlePassInfoNotify>(
            "BattlePassInfoNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BattlePassInfoNotify {
    const NAME: &'static str = "BattlePassInfoNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.KCDLOGOCBIA = is.read_uint64()?;
                },
                120 => {
                    self.IEBLHEIEBCP = is.read_uint64()?;
                },
                48 => {
                    self.exp = is.read_uint32()?;
                },
                96 => {
                    self.CEOEKKKLNEH = is.read_uint32()?;
                },
                24 => {
                    self.KOIDCIFMOGG = is.read_uint64()?;
                },
                80 => {
                    self.GHMFIOCLBMB = is.read_uint64()?;
                },
                112 => {
                    self.NOLCAKLMPEG = is.read_enum_or_unknown()?;
                },
                8 => {
                    self.CPOHGJLGCPH = is.read_uint64()?;
                },
                56 => {
                    self.IIIPCOPGJHJ = is.read_uint32()?;
                },
                32 => {
                    self.level = is.read_uint32()?;
                },
                16 => {
                    self.DNBMKBMAPCE = is.read_uint64()?;
                },
                40 => {
                    self.PKAGDALDBIK = is.read_uint64()?;
                },
                64 => {
                    self.LFGKIPCCMHM = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.KCDLOGOCBIA != 0 {
            my_size += ::protobuf::rt::uint64_size(13, self.KCDLOGOCBIA);
        }
        if self.IEBLHEIEBCP != 0 {
            my_size += ::protobuf::rt::uint64_size(15, self.IEBLHEIEBCP);
        }
        if self.exp != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.exp);
        }
        if self.CEOEKKKLNEH != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.CEOEKKKLNEH);
        }
        if self.KOIDCIFMOGG != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.KOIDCIFMOGG);
        }
        if self.GHMFIOCLBMB != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.GHMFIOCLBMB);
        }
        if self.NOLCAKLMPEG != ::protobuf::EnumOrUnknown::new(super::BpTierType::BpTierType::BP_TIER_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(14, self.NOLCAKLMPEG.value());
        }
        if self.CPOHGJLGCPH != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.CPOHGJLGCPH);
        }
        if self.IIIPCOPGJHJ != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.IIIPCOPGJHJ);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.level);
        }
        if self.DNBMKBMAPCE != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.DNBMKBMAPCE);
        }
        if self.PKAGDALDBIK != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.PKAGDALDBIK);
        }
        if self.LFGKIPCCMHM != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.LFGKIPCCMHM);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.KCDLOGOCBIA != 0 {
            os.write_uint64(13, self.KCDLOGOCBIA)?;
        }
        if self.IEBLHEIEBCP != 0 {
            os.write_uint64(15, self.IEBLHEIEBCP)?;
        }
        if self.exp != 0 {
            os.write_uint32(6, self.exp)?;
        }
        if self.CEOEKKKLNEH != 0 {
            os.write_uint32(12, self.CEOEKKKLNEH)?;
        }
        if self.KOIDCIFMOGG != 0 {
            os.write_uint64(3, self.KOIDCIFMOGG)?;
        }
        if self.GHMFIOCLBMB != 0 {
            os.write_uint64(10, self.GHMFIOCLBMB)?;
        }
        if self.NOLCAKLMPEG != ::protobuf::EnumOrUnknown::new(super::BpTierType::BpTierType::BP_TIER_TYPE_NONE) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.NOLCAKLMPEG))?;
        }
        if self.CPOHGJLGCPH != 0 {
            os.write_uint64(1, self.CPOHGJLGCPH)?;
        }
        if self.IIIPCOPGJHJ != 0 {
            os.write_uint32(7, self.IIIPCOPGJHJ)?;
        }
        if self.level != 0 {
            os.write_uint32(4, self.level)?;
        }
        if self.DNBMKBMAPCE != 0 {
            os.write_uint64(2, self.DNBMKBMAPCE)?;
        }
        if self.PKAGDALDBIK != 0 {
            os.write_uint64(5, self.PKAGDALDBIK)?;
        }
        if self.LFGKIPCCMHM != 0 {
            os.write_uint64(8, self.LFGKIPCCMHM)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BattlePassInfoNotify {
        BattlePassInfoNotify::new()
    }

    fn clear(&mut self) {
        self.KCDLOGOCBIA = 0;
        self.IEBLHEIEBCP = 0;
        self.exp = 0;
        self.CEOEKKKLNEH = 0;
        self.KOIDCIFMOGG = 0;
        self.GHMFIOCLBMB = 0;
        self.NOLCAKLMPEG = ::protobuf::EnumOrUnknown::new(super::BpTierType::BpTierType::BP_TIER_TYPE_NONE);
        self.CPOHGJLGCPH = 0;
        self.IIIPCOPGJHJ = 0;
        self.level = 0;
        self.DNBMKBMAPCE = 0;
        self.PKAGDALDBIK = 0;
        self.LFGKIPCCMHM = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BattlePassInfoNotify {
        static instance: BattlePassInfoNotify = BattlePassInfoNotify {
            KCDLOGOCBIA: 0,
            IEBLHEIEBCP: 0,
            exp: 0,
            CEOEKKKLNEH: 0,
            KOIDCIFMOGG: 0,
            GHMFIOCLBMB: 0,
            NOLCAKLMPEG: ::protobuf::EnumOrUnknown::from_i32(0),
            CPOHGJLGCPH: 0,
            IIIPCOPGJHJ: 0,
            level: 0,
            DNBMKBMAPCE: 0,
            PKAGDALDBIK: 0,
            LFGKIPCCMHM: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BattlePassInfoNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BattlePassInfoNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BattlePassInfoNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BattlePassInfoNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aBattlePassInfoNotify.proto\x1a\x10BpTierType.proto\"\xc1\x03\n\x14\
    BattlePassInfoNotify\x12\x20\n\x0bKCDLOGOCBIA\x18\r\x20\x01(\x04R\x0bKCD\
    LOGOCBIA\x12\x20\n\x0bIEBLHEIEBCP\x18\x0f\x20\x01(\x04R\x0bIEBLHEIEBCP\
    \x12\x10\n\x03exp\x18\x06\x20\x01(\rR\x03exp\x12\x20\n\x0bCEOEKKKLNEH\
    \x18\x0c\x20\x01(\rR\x0bCEOEKKKLNEH\x12\x20\n\x0bKOIDCIFMOGG\x18\x03\x20\
    \x01(\x04R\x0bKOIDCIFMOGG\x12\x20\n\x0bGHMFIOCLBMB\x18\n\x20\x01(\x04R\
    \x0bGHMFIOCLBMB\x12-\n\x0bNOLCAKLMPEG\x18\x0e\x20\x01(\x0e2\x0b.BpTierTy\
    peR\x0bNOLCAKLMPEG\x12\x20\n\x0bCPOHGJLGCPH\x18\x01\x20\x01(\x04R\x0bCPO\
    HGJLGCPH\x12\x20\n\x0bIIIPCOPGJHJ\x18\x07\x20\x01(\rR\x0bIIIPCOPGJHJ\x12\
    \x14\n\x05level\x18\x04\x20\x01(\rR\x05level\x12\x20\n\x0bDNBMKBMAPCE\
    \x18\x02\x20\x01(\x04R\x0bDNBMKBMAPCE\x12\x20\n\x0bPKAGDALDBIK\x18\x05\
    \x20\x01(\x04R\x0bPKAGDALDBIK\x12\x20\n\x0bLFGKIPCCMHM\x18\x08\x20\x01(\
    \x04R\x0bLFGKIPCCMHMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::BpTierType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BattlePassInfoNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
