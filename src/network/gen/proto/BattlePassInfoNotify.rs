// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BattlePassInfoNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BattlePassInfoNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BattlePassInfoNotify {
    // message fields
    // @@protoc_insertion_point(field:BattlePassInfoNotify.bp_tier_type)
    pub bp_tier_type: ::protobuf::EnumOrUnknown<battle_pass_info_notify::BpTierType>,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.taken_free_reward)
    pub taken_free_reward: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.taken_premium_reward1)
    pub taken_premium_reward1: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.taken_premium_reward2)
    pub taken_premium_reward2: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.taken_premium_extended_reward)
    pub taken_premium_extended_reward: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.unkfield)
    pub unkfield: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.taken_premium_optional_reward)
    pub taken_premium_optional_reward: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.taken_free_extended_reward)
    pub taken_free_extended_reward: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.cur_week_add_exp_sum)
    pub cur_week_add_exp_sum: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.cur_bp_id)
    pub cur_bp_id: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.exp)
    pub exp: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.level)
    pub level: u32,
    // special fields
    // @@protoc_insertion_point(special_field:BattlePassInfoNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BattlePassInfoNotify {
    fn default() -> &'a BattlePassInfoNotify {
        <BattlePassInfoNotify as ::protobuf::Message>::default_instance()
    }
}

impl BattlePassInfoNotify {
    pub fn new() -> BattlePassInfoNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bp_tier_type",
            |m: &BattlePassInfoNotify| { &m.bp_tier_type },
            |m: &mut BattlePassInfoNotify| { &mut m.bp_tier_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "taken_free_reward",
            |m: &BattlePassInfoNotify| { &m.taken_free_reward },
            |m: &mut BattlePassInfoNotify| { &mut m.taken_free_reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "taken_premium_reward1",
            |m: &BattlePassInfoNotify| { &m.taken_premium_reward1 },
            |m: &mut BattlePassInfoNotify| { &mut m.taken_premium_reward1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "taken_premium_reward2",
            |m: &BattlePassInfoNotify| { &m.taken_premium_reward2 },
            |m: &mut BattlePassInfoNotify| { &mut m.taken_premium_reward2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "taken_premium_extended_reward",
            |m: &BattlePassInfoNotify| { &m.taken_premium_extended_reward },
            |m: &mut BattlePassInfoNotify| { &mut m.taken_premium_extended_reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unkfield",
            |m: &BattlePassInfoNotify| { &m.unkfield },
            |m: &mut BattlePassInfoNotify| { &mut m.unkfield },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "taken_premium_optional_reward",
            |m: &BattlePassInfoNotify| { &m.taken_premium_optional_reward },
            |m: &mut BattlePassInfoNotify| { &mut m.taken_premium_optional_reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "taken_free_extended_reward",
            |m: &BattlePassInfoNotify| { &m.taken_free_extended_reward },
            |m: &mut BattlePassInfoNotify| { &mut m.taken_free_extended_reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_week_add_exp_sum",
            |m: &BattlePassInfoNotify| { &m.cur_week_add_exp_sum },
            |m: &mut BattlePassInfoNotify| { &mut m.cur_week_add_exp_sum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_bp_id",
            |m: &BattlePassInfoNotify| { &m.cur_bp_id },
            |m: &mut BattlePassInfoNotify| { &mut m.cur_bp_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exp",
            |m: &BattlePassInfoNotify| { &m.exp },
            |m: &mut BattlePassInfoNotify| { &mut m.exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &BattlePassInfoNotify| { &m.level },
            |m: &mut BattlePassInfoNotify| { &mut m.level },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BattlePassInfoNotify>(
            "BattlePassInfoNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BattlePassInfoNotify {
    const NAME: &'static str = "BattlePassInfoNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.bp_tier_type = is.read_enum_or_unknown()?;
                },
                72 => {
                    self.taken_free_reward = is.read_uint64()?;
                },
                32 => {
                    self.taken_premium_reward1 = is.read_uint64()?;
                },
                8 => {
                    self.taken_premium_reward2 = is.read_uint64()?;
                },
                56 => {
                    self.taken_premium_extended_reward = is.read_uint64()?;
                },
                16 => {
                    self.unkfield = is.read_uint64()?;
                },
                64 => {
                    self.taken_premium_optional_reward = is.read_uint64()?;
                },
                96 => {
                    self.taken_free_extended_reward = is.read_uint64()?;
                },
                24 => {
                    self.cur_week_add_exp_sum = is.read_uint32()?;
                },
                40 => {
                    self.cur_bp_id = is.read_uint32()?;
                },
                48 => {
                    self.exp = is.read_uint32()?;
                },
                80 => {
                    self.level = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.bp_tier_type != ::protobuf::EnumOrUnknown::new(battle_pass_info_notify::BpTierType::BP_TIER_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(15, self.bp_tier_type.value());
        }
        if self.taken_free_reward != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.taken_free_reward);
        }
        if self.taken_premium_reward1 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.taken_premium_reward1);
        }
        if self.taken_premium_reward2 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.taken_premium_reward2);
        }
        if self.taken_premium_extended_reward != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.taken_premium_extended_reward);
        }
        if self.unkfield != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.unkfield);
        }
        if self.taken_premium_optional_reward != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.taken_premium_optional_reward);
        }
        if self.taken_free_extended_reward != 0 {
            my_size += ::protobuf::rt::uint64_size(12, self.taken_free_extended_reward);
        }
        if self.cur_week_add_exp_sum != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.cur_week_add_exp_sum);
        }
        if self.cur_bp_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.cur_bp_id);
        }
        if self.exp != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.exp);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.level);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.bp_tier_type != ::protobuf::EnumOrUnknown::new(battle_pass_info_notify::BpTierType::BP_TIER_TYPE_NONE) {
            os.write_enum(15, ::protobuf::EnumOrUnknown::value(&self.bp_tier_type))?;
        }
        if self.taken_free_reward != 0 {
            os.write_uint64(9, self.taken_free_reward)?;
        }
        if self.taken_premium_reward1 != 0 {
            os.write_uint64(4, self.taken_premium_reward1)?;
        }
        if self.taken_premium_reward2 != 0 {
            os.write_uint64(1, self.taken_premium_reward2)?;
        }
        if self.taken_premium_extended_reward != 0 {
            os.write_uint64(7, self.taken_premium_extended_reward)?;
        }
        if self.unkfield != 0 {
            os.write_uint64(2, self.unkfield)?;
        }
        if self.taken_premium_optional_reward != 0 {
            os.write_uint64(8, self.taken_premium_optional_reward)?;
        }
        if self.taken_free_extended_reward != 0 {
            os.write_uint64(12, self.taken_free_extended_reward)?;
        }
        if self.cur_week_add_exp_sum != 0 {
            os.write_uint32(3, self.cur_week_add_exp_sum)?;
        }
        if self.cur_bp_id != 0 {
            os.write_uint32(5, self.cur_bp_id)?;
        }
        if self.exp != 0 {
            os.write_uint32(6, self.exp)?;
        }
        if self.level != 0 {
            os.write_uint32(10, self.level)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BattlePassInfoNotify {
        BattlePassInfoNotify::new()
    }

    fn clear(&mut self) {
        self.bp_tier_type = ::protobuf::EnumOrUnknown::new(battle_pass_info_notify::BpTierType::BP_TIER_TYPE_NONE);
        self.taken_free_reward = 0;
        self.taken_premium_reward1 = 0;
        self.taken_premium_reward2 = 0;
        self.taken_premium_extended_reward = 0;
        self.unkfield = 0;
        self.taken_premium_optional_reward = 0;
        self.taken_free_extended_reward = 0;
        self.cur_week_add_exp_sum = 0;
        self.cur_bp_id = 0;
        self.exp = 0;
        self.level = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BattlePassInfoNotify {
        static instance: BattlePassInfoNotify = BattlePassInfoNotify {
            bp_tier_type: ::protobuf::EnumOrUnknown::from_i32(0),
            taken_free_reward: 0,
            taken_premium_reward1: 0,
            taken_premium_reward2: 0,
            taken_premium_extended_reward: 0,
            unkfield: 0,
            taken_premium_optional_reward: 0,
            taken_free_extended_reward: 0,
            cur_week_add_exp_sum: 0,
            cur_bp_id: 0,
            exp: 0,
            level: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BattlePassInfoNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BattlePassInfoNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BattlePassInfoNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BattlePassInfoNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BattlePassInfoNotify`
pub mod battle_pass_info_notify {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:BattlePassInfoNotify.BpTierType)
    pub enum BpTierType {
        // @@protoc_insertion_point(enum_value:BattlePassInfoNotify.BpTierType.BP_TIER_TYPE_NONE)
        BP_TIER_TYPE_NONE = 0,
        // @@protoc_insertion_point(enum_value:BattlePassInfoNotify.BpTierType.BP_TIER_TYPE_FREE)
        BP_TIER_TYPE_FREE = 1,
        // @@protoc_insertion_point(enum_value:BattlePassInfoNotify.BpTierType.BP_TIER_TYPE_PREMIUM_1)
        BP_TIER_TYPE_PREMIUM_1 = 2,
        // @@protoc_insertion_point(enum_value:BattlePassInfoNotify.BpTierType.BP_TIER_TYPE_PREMIUM_2)
        BP_TIER_TYPE_PREMIUM_2 = 3,
    }

    impl ::protobuf::Enum for BpTierType {
        const NAME: &'static str = "BpTierType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<BpTierType> {
            match value {
                0 => ::std::option::Option::Some(BpTierType::BP_TIER_TYPE_NONE),
                1 => ::std::option::Option::Some(BpTierType::BP_TIER_TYPE_FREE),
                2 => ::std::option::Option::Some(BpTierType::BP_TIER_TYPE_PREMIUM_1),
                3 => ::std::option::Option::Some(BpTierType::BP_TIER_TYPE_PREMIUM_2),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<BpTierType> {
            match str {
                "BP_TIER_TYPE_NONE" => ::std::option::Option::Some(BpTierType::BP_TIER_TYPE_NONE),
                "BP_TIER_TYPE_FREE" => ::std::option::Option::Some(BpTierType::BP_TIER_TYPE_FREE),
                "BP_TIER_TYPE_PREMIUM_1" => ::std::option::Option::Some(BpTierType::BP_TIER_TYPE_PREMIUM_1),
                "BP_TIER_TYPE_PREMIUM_2" => ::std::option::Option::Some(BpTierType::BP_TIER_TYPE_PREMIUM_2),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [BpTierType] = &[
            BpTierType::BP_TIER_TYPE_NONE,
            BpTierType::BP_TIER_TYPE_FREE,
            BpTierType::BP_TIER_TYPE_PREMIUM_1,
            BpTierType::BP_TIER_TYPE_PREMIUM_2,
        ];
    }

    impl ::protobuf::EnumFull for BpTierType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("BattlePassInfoNotify.BpTierType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for BpTierType {
        fn default() -> Self {
            BpTierType::BP_TIER_TYPE_NONE
        }
    }

    impl BpTierType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<BpTierType>("BattlePassInfoNotify.BpTierType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aBattlePassInfoNotify.proto\"\xb5\x05\n\x14BattlePassInfoNotify\x12\
    B\n\x0cbp_tier_type\x18\x0f\x20\x01(\x0e2\x20.BattlePassInfoNotify.BpTie\
    rTypeR\nbpTierType\x12*\n\x11taken_free_reward\x18\t\x20\x01(\x04R\x0fta\
    kenFreeReward\x122\n\x15taken_premium_reward1\x18\x04\x20\x01(\x04R\x13t\
    akenPremiumReward1\x122\n\x15taken_premium_reward2\x18\x01\x20\x01(\x04R\
    \x13takenPremiumReward2\x12A\n\x1dtaken_premium_extended_reward\x18\x07\
    \x20\x01(\x04R\x1atakenPremiumExtendedReward\x12\x1a\n\x08unkfield\x18\
    \x02\x20\x01(\x04R\x08unkfield\x12A\n\x1dtaken_premium_optional_reward\
    \x18\x08\x20\x01(\x04R\x1atakenPremiumOptionalReward\x12;\n\x1ataken_fre\
    e_extended_reward\x18\x0c\x20\x01(\x04R\x17takenFreeExtendedReward\x12.\
    \n\x14cur_week_add_exp_sum\x18\x03\x20\x01(\rR\x10curWeekAddExpSum\x12\
    \x1a\n\tcur_bp_id\x18\x05\x20\x01(\rR\x07curBpId\x12\x10\n\x03exp\x18\
    \x06\x20\x01(\rR\x03exp\x12\x14\n\x05level\x18\n\x20\x01(\rR\x05level\"r\
    \n\nBpTierType\x12\x15\n\x11BP_TIER_TYPE_NONE\x10\0\x12\x15\n\x11BP_TIER\
    _TYPE_FREE\x10\x01\x12\x1a\n\x16BP_TIER_TYPE_PREMIUM_1\x10\x02\x12\x1a\n\
    \x16BP_TIER_TYPE_PREMIUM_2\x10\x03B\x15\n\x13emu.lunarcore.protob\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BattlePassInfoNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(battle_pass_info_notify::BpTierType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
