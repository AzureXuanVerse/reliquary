// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `KBBMNPCNHMO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:KBBMNPCNHMO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KBBMNPCNHMO {
    // message fields
    // @@protoc_insertion_point(field:KBBMNPCNHMO.NMFPFCLDDNN)
    pub NMFPFCLDDNN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:KBBMNPCNHMO.IENLIPDAPMG)
    pub IENLIPDAPMG: ::std::vec::Vec<super::EJKBGEPDPMF::EJKBGEPDPMF>,
    // @@protoc_insertion_point(field:KBBMNPCNHMO.GDILHIGFFNP)
    pub GDILHIGFFNP: ::std::vec::Vec<super::LCINGIMGEEM::LCINGIMGEEM>,
    // @@protoc_insertion_point(field:KBBMNPCNHMO.DOIDHIJIKLH)
    pub DOIDHIJIKLH: u32,
    // @@protoc_insertion_point(field:KBBMNPCNHMO.exp)
    pub exp: u32,
    // @@protoc_insertion_point(field:KBBMNPCNHMO.BACNPJFOAOF)
    pub BACNPJFOAOF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:KBBMNPCNHMO.GMILJKPOPGD)
    pub GMILJKPOPGD: bool,
    // @@protoc_insertion_point(field:KBBMNPCNHMO.ANGJEBLFAHN)
    pub ANGJEBLFAHN: u32,
    // @@protoc_insertion_point(field:KBBMNPCNHMO.GNJAGILEMCJ)
    pub GNJAGILEMCJ: bool,
    // @@protoc_insertion_point(field:KBBMNPCNHMO.HLGLFNABFOP)
    pub HLGLFNABFOP: ::std::vec::Vec<super::NHCDHNDCJMI::NHCDHNDCJMI>,
    // special fields
    // @@protoc_insertion_point(special_field:KBBMNPCNHMO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KBBMNPCNHMO {
    fn default() -> &'a KBBMNPCNHMO {
        <KBBMNPCNHMO as ::protobuf::Message>::default_instance()
    }
}

impl KBBMNPCNHMO {
    pub fn new() -> KBBMNPCNHMO {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NMFPFCLDDNN",
            |m: &KBBMNPCNHMO| { &m.NMFPFCLDDNN },
            |m: &mut KBBMNPCNHMO| { &mut m.NMFPFCLDDNN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IENLIPDAPMG",
            |m: &KBBMNPCNHMO| { &m.IENLIPDAPMG },
            |m: &mut KBBMNPCNHMO| { &mut m.IENLIPDAPMG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GDILHIGFFNP",
            |m: &KBBMNPCNHMO| { &m.GDILHIGFFNP },
            |m: &mut KBBMNPCNHMO| { &mut m.GDILHIGFFNP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DOIDHIJIKLH",
            |m: &KBBMNPCNHMO| { &m.DOIDHIJIKLH },
            |m: &mut KBBMNPCNHMO| { &mut m.DOIDHIJIKLH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exp",
            |m: &KBBMNPCNHMO| { &m.exp },
            |m: &mut KBBMNPCNHMO| { &mut m.exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BACNPJFOAOF",
            |m: &KBBMNPCNHMO| { &m.BACNPJFOAOF },
            |m: &mut KBBMNPCNHMO| { &mut m.BACNPJFOAOF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GMILJKPOPGD",
            |m: &KBBMNPCNHMO| { &m.GMILJKPOPGD },
            |m: &mut KBBMNPCNHMO| { &mut m.GMILJKPOPGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ANGJEBLFAHN",
            |m: &KBBMNPCNHMO| { &m.ANGJEBLFAHN },
            |m: &mut KBBMNPCNHMO| { &mut m.ANGJEBLFAHN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GNJAGILEMCJ",
            |m: &KBBMNPCNHMO| { &m.GNJAGILEMCJ },
            |m: &mut KBBMNPCNHMO| { &mut m.GNJAGILEMCJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HLGLFNABFOP",
            |m: &KBBMNPCNHMO| { &m.HLGLFNABFOP },
            |m: &mut KBBMNPCNHMO| { &mut m.HLGLFNABFOP },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KBBMNPCNHMO>(
            "KBBMNPCNHMO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KBBMNPCNHMO {
    const NAME: &'static str = "KBBMNPCNHMO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.NMFPFCLDDNN)?;
                },
                112 => {
                    self.NMFPFCLDDNN.push(is.read_uint32()?);
                },
                26 => {
                    self.IENLIPDAPMG.push(is.read_message()?);
                },
                34 => {
                    self.GDILHIGFFNP.push(is.read_message()?);
                },
                16 => {
                    self.DOIDHIJIKLH = is.read_uint32()?;
                },
                48 => {
                    self.exp = is.read_uint32()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.BACNPJFOAOF)?;
                },
                96 => {
                    self.BACNPJFOAOF.push(is.read_uint32()?);
                },
                56 => {
                    self.GMILJKPOPGD = is.read_bool()?;
                },
                80 => {
                    self.ANGJEBLFAHN = is.read_uint32()?;
                },
                64 => {
                    self.GNJAGILEMCJ = is.read_bool()?;
                },
                74 => {
                    self.HLGLFNABFOP.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.NMFPFCLDDNN {
            my_size += ::protobuf::rt::uint32_size(14, *value);
        };
        for value in &self.IENLIPDAPMG {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.GDILHIGFFNP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.DOIDHIJIKLH != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.DOIDHIJIKLH);
        }
        if self.exp != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.exp);
        }
        for value in &self.BACNPJFOAOF {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        if self.GMILJKPOPGD != false {
            my_size += 1 + 1;
        }
        if self.ANGJEBLFAHN != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.ANGJEBLFAHN);
        }
        if self.GNJAGILEMCJ != false {
            my_size += 1 + 1;
        }
        for value in &self.HLGLFNABFOP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.NMFPFCLDDNN {
            os.write_uint32(14, *v)?;
        };
        for v in &self.IENLIPDAPMG {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.GDILHIGFFNP {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.DOIDHIJIKLH != 0 {
            os.write_uint32(2, self.DOIDHIJIKLH)?;
        }
        if self.exp != 0 {
            os.write_uint32(6, self.exp)?;
        }
        for v in &self.BACNPJFOAOF {
            os.write_uint32(12, *v)?;
        };
        if self.GMILJKPOPGD != false {
            os.write_bool(7, self.GMILJKPOPGD)?;
        }
        if self.ANGJEBLFAHN != 0 {
            os.write_uint32(10, self.ANGJEBLFAHN)?;
        }
        if self.GNJAGILEMCJ != false {
            os.write_bool(8, self.GNJAGILEMCJ)?;
        }
        for v in &self.HLGLFNABFOP {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KBBMNPCNHMO {
        KBBMNPCNHMO::new()
    }

    fn clear(&mut self) {
        self.NMFPFCLDDNN.clear();
        self.IENLIPDAPMG.clear();
        self.GDILHIGFFNP.clear();
        self.DOIDHIJIKLH = 0;
        self.exp = 0;
        self.BACNPJFOAOF.clear();
        self.GMILJKPOPGD = false;
        self.ANGJEBLFAHN = 0;
        self.GNJAGILEMCJ = false;
        self.HLGLFNABFOP.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KBBMNPCNHMO {
        static instance: KBBMNPCNHMO = KBBMNPCNHMO {
            NMFPFCLDDNN: ::std::vec::Vec::new(),
            IENLIPDAPMG: ::std::vec::Vec::new(),
            GDILHIGFFNP: ::std::vec::Vec::new(),
            DOIDHIJIKLH: 0,
            exp: 0,
            BACNPJFOAOF: ::std::vec::Vec::new(),
            GMILJKPOPGD: false,
            ANGJEBLFAHN: 0,
            GNJAGILEMCJ: false,
            HLGLFNABFOP: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KBBMNPCNHMO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KBBMNPCNHMO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KBBMNPCNHMO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KBBMNPCNHMO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11KBBMNPCNHMO.proto\x1a\x11EJKBGEPDPMF.proto\x1a\x11LCINGIMGEEM.prot\
    o\x1a\x11NHCDHNDCJMI.proto\"\xfb\x02\n\x0bKBBMNPCNHMO\x12\x20\n\x0bNMFPF\
    CLDDNN\x18\x0e\x20\x03(\rR\x0bNMFPFCLDDNN\x12.\n\x0bIENLIPDAPMG\x18\x03\
    \x20\x03(\x0b2\x0c.EJKBGEPDPMFR\x0bIENLIPDAPMG\x12.\n\x0bGDILHIGFFNP\x18\
    \x04\x20\x03(\x0b2\x0c.LCINGIMGEEMR\x0bGDILHIGFFNP\x12\x20\n\x0bDOIDHIJI\
    KLH\x18\x02\x20\x01(\rR\x0bDOIDHIJIKLH\x12\x10\n\x03exp\x18\x06\x20\x01(\
    \rR\x03exp\x12\x20\n\x0bBACNPJFOAOF\x18\x0c\x20\x03(\rR\x0bBACNPJFOAOF\
    \x12\x20\n\x0bGMILJKPOPGD\x18\x07\x20\x01(\x08R\x0bGMILJKPOPGD\x12\x20\n\
    \x0bANGJEBLFAHN\x18\n\x20\x01(\rR\x0bANGJEBLFAHN\x12\x20\n\x0bGNJAGILEMC\
    J\x18\x08\x20\x01(\x08R\x0bGNJAGILEMCJ\x12.\n\x0bHLGLFNABFOP\x18\t\x20\
    \x03(\x0b2\x0c.NHCDHNDCJMIR\x0bHLGLFNABFOPb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::EJKBGEPDPMF::file_descriptor().clone());
            deps.push(super::LCINGIMGEEM::file_descriptor().clone());
            deps.push(super::NHCDHNDCJMI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(KBBMNPCNHMO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
