// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DBLLFOBCKHE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:DBLLFOBCKHE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DBLLFOBCKHE {
    // message oneof groups
    pub NIAOFGECNPK: ::std::option::Option<dbllfobckhe::NIAOFGECNPK>,
    // special fields
    // @@protoc_insertion_point(special_field:DBLLFOBCKHE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DBLLFOBCKHE {
    fn default() -> &'a DBLLFOBCKHE {
        <DBLLFOBCKHE as ::protobuf::Message>::default_instance()
    }
}

impl DBLLFOBCKHE {
    pub fn new() -> DBLLFOBCKHE {
        ::std::default::Default::default()
    }

    // .PMMFCPPEHHB CGPMFDKHJCE = 7;

    pub fn CGPMFDKHJCE(&self) -> &super::PMMFCPPEHHB::PMMFCPPEHHB {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(ref v)) => v,
            _ => <super::PMMFCPPEHHB::PMMFCPPEHHB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CGPMFDKHJCE(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_CGPMFDKHJCE(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CGPMFDKHJCE(&mut self, v: super::PMMFCPPEHHB::PMMFCPPEHHB) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CGPMFDKHJCE(&mut self) -> &mut super::PMMFCPPEHHB::PMMFCPPEHHB {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(super::PMMFCPPEHHB::PMMFCPPEHHB::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CGPMFDKHJCE(&mut self) -> super::PMMFCPPEHHB::PMMFCPPEHHB {
        if self.has_CGPMFDKHJCE() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PMMFCPPEHHB::PMMFCPPEHHB::new()
        }
    }

    // .NPMCCPFIOBO MGDHKEBJMPD = 13;

    pub fn MGDHKEBJMPD(&self) -> &super::NPMCCPFIOBO::NPMCCPFIOBO {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(ref v)) => v,
            _ => <super::NPMCCPFIOBO::NPMCCPFIOBO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MGDHKEBJMPD(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_MGDHKEBJMPD(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MGDHKEBJMPD(&mut self, v: super::NPMCCPFIOBO::NPMCCPFIOBO) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MGDHKEBJMPD(&mut self) -> &mut super::NPMCCPFIOBO::NPMCCPFIOBO {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(super::NPMCCPFIOBO::NPMCCPFIOBO::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MGDHKEBJMPD(&mut self) -> super::NPMCCPFIOBO::NPMCCPFIOBO {
        if self.has_MGDHKEBJMPD() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NPMCCPFIOBO::NPMCCPFIOBO::new()
        }
    }

    // .DKGDDEGEOAL IOBKKOOFCIA = 6;

    pub fn IOBKKOOFCIA(&self) -> &super::DKGDDEGEOAL::DKGDDEGEOAL {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(ref v)) => v,
            _ => <super::DKGDDEGEOAL::DKGDDEGEOAL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IOBKKOOFCIA(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_IOBKKOOFCIA(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IOBKKOOFCIA(&mut self, v: super::DKGDDEGEOAL::DKGDDEGEOAL) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IOBKKOOFCIA(&mut self) -> &mut super::DKGDDEGEOAL::DKGDDEGEOAL {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(super::DKGDDEGEOAL::DKGDDEGEOAL::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IOBKKOOFCIA(&mut self) -> super::DKGDDEGEOAL::DKGDDEGEOAL {
        if self.has_IOBKKOOFCIA() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DKGDDEGEOAL::DKGDDEGEOAL::new()
        }
    }

    // .EMHPHALEBDL CFFNCOMFIML = 11;

    pub fn CFFNCOMFIML(&self) -> &super::EMHPHALEBDL::EMHPHALEBDL {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(ref v)) => v,
            _ => <super::EMHPHALEBDL::EMHPHALEBDL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CFFNCOMFIML(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_CFFNCOMFIML(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CFFNCOMFIML(&mut self, v: super::EMHPHALEBDL::EMHPHALEBDL) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CFFNCOMFIML(&mut self) -> &mut super::EMHPHALEBDL::EMHPHALEBDL {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(super::EMHPHALEBDL::EMHPHALEBDL::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CFFNCOMFIML(&mut self) -> super::EMHPHALEBDL::EMHPHALEBDL {
        if self.has_CFFNCOMFIML() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EMHPHALEBDL::EMHPHALEBDL::new()
        }
    }

    // .NHAFBPAPFLG JJBIPEAEABM = 12;

    pub fn JJBIPEAEABM(&self) -> &super::NHAFBPAPFLG::NHAFBPAPFLG {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(ref v)) => v,
            _ => <super::NHAFBPAPFLG::NHAFBPAPFLG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JJBIPEAEABM(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_JJBIPEAEABM(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JJBIPEAEABM(&mut self, v: super::NHAFBPAPFLG::NHAFBPAPFLG) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JJBIPEAEABM(&mut self) -> &mut super::NHAFBPAPFLG::NHAFBPAPFLG {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(super::NHAFBPAPFLG::NHAFBPAPFLG::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JJBIPEAEABM(&mut self) -> super::NHAFBPAPFLG::NHAFBPAPFLG {
        if self.has_JJBIPEAEABM() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NHAFBPAPFLG::NHAFBPAPFLG::new()
        }
    }

    // .GBGJBBNEPHF EBKNNOPMDCG = 8;

    pub fn EBKNNOPMDCG(&self) -> &super::GBGJBBNEPHF::GBGJBBNEPHF {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(ref v)) => v,
            _ => <super::GBGJBBNEPHF::GBGJBBNEPHF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EBKNNOPMDCG(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_EBKNNOPMDCG(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EBKNNOPMDCG(&mut self, v: super::GBGJBBNEPHF::GBGJBBNEPHF) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EBKNNOPMDCG(&mut self) -> &mut super::GBGJBBNEPHF::GBGJBBNEPHF {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(super::GBGJBBNEPHF::GBGJBBNEPHF::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EBKNNOPMDCG(&mut self) -> super::GBGJBBNEPHF::GBGJBBNEPHF {
        if self.has_EBKNNOPMDCG() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GBGJBBNEPHF::GBGJBBNEPHF::new()
        }
    }

    // .AAHKNOFFJOO LJLEIMGMFLK = 15;

    pub fn LJLEIMGMFLK(&self) -> &super::AAHKNOFFJOO::AAHKNOFFJOO {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(ref v)) => v,
            _ => <super::AAHKNOFFJOO::AAHKNOFFJOO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LJLEIMGMFLK(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_LJLEIMGMFLK(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LJLEIMGMFLK(&mut self, v: super::AAHKNOFFJOO::AAHKNOFFJOO) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LJLEIMGMFLK(&mut self) -> &mut super::AAHKNOFFJOO::AAHKNOFFJOO {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(super::AAHKNOFFJOO::AAHKNOFFJOO::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LJLEIMGMFLK(&mut self) -> super::AAHKNOFFJOO::AAHKNOFFJOO {
        if self.has_LJLEIMGMFLK() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AAHKNOFFJOO::AAHKNOFFJOO::new()
        }
    }

    // .PALJAFMCLAN CBDECPOACJK = 4;

    pub fn CBDECPOACJK(&self) -> &super::PALJAFMCLAN::PALJAFMCLAN {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(ref v)) => v,
            _ => <super::PALJAFMCLAN::PALJAFMCLAN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CBDECPOACJK(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_CBDECPOACJK(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CBDECPOACJK(&mut self, v: super::PALJAFMCLAN::PALJAFMCLAN) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CBDECPOACJK(&mut self) -> &mut super::PALJAFMCLAN::PALJAFMCLAN {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(super::PALJAFMCLAN::PALJAFMCLAN::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CBDECPOACJK(&mut self) -> super::PALJAFMCLAN::PALJAFMCLAN {
        if self.has_CBDECPOACJK() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PALJAFMCLAN::PALJAFMCLAN::new()
        }
    }

    // .LILBCAMGBKF MKDMBFBCCCE = 10;

    pub fn MKDMBFBCCCE(&self) -> &super::LILBCAMGBKF::LILBCAMGBKF {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(ref v)) => v,
            _ => <super::LILBCAMGBKF::LILBCAMGBKF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MKDMBFBCCCE(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_MKDMBFBCCCE(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MKDMBFBCCCE(&mut self, v: super::LILBCAMGBKF::LILBCAMGBKF) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MKDMBFBCCCE(&mut self) -> &mut super::LILBCAMGBKF::LILBCAMGBKF {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(super::LILBCAMGBKF::LILBCAMGBKF::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MKDMBFBCCCE(&mut self) -> super::LILBCAMGBKF::LILBCAMGBKF {
        if self.has_MKDMBFBCCCE() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LILBCAMGBKF::LILBCAMGBKF::new()
        }
    }

    // .IKCLNGIOBGH IJKFIIODHKH = 9;

    pub fn IJKFIIODHKH(&self) -> &super::IKCLNGIOBGH::IKCLNGIOBGH {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(ref v)) => v,
            _ => <super::IKCLNGIOBGH::IKCLNGIOBGH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IJKFIIODHKH(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
    }

    pub fn has_IJKFIIODHKH(&self) -> bool {
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IJKFIIODHKH(&mut self, v: super::IKCLNGIOBGH::IKCLNGIOBGH) {
        self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IJKFIIODHKH(&mut self) -> &mut super::IKCLNGIOBGH::IKCLNGIOBGH {
        if let ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(_)) = self.NIAOFGECNPK {
        } else {
            self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(super::IKCLNGIOBGH::IKCLNGIOBGH::new()));
        }
        match self.NIAOFGECNPK {
            ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IJKFIIODHKH(&mut self) -> super::IKCLNGIOBGH::IKCLNGIOBGH {
        if self.has_IJKFIIODHKH() {
            match self.NIAOFGECNPK.take() {
                ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IKCLNGIOBGH::IKCLNGIOBGH::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PMMFCPPEHHB::PMMFCPPEHHB>(
            "CGPMFDKHJCE",
            DBLLFOBCKHE::has_CGPMFDKHJCE,
            DBLLFOBCKHE::CGPMFDKHJCE,
            DBLLFOBCKHE::mut_CGPMFDKHJCE,
            DBLLFOBCKHE::set_CGPMFDKHJCE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NPMCCPFIOBO::NPMCCPFIOBO>(
            "MGDHKEBJMPD",
            DBLLFOBCKHE::has_MGDHKEBJMPD,
            DBLLFOBCKHE::MGDHKEBJMPD,
            DBLLFOBCKHE::mut_MGDHKEBJMPD,
            DBLLFOBCKHE::set_MGDHKEBJMPD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DKGDDEGEOAL::DKGDDEGEOAL>(
            "IOBKKOOFCIA",
            DBLLFOBCKHE::has_IOBKKOOFCIA,
            DBLLFOBCKHE::IOBKKOOFCIA,
            DBLLFOBCKHE::mut_IOBKKOOFCIA,
            DBLLFOBCKHE::set_IOBKKOOFCIA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EMHPHALEBDL::EMHPHALEBDL>(
            "CFFNCOMFIML",
            DBLLFOBCKHE::has_CFFNCOMFIML,
            DBLLFOBCKHE::CFFNCOMFIML,
            DBLLFOBCKHE::mut_CFFNCOMFIML,
            DBLLFOBCKHE::set_CFFNCOMFIML,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NHAFBPAPFLG::NHAFBPAPFLG>(
            "JJBIPEAEABM",
            DBLLFOBCKHE::has_JJBIPEAEABM,
            DBLLFOBCKHE::JJBIPEAEABM,
            DBLLFOBCKHE::mut_JJBIPEAEABM,
            DBLLFOBCKHE::set_JJBIPEAEABM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GBGJBBNEPHF::GBGJBBNEPHF>(
            "EBKNNOPMDCG",
            DBLLFOBCKHE::has_EBKNNOPMDCG,
            DBLLFOBCKHE::EBKNNOPMDCG,
            DBLLFOBCKHE::mut_EBKNNOPMDCG,
            DBLLFOBCKHE::set_EBKNNOPMDCG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AAHKNOFFJOO::AAHKNOFFJOO>(
            "LJLEIMGMFLK",
            DBLLFOBCKHE::has_LJLEIMGMFLK,
            DBLLFOBCKHE::LJLEIMGMFLK,
            DBLLFOBCKHE::mut_LJLEIMGMFLK,
            DBLLFOBCKHE::set_LJLEIMGMFLK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PALJAFMCLAN::PALJAFMCLAN>(
            "CBDECPOACJK",
            DBLLFOBCKHE::has_CBDECPOACJK,
            DBLLFOBCKHE::CBDECPOACJK,
            DBLLFOBCKHE::mut_CBDECPOACJK,
            DBLLFOBCKHE::set_CBDECPOACJK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LILBCAMGBKF::LILBCAMGBKF>(
            "MKDMBFBCCCE",
            DBLLFOBCKHE::has_MKDMBFBCCCE,
            DBLLFOBCKHE::MKDMBFBCCCE,
            DBLLFOBCKHE::mut_MKDMBFBCCCE,
            DBLLFOBCKHE::set_MKDMBFBCCCE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IKCLNGIOBGH::IKCLNGIOBGH>(
            "IJKFIIODHKH",
            DBLLFOBCKHE::has_IJKFIIODHKH,
            DBLLFOBCKHE::IJKFIIODHKH,
            DBLLFOBCKHE::mut_IJKFIIODHKH,
            DBLLFOBCKHE::set_IJKFIIODHKH,
        ));
        oneofs.push(dbllfobckhe::NIAOFGECNPK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DBLLFOBCKHE>(
            "DBLLFOBCKHE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DBLLFOBCKHE {
    const NAME: &'static str = "DBLLFOBCKHE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(is.read_message()?));
                },
                106 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(is.read_message()?));
                },
                50 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(is.read_message()?));
                },
                90 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(is.read_message()?));
                },
                98 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(is.read_message()?));
                },
                66 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(is.read_message()?));
                },
                122 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(is.read_message()?));
                },
                34 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(is.read_message()?));
                },
                82 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(is.read_message()?));
                },
                74 => {
                    self.NIAOFGECNPK = ::std::option::Option::Some(dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.NIAOFGECNPK {
            match v {
                &dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.NIAOFGECNPK {
            match v {
                &dbllfobckhe::NIAOFGECNPK::CGPMFDKHJCE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &dbllfobckhe::NIAOFGECNPK::MGDHKEBJMPD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &dbllfobckhe::NIAOFGECNPK::IOBKKOOFCIA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &dbllfobckhe::NIAOFGECNPK::CFFNCOMFIML(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &dbllfobckhe::NIAOFGECNPK::JJBIPEAEABM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &dbllfobckhe::NIAOFGECNPK::EBKNNOPMDCG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &dbllfobckhe::NIAOFGECNPK::LJLEIMGMFLK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &dbllfobckhe::NIAOFGECNPK::CBDECPOACJK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &dbllfobckhe::NIAOFGECNPK::MKDMBFBCCCE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &dbllfobckhe::NIAOFGECNPK::IJKFIIODHKH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DBLLFOBCKHE {
        DBLLFOBCKHE::new()
    }

    fn clear(&mut self) {
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.NIAOFGECNPK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DBLLFOBCKHE {
        static instance: DBLLFOBCKHE = DBLLFOBCKHE {
            NIAOFGECNPK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DBLLFOBCKHE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DBLLFOBCKHE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DBLLFOBCKHE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DBLLFOBCKHE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DBLLFOBCKHE`
pub mod dbllfobckhe {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DBLLFOBCKHE.NIAOFGECNPK)
    pub enum NIAOFGECNPK {
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.CGPMFDKHJCE)
        CGPMFDKHJCE(super::super::PMMFCPPEHHB::PMMFCPPEHHB),
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.MGDHKEBJMPD)
        MGDHKEBJMPD(super::super::NPMCCPFIOBO::NPMCCPFIOBO),
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.IOBKKOOFCIA)
        IOBKKOOFCIA(super::super::DKGDDEGEOAL::DKGDDEGEOAL),
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.CFFNCOMFIML)
        CFFNCOMFIML(super::super::EMHPHALEBDL::EMHPHALEBDL),
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.JJBIPEAEABM)
        JJBIPEAEABM(super::super::NHAFBPAPFLG::NHAFBPAPFLG),
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.EBKNNOPMDCG)
        EBKNNOPMDCG(super::super::GBGJBBNEPHF::GBGJBBNEPHF),
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.LJLEIMGMFLK)
        LJLEIMGMFLK(super::super::AAHKNOFFJOO::AAHKNOFFJOO),
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.CBDECPOACJK)
        CBDECPOACJK(super::super::PALJAFMCLAN::PALJAFMCLAN),
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.MKDMBFBCCCE)
        MKDMBFBCCCE(super::super::LILBCAMGBKF::LILBCAMGBKF),
        // @@protoc_insertion_point(oneof_field:DBLLFOBCKHE.IJKFIIODHKH)
        IJKFIIODHKH(super::super::IKCLNGIOBGH::IKCLNGIOBGH),
    }

    impl ::protobuf::Oneof for NIAOFGECNPK {
    }

    impl ::protobuf::OneofFull for NIAOFGECNPK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DBLLFOBCKHE as ::protobuf::MessageFull>::descriptor().oneof_by_name("NIAOFGECNPK").unwrap()).clone()
        }
    }

    impl NIAOFGECNPK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<NIAOFGECNPK>("NIAOFGECNPK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DBLLFOBCKHE.proto\x1a\x11AAHKNOFFJOO.proto\x1a\x11DKGDDEGEOAL.prot\
    o\x1a\x11EMHPHALEBDL.proto\x1a\x11GBGJBBNEPHF.proto\x1a\x11IKCLNGIOBGH.p\
    roto\x1a\x11LILBCAMGBKF.proto\x1a\x11NHAFBPAPFLG.proto\x1a\x11NPMCCPFIOB\
    O.proto\x1a\x11PALJAFMCLAN.proto\x1a\x11PMMFCPPEHHB.proto\"\x90\x04\n\
    \x0bDBLLFOBCKHE\x120\n\x0bCGPMFDKHJCE\x18\x07\x20\x01(\x0b2\x0c.PMMFCPPE\
    HHBH\0R\x0bCGPMFDKHJCE\x120\n\x0bMGDHKEBJMPD\x18\r\x20\x01(\x0b2\x0c.NPM\
    CCPFIOBOH\0R\x0bMGDHKEBJMPD\x120\n\x0bIOBKKOOFCIA\x18\x06\x20\x01(\x0b2\
    \x0c.DKGDDEGEOALH\0R\x0bIOBKKOOFCIA\x120\n\x0bCFFNCOMFIML\x18\x0b\x20\
    \x01(\x0b2\x0c.EMHPHALEBDLH\0R\x0bCFFNCOMFIML\x120\n\x0bJJBIPEAEABM\x18\
    \x0c\x20\x01(\x0b2\x0c.NHAFBPAPFLGH\0R\x0bJJBIPEAEABM\x120\n\x0bEBKNNOPM\
    DCG\x18\x08\x20\x01(\x0b2\x0c.GBGJBBNEPHFH\0R\x0bEBKNNOPMDCG\x120\n\x0bL\
    JLEIMGMFLK\x18\x0f\x20\x01(\x0b2\x0c.AAHKNOFFJOOH\0R\x0bLJLEIMGMFLK\x120\
    \n\x0bCBDECPOACJK\x18\x04\x20\x01(\x0b2\x0c.PALJAFMCLANH\0R\x0bCBDECPOAC\
    JK\x120\n\x0bMKDMBFBCCCE\x18\n\x20\x01(\x0b2\x0c.LILBCAMGBKFH\0R\x0bMKDM\
    BFBCCCE\x120\n\x0bIJKFIIODHKH\x18\t\x20\x01(\x0b2\x0c.IKCLNGIOBGHH\0R\
    \x0bIJKFIIODHKHB\r\n\x0bNIAOFGECNPKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::AAHKNOFFJOO::file_descriptor().clone());
            deps.push(super::DKGDDEGEOAL::file_descriptor().clone());
            deps.push(super::EMHPHALEBDL::file_descriptor().clone());
            deps.push(super::GBGJBBNEPHF::file_descriptor().clone());
            deps.push(super::IKCLNGIOBGH::file_descriptor().clone());
            deps.push(super::LILBCAMGBKF::file_descriptor().clone());
            deps.push(super::NHAFBPAPFLG::file_descriptor().clone());
            deps.push(super::NPMCCPFIOBO::file_descriptor().clone());
            deps.push(super::PALJAFMCLAN::file_descriptor().clone());
            deps.push(super::PMMFCPPEHHB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DBLLFOBCKHE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
