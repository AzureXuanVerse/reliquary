// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `KNBCDNMNPCL.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:KNBCDNMNPCL)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KNBCDNMNPCL {
    // message fields
    // @@protoc_insertion_point(field:KNBCDNMNPCL.PBIGGPACCPB)
    pub PBIGGPACCPB: u32,
    // @@protoc_insertion_point(field:KNBCDNMNPCL.HLKAKJHDFPC)
    pub HLKAKJHDFPC: ::protobuf::MessageField<super::BKLLPGCEECM::BKLLPGCEECM>,
    // @@protoc_insertion_point(field:KNBCDNMNPCL.ELJINBJEAEL)
    pub ELJINBJEAEL: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:KNBCDNMNPCL.LECAMFAFAFB)
    pub LECAMFAFAFB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:KNBCDNMNPCL.PNDJKIPDPIL)
    pub PNDJKIPDPIL: u32,
    // @@protoc_insertion_point(field:KNBCDNMNPCL.IOPEEMNLIDM)
    pub IOPEEMNLIDM: ::protobuf::EnumOrUnknown<super::RogueStatus::RogueStatus>,
    // @@protoc_insertion_point(field:KNBCDNMNPCL.OKHHADKIMPM)
    pub OKHHADKIMPM: u32,
    // @@protoc_insertion_point(field:KNBCDNMNPCL.HNEBBKENPNP)
    pub HNEBBKENPNP: ::protobuf::MessageField<super::GLGNOKNNJPK::GLGNOKNNJPK>,
    // @@protoc_insertion_point(field:KNBCDNMNPCL.HCGGMKCMPJM)
    pub HCGGMKCMPJM: u32,
    // special fields
    // @@protoc_insertion_point(special_field:KNBCDNMNPCL.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KNBCDNMNPCL {
    fn default() -> &'a KNBCDNMNPCL {
        <KNBCDNMNPCL as ::protobuf::Message>::default_instance()
    }
}

impl KNBCDNMNPCL {
    pub fn new() -> KNBCDNMNPCL {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PBIGGPACCPB",
            |m: &KNBCDNMNPCL| { &m.PBIGGPACCPB },
            |m: &mut KNBCDNMNPCL| { &mut m.PBIGGPACCPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BKLLPGCEECM::BKLLPGCEECM>(
            "HLKAKJHDFPC",
            |m: &KNBCDNMNPCL| { &m.HLKAKJHDFPC },
            |m: &mut KNBCDNMNPCL| { &mut m.HLKAKJHDFPC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ELJINBJEAEL",
            |m: &KNBCDNMNPCL| { &m.ELJINBJEAEL },
            |m: &mut KNBCDNMNPCL| { &mut m.ELJINBJEAEL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LECAMFAFAFB",
            |m: &KNBCDNMNPCL| { &m.LECAMFAFAFB },
            |m: &mut KNBCDNMNPCL| { &mut m.LECAMFAFAFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PNDJKIPDPIL",
            |m: &KNBCDNMNPCL| { &m.PNDJKIPDPIL },
            |m: &mut KNBCDNMNPCL| { &mut m.PNDJKIPDPIL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IOPEEMNLIDM",
            |m: &KNBCDNMNPCL| { &m.IOPEEMNLIDM },
            |m: &mut KNBCDNMNPCL| { &mut m.IOPEEMNLIDM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OKHHADKIMPM",
            |m: &KNBCDNMNPCL| { &m.OKHHADKIMPM },
            |m: &mut KNBCDNMNPCL| { &mut m.OKHHADKIMPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GLGNOKNNJPK::GLGNOKNNJPK>(
            "HNEBBKENPNP",
            |m: &KNBCDNMNPCL| { &m.HNEBBKENPNP },
            |m: &mut KNBCDNMNPCL| { &mut m.HNEBBKENPNP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HCGGMKCMPJM",
            |m: &KNBCDNMNPCL| { &m.HCGGMKCMPJM },
            |m: &mut KNBCDNMNPCL| { &mut m.HCGGMKCMPJM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KNBCDNMNPCL>(
            "KNBCDNMNPCL",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KNBCDNMNPCL {
    const NAME: &'static str = "KNBCDNMNPCL";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.PBIGGPACCPB = is.read_uint32()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HLKAKJHDFPC)?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.ELJINBJEAEL)?;
                },
                24 => {
                    self.ELJINBJEAEL.push(is.read_uint32()?);
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.LECAMFAFAFB)?;
                },
                72 => {
                    self.LECAMFAFAFB.push(is.read_uint32()?);
                },
                48 => {
                    self.PNDJKIPDPIL = is.read_uint32()?;
                },
                64 => {
                    self.IOPEEMNLIDM = is.read_enum_or_unknown()?;
                },
                56 => {
                    self.OKHHADKIMPM = is.read_uint32()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HNEBBKENPNP)?;
                },
                16 => {
                    self.HCGGMKCMPJM = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.PBIGGPACCPB != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.PBIGGPACCPB);
        }
        if let Some(v) = self.HLKAKJHDFPC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.ELJINBJEAEL {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        for value in &self.LECAMFAFAFB {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        if self.PNDJKIPDPIL != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.PNDJKIPDPIL);
        }
        if self.IOPEEMNLIDM != ::protobuf::EnumOrUnknown::new(super::RogueStatus::RogueStatus::ROGUE_STATUS_NONE) {
            my_size += ::protobuf::rt::int32_size(8, self.IOPEEMNLIDM.value());
        }
        if self.OKHHADKIMPM != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.OKHHADKIMPM);
        }
        if let Some(v) = self.HNEBBKENPNP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.HCGGMKCMPJM != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.HCGGMKCMPJM);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.PBIGGPACCPB != 0 {
            os.write_uint32(4, self.PBIGGPACCPB)?;
        }
        if let Some(v) = self.HLKAKJHDFPC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        for v in &self.ELJINBJEAEL {
            os.write_uint32(3, *v)?;
        };
        for v in &self.LECAMFAFAFB {
            os.write_uint32(9, *v)?;
        };
        if self.PNDJKIPDPIL != 0 {
            os.write_uint32(6, self.PNDJKIPDPIL)?;
        }
        if self.IOPEEMNLIDM != ::protobuf::EnumOrUnknown::new(super::RogueStatus::RogueStatus::ROGUE_STATUS_NONE) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.IOPEEMNLIDM))?;
        }
        if self.OKHHADKIMPM != 0 {
            os.write_uint32(7, self.OKHHADKIMPM)?;
        }
        if let Some(v) = self.HNEBBKENPNP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if self.HCGGMKCMPJM != 0 {
            os.write_uint32(2, self.HCGGMKCMPJM)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KNBCDNMNPCL {
        KNBCDNMNPCL::new()
    }

    fn clear(&mut self) {
        self.PBIGGPACCPB = 0;
        self.HLKAKJHDFPC.clear();
        self.ELJINBJEAEL.clear();
        self.LECAMFAFAFB.clear();
        self.PNDJKIPDPIL = 0;
        self.IOPEEMNLIDM = ::protobuf::EnumOrUnknown::new(super::RogueStatus::RogueStatus::ROGUE_STATUS_NONE);
        self.OKHHADKIMPM = 0;
        self.HNEBBKENPNP.clear();
        self.HCGGMKCMPJM = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KNBCDNMNPCL {
        static instance: KNBCDNMNPCL = KNBCDNMNPCL {
            PBIGGPACCPB: 0,
            HLKAKJHDFPC: ::protobuf::MessageField::none(),
            ELJINBJEAEL: ::std::vec::Vec::new(),
            LECAMFAFAFB: ::std::vec::Vec::new(),
            PNDJKIPDPIL: 0,
            IOPEEMNLIDM: ::protobuf::EnumOrUnknown::from_i32(0),
            OKHHADKIMPM: 0,
            HNEBBKENPNP: ::protobuf::MessageField::none(),
            HCGGMKCMPJM: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KNBCDNMNPCL {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KNBCDNMNPCL").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KNBCDNMNPCL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KNBCDNMNPCL {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11KNBCDNMNPCL.proto\x1a\x11BKLLPGCEECM.proto\x1a\x11GLGNOKNNJPK.prot\
    o\x1a\x11RogueStatus.proto\"\xe9\x02\n\x0bKNBCDNMNPCL\x12\x20\n\x0bPBIGG\
    PACCPB\x18\x04\x20\x01(\rR\x0bPBIGGPACCPB\x12.\n\x0bHLKAKJHDFPC\x18\x0f\
    \x20\x01(\x0b2\x0c.BKLLPGCEECMR\x0bHLKAKJHDFPC\x12\x20\n\x0bELJINBJEAEL\
    \x18\x03\x20\x03(\rR\x0bELJINBJEAEL\x12\x20\n\x0bLECAMFAFAFB\x18\t\x20\
    \x03(\rR\x0bLECAMFAFAFB\x12\x20\n\x0bPNDJKIPDPIL\x18\x06\x20\x01(\rR\x0b\
    PNDJKIPDPIL\x12.\n\x0bIOPEEMNLIDM\x18\x08\x20\x01(\x0e2\x0c.RogueStatusR\
    \x0bIOPEEMNLIDM\x12\x20\n\x0bOKHHADKIMPM\x18\x07\x20\x01(\rR\x0bOKHHADKI\
    MPM\x12.\n\x0bHNEBBKENPNP\x18\x0c\x20\x01(\x0b2\x0c.GLGNOKNNJPKR\x0bHNEB\
    BKENPNP\x12\x20\n\x0bHCGGMKCMPJM\x18\x02\x20\x01(\rR\x0bHCGGMKCMPJMb\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BKLLPGCEECM::file_descriptor().clone());
            deps.push(super::GLGNOKNNJPK::file_descriptor().clone());
            deps.push(super::RogueStatus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(KNBCDNMNPCL::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
