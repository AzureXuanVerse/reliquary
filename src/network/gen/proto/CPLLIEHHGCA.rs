// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CPLLIEHHGCA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CPLLIEHHGCA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPLLIEHHGCA {
    // message fields
    // @@protoc_insertion_point(field:CPLLIEHHGCA.JMBAGBFIKCM)
    pub JMBAGBFIKCM: bool,
    // @@protoc_insertion_point(field:CPLLIEHHGCA.ANEAAKIDPFL)
    pub ANEAAKIDPFL: bool,
    // @@protoc_insertion_point(field:CPLLIEHHGCA.CGADMDEKIAC)
    pub CGADMDEKIAC: bool,
    // @@protoc_insertion_point(field:CPLLIEHHGCA.GNOHNPJBFJC)
    pub GNOHNPJBFJC: bool,
    // @@protoc_insertion_point(field:CPLLIEHHGCA.NMJDBOIPFIC)
    pub NMJDBOIPFIC: bool,
    // @@protoc_insertion_point(field:CPLLIEHHGCA.NENGEIIJJCB)
    pub NENGEIIJJCB: bool,
    // @@protoc_insertion_point(field:CPLLIEHHGCA.PJILEMMBLFG)
    pub PJILEMMBLFG: bool,
    // @@protoc_insertion_point(field:CPLLIEHHGCA.CPEEEPDBBPH)
    pub CPEEEPDBBPH: bool,
    // @@protoc_insertion_point(field:CPLLIEHHGCA.MCLJBLKACMP)
    pub MCLJBLKACMP: bool,
    // special fields
    // @@protoc_insertion_point(special_field:CPLLIEHHGCA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPLLIEHHGCA {
    fn default() -> &'a CPLLIEHHGCA {
        <CPLLIEHHGCA as ::protobuf::Message>::default_instance()
    }
}

impl CPLLIEHHGCA {
    pub fn new() -> CPLLIEHHGCA {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JMBAGBFIKCM",
            |m: &CPLLIEHHGCA| { &m.JMBAGBFIKCM },
            |m: &mut CPLLIEHHGCA| { &mut m.JMBAGBFIKCM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ANEAAKIDPFL",
            |m: &CPLLIEHHGCA| { &m.ANEAAKIDPFL },
            |m: &mut CPLLIEHHGCA| { &mut m.ANEAAKIDPFL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CGADMDEKIAC",
            |m: &CPLLIEHHGCA| { &m.CGADMDEKIAC },
            |m: &mut CPLLIEHHGCA| { &mut m.CGADMDEKIAC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GNOHNPJBFJC",
            |m: &CPLLIEHHGCA| { &m.GNOHNPJBFJC },
            |m: &mut CPLLIEHHGCA| { &mut m.GNOHNPJBFJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NMJDBOIPFIC",
            |m: &CPLLIEHHGCA| { &m.NMJDBOIPFIC },
            |m: &mut CPLLIEHHGCA| { &mut m.NMJDBOIPFIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NENGEIIJJCB",
            |m: &CPLLIEHHGCA| { &m.NENGEIIJJCB },
            |m: &mut CPLLIEHHGCA| { &mut m.NENGEIIJJCB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PJILEMMBLFG",
            |m: &CPLLIEHHGCA| { &m.PJILEMMBLFG },
            |m: &mut CPLLIEHHGCA| { &mut m.PJILEMMBLFG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPEEEPDBBPH",
            |m: &CPLLIEHHGCA| { &m.CPEEEPDBBPH },
            |m: &mut CPLLIEHHGCA| { &mut m.CPEEEPDBBPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MCLJBLKACMP",
            |m: &CPLLIEHHGCA| { &m.MCLJBLKACMP },
            |m: &mut CPLLIEHHGCA| { &mut m.MCLJBLKACMP },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPLLIEHHGCA>(
            "CPLLIEHHGCA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPLLIEHHGCA {
    const NAME: &'static str = "CPLLIEHHGCA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.JMBAGBFIKCM = is.read_bool()?;
                },
                104 => {
                    self.ANEAAKIDPFL = is.read_bool()?;
                },
                96 => {
                    self.CGADMDEKIAC = is.read_bool()?;
                },
                32 => {
                    self.GNOHNPJBFJC = is.read_bool()?;
                },
                48 => {
                    self.NMJDBOIPFIC = is.read_bool()?;
                },
                112 => {
                    self.NENGEIIJJCB = is.read_bool()?;
                },
                56 => {
                    self.PJILEMMBLFG = is.read_bool()?;
                },
                24 => {
                    self.CPEEEPDBBPH = is.read_bool()?;
                },
                40 => {
                    self.MCLJBLKACMP = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.JMBAGBFIKCM != false {
            my_size += 1 + 1;
        }
        if self.ANEAAKIDPFL != false {
            my_size += 1 + 1;
        }
        if self.CGADMDEKIAC != false {
            my_size += 1 + 1;
        }
        if self.GNOHNPJBFJC != false {
            my_size += 1 + 1;
        }
        if self.NMJDBOIPFIC != false {
            my_size += 1 + 1;
        }
        if self.NENGEIIJJCB != false {
            my_size += 1 + 1;
        }
        if self.PJILEMMBLFG != false {
            my_size += 1 + 1;
        }
        if self.CPEEEPDBBPH != false {
            my_size += 1 + 1;
        }
        if self.MCLJBLKACMP != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.JMBAGBFIKCM != false {
            os.write_bool(9, self.JMBAGBFIKCM)?;
        }
        if self.ANEAAKIDPFL != false {
            os.write_bool(13, self.ANEAAKIDPFL)?;
        }
        if self.CGADMDEKIAC != false {
            os.write_bool(12, self.CGADMDEKIAC)?;
        }
        if self.GNOHNPJBFJC != false {
            os.write_bool(4, self.GNOHNPJBFJC)?;
        }
        if self.NMJDBOIPFIC != false {
            os.write_bool(6, self.NMJDBOIPFIC)?;
        }
        if self.NENGEIIJJCB != false {
            os.write_bool(14, self.NENGEIIJJCB)?;
        }
        if self.PJILEMMBLFG != false {
            os.write_bool(7, self.PJILEMMBLFG)?;
        }
        if self.CPEEEPDBBPH != false {
            os.write_bool(3, self.CPEEEPDBBPH)?;
        }
        if self.MCLJBLKACMP != false {
            os.write_bool(5, self.MCLJBLKACMP)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPLLIEHHGCA {
        CPLLIEHHGCA::new()
    }

    fn clear(&mut self) {
        self.JMBAGBFIKCM = false;
        self.ANEAAKIDPFL = false;
        self.CGADMDEKIAC = false;
        self.GNOHNPJBFJC = false;
        self.NMJDBOIPFIC = false;
        self.NENGEIIJJCB = false;
        self.PJILEMMBLFG = false;
        self.CPEEEPDBBPH = false;
        self.MCLJBLKACMP = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPLLIEHHGCA {
        static instance: CPLLIEHHGCA = CPLLIEHHGCA {
            JMBAGBFIKCM: false,
            ANEAAKIDPFL: false,
            CGADMDEKIAC: false,
            GNOHNPJBFJC: false,
            NMJDBOIPFIC: false,
            NENGEIIJJCB: false,
            PJILEMMBLFG: false,
            CPEEEPDBBPH: false,
            MCLJBLKACMP: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPLLIEHHGCA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPLLIEHHGCA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPLLIEHHGCA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPLLIEHHGCA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CPLLIEHHGCA.proto\"\xbf\x02\n\x0bCPLLIEHHGCA\x12\x20\n\x0bJMBAGBFI\
    KCM\x18\t\x20\x01(\x08R\x0bJMBAGBFIKCM\x12\x20\n\x0bANEAAKIDPFL\x18\r\
    \x20\x01(\x08R\x0bANEAAKIDPFL\x12\x20\n\x0bCGADMDEKIAC\x18\x0c\x20\x01(\
    \x08R\x0bCGADMDEKIAC\x12\x20\n\x0bGNOHNPJBFJC\x18\x04\x20\x01(\x08R\x0bG\
    NOHNPJBFJC\x12\x20\n\x0bNMJDBOIPFIC\x18\x06\x20\x01(\x08R\x0bNMJDBOIPFIC\
    \x12\x20\n\x0bNENGEIIJJCB\x18\x0e\x20\x01(\x08R\x0bNENGEIIJJCB\x12\x20\n\
    \x0bPJILEMMBLFG\x18\x07\x20\x01(\x08R\x0bPJILEMMBLFG\x12\x20\n\x0bCPEEEP\
    DBBPH\x18\x03\x20\x01(\x08R\x0bCPEEEPDBBPH\x12\x20\n\x0bMCLJBLKACMP\x18\
    \x05\x20\x01(\x08R\x0bMCLJBLKACMPb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CPLLIEHHGCA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
