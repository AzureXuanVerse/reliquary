// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OAGDODGDCJF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:OAGDODGDCJF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OAGDODGDCJF {
    // message fields
    // @@protoc_insertion_point(field:OAGDODGDCJF.KCHEGPECMHM)
    pub KCHEGPECMHM: u32,
    // @@protoc_insertion_point(field:OAGDODGDCJF.OLIDJODAKKA)
    pub OLIDJODAKKA: i32,
    // @@protoc_insertion_point(field:OAGDODGDCJF.HPKAIOBLFBP)
    pub HPKAIOBLFBP: ::protobuf::MessageField<super::JCHABMJKNAH::JCHABMJKNAH>,
    // @@protoc_insertion_point(field:OAGDODGDCJF.GCCEGGBEICJ)
    pub GCCEGGBEICJ: u32,
    // @@protoc_insertion_point(field:OAGDODGDCJF.MKEJBEPHKKB)
    pub MKEJBEPHKKB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OAGDODGDCJF.BLIAKAKFKFK)
    pub BLIAKAKFKFK: i32,
    // @@protoc_insertion_point(field:OAGDODGDCJF.FFKNMAONGIB)
    pub FFKNMAONGIB: u32,
    // @@protoc_insertion_point(field:OAGDODGDCJF.HDAHAHDPKMP)
    pub HDAHAHDPKMP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OAGDODGDCJF.EEAPLNKDKLO)
    pub EEAPLNKDKLO: u32,
    // special fields
    // @@protoc_insertion_point(special_field:OAGDODGDCJF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OAGDODGDCJF {
    fn default() -> &'a OAGDODGDCJF {
        <OAGDODGDCJF as ::protobuf::Message>::default_instance()
    }
}

impl OAGDODGDCJF {
    pub fn new() -> OAGDODGDCJF {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KCHEGPECMHM",
            |m: &OAGDODGDCJF| { &m.KCHEGPECMHM },
            |m: &mut OAGDODGDCJF| { &mut m.KCHEGPECMHM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OLIDJODAKKA",
            |m: &OAGDODGDCJF| { &m.OLIDJODAKKA },
            |m: &mut OAGDODGDCJF| { &mut m.OLIDJODAKKA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JCHABMJKNAH::JCHABMJKNAH>(
            "HPKAIOBLFBP",
            |m: &OAGDODGDCJF| { &m.HPKAIOBLFBP },
            |m: &mut OAGDODGDCJF| { &mut m.HPKAIOBLFBP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GCCEGGBEICJ",
            |m: &OAGDODGDCJF| { &m.GCCEGGBEICJ },
            |m: &mut OAGDODGDCJF| { &mut m.GCCEGGBEICJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MKEJBEPHKKB",
            |m: &OAGDODGDCJF| { &m.MKEJBEPHKKB },
            |m: &mut OAGDODGDCJF| { &mut m.MKEJBEPHKKB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BLIAKAKFKFK",
            |m: &OAGDODGDCJF| { &m.BLIAKAKFKFK },
            |m: &mut OAGDODGDCJF| { &mut m.BLIAKAKFKFK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FFKNMAONGIB",
            |m: &OAGDODGDCJF| { &m.FFKNMAONGIB },
            |m: &mut OAGDODGDCJF| { &mut m.FFKNMAONGIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HDAHAHDPKMP",
            |m: &OAGDODGDCJF| { &m.HDAHAHDPKMP },
            |m: &mut OAGDODGDCJF| { &mut m.HDAHAHDPKMP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EEAPLNKDKLO",
            |m: &OAGDODGDCJF| { &m.EEAPLNKDKLO },
            |m: &mut OAGDODGDCJF| { &mut m.EEAPLNKDKLO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OAGDODGDCJF>(
            "OAGDODGDCJF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OAGDODGDCJF {
    const NAME: &'static str = "OAGDODGDCJF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.KCHEGPECMHM = is.read_uint32()?;
                },
                112 => {
                    self.OLIDJODAKKA = is.read_int32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HPKAIOBLFBP)?;
                },
                120 => {
                    self.GCCEGGBEICJ = is.read_uint32()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.MKEJBEPHKKB)?;
                },
                40 => {
                    self.MKEJBEPHKKB.push(is.read_uint32()?);
                },
                88 => {
                    self.BLIAKAKFKFK = is.read_int32()?;
                },
                104 => {
                    self.FFKNMAONGIB = is.read_uint32()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.HDAHAHDPKMP)?;
                },
                32 => {
                    self.HDAHAHDPKMP.push(is.read_uint32()?);
                },
                16 => {
                    self.EEAPLNKDKLO = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.KCHEGPECMHM != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.KCHEGPECMHM);
        }
        if self.OLIDJODAKKA != 0 {
            my_size += ::protobuf::rt::int32_size(14, self.OLIDJODAKKA);
        }
        if let Some(v) = self.HPKAIOBLFBP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.GCCEGGBEICJ != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.GCCEGGBEICJ);
        }
        for value in &self.MKEJBEPHKKB {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        if self.BLIAKAKFKFK != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.BLIAKAKFKFK);
        }
        if self.FFKNMAONGIB != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.FFKNMAONGIB);
        }
        for value in &self.HDAHAHDPKMP {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        if self.EEAPLNKDKLO != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.EEAPLNKDKLO);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.KCHEGPECMHM != 0 {
            os.write_uint32(7, self.KCHEGPECMHM)?;
        }
        if self.OLIDJODAKKA != 0 {
            os.write_int32(14, self.OLIDJODAKKA)?;
        }
        if let Some(v) = self.HPKAIOBLFBP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.GCCEGGBEICJ != 0 {
            os.write_uint32(15, self.GCCEGGBEICJ)?;
        }
        for v in &self.MKEJBEPHKKB {
            os.write_uint32(5, *v)?;
        };
        if self.BLIAKAKFKFK != 0 {
            os.write_int32(11, self.BLIAKAKFKFK)?;
        }
        if self.FFKNMAONGIB != 0 {
            os.write_uint32(13, self.FFKNMAONGIB)?;
        }
        for v in &self.HDAHAHDPKMP {
            os.write_uint32(4, *v)?;
        };
        if self.EEAPLNKDKLO != 0 {
            os.write_uint32(2, self.EEAPLNKDKLO)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OAGDODGDCJF {
        OAGDODGDCJF::new()
    }

    fn clear(&mut self) {
        self.KCHEGPECMHM = 0;
        self.OLIDJODAKKA = 0;
        self.HPKAIOBLFBP.clear();
        self.GCCEGGBEICJ = 0;
        self.MKEJBEPHKKB.clear();
        self.BLIAKAKFKFK = 0;
        self.FFKNMAONGIB = 0;
        self.HDAHAHDPKMP.clear();
        self.EEAPLNKDKLO = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OAGDODGDCJF {
        static instance: OAGDODGDCJF = OAGDODGDCJF {
            KCHEGPECMHM: 0,
            OLIDJODAKKA: 0,
            HPKAIOBLFBP: ::protobuf::MessageField::none(),
            GCCEGGBEICJ: 0,
            MKEJBEPHKKB: ::std::vec::Vec::new(),
            BLIAKAKFKFK: 0,
            FFKNMAONGIB: 0,
            HDAHAHDPKMP: ::std::vec::Vec::new(),
            EEAPLNKDKLO: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OAGDODGDCJF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OAGDODGDCJF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OAGDODGDCJF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OAGDODGDCJF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OAGDODGDCJF.proto\x1a\x11JCHABMJKNAH.proto\"\xcd\x02\n\x0bOAGDODGD\
    CJF\x12\x20\n\x0bKCHEGPECMHM\x18\x07\x20\x01(\rR\x0bKCHEGPECMHM\x12\x20\
    \n\x0bOLIDJODAKKA\x18\x0e\x20\x01(\x05R\x0bOLIDJODAKKA\x12.\n\x0bHPKAIOB\
    LFBP\x18\x01\x20\x01(\x0b2\x0c.JCHABMJKNAHR\x0bHPKAIOBLFBP\x12\x20\n\x0b\
    GCCEGGBEICJ\x18\x0f\x20\x01(\rR\x0bGCCEGGBEICJ\x12\x20\n\x0bMKEJBEPHKKB\
    \x18\x05\x20\x03(\rR\x0bMKEJBEPHKKB\x12\x20\n\x0bBLIAKAKFKFK\x18\x0b\x20\
    \x01(\x05R\x0bBLIAKAKFKFK\x12\x20\n\x0bFFKNMAONGIB\x18\r\x20\x01(\rR\x0b\
    FFKNMAONGIB\x12\x20\n\x0bHDAHAHDPKMP\x18\x04\x20\x03(\rR\x0bHDAHAHDPKMP\
    \x12\x20\n\x0bEEAPLNKDKLO\x18\x02\x20\x01(\rR\x0bEEAPLNKDKLOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::JCHABMJKNAH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OAGDODGDCJF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
