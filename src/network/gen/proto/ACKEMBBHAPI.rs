// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ACKEMBBHAPI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ACKEMBBHAPI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ACKEMBBHAPI {
    // message fields
    // @@protoc_insertion_point(field:ACKEMBBHAPI.ECPCKOPKCOA)
    pub ECPCKOPKCOA: u32,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.IAJHMELEJOB)
    pub IAJHMELEJOB: f64,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.OLPBENMDNJL)
    pub OLPBENMDNJL: f64,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.BFEELFCPOCD)
    pub BFEELFCPOCD: u32,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.DMMHEKOJLGC)
    pub DMMHEKOJLGC: u32,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.LMCADMLONPL)
    pub LMCADMLONPL: u32,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.HOBCDLDDBEE)
    pub HOBCDLDDBEE: u32,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.FMJPIKHPDJG)
    pub FMJPIKHPDJG: f64,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.JLNENFKAFPH)
    pub JLNENFKAFPH: u32,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.NMMMGHPEBNA)
    pub NMMMGHPEBNA: u32,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.NPMLANODKJM)
    pub NPMLANODKJM: f64,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.DBFPHLOOAKG)
    pub DBFPHLOOAKG: u32,
    // @@protoc_insertion_point(field:ACKEMBBHAPI.EOEBMCFAEOL)
    pub EOEBMCFAEOL: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ACKEMBBHAPI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ACKEMBBHAPI {
    fn default() -> &'a ACKEMBBHAPI {
        <ACKEMBBHAPI as ::protobuf::Message>::default_instance()
    }
}

impl ACKEMBBHAPI {
    pub fn new() -> ACKEMBBHAPI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ECPCKOPKCOA",
            |m: &ACKEMBBHAPI| { &m.ECPCKOPKCOA },
            |m: &mut ACKEMBBHAPI| { &mut m.ECPCKOPKCOA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IAJHMELEJOB",
            |m: &ACKEMBBHAPI| { &m.IAJHMELEJOB },
            |m: &mut ACKEMBBHAPI| { &mut m.IAJHMELEJOB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OLPBENMDNJL",
            |m: &ACKEMBBHAPI| { &m.OLPBENMDNJL },
            |m: &mut ACKEMBBHAPI| { &mut m.OLPBENMDNJL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BFEELFCPOCD",
            |m: &ACKEMBBHAPI| { &m.BFEELFCPOCD },
            |m: &mut ACKEMBBHAPI| { &mut m.BFEELFCPOCD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DMMHEKOJLGC",
            |m: &ACKEMBBHAPI| { &m.DMMHEKOJLGC },
            |m: &mut ACKEMBBHAPI| { &mut m.DMMHEKOJLGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LMCADMLONPL",
            |m: &ACKEMBBHAPI| { &m.LMCADMLONPL },
            |m: &mut ACKEMBBHAPI| { &mut m.LMCADMLONPL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HOBCDLDDBEE",
            |m: &ACKEMBBHAPI| { &m.HOBCDLDDBEE },
            |m: &mut ACKEMBBHAPI| { &mut m.HOBCDLDDBEE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FMJPIKHPDJG",
            |m: &ACKEMBBHAPI| { &m.FMJPIKHPDJG },
            |m: &mut ACKEMBBHAPI| { &mut m.FMJPIKHPDJG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JLNENFKAFPH",
            |m: &ACKEMBBHAPI| { &m.JLNENFKAFPH },
            |m: &mut ACKEMBBHAPI| { &mut m.JLNENFKAFPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NMMMGHPEBNA",
            |m: &ACKEMBBHAPI| { &m.NMMMGHPEBNA },
            |m: &mut ACKEMBBHAPI| { &mut m.NMMMGHPEBNA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NPMLANODKJM",
            |m: &ACKEMBBHAPI| { &m.NPMLANODKJM },
            |m: &mut ACKEMBBHAPI| { &mut m.NPMLANODKJM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBFPHLOOAKG",
            |m: &ACKEMBBHAPI| { &m.DBFPHLOOAKG },
            |m: &mut ACKEMBBHAPI| { &mut m.DBFPHLOOAKG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EOEBMCFAEOL",
            |m: &ACKEMBBHAPI| { &m.EOEBMCFAEOL },
            |m: &mut ACKEMBBHAPI| { &mut m.EOEBMCFAEOL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ACKEMBBHAPI>(
            "ACKEMBBHAPI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ACKEMBBHAPI {
    const NAME: &'static str = "ACKEMBBHAPI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ECPCKOPKCOA = is.read_uint32()?;
                },
                17 => {
                    self.IAJHMELEJOB = is.read_double()?;
                },
                25 => {
                    self.OLPBENMDNJL = is.read_double()?;
                },
                32 => {
                    self.BFEELFCPOCD = is.read_uint32()?;
                },
                40 => {
                    self.DMMHEKOJLGC = is.read_uint32()?;
                },
                48 => {
                    self.LMCADMLONPL = is.read_uint32()?;
                },
                56 => {
                    self.HOBCDLDDBEE = is.read_uint32()?;
                },
                65 => {
                    self.FMJPIKHPDJG = is.read_double()?;
                },
                72 => {
                    self.JLNENFKAFPH = is.read_uint32()?;
                },
                80 => {
                    self.NMMMGHPEBNA = is.read_uint32()?;
                },
                89 => {
                    self.NPMLANODKJM = is.read_double()?;
                },
                96 => {
                    self.DBFPHLOOAKG = is.read_uint32()?;
                },
                104 => {
                    self.EOEBMCFAEOL = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ECPCKOPKCOA != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.ECPCKOPKCOA);
        }
        if self.IAJHMELEJOB != 0. {
            my_size += 1 + 8;
        }
        if self.OLPBENMDNJL != 0. {
            my_size += 1 + 8;
        }
        if self.BFEELFCPOCD != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.BFEELFCPOCD);
        }
        if self.DMMHEKOJLGC != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.DMMHEKOJLGC);
        }
        if self.LMCADMLONPL != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.LMCADMLONPL);
        }
        if self.HOBCDLDDBEE != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.HOBCDLDDBEE);
        }
        if self.FMJPIKHPDJG != 0. {
            my_size += 1 + 8;
        }
        if self.JLNENFKAFPH != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.JLNENFKAFPH);
        }
        if self.NMMMGHPEBNA != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.NMMMGHPEBNA);
        }
        if self.NPMLANODKJM != 0. {
            my_size += 1 + 8;
        }
        if self.DBFPHLOOAKG != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.DBFPHLOOAKG);
        }
        if self.EOEBMCFAEOL != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.EOEBMCFAEOL);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ECPCKOPKCOA != 0 {
            os.write_uint32(1, self.ECPCKOPKCOA)?;
        }
        if self.IAJHMELEJOB != 0. {
            os.write_double(2, self.IAJHMELEJOB)?;
        }
        if self.OLPBENMDNJL != 0. {
            os.write_double(3, self.OLPBENMDNJL)?;
        }
        if self.BFEELFCPOCD != 0 {
            os.write_uint32(4, self.BFEELFCPOCD)?;
        }
        if self.DMMHEKOJLGC != 0 {
            os.write_uint32(5, self.DMMHEKOJLGC)?;
        }
        if self.LMCADMLONPL != 0 {
            os.write_uint32(6, self.LMCADMLONPL)?;
        }
        if self.HOBCDLDDBEE != 0 {
            os.write_uint32(7, self.HOBCDLDDBEE)?;
        }
        if self.FMJPIKHPDJG != 0. {
            os.write_double(8, self.FMJPIKHPDJG)?;
        }
        if self.JLNENFKAFPH != 0 {
            os.write_uint32(9, self.JLNENFKAFPH)?;
        }
        if self.NMMMGHPEBNA != 0 {
            os.write_uint32(10, self.NMMMGHPEBNA)?;
        }
        if self.NPMLANODKJM != 0. {
            os.write_double(11, self.NPMLANODKJM)?;
        }
        if self.DBFPHLOOAKG != 0 {
            os.write_uint32(12, self.DBFPHLOOAKG)?;
        }
        if self.EOEBMCFAEOL != 0 {
            os.write_uint32(13, self.EOEBMCFAEOL)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ACKEMBBHAPI {
        ACKEMBBHAPI::new()
    }

    fn clear(&mut self) {
        self.ECPCKOPKCOA = 0;
        self.IAJHMELEJOB = 0.;
        self.OLPBENMDNJL = 0.;
        self.BFEELFCPOCD = 0;
        self.DMMHEKOJLGC = 0;
        self.LMCADMLONPL = 0;
        self.HOBCDLDDBEE = 0;
        self.FMJPIKHPDJG = 0.;
        self.JLNENFKAFPH = 0;
        self.NMMMGHPEBNA = 0;
        self.NPMLANODKJM = 0.;
        self.DBFPHLOOAKG = 0;
        self.EOEBMCFAEOL = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ACKEMBBHAPI {
        static instance: ACKEMBBHAPI = ACKEMBBHAPI {
            ECPCKOPKCOA: 0,
            IAJHMELEJOB: 0.,
            OLPBENMDNJL: 0.,
            BFEELFCPOCD: 0,
            DMMHEKOJLGC: 0,
            LMCADMLONPL: 0,
            HOBCDLDDBEE: 0,
            FMJPIKHPDJG: 0.,
            JLNENFKAFPH: 0,
            NMMMGHPEBNA: 0,
            NPMLANODKJM: 0.,
            DBFPHLOOAKG: 0,
            EOEBMCFAEOL: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ACKEMBBHAPI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ACKEMBBHAPI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ACKEMBBHAPI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ACKEMBBHAPI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ACKEMBBHAPI.proto\"\xc7\x03\n\x0bACKEMBBHAPI\x12\x20\n\x0bECPCKOPK\
    COA\x18\x01\x20\x01(\rR\x0bECPCKOPKCOA\x12\x20\n\x0bIAJHMELEJOB\x18\x02\
    \x20\x01(\x01R\x0bIAJHMELEJOB\x12\x20\n\x0bOLPBENMDNJL\x18\x03\x20\x01(\
    \x01R\x0bOLPBENMDNJL\x12\x20\n\x0bBFEELFCPOCD\x18\x04\x20\x01(\rR\x0bBFE\
    ELFCPOCD\x12\x20\n\x0bDMMHEKOJLGC\x18\x05\x20\x01(\rR\x0bDMMHEKOJLGC\x12\
    \x20\n\x0bLMCADMLONPL\x18\x06\x20\x01(\rR\x0bLMCADMLONPL\x12\x20\n\x0bHO\
    BCDLDDBEE\x18\x07\x20\x01(\rR\x0bHOBCDLDDBEE\x12\x20\n\x0bFMJPIKHPDJG\
    \x18\x08\x20\x01(\x01R\x0bFMJPIKHPDJG\x12\x20\n\x0bJLNENFKAFPH\x18\t\x20\
    \x01(\rR\x0bJLNENFKAFPH\x12\x20\n\x0bNMMMGHPEBNA\x18\n\x20\x01(\rR\x0bNM\
    MMGHPEBNA\x12\x20\n\x0bNPMLANODKJM\x18\x0b\x20\x01(\x01R\x0bNPMLANODKJM\
    \x12\x20\n\x0bDBFPHLOOAKG\x18\x0c\x20\x01(\rR\x0bDBFPHLOOAKG\x12\x20\n\
    \x0bEOEBMCFAEOL\x18\r\x20\x01(\rR\x0bEOEBMCFAEOLb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ACKEMBBHAPI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
