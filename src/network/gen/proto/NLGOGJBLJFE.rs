// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `NLGOGJBLJFE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:NLGOGJBLJFE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NLGOGJBLJFE {
    // message fields
    // @@protoc_insertion_point(field:NLGOGJBLJFE.JIFCGLKLNEF)
    pub JIFCGLKLNEF: ::protobuf::MessageField<super::JPCOFGJAJEN::JPCOFGJAJEN>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.DAGLMONMMMH)
    pub DAGLMONMMMH: ::protobuf::MessageField<super::OAKBKKFACHE::OAKBKKFACHE>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.NJCHCICPMNO)
    pub NJCHCICPMNO: ::protobuf::MessageField<super::NBNMGEKGDCB::NBNMGEKGDCB>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.CKDFADABICO)
    pub CKDFADABICO: ::protobuf::MessageField<super::HMECPBPGDJF::HMECPBPGDJF>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.ABKOHABEMMF)
    pub ABKOHABEMMF: ::protobuf::MessageField<super::IAMPEBBEGFH::IAMPEBBEGFH>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.DBLNDGLOAHP)
    pub DBLNDGLOAHP: ::protobuf::MessageField<super::JIIOHNDIHAM::JIIOHNDIHAM>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.NBLBECMLILO)
    pub NBLBECMLILO: ::protobuf::MessageField<super::BLMNOLNALIE::BLMNOLNALIE>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.NECNHGJEHKE)
    pub NECNHGJEHKE: ::protobuf::MessageField<super::OICEICJKOCM::OICEICJKOCM>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.FAAMBPABPHG)
    pub FAAMBPABPHG: u32,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.GGHEBMCAJKI)
    pub GGHEBMCAJKI: ::protobuf::MessageField<super::NECPIBKAFJE::NECPIBKAFJE>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.DAKOPHLKOGK)
    pub DAKOPHLKOGK: ::protobuf::MessageField<super::ANGHJLBFOAL::ANGHJLBFOAL>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.JNNLBPGGEDM)
    pub JNNLBPGGEDM: ::protobuf::MessageField<super::JFHEFPLCCCJ::JFHEFPLCCCJ>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.CNKNDNIMFFL)
    pub CNKNDNIMFFL: ::protobuf::MessageField<super::FECMANIDNGM::FECMANIDNGM>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.LHINNDFFHHC)
    pub LHINNDFFHHC: ::protobuf::MessageField<super::LNFJDOCNPOM::LNFJDOCNPOM>,
    // @@protoc_insertion_point(field:NLGOGJBLJFE.PGHOFKJDHMM)
    pub PGHOFKJDHMM: ::std::vec::Vec<super::KBEDBHCIFHD::KBEDBHCIFHD>,
    // special fields
    // @@protoc_insertion_point(special_field:NLGOGJBLJFE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NLGOGJBLJFE {
    fn default() -> &'a NLGOGJBLJFE {
        <NLGOGJBLJFE as ::protobuf::Message>::default_instance()
    }
}

impl NLGOGJBLJFE {
    pub fn new() -> NLGOGJBLJFE {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JPCOFGJAJEN::JPCOFGJAJEN>(
            "JIFCGLKLNEF",
            |m: &NLGOGJBLJFE| { &m.JIFCGLKLNEF },
            |m: &mut NLGOGJBLJFE| { &mut m.JIFCGLKLNEF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OAKBKKFACHE::OAKBKKFACHE>(
            "DAGLMONMMMH",
            |m: &NLGOGJBLJFE| { &m.DAGLMONMMMH },
            |m: &mut NLGOGJBLJFE| { &mut m.DAGLMONMMMH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NBNMGEKGDCB::NBNMGEKGDCB>(
            "NJCHCICPMNO",
            |m: &NLGOGJBLJFE| { &m.NJCHCICPMNO },
            |m: &mut NLGOGJBLJFE| { &mut m.NJCHCICPMNO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HMECPBPGDJF::HMECPBPGDJF>(
            "CKDFADABICO",
            |m: &NLGOGJBLJFE| { &m.CKDFADABICO },
            |m: &mut NLGOGJBLJFE| { &mut m.CKDFADABICO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IAMPEBBEGFH::IAMPEBBEGFH>(
            "ABKOHABEMMF",
            |m: &NLGOGJBLJFE| { &m.ABKOHABEMMF },
            |m: &mut NLGOGJBLJFE| { &mut m.ABKOHABEMMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JIIOHNDIHAM::JIIOHNDIHAM>(
            "DBLNDGLOAHP",
            |m: &NLGOGJBLJFE| { &m.DBLNDGLOAHP },
            |m: &mut NLGOGJBLJFE| { &mut m.DBLNDGLOAHP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BLMNOLNALIE::BLMNOLNALIE>(
            "NBLBECMLILO",
            |m: &NLGOGJBLJFE| { &m.NBLBECMLILO },
            |m: &mut NLGOGJBLJFE| { &mut m.NBLBECMLILO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OICEICJKOCM::OICEICJKOCM>(
            "NECNHGJEHKE",
            |m: &NLGOGJBLJFE| { &m.NECNHGJEHKE },
            |m: &mut NLGOGJBLJFE| { &mut m.NECNHGJEHKE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FAAMBPABPHG",
            |m: &NLGOGJBLJFE| { &m.FAAMBPABPHG },
            |m: &mut NLGOGJBLJFE| { &mut m.FAAMBPABPHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NECPIBKAFJE::NECPIBKAFJE>(
            "GGHEBMCAJKI",
            |m: &NLGOGJBLJFE| { &m.GGHEBMCAJKI },
            |m: &mut NLGOGJBLJFE| { &mut m.GGHEBMCAJKI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ANGHJLBFOAL::ANGHJLBFOAL>(
            "DAKOPHLKOGK",
            |m: &NLGOGJBLJFE| { &m.DAKOPHLKOGK },
            |m: &mut NLGOGJBLJFE| { &mut m.DAKOPHLKOGK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JFHEFPLCCCJ::JFHEFPLCCCJ>(
            "JNNLBPGGEDM",
            |m: &NLGOGJBLJFE| { &m.JNNLBPGGEDM },
            |m: &mut NLGOGJBLJFE| { &mut m.JNNLBPGGEDM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FECMANIDNGM::FECMANIDNGM>(
            "CNKNDNIMFFL",
            |m: &NLGOGJBLJFE| { &m.CNKNDNIMFFL },
            |m: &mut NLGOGJBLJFE| { &mut m.CNKNDNIMFFL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LNFJDOCNPOM::LNFJDOCNPOM>(
            "LHINNDFFHHC",
            |m: &NLGOGJBLJFE| { &m.LHINNDFFHHC },
            |m: &mut NLGOGJBLJFE| { &mut m.LHINNDFFHHC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PGHOFKJDHMM",
            |m: &NLGOGJBLJFE| { &m.PGHOFKJDHMM },
            |m: &mut NLGOGJBLJFE| { &mut m.PGHOFKJDHMM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NLGOGJBLJFE>(
            "NLGOGJBLJFE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NLGOGJBLJFE {
    const NAME: &'static str = "NLGOGJBLJFE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JIFCGLKLNEF)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DAGLMONMMMH)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NJCHCICPMNO)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CKDFADABICO)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ABKOHABEMMF)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DBLNDGLOAHP)?;
                },
                4306 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NBLBECMLILO)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NECNHGJEHKE)?;
                },
                64 => {
                    self.FAAMBPABPHG = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GGHEBMCAJKI)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DAKOPHLKOGK)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JNNLBPGGEDM)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CNKNDNIMFFL)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LHINNDFFHHC)?;
                },
                106 => {
                    self.PGHOFKJDHMM.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.JIFCGLKLNEF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DAGLMONMMMH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NJCHCICPMNO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CKDFADABICO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ABKOHABEMMF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DBLNDGLOAHP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NBLBECMLILO.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NECNHGJEHKE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.FAAMBPABPHG != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.FAAMBPABPHG);
        }
        if let Some(v) = self.GGHEBMCAJKI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DAKOPHLKOGK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JNNLBPGGEDM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CNKNDNIMFFL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LHINNDFFHHC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.PGHOFKJDHMM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.JIFCGLKLNEF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.DAGLMONMMMH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.NJCHCICPMNO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.CKDFADABICO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.ABKOHABEMMF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.DBLNDGLOAHP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.NBLBECMLILO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(538, v, os)?;
        }
        if let Some(v) = self.NECNHGJEHKE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.FAAMBPABPHG != 0 {
            os.write_uint32(8, self.FAAMBPABPHG)?;
        }
        if let Some(v) = self.GGHEBMCAJKI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.DAKOPHLKOGK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.JNNLBPGGEDM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.CNKNDNIMFFL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.LHINNDFFHHC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.PGHOFKJDHMM {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NLGOGJBLJFE {
        NLGOGJBLJFE::new()
    }

    fn clear(&mut self) {
        self.JIFCGLKLNEF.clear();
        self.DAGLMONMMMH.clear();
        self.NJCHCICPMNO.clear();
        self.CKDFADABICO.clear();
        self.ABKOHABEMMF.clear();
        self.DBLNDGLOAHP.clear();
        self.NBLBECMLILO.clear();
        self.NECNHGJEHKE.clear();
        self.FAAMBPABPHG = 0;
        self.GGHEBMCAJKI.clear();
        self.DAKOPHLKOGK.clear();
        self.JNNLBPGGEDM.clear();
        self.CNKNDNIMFFL.clear();
        self.LHINNDFFHHC.clear();
        self.PGHOFKJDHMM.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NLGOGJBLJFE {
        static instance: NLGOGJBLJFE = NLGOGJBLJFE {
            JIFCGLKLNEF: ::protobuf::MessageField::none(),
            DAGLMONMMMH: ::protobuf::MessageField::none(),
            NJCHCICPMNO: ::protobuf::MessageField::none(),
            CKDFADABICO: ::protobuf::MessageField::none(),
            ABKOHABEMMF: ::protobuf::MessageField::none(),
            DBLNDGLOAHP: ::protobuf::MessageField::none(),
            NBLBECMLILO: ::protobuf::MessageField::none(),
            NECNHGJEHKE: ::protobuf::MessageField::none(),
            FAAMBPABPHG: 0,
            GGHEBMCAJKI: ::protobuf::MessageField::none(),
            DAKOPHLKOGK: ::protobuf::MessageField::none(),
            JNNLBPGGEDM: ::protobuf::MessageField::none(),
            CNKNDNIMFFL: ::protobuf::MessageField::none(),
            LHINNDFFHHC: ::protobuf::MessageField::none(),
            PGHOFKJDHMM: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NLGOGJBLJFE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NLGOGJBLJFE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NLGOGJBLJFE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NLGOGJBLJFE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11NLGOGJBLJFE.proto\x1a\x11ANGHJLBFOAL.proto\x1a\x11BLMNOLNALIE.prot\
    o\x1a\x11FECMANIDNGM.proto\x1a\x11HMECPBPGDJF.proto\x1a\x11IAMPEBBEGFH.p\
    roto\x1a\x11JFHEFPLCCCJ.proto\x1a\x11JIIOHNDIHAM.proto\x1a\x11JPCOFGJAJE\
    N.proto\x1a\x11KBEDBHCIFHD.proto\x1a\x11LNFJDOCNPOM.proto\x1a\x11NBNMGEK\
    GDCB.proto\x1a\x11NECPIBKAFJE.proto\x1a\x11OAKBKKFACHE.proto\x1a\x11OICE\
    ICJKOCM.proto\"\xd0\x05\n\x0bNLGOGJBLJFE\x12.\n\x0bJIFCGLKLNEF\x18\t\x20\
    \x01(\x0b2\x0c.JPCOFGJAJENR\x0bJIFCGLKLNEF\x12.\n\x0bDAGLMONMMMH\x18\x07\
    \x20\x01(\x0b2\x0c.OAKBKKFACHER\x0bDAGLMONMMMH\x12.\n\x0bNJCHCICPMNO\x18\
    \x03\x20\x01(\x0b2\x0c.NBNMGEKGDCBR\x0bNJCHCICPMNO\x12.\n\x0bCKDFADABICO\
    \x18\x0c\x20\x01(\x0b2\x0c.HMECPBPGDJFR\x0bCKDFADABICO\x12.\n\x0bABKOHAB\
    EMMF\x18\x0b\x20\x01(\x0b2\x0c.IAMPEBBEGFHR\x0bABKOHABEMMF\x12.\n\x0bDBL\
    NDGLOAHP\x18\x05\x20\x01(\x0b2\x0c.JIIOHNDIHAMR\x0bDBLNDGLOAHP\x12/\n\
    \x0bNBLBECMLILO\x18\x9a\x04\x20\x01(\x0b2\x0c.BLMNOLNALIER\x0bNBLBECMLIL\
    O\x12.\n\x0bNECNHGJEHKE\x18\x06\x20\x01(\x0b2\x0c.OICEICJKOCMR\x0bNECNHG\
    JEHKE\x12\x20\n\x0bFAAMBPABPHG\x18\x08\x20\x01(\rR\x0bFAAMBPABPHG\x12.\n\
    \x0bGGHEBMCAJKI\x18\x04\x20\x01(\x0b2\x0c.NECPIBKAFJER\x0bGGHEBMCAJKI\
    \x12.\n\x0bDAKOPHLKOGK\x18\x01\x20\x01(\x0b2\x0c.ANGHJLBFOALR\x0bDAKOPHL\
    KOGK\x12.\n\x0bJNNLBPGGEDM\x18\n\x20\x01(\x0b2\x0c.JFHEFPLCCCJR\x0bJNNLB\
    PGGEDM\x12.\n\x0bCNKNDNIMFFL\x18\x0e\x20\x01(\x0b2\x0c.FECMANIDNGMR\x0bC\
    NKNDNIMFFL\x12.\n\x0bLHINNDFFHHC\x18\x02\x20\x01(\x0b2\x0c.LNFJDOCNPOMR\
    \x0bLHINNDFFHHC\x12.\n\x0bPGHOFKJDHMM\x18\r\x20\x03(\x0b2\x0c.KBEDBHCIFH\
    DR\x0bPGHOFKJDHMMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(14);
            deps.push(super::ANGHJLBFOAL::file_descriptor().clone());
            deps.push(super::BLMNOLNALIE::file_descriptor().clone());
            deps.push(super::FECMANIDNGM::file_descriptor().clone());
            deps.push(super::HMECPBPGDJF::file_descriptor().clone());
            deps.push(super::IAMPEBBEGFH::file_descriptor().clone());
            deps.push(super::JFHEFPLCCCJ::file_descriptor().clone());
            deps.push(super::JIIOHNDIHAM::file_descriptor().clone());
            deps.push(super::JPCOFGJAJEN::file_descriptor().clone());
            deps.push(super::KBEDBHCIFHD::file_descriptor().clone());
            deps.push(super::LNFJDOCNPOM::file_descriptor().clone());
            deps.push(super::NBNMGEKGDCB::file_descriptor().clone());
            deps.push(super::NECPIBKAFJE::file_descriptor().clone());
            deps.push(super::OAKBKKFACHE::file_descriptor().clone());
            deps.push(super::OICEICJKOCM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(NLGOGJBLJFE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
