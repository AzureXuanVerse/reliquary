// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JIAFNGIBBGH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:JIAFNGIBBGH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JIAFNGIBBGH {
    // message fields
    // @@protoc_insertion_point(field:JIAFNGIBBGH.ILOFIMODIEN)
    pub ILOFIMODIEN: u32,
    // @@protoc_insertion_point(field:JIAFNGIBBGH.KHKNACFLJNF)
    pub KHKNACFLJNF: bool,
    // @@protoc_insertion_point(field:JIAFNGIBBGH.MAGEMNHPNEN)
    pub MAGEMNHPNEN: u32,
    // @@protoc_insertion_point(field:JIAFNGIBBGH.DDEIMMKHMNA)
    pub DDEIMMKHMNA: bool,
    // @@protoc_insertion_point(field:JIAFNGIBBGH.EPDALEGAEFP)
    pub EPDALEGAEFP: bool,
    // @@protoc_insertion_point(field:JIAFNGIBBGH.NGDAJKNLELE)
    pub NGDAJKNLELE: ::std::vec::Vec<super::DNEKJKACNJM::DNEKJKACNJM>,
    // @@protoc_insertion_point(field:JIAFNGIBBGH.IDGFPJAIBLJ)
    pub IDGFPJAIBLJ: bool,
    // @@protoc_insertion_point(field:JIAFNGIBBGH.OBHILFAECLK)
    pub OBHILFAECLK: u32,
    // special fields
    // @@protoc_insertion_point(special_field:JIAFNGIBBGH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JIAFNGIBBGH {
    fn default() -> &'a JIAFNGIBBGH {
        <JIAFNGIBBGH as ::protobuf::Message>::default_instance()
    }
}

impl JIAFNGIBBGH {
    pub fn new() -> JIAFNGIBBGH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ILOFIMODIEN",
            |m: &JIAFNGIBBGH| { &m.ILOFIMODIEN },
            |m: &mut JIAFNGIBBGH| { &mut m.ILOFIMODIEN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KHKNACFLJNF",
            |m: &JIAFNGIBBGH| { &m.KHKNACFLJNF },
            |m: &mut JIAFNGIBBGH| { &mut m.KHKNACFLJNF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MAGEMNHPNEN",
            |m: &JIAFNGIBBGH| { &m.MAGEMNHPNEN },
            |m: &mut JIAFNGIBBGH| { &mut m.MAGEMNHPNEN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DDEIMMKHMNA",
            |m: &JIAFNGIBBGH| { &m.DDEIMMKHMNA },
            |m: &mut JIAFNGIBBGH| { &mut m.DDEIMMKHMNA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EPDALEGAEFP",
            |m: &JIAFNGIBBGH| { &m.EPDALEGAEFP },
            |m: &mut JIAFNGIBBGH| { &mut m.EPDALEGAEFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NGDAJKNLELE",
            |m: &JIAFNGIBBGH| { &m.NGDAJKNLELE },
            |m: &mut JIAFNGIBBGH| { &mut m.NGDAJKNLELE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IDGFPJAIBLJ",
            |m: &JIAFNGIBBGH| { &m.IDGFPJAIBLJ },
            |m: &mut JIAFNGIBBGH| { &mut m.IDGFPJAIBLJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBHILFAECLK",
            |m: &JIAFNGIBBGH| { &m.OBHILFAECLK },
            |m: &mut JIAFNGIBBGH| { &mut m.OBHILFAECLK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JIAFNGIBBGH>(
            "JIAFNGIBBGH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JIAFNGIBBGH {
    const NAME: &'static str = "JIAFNGIBBGH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.ILOFIMODIEN = is.read_uint32()?;
                },
                32 => {
                    self.KHKNACFLJNF = is.read_bool()?;
                },
                72 => {
                    self.MAGEMNHPNEN = is.read_uint32()?;
                },
                16 => {
                    self.DDEIMMKHMNA = is.read_bool()?;
                },
                88 => {
                    self.EPDALEGAEFP = is.read_bool()?;
                },
                12922 => {
                    self.NGDAJKNLELE.push(is.read_message()?);
                },
                40 => {
                    self.IDGFPJAIBLJ = is.read_bool()?;
                },
                64 => {
                    self.OBHILFAECLK = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ILOFIMODIEN != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.ILOFIMODIEN);
        }
        if self.KHKNACFLJNF != false {
            my_size += 1 + 1;
        }
        if self.MAGEMNHPNEN != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.MAGEMNHPNEN);
        }
        if self.DDEIMMKHMNA != false {
            my_size += 1 + 1;
        }
        if self.EPDALEGAEFP != false {
            my_size += 1 + 1;
        }
        for value in &self.NGDAJKNLELE {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.IDGFPJAIBLJ != false {
            my_size += 1 + 1;
        }
        if self.OBHILFAECLK != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.OBHILFAECLK);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ILOFIMODIEN != 0 {
            os.write_uint32(12, self.ILOFIMODIEN)?;
        }
        if self.KHKNACFLJNF != false {
            os.write_bool(4, self.KHKNACFLJNF)?;
        }
        if self.MAGEMNHPNEN != 0 {
            os.write_uint32(9, self.MAGEMNHPNEN)?;
        }
        if self.DDEIMMKHMNA != false {
            os.write_bool(2, self.DDEIMMKHMNA)?;
        }
        if self.EPDALEGAEFP != false {
            os.write_bool(11, self.EPDALEGAEFP)?;
        }
        for v in &self.NGDAJKNLELE {
            ::protobuf::rt::write_message_field_with_cached_size(1615, v, os)?;
        };
        if self.IDGFPJAIBLJ != false {
            os.write_bool(5, self.IDGFPJAIBLJ)?;
        }
        if self.OBHILFAECLK != 0 {
            os.write_uint32(8, self.OBHILFAECLK)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JIAFNGIBBGH {
        JIAFNGIBBGH::new()
    }

    fn clear(&mut self) {
        self.ILOFIMODIEN = 0;
        self.KHKNACFLJNF = false;
        self.MAGEMNHPNEN = 0;
        self.DDEIMMKHMNA = false;
        self.EPDALEGAEFP = false;
        self.NGDAJKNLELE.clear();
        self.IDGFPJAIBLJ = false;
        self.OBHILFAECLK = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JIAFNGIBBGH {
        static instance: JIAFNGIBBGH = JIAFNGIBBGH {
            ILOFIMODIEN: 0,
            KHKNACFLJNF: false,
            MAGEMNHPNEN: 0,
            DDEIMMKHMNA: false,
            EPDALEGAEFP: false,
            NGDAJKNLELE: ::std::vec::Vec::new(),
            IDGFPJAIBLJ: false,
            OBHILFAECLK: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JIAFNGIBBGH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JIAFNGIBBGH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JIAFNGIBBGH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JIAFNGIBBGH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JIAFNGIBBGH.proto\x1a\x11DNEKJKACNJM.proto\"\xac\x02\n\x0bJIAFNGIB\
    BGH\x12\x20\n\x0bILOFIMODIEN\x18\x0c\x20\x01(\rR\x0bILOFIMODIEN\x12\x20\
    \n\x0bKHKNACFLJNF\x18\x04\x20\x01(\x08R\x0bKHKNACFLJNF\x12\x20\n\x0bMAGE\
    MNHPNEN\x18\t\x20\x01(\rR\x0bMAGEMNHPNEN\x12\x20\n\x0bDDEIMMKHMNA\x18\
    \x02\x20\x01(\x08R\x0bDDEIMMKHMNA\x12\x20\n\x0bEPDALEGAEFP\x18\x0b\x20\
    \x01(\x08R\x0bEPDALEGAEFP\x12/\n\x0bNGDAJKNLELE\x18\xcf\x0c\x20\x03(\x0b\
    2\x0c.DNEKJKACNJMR\x0bNGDAJKNLELE\x12\x20\n\x0bIDGFPJAIBLJ\x18\x05\x20\
    \x01(\x08R\x0bIDGFPJAIBLJ\x12\x20\n\x0bOBHILFAECLK\x18\x08\x20\x01(\rR\
    \x0bOBHILFAECLKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::DNEKJKACNJM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JIAFNGIBBGH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
