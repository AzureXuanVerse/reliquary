// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `NGPPMGKGOBH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:NGPPMGKGOBH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NGPPMGKGOBH {
    // message fields
    // @@protoc_insertion_point(field:NGPPMGKGOBH.FGKNNFGHEGG)
    pub FGKNNFGHEGG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.EOHLIDIKJJN)
    pub EOHLIDIKJJN: u32,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.ACMFDIGCDOO)
    pub ACMFDIGCDOO: u32,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.KGODMCGKNHE)
    pub KGODMCGKNHE: u32,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.KDBIPNOGIDJ)
    pub KDBIPNOGIDJ: u32,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.GFFKAHPJPOH)
    pub GFFKAHPJPOH: u32,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.FIIABCBFABD)
    pub FIIABCBFABD: u32,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.FFIDBDCECOD)
    pub FFIDBDCECOD: ::std::vec::Vec<super::GBKPHLGLDHI::GBKPHLGLDHI>,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.FIPMDHIHIBB)
    pub FIPMDHIHIBB: u32,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.HHPDCIDLABC)
    pub HHPDCIDLABC: u32,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.INBMDBMEIAF)
    pub INBMDBMEIAF: ::std::vec::Vec<super::KPKBHIOEOAE::KPKBHIOEOAE>,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.EIDLLGNIOKP)
    pub EIDLLGNIOKP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:NGPPMGKGOBH.DHNMHPNJPPL)
    pub DHNMHPNJPPL: u32,
    // special fields
    // @@protoc_insertion_point(special_field:NGPPMGKGOBH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NGPPMGKGOBH {
    fn default() -> &'a NGPPMGKGOBH {
        <NGPPMGKGOBH as ::protobuf::Message>::default_instance()
    }
}

impl NGPPMGKGOBH {
    pub fn new() -> NGPPMGKGOBH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FGKNNFGHEGG",
            |m: &NGPPMGKGOBH| { &m.FGKNNFGHEGG },
            |m: &mut NGPPMGKGOBH| { &mut m.FGKNNFGHEGG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EOHLIDIKJJN",
            |m: &NGPPMGKGOBH| { &m.EOHLIDIKJJN },
            |m: &mut NGPPMGKGOBH| { &mut m.EOHLIDIKJJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACMFDIGCDOO",
            |m: &NGPPMGKGOBH| { &m.ACMFDIGCDOO },
            |m: &mut NGPPMGKGOBH| { &mut m.ACMFDIGCDOO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KGODMCGKNHE",
            |m: &NGPPMGKGOBH| { &m.KGODMCGKNHE },
            |m: &mut NGPPMGKGOBH| { &mut m.KGODMCGKNHE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KDBIPNOGIDJ",
            |m: &NGPPMGKGOBH| { &m.KDBIPNOGIDJ },
            |m: &mut NGPPMGKGOBH| { &mut m.KDBIPNOGIDJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GFFKAHPJPOH",
            |m: &NGPPMGKGOBH| { &m.GFFKAHPJPOH },
            |m: &mut NGPPMGKGOBH| { &mut m.GFFKAHPJPOH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FIIABCBFABD",
            |m: &NGPPMGKGOBH| { &m.FIIABCBFABD },
            |m: &mut NGPPMGKGOBH| { &mut m.FIIABCBFABD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FFIDBDCECOD",
            |m: &NGPPMGKGOBH| { &m.FFIDBDCECOD },
            |m: &mut NGPPMGKGOBH| { &mut m.FFIDBDCECOD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FIPMDHIHIBB",
            |m: &NGPPMGKGOBH| { &m.FIPMDHIHIBB },
            |m: &mut NGPPMGKGOBH| { &mut m.FIPMDHIHIBB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HHPDCIDLABC",
            |m: &NGPPMGKGOBH| { &m.HHPDCIDLABC },
            |m: &mut NGPPMGKGOBH| { &mut m.HHPDCIDLABC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "INBMDBMEIAF",
            |m: &NGPPMGKGOBH| { &m.INBMDBMEIAF },
            |m: &mut NGPPMGKGOBH| { &mut m.INBMDBMEIAF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EIDLLGNIOKP",
            |m: &NGPPMGKGOBH| { &m.EIDLLGNIOKP },
            |m: &mut NGPPMGKGOBH| { &mut m.EIDLLGNIOKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DHNMHPNJPPL",
            |m: &NGPPMGKGOBH| { &m.DHNMHPNJPPL },
            |m: &mut NGPPMGKGOBH| { &mut m.DHNMHPNJPPL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NGPPMGKGOBH>(
            "NGPPMGKGOBH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NGPPMGKGOBH {
    const NAME: &'static str = "NGPPMGKGOBH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8866 => {
                    is.read_repeated_packed_uint32_into(&mut self.FGKNNFGHEGG)?;
                },
                8864 => {
                    self.FGKNNFGHEGG.push(is.read_uint32()?);
                },
                16 => {
                    self.EOHLIDIKJJN = is.read_uint32()?;
                },
                112 => {
                    self.ACMFDIGCDOO = is.read_uint32()?;
                },
                56 => {
                    self.KGODMCGKNHE = is.read_uint32()?;
                },
                48 => {
                    self.KDBIPNOGIDJ = is.read_uint32()?;
                },
                40 => {
                    self.GFFKAHPJPOH = is.read_uint32()?;
                },
                120 => {
                    self.FIIABCBFABD = is.read_uint32()?;
                },
                9786 => {
                    self.FFIDBDCECOD.push(is.read_message()?);
                },
                80 => {
                    self.FIPMDHIHIBB = is.read_uint32()?;
                },
                64 => {
                    self.HHPDCIDLABC = is.read_uint32()?;
                },
                10970 => {
                    self.INBMDBMEIAF.push(is.read_message()?);
                },
                9802 => {
                    is.read_repeated_packed_uint32_into(&mut self.EIDLLGNIOKP)?;
                },
                9800 => {
                    self.EIDLLGNIOKP.push(is.read_uint32()?);
                },
                72 => {
                    self.DHNMHPNJPPL = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.FGKNNFGHEGG {
            my_size += ::protobuf::rt::uint32_size(1108, *value);
        };
        if self.EOHLIDIKJJN != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.EOHLIDIKJJN);
        }
        if self.ACMFDIGCDOO != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.ACMFDIGCDOO);
        }
        if self.KGODMCGKNHE != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.KGODMCGKNHE);
        }
        if self.KDBIPNOGIDJ != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.KDBIPNOGIDJ);
        }
        if self.GFFKAHPJPOH != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.GFFKAHPJPOH);
        }
        if self.FIIABCBFABD != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.FIIABCBFABD);
        }
        for value in &self.FFIDBDCECOD {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.FIPMDHIHIBB != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.FIPMDHIHIBB);
        }
        if self.HHPDCIDLABC != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.HHPDCIDLABC);
        }
        for value in &self.INBMDBMEIAF {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.EIDLLGNIOKP {
            my_size += ::protobuf::rt::uint32_size(1225, *value);
        };
        if self.DHNMHPNJPPL != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.DHNMHPNJPPL);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.FGKNNFGHEGG {
            os.write_uint32(1108, *v)?;
        };
        if self.EOHLIDIKJJN != 0 {
            os.write_uint32(2, self.EOHLIDIKJJN)?;
        }
        if self.ACMFDIGCDOO != 0 {
            os.write_uint32(14, self.ACMFDIGCDOO)?;
        }
        if self.KGODMCGKNHE != 0 {
            os.write_uint32(7, self.KGODMCGKNHE)?;
        }
        if self.KDBIPNOGIDJ != 0 {
            os.write_uint32(6, self.KDBIPNOGIDJ)?;
        }
        if self.GFFKAHPJPOH != 0 {
            os.write_uint32(5, self.GFFKAHPJPOH)?;
        }
        if self.FIIABCBFABD != 0 {
            os.write_uint32(15, self.FIIABCBFABD)?;
        }
        for v in &self.FFIDBDCECOD {
            ::protobuf::rt::write_message_field_with_cached_size(1223, v, os)?;
        };
        if self.FIPMDHIHIBB != 0 {
            os.write_uint32(10, self.FIPMDHIHIBB)?;
        }
        if self.HHPDCIDLABC != 0 {
            os.write_uint32(8, self.HHPDCIDLABC)?;
        }
        for v in &self.INBMDBMEIAF {
            ::protobuf::rt::write_message_field_with_cached_size(1371, v, os)?;
        };
        for v in &self.EIDLLGNIOKP {
            os.write_uint32(1225, *v)?;
        };
        if self.DHNMHPNJPPL != 0 {
            os.write_uint32(9, self.DHNMHPNJPPL)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NGPPMGKGOBH {
        NGPPMGKGOBH::new()
    }

    fn clear(&mut self) {
        self.FGKNNFGHEGG.clear();
        self.EOHLIDIKJJN = 0;
        self.ACMFDIGCDOO = 0;
        self.KGODMCGKNHE = 0;
        self.KDBIPNOGIDJ = 0;
        self.GFFKAHPJPOH = 0;
        self.FIIABCBFABD = 0;
        self.FFIDBDCECOD.clear();
        self.FIPMDHIHIBB = 0;
        self.HHPDCIDLABC = 0;
        self.INBMDBMEIAF.clear();
        self.EIDLLGNIOKP.clear();
        self.DHNMHPNJPPL = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NGPPMGKGOBH {
        static instance: NGPPMGKGOBH = NGPPMGKGOBH {
            FGKNNFGHEGG: ::std::vec::Vec::new(),
            EOHLIDIKJJN: 0,
            ACMFDIGCDOO: 0,
            KGODMCGKNHE: 0,
            KDBIPNOGIDJ: 0,
            GFFKAHPJPOH: 0,
            FIIABCBFABD: 0,
            FFIDBDCECOD: ::std::vec::Vec::new(),
            FIPMDHIHIBB: 0,
            HHPDCIDLABC: 0,
            INBMDBMEIAF: ::std::vec::Vec::new(),
            EIDLLGNIOKP: ::std::vec::Vec::new(),
            DHNMHPNJPPL: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NGPPMGKGOBH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NGPPMGKGOBH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NGPPMGKGOBH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NGPPMGKGOBH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11NGPPMGKGOBH.proto\x1a\x11GBKPHLGLDHI.proto\x1a\x11KPKBHIOEOAE.prot\
    o\"\xe7\x03\n\x0bNGPPMGKGOBH\x12!\n\x0bFGKNNFGHEGG\x18\xd4\x08\x20\x03(\
    \rR\x0bFGKNNFGHEGG\x12\x20\n\x0bEOHLIDIKJJN\x18\x02\x20\x01(\rR\x0bEOHLI\
    DIKJJN\x12\x20\n\x0bACMFDIGCDOO\x18\x0e\x20\x01(\rR\x0bACMFDIGCDOO\x12\
    \x20\n\x0bKGODMCGKNHE\x18\x07\x20\x01(\rR\x0bKGODMCGKNHE\x12\x20\n\x0bKD\
    BIPNOGIDJ\x18\x06\x20\x01(\rR\x0bKDBIPNOGIDJ\x12\x20\n\x0bGFFKAHPJPOH\
    \x18\x05\x20\x01(\rR\x0bGFFKAHPJPOH\x12\x20\n\x0bFIIABCBFABD\x18\x0f\x20\
    \x01(\rR\x0bFIIABCBFABD\x12/\n\x0bFFIDBDCECOD\x18\xc7\t\x20\x03(\x0b2\
    \x0c.GBKPHLGLDHIR\x0bFFIDBDCECOD\x12\x20\n\x0bFIPMDHIHIBB\x18\n\x20\x01(\
    \rR\x0bFIPMDHIHIBB\x12\x20\n\x0bHHPDCIDLABC\x18\x08\x20\x01(\rR\x0bHHPDC\
    IDLABC\x12/\n\x0bINBMDBMEIAF\x18\xdb\n\x20\x03(\x0b2\x0c.KPKBHIOEOAER\
    \x0bINBMDBMEIAF\x12!\n\x0bEIDLLGNIOKP\x18\xc9\t\x20\x03(\rR\x0bEIDLLGNIO\
    KP\x12\x20\n\x0bDHNMHPNJPPL\x18\t\x20\x01(\rR\x0bDHNMHPNJPPLb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::GBKPHLGLDHI::file_descriptor().clone());
            deps.push(super::KPKBHIOEOAE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(NGPPMGKGOBH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
