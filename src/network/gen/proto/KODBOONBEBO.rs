// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `KODBOONBEBO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:KODBOONBEBO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KODBOONBEBO {
    // message fields
    // @@protoc_insertion_point(field:KODBOONBEBO.PNLOHHMOGFP)
    pub PNLOHHMOGFP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:KODBOONBEBO.NMGJIBAJGFG)
    pub NMGJIBAJGFG: bool,
    // @@protoc_insertion_point(field:KODBOONBEBO.LBDMHOLPJKE)
    pub LBDMHOLPJKE: u32,
    // @@protoc_insertion_point(field:KODBOONBEBO.MJOOKHJFBBH)
    pub MJOOKHJFBBH: u32,
    // @@protoc_insertion_point(field:KODBOONBEBO.GNPMPBPPKCA)
    pub GNPMPBPPKCA: i64,
    // @@protoc_insertion_point(field:KODBOONBEBO.JHHIIGHDNNK)
    pub JHHIIGHDNNK: u32,
    // @@protoc_insertion_point(field:KODBOONBEBO.ODHLOENBBJH)
    pub ODHLOENBBJH: i64,
    // @@protoc_insertion_point(field:KODBOONBEBO.IOPEEMNLIDM)
    pub IOPEEMNLIDM: ::protobuf::EnumOrUnknown<super::HJGEEFNGKGM::HJGEEFNGKGM>,
    // @@protoc_insertion_point(field:KODBOONBEBO.ELDNCDBBEMA)
    pub ELDNCDBBEMA: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:KODBOONBEBO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KODBOONBEBO {
    fn default() -> &'a KODBOONBEBO {
        <KODBOONBEBO as ::protobuf::Message>::default_instance()
    }
}

impl KODBOONBEBO {
    pub fn new() -> KODBOONBEBO {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PNLOHHMOGFP",
            |m: &KODBOONBEBO| { &m.PNLOHHMOGFP },
            |m: &mut KODBOONBEBO| { &mut m.PNLOHHMOGFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NMGJIBAJGFG",
            |m: &KODBOONBEBO| { &m.NMGJIBAJGFG },
            |m: &mut KODBOONBEBO| { &mut m.NMGJIBAJGFG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LBDMHOLPJKE",
            |m: &KODBOONBEBO| { &m.LBDMHOLPJKE },
            |m: &mut KODBOONBEBO| { &mut m.LBDMHOLPJKE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MJOOKHJFBBH",
            |m: &KODBOONBEBO| { &m.MJOOKHJFBBH },
            |m: &mut KODBOONBEBO| { &mut m.MJOOKHJFBBH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GNPMPBPPKCA",
            |m: &KODBOONBEBO| { &m.GNPMPBPPKCA },
            |m: &mut KODBOONBEBO| { &mut m.GNPMPBPPKCA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JHHIIGHDNNK",
            |m: &KODBOONBEBO| { &m.JHHIIGHDNNK },
            |m: &mut KODBOONBEBO| { &mut m.JHHIIGHDNNK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ODHLOENBBJH",
            |m: &KODBOONBEBO| { &m.ODHLOENBBJH },
            |m: &mut KODBOONBEBO| { &mut m.ODHLOENBBJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IOPEEMNLIDM",
            |m: &KODBOONBEBO| { &m.IOPEEMNLIDM },
            |m: &mut KODBOONBEBO| { &mut m.IOPEEMNLIDM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ELDNCDBBEMA",
            |m: &KODBOONBEBO| { &m.ELDNCDBBEMA },
            |m: &mut KODBOONBEBO| { &mut m.ELDNCDBBEMA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KODBOONBEBO>(
            "KODBOONBEBO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KODBOONBEBO {
    const NAME: &'static str = "KODBOONBEBO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.PNLOHHMOGFP)?;
                },
                120 => {
                    self.PNLOHHMOGFP.push(is.read_uint32()?);
                },
                56 => {
                    self.NMGJIBAJGFG = is.read_bool()?;
                },
                32 => {
                    self.LBDMHOLPJKE = is.read_uint32()?;
                },
                24 => {
                    self.MJOOKHJFBBH = is.read_uint32()?;
                },
                104 => {
                    self.GNPMPBPPKCA = is.read_int64()?;
                },
                40 => {
                    self.JHHIIGHDNNK = is.read_uint32()?;
                },
                64 => {
                    self.ODHLOENBBJH = is.read_int64()?;
                },
                96 => {
                    self.IOPEEMNLIDM = is.read_enum_or_unknown()?;
                },
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.ELDNCDBBEMA)?;
                },
                112 => {
                    self.ELDNCDBBEMA.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.PNLOHHMOGFP {
            my_size += ::protobuf::rt::uint32_size(15, *value);
        };
        if self.NMGJIBAJGFG != false {
            my_size += 1 + 1;
        }
        if self.LBDMHOLPJKE != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.LBDMHOLPJKE);
        }
        if self.MJOOKHJFBBH != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.MJOOKHJFBBH);
        }
        if self.GNPMPBPPKCA != 0 {
            my_size += ::protobuf::rt::int64_size(13, self.GNPMPBPPKCA);
        }
        if self.JHHIIGHDNNK != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.JHHIIGHDNNK);
        }
        if self.ODHLOENBBJH != 0 {
            my_size += ::protobuf::rt::int64_size(8, self.ODHLOENBBJH);
        }
        if self.IOPEEMNLIDM != ::protobuf::EnumOrUnknown::new(super::HJGEEFNGKGM::HJGEEFNGKGM::PLAYER_RETURN_NONE) {
            my_size += ::protobuf::rt::int32_size(12, self.IOPEEMNLIDM.value());
        }
        for value in &self.ELDNCDBBEMA {
            my_size += ::protobuf::rt::uint32_size(14, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.PNLOHHMOGFP {
            os.write_uint32(15, *v)?;
        };
        if self.NMGJIBAJGFG != false {
            os.write_bool(7, self.NMGJIBAJGFG)?;
        }
        if self.LBDMHOLPJKE != 0 {
            os.write_uint32(4, self.LBDMHOLPJKE)?;
        }
        if self.MJOOKHJFBBH != 0 {
            os.write_uint32(3, self.MJOOKHJFBBH)?;
        }
        if self.GNPMPBPPKCA != 0 {
            os.write_int64(13, self.GNPMPBPPKCA)?;
        }
        if self.JHHIIGHDNNK != 0 {
            os.write_uint32(5, self.JHHIIGHDNNK)?;
        }
        if self.ODHLOENBBJH != 0 {
            os.write_int64(8, self.ODHLOENBBJH)?;
        }
        if self.IOPEEMNLIDM != ::protobuf::EnumOrUnknown::new(super::HJGEEFNGKGM::HJGEEFNGKGM::PLAYER_RETURN_NONE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.IOPEEMNLIDM))?;
        }
        for v in &self.ELDNCDBBEMA {
            os.write_uint32(14, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KODBOONBEBO {
        KODBOONBEBO::new()
    }

    fn clear(&mut self) {
        self.PNLOHHMOGFP.clear();
        self.NMGJIBAJGFG = false;
        self.LBDMHOLPJKE = 0;
        self.MJOOKHJFBBH = 0;
        self.GNPMPBPPKCA = 0;
        self.JHHIIGHDNNK = 0;
        self.ODHLOENBBJH = 0;
        self.IOPEEMNLIDM = ::protobuf::EnumOrUnknown::new(super::HJGEEFNGKGM::HJGEEFNGKGM::PLAYER_RETURN_NONE);
        self.ELDNCDBBEMA.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KODBOONBEBO {
        static instance: KODBOONBEBO = KODBOONBEBO {
            PNLOHHMOGFP: ::std::vec::Vec::new(),
            NMGJIBAJGFG: false,
            LBDMHOLPJKE: 0,
            MJOOKHJFBBH: 0,
            GNPMPBPPKCA: 0,
            JHHIIGHDNNK: 0,
            ODHLOENBBJH: 0,
            IOPEEMNLIDM: ::protobuf::EnumOrUnknown::from_i32(0),
            ELDNCDBBEMA: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KODBOONBEBO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KODBOONBEBO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KODBOONBEBO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KODBOONBEBO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11KODBOONBEBO.proto\x1a\x11HJGEEFNGKGM.proto\"\xcd\x02\n\x0bKODBOONB\
    EBO\x12\x20\n\x0bPNLOHHMOGFP\x18\x0f\x20\x03(\rR\x0bPNLOHHMOGFP\x12\x20\
    \n\x0bNMGJIBAJGFG\x18\x07\x20\x01(\x08R\x0bNMGJIBAJGFG\x12\x20\n\x0bLBDM\
    HOLPJKE\x18\x04\x20\x01(\rR\x0bLBDMHOLPJKE\x12\x20\n\x0bMJOOKHJFBBH\x18\
    \x03\x20\x01(\rR\x0bMJOOKHJFBBH\x12\x20\n\x0bGNPMPBPPKCA\x18\r\x20\x01(\
    \x03R\x0bGNPMPBPPKCA\x12\x20\n\x0bJHHIIGHDNNK\x18\x05\x20\x01(\rR\x0bJHH\
    IIGHDNNK\x12\x20\n\x0bODHLOENBBJH\x18\x08\x20\x01(\x03R\x0bODHLOENBBJH\
    \x12.\n\x0bIOPEEMNLIDM\x18\x0c\x20\x01(\x0e2\x0c.HJGEEFNGKGMR\x0bIOPEEMN\
    LIDM\x12\x20\n\x0bELDNCDBBEMA\x18\x0e\x20\x03(\rR\x0bELDNCDBBEMAb\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::HJGEEFNGKGM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(KODBOONBEBO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
