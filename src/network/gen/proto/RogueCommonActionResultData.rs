// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueCommonActionResultData.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueCommonActionResultData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueCommonActionResultData {
    // message oneof groups
    pub buff: ::std::option::Option<rogue_common_action_result_data::Buff>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueCommonActionResultData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueCommonActionResultData {
    fn default() -> &'a RogueCommonActionResultData {
        <RogueCommonActionResultData as ::protobuf::Message>::default_instance()
    }
}

impl RogueCommonActionResultData {
    pub fn new() -> RogueCommonActionResultData {
        ::std::default::Default::default()
    }

    // .RogueCommonMoney get_item_list = 3;

    pub fn get_item_list(&self) -> &super::RogueCommonMoney::RogueCommonMoney {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetItemList(ref v)) => v,
            _ => <super::RogueCommonMoney::RogueCommonMoney as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_get_item_list(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_get_item_list(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetItemList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_item_list(&mut self, v: super::RogueCommonMoney::RogueCommonMoney) {
        self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetItemList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_item_list(&mut self) -> &mut super::RogueCommonMoney::RogueCommonMoney {
        if let ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetItemList(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetItemList(super::RogueCommonMoney::RogueCommonMoney::new()));
        }
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetItemList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_item_list(&mut self) -> super::RogueCommonMoney::RogueCommonMoney {
        if self.has_get_item_list() {
            match self.buff.take() {
                ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetItemList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonMoney::RogueCommonMoney::new()
        }
    }

    // .RogueCommonMoney remove_item_list = 10;

    pub fn remove_item_list(&self) -> &super::RogueCommonMoney::RogueCommonMoney {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveItemList(ref v)) => v,
            _ => <super::RogueCommonMoney::RogueCommonMoney as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_remove_item_list(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_remove_item_list(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveItemList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remove_item_list(&mut self, v: super::RogueCommonMoney::RogueCommonMoney) {
        self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveItemList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remove_item_list(&mut self) -> &mut super::RogueCommonMoney::RogueCommonMoney {
        if let ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveItemList(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveItemList(super::RogueCommonMoney::RogueCommonMoney::new()));
        }
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveItemList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remove_item_list(&mut self) -> super::RogueCommonMoney::RogueCommonMoney {
        if self.has_remove_item_list() {
            match self.buff.take() {
                ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveItemList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonMoney::RogueCommonMoney::new()
        }
    }

    // .RogueCommonBuff get_buff_list = 651;

    pub fn get_buff_list(&self) -> &super::RogueCommonBuff::RogueCommonBuff {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetBuffList(ref v)) => v,
            _ => <super::RogueCommonBuff::RogueCommonBuff as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_get_buff_list(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_get_buff_list(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetBuffList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_buff_list(&mut self, v: super::RogueCommonBuff::RogueCommonBuff) {
        self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetBuffList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_buff_list(&mut self) -> &mut super::RogueCommonBuff::RogueCommonBuff {
        if let ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetBuffList(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetBuffList(super::RogueCommonBuff::RogueCommonBuff::new()));
        }
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetBuffList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_buff_list(&mut self) -> super::RogueCommonBuff::RogueCommonBuff {
        if self.has_get_buff_list() {
            match self.buff.take() {
                ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetBuffList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuff::RogueCommonBuff::new()
        }
    }

    // .RogueCommonBuff remove_buff_list = 164;

    pub fn remove_buff_list(&self) -> &super::RogueCommonBuff::RogueCommonBuff {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveBuffList(ref v)) => v,
            _ => <super::RogueCommonBuff::RogueCommonBuff as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_remove_buff_list(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_remove_buff_list(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveBuffList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remove_buff_list(&mut self, v: super::RogueCommonBuff::RogueCommonBuff) {
        self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveBuffList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remove_buff_list(&mut self) -> &mut super::RogueCommonBuff::RogueCommonBuff {
        if let ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveBuffList(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveBuffList(super::RogueCommonBuff::RogueCommonBuff::new()));
        }
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveBuffList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remove_buff_list(&mut self) -> super::RogueCommonBuff::RogueCommonBuff {
        if self.has_remove_buff_list() {
            match self.buff.take() {
                ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveBuffList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuff::RogueCommonBuff::new()
        }
    }

    // .RogueCommonMiracle get_miracle_list = 949;

    pub fn get_miracle_list(&self) -> &super::RogueCommonMiracle::RogueCommonMiracle {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetMiracleList(ref v)) => v,
            _ => <super::RogueCommonMiracle::RogueCommonMiracle as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_get_miracle_list(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_get_miracle_list(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetMiracleList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_miracle_list(&mut self, v: super::RogueCommonMiracle::RogueCommonMiracle) {
        self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetMiracleList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_miracle_list(&mut self) -> &mut super::RogueCommonMiracle::RogueCommonMiracle {
        if let ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetMiracleList(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetMiracleList(super::RogueCommonMiracle::RogueCommonMiracle::new()));
        }
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetMiracleList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_miracle_list(&mut self) -> super::RogueCommonMiracle::RogueCommonMiracle {
        if self.has_get_miracle_list() {
            match self.buff.take() {
                ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetMiracleList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonMiracle::RogueCommonMiracle::new()
        }
    }

    // .RogueCommonRemoveMiracle remove_miracle_list = 307;

    pub fn remove_miracle_list(&self) -> &super::RogueCommonRemoveMiracle::RogueCommonRemoveMiracle {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveMiracleList(ref v)) => v,
            _ => <super::RogueCommonRemoveMiracle::RogueCommonRemoveMiracle as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_remove_miracle_list(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_remove_miracle_list(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveMiracleList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remove_miracle_list(&mut self, v: super::RogueCommonRemoveMiracle::RogueCommonRemoveMiracle) {
        self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveMiracleList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remove_miracle_list(&mut self) -> &mut super::RogueCommonRemoveMiracle::RogueCommonRemoveMiracle {
        if let ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveMiracleList(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveMiracleList(super::RogueCommonRemoveMiracle::RogueCommonRemoveMiracle::new()));
        }
        match self.buff {
            ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveMiracleList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remove_miracle_list(&mut self) -> super::RogueCommonRemoveMiracle::RogueCommonRemoveMiracle {
        if self.has_remove_miracle_list() {
            match self.buff.take() {
                ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveMiracleList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonRemoveMiracle::RogueCommonRemoveMiracle::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonMoney::RogueCommonMoney>(
            "get_item_list",
            RogueCommonActionResultData::has_get_item_list,
            RogueCommonActionResultData::get_item_list,
            RogueCommonActionResultData::mut_get_item_list,
            RogueCommonActionResultData::set_get_item_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonMoney::RogueCommonMoney>(
            "remove_item_list",
            RogueCommonActionResultData::has_remove_item_list,
            RogueCommonActionResultData::remove_item_list,
            RogueCommonActionResultData::mut_remove_item_list,
            RogueCommonActionResultData::set_remove_item_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuff::RogueCommonBuff>(
            "get_buff_list",
            RogueCommonActionResultData::has_get_buff_list,
            RogueCommonActionResultData::get_buff_list,
            RogueCommonActionResultData::mut_get_buff_list,
            RogueCommonActionResultData::set_get_buff_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuff::RogueCommonBuff>(
            "remove_buff_list",
            RogueCommonActionResultData::has_remove_buff_list,
            RogueCommonActionResultData::remove_buff_list,
            RogueCommonActionResultData::mut_remove_buff_list,
            RogueCommonActionResultData::set_remove_buff_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonMiracle::RogueCommonMiracle>(
            "get_miracle_list",
            RogueCommonActionResultData::has_get_miracle_list,
            RogueCommonActionResultData::get_miracle_list,
            RogueCommonActionResultData::mut_get_miracle_list,
            RogueCommonActionResultData::set_get_miracle_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonRemoveMiracle::RogueCommonRemoveMiracle>(
            "remove_miracle_list",
            RogueCommonActionResultData::has_remove_miracle_list,
            RogueCommonActionResultData::remove_miracle_list,
            RogueCommonActionResultData::mut_remove_miracle_list,
            RogueCommonActionResultData::set_remove_miracle_list,
        ));
        oneofs.push(rogue_common_action_result_data::Buff::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueCommonActionResultData>(
            "RogueCommonActionResultData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueCommonActionResultData {
    const NAME: &'static str = "RogueCommonActionResultData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetItemList(is.read_message()?));
                },
                82 => {
                    self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveItemList(is.read_message()?));
                },
                5210 => {
                    self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetBuffList(is.read_message()?));
                },
                1314 => {
                    self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveBuffList(is.read_message()?));
                },
                7594 => {
                    self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::GetMiracleList(is.read_message()?));
                },
                2458 => {
                    self.buff = ::std::option::Option::Some(rogue_common_action_result_data::Buff::RemoveMiracleList(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.buff {
            match v {
                &rogue_common_action_result_data::Buff::GetItemList(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_action_result_data::Buff::RemoveItemList(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_action_result_data::Buff::GetBuffList(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_action_result_data::Buff::RemoveBuffList(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_action_result_data::Buff::GetMiracleList(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_common_action_result_data::Buff::RemoveMiracleList(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.buff {
            match v {
                &rogue_common_action_result_data::Buff::GetItemList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &rogue_common_action_result_data::Buff::RemoveItemList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &rogue_common_action_result_data::Buff::GetBuffList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(651, v, os)?;
                },
                &rogue_common_action_result_data::Buff::RemoveBuffList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(164, v, os)?;
                },
                &rogue_common_action_result_data::Buff::GetMiracleList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(949, v, os)?;
                },
                &rogue_common_action_result_data::Buff::RemoveMiracleList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(307, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueCommonActionResultData {
        RogueCommonActionResultData::new()
    }

    fn clear(&mut self) {
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueCommonActionResultData {
        static instance: RogueCommonActionResultData = RogueCommonActionResultData {
            buff: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueCommonActionResultData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueCommonActionResultData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueCommonActionResultData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueCommonActionResultData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueCommonActionResultData`
pub mod rogue_common_action_result_data {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueCommonActionResultData.buff)
    pub enum Buff {
        // @@protoc_insertion_point(oneof_field:RogueCommonActionResultData.get_item_list)
        GetItemList(super::super::RogueCommonMoney::RogueCommonMoney),
        // @@protoc_insertion_point(oneof_field:RogueCommonActionResultData.remove_item_list)
        RemoveItemList(super::super::RogueCommonMoney::RogueCommonMoney),
        // @@protoc_insertion_point(oneof_field:RogueCommonActionResultData.get_buff_list)
        GetBuffList(super::super::RogueCommonBuff::RogueCommonBuff),
        // @@protoc_insertion_point(oneof_field:RogueCommonActionResultData.remove_buff_list)
        RemoveBuffList(super::super::RogueCommonBuff::RogueCommonBuff),
        // @@protoc_insertion_point(oneof_field:RogueCommonActionResultData.get_miracle_list)
        GetMiracleList(super::super::RogueCommonMiracle::RogueCommonMiracle),
        // @@protoc_insertion_point(oneof_field:RogueCommonActionResultData.remove_miracle_list)
        RemoveMiracleList(super::super::RogueCommonRemoveMiracle::RogueCommonRemoveMiracle),
    }

    impl ::protobuf::Oneof for Buff {
    }

    impl ::protobuf::OneofFull for Buff {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueCommonActionResultData as ::protobuf::MessageFull>::descriptor().oneof_by_name("buff").unwrap()).clone()
        }
    }

    impl Buff {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Buff>("buff")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!RogueCommonActionResultData.proto\x1a\x15RogueCommonBuff.proto\x1a\
    \x18RogueCommonMiracle.proto\x1a\x16RogueCommonMoney.proto\x1a\x1eRogueC\
    ommonRemoveMiracle.proto\"\xa5\x03\n\x1bRogueCommonActionResultData\x127\
    \n\rget_item_list\x18\x03\x20\x01(\x0b2\x11.RogueCommonMoneyH\0R\x0bgetI\
    temList\x12=\n\x10remove_item_list\x18\n\x20\x01(\x0b2\x11.RogueCommonMo\
    neyH\0R\x0eremoveItemList\x127\n\rget_buff_list\x18\x8b\x05\x20\x01(\x0b\
    2\x10.RogueCommonBuffH\0R\x0bgetBuffList\x12=\n\x10remove_buff_list\x18\
    \xa4\x01\x20\x01(\x0b2\x10.RogueCommonBuffH\0R\x0eremoveBuffList\x12@\n\
    \x10get_miracle_list\x18\xb5\x07\x20\x01(\x0b2\x13.RogueCommonMiracleH\0\
    R\x0egetMiracleList\x12L\n\x13remove_miracle_list\x18\xb3\x02\x20\x01(\
    \x0b2\x19.RogueCommonRemoveMiracleH\0R\x11removeMiracleListB\x06\n\x04bu\
    ffB\x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::RogueCommonBuff::file_descriptor().clone());
            deps.push(super::RogueCommonMiracle::file_descriptor().clone());
            deps.push(super::RogueCommonMoney::file_descriptor().clone());
            deps.push(super::RogueCommonRemoveMiracle::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueCommonActionResultData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
