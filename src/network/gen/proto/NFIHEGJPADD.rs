// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `NFIHEGJPADD.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:NFIHEGJPADD)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NFIHEGJPADD {
    // message fields
    // @@protoc_insertion_point(field:NFIHEGJPADD.MNOIEILBICL)
    pub MNOIEILBICL: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:NFIHEGJPADD.MIMBJFHIJJB)
    pub MIMBJFHIJJB: u32,
    // @@protoc_insertion_point(field:NFIHEGJPADD.BBFHPGPDEHM)
    pub BBFHPGPDEHM: bool,
    // @@protoc_insertion_point(field:NFIHEGJPADD.KJKPMFFAMFK)
    pub KJKPMFFAMFK: u32,
    // @@protoc_insertion_point(field:NFIHEGJPADD.ADBDEPODLOI)
    pub ADBDEPODLOI: u32,
    // @@protoc_insertion_point(field:NFIHEGJPADD.CNLDEECIFDE)
    pub CNLDEECIFDE: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:NFIHEGJPADD.FGLOMHFMLDM)
    pub FGLOMHFMLDM: ::protobuf::MessageField<super::GAFCOEJCDPG::GAFCOEJCDPG>,
    // @@protoc_insertion_point(field:NFIHEGJPADD.EBAIFFMAKKK)
    pub EBAIFFMAKKK: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:NFIHEGJPADD.NMBOMMJJMMB)
    pub NMBOMMJJMMB: ::protobuf::MessageField<super::FLEHDHLAKDK::FLEHDHLAKDK>,
    // @@protoc_insertion_point(field:NFIHEGJPADD.DNPNNNMFINK)
    pub DNPNNNMFINK: u32,
    // @@protoc_insertion_point(field:NFIHEGJPADD.HHLBDGMIBNP)
    pub HHLBDGMIBNP: u32,
    // @@protoc_insertion_point(field:NFIHEGJPADD.BNBOJMLJIHD)
    pub BNBOJMLJIHD: u32,
    // @@protoc_insertion_point(field:NFIHEGJPADD.DEDECCDEEGD)
    pub DEDECCDEEGD: bool,
    // @@protoc_insertion_point(field:NFIHEGJPADD.DFEGOAAIEMD)
    pub DFEGOAAIEMD: ::protobuf::MessageField<super::ILAEJLHGKBF::ILAEJLHGKBF>,
    // @@protoc_insertion_point(field:NFIHEGJPADD.AAOIBECDCEE)
    pub AAOIBECDCEE: u32,
    // @@protoc_insertion_point(field:NFIHEGJPADD.FFMKOHIMDGK)
    pub FFMKOHIMDGK: ::protobuf::MessageField<super::JPMECEBAHOA::JPMECEBAHOA>,
    // @@protoc_insertion_point(field:NFIHEGJPADD.NBDCGOEGFPH)
    pub NBDCGOEGFPH: ::protobuf::MessageField<super::GAFCOEJCDPG::GAFCOEJCDPG>,
    // special fields
    // @@protoc_insertion_point(special_field:NFIHEGJPADD.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NFIHEGJPADD {
    fn default() -> &'a NFIHEGJPADD {
        <NFIHEGJPADD as ::protobuf::Message>::default_instance()
    }
}

impl NFIHEGJPADD {
    pub fn new() -> NFIHEGJPADD {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(17);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "MNOIEILBICL",
            |m: &NFIHEGJPADD| { &m.MNOIEILBICL },
            |m: &mut NFIHEGJPADD| { &mut m.MNOIEILBICL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MIMBJFHIJJB",
            |m: &NFIHEGJPADD| { &m.MIMBJFHIJJB },
            |m: &mut NFIHEGJPADD| { &mut m.MIMBJFHIJJB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BBFHPGPDEHM",
            |m: &NFIHEGJPADD| { &m.BBFHPGPDEHM },
            |m: &mut NFIHEGJPADD| { &mut m.BBFHPGPDEHM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KJKPMFFAMFK",
            |m: &NFIHEGJPADD| { &m.KJKPMFFAMFK },
            |m: &mut NFIHEGJPADD| { &mut m.KJKPMFFAMFK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADBDEPODLOI",
            |m: &NFIHEGJPADD| { &m.ADBDEPODLOI },
            |m: &mut NFIHEGJPADD| { &mut m.ADBDEPODLOI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "CNLDEECIFDE",
            |m: &NFIHEGJPADD| { &m.CNLDEECIFDE },
            |m: &mut NFIHEGJPADD| { &mut m.CNLDEECIFDE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GAFCOEJCDPG::GAFCOEJCDPG>(
            "FGLOMHFMLDM",
            |m: &NFIHEGJPADD| { &m.FGLOMHFMLDM },
            |m: &mut NFIHEGJPADD| { &mut m.FGLOMHFMLDM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "EBAIFFMAKKK",
            |m: &NFIHEGJPADD| { &m.EBAIFFMAKKK },
            |m: &mut NFIHEGJPADD| { &mut m.EBAIFFMAKKK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FLEHDHLAKDK::FLEHDHLAKDK>(
            "NMBOMMJJMMB",
            |m: &NFIHEGJPADD| { &m.NMBOMMJJMMB },
            |m: &mut NFIHEGJPADD| { &mut m.NMBOMMJJMMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DNPNNNMFINK",
            |m: &NFIHEGJPADD| { &m.DNPNNNMFINK },
            |m: &mut NFIHEGJPADD| { &mut m.DNPNNNMFINK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HHLBDGMIBNP",
            |m: &NFIHEGJPADD| { &m.HHLBDGMIBNP },
            |m: &mut NFIHEGJPADD| { &mut m.HHLBDGMIBNP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BNBOJMLJIHD",
            |m: &NFIHEGJPADD| { &m.BNBOJMLJIHD },
            |m: &mut NFIHEGJPADD| { &mut m.BNBOJMLJIHD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DEDECCDEEGD",
            |m: &NFIHEGJPADD| { &m.DEDECCDEEGD },
            |m: &mut NFIHEGJPADD| { &mut m.DEDECCDEEGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ILAEJLHGKBF::ILAEJLHGKBF>(
            "DFEGOAAIEMD",
            |m: &NFIHEGJPADD| { &m.DFEGOAAIEMD },
            |m: &mut NFIHEGJPADD| { &mut m.DFEGOAAIEMD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AAOIBECDCEE",
            |m: &NFIHEGJPADD| { &m.AAOIBECDCEE },
            |m: &mut NFIHEGJPADD| { &mut m.AAOIBECDCEE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JPMECEBAHOA::JPMECEBAHOA>(
            "FFMKOHIMDGK",
            |m: &NFIHEGJPADD| { &m.FFMKOHIMDGK },
            |m: &mut NFIHEGJPADD| { &mut m.FFMKOHIMDGK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GAFCOEJCDPG::GAFCOEJCDPG>(
            "NBDCGOEGFPH",
            |m: &NFIHEGJPADD| { &m.NBDCGOEGFPH },
            |m: &mut NFIHEGJPADD| { &mut m.NBDCGOEGFPH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NFIHEGJPADD>(
            "NFIHEGJPADD",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NFIHEGJPADD {
    const NAME: &'static str = "NFIHEGJPADD";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MNOIEILBICL)?;
                },
                5232 => {
                    self.MIMBJFHIJJB = is.read_uint32()?;
                },
                112 => {
                    self.BBFHPGPDEHM = is.read_bool()?;
                },
                2304 => {
                    self.KJKPMFFAMFK = is.read_uint32()?;
                },
                32 => {
                    self.ADBDEPODLOI = is.read_uint32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CNLDEECIFDE)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FGLOMHFMLDM)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EBAIFFMAKKK)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NMBOMMJJMMB)?;
                },
                24 => {
                    self.DNPNNNMFINK = is.read_uint32()?;
                },
                64 => {
                    self.HHLBDGMIBNP = is.read_uint32()?;
                },
                88 => {
                    self.BNBOJMLJIHD = is.read_uint32()?;
                },
                40 => {
                    self.DEDECCDEEGD = is.read_bool()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DFEGOAAIEMD)?;
                },
                96 => {
                    self.AAOIBECDCEE = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FFMKOHIMDGK)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NBDCGOEGFPH)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.MNOIEILBICL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.MIMBJFHIJJB != 0 {
            my_size += ::protobuf::rt::uint32_size(654, self.MIMBJFHIJJB);
        }
        if self.BBFHPGPDEHM != false {
            my_size += 1 + 1;
        }
        if self.KJKPMFFAMFK != 0 {
            my_size += ::protobuf::rt::uint32_size(288, self.KJKPMFFAMFK);
        }
        if self.ADBDEPODLOI != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.ADBDEPODLOI);
        }
        if let Some(v) = self.CNLDEECIFDE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.FGLOMHFMLDM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.EBAIFFMAKKK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NMBOMMJJMMB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.DNPNNNMFINK != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.DNPNNNMFINK);
        }
        if self.HHLBDGMIBNP != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.HHLBDGMIBNP);
        }
        if self.BNBOJMLJIHD != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.BNBOJMLJIHD);
        }
        if self.DEDECCDEEGD != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.DFEGOAAIEMD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.AAOIBECDCEE != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.AAOIBECDCEE);
        }
        if let Some(v) = self.FFMKOHIMDGK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NBDCGOEGFPH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.MNOIEILBICL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.MIMBJFHIJJB != 0 {
            os.write_uint32(654, self.MIMBJFHIJJB)?;
        }
        if self.BBFHPGPDEHM != false {
            os.write_bool(14, self.BBFHPGPDEHM)?;
        }
        if self.KJKPMFFAMFK != 0 {
            os.write_uint32(288, self.KJKPMFFAMFK)?;
        }
        if self.ADBDEPODLOI != 0 {
            os.write_uint32(4, self.ADBDEPODLOI)?;
        }
        if let Some(v) = self.CNLDEECIFDE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.FGLOMHFMLDM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.EBAIFFMAKKK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.NMBOMMJJMMB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.DNPNNNMFINK != 0 {
            os.write_uint32(3, self.DNPNNNMFINK)?;
        }
        if self.HHLBDGMIBNP != 0 {
            os.write_uint32(8, self.HHLBDGMIBNP)?;
        }
        if self.BNBOJMLJIHD != 0 {
            os.write_uint32(11, self.BNBOJMLJIHD)?;
        }
        if self.DEDECCDEEGD != false {
            os.write_bool(5, self.DEDECCDEEGD)?;
        }
        if let Some(v) = self.DFEGOAAIEMD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.AAOIBECDCEE != 0 {
            os.write_uint32(12, self.AAOIBECDCEE)?;
        }
        if let Some(v) = self.FFMKOHIMDGK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.NBDCGOEGFPH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NFIHEGJPADD {
        NFIHEGJPADD::new()
    }

    fn clear(&mut self) {
        self.MNOIEILBICL.clear();
        self.MIMBJFHIJJB = 0;
        self.BBFHPGPDEHM = false;
        self.KJKPMFFAMFK = 0;
        self.ADBDEPODLOI = 0;
        self.CNLDEECIFDE.clear();
        self.FGLOMHFMLDM.clear();
        self.EBAIFFMAKKK.clear();
        self.NMBOMMJJMMB.clear();
        self.DNPNNNMFINK = 0;
        self.HHLBDGMIBNP = 0;
        self.BNBOJMLJIHD = 0;
        self.DEDECCDEEGD = false;
        self.DFEGOAAIEMD.clear();
        self.AAOIBECDCEE = 0;
        self.FFMKOHIMDGK.clear();
        self.NBDCGOEGFPH.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NFIHEGJPADD {
        static instance: NFIHEGJPADD = NFIHEGJPADD {
            MNOIEILBICL: ::protobuf::MessageField::none(),
            MIMBJFHIJJB: 0,
            BBFHPGPDEHM: false,
            KJKPMFFAMFK: 0,
            ADBDEPODLOI: 0,
            CNLDEECIFDE: ::protobuf::MessageField::none(),
            FGLOMHFMLDM: ::protobuf::MessageField::none(),
            EBAIFFMAKKK: ::protobuf::MessageField::none(),
            NMBOMMJJMMB: ::protobuf::MessageField::none(),
            DNPNNNMFINK: 0,
            HHLBDGMIBNP: 0,
            BNBOJMLJIHD: 0,
            DEDECCDEEGD: false,
            DFEGOAAIEMD: ::protobuf::MessageField::none(),
            AAOIBECDCEE: 0,
            FFMKOHIMDGK: ::protobuf::MessageField::none(),
            NBDCGOEGFPH: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NFIHEGJPADD {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NFIHEGJPADD").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NFIHEGJPADD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NFIHEGJPADD {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11NFIHEGJPADD.proto\x1a\x11FLEHDHLAKDK.proto\x1a\x11GAFCOEJCDPG.prot\
    o\x1a\x11ILAEJLHGKBF.proto\x1a\x0eItemList.proto\x1a\x11JPMECEBAHOA.prot\
    o\"\xb8\x05\n\x0bNFIHEGJPADD\x12+\n\x0bMNOIEILBICL\x18\r\x20\x01(\x0b2\t\
    .ItemListR\x0bMNOIEILBICL\x12!\n\x0bMIMBJFHIJJB\x18\x8e\x05\x20\x01(\rR\
    \x0bMIMBJFHIJJB\x12\x20\n\x0bBBFHPGPDEHM\x18\x0e\x20\x01(\x08R\x0bBBFHPG\
    PDEHM\x12!\n\x0bKJKPMFFAMFK\x18\xa0\x02\x20\x01(\rR\x0bKJKPMFFAMFK\x12\
    \x20\n\x0bADBDEPODLOI\x18\x04\x20\x01(\rR\x0bADBDEPODLOI\x12+\n\x0bCNLDE\
    ECIFDE\x18\x01\x20\x01(\x0b2\t.ItemListR\x0bCNLDEECIFDE\x12.\n\x0bFGLOMH\
    FMLDM\x18\x06\x20\x01(\x0b2\x0c.GAFCOEJCDPGR\x0bFGLOMHFMLDM\x12+\n\x0bEB\
    AIFFMAKKK\x18\x0f\x20\x01(\x0b2\t.ItemListR\x0bEBAIFFMAKKK\x12.\n\x0bNMB\
    OMMJJMMB\x18\x07\x20\x01(\x0b2\x0c.FLEHDHLAKDKR\x0bNMBOMMJJMMB\x12\x20\n\
    \x0bDNPNNNMFINK\x18\x03\x20\x01(\rR\x0bDNPNNNMFINK\x12\x20\n\x0bHHLBDGMI\
    BNP\x18\x08\x20\x01(\rR\x0bHHLBDGMIBNP\x12\x20\n\x0bBNBOJMLJIHD\x18\x0b\
    \x20\x01(\rR\x0bBNBOJMLJIHD\x12\x20\n\x0bDEDECCDEEGD\x18\x05\x20\x01(\
    \x08R\x0bDEDECCDEEGD\x12.\n\x0bDFEGOAAIEMD\x18\n\x20\x01(\x0b2\x0c.ILAEJ\
    LHGKBFR\x0bDFEGOAAIEMD\x12\x20\n\x0bAAOIBECDCEE\x18\x0c\x20\x01(\rR\x0bA\
    AOIBECDCEE\x12.\n\x0bFFMKOHIMDGK\x18\t\x20\x01(\x0b2\x0c.JPMECEBAHOAR\
    \x0bFFMKOHIMDGK\x12.\n\x0bNBDCGOEGFPH\x18\x02\x20\x01(\x0b2\x0c.GAFCOEJC\
    DPGR\x0bNBDCGOEGFPHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::FLEHDHLAKDK::file_descriptor().clone());
            deps.push(super::GAFCOEJCDPG::file_descriptor().clone());
            deps.push(super::ILAEJLHGKBF::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            deps.push(super::JPMECEBAHOA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(NFIHEGJPADD::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
