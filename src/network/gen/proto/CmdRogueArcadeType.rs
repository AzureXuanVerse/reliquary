// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdRogueArcadeType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdRogueArcadeType)
pub enum CmdRogueArcadeType {
    // @@protoc_insertion_point(enum_value:CmdRogueArcadeType.CmdRogueArcadeTypeNone)
    CmdRogueArcadeTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdRogueArcadeType.CmdRogueArcadeRestartScRsp)
    CmdRogueArcadeRestartScRsp = 7699,
    // @@protoc_insertion_point(enum_value:CmdRogueArcadeType.CmdRogueArcadeLeaveScRsp)
    CmdRogueArcadeLeaveScRsp = 7673,
    // @@protoc_insertion_point(enum_value:CmdRogueArcadeType.CmdRogueArcadeStartScRsp)
    CmdRogueArcadeStartScRsp = 7700,
    // @@protoc_insertion_point(enum_value:CmdRogueArcadeType.CmdRogueArcadeGetInfoCsReq)
    CmdRogueArcadeGetInfoCsReq = 7659,
    // @@protoc_insertion_point(enum_value:CmdRogueArcadeType.CmdRogueArcadeLeaveCsReq)
    CmdRogueArcadeLeaveCsReq = 7680,
    // @@protoc_insertion_point(enum_value:CmdRogueArcadeType.CmdRogueArcadeStartCsReq)
    CmdRogueArcadeStartCsReq = 7662,
    // @@protoc_insertion_point(enum_value:CmdRogueArcadeType.CmdRogueArcadeGetInfoScRsp)
    CmdRogueArcadeGetInfoScRsp = 7693,
    // @@protoc_insertion_point(enum_value:CmdRogueArcadeType.CmdRogueArcadeRestartCsReq)
    CmdRogueArcadeRestartCsReq = 7665,
}

impl ::protobuf::Enum for CmdRogueArcadeType {
    const NAME: &'static str = "CmdRogueArcadeType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdRogueArcadeType> {
        match value {
            0 => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeTypeNone),
            7699 => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeRestartScRsp),
            7673 => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeLeaveScRsp),
            7700 => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeStartScRsp),
            7659 => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeGetInfoCsReq),
            7680 => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeLeaveCsReq),
            7662 => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeStartCsReq),
            7693 => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeGetInfoScRsp),
            7665 => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeRestartCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdRogueArcadeType> {
        match str {
            "CmdRogueArcadeTypeNone" => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeTypeNone),
            "CmdRogueArcadeRestartScRsp" => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeRestartScRsp),
            "CmdRogueArcadeLeaveScRsp" => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeLeaveScRsp),
            "CmdRogueArcadeStartScRsp" => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeStartScRsp),
            "CmdRogueArcadeGetInfoCsReq" => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeGetInfoCsReq),
            "CmdRogueArcadeLeaveCsReq" => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeLeaveCsReq),
            "CmdRogueArcadeStartCsReq" => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeStartCsReq),
            "CmdRogueArcadeGetInfoScRsp" => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeGetInfoScRsp),
            "CmdRogueArcadeRestartCsReq" => ::std::option::Option::Some(CmdRogueArcadeType::CmdRogueArcadeRestartCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdRogueArcadeType] = &[
        CmdRogueArcadeType::CmdRogueArcadeTypeNone,
        CmdRogueArcadeType::CmdRogueArcadeRestartScRsp,
        CmdRogueArcadeType::CmdRogueArcadeLeaveScRsp,
        CmdRogueArcadeType::CmdRogueArcadeStartScRsp,
        CmdRogueArcadeType::CmdRogueArcadeGetInfoCsReq,
        CmdRogueArcadeType::CmdRogueArcadeLeaveCsReq,
        CmdRogueArcadeType::CmdRogueArcadeStartCsReq,
        CmdRogueArcadeType::CmdRogueArcadeGetInfoScRsp,
        CmdRogueArcadeType::CmdRogueArcadeRestartCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdRogueArcadeType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdRogueArcadeType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdRogueArcadeType::CmdRogueArcadeTypeNone => 0,
            CmdRogueArcadeType::CmdRogueArcadeRestartScRsp => 1,
            CmdRogueArcadeType::CmdRogueArcadeLeaveScRsp => 2,
            CmdRogueArcadeType::CmdRogueArcadeStartScRsp => 3,
            CmdRogueArcadeType::CmdRogueArcadeGetInfoCsReq => 4,
            CmdRogueArcadeType::CmdRogueArcadeLeaveCsReq => 5,
            CmdRogueArcadeType::CmdRogueArcadeStartCsReq => 6,
            CmdRogueArcadeType::CmdRogueArcadeGetInfoScRsp => 7,
            CmdRogueArcadeType::CmdRogueArcadeRestartCsReq => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdRogueArcadeType {
    fn default() -> Self {
        CmdRogueArcadeType::CmdRogueArcadeTypeNone
    }
}

impl CmdRogueArcadeType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdRogueArcadeType>("CmdRogueArcadeType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18CmdRogueArcadeType.proto*\xb0\x02\n\x12CmdRogueArcadeType\x12\x1a\
    \n\x16CmdRogueArcadeTypeNone\x10\0\x12\x1f\n\x1aCmdRogueArcadeRestartScR\
    sp\x10\x93<\x12\x1d\n\x18CmdRogueArcadeLeaveScRsp\x10\xf9;\x12\x1d\n\x18\
    CmdRogueArcadeStartScRsp\x10\x94<\x12\x1f\n\x1aCmdRogueArcadeGetInfoCsRe\
    q\x10\xeb;\x12\x1d\n\x18CmdRogueArcadeLeaveCsReq\x10\x80<\x12\x1d\n\x18C\
    mdRogueArcadeStartCsReq\x10\xee;\x12\x1f\n\x1aCmdRogueArcadeGetInfoScRsp\
    \x10\x8d<\x12\x1f\n\x1aCmdRogueArcadeRestartCsReq\x10\xf1;b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdRogueArcadeType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
