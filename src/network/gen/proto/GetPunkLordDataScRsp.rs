// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetPunkLordDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetPunkLordDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPunkLordDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetPunkLordDataScRsp.NDEFCGKBPLO)
    pub NDEFCGKBPLO: u32,
    // @@protoc_insertion_point(field:GetPunkLordDataScRsp.JOGKPPIBDJN)
    pub JOGKPPIBDJN: u32,
    // @@protoc_insertion_point(field:GetPunkLordDataScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetPunkLordDataScRsp.EMGHLPGEPME)
    pub EMGHLPGEPME: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetPunkLordDataScRsp.CFEIPCCILPM)
    pub CFEIPCCILPM: u32,
    // @@protoc_insertion_point(field:GetPunkLordDataScRsp.ICOHFPGNIIH)
    pub ICOHFPGNIIH: u32,
    // @@protoc_insertion_point(field:GetPunkLordDataScRsp.INFCNCKAPFH)
    pub INFCNCKAPFH: u32,
    // @@protoc_insertion_point(field:GetPunkLordDataScRsp.FEGJGNIBANN)
    pub FEGJGNIBANN: i64,
    // special fields
    // @@protoc_insertion_point(special_field:GetPunkLordDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPunkLordDataScRsp {
    fn default() -> &'a GetPunkLordDataScRsp {
        <GetPunkLordDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetPunkLordDataScRsp {
    pub fn new() -> GetPunkLordDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NDEFCGKBPLO",
            |m: &GetPunkLordDataScRsp| { &m.NDEFCGKBPLO },
            |m: &mut GetPunkLordDataScRsp| { &mut m.NDEFCGKBPLO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JOGKPPIBDJN",
            |m: &GetPunkLordDataScRsp| { &m.JOGKPPIBDJN },
            |m: &mut GetPunkLordDataScRsp| { &mut m.JOGKPPIBDJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetPunkLordDataScRsp| { &m.retcode },
            |m: &mut GetPunkLordDataScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EMGHLPGEPME",
            |m: &GetPunkLordDataScRsp| { &m.EMGHLPGEPME },
            |m: &mut GetPunkLordDataScRsp| { &mut m.EMGHLPGEPME },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CFEIPCCILPM",
            |m: &GetPunkLordDataScRsp| { &m.CFEIPCCILPM },
            |m: &mut GetPunkLordDataScRsp| { &mut m.CFEIPCCILPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ICOHFPGNIIH",
            |m: &GetPunkLordDataScRsp| { &m.ICOHFPGNIIH },
            |m: &mut GetPunkLordDataScRsp| { &mut m.ICOHFPGNIIH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "INFCNCKAPFH",
            |m: &GetPunkLordDataScRsp| { &m.INFCNCKAPFH },
            |m: &mut GetPunkLordDataScRsp| { &mut m.INFCNCKAPFH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FEGJGNIBANN",
            |m: &GetPunkLordDataScRsp| { &m.FEGJGNIBANN },
            |m: &mut GetPunkLordDataScRsp| { &mut m.FEGJGNIBANN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPunkLordDataScRsp>(
            "GetPunkLordDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPunkLordDataScRsp {
    const NAME: &'static str = "GetPunkLordDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.NDEFCGKBPLO = is.read_uint32()?;
                },
                80 => {
                    self.JOGKPPIBDJN = is.read_uint32()?;
                },
                24 => {
                    self.retcode = is.read_uint32()?;
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.EMGHLPGEPME)?;
                },
                48 => {
                    self.EMGHLPGEPME.push(is.read_uint32()?);
                },
                112 => {
                    self.CFEIPCCILPM = is.read_uint32()?;
                },
                120 => {
                    self.ICOHFPGNIIH = is.read_uint32()?;
                },
                8 => {
                    self.INFCNCKAPFH = is.read_uint32()?;
                },
                32 => {
                    self.FEGJGNIBANN = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.NDEFCGKBPLO != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.NDEFCGKBPLO);
        }
        if self.JOGKPPIBDJN != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.JOGKPPIBDJN);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.retcode);
        }
        for value in &self.EMGHLPGEPME {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        if self.CFEIPCCILPM != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.CFEIPCCILPM);
        }
        if self.ICOHFPGNIIH != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.ICOHFPGNIIH);
        }
        if self.INFCNCKAPFH != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.INFCNCKAPFH);
        }
        if self.FEGJGNIBANN != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.FEGJGNIBANN);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.NDEFCGKBPLO != 0 {
            os.write_uint32(7, self.NDEFCGKBPLO)?;
        }
        if self.JOGKPPIBDJN != 0 {
            os.write_uint32(10, self.JOGKPPIBDJN)?;
        }
        if self.retcode != 0 {
            os.write_uint32(3, self.retcode)?;
        }
        for v in &self.EMGHLPGEPME {
            os.write_uint32(6, *v)?;
        };
        if self.CFEIPCCILPM != 0 {
            os.write_uint32(14, self.CFEIPCCILPM)?;
        }
        if self.ICOHFPGNIIH != 0 {
            os.write_uint32(15, self.ICOHFPGNIIH)?;
        }
        if self.INFCNCKAPFH != 0 {
            os.write_uint32(1, self.INFCNCKAPFH)?;
        }
        if self.FEGJGNIBANN != 0 {
            os.write_int64(4, self.FEGJGNIBANN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPunkLordDataScRsp {
        GetPunkLordDataScRsp::new()
    }

    fn clear(&mut self) {
        self.NDEFCGKBPLO = 0;
        self.JOGKPPIBDJN = 0;
        self.retcode = 0;
        self.EMGHLPGEPME.clear();
        self.CFEIPCCILPM = 0;
        self.ICOHFPGNIIH = 0;
        self.INFCNCKAPFH = 0;
        self.FEGJGNIBANN = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPunkLordDataScRsp {
        static instance: GetPunkLordDataScRsp = GetPunkLordDataScRsp {
            NDEFCGKBPLO: 0,
            JOGKPPIBDJN: 0,
            retcode: 0,
            EMGHLPGEPME: ::std::vec::Vec::new(),
            CFEIPCCILPM: 0,
            ICOHFPGNIIH: 0,
            INFCNCKAPFH: 0,
            FEGJGNIBANN: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPunkLordDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPunkLordDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPunkLordDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPunkLordDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aGetPunkLordDataScRsp.proto\"\x9e\x02\n\x14GetPunkLordDataScRsp\x12\
    \x20\n\x0bNDEFCGKBPLO\x18\x07\x20\x01(\rR\x0bNDEFCGKBPLO\x12\x20\n\x0bJO\
    GKPPIBDJN\x18\n\x20\x01(\rR\x0bJOGKPPIBDJN\x12\x18\n\x07retcode\x18\x03\
    \x20\x01(\rR\x07retcode\x12\x20\n\x0bEMGHLPGEPME\x18\x06\x20\x03(\rR\x0b\
    EMGHLPGEPME\x12\x20\n\x0bCFEIPCCILPM\x18\x0e\x20\x01(\rR\x0bCFEIPCCILPM\
    \x12\x20\n\x0bICOHFPGNIIH\x18\x0f\x20\x01(\rR\x0bICOHFPGNIIH\x12\x20\n\
    \x0bINFCNCKAPFH\x18\x01\x20\x01(\rR\x0bINFCNCKAPFH\x12\x20\n\x0bFEGJGNIB\
    ANN\x18\x04\x20\x01(\x03R\x0bFEGJGNIBANNb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetPunkLordDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
