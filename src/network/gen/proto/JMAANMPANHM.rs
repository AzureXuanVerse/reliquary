// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JMAANMPANHM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:JMAANMPANHM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JMAANMPANHM {
    // message fields
    // @@protoc_insertion_point(field:JMAANMPANHM.NKOFFBMHAPI)
    pub NKOFFBMHAPI: u32,
    // @@protoc_insertion_point(field:JMAANMPANHM.FPAIBLDAKLI)
    pub FPAIBLDAKLI: u32,
    // @@protoc_insertion_point(field:JMAANMPANHM.EGMAFIOOKJJ)
    pub EGMAFIOOKJJ: u32,
    // @@protoc_insertion_point(field:JMAANMPANHM.NHJALPDBOGN)
    pub NHJALPDBOGN: u32,
    // @@protoc_insertion_point(field:JMAANMPANHM.NOEIMMHCKPM)
    pub NOEIMMHCKPM: u32,
    // @@protoc_insertion_point(field:JMAANMPANHM.FBNHDEFNECI)
    pub FBNHDEFNECI: i32,
    // @@protoc_insertion_point(field:JMAANMPANHM.CLPMIBDFPJC)
    pub CLPMIBDFPJC: u32,
    // @@protoc_insertion_point(field:JMAANMPANHM.TURN_FOOD_SWITCH_ATTACK)
    pub TURN_FOOD_SWITCH_ATTACK: i32,
    // special fields
    // @@protoc_insertion_point(special_field:JMAANMPANHM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JMAANMPANHM {
    fn default() -> &'a JMAANMPANHM {
        <JMAANMPANHM as ::protobuf::Message>::default_instance()
    }
}

impl JMAANMPANHM {
    pub fn new() -> JMAANMPANHM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NKOFFBMHAPI",
            |m: &JMAANMPANHM| { &m.NKOFFBMHAPI },
            |m: &mut JMAANMPANHM| { &mut m.NKOFFBMHAPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FPAIBLDAKLI",
            |m: &JMAANMPANHM| { &m.FPAIBLDAKLI },
            |m: &mut JMAANMPANHM| { &mut m.FPAIBLDAKLI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EGMAFIOOKJJ",
            |m: &JMAANMPANHM| { &m.EGMAFIOOKJJ },
            |m: &mut JMAANMPANHM| { &mut m.EGMAFIOOKJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NHJALPDBOGN",
            |m: &JMAANMPANHM| { &m.NHJALPDBOGN },
            |m: &mut JMAANMPANHM| { &mut m.NHJALPDBOGN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NOEIMMHCKPM",
            |m: &JMAANMPANHM| { &m.NOEIMMHCKPM },
            |m: &mut JMAANMPANHM| { &mut m.NOEIMMHCKPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FBNHDEFNECI",
            |m: &JMAANMPANHM| { &m.FBNHDEFNECI },
            |m: &mut JMAANMPANHM| { &mut m.FBNHDEFNECI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CLPMIBDFPJC",
            |m: &JMAANMPANHM| { &m.CLPMIBDFPJC },
            |m: &mut JMAANMPANHM| { &mut m.CLPMIBDFPJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TURN_FOOD_SWITCH_ATTACK",
            |m: &JMAANMPANHM| { &m.TURN_FOOD_SWITCH_ATTACK },
            |m: &mut JMAANMPANHM| { &mut m.TURN_FOOD_SWITCH_ATTACK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JMAANMPANHM>(
            "JMAANMPANHM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JMAANMPANHM {
    const NAME: &'static str = "JMAANMPANHM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.NKOFFBMHAPI = is.read_uint32()?;
                },
                112 => {
                    self.FPAIBLDAKLI = is.read_uint32()?;
                },
                104 => {
                    self.EGMAFIOOKJJ = is.read_uint32()?;
                },
                8 => {
                    self.NHJALPDBOGN = is.read_uint32()?;
                },
                80 => {
                    self.NOEIMMHCKPM = is.read_uint32()?;
                },
                40 => {
                    self.FBNHDEFNECI = is.read_int32()?;
                },
                72 => {
                    self.CLPMIBDFPJC = is.read_uint32()?;
                },
                88 => {
                    self.TURN_FOOD_SWITCH_ATTACK = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.NKOFFBMHAPI != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.NKOFFBMHAPI);
        }
        if self.FPAIBLDAKLI != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.FPAIBLDAKLI);
        }
        if self.EGMAFIOOKJJ != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.EGMAFIOOKJJ);
        }
        if self.NHJALPDBOGN != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.NHJALPDBOGN);
        }
        if self.NOEIMMHCKPM != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.NOEIMMHCKPM);
        }
        if self.FBNHDEFNECI != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.FBNHDEFNECI);
        }
        if self.CLPMIBDFPJC != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.CLPMIBDFPJC);
        }
        if self.TURN_FOOD_SWITCH_ATTACK != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.TURN_FOOD_SWITCH_ATTACK);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.NKOFFBMHAPI != 0 {
            os.write_uint32(3, self.NKOFFBMHAPI)?;
        }
        if self.FPAIBLDAKLI != 0 {
            os.write_uint32(14, self.FPAIBLDAKLI)?;
        }
        if self.EGMAFIOOKJJ != 0 {
            os.write_uint32(13, self.EGMAFIOOKJJ)?;
        }
        if self.NHJALPDBOGN != 0 {
            os.write_uint32(1, self.NHJALPDBOGN)?;
        }
        if self.NOEIMMHCKPM != 0 {
            os.write_uint32(10, self.NOEIMMHCKPM)?;
        }
        if self.FBNHDEFNECI != 0 {
            os.write_int32(5, self.FBNHDEFNECI)?;
        }
        if self.CLPMIBDFPJC != 0 {
            os.write_uint32(9, self.CLPMIBDFPJC)?;
        }
        if self.TURN_FOOD_SWITCH_ATTACK != 0 {
            os.write_int32(11, self.TURN_FOOD_SWITCH_ATTACK)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JMAANMPANHM {
        JMAANMPANHM::new()
    }

    fn clear(&mut self) {
        self.NKOFFBMHAPI = 0;
        self.FPAIBLDAKLI = 0;
        self.EGMAFIOOKJJ = 0;
        self.NHJALPDBOGN = 0;
        self.NOEIMMHCKPM = 0;
        self.FBNHDEFNECI = 0;
        self.CLPMIBDFPJC = 0;
        self.TURN_FOOD_SWITCH_ATTACK = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JMAANMPANHM {
        static instance: JMAANMPANHM = JMAANMPANHM {
            NKOFFBMHAPI: 0,
            FPAIBLDAKLI: 0,
            EGMAFIOOKJJ: 0,
            NHJALPDBOGN: 0,
            NOEIMMHCKPM: 0,
            FBNHDEFNECI: 0,
            CLPMIBDFPJC: 0,
            TURN_FOOD_SWITCH_ATTACK: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JMAANMPANHM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JMAANMPANHM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JMAANMPANHM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JMAANMPANHM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JMAANMPANHM.proto\"\xb2\x02\n\x0bJMAANMPANHM\x12\x20\n\x0bNKOFFBMH\
    API\x18\x03\x20\x01(\rR\x0bNKOFFBMHAPI\x12\x20\n\x0bFPAIBLDAKLI\x18\x0e\
    \x20\x01(\rR\x0bFPAIBLDAKLI\x12\x20\n\x0bEGMAFIOOKJJ\x18\r\x20\x01(\rR\
    \x0bEGMAFIOOKJJ\x12\x20\n\x0bNHJALPDBOGN\x18\x01\x20\x01(\rR\x0bNHJALPDB\
    OGN\x12\x20\n\x0bNOEIMMHCKPM\x18\n\x20\x01(\rR\x0bNOEIMMHCKPM\x12\x20\n\
    \x0bFBNHDEFNECI\x18\x05\x20\x01(\x05R\x0bFBNHDEFNECI\x12\x20\n\x0bCLPMIB\
    DFPJC\x18\t\x20\x01(\rR\x0bCLPMIBDFPJC\x125\n\x17TURN_FOOD_SWITCH_ATTACK\
    \x18\x0b\x20\x01(\x05R\x14TURNFOODSWITCHATTACKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JMAANMPANHM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
