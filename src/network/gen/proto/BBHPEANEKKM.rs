// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BBHPEANEKKM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:BBHPEANEKKM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BBHPEANEKKM {
    // message fields
    // @@protoc_insertion_point(field:BBHPEANEKKM.PFIHNPIBEGN)
    pub PFIHNPIBEGN: u32,
    // @@protoc_insertion_point(field:BBHPEANEKKM.KBEDNFJCAOC)
    pub KBEDNFJCAOC: u32,
    // @@protoc_insertion_point(field:BBHPEANEKKM.IHEIOJKJIEH)
    pub IHEIOJKJIEH: u32,
    // @@protoc_insertion_point(field:BBHPEANEKKM.MOMKFEJMJMI)
    pub MOMKFEJMJMI: u32,
    // @@protoc_insertion_point(field:BBHPEANEKKM.KJIPFDMGBBA)
    pub KJIPFDMGBBA: ::protobuf::MessageField<super::CGMLGCGMBDH::CGMLGCGMBDH>,
    // @@protoc_insertion_point(field:BBHPEANEKKM.POCEIIAKDEI)
    pub POCEIIAKDEI: bool,
    // @@protoc_insertion_point(field:BBHPEANEKKM.IPMKBGNEIBN)
    pub IPMKBGNEIBN: ::std::vec::Vec<super::BGCPDIHELNN::BGCPDIHELNN>,
    // special fields
    // @@protoc_insertion_point(special_field:BBHPEANEKKM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BBHPEANEKKM {
    fn default() -> &'a BBHPEANEKKM {
        <BBHPEANEKKM as ::protobuf::Message>::default_instance()
    }
}

impl BBHPEANEKKM {
    pub fn new() -> BBHPEANEKKM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PFIHNPIBEGN",
            |m: &BBHPEANEKKM| { &m.PFIHNPIBEGN },
            |m: &mut BBHPEANEKKM| { &mut m.PFIHNPIBEGN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KBEDNFJCAOC",
            |m: &BBHPEANEKKM| { &m.KBEDNFJCAOC },
            |m: &mut BBHPEANEKKM| { &mut m.KBEDNFJCAOC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IHEIOJKJIEH",
            |m: &BBHPEANEKKM| { &m.IHEIOJKJIEH },
            |m: &mut BBHPEANEKKM| { &mut m.IHEIOJKJIEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MOMKFEJMJMI",
            |m: &BBHPEANEKKM| { &m.MOMKFEJMJMI },
            |m: &mut BBHPEANEKKM| { &mut m.MOMKFEJMJMI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CGMLGCGMBDH::CGMLGCGMBDH>(
            "KJIPFDMGBBA",
            |m: &BBHPEANEKKM| { &m.KJIPFDMGBBA },
            |m: &mut BBHPEANEKKM| { &mut m.KJIPFDMGBBA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "POCEIIAKDEI",
            |m: &BBHPEANEKKM| { &m.POCEIIAKDEI },
            |m: &mut BBHPEANEKKM| { &mut m.POCEIIAKDEI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IPMKBGNEIBN",
            |m: &BBHPEANEKKM| { &m.IPMKBGNEIBN },
            |m: &mut BBHPEANEKKM| { &mut m.IPMKBGNEIBN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BBHPEANEKKM>(
            "BBHPEANEKKM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BBHPEANEKKM {
    const NAME: &'static str = "BBHPEANEKKM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.PFIHNPIBEGN = is.read_uint32()?;
                },
                8 => {
                    self.KBEDNFJCAOC = is.read_uint32()?;
                },
                64 => {
                    self.IHEIOJKJIEH = is.read_uint32()?;
                },
                32 => {
                    self.MOMKFEJMJMI = is.read_uint32()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KJIPFDMGBBA)?;
                },
                72 => {
                    self.POCEIIAKDEI = is.read_bool()?;
                },
                114 => {
                    self.IPMKBGNEIBN.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.PFIHNPIBEGN != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.PFIHNPIBEGN);
        }
        if self.KBEDNFJCAOC != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.KBEDNFJCAOC);
        }
        if self.IHEIOJKJIEH != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.IHEIOJKJIEH);
        }
        if self.MOMKFEJMJMI != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.MOMKFEJMJMI);
        }
        if let Some(v) = self.KJIPFDMGBBA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.POCEIIAKDEI != false {
            my_size += 1 + 1;
        }
        for value in &self.IPMKBGNEIBN {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.PFIHNPIBEGN != 0 {
            os.write_uint32(2, self.PFIHNPIBEGN)?;
        }
        if self.KBEDNFJCAOC != 0 {
            os.write_uint32(1, self.KBEDNFJCAOC)?;
        }
        if self.IHEIOJKJIEH != 0 {
            os.write_uint32(8, self.IHEIOJKJIEH)?;
        }
        if self.MOMKFEJMJMI != 0 {
            os.write_uint32(4, self.MOMKFEJMJMI)?;
        }
        if let Some(v) = self.KJIPFDMGBBA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if self.POCEIIAKDEI != false {
            os.write_bool(9, self.POCEIIAKDEI)?;
        }
        for v in &self.IPMKBGNEIBN {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BBHPEANEKKM {
        BBHPEANEKKM::new()
    }

    fn clear(&mut self) {
        self.PFIHNPIBEGN = 0;
        self.KBEDNFJCAOC = 0;
        self.IHEIOJKJIEH = 0;
        self.MOMKFEJMJMI = 0;
        self.KJIPFDMGBBA.clear();
        self.POCEIIAKDEI = false;
        self.IPMKBGNEIBN.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BBHPEANEKKM {
        static instance: BBHPEANEKKM = BBHPEANEKKM {
            PFIHNPIBEGN: 0,
            KBEDNFJCAOC: 0,
            IHEIOJKJIEH: 0,
            MOMKFEJMJMI: 0,
            KJIPFDMGBBA: ::protobuf::MessageField::none(),
            POCEIIAKDEI: false,
            IPMKBGNEIBN: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BBHPEANEKKM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BBHPEANEKKM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BBHPEANEKKM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BBHPEANEKKM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11BBHPEANEKKM.proto\x1a\x11BGCPDIHELNN.proto\x1a\x11CGMLGCGMBDH.prot\
    o\"\x97\x02\n\x0bBBHPEANEKKM\x12\x20\n\x0bPFIHNPIBEGN\x18\x02\x20\x01(\r\
    R\x0bPFIHNPIBEGN\x12\x20\n\x0bKBEDNFJCAOC\x18\x01\x20\x01(\rR\x0bKBEDNFJ\
    CAOC\x12\x20\n\x0bIHEIOJKJIEH\x18\x08\x20\x01(\rR\x0bIHEIOJKJIEH\x12\x20\
    \n\x0bMOMKFEJMJMI\x18\x04\x20\x01(\rR\x0bMOMKFEJMJMI\x12.\n\x0bKJIPFDMGB\
    BA\x18\x0c\x20\x01(\x0b2\x0c.CGMLGCGMBDHR\x0bKJIPFDMGBBA\x12\x20\n\x0bPO\
    CEIIAKDEI\x18\t\x20\x01(\x08R\x0bPOCEIIAKDEI\x12.\n\x0bIPMKBGNEIBN\x18\
    \x0e\x20\x03(\x0b2\x0c.BGCPDIHELNNR\x0bIPMKBGNEIBNb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::BGCPDIHELNN::file_descriptor().clone());
            deps.push(super::CGMLGCGMBDH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BBHPEANEKKM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
