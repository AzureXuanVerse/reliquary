// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `TrainPartyHandlePendingActionCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:TrainPartyHandlePendingActionCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TrainPartyHandlePendingActionCsReq {
    // message fields
    // @@protoc_insertion_point(field:TrainPartyHandlePendingActionCsReq.LMFHNELKFOC)
    pub LMFHNELKFOC: u32,
    // message oneof groups
    pub NOACJGOFODI: ::std::option::Option<train_party_handle_pending_action_cs_req::NOACJGOFODI>,
    // special fields
    // @@protoc_insertion_point(special_field:TrainPartyHandlePendingActionCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrainPartyHandlePendingActionCsReq {
    fn default() -> &'a TrainPartyHandlePendingActionCsReq {
        <TrainPartyHandlePendingActionCsReq as ::protobuf::Message>::default_instance()
    }
}

impl TrainPartyHandlePendingActionCsReq {
    pub fn new() -> TrainPartyHandlePendingActionCsReq {
        ::std::default::Default::default()
    }

    // .NIBBILKHHHE GFLJGKBPCGB = 1763;

    pub fn GFLJGKBPCGB(&self) -> &super::NIBBILKHHHE::NIBBILKHHHE {
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(ref v)) => v,
            _ => <super::NIBBILKHHHE::NIBBILKHHHE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GFLJGKBPCGB(&mut self) {
        self.NOACJGOFODI = ::std::option::Option::None;
    }

    pub fn has_GFLJGKBPCGB(&self) -> bool {
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GFLJGKBPCGB(&mut self, v: super::NIBBILKHHHE::NIBBILKHHHE) {
        self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GFLJGKBPCGB(&mut self) -> &mut super::NIBBILKHHHE::NIBBILKHHHE {
        if let ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(_)) = self.NOACJGOFODI {
        } else {
            self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(super::NIBBILKHHHE::NIBBILKHHHE::new()));
        }
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GFLJGKBPCGB(&mut self) -> super::NIBBILKHHHE::NIBBILKHHHE {
        if self.has_GFLJGKBPCGB() {
            match self.NOACJGOFODI.take() {
                ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NIBBILKHHHE::NIBBILKHHHE::new()
        }
    }

    // .ICMFJIEIEBM EPPNHJCNFCI = 154;

    pub fn EPPNHJCNFCI(&self) -> &super::ICMFJIEIEBM::ICMFJIEIEBM {
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(ref v)) => v,
            _ => <super::ICMFJIEIEBM::ICMFJIEIEBM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EPPNHJCNFCI(&mut self) {
        self.NOACJGOFODI = ::std::option::Option::None;
    }

    pub fn has_EPPNHJCNFCI(&self) -> bool {
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EPPNHJCNFCI(&mut self, v: super::ICMFJIEIEBM::ICMFJIEIEBM) {
        self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EPPNHJCNFCI(&mut self) -> &mut super::ICMFJIEIEBM::ICMFJIEIEBM {
        if let ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(_)) = self.NOACJGOFODI {
        } else {
            self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(super::ICMFJIEIEBM::ICMFJIEIEBM::new()));
        }
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EPPNHJCNFCI(&mut self) -> super::ICMFJIEIEBM::ICMFJIEIEBM {
        if self.has_EPPNHJCNFCI() {
            match self.NOACJGOFODI.take() {
                ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ICMFJIEIEBM::ICMFJIEIEBM::new()
        }
    }

    // .HPIPKEEKBDO BMOCCJHIFAK = 656;

    pub fn BMOCCJHIFAK(&self) -> &super::HPIPKEEKBDO::HPIPKEEKBDO {
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(ref v)) => v,
            _ => <super::HPIPKEEKBDO::HPIPKEEKBDO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BMOCCJHIFAK(&mut self) {
        self.NOACJGOFODI = ::std::option::Option::None;
    }

    pub fn has_BMOCCJHIFAK(&self) -> bool {
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BMOCCJHIFAK(&mut self, v: super::HPIPKEEKBDO::HPIPKEEKBDO) {
        self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BMOCCJHIFAK(&mut self) -> &mut super::HPIPKEEKBDO::HPIPKEEKBDO {
        if let ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(_)) = self.NOACJGOFODI {
        } else {
            self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(super::HPIPKEEKBDO::HPIPKEEKBDO::new()));
        }
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BMOCCJHIFAK(&mut self) -> super::HPIPKEEKBDO::HPIPKEEKBDO {
        if self.has_BMOCCJHIFAK() {
            match self.NOACJGOFODI.take() {
                ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HPIPKEEKBDO::HPIPKEEKBDO::new()
        }
    }

    // .COAOOLIBOHF MGEKAIONENB = 366;

    pub fn MGEKAIONENB(&self) -> &super::COAOOLIBOHF::COAOOLIBOHF {
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(ref v)) => v,
            _ => <super::COAOOLIBOHF::COAOOLIBOHF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MGEKAIONENB(&mut self) {
        self.NOACJGOFODI = ::std::option::Option::None;
    }

    pub fn has_MGEKAIONENB(&self) -> bool {
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MGEKAIONENB(&mut self, v: super::COAOOLIBOHF::COAOOLIBOHF) {
        self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MGEKAIONENB(&mut self) -> &mut super::COAOOLIBOHF::COAOOLIBOHF {
        if let ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(_)) = self.NOACJGOFODI {
        } else {
            self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(super::COAOOLIBOHF::COAOOLIBOHF::new()));
        }
        match self.NOACJGOFODI {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MGEKAIONENB(&mut self) -> super::COAOOLIBOHF::COAOOLIBOHF {
        if self.has_MGEKAIONENB() {
            match self.NOACJGOFODI.take() {
                ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::COAOOLIBOHF::COAOOLIBOHF::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LMFHNELKFOC",
            |m: &TrainPartyHandlePendingActionCsReq| { &m.LMFHNELKFOC },
            |m: &mut TrainPartyHandlePendingActionCsReq| { &mut m.LMFHNELKFOC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NIBBILKHHHE::NIBBILKHHHE>(
            "GFLJGKBPCGB",
            TrainPartyHandlePendingActionCsReq::has_GFLJGKBPCGB,
            TrainPartyHandlePendingActionCsReq::GFLJGKBPCGB,
            TrainPartyHandlePendingActionCsReq::mut_GFLJGKBPCGB,
            TrainPartyHandlePendingActionCsReq::set_GFLJGKBPCGB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ICMFJIEIEBM::ICMFJIEIEBM>(
            "EPPNHJCNFCI",
            TrainPartyHandlePendingActionCsReq::has_EPPNHJCNFCI,
            TrainPartyHandlePendingActionCsReq::EPPNHJCNFCI,
            TrainPartyHandlePendingActionCsReq::mut_EPPNHJCNFCI,
            TrainPartyHandlePendingActionCsReq::set_EPPNHJCNFCI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HPIPKEEKBDO::HPIPKEEKBDO>(
            "BMOCCJHIFAK",
            TrainPartyHandlePendingActionCsReq::has_BMOCCJHIFAK,
            TrainPartyHandlePendingActionCsReq::BMOCCJHIFAK,
            TrainPartyHandlePendingActionCsReq::mut_BMOCCJHIFAK,
            TrainPartyHandlePendingActionCsReq::set_BMOCCJHIFAK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::COAOOLIBOHF::COAOOLIBOHF>(
            "MGEKAIONENB",
            TrainPartyHandlePendingActionCsReq::has_MGEKAIONENB,
            TrainPartyHandlePendingActionCsReq::MGEKAIONENB,
            TrainPartyHandlePendingActionCsReq::mut_MGEKAIONENB,
            TrainPartyHandlePendingActionCsReq::set_MGEKAIONENB,
        ));
        oneofs.push(train_party_handle_pending_action_cs_req::NOACJGOFODI::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TrainPartyHandlePendingActionCsReq>(
            "TrainPartyHandlePendingActionCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TrainPartyHandlePendingActionCsReq {
    const NAME: &'static str = "TrainPartyHandlePendingActionCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.LMFHNELKFOC = is.read_uint32()?;
                },
                14106 => {
                    self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(is.read_message()?));
                },
                1234 => {
                    self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(is.read_message()?));
                },
                5250 => {
                    self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(is.read_message()?));
                },
                2930 => {
                    self.NOACJGOFODI = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.LMFHNELKFOC != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.LMFHNELKFOC);
        }
        if let ::std::option::Option::Some(ref v) = self.NOACJGOFODI {
            match v {
                &train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.LMFHNELKFOC != 0 {
            os.write_uint32(7, self.LMFHNELKFOC)?;
        }
        if let ::std::option::Option::Some(ref v) = self.NOACJGOFODI {
            match v {
                &train_party_handle_pending_action_cs_req::NOACJGOFODI::GFLJGKBPCGB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1763, v, os)?;
                },
                &train_party_handle_pending_action_cs_req::NOACJGOFODI::EPPNHJCNFCI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(154, v, os)?;
                },
                &train_party_handle_pending_action_cs_req::NOACJGOFODI::BMOCCJHIFAK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(656, v, os)?;
                },
                &train_party_handle_pending_action_cs_req::NOACJGOFODI::MGEKAIONENB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(366, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrainPartyHandlePendingActionCsReq {
        TrainPartyHandlePendingActionCsReq::new()
    }

    fn clear(&mut self) {
        self.LMFHNELKFOC = 0;
        self.NOACJGOFODI = ::std::option::Option::None;
        self.NOACJGOFODI = ::std::option::Option::None;
        self.NOACJGOFODI = ::std::option::Option::None;
        self.NOACJGOFODI = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrainPartyHandlePendingActionCsReq {
        static instance: TrainPartyHandlePendingActionCsReq = TrainPartyHandlePendingActionCsReq {
            LMFHNELKFOC: 0,
            NOACJGOFODI: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TrainPartyHandlePendingActionCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TrainPartyHandlePendingActionCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TrainPartyHandlePendingActionCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrainPartyHandlePendingActionCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TrainPartyHandlePendingActionCsReq`
pub mod train_party_handle_pending_action_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:TrainPartyHandlePendingActionCsReq.NOACJGOFODI)
    pub enum NOACJGOFODI {
        // @@protoc_insertion_point(oneof_field:TrainPartyHandlePendingActionCsReq.GFLJGKBPCGB)
        GFLJGKBPCGB(super::super::NIBBILKHHHE::NIBBILKHHHE),
        // @@protoc_insertion_point(oneof_field:TrainPartyHandlePendingActionCsReq.EPPNHJCNFCI)
        EPPNHJCNFCI(super::super::ICMFJIEIEBM::ICMFJIEIEBM),
        // @@protoc_insertion_point(oneof_field:TrainPartyHandlePendingActionCsReq.BMOCCJHIFAK)
        BMOCCJHIFAK(super::super::HPIPKEEKBDO::HPIPKEEKBDO),
        // @@protoc_insertion_point(oneof_field:TrainPartyHandlePendingActionCsReq.MGEKAIONENB)
        MGEKAIONENB(super::super::COAOOLIBOHF::COAOOLIBOHF),
    }

    impl ::protobuf::Oneof for NOACJGOFODI {
    }

    impl ::protobuf::OneofFull for NOACJGOFODI {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::TrainPartyHandlePendingActionCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("NOACJGOFODI").unwrap()).clone()
        }
    }

    impl NOACJGOFODI {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<NOACJGOFODI>("NOACJGOFODI")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(TrainPartyHandlePendingActionCsReq.proto\x1a\x11COAOOLIBOHF.proto\x1a\
    \x11HPIPKEEKBDO.proto\x1a\x11ICMFJIEIEBM.proto\x1a\x11NIBBILKHHHE.proto\
    \"\xa1\x02\n\"TrainPartyHandlePendingActionCsReq\x12\x20\n\x0bLMFHNELKFO\
    C\x18\x07\x20\x01(\rR\x0bLMFHNELKFOC\x121\n\x0bGFLJGKBPCGB\x18\xe3\r\x20\
    \x01(\x0b2\x0c.NIBBILKHHHEH\0R\x0bGFLJGKBPCGB\x121\n\x0bEPPNHJCNFCI\x18\
    \x9a\x01\x20\x01(\x0b2\x0c.ICMFJIEIEBMH\0R\x0bEPPNHJCNFCI\x121\n\x0bBMOC\
    CJHIFAK\x18\x90\x05\x20\x01(\x0b2\x0c.HPIPKEEKBDOH\0R\x0bBMOCCJHIFAK\x12\
    1\n\x0bMGEKAIONENB\x18\xee\x02\x20\x01(\x0b2\x0c.COAOOLIBOHFH\0R\x0bMGEK\
    AIONENBB\r\n\x0bNOACJGOFODIb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::COAOOLIBOHF::file_descriptor().clone());
            deps.push(super::HPIPKEEKBDO::file_descriptor().clone());
            deps.push(super::ICMFJIEIEBM::file_descriptor().clone());
            deps.push(super::NIBBILKHHHE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(TrainPartyHandlePendingActionCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
