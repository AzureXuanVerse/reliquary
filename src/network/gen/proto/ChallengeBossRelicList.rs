// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ChallengeBossRelicList.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ChallengeBossRelicList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChallengeBossRelicList {
    // message fields
    // @@protoc_insertion_point(field:ChallengeBossRelicList.equipped_relic_map)
    pub equipped_relic_map: ::std::collections::HashMap<u32, challenge_boss_relic_list::ChallengeBossRelic>,
    // special fields
    // @@protoc_insertion_point(special_field:ChallengeBossRelicList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChallengeBossRelicList {
    fn default() -> &'a ChallengeBossRelicList {
        <ChallengeBossRelicList as ::protobuf::Message>::default_instance()
    }
}

impl ChallengeBossRelicList {
    pub fn new() -> ChallengeBossRelicList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "equipped_relic_map",
            |m: &ChallengeBossRelicList| { &m.equipped_relic_map },
            |m: &mut ChallengeBossRelicList| { &mut m.equipped_relic_map },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChallengeBossRelicList>(
            "ChallengeBossRelicList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChallengeBossRelicList {
    const NAME: &'static str = "ChallengeBossRelicList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.equipped_relic_map.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.equipped_relic_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.equipped_relic_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChallengeBossRelicList {
        ChallengeBossRelicList::new()
    }

    fn clear(&mut self) {
        self.equipped_relic_map.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChallengeBossRelicList {
        static instance: ::protobuf::rt::Lazy<ChallengeBossRelicList> = ::protobuf::rt::Lazy::new();
        instance.get(ChallengeBossRelicList::new)
    }
}

impl ::protobuf::MessageFull for ChallengeBossRelicList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChallengeBossRelicList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChallengeBossRelicList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChallengeBossRelicList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ChallengeBossRelicList`
pub mod challenge_boss_relic_list {
    // @@protoc_insertion_point(message:ChallengeBossRelicList.ChallengeBossRelic)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ChallengeBossRelic {
        // message fields
        // @@protoc_insertion_point(field:ChallengeBossRelicList.ChallengeBossRelic.tid)
        pub tid: u32,
        // @@protoc_insertion_point(field:ChallengeBossRelicList.ChallengeBossRelic.level)
        pub level: u32,
        // @@protoc_insertion_point(field:ChallengeBossRelicList.ChallengeBossRelic.unique_id)
        pub unique_id: u32,
        // @@protoc_insertion_point(field:ChallengeBossRelicList.ChallengeBossRelic.sub_affix_list)
        pub sub_affix_list: ::std::vec::Vec<super::super::RelicAffix::RelicAffix>,
        // @@protoc_insertion_point(field:ChallengeBossRelicList.ChallengeBossRelic.main_affix_id)
        pub main_affix_id: u32,
        // special fields
        // @@protoc_insertion_point(special_field:ChallengeBossRelicList.ChallengeBossRelic.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ChallengeBossRelic {
        fn default() -> &'a ChallengeBossRelic {
            <ChallengeBossRelic as ::protobuf::Message>::default_instance()
        }
    }

    impl ChallengeBossRelic {
        pub fn new() -> ChallengeBossRelic {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "tid",
                |m: &ChallengeBossRelic| { &m.tid },
                |m: &mut ChallengeBossRelic| { &mut m.tid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "level",
                |m: &ChallengeBossRelic| { &m.level },
                |m: &mut ChallengeBossRelic| { &mut m.level },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "unique_id",
                |m: &ChallengeBossRelic| { &m.unique_id },
                |m: &mut ChallengeBossRelic| { &mut m.unique_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "sub_affix_list",
                |m: &ChallengeBossRelic| { &m.sub_affix_list },
                |m: &mut ChallengeBossRelic| { &mut m.sub_affix_list },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "main_affix_id",
                |m: &ChallengeBossRelic| { &m.main_affix_id },
                |m: &mut ChallengeBossRelic| { &mut m.main_affix_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChallengeBossRelic>(
                "ChallengeBossRelicList.ChallengeBossRelic",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ChallengeBossRelic {
        const NAME: &'static str = "ChallengeBossRelic";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.tid = is.read_uint32()?;
                    },
                    72 => {
                        self.level = is.read_uint32()?;
                    },
                    112 => {
                        self.unique_id = is.read_uint32()?;
                    },
                    34 => {
                        self.sub_affix_list.push(is.read_message()?);
                    },
                    96 => {
                        self.main_affix_id = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.tid != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.tid);
            }
            if self.level != 0 {
                my_size += ::protobuf::rt::uint32_size(9, self.level);
            }
            if self.unique_id != 0 {
                my_size += ::protobuf::rt::uint32_size(14, self.unique_id);
            }
            for value in &self.sub_affix_list {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if self.main_affix_id != 0 {
                my_size += ::protobuf::rt::uint32_size(12, self.main_affix_id);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.tid != 0 {
                os.write_uint32(1, self.tid)?;
            }
            if self.level != 0 {
                os.write_uint32(9, self.level)?;
            }
            if self.unique_id != 0 {
                os.write_uint32(14, self.unique_id)?;
            }
            for v in &self.sub_affix_list {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            if self.main_affix_id != 0 {
                os.write_uint32(12, self.main_affix_id)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ChallengeBossRelic {
            ChallengeBossRelic::new()
        }

        fn clear(&mut self) {
            self.tid = 0;
            self.level = 0;
            self.unique_id = 0;
            self.sub_affix_list.clear();
            self.main_affix_id = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ChallengeBossRelic {
            static instance: ChallengeBossRelic = ChallengeBossRelic {
                tid: 0,
                level: 0,
                unique_id: 0,
                sub_affix_list: ::std::vec::Vec::new(),
                main_affix_id: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ChallengeBossRelic {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ChallengeBossRelicList.ChallengeBossRelic").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ChallengeBossRelic {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ChallengeBossRelic {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cChallengeBossRelicList.proto\x1a\x10RelicAffix.proto\"\x99\x03\n\
    \x16ChallengeBossRelicList\x12[\n\x12equipped_relic_map\x18\x06\x20\x03(\
    \x0b2-.ChallengeBossRelicList.EquippedRelicMapEntryR\x10equippedRelicMap\
    \x1a\xb0\x01\n\x12ChallengeBossRelic\x12\x10\n\x03tid\x18\x01\x20\x01(\r\
    R\x03tid\x12\x14\n\x05level\x18\t\x20\x01(\rR\x05level\x12\x1b\n\tunique\
    _id\x18\x0e\x20\x01(\rR\x08uniqueId\x121\n\x0esub_affix_list\x18\x04\x20\
    \x03(\x0b2\x0b.RelicAffixR\x0csubAffixList\x12\"\n\rmain_affix_id\x18\
    \x0c\x20\x01(\rR\x0bmainAffixId\x1ao\n\x15EquippedRelicMapEntry\x12\x10\
    \n\x03key\x18\x01\x20\x01(\rR\x03key\x12@\n\x05value\x18\x02\x20\x01(\
    \x0b2*.ChallengeBossRelicList.ChallengeBossRelicR\x05value:\x028\x01B\
    \x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::RelicAffix::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ChallengeBossRelicList::generated_message_descriptor_data());
            messages.push(challenge_boss_relic_list::ChallengeBossRelic::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
