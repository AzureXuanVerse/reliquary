// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SceneCastSkillCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:SceneCastSkillCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SceneCastSkillCsReq {
    // message fields
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.GGDJHGBNDFO)
    pub GGDJHGBNDFO: ::std::vec::Vec<super::FCNPKHDMNFE::FCNPKHDMNFE>,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.INDELAJPFGA)
    pub INDELAJPFGA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.ACPOKBKHNHE)
    pub ACPOKBKHNHE: u32,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.HEKDEHADKAO)
    pub HEKDEHADKAO: ::std::vec::Vec<super::ALDDPHFCMGG::ALDDPHFCMGG>,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.MFHMICGELNB)
    pub MFHMICGELNB: ::std::string::String,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.EKOBDMKFJID)
    pub EKOBDMKFJID: u32,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.FHHDOAIEMAP)
    pub FHHDOAIEMAP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.GKHCJGBKILE)
    pub GKHCJGBKILE: u32,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.EPEFOIBMKEC)
    pub EPEFOIBMKEC: ::protobuf::MessageField<super::IMLDMJECKLG::IMLDMJECKLG>,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.GOJHHBLMAEB)
    pub GOJHHBLMAEB: u32,
    // @@protoc_insertion_point(field:SceneCastSkillCsReq.HKJCOIOHFKP)
    pub HKJCOIOHFKP: ::std::vec::Vec<::protobuf::EnumOrUnknown<super::HGIOOANGAAJ::HGIOOANGAAJ>>,
    // special fields
    // @@protoc_insertion_point(special_field:SceneCastSkillCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SceneCastSkillCsReq {
    fn default() -> &'a SceneCastSkillCsReq {
        <SceneCastSkillCsReq as ::protobuf::Message>::default_instance()
    }
}

impl SceneCastSkillCsReq {
    pub fn new() -> SceneCastSkillCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GGDJHGBNDFO",
            |m: &SceneCastSkillCsReq| { &m.GGDJHGBNDFO },
            |m: &mut SceneCastSkillCsReq| { &mut m.GGDJHGBNDFO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "INDELAJPFGA",
            |m: &SceneCastSkillCsReq| { &m.INDELAJPFGA },
            |m: &mut SceneCastSkillCsReq| { &mut m.INDELAJPFGA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ACPOKBKHNHE",
            |m: &SceneCastSkillCsReq| { &m.ACPOKBKHNHE },
            |m: &mut SceneCastSkillCsReq| { &mut m.ACPOKBKHNHE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HEKDEHADKAO",
            |m: &SceneCastSkillCsReq| { &m.HEKDEHADKAO },
            |m: &mut SceneCastSkillCsReq| { &mut m.HEKDEHADKAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MFHMICGELNB",
            |m: &SceneCastSkillCsReq| { &m.MFHMICGELNB },
            |m: &mut SceneCastSkillCsReq| { &mut m.MFHMICGELNB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EKOBDMKFJID",
            |m: &SceneCastSkillCsReq| { &m.EKOBDMKFJID },
            |m: &mut SceneCastSkillCsReq| { &mut m.EKOBDMKFJID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FHHDOAIEMAP",
            |m: &SceneCastSkillCsReq| { &m.FHHDOAIEMAP },
            |m: &mut SceneCastSkillCsReq| { &mut m.FHHDOAIEMAP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GKHCJGBKILE",
            |m: &SceneCastSkillCsReq| { &m.GKHCJGBKILE },
            |m: &mut SceneCastSkillCsReq| { &mut m.GKHCJGBKILE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IMLDMJECKLG::IMLDMJECKLG>(
            "EPEFOIBMKEC",
            |m: &SceneCastSkillCsReq| { &m.EPEFOIBMKEC },
            |m: &mut SceneCastSkillCsReq| { &mut m.EPEFOIBMKEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GOJHHBLMAEB",
            |m: &SceneCastSkillCsReq| { &m.GOJHHBLMAEB },
            |m: &mut SceneCastSkillCsReq| { &mut m.GOJHHBLMAEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HKJCOIOHFKP",
            |m: &SceneCastSkillCsReq| { &m.HKJCOIOHFKP },
            |m: &mut SceneCastSkillCsReq| { &mut m.HKJCOIOHFKP },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SceneCastSkillCsReq>(
            "SceneCastSkillCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SceneCastSkillCsReq {
    const NAME: &'static str = "SceneCastSkillCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    self.GGDJHGBNDFO.push(is.read_message()?);
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.INDELAJPFGA)?;
                },
                96 => {
                    self.INDELAJPFGA.push(is.read_uint32()?);
                },
                32 => {
                    self.ACPOKBKHNHE = is.read_uint32()?;
                },
                74 => {
                    self.HEKDEHADKAO.push(is.read_message()?);
                },
                122 => {
                    self.MFHMICGELNB = is.read_string()?;
                },
                104 => {
                    self.EKOBDMKFJID = is.read_uint32()?;
                },
                114 => {
                    is.read_repeated_packed_uint32_into(&mut self.FHHDOAIEMAP)?;
                },
                112 => {
                    self.FHHDOAIEMAP.push(is.read_uint32()?);
                },
                24 => {
                    self.GKHCJGBKILE = is.read_uint32()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EPEFOIBMKEC)?;
                },
                88 => {
                    self.GOJHHBLMAEB = is.read_uint32()?;
                },
                56 => {
                    self.HKJCOIOHFKP.push(is.read_enum_or_unknown()?);
                },
                58 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.HKJCOIOHFKP)?
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.GGDJHGBNDFO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.INDELAJPFGA {
            my_size += ::protobuf::rt::uint32_size(12, *value);
        };
        if self.ACPOKBKHNHE != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.ACPOKBKHNHE);
        }
        for value in &self.HEKDEHADKAO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.MFHMICGELNB.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.MFHMICGELNB);
        }
        if self.EKOBDMKFJID != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.EKOBDMKFJID);
        }
        for value in &self.FHHDOAIEMAP {
            my_size += ::protobuf::rt::uint32_size(14, *value);
        };
        if self.GKHCJGBKILE != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.GKHCJGBKILE);
        }
        if let Some(v) = self.EPEFOIBMKEC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.GOJHHBLMAEB != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.GOJHHBLMAEB);
        }
        for value in &self.HKJCOIOHFKP {
            my_size += ::protobuf::rt::int32_size(7, value.value());
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.GGDJHGBNDFO {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.INDELAJPFGA {
            os.write_uint32(12, *v)?;
        };
        if self.ACPOKBKHNHE != 0 {
            os.write_uint32(4, self.ACPOKBKHNHE)?;
        }
        for v in &self.HEKDEHADKAO {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if !self.MFHMICGELNB.is_empty() {
            os.write_string(15, &self.MFHMICGELNB)?;
        }
        if self.EKOBDMKFJID != 0 {
            os.write_uint32(13, self.EKOBDMKFJID)?;
        }
        for v in &self.FHHDOAIEMAP {
            os.write_uint32(14, *v)?;
        };
        if self.GKHCJGBKILE != 0 {
            os.write_uint32(3, self.GKHCJGBKILE)?;
        }
        if let Some(v) = self.EPEFOIBMKEC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.GOJHHBLMAEB != 0 {
            os.write_uint32(11, self.GOJHHBLMAEB)?;
        }
        for v in &self.HKJCOIOHFKP {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(v))?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SceneCastSkillCsReq {
        SceneCastSkillCsReq::new()
    }

    fn clear(&mut self) {
        self.GGDJHGBNDFO.clear();
        self.INDELAJPFGA.clear();
        self.ACPOKBKHNHE = 0;
        self.HEKDEHADKAO.clear();
        self.MFHMICGELNB.clear();
        self.EKOBDMKFJID = 0;
        self.FHHDOAIEMAP.clear();
        self.GKHCJGBKILE = 0;
        self.EPEFOIBMKEC.clear();
        self.GOJHHBLMAEB = 0;
        self.HKJCOIOHFKP.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SceneCastSkillCsReq {
        static instance: SceneCastSkillCsReq = SceneCastSkillCsReq {
            GGDJHGBNDFO: ::std::vec::Vec::new(),
            INDELAJPFGA: ::std::vec::Vec::new(),
            ACPOKBKHNHE: 0,
            HEKDEHADKAO: ::std::vec::Vec::new(),
            MFHMICGELNB: ::std::string::String::new(),
            EKOBDMKFJID: 0,
            FHHDOAIEMAP: ::std::vec::Vec::new(),
            GKHCJGBKILE: 0,
            EPEFOIBMKEC: ::protobuf::MessageField::none(),
            GOJHHBLMAEB: 0,
            HKJCOIOHFKP: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SceneCastSkillCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SceneCastSkillCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SceneCastSkillCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SceneCastSkillCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19SceneCastSkillCsReq.proto\x1a\x11ALDDPHFCMGG.proto\x1a\x11FCNPKHDM\
    NFE.proto\x1a\x11HGIOOANGAAJ.proto\x1a\x11IMLDMJECKLG.proto\"\xc3\x03\n\
    \x13SceneCastSkillCsReq\x12.\n\x0bGGDJHGBNDFO\x18\x08\x20\x03(\x0b2\x0c.\
    FCNPKHDMNFER\x0bGGDJHGBNDFO\x12\x20\n\x0bINDELAJPFGA\x18\x0c\x20\x03(\rR\
    \x0bINDELAJPFGA\x12\x20\n\x0bACPOKBKHNHE\x18\x04\x20\x01(\rR\x0bACPOKBKH\
    NHE\x12.\n\x0bHEKDEHADKAO\x18\t\x20\x03(\x0b2\x0c.ALDDPHFCMGGR\x0bHEKDEH\
    ADKAO\x12\x20\n\x0bMFHMICGELNB\x18\x0f\x20\x01(\tR\x0bMFHMICGELNB\x12\
    \x20\n\x0bEKOBDMKFJID\x18\r\x20\x01(\rR\x0bEKOBDMKFJID\x12\x20\n\x0bFHHD\
    OAIEMAP\x18\x0e\x20\x03(\rR\x0bFHHDOAIEMAP\x12\x20\n\x0bGKHCJGBKILE\x18\
    \x03\x20\x01(\rR\x0bGKHCJGBKILE\x12.\n\x0bEPEFOIBMKEC\x18\n\x20\x01(\x0b\
    2\x0c.IMLDMJECKLGR\x0bEPEFOIBMKEC\x12\x20\n\x0bGOJHHBLMAEB\x18\x0b\x20\
    \x01(\rR\x0bGOJHHBLMAEB\x12.\n\x0bHKJCOIOHFKP\x18\x07\x20\x03(\x0e2\x0c.\
    HGIOOANGAAJR\x0bHKJCOIOHFKPb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::ALDDPHFCMGG::file_descriptor().clone());
            deps.push(super::FCNPKHDMNFE::file_descriptor().clone());
            deps.push(super::HGIOOANGAAJ::file_descriptor().clone());
            deps.push(super::IMLDMJECKLG::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SceneCastSkillCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
