// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LCEELLAFEIN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LCEELLAFEIN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LCEELLAFEIN {
    // message fields
    // @@protoc_insertion_point(field:LCEELLAFEIN.CDCNHLEAALE)
    pub CDCNHLEAALE: u32,
    // @@protoc_insertion_point(field:LCEELLAFEIN.HNHCLCBJAIM)
    pub HNHCLCBJAIM: ::std::vec::Vec<super::PEOCNLLHONM::PEOCNLLHONM>,
    // @@protoc_insertion_point(field:LCEELLAFEIN.LJACOPFIADN)
    pub LJACOPFIADN: u32,
    // @@protoc_insertion_point(field:LCEELLAFEIN.JGJHODGHEJJ)
    pub JGJHODGHEJJ: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:LCEELLAFEIN.PEHEHBOAFJF)
    pub PEHEHBOAFJF: u32,
    // @@protoc_insertion_point(field:LCEELLAFEIN.MPGCHEJLFEG)
    pub MPGCHEJLFEG: u32,
    // @@protoc_insertion_point(field:LCEELLAFEIN.APAPIPMOGGC)
    pub APAPIPMOGGC: u32,
    // @@protoc_insertion_point(field:LCEELLAFEIN.BDMNAPIFCIM)
    pub BDMNAPIFCIM: u32,
    // @@protoc_insertion_point(field:LCEELLAFEIN.GAFNMAHJNBP)
    pub GAFNMAHJNBP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:LCEELLAFEIN.EPPOFNBMOHO)
    pub EPPOFNBMOHO: ::std::vec::Vec<super::PMEDJIKIJMJ::PMEDJIKIJMJ>,
    // special fields
    // @@protoc_insertion_point(special_field:LCEELLAFEIN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LCEELLAFEIN {
    fn default() -> &'a LCEELLAFEIN {
        <LCEELLAFEIN as ::protobuf::Message>::default_instance()
    }
}

impl LCEELLAFEIN {
    pub fn new() -> LCEELLAFEIN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CDCNHLEAALE",
            |m: &LCEELLAFEIN| { &m.CDCNHLEAALE },
            |m: &mut LCEELLAFEIN| { &mut m.CDCNHLEAALE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HNHCLCBJAIM",
            |m: &LCEELLAFEIN| { &m.HNHCLCBJAIM },
            |m: &mut LCEELLAFEIN| { &mut m.HNHCLCBJAIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LJACOPFIADN",
            |m: &LCEELLAFEIN| { &m.LJACOPFIADN },
            |m: &mut LCEELLAFEIN| { &mut m.LJACOPFIADN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JGJHODGHEJJ",
            |m: &LCEELLAFEIN| { &m.JGJHODGHEJJ },
            |m: &mut LCEELLAFEIN| { &mut m.JGJHODGHEJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PEHEHBOAFJF",
            |m: &LCEELLAFEIN| { &m.PEHEHBOAFJF },
            |m: &mut LCEELLAFEIN| { &mut m.PEHEHBOAFJF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPGCHEJLFEG",
            |m: &LCEELLAFEIN| { &m.MPGCHEJLFEG },
            |m: &mut LCEELLAFEIN| { &mut m.MPGCHEJLFEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "APAPIPMOGGC",
            |m: &LCEELLAFEIN| { &m.APAPIPMOGGC },
            |m: &mut LCEELLAFEIN| { &mut m.APAPIPMOGGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BDMNAPIFCIM",
            |m: &LCEELLAFEIN| { &m.BDMNAPIFCIM },
            |m: &mut LCEELLAFEIN| { &mut m.BDMNAPIFCIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GAFNMAHJNBP",
            |m: &LCEELLAFEIN| { &m.GAFNMAHJNBP },
            |m: &mut LCEELLAFEIN| { &mut m.GAFNMAHJNBP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EPPOFNBMOHO",
            |m: &LCEELLAFEIN| { &m.EPPOFNBMOHO },
            |m: &mut LCEELLAFEIN| { &mut m.EPPOFNBMOHO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LCEELLAFEIN>(
            "LCEELLAFEIN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LCEELLAFEIN {
    const NAME: &'static str = "LCEELLAFEIN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.CDCNHLEAALE = is.read_uint32()?;
                },
                98 => {
                    self.HNHCLCBJAIM.push(is.read_message()?);
                },
                48 => {
                    self.LJACOPFIADN = is.read_uint32()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.JGJHODGHEJJ)?;
                },
                64 => {
                    self.JGJHODGHEJJ.push(is.read_uint32()?);
                },
                24 => {
                    self.PEHEHBOAFJF = is.read_uint32()?;
                },
                104 => {
                    self.MPGCHEJLFEG = is.read_uint32()?;
                },
                80 => {
                    self.APAPIPMOGGC = is.read_uint32()?;
                },
                56 => {
                    self.BDMNAPIFCIM = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.GAFNMAHJNBP)?;
                },
                72 => {
                    self.GAFNMAHJNBP.push(is.read_uint32()?);
                },
                42 => {
                    self.EPPOFNBMOHO.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CDCNHLEAALE != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.CDCNHLEAALE);
        }
        for value in &self.HNHCLCBJAIM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.LJACOPFIADN != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.LJACOPFIADN);
        }
        for value in &self.JGJHODGHEJJ {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if self.PEHEHBOAFJF != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.PEHEHBOAFJF);
        }
        if self.MPGCHEJLFEG != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.MPGCHEJLFEG);
        }
        if self.APAPIPMOGGC != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.APAPIPMOGGC);
        }
        if self.BDMNAPIFCIM != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.BDMNAPIFCIM);
        }
        for value in &self.GAFNMAHJNBP {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        for value in &self.EPPOFNBMOHO {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CDCNHLEAALE != 0 {
            os.write_uint32(14, self.CDCNHLEAALE)?;
        }
        for v in &self.HNHCLCBJAIM {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if self.LJACOPFIADN != 0 {
            os.write_uint32(6, self.LJACOPFIADN)?;
        }
        for v in &self.JGJHODGHEJJ {
            os.write_uint32(8, *v)?;
        };
        if self.PEHEHBOAFJF != 0 {
            os.write_uint32(3, self.PEHEHBOAFJF)?;
        }
        if self.MPGCHEJLFEG != 0 {
            os.write_uint32(13, self.MPGCHEJLFEG)?;
        }
        if self.APAPIPMOGGC != 0 {
            os.write_uint32(10, self.APAPIPMOGGC)?;
        }
        if self.BDMNAPIFCIM != 0 {
            os.write_uint32(7, self.BDMNAPIFCIM)?;
        }
        for v in &self.GAFNMAHJNBP {
            os.write_uint32(9, *v)?;
        };
        for v in &self.EPPOFNBMOHO {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LCEELLAFEIN {
        LCEELLAFEIN::new()
    }

    fn clear(&mut self) {
        self.CDCNHLEAALE = 0;
        self.HNHCLCBJAIM.clear();
        self.LJACOPFIADN = 0;
        self.JGJHODGHEJJ.clear();
        self.PEHEHBOAFJF = 0;
        self.MPGCHEJLFEG = 0;
        self.APAPIPMOGGC = 0;
        self.BDMNAPIFCIM = 0;
        self.GAFNMAHJNBP.clear();
        self.EPPOFNBMOHO.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LCEELLAFEIN {
        static instance: LCEELLAFEIN = LCEELLAFEIN {
            CDCNHLEAALE: 0,
            HNHCLCBJAIM: ::std::vec::Vec::new(),
            LJACOPFIADN: 0,
            JGJHODGHEJJ: ::std::vec::Vec::new(),
            PEHEHBOAFJF: 0,
            MPGCHEJLFEG: 0,
            APAPIPMOGGC: 0,
            BDMNAPIFCIM: 0,
            GAFNMAHJNBP: ::std::vec::Vec::new(),
            EPPOFNBMOHO: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LCEELLAFEIN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LCEELLAFEIN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LCEELLAFEIN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LCEELLAFEIN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LCEELLAFEIN.proto\x1a\x11PEOCNLLHONM.proto\x1a\x11PMEDJIKIJMJ.prot\
    o\"\xfd\x02\n\x0bLCEELLAFEIN\x12\x20\n\x0bCDCNHLEAALE\x18\x0e\x20\x01(\r\
    R\x0bCDCNHLEAALE\x12.\n\x0bHNHCLCBJAIM\x18\x0c\x20\x03(\x0b2\x0c.PEOCNLL\
    HONMR\x0bHNHCLCBJAIM\x12\x20\n\x0bLJACOPFIADN\x18\x06\x20\x01(\rR\x0bLJA\
    COPFIADN\x12\x20\n\x0bJGJHODGHEJJ\x18\x08\x20\x03(\rR\x0bJGJHODGHEJJ\x12\
    \x20\n\x0bPEHEHBOAFJF\x18\x03\x20\x01(\rR\x0bPEHEHBOAFJF\x12\x20\n\x0bMP\
    GCHEJLFEG\x18\r\x20\x01(\rR\x0bMPGCHEJLFEG\x12\x20\n\x0bAPAPIPMOGGC\x18\
    \n\x20\x01(\rR\x0bAPAPIPMOGGC\x12\x20\n\x0bBDMNAPIFCIM\x18\x07\x20\x01(\
    \rR\x0bBDMNAPIFCIM\x12\x20\n\x0bGAFNMAHJNBP\x18\t\x20\x03(\rR\x0bGAFNMAH\
    JNBP\x12.\n\x0bEPPOFNBMOHO\x18\x05\x20\x03(\x0b2\x0c.PMEDJIKIJMJR\x0bEPP\
    OFNBMOHOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::PEOCNLLHONM::file_descriptor().clone());
            deps.push(super::PMEDJIKIJMJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LCEELLAFEIN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
