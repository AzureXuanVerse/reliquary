// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdDailyActiveType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdDailyActiveType)
pub enum CmdDailyActiveType {
    // @@protoc_insertion_point(enum_value:CmdDailyActiveType.CmdDailyActiveTypeNone)
    CmdDailyActiveTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdDailyActiveType.CmdTakeApRewardCsReq)
    CmdTakeApRewardCsReq = 3336,
    // @@protoc_insertion_point(enum_value:CmdDailyActiveType.CmdDailyActiveInfoNotify)
    CmdDailyActiveInfoNotify = 3367,
    // @@protoc_insertion_point(enum_value:CmdDailyActiveType.CmdTakeApRewardScRsp)
    CmdTakeApRewardScRsp = 3395,
    // @@protoc_insertion_point(enum_value:CmdDailyActiveType.CmdTakeAllApRewardScRsp)
    CmdTakeAllApRewardScRsp = 3352,
    // @@protoc_insertion_point(enum_value:CmdDailyActiveType.CmdTakeAllApRewardCsReq)
    CmdTakeAllApRewardCsReq = 3328,
    // @@protoc_insertion_point(enum_value:CmdDailyActiveType.CmdGetDailyActiveInfoCsReq)
    CmdGetDailyActiveInfoCsReq = 3384,
    // @@protoc_insertion_point(enum_value:CmdDailyActiveType.CmdGetDailyActiveInfoScRsp)
    CmdGetDailyActiveInfoScRsp = 3327,
}

impl ::protobuf::Enum for CmdDailyActiveType {
    const NAME: &'static str = "CmdDailyActiveType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdDailyActiveType> {
        match value {
            0 => ::std::option::Option::Some(CmdDailyActiveType::CmdDailyActiveTypeNone),
            3336 => ::std::option::Option::Some(CmdDailyActiveType::CmdTakeApRewardCsReq),
            3367 => ::std::option::Option::Some(CmdDailyActiveType::CmdDailyActiveInfoNotify),
            3395 => ::std::option::Option::Some(CmdDailyActiveType::CmdTakeApRewardScRsp),
            3352 => ::std::option::Option::Some(CmdDailyActiveType::CmdTakeAllApRewardScRsp),
            3328 => ::std::option::Option::Some(CmdDailyActiveType::CmdTakeAllApRewardCsReq),
            3384 => ::std::option::Option::Some(CmdDailyActiveType::CmdGetDailyActiveInfoCsReq),
            3327 => ::std::option::Option::Some(CmdDailyActiveType::CmdGetDailyActiveInfoScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdDailyActiveType> {
        match str {
            "CmdDailyActiveTypeNone" => ::std::option::Option::Some(CmdDailyActiveType::CmdDailyActiveTypeNone),
            "CmdTakeApRewardCsReq" => ::std::option::Option::Some(CmdDailyActiveType::CmdTakeApRewardCsReq),
            "CmdDailyActiveInfoNotify" => ::std::option::Option::Some(CmdDailyActiveType::CmdDailyActiveInfoNotify),
            "CmdTakeApRewardScRsp" => ::std::option::Option::Some(CmdDailyActiveType::CmdTakeApRewardScRsp),
            "CmdTakeAllApRewardScRsp" => ::std::option::Option::Some(CmdDailyActiveType::CmdTakeAllApRewardScRsp),
            "CmdTakeAllApRewardCsReq" => ::std::option::Option::Some(CmdDailyActiveType::CmdTakeAllApRewardCsReq),
            "CmdGetDailyActiveInfoCsReq" => ::std::option::Option::Some(CmdDailyActiveType::CmdGetDailyActiveInfoCsReq),
            "CmdGetDailyActiveInfoScRsp" => ::std::option::Option::Some(CmdDailyActiveType::CmdGetDailyActiveInfoScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdDailyActiveType] = &[
        CmdDailyActiveType::CmdDailyActiveTypeNone,
        CmdDailyActiveType::CmdTakeApRewardCsReq,
        CmdDailyActiveType::CmdDailyActiveInfoNotify,
        CmdDailyActiveType::CmdTakeApRewardScRsp,
        CmdDailyActiveType::CmdTakeAllApRewardScRsp,
        CmdDailyActiveType::CmdTakeAllApRewardCsReq,
        CmdDailyActiveType::CmdGetDailyActiveInfoCsReq,
        CmdDailyActiveType::CmdGetDailyActiveInfoScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdDailyActiveType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdDailyActiveType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdDailyActiveType::CmdDailyActiveTypeNone => 0,
            CmdDailyActiveType::CmdTakeApRewardCsReq => 1,
            CmdDailyActiveType::CmdDailyActiveInfoNotify => 2,
            CmdDailyActiveType::CmdTakeApRewardScRsp => 3,
            CmdDailyActiveType::CmdTakeAllApRewardScRsp => 4,
            CmdDailyActiveType::CmdTakeAllApRewardCsReq => 5,
            CmdDailyActiveType::CmdGetDailyActiveInfoCsReq => 6,
            CmdDailyActiveType::CmdGetDailyActiveInfoScRsp => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdDailyActiveType {
    fn default() -> Self {
        CmdDailyActiveType::CmdDailyActiveTypeNone
    }
}

impl CmdDailyActiveType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdDailyActiveType>("CmdDailyActiveType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18CmdDailyActiveType.proto*\x83\x02\n\x12CmdDailyActiveType\x12\x1a\
    \n\x16CmdDailyActiveTypeNone\x10\0\x12\x19\n\x14CmdTakeApRewardCsReq\x10\
    \x88\x1a\x12\x1d\n\x18CmdDailyActiveInfoNotify\x10\xa7\x1a\x12\x19\n\x14\
    CmdTakeApRewardScRsp\x10\xc3\x1a\x12\x1c\n\x17CmdTakeAllApRewardScRsp\
    \x10\x98\x1a\x12\x1c\n\x17CmdTakeAllApRewardCsReq\x10\x80\x1a\x12\x1f\n\
    \x1aCmdGetDailyActiveInfoCsReq\x10\xb8\x1a\x12\x1f\n\x1aCmdGetDailyActiv\
    eInfoScRsp\x10\xff\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdDailyActiveType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
