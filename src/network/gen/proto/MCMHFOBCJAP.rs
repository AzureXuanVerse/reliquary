// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MCMHFOBCJAP.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MCMHFOBCJAP)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MCMHFOBCJAP {
    // message fields
    // @@protoc_insertion_point(field:MCMHFOBCJAP.GEPFLMFCHBI)
    pub GEPFLMFCHBI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MCMHFOBCJAP.JDNOOCLHPLE)
    pub JDNOOCLHPLE: ::protobuf::MessageField<super::PFGJIPKOOPJ::PFGJIPKOOPJ>,
    // @@protoc_insertion_point(field:MCMHFOBCJAP.BAJMOAELMHO)
    pub BAJMOAELMHO: u32,
    // @@protoc_insertion_point(field:MCMHFOBCJAP.OMMBIAFIGMB)
    pub OMMBIAFIGMB: ::protobuf::MessageField<super::NDFCFDPNEJB::NDFCFDPNEJB>,
    // @@protoc_insertion_point(field:MCMHFOBCJAP.NEIHHOIMFJH)
    pub NEIHHOIMFJH: u32,
    // @@protoc_insertion_point(field:MCMHFOBCJAP.GDKHOLCEGFC)
    pub GDKHOLCEGFC: ::protobuf::EnumOrUnknown<super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus>,
    // @@protoc_insertion_point(field:MCMHFOBCJAP.OFGEFDEPNCM)
    pub OFGEFDEPNCM: ::std::vec::Vec<super::BDDBMHELCMO::BDDBMHELCMO>,
    // special fields
    // @@protoc_insertion_point(special_field:MCMHFOBCJAP.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MCMHFOBCJAP {
    fn default() -> &'a MCMHFOBCJAP {
        <MCMHFOBCJAP as ::protobuf::Message>::default_instance()
    }
}

impl MCMHFOBCJAP {
    pub fn new() -> MCMHFOBCJAP {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GEPFLMFCHBI",
            |m: &MCMHFOBCJAP| { &m.GEPFLMFCHBI },
            |m: &mut MCMHFOBCJAP| { &mut m.GEPFLMFCHBI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PFGJIPKOOPJ::PFGJIPKOOPJ>(
            "JDNOOCLHPLE",
            |m: &MCMHFOBCJAP| { &m.JDNOOCLHPLE },
            |m: &mut MCMHFOBCJAP| { &mut m.JDNOOCLHPLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BAJMOAELMHO",
            |m: &MCMHFOBCJAP| { &m.BAJMOAELMHO },
            |m: &mut MCMHFOBCJAP| { &mut m.BAJMOAELMHO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NDFCFDPNEJB::NDFCFDPNEJB>(
            "OMMBIAFIGMB",
            |m: &MCMHFOBCJAP| { &m.OMMBIAFIGMB },
            |m: &mut MCMHFOBCJAP| { &mut m.OMMBIAFIGMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NEIHHOIMFJH",
            |m: &MCMHFOBCJAP| { &m.NEIHHOIMFJH },
            |m: &mut MCMHFOBCJAP| { &mut m.NEIHHOIMFJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GDKHOLCEGFC",
            |m: &MCMHFOBCJAP| { &m.GDKHOLCEGFC },
            |m: &mut MCMHFOBCJAP| { &mut m.GDKHOLCEGFC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OFGEFDEPNCM",
            |m: &MCMHFOBCJAP| { &m.OFGEFDEPNCM },
            |m: &mut MCMHFOBCJAP| { &mut m.OFGEFDEPNCM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MCMHFOBCJAP>(
            "MCMHFOBCJAP",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MCMHFOBCJAP {
    const NAME: &'static str = "MCMHFOBCJAP";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.GEPFLMFCHBI)?;
                },
                64 => {
                    self.GEPFLMFCHBI.push(is.read_uint32()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JDNOOCLHPLE)?;
                },
                96 => {
                    self.BAJMOAELMHO = is.read_uint32()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OMMBIAFIGMB)?;
                },
                8 => {
                    self.NEIHHOIMFJH = is.read_uint32()?;
                },
                32 => {
                    self.GDKHOLCEGFC = is.read_enum_or_unknown()?;
                },
                106 => {
                    self.OFGEFDEPNCM.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.GEPFLMFCHBI {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if let Some(v) = self.JDNOOCLHPLE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.BAJMOAELMHO != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.BAJMOAELMHO);
        }
        if let Some(v) = self.OMMBIAFIGMB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.NEIHHOIMFJH != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.NEIHHOIMFJH);
        }
        if self.GDKHOLCEGFC != ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE) {
            my_size += ::protobuf::rt::int32_size(4, self.GDKHOLCEGFC.value());
        }
        for value in &self.OFGEFDEPNCM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.GEPFLMFCHBI {
            os.write_uint32(8, *v)?;
        };
        if let Some(v) = self.JDNOOCLHPLE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.BAJMOAELMHO != 0 {
            os.write_uint32(12, self.BAJMOAELMHO)?;
        }
        if let Some(v) = self.OMMBIAFIGMB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.NEIHHOIMFJH != 0 {
            os.write_uint32(1, self.NEIHHOIMFJH)?;
        }
        if self.GDKHOLCEGFC != ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.GDKHOLCEGFC))?;
        }
        for v in &self.OFGEFDEPNCM {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MCMHFOBCJAP {
        MCMHFOBCJAP::new()
    }

    fn clear(&mut self) {
        self.GEPFLMFCHBI.clear();
        self.JDNOOCLHPLE.clear();
        self.BAJMOAELMHO = 0;
        self.OMMBIAFIGMB.clear();
        self.NEIHHOIMFJH = 0;
        self.GDKHOLCEGFC = ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE);
        self.OFGEFDEPNCM.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MCMHFOBCJAP {
        static instance: MCMHFOBCJAP = MCMHFOBCJAP {
            GEPFLMFCHBI: ::std::vec::Vec::new(),
            JDNOOCLHPLE: ::protobuf::MessageField::none(),
            BAJMOAELMHO: 0,
            OMMBIAFIGMB: ::protobuf::MessageField::none(),
            NEIHHOIMFJH: 0,
            GDKHOLCEGFC: ::protobuf::EnumOrUnknown::from_i32(0),
            OFGEFDEPNCM: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MCMHFOBCJAP {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MCMHFOBCJAP").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MCMHFOBCJAP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MCMHFOBCJAP {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MCMHFOBCJAP.proto\x1a\x11BDDBMHELCMO.proto\x1a\x1fChessRogueBoardC\
    ellStatus.proto\x1a\x11NDFCFDPNEJB.proto\x1a\x11PFGJIPKOOPJ.proto\"\xc1\
    \x02\n\x0bMCMHFOBCJAP\x12\x20\n\x0bGEPFLMFCHBI\x18\x08\x20\x03(\rR\x0bGE\
    PFLMFCHBI\x12.\n\x0bJDNOOCLHPLE\x18\n\x20\x01(\x0b2\x0c.PFGJIPKOOPJR\x0b\
    JDNOOCLHPLE\x12\x20\n\x0bBAJMOAELMHO\x18\x0c\x20\x01(\rR\x0bBAJMOAELMHO\
    \x12.\n\x0bOMMBIAFIGMB\x18\x0b\x20\x01(\x0b2\x0c.NDFCFDPNEJBR\x0bOMMBIAF\
    IGMB\x12\x20\n\x0bNEIHHOIMFJH\x18\x01\x20\x01(\rR\x0bNEIHHOIMFJH\x12<\n\
    \x0bGDKHOLCEGFC\x18\x04\x20\x01(\x0e2\x1a.ChessRogueBoardCellStatusR\x0b\
    GDKHOLCEGFC\x12.\n\x0bOFGEFDEPNCM\x18\r\x20\x03(\x0b2\x0c.BDDBMHELCMOR\
    \x0bOFGEFDEPNCMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::BDDBMHELCMO::file_descriptor().clone());
            deps.push(super::ChessRogueBoardCellStatus::file_descriptor().clone());
            deps.push(super::NDFCFDPNEJB::file_descriptor().clone());
            deps.push(super::PFGJIPKOOPJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MCMHFOBCJAP::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
