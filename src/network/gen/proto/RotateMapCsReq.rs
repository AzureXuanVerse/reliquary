// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RotateMapCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RotateMapCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RotateMapCsReq {
    // message fields
    // @@protoc_insertion_point(field:RotateMapCsReq.unk_int)
    pub unk_int: u32,
    // @@protoc_insertion_point(field:RotateMapCsReq.motion)
    pub motion: ::protobuf::MessageField<super::MotionInfo::MotionInfo>,
    // @@protoc_insertion_point(field:RotateMapCsReq.rogue_map)
    pub rogue_map: ::protobuf::MessageField<rotate_map_cs_req::LHBLGBPKEAL>,
    // @@protoc_insertion_point(field:RotateMapCsReq.group_id)
    pub group_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:RotateMapCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RotateMapCsReq {
    fn default() -> &'a RotateMapCsReq {
        <RotateMapCsReq as ::protobuf::Message>::default_instance()
    }
}

impl RotateMapCsReq {
    pub fn new() -> RotateMapCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unk_int",
            |m: &RotateMapCsReq| { &m.unk_int },
            |m: &mut RotateMapCsReq| { &mut m.unk_int },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MotionInfo::MotionInfo>(
            "motion",
            |m: &RotateMapCsReq| { &m.motion },
            |m: &mut RotateMapCsReq| { &mut m.motion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, rotate_map_cs_req::LHBLGBPKEAL>(
            "rogue_map",
            |m: &RotateMapCsReq| { &m.rogue_map },
            |m: &mut RotateMapCsReq| { &mut m.rogue_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &RotateMapCsReq| { &m.group_id },
            |m: &mut RotateMapCsReq| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RotateMapCsReq>(
            "RotateMapCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RotateMapCsReq {
    const NAME: &'static str = "RotateMapCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                64 => {
                    self.unk_int = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.motion)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rogue_map)?;
                },
                88 => {
                    self.group_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.unk_int != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.unk_int);
        }
        if let Some(v) = self.motion.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rogue_map.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.unk_int != 0 {
            os.write_uint32(8, self.unk_int)?;
        }
        if let Some(v) = self.motion.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.rogue_map.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.group_id != 0 {
            os.write_uint32(11, self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RotateMapCsReq {
        RotateMapCsReq::new()
    }

    fn clear(&mut self) {
        self.unk_int = 0;
        self.motion.clear();
        self.rogue_map.clear();
        self.group_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RotateMapCsReq {
        static instance: RotateMapCsReq = RotateMapCsReq {
            unk_int: 0,
            motion: ::protobuf::MessageField::none(),
            rogue_map: ::protobuf::MessageField::none(),
            group_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RotateMapCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RotateMapCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RotateMapCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RotateMapCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RotateMapCsReq`
pub mod rotate_map_cs_req {
    // @@protoc_insertion_point(message:RotateMapCsReq.ICOFBBCMENF)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ICOFBBCMENF {
        // message fields
        // @@protoc_insertion_point(field:RotateMapCsReq.ICOFBBCMENF.x)
        pub x: f32,
        // @@protoc_insertion_point(field:RotateMapCsReq.ICOFBBCMENF.FAAFKIAENEO)
        pub FAAFKIAENEO: f32,
        // @@protoc_insertion_point(field:RotateMapCsReq.ICOFBBCMENF.z)
        pub z: f32,
        // @@protoc_insertion_point(field:RotateMapCsReq.ICOFBBCMENF.y)
        pub y: f32,
        // special fields
        // @@protoc_insertion_point(special_field:RotateMapCsReq.ICOFBBCMENF.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ICOFBBCMENF {
        fn default() -> &'a ICOFBBCMENF {
            <ICOFBBCMENF as ::protobuf::Message>::default_instance()
        }
    }

    impl ICOFBBCMENF {
        pub fn new() -> ICOFBBCMENF {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "x",
                |m: &ICOFBBCMENF| { &m.x },
                |m: &mut ICOFBBCMENF| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "FAAFKIAENEO",
                |m: &ICOFBBCMENF| { &m.FAAFKIAENEO },
                |m: &mut ICOFBBCMENF| { &mut m.FAAFKIAENEO },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "z",
                |m: &ICOFBBCMENF| { &m.z },
                |m: &mut ICOFBBCMENF| { &mut m.z },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "y",
                |m: &ICOFBBCMENF| { &m.y },
                |m: &mut ICOFBBCMENF| { &mut m.y },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ICOFBBCMENF>(
                "RotateMapCsReq.ICOFBBCMENF",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ICOFBBCMENF {
        const NAME: &'static str = "ICOFBBCMENF";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    125 => {
                        self.x = is.read_float()?;
                    },
                    21 => {
                        self.FAAFKIAENEO = is.read_float()?;
                    },
                    37 => {
                        self.z = is.read_float()?;
                    },
                    29 => {
                        self.y = is.read_float()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.x != 0. {
                my_size += 1 + 4;
            }
            if self.FAAFKIAENEO != 0. {
                my_size += 1 + 4;
            }
            if self.z != 0. {
                my_size += 1 + 4;
            }
            if self.y != 0. {
                my_size += 1 + 4;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.x != 0. {
                os.write_float(15, self.x)?;
            }
            if self.FAAFKIAENEO != 0. {
                os.write_float(2, self.FAAFKIAENEO)?;
            }
            if self.z != 0. {
                os.write_float(4, self.z)?;
            }
            if self.y != 0. {
                os.write_float(3, self.y)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ICOFBBCMENF {
            ICOFBBCMENF::new()
        }

        fn clear(&mut self) {
            self.x = 0.;
            self.FAAFKIAENEO = 0.;
            self.z = 0.;
            self.y = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ICOFBBCMENF {
            static instance: ICOFBBCMENF = ICOFBBCMENF {
                x: 0.,
                FAAFKIAENEO: 0.,
                z: 0.,
                y: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ICOFBBCMENF {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("RotateMapCsReq.ICOFBBCMENF").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ICOFBBCMENF {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ICOFBBCMENF {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:RotateMapCsReq.LHBLGBPKEAL)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LHBLGBPKEAL {
        // message fields
        // @@protoc_insertion_point(field:RotateMapCsReq.LHBLGBPKEAL.IENLJAFIBOL)
        pub IENLJAFIBOL: ::protobuf::MessageField<super::super::Vector::Vector>,
        // @@protoc_insertion_point(field:RotateMapCsReq.LHBLGBPKEAL.JBCABOABIDI)
        pub JBCABOABIDI: ::protobuf::MessageField<ICOFBBCMENF>,
        // special fields
        // @@protoc_insertion_point(special_field:RotateMapCsReq.LHBLGBPKEAL.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LHBLGBPKEAL {
        fn default() -> &'a LHBLGBPKEAL {
            <LHBLGBPKEAL as ::protobuf::Message>::default_instance()
        }
    }

    impl LHBLGBPKEAL {
        pub fn new() -> LHBLGBPKEAL {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Vector::Vector>(
                "IENLJAFIBOL",
                |m: &LHBLGBPKEAL| { &m.IENLJAFIBOL },
                |m: &mut LHBLGBPKEAL| { &mut m.IENLJAFIBOL },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ICOFBBCMENF>(
                "JBCABOABIDI",
                |m: &LHBLGBPKEAL| { &m.JBCABOABIDI },
                |m: &mut LHBLGBPKEAL| { &mut m.JBCABOABIDI },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LHBLGBPKEAL>(
                "RotateMapCsReq.LHBLGBPKEAL",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LHBLGBPKEAL {
        const NAME: &'static str = "LHBLGBPKEAL";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    122 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.IENLJAFIBOL)?;
                    },
                    74 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.JBCABOABIDI)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.IENLJAFIBOL.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.JBCABOABIDI.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.IENLJAFIBOL.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
            }
            if let Some(v) = self.JBCABOABIDI.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LHBLGBPKEAL {
            LHBLGBPKEAL::new()
        }

        fn clear(&mut self) {
            self.IENLJAFIBOL.clear();
            self.JBCABOABIDI.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LHBLGBPKEAL {
            static instance: LHBLGBPKEAL = LHBLGBPKEAL {
                IENLJAFIBOL: ::protobuf::MessageField::none(),
                JBCABOABIDI: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LHBLGBPKEAL {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("RotateMapCsReq.LHBLGBPKEAL").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LHBLGBPKEAL {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LHBLGBPKEAL {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14RotateMapCsReq.proto\x1a\x10MotionInfo.proto\x1a\x0cVector.proto\"\
    \xf7\x02\n\x0eRotateMapCsReq\x12\x17\n\x07unk_int\x18\x08\x20\x01(\rR\
    \x06unkInt\x12#\n\x06motion\x18\x02\x20\x01(\x0b2\x0b.MotionInfoR\x06mot\
    ion\x128\n\trogue_map\x18\t\x20\x01(\x0b2\x1b.RotateMapCsReq.LHBLGBPKEAL\
    R\x08rogueMap\x12\x19\n\x08group_id\x18\x0b\x20\x01(\rR\x07groupId\x1aY\
    \n\x0bICOFBBCMENF\x12\x0c\n\x01x\x18\x0f\x20\x01(\x02R\x01x\x12\x20\n\
    \x0bFAAFKIAENEO\x18\x02\x20\x01(\x02R\x0bFAAFKIAENEO\x12\x0c\n\x01z\x18\
    \x04\x20\x01(\x02R\x01z\x12\x0c\n\x01y\x18\x03\x20\x01(\x02R\x01y\x1aw\n\
    \x0bLHBLGBPKEAL\x12)\n\x0bIENLJAFIBOL\x18\x0f\x20\x01(\x0b2\x07.VectorR\
    \x0bIENLJAFIBOL\x12=\n\x0bJBCABOABIDI\x18\t\x20\x01(\x0b2\x1b.RotateMapC\
    sReq.ICOFBBCMENFR\x0bJBCABOABIDIB\x15\n\x13emu.lunarcore.protob\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::MotionInfo::file_descriptor().clone());
            deps.push(super::Vector::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(RotateMapCsReq::generated_message_descriptor_data());
            messages.push(rotate_map_cs_req::ICOFBBCMENF::generated_message_descriptor_data());
            messages.push(rotate_map_cs_req::LHBLGBPKEAL::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
