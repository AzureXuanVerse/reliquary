// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `IOOJFGPOAPG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:IOOJFGPOAPG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IOOJFGPOAPG {
    // message fields
    // @@protoc_insertion_point(field:IOOJFGPOAPG.KFGAADCAFOE)
    pub KFGAADCAFOE: u32,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.GNLDOLFGDAN)
    pub GNLDOLFGDAN: bool,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.JCIBDGDBJAL)
    pub JCIBDGDBJAL: u32,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.AGPKHOOCMPE)
    pub AGPKHOOCMPE: ::std::vec::Vec<super::ICOBJGOCLFL::ICOBJGOCLFL>,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.EMALNMLGANJ)
    pub EMALNMLGANJ: ::std::vec::Vec<super::GMJMONHDFJI::GMJMONHDFJI>,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.HBEDLLEAILC)
    pub HBEDLLEAILC: u32,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.KKEIPMOKINF)
    pub KKEIPMOKINF: ::std::vec::Vec<super::TreasureDungeonRecordData::TreasureDungeonRecordData>,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.LBFBJIOINPG)
    pub LBFBJIOINPG: u32,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.HFMJHJHGCED)
    pub HFMJHJHGCED: u32,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.LNGJKFGLHBE)
    pub LNGJKFGLHBE: u32,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.KGACBNBPMHP)
    pub KGACBNBPMHP: bool,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.DKJJFPLGNGI)
    pub DKJJFPLGNGI: bool,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.ABBGBMOFFGA)
    pub ABBGBMOFFGA: ::std::vec::Vec<super::GMJMONHDFJI::GMJMONHDFJI>,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.PIKDGNGDCCA)
    pub PIKDGNGDCCA: u32,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.HMPPFGCIFJK)
    pub HMPPFGCIFJK: u32,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.ANPNJEKLCJJ)
    pub ANPNJEKLCJJ: ::std::vec::Vec<super::PFOONLIJKKK::PFOONLIJKKK>,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.EBDDNGHLIGH)
    pub EBDDNGHLIGH: ::std::vec::Vec<super::HKCCGMPCKHK::HKCCGMPCKHK>,
    // @@protoc_insertion_point(field:IOOJFGPOAPG.NICOCPANLHC)
    pub NICOCPANLHC: ::std::vec::Vec<super::LEGLIFDBIBE::LEGLIFDBIBE>,
    // special fields
    // @@protoc_insertion_point(special_field:IOOJFGPOAPG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IOOJFGPOAPG {
    fn default() -> &'a IOOJFGPOAPG {
        <IOOJFGPOAPG as ::protobuf::Message>::default_instance()
    }
}

impl IOOJFGPOAPG {
    pub fn new() -> IOOJFGPOAPG {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(18);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KFGAADCAFOE",
            |m: &IOOJFGPOAPG| { &m.KFGAADCAFOE },
            |m: &mut IOOJFGPOAPG| { &mut m.KFGAADCAFOE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GNLDOLFGDAN",
            |m: &IOOJFGPOAPG| { &m.GNLDOLFGDAN },
            |m: &mut IOOJFGPOAPG| { &mut m.GNLDOLFGDAN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JCIBDGDBJAL",
            |m: &IOOJFGPOAPG| { &m.JCIBDGDBJAL },
            |m: &mut IOOJFGPOAPG| { &mut m.JCIBDGDBJAL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AGPKHOOCMPE",
            |m: &IOOJFGPOAPG| { &m.AGPKHOOCMPE },
            |m: &mut IOOJFGPOAPG| { &mut m.AGPKHOOCMPE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EMALNMLGANJ",
            |m: &IOOJFGPOAPG| { &m.EMALNMLGANJ },
            |m: &mut IOOJFGPOAPG| { &mut m.EMALNMLGANJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HBEDLLEAILC",
            |m: &IOOJFGPOAPG| { &m.HBEDLLEAILC },
            |m: &mut IOOJFGPOAPG| { &mut m.HBEDLLEAILC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KKEIPMOKINF",
            |m: &IOOJFGPOAPG| { &m.KKEIPMOKINF },
            |m: &mut IOOJFGPOAPG| { &mut m.KKEIPMOKINF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LBFBJIOINPG",
            |m: &IOOJFGPOAPG| { &m.LBFBJIOINPG },
            |m: &mut IOOJFGPOAPG| { &mut m.LBFBJIOINPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HFMJHJHGCED",
            |m: &IOOJFGPOAPG| { &m.HFMJHJHGCED },
            |m: &mut IOOJFGPOAPG| { &mut m.HFMJHJHGCED },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LNGJKFGLHBE",
            |m: &IOOJFGPOAPG| { &m.LNGJKFGLHBE },
            |m: &mut IOOJFGPOAPG| { &mut m.LNGJKFGLHBE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KGACBNBPMHP",
            |m: &IOOJFGPOAPG| { &m.KGACBNBPMHP },
            |m: &mut IOOJFGPOAPG| { &mut m.KGACBNBPMHP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKJJFPLGNGI",
            |m: &IOOJFGPOAPG| { &m.DKJJFPLGNGI },
            |m: &mut IOOJFGPOAPG| { &mut m.DKJJFPLGNGI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ABBGBMOFFGA",
            |m: &IOOJFGPOAPG| { &m.ABBGBMOFFGA },
            |m: &mut IOOJFGPOAPG| { &mut m.ABBGBMOFFGA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PIKDGNGDCCA",
            |m: &IOOJFGPOAPG| { &m.PIKDGNGDCCA },
            |m: &mut IOOJFGPOAPG| { &mut m.PIKDGNGDCCA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HMPPFGCIFJK",
            |m: &IOOJFGPOAPG| { &m.HMPPFGCIFJK },
            |m: &mut IOOJFGPOAPG| { &mut m.HMPPFGCIFJK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ANPNJEKLCJJ",
            |m: &IOOJFGPOAPG| { &m.ANPNJEKLCJJ },
            |m: &mut IOOJFGPOAPG| { &mut m.ANPNJEKLCJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EBDDNGHLIGH",
            |m: &IOOJFGPOAPG| { &m.EBDDNGHLIGH },
            |m: &mut IOOJFGPOAPG| { &mut m.EBDDNGHLIGH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NICOCPANLHC",
            |m: &IOOJFGPOAPG| { &m.NICOCPANLHC },
            |m: &mut IOOJFGPOAPG| { &mut m.NICOCPANLHC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IOOJFGPOAPG>(
            "IOOJFGPOAPG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IOOJFGPOAPG {
    const NAME: &'static str = "IOOJFGPOAPG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.KFGAADCAFOE = is.read_uint32()?;
                },
                3592 => {
                    self.GNLDOLFGDAN = is.read_bool()?;
                },
                3968 => {
                    self.JCIBDGDBJAL = is.read_uint32()?;
                },
                10090 => {
                    self.AGPKHOOCMPE.push(is.read_message()?);
                },
                14010 => {
                    self.EMALNMLGANJ.push(is.read_message()?);
                },
                88 => {
                    self.HBEDLLEAILC = is.read_uint32()?;
                },
                66 => {
                    self.KKEIPMOKINF.push(is.read_message()?);
                },
                72 => {
                    self.LBFBJIOINPG = is.read_uint32()?;
                },
                32 => {
                    self.HFMJHJHGCED = is.read_uint32()?;
                },
                48 => {
                    self.LNGJKFGLHBE = is.read_uint32()?;
                },
                4960 => {
                    self.KGACBNBPMHP = is.read_bool()?;
                },
                2648 => {
                    self.DKJJFPLGNGI = is.read_bool()?;
                },
                9002 => {
                    self.ABBGBMOFFGA.push(is.read_message()?);
                },
                16 => {
                    self.PIKDGNGDCCA = is.read_uint32()?;
                },
                24 => {
                    self.HMPPFGCIFJK = is.read_uint32()?;
                },
                42 => {
                    self.ANPNJEKLCJJ.push(is.read_message()?);
                },
                13618 => {
                    self.EBDDNGHLIGH.push(is.read_message()?);
                },
                3922 => {
                    self.NICOCPANLHC.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.KFGAADCAFOE != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.KFGAADCAFOE);
        }
        if self.GNLDOLFGDAN != false {
            my_size += 2 + 1;
        }
        if self.JCIBDGDBJAL != 0 {
            my_size += ::protobuf::rt::uint32_size(496, self.JCIBDGDBJAL);
        }
        for value in &self.AGPKHOOCMPE {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.EMALNMLGANJ {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.HBEDLLEAILC != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.HBEDLLEAILC);
        }
        for value in &self.KKEIPMOKINF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.LBFBJIOINPG != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.LBFBJIOINPG);
        }
        if self.HFMJHJHGCED != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.HFMJHJHGCED);
        }
        if self.LNGJKFGLHBE != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.LNGJKFGLHBE);
        }
        if self.KGACBNBPMHP != false {
            my_size += 2 + 1;
        }
        if self.DKJJFPLGNGI != false {
            my_size += 2 + 1;
        }
        for value in &self.ABBGBMOFFGA {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.PIKDGNGDCCA != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.PIKDGNGDCCA);
        }
        if self.HMPPFGCIFJK != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.HMPPFGCIFJK);
        }
        for value in &self.ANPNJEKLCJJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.EBDDNGHLIGH {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.NICOCPANLHC {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.KFGAADCAFOE != 0 {
            os.write_uint32(14, self.KFGAADCAFOE)?;
        }
        if self.GNLDOLFGDAN != false {
            os.write_bool(449, self.GNLDOLFGDAN)?;
        }
        if self.JCIBDGDBJAL != 0 {
            os.write_uint32(496, self.JCIBDGDBJAL)?;
        }
        for v in &self.AGPKHOOCMPE {
            ::protobuf::rt::write_message_field_with_cached_size(1261, v, os)?;
        };
        for v in &self.EMALNMLGANJ {
            ::protobuf::rt::write_message_field_with_cached_size(1751, v, os)?;
        };
        if self.HBEDLLEAILC != 0 {
            os.write_uint32(11, self.HBEDLLEAILC)?;
        }
        for v in &self.KKEIPMOKINF {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.LBFBJIOINPG != 0 {
            os.write_uint32(9, self.LBFBJIOINPG)?;
        }
        if self.HFMJHJHGCED != 0 {
            os.write_uint32(4, self.HFMJHJHGCED)?;
        }
        if self.LNGJKFGLHBE != 0 {
            os.write_uint32(6, self.LNGJKFGLHBE)?;
        }
        if self.KGACBNBPMHP != false {
            os.write_bool(620, self.KGACBNBPMHP)?;
        }
        if self.DKJJFPLGNGI != false {
            os.write_bool(331, self.DKJJFPLGNGI)?;
        }
        for v in &self.ABBGBMOFFGA {
            ::protobuf::rt::write_message_field_with_cached_size(1125, v, os)?;
        };
        if self.PIKDGNGDCCA != 0 {
            os.write_uint32(2, self.PIKDGNGDCCA)?;
        }
        if self.HMPPFGCIFJK != 0 {
            os.write_uint32(3, self.HMPPFGCIFJK)?;
        }
        for v in &self.ANPNJEKLCJJ {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.EBDDNGHLIGH {
            ::protobuf::rt::write_message_field_with_cached_size(1702, v, os)?;
        };
        for v in &self.NICOCPANLHC {
            ::protobuf::rt::write_message_field_with_cached_size(490, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IOOJFGPOAPG {
        IOOJFGPOAPG::new()
    }

    fn clear(&mut self) {
        self.KFGAADCAFOE = 0;
        self.GNLDOLFGDAN = false;
        self.JCIBDGDBJAL = 0;
        self.AGPKHOOCMPE.clear();
        self.EMALNMLGANJ.clear();
        self.HBEDLLEAILC = 0;
        self.KKEIPMOKINF.clear();
        self.LBFBJIOINPG = 0;
        self.HFMJHJHGCED = 0;
        self.LNGJKFGLHBE = 0;
        self.KGACBNBPMHP = false;
        self.DKJJFPLGNGI = false;
        self.ABBGBMOFFGA.clear();
        self.PIKDGNGDCCA = 0;
        self.HMPPFGCIFJK = 0;
        self.ANPNJEKLCJJ.clear();
        self.EBDDNGHLIGH.clear();
        self.NICOCPANLHC.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IOOJFGPOAPG {
        static instance: IOOJFGPOAPG = IOOJFGPOAPG {
            KFGAADCAFOE: 0,
            GNLDOLFGDAN: false,
            JCIBDGDBJAL: 0,
            AGPKHOOCMPE: ::std::vec::Vec::new(),
            EMALNMLGANJ: ::std::vec::Vec::new(),
            HBEDLLEAILC: 0,
            KKEIPMOKINF: ::std::vec::Vec::new(),
            LBFBJIOINPG: 0,
            HFMJHJHGCED: 0,
            LNGJKFGLHBE: 0,
            KGACBNBPMHP: false,
            DKJJFPLGNGI: false,
            ABBGBMOFFGA: ::std::vec::Vec::new(),
            PIKDGNGDCCA: 0,
            HMPPFGCIFJK: 0,
            ANPNJEKLCJJ: ::std::vec::Vec::new(),
            EBDDNGHLIGH: ::std::vec::Vec::new(),
            NICOCPANLHC: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IOOJFGPOAPG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IOOJFGPOAPG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IOOJFGPOAPG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IOOJFGPOAPG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11IOOJFGPOAPG.proto\x1a\x11GMJMONHDFJI.proto\x1a\x11HKCCGMPCKHK.prot\
    o\x1a\x11ICOBJGOCLFL.proto\x1a\x11LEGLIFDBIBE.proto\x1a\x11PFOONLIJKKK.p\
    roto\x1a\x1fTreasureDungeonRecordData.proto\"\xea\x05\n\x0bIOOJFGPOAPG\
    \x12\x20\n\x0bKFGAADCAFOE\x18\x0e\x20\x01(\rR\x0bKFGAADCAFOE\x12!\n\x0bG\
    NLDOLFGDAN\x18\xc1\x03\x20\x01(\x08R\x0bGNLDOLFGDAN\x12!\n\x0bJCIBDGDBJA\
    L\x18\xf0\x03\x20\x01(\rR\x0bJCIBDGDBJAL\x12/\n\x0bAGPKHOOCMPE\x18\xed\t\
    \x20\x03(\x0b2\x0c.ICOBJGOCLFLR\x0bAGPKHOOCMPE\x12/\n\x0bEMALNMLGANJ\x18\
    \xd7\r\x20\x03(\x0b2\x0c.GMJMONHDFJIR\x0bEMALNMLGANJ\x12\x20\n\x0bHBEDLL\
    EAILC\x18\x0b\x20\x01(\rR\x0bHBEDLLEAILC\x12<\n\x0bKKEIPMOKINF\x18\x08\
    \x20\x03(\x0b2\x1a.TreasureDungeonRecordDataR\x0bKKEIPMOKINF\x12\x20\n\
    \x0bLBFBJIOINPG\x18\t\x20\x01(\rR\x0bLBFBJIOINPG\x12\x20\n\x0bHFMJHJHGCE\
    D\x18\x04\x20\x01(\rR\x0bHFMJHJHGCED\x12\x20\n\x0bLNGJKFGLHBE\x18\x06\
    \x20\x01(\rR\x0bLNGJKFGLHBE\x12!\n\x0bKGACBNBPMHP\x18\xec\x04\x20\x01(\
    \x08R\x0bKGACBNBPMHP\x12!\n\x0bDKJJFPLGNGI\x18\xcb\x02\x20\x01(\x08R\x0b\
    DKJJFPLGNGI\x12/\n\x0bABBGBMOFFGA\x18\xe5\x08\x20\x03(\x0b2\x0c.GMJMONHD\
    FJIR\x0bABBGBMOFFGA\x12\x20\n\x0bPIKDGNGDCCA\x18\x02\x20\x01(\rR\x0bPIKD\
    GNGDCCA\x12\x20\n\x0bHMPPFGCIFJK\x18\x03\x20\x01(\rR\x0bHMPPFGCIFJK\x12.\
    \n\x0bANPNJEKLCJJ\x18\x05\x20\x03(\x0b2\x0c.PFOONLIJKKKR\x0bANPNJEKLCJJ\
    \x12/\n\x0bEBDDNGHLIGH\x18\xa6\r\x20\x03(\x0b2\x0c.HKCCGMPCKHKR\x0bEBDDN\
    GHLIGH\x12/\n\x0bNICOCPANLHC\x18\xea\x03\x20\x03(\x0b2\x0c.LEGLIFDBIBER\
    \x0bNICOCPANLHCb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::GMJMONHDFJI::file_descriptor().clone());
            deps.push(super::HKCCGMPCKHK::file_descriptor().clone());
            deps.push(super::ICOBJGOCLFL::file_descriptor().clone());
            deps.push(super::LEGLIFDBIBE::file_descriptor().clone());
            deps.push(super::PFOONLIJKKK::file_descriptor().clone());
            deps.push(super::TreasureDungeonRecordData::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(IOOJFGPOAPG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
