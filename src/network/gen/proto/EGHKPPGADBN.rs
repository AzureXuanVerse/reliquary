// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EGHKPPGADBN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EGHKPPGADBN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EGHKPPGADBN {
    // message fields
    // @@protoc_insertion_point(field:EGHKPPGADBN.OEMFLFEBJLG)
    pub OEMFLFEBJLG: u32,
    // @@protoc_insertion_point(field:EGHKPPGADBN.INKHHPLJBND)
    pub INKHHPLJBND: bool,
    // @@protoc_insertion_point(field:EGHKPPGADBN.HGMFEGGJEFB)
    pub HGMFEGGJEFB: u32,
    // @@protoc_insertion_point(field:EGHKPPGADBN.KGLCCBGOEBO)
    pub KGLCCBGOEBO: u32,
    // @@protoc_insertion_point(field:EGHKPPGADBN.PLACEEOAJOE)
    pub PLACEEOAJOE: bool,
    // @@protoc_insertion_point(field:EGHKPPGADBN.IPNHCCODNDI)
    pub IPNHCCODNDI: u32,
    // @@protoc_insertion_point(field:EGHKPPGADBN.LKGOAPJDNBJ)
    pub LKGOAPJDNBJ: ::protobuf::MessageField<super::LFADECKJCKF::LFADECKJCKF>,
    // @@protoc_insertion_point(field:EGHKPPGADBN.JIPFGECHFBM)
    pub JIPFGECHFBM: u32,
    // @@protoc_insertion_point(field:EGHKPPGADBN.AIBMBKDAPFK)
    pub AIBMBKDAPFK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EGHKPPGADBN.DNPPPPELJNI)
    pub DNPPPPELJNI: ::protobuf::EnumOrUnknown<super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus>,
    // @@protoc_insertion_point(field:EGHKPPGADBN.DBEJIGJNGKH)
    pub DBEJIGJNGKH: u32,
    // @@protoc_insertion_point(field:EGHKPPGADBN.GNBKHJFCHID)
    pub GNBKHJFCHID: ::protobuf::EnumOrUnknown<super::ChessRogueCellSpecialType::ChessRogueCellSpecialType>,
    // special fields
    // @@protoc_insertion_point(special_field:EGHKPPGADBN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EGHKPPGADBN {
    fn default() -> &'a EGHKPPGADBN {
        <EGHKPPGADBN as ::protobuf::Message>::default_instance()
    }
}

impl EGHKPPGADBN {
    pub fn new() -> EGHKPPGADBN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OEMFLFEBJLG",
            |m: &EGHKPPGADBN| { &m.OEMFLFEBJLG },
            |m: &mut EGHKPPGADBN| { &mut m.OEMFLFEBJLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "INKHHPLJBND",
            |m: &EGHKPPGADBN| { &m.INKHHPLJBND },
            |m: &mut EGHKPPGADBN| { &mut m.INKHHPLJBND },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HGMFEGGJEFB",
            |m: &EGHKPPGADBN| { &m.HGMFEGGJEFB },
            |m: &mut EGHKPPGADBN| { &mut m.HGMFEGGJEFB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KGLCCBGOEBO",
            |m: &EGHKPPGADBN| { &m.KGLCCBGOEBO },
            |m: &mut EGHKPPGADBN| { &mut m.KGLCCBGOEBO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PLACEEOAJOE",
            |m: &EGHKPPGADBN| { &m.PLACEEOAJOE },
            |m: &mut EGHKPPGADBN| { &mut m.PLACEEOAJOE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IPNHCCODNDI",
            |m: &EGHKPPGADBN| { &m.IPNHCCODNDI },
            |m: &mut EGHKPPGADBN| { &mut m.IPNHCCODNDI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LFADECKJCKF::LFADECKJCKF>(
            "LKGOAPJDNBJ",
            |m: &EGHKPPGADBN| { &m.LKGOAPJDNBJ },
            |m: &mut EGHKPPGADBN| { &mut m.LKGOAPJDNBJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JIPFGECHFBM",
            |m: &EGHKPPGADBN| { &m.JIPFGECHFBM },
            |m: &mut EGHKPPGADBN| { &mut m.JIPFGECHFBM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AIBMBKDAPFK",
            |m: &EGHKPPGADBN| { &m.AIBMBKDAPFK },
            |m: &mut EGHKPPGADBN| { &mut m.AIBMBKDAPFK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DNPPPPELJNI",
            |m: &EGHKPPGADBN| { &m.DNPPPPELJNI },
            |m: &mut EGHKPPGADBN| { &mut m.DNPPPPELJNI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBEJIGJNGKH",
            |m: &EGHKPPGADBN| { &m.DBEJIGJNGKH },
            |m: &mut EGHKPPGADBN| { &mut m.DBEJIGJNGKH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GNBKHJFCHID",
            |m: &EGHKPPGADBN| { &m.GNBKHJFCHID },
            |m: &mut EGHKPPGADBN| { &mut m.GNBKHJFCHID },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EGHKPPGADBN>(
            "EGHKPPGADBN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EGHKPPGADBN {
    const NAME: &'static str = "EGHKPPGADBN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                40 => {
                    self.OEMFLFEBJLG = is.read_uint32()?;
                },
                56 => {
                    self.INKHHPLJBND = is.read_bool()?;
                },
                8 => {
                    self.HGMFEGGJEFB = is.read_uint32()?;
                },
                48 => {
                    self.KGLCCBGOEBO = is.read_uint32()?;
                },
                64 => {
                    self.PLACEEOAJOE = is.read_bool()?;
                },
                16 => {
                    self.IPNHCCODNDI = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LKGOAPJDNBJ)?;
                },
                24 => {
                    self.JIPFGECHFBM = is.read_uint32()?;
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.AIBMBKDAPFK)?;
                },
                88 => {
                    self.AIBMBKDAPFK.push(is.read_uint32()?);
                },
                112 => {
                    self.DNPPPPELJNI = is.read_enum_or_unknown()?;
                },
                80 => {
                    self.DBEJIGJNGKH = is.read_uint32()?;
                },
                96 => {
                    self.GNBKHJFCHID = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.OEMFLFEBJLG != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.OEMFLFEBJLG);
        }
        if self.INKHHPLJBND != false {
            my_size += 1 + 1;
        }
        if self.HGMFEGGJEFB != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.HGMFEGGJEFB);
        }
        if self.KGLCCBGOEBO != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.KGLCCBGOEBO);
        }
        if self.PLACEEOAJOE != false {
            my_size += 1 + 1;
        }
        if self.IPNHCCODNDI != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.IPNHCCODNDI);
        }
        if let Some(v) = self.LKGOAPJDNBJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.JIPFGECHFBM != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.JIPFGECHFBM);
        }
        for value in &self.AIBMBKDAPFK {
            my_size += ::protobuf::rt::uint32_size(11, *value);
        };
        if self.DNPPPPELJNI != ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE) {
            my_size += ::protobuf::rt::int32_size(14, self.DNPPPPELJNI.value());
        }
        if self.DBEJIGJNGKH != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.DBEJIGJNGKH);
        }
        if self.GNBKHJFCHID != ::protobuf::EnumOrUnknown::new(super::ChessRogueCellSpecialType::ChessRogueCellSpecialType::CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(12, self.GNBKHJFCHID.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.OEMFLFEBJLG != 0 {
            os.write_uint32(5, self.OEMFLFEBJLG)?;
        }
        if self.INKHHPLJBND != false {
            os.write_bool(7, self.INKHHPLJBND)?;
        }
        if self.HGMFEGGJEFB != 0 {
            os.write_uint32(1, self.HGMFEGGJEFB)?;
        }
        if self.KGLCCBGOEBO != 0 {
            os.write_uint32(6, self.KGLCCBGOEBO)?;
        }
        if self.PLACEEOAJOE != false {
            os.write_bool(8, self.PLACEEOAJOE)?;
        }
        if self.IPNHCCODNDI != 0 {
            os.write_uint32(2, self.IPNHCCODNDI)?;
        }
        if let Some(v) = self.LKGOAPJDNBJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.JIPFGECHFBM != 0 {
            os.write_uint32(3, self.JIPFGECHFBM)?;
        }
        for v in &self.AIBMBKDAPFK {
            os.write_uint32(11, *v)?;
        };
        if self.DNPPPPELJNI != ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.DNPPPPELJNI))?;
        }
        if self.DBEJIGJNGKH != 0 {
            os.write_uint32(10, self.DBEJIGJNGKH)?;
        }
        if self.GNBKHJFCHID != ::protobuf::EnumOrUnknown::new(super::ChessRogueCellSpecialType::ChessRogueCellSpecialType::CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.GNBKHJFCHID))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EGHKPPGADBN {
        EGHKPPGADBN::new()
    }

    fn clear(&mut self) {
        self.OEMFLFEBJLG = 0;
        self.INKHHPLJBND = false;
        self.HGMFEGGJEFB = 0;
        self.KGLCCBGOEBO = 0;
        self.PLACEEOAJOE = false;
        self.IPNHCCODNDI = 0;
        self.LKGOAPJDNBJ.clear();
        self.JIPFGECHFBM = 0;
        self.AIBMBKDAPFK.clear();
        self.DNPPPPELJNI = ::protobuf::EnumOrUnknown::new(super::ChessRogueBoardCellStatus::ChessRogueBoardCellStatus::IDLE);
        self.DBEJIGJNGKH = 0;
        self.GNBKHJFCHID = ::protobuf::EnumOrUnknown::new(super::ChessRogueCellSpecialType::ChessRogueCellSpecialType::CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EGHKPPGADBN {
        static instance: EGHKPPGADBN = EGHKPPGADBN {
            OEMFLFEBJLG: 0,
            INKHHPLJBND: false,
            HGMFEGGJEFB: 0,
            KGLCCBGOEBO: 0,
            PLACEEOAJOE: false,
            IPNHCCODNDI: 0,
            LKGOAPJDNBJ: ::protobuf::MessageField::none(),
            JIPFGECHFBM: 0,
            AIBMBKDAPFK: ::std::vec::Vec::new(),
            DNPPPPELJNI: ::protobuf::EnumOrUnknown::from_i32(0),
            DBEJIGJNGKH: 0,
            GNBKHJFCHID: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EGHKPPGADBN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EGHKPPGADBN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EGHKPPGADBN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EGHKPPGADBN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EGHKPPGADBN.proto\x1a\x1fChessRogueBoardCellStatus.proto\x1a\x1fCh\
    essRogueCellSpecialType.proto\x1a\x11LFADECKJCKF.proto\"\xeb\x03\n\x0bEG\
    HKPPGADBN\x12\x20\n\x0bOEMFLFEBJLG\x18\x05\x20\x01(\rR\x0bOEMFLFEBJLG\
    \x12\x20\n\x0bINKHHPLJBND\x18\x07\x20\x01(\x08R\x0bINKHHPLJBND\x12\x20\n\
    \x0bHGMFEGGJEFB\x18\x01\x20\x01(\rR\x0bHGMFEGGJEFB\x12\x20\n\x0bKGLCCBGO\
    EBO\x18\x06\x20\x01(\rR\x0bKGLCCBGOEBO\x12\x20\n\x0bPLACEEOAJOE\x18\x08\
    \x20\x01(\x08R\x0bPLACEEOAJOE\x12\x20\n\x0bIPNHCCODNDI\x18\x02\x20\x01(\
    \rR\x0bIPNHCCODNDI\x12.\n\x0bLKGOAPJDNBJ\x18\t\x20\x01(\x0b2\x0c.LFADECK\
    JCKFR\x0bLKGOAPJDNBJ\x12\x20\n\x0bJIPFGECHFBM\x18\x03\x20\x01(\rR\x0bJIP\
    FGECHFBM\x12\x20\n\x0bAIBMBKDAPFK\x18\x0b\x20\x03(\rR\x0bAIBMBKDAPFK\x12\
    <\n\x0bDNPPPPELJNI\x18\x0e\x20\x01(\x0e2\x1a.ChessRogueBoardCellStatusR\
    \x0bDNPPPPELJNI\x12\x20\n\x0bDBEJIGJNGKH\x18\n\x20\x01(\rR\x0bDBEJIGJNGK\
    H\x12<\n\x0bGNBKHJFCHID\x18\x0c\x20\x01(\x0e2\x1a.ChessRogueCellSpecialT\
    ypeR\x0bGNBKHJFCHIDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ChessRogueBoardCellStatus::file_descriptor().clone());
            deps.push(super::ChessRogueCellSpecialType::file_descriptor().clone());
            deps.push(super::LFADECKJCKF::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EGHKPPGADBN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
