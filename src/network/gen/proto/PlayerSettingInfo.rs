// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerSettingInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PlayerSettingInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerSettingInfo {
    // message fields
    // @@protoc_insertion_point(field:PlayerSettingInfo.b1)
    pub b1: bool,
    // @@protoc_insertion_point(field:PlayerSettingInfo.b2)
    pub b2: bool,
    // @@protoc_insertion_point(field:PlayerSettingInfo.b3)
    pub b3: bool,
    // @@protoc_insertion_point(field:PlayerSettingInfo.b4)
    pub b4: bool,
    // @@protoc_insertion_point(field:PlayerSettingInfo.b5)
    pub b5: bool,
    // @@protoc_insertion_point(field:PlayerSettingInfo.b6)
    pub b6: bool,
    // @@protoc_insertion_point(field:PlayerSettingInfo.display_record_type)
    pub display_record_type: ::protobuf::EnumOrUnknown<super::DisplayRecordType::DisplayRecordType>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerSettingInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerSettingInfo {
    fn default() -> &'a PlayerSettingInfo {
        <PlayerSettingInfo as ::protobuf::Message>::default_instance()
    }
}

impl PlayerSettingInfo {
    pub fn new() -> PlayerSettingInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "b1",
            |m: &PlayerSettingInfo| { &m.b1 },
            |m: &mut PlayerSettingInfo| { &mut m.b1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "b2",
            |m: &PlayerSettingInfo| { &m.b2 },
            |m: &mut PlayerSettingInfo| { &mut m.b2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "b3",
            |m: &PlayerSettingInfo| { &m.b3 },
            |m: &mut PlayerSettingInfo| { &mut m.b3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "b4",
            |m: &PlayerSettingInfo| { &m.b4 },
            |m: &mut PlayerSettingInfo| { &mut m.b4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "b5",
            |m: &PlayerSettingInfo| { &m.b5 },
            |m: &mut PlayerSettingInfo| { &mut m.b5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "b6",
            |m: &PlayerSettingInfo| { &m.b6 },
            |m: &mut PlayerSettingInfo| { &mut m.b6 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_record_type",
            |m: &PlayerSettingInfo| { &m.display_record_type },
            |m: &mut PlayerSettingInfo| { &mut m.display_record_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerSettingInfo>(
            "PlayerSettingInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerSettingInfo {
    const NAME: &'static str = "PlayerSettingInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.b1 = is.read_bool()?;
                },
                64 => {
                    self.b2 = is.read_bool()?;
                },
                32 => {
                    self.b3 = is.read_bool()?;
                },
                24 => {
                    self.b4 = is.read_bool()?;
                },
                104 => {
                    self.b5 = is.read_bool()?;
                },
                40 => {
                    self.b6 = is.read_bool()?;
                },
                96 => {
                    self.display_record_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.b1 != false {
            my_size += 1 + 1;
        }
        if self.b2 != false {
            my_size += 1 + 1;
        }
        if self.b3 != false {
            my_size += 1 + 1;
        }
        if self.b4 != false {
            my_size += 1 + 1;
        }
        if self.b5 != false {
            my_size += 1 + 1;
        }
        if self.b6 != false {
            my_size += 1 + 1;
        }
        if self.display_record_type != ::protobuf::EnumOrUnknown::new(super::DisplayRecordType::DisplayRecordType::BATTLE_RECORD_NONE) {
            my_size += ::protobuf::rt::int32_size(12, self.display_record_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.b1 != false {
            os.write_bool(2, self.b1)?;
        }
        if self.b2 != false {
            os.write_bool(8, self.b2)?;
        }
        if self.b3 != false {
            os.write_bool(4, self.b3)?;
        }
        if self.b4 != false {
            os.write_bool(3, self.b4)?;
        }
        if self.b5 != false {
            os.write_bool(13, self.b5)?;
        }
        if self.b6 != false {
            os.write_bool(5, self.b6)?;
        }
        if self.display_record_type != ::protobuf::EnumOrUnknown::new(super::DisplayRecordType::DisplayRecordType::BATTLE_RECORD_NONE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.display_record_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerSettingInfo {
        PlayerSettingInfo::new()
    }

    fn clear(&mut self) {
        self.b1 = false;
        self.b2 = false;
        self.b3 = false;
        self.b4 = false;
        self.b5 = false;
        self.b6 = false;
        self.display_record_type = ::protobuf::EnumOrUnknown::new(super::DisplayRecordType::DisplayRecordType::BATTLE_RECORD_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerSettingInfo {
        static instance: PlayerSettingInfo = PlayerSettingInfo {
            b1: false,
            b2: false,
            b3: false,
            b4: false,
            b5: false,
            b6: false,
            display_record_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerSettingInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerSettingInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerSettingInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerSettingInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17PlayerSettingInfo.proto\x1a\x17DisplayRecordType.proto\"\xb7\x01\n\
    \x11PlayerSettingInfo\x12\x0e\n\x02b1\x18\x02\x20\x01(\x08R\x02b1\x12\
    \x0e\n\x02b2\x18\x08\x20\x01(\x08R\x02b2\x12\x0e\n\x02b3\x18\x04\x20\x01\
    (\x08R\x02b3\x12\x0e\n\x02b4\x18\x03\x20\x01(\x08R\x02b4\x12\x0e\n\x02b5\
    \x18\r\x20\x01(\x08R\x02b5\x12\x0e\n\x02b6\x18\x05\x20\x01(\x08R\x02b6\
    \x12B\n\x13display_record_type\x18\x0c\x20\x01(\x0e2\x12.DisplayRecordTy\
    peR\x11displayRecordTypeB\x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::DisplayRecordType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerSettingInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
