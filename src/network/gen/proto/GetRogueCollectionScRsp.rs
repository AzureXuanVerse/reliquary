// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetRogueCollectionScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CollectionInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CollectionInfo {
    // message fields
    // @@protoc_insertion_point(field:CollectionInfo.status)
    pub status: ::protobuf::EnumOrUnknown<RogueCollectionType>,
    // @@protoc_insertion_point(field:CollectionInfo.LOEOCICFOPB)
    pub LOEOCICFOPB: u32,
    // special fields
    // @@protoc_insertion_point(special_field:CollectionInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CollectionInfo {
    fn default() -> &'a CollectionInfo {
        <CollectionInfo as ::protobuf::Message>::default_instance()
    }
}

impl CollectionInfo {
    pub fn new() -> CollectionInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &CollectionInfo| { &m.status },
            |m: &mut CollectionInfo| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LOEOCICFOPB",
            |m: &CollectionInfo| { &m.LOEOCICFOPB },
            |m: &mut CollectionInfo| { &mut m.LOEOCICFOPB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CollectionInfo>(
            "CollectionInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CollectionInfo {
    const NAME: &'static str = "CollectionInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                64 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                104 => {
                    self.LOEOCICFOPB = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != ::protobuf::EnumOrUnknown::new(RogueCollectionType::ROGUE_COLLECTION_NONE) {
            my_size += ::protobuf::rt::int32_size(8, self.status.value());
        }
        if self.LOEOCICFOPB != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.LOEOCICFOPB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != ::protobuf::EnumOrUnknown::new(RogueCollectionType::ROGUE_COLLECTION_NONE) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if self.LOEOCICFOPB != 0 {
            os.write_uint32(13, self.LOEOCICFOPB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CollectionInfo {
        CollectionInfo::new()
    }

    fn clear(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(RogueCollectionType::ROGUE_COLLECTION_NONE);
        self.LOEOCICFOPB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CollectionInfo {
        static instance: CollectionInfo = CollectionInfo {
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            LOEOCICFOPB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CollectionInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CollectionInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CollectionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CollectionInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CollectionBoothInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CollectionBoothInfo {
    // message fields
    // @@protoc_insertion_point(field:CollectionBoothInfo.pillar_id)
    pub pillar_id: u32,
    // @@protoc_insertion_point(field:CollectionBoothInfo.status)
    pub status: ::protobuf::EnumOrUnknown<RogueBoothType>,
    // @@protoc_insertion_point(field:CollectionBoothInfo.LOEOCICFOPB)
    pub LOEOCICFOPB: u32,
    // special fields
    // @@protoc_insertion_point(special_field:CollectionBoothInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CollectionBoothInfo {
    fn default() -> &'a CollectionBoothInfo {
        <CollectionBoothInfo as ::protobuf::Message>::default_instance()
    }
}

impl CollectionBoothInfo {
    pub fn new() -> CollectionBoothInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pillar_id",
            |m: &CollectionBoothInfo| { &m.pillar_id },
            |m: &mut CollectionBoothInfo| { &mut m.pillar_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &CollectionBoothInfo| { &m.status },
            |m: &mut CollectionBoothInfo| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LOEOCICFOPB",
            |m: &CollectionBoothInfo| { &m.LOEOCICFOPB },
            |m: &mut CollectionBoothInfo| { &mut m.LOEOCICFOPB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CollectionBoothInfo>(
            "CollectionBoothInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CollectionBoothInfo {
    const NAME: &'static str = "CollectionBoothInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.pillar_id = is.read_uint32()?;
                },
                96 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                56 => {
                    self.LOEOCICFOPB = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.pillar_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.pillar_id);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(RogueBoothType::ROGUE_BOOTH_NONE) {
            my_size += ::protobuf::rt::int32_size(12, self.status.value());
        }
        if self.LOEOCICFOPB != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.LOEOCICFOPB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.pillar_id != 0 {
            os.write_uint32(15, self.pillar_id)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(RogueBoothType::ROGUE_BOOTH_NONE) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if self.LOEOCICFOPB != 0 {
            os.write_uint32(7, self.LOEOCICFOPB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CollectionBoothInfo {
        CollectionBoothInfo::new()
    }

    fn clear(&mut self) {
        self.pillar_id = 0;
        self.status = ::protobuf::EnumOrUnknown::new(RogueBoothType::ROGUE_BOOTH_NONE);
        self.LOEOCICFOPB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CollectionBoothInfo {
        static instance: CollectionBoothInfo = CollectionBoothInfo {
            pillar_id: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            LOEOCICFOPB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CollectionBoothInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CollectionBoothInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CollectionBoothInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CollectionBoothInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetRogueCollectionScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetRogueCollectionScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetRogueCollectionScRsp.collection_info_list)
    pub collection_info_list: ::std::vec::Vec<CollectionInfo>,
    // @@protoc_insertion_point(field:GetRogueCollectionScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetRogueCollectionScRsp.collection_booth_info_list)
    pub collection_booth_info_list: ::std::vec::Vec<CollectionBoothInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:GetRogueCollectionScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetRogueCollectionScRsp {
    fn default() -> &'a GetRogueCollectionScRsp {
        <GetRogueCollectionScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetRogueCollectionScRsp {
    pub fn new() -> GetRogueCollectionScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "collection_info_list",
            |m: &GetRogueCollectionScRsp| { &m.collection_info_list },
            |m: &mut GetRogueCollectionScRsp| { &mut m.collection_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetRogueCollectionScRsp| { &m.retcode },
            |m: &mut GetRogueCollectionScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "collection_booth_info_list",
            |m: &GetRogueCollectionScRsp| { &m.collection_booth_info_list },
            |m: &mut GetRogueCollectionScRsp| { &mut m.collection_booth_info_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetRogueCollectionScRsp>(
            "GetRogueCollectionScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetRogueCollectionScRsp {
    const NAME: &'static str = "GetRogueCollectionScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                122 => {
                    self.collection_info_list.push(is.read_message()?);
                },
                8 => {
                    self.retcode = is.read_uint32()?;
                },
                106 => {
                    self.collection_booth_info_list.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.collection_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.retcode);
        }
        for value in &self.collection_booth_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.collection_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(1, self.retcode)?;
        }
        for v in &self.collection_booth_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetRogueCollectionScRsp {
        GetRogueCollectionScRsp::new()
    }

    fn clear(&mut self) {
        self.collection_info_list.clear();
        self.retcode = 0;
        self.collection_booth_info_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetRogueCollectionScRsp {
        static instance: GetRogueCollectionScRsp = GetRogueCollectionScRsp {
            collection_info_list: ::std::vec::Vec::new(),
            retcode: 0,
            collection_booth_info_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetRogueCollectionScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetRogueCollectionScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetRogueCollectionScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRogueCollectionScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:RogueCollectionType)
pub enum RogueCollectionType {
    // @@protoc_insertion_point(enum_value:RogueCollectionType.ROGUE_COLLECTION_NONE)
    ROGUE_COLLECTION_NONE = 0,
    // @@protoc_insertion_point(enum_value:RogueCollectionType.ROGUE_COLLECTION_UNLOCKED)
    ROGUE_COLLECTION_UNLOCKED = 1,
    // @@protoc_insertion_point(enum_value:RogueCollectionType.ROGUE_COLLECTION_DISPLAY)
    ROGUE_COLLECTION_DISPLAY = 2,
}

impl ::protobuf::Enum for RogueCollectionType {
    const NAME: &'static str = "RogueCollectionType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RogueCollectionType> {
        match value {
            0 => ::std::option::Option::Some(RogueCollectionType::ROGUE_COLLECTION_NONE),
            1 => ::std::option::Option::Some(RogueCollectionType::ROGUE_COLLECTION_UNLOCKED),
            2 => ::std::option::Option::Some(RogueCollectionType::ROGUE_COLLECTION_DISPLAY),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<RogueCollectionType> {
        match str {
            "ROGUE_COLLECTION_NONE" => ::std::option::Option::Some(RogueCollectionType::ROGUE_COLLECTION_NONE),
            "ROGUE_COLLECTION_UNLOCKED" => ::std::option::Option::Some(RogueCollectionType::ROGUE_COLLECTION_UNLOCKED),
            "ROGUE_COLLECTION_DISPLAY" => ::std::option::Option::Some(RogueCollectionType::ROGUE_COLLECTION_DISPLAY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [RogueCollectionType] = &[
        RogueCollectionType::ROGUE_COLLECTION_NONE,
        RogueCollectionType::ROGUE_COLLECTION_UNLOCKED,
        RogueCollectionType::ROGUE_COLLECTION_DISPLAY,
    ];
}

impl ::protobuf::EnumFull for RogueCollectionType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("RogueCollectionType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for RogueCollectionType {
    fn default() -> Self {
        RogueCollectionType::ROGUE_COLLECTION_NONE
    }
}

impl RogueCollectionType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<RogueCollectionType>("RogueCollectionType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:RogueBoothType)
pub enum RogueBoothType {
    // @@protoc_insertion_point(enum_value:RogueBoothType.ROGUE_BOOTH_NONE)
    ROGUE_BOOTH_NONE = 0,
    // @@protoc_insertion_point(enum_value:RogueBoothType.ROGUE_BOOTH_EMPTY)
    ROGUE_BOOTH_EMPTY = 1,
    // @@protoc_insertion_point(enum_value:RogueBoothType.ROGUE_BOOTH_DISPLAY)
    ROGUE_BOOTH_DISPLAY = 2,
}

impl ::protobuf::Enum for RogueBoothType {
    const NAME: &'static str = "RogueBoothType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RogueBoothType> {
        match value {
            0 => ::std::option::Option::Some(RogueBoothType::ROGUE_BOOTH_NONE),
            1 => ::std::option::Option::Some(RogueBoothType::ROGUE_BOOTH_EMPTY),
            2 => ::std::option::Option::Some(RogueBoothType::ROGUE_BOOTH_DISPLAY),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<RogueBoothType> {
        match str {
            "ROGUE_BOOTH_NONE" => ::std::option::Option::Some(RogueBoothType::ROGUE_BOOTH_NONE),
            "ROGUE_BOOTH_EMPTY" => ::std::option::Option::Some(RogueBoothType::ROGUE_BOOTH_EMPTY),
            "ROGUE_BOOTH_DISPLAY" => ::std::option::Option::Some(RogueBoothType::ROGUE_BOOTH_DISPLAY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [RogueBoothType] = &[
        RogueBoothType::ROGUE_BOOTH_NONE,
        RogueBoothType::ROGUE_BOOTH_EMPTY,
        RogueBoothType::ROGUE_BOOTH_DISPLAY,
    ];
}

impl ::protobuf::EnumFull for RogueBoothType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("RogueBoothType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for RogueBoothType {
    fn default() -> Self {
        RogueBoothType::ROGUE_BOOTH_NONE
    }
}

impl RogueBoothType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<RogueBoothType>("RogueBoothType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dGetRogueCollectionScRsp.proto\"`\n\x0eCollectionInfo\x12,\n\x06sta\
    tus\x18\x08\x20\x01(\x0e2\x14.RogueCollectionTypeR\x06status\x12\x20\n\
    \x0bLOEOCICFOPB\x18\r\x20\x01(\rR\x0bLOEOCICFOPB\"}\n\x13CollectionBooth\
    Info\x12\x1b\n\tpillar_id\x18\x0f\x20\x01(\rR\x08pillarId\x12'\n\x06stat\
    us\x18\x0c\x20\x01(\x0e2\x0f.RogueBoothTypeR\x06status\x12\x20\n\x0bLOEO\
    CICFOPB\x18\x07\x20\x01(\rR\x0bLOEOCICFOPB\"\xc9\x01\n\x17GetRogueCollec\
    tionScRsp\x12A\n\x14collection_info_list\x18\x0f\x20\x03(\x0b2\x0f.Colle\
    ctionInfoR\x12collectionInfoList\x12\x18\n\x07retcode\x18\x01\x20\x01(\r\
    R\x07retcode\x12Q\n\x1acollection_booth_info_list\x18\r\x20\x03(\x0b2\
    \x14.CollectionBoothInfoR\x17collectionBoothInfoList*m\n\x13RogueCollect\
    ionType\x12\x19\n\x15ROGUE_COLLECTION_NONE\x10\0\x12\x1d\n\x19ROGUE_COLL\
    ECTION_UNLOCKED\x10\x01\x12\x1c\n\x18ROGUE_COLLECTION_DISPLAY\x10\x02*V\
    \n\x0eRogueBoothType\x12\x14\n\x10ROGUE_BOOTH_NONE\x10\0\x12\x15\n\x11RO\
    GUE_BOOTH_EMPTY\x10\x01\x12\x17\n\x13ROGUE_BOOTH_DISPLAY\x10\x02B\x15\n\
    \x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(CollectionInfo::generated_message_descriptor_data());
            messages.push(CollectionBoothInfo::generated_message_descriptor_data());
            messages.push(GetRogueCollectionScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(RogueCollectionType::generated_enum_descriptor_data());
            enums.push(RogueBoothType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
