// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetBigDataRecommendScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetBigDataRecommendScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetBigDataRecommendScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetBigDataRecommendScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetBigDataRecommendScRsp.JLNHHDNLCGN)
    pub JLNHHDNLCGN: u32,
    // @@protoc_insertion_point(field:GetBigDataRecommendScRsp.ROGUE_TALENT_STATUS_ENABLE)
    pub ROGUE_TALENT_STATUS_ENABLE: bool,
    // @@protoc_insertion_point(field:GetBigDataRecommendScRsp.JCIFNOLDCGE)
    pub JCIFNOLDCGE: ::protobuf::EnumOrUnknown<super::JHIPGPGHHMG::JHIPGPGHHMG>,
    // message oneof groups
    pub BFFPIBHCMJJ: ::std::option::Option<get_big_data_recommend_sc_rsp::BFFPIBHCMJJ>,
    // special fields
    // @@protoc_insertion_point(special_field:GetBigDataRecommendScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetBigDataRecommendScRsp {
    fn default() -> &'a GetBigDataRecommendScRsp {
        <GetBigDataRecommendScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetBigDataRecommendScRsp {
    pub fn new() -> GetBigDataRecommendScRsp {
        ::std::default::Default::default()
    }

    // .BHNNEGIBCMO GBOPCBOOPKO = 8;

    pub fn GBOPCBOOPKO(&self) -> &super::BHNNEGIBCMO::BHNNEGIBCMO {
        match self.BFFPIBHCMJJ {
            ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(ref v)) => v,
            _ => <super::BHNNEGIBCMO::BHNNEGIBCMO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GBOPCBOOPKO(&mut self) {
        self.BFFPIBHCMJJ = ::std::option::Option::None;
    }

    pub fn has_GBOPCBOOPKO(&self) -> bool {
        match self.BFFPIBHCMJJ {
            ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GBOPCBOOPKO(&mut self, v: super::BHNNEGIBCMO::BHNNEGIBCMO) {
        self.BFFPIBHCMJJ = ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GBOPCBOOPKO(&mut self) -> &mut super::BHNNEGIBCMO::BHNNEGIBCMO {
        if let ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(_)) = self.BFFPIBHCMJJ {
        } else {
            self.BFFPIBHCMJJ = ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(super::BHNNEGIBCMO::BHNNEGIBCMO::new()));
        }
        match self.BFFPIBHCMJJ {
            ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GBOPCBOOPKO(&mut self) -> super::BHNNEGIBCMO::BHNNEGIBCMO {
        if self.has_GBOPCBOOPKO() {
            match self.BFFPIBHCMJJ.take() {
                ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BHNNEGIBCMO::BHNNEGIBCMO::new()
        }
    }

    // .LEEBHHKEEHG KCIJKEEADJJ = 5;

    pub fn KCIJKEEADJJ(&self) -> &super::LEEBHHKEEHG::LEEBHHKEEHG {
        match self.BFFPIBHCMJJ {
            ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(ref v)) => v,
            _ => <super::LEEBHHKEEHG::LEEBHHKEEHG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KCIJKEEADJJ(&mut self) {
        self.BFFPIBHCMJJ = ::std::option::Option::None;
    }

    pub fn has_KCIJKEEADJJ(&self) -> bool {
        match self.BFFPIBHCMJJ {
            ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KCIJKEEADJJ(&mut self, v: super::LEEBHHKEEHG::LEEBHHKEEHG) {
        self.BFFPIBHCMJJ = ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KCIJKEEADJJ(&mut self) -> &mut super::LEEBHHKEEHG::LEEBHHKEEHG {
        if let ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(_)) = self.BFFPIBHCMJJ {
        } else {
            self.BFFPIBHCMJJ = ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(super::LEEBHHKEEHG::LEEBHHKEEHG::new()));
        }
        match self.BFFPIBHCMJJ {
            ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KCIJKEEADJJ(&mut self) -> super::LEEBHHKEEHG::LEEBHHKEEHG {
        if self.has_KCIJKEEADJJ() {
            match self.BFFPIBHCMJJ.take() {
                ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LEEBHHKEEHG::LEEBHHKEEHG::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetBigDataRecommendScRsp| { &m.retcode },
            |m: &mut GetBigDataRecommendScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JLNHHDNLCGN",
            |m: &GetBigDataRecommendScRsp| { &m.JLNHHDNLCGN },
            |m: &mut GetBigDataRecommendScRsp| { &mut m.JLNHHDNLCGN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ROGUE_TALENT_STATUS_ENABLE",
            |m: &GetBigDataRecommendScRsp| { &m.ROGUE_TALENT_STATUS_ENABLE },
            |m: &mut GetBigDataRecommendScRsp| { &mut m.ROGUE_TALENT_STATUS_ENABLE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JCIFNOLDCGE",
            |m: &GetBigDataRecommendScRsp| { &m.JCIFNOLDCGE },
            |m: &mut GetBigDataRecommendScRsp| { &mut m.JCIFNOLDCGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BHNNEGIBCMO::BHNNEGIBCMO>(
            "GBOPCBOOPKO",
            GetBigDataRecommendScRsp::has_GBOPCBOOPKO,
            GetBigDataRecommendScRsp::GBOPCBOOPKO,
            GetBigDataRecommendScRsp::mut_GBOPCBOOPKO,
            GetBigDataRecommendScRsp::set_GBOPCBOOPKO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LEEBHHKEEHG::LEEBHHKEEHG>(
            "KCIJKEEADJJ",
            GetBigDataRecommendScRsp::has_KCIJKEEADJJ,
            GetBigDataRecommendScRsp::KCIJKEEADJJ,
            GetBigDataRecommendScRsp::mut_KCIJKEEADJJ,
            GetBigDataRecommendScRsp::set_KCIJKEEADJJ,
        ));
        oneofs.push(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetBigDataRecommendScRsp>(
            "GetBigDataRecommendScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetBigDataRecommendScRsp {
    const NAME: &'static str = "GetBigDataRecommendScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                104 => {
                    self.retcode = is.read_uint32()?;
                },
                48 => {
                    self.JLNHHDNLCGN = is.read_uint32()?;
                },
                120 => {
                    self.ROGUE_TALENT_STATUS_ENABLE = is.read_bool()?;
                },
                88 => {
                    self.JCIFNOLDCGE = is.read_enum_or_unknown()?;
                },
                66 => {
                    self.BFFPIBHCMJJ = ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(is.read_message()?));
                },
                42 => {
                    self.BFFPIBHCMJJ = ::std::option::Option::Some(get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.retcode);
        }
        if self.JLNHHDNLCGN != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.JLNHHDNLCGN);
        }
        if self.ROGUE_TALENT_STATUS_ENABLE != false {
            my_size += 1 + 1;
        }
        if self.JCIFNOLDCGE != ::protobuf::EnumOrUnknown::new(super::JHIPGPGHHMG::JHIPGPGHHMG::BIG_DATA_RECOMMEND_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(11, self.JCIFNOLDCGE.value());
        }
        if let ::std::option::Option::Some(ref v) = self.BFFPIBHCMJJ {
            match v {
                &get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(13, self.retcode)?;
        }
        if self.JLNHHDNLCGN != 0 {
            os.write_uint32(6, self.JLNHHDNLCGN)?;
        }
        if self.ROGUE_TALENT_STATUS_ENABLE != false {
            os.write_bool(15, self.ROGUE_TALENT_STATUS_ENABLE)?;
        }
        if self.JCIFNOLDCGE != ::protobuf::EnumOrUnknown::new(super::JHIPGPGHHMG::JHIPGPGHHMG::BIG_DATA_RECOMMEND_TYPE_NONE) {
            os.write_enum(11, ::protobuf::EnumOrUnknown::value(&self.JCIFNOLDCGE))?;
        }
        if let ::std::option::Option::Some(ref v) = self.BFFPIBHCMJJ {
            match v {
                &get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::GBOPCBOOPKO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &get_big_data_recommend_sc_rsp::BFFPIBHCMJJ::KCIJKEEADJJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetBigDataRecommendScRsp {
        GetBigDataRecommendScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.JLNHHDNLCGN = 0;
        self.ROGUE_TALENT_STATUS_ENABLE = false;
        self.JCIFNOLDCGE = ::protobuf::EnumOrUnknown::new(super::JHIPGPGHHMG::JHIPGPGHHMG::BIG_DATA_RECOMMEND_TYPE_NONE);
        self.BFFPIBHCMJJ = ::std::option::Option::None;
        self.BFFPIBHCMJJ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetBigDataRecommendScRsp {
        static instance: GetBigDataRecommendScRsp = GetBigDataRecommendScRsp {
            retcode: 0,
            JLNHHDNLCGN: 0,
            ROGUE_TALENT_STATUS_ENABLE: false,
            JCIFNOLDCGE: ::protobuf::EnumOrUnknown::from_i32(0),
            BFFPIBHCMJJ: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetBigDataRecommendScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetBigDataRecommendScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetBigDataRecommendScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBigDataRecommendScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GetBigDataRecommendScRsp`
pub mod get_big_data_recommend_sc_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:GetBigDataRecommendScRsp.BFFPIBHCMJJ)
    pub enum BFFPIBHCMJJ {
        // @@protoc_insertion_point(oneof_field:GetBigDataRecommendScRsp.GBOPCBOOPKO)
        GBOPCBOOPKO(super::super::BHNNEGIBCMO::BHNNEGIBCMO),
        // @@protoc_insertion_point(oneof_field:GetBigDataRecommendScRsp.KCIJKEEADJJ)
        KCIJKEEADJJ(super::super::LEEBHHKEEHG::LEEBHHKEEHG),
    }

    impl ::protobuf::Oneof for BFFPIBHCMJJ {
    }

    impl ::protobuf::OneofFull for BFFPIBHCMJJ {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GetBigDataRecommendScRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("BFFPIBHCMJJ").unwrap()).clone()
        }
    }

    impl BFFPIBHCMJJ {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<BFFPIBHCMJJ>("BFFPIBHCMJJ")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eGetBigDataRecommendScRsp.proto\x1a\x11BHNNEGIBCMO.proto\x1a\x11JHI\
    PGPGHHMG.proto\x1a\x11LEEBHHKEEHG.proto\"\xb6\x02\n\x18GetBigDataRecomme\
    ndScRsp\x12\x18\n\x07retcode\x18\r\x20\x01(\rR\x07retcode\x12\x20\n\x0bJ\
    LNHHDNLCGN\x18\x06\x20\x01(\rR\x0bJLNHHDNLCGN\x12;\n\x1aROGUE_TALENT_STA\
    TUS_ENABLE\x18\x0f\x20\x01(\x08R\x17ROGUETALENTSTATUSENABLE\x12.\n\x0bJC\
    IFNOLDCGE\x18\x0b\x20\x01(\x0e2\x0c.JHIPGPGHHMGR\x0bJCIFNOLDCGE\x120\n\
    \x0bGBOPCBOOPKO\x18\x08\x20\x01(\x0b2\x0c.BHNNEGIBCMOH\0R\x0bGBOPCBOOPKO\
    \x120\n\x0bKCIJKEEADJJ\x18\x05\x20\x01(\x0b2\x0c.LEEBHHKEEHGH\0R\x0bKCIJ\
    KEEADJJB\r\n\x0bBFFPIBHCMJJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BHNNEGIBCMO::file_descriptor().clone());
            deps.push(super::JHIPGPGHHMG::file_descriptor().clone());
            deps.push(super::LEEBHHKEEHG::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetBigDataRecommendScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
