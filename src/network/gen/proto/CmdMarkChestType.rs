// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdMarkChestType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdMarkChestType)
pub enum CmdMarkChestType {
    // @@protoc_insertion_point(enum_value:CmdMarkChestType.CmdMarkChestTypeNone)
    CmdMarkChestTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdMarkChestType.CmdUpdateMarkChestCsReq)
    CmdUpdateMarkChestCsReq = 8187,
    // @@protoc_insertion_point(enum_value:CmdMarkChestType.CmdMarkChestChangedScNotify)
    CmdMarkChestChangedScNotify = 8197,
    // @@protoc_insertion_point(enum_value:CmdMarkChestType.CmdGetMarkChestCsReq)
    CmdGetMarkChestCsReq = 8200,
    // @@protoc_insertion_point(enum_value:CmdMarkChestType.CmdUpdateMarkChestScRsp)
    CmdUpdateMarkChestScRsp = 8183,
    // @@protoc_insertion_point(enum_value:CmdMarkChestType.CmdGetMarkChestScRsp)
    CmdGetMarkChestScRsp = 8195,
}

impl ::protobuf::Enum for CmdMarkChestType {
    const NAME: &'static str = "CmdMarkChestType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdMarkChestType> {
        match value {
            0 => ::std::option::Option::Some(CmdMarkChestType::CmdMarkChestTypeNone),
            8187 => ::std::option::Option::Some(CmdMarkChestType::CmdUpdateMarkChestCsReq),
            8197 => ::std::option::Option::Some(CmdMarkChestType::CmdMarkChestChangedScNotify),
            8200 => ::std::option::Option::Some(CmdMarkChestType::CmdGetMarkChestCsReq),
            8183 => ::std::option::Option::Some(CmdMarkChestType::CmdUpdateMarkChestScRsp),
            8195 => ::std::option::Option::Some(CmdMarkChestType::CmdGetMarkChestScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdMarkChestType> {
        match str {
            "CmdMarkChestTypeNone" => ::std::option::Option::Some(CmdMarkChestType::CmdMarkChestTypeNone),
            "CmdUpdateMarkChestCsReq" => ::std::option::Option::Some(CmdMarkChestType::CmdUpdateMarkChestCsReq),
            "CmdMarkChestChangedScNotify" => ::std::option::Option::Some(CmdMarkChestType::CmdMarkChestChangedScNotify),
            "CmdGetMarkChestCsReq" => ::std::option::Option::Some(CmdMarkChestType::CmdGetMarkChestCsReq),
            "CmdUpdateMarkChestScRsp" => ::std::option::Option::Some(CmdMarkChestType::CmdUpdateMarkChestScRsp),
            "CmdGetMarkChestScRsp" => ::std::option::Option::Some(CmdMarkChestType::CmdGetMarkChestScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdMarkChestType] = &[
        CmdMarkChestType::CmdMarkChestTypeNone,
        CmdMarkChestType::CmdUpdateMarkChestCsReq,
        CmdMarkChestType::CmdMarkChestChangedScNotify,
        CmdMarkChestType::CmdGetMarkChestCsReq,
        CmdMarkChestType::CmdUpdateMarkChestScRsp,
        CmdMarkChestType::CmdGetMarkChestScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdMarkChestType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdMarkChestType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdMarkChestType::CmdMarkChestTypeNone => 0,
            CmdMarkChestType::CmdUpdateMarkChestCsReq => 1,
            CmdMarkChestType::CmdMarkChestChangedScNotify => 2,
            CmdMarkChestType::CmdGetMarkChestCsReq => 3,
            CmdMarkChestType::CmdUpdateMarkChestScRsp => 4,
            CmdMarkChestType::CmdGetMarkChestScRsp => 5,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdMarkChestType {
    fn default() -> Self {
        CmdMarkChestType::CmdMarkChestTypeNone
    }
}

impl CmdMarkChestType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdMarkChestType>("CmdMarkChestType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16CmdMarkChestType.proto*\xc0\x01\n\x10CmdMarkChestType\x12\x18\n\
    \x14CmdMarkChestTypeNone\x10\0\x12\x1c\n\x17CmdUpdateMarkChestCsReq\x10\
    \xfb?\x12\x20\n\x1bCmdMarkChestChangedScNotify\x10\x85@\x12\x19\n\x14Cmd\
    GetMarkChestCsReq\x10\x88@\x12\x1c\n\x17CmdUpdateMarkChestScRsp\x10\xf7?\
    \x12\x19\n\x14CmdGetMarkChestScRsp\x10\x83@b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdMarkChestType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
