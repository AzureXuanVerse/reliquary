// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdMissionType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdMissionType)
pub enum CmdMissionType {
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdMissionTypeNone)
    CmdMissionTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdStartFinishMainMissionScNotify)
    CmdStartFinishMainMissionScNotify = 1285,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdSetMissionEventProgressCsReq)
    CmdSetMissionEventProgressCsReq = 1211,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionEventDataCsReq)
    CmdGetMissionEventDataCsReq = 1266,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdSubMissionRewardScNotify)
    CmdSubMissionRewardScNotify = 1300,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdMissionAcceptScNotify)
    CmdMissionAcceptScNotify = 1263,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdUpdateTrackMainMissionIdScRsp)
    CmdUpdateTrackMainMissionIdScRsp = 1202,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdTeleportToMissionResetPointCsReq)
    CmdTeleportToMissionResetPointCsReq = 1262,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdSyncTaskScRsp)
    CmdSyncTaskScRsp = 1233,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdFinishTalkMissionScRsp)
    CmdFinishTalkMissionScRsp = 1242,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionEventDataScRsp)
    CmdGetMissionEventDataScRsp = 1205,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdMissionGroupWarnScNotify)
    CmdMissionGroupWarnScNotify = 1256,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdInterruptMissionEventCsReq)
    CmdInterruptMissionEventCsReq = 1260,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdAcceptMissionEventCsReq)
    CmdAcceptMissionEventCsReq = 1220,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionDataCsReq)
    CmdGetMissionDataCsReq = 1298,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdStartFinishSubMissionScNotify)
    CmdStartFinishSubMissionScNotify = 1223,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdUpdateTrackMainMissionIdCsReq)
    CmdUpdateTrackMainMissionIdCsReq = 1236,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdSetMissionEventProgressScRsp)
    CmdSetMissionEventProgressScRsp = 1210,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdFinishCosumeItemMissionCsReq)
    CmdFinishCosumeItemMissionCsReq = 1289,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdTeleportToMissionResetPointScRsp)
    CmdTeleportToMissionResetPointScRsp = 1206,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMainMissionCustomValueCsReq)
    CmdGetMainMissionCustomValueCsReq = 1288,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdDailyTaskDataScNotify)
    CmdDailyTaskDataScNotify = 1212,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdAcceptMainMissionCsReq)
    CmdAcceptMainMissionCsReq = 1216,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdAcceptMainMissionScRsp)
    CmdAcceptMainMissionScRsp = 1214,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionStatusScRsp)
    CmdGetMissionStatusScRsp = 1204,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdMissionEventRewardScNotify)
    CmdMissionEventRewardScNotify = 1245,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdFinishTalkMissionCsReq)
    CmdFinishTalkMissionCsReq = 1283,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMainMissionCustomValueScRsp)
    CmdGetMainMissionCustomValueScRsp = 1293,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionStatusCsReq)
    CmdGetMissionStatusCsReq = 1231,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdFinishCosumeItemMissionScRsp)
    CmdFinishCosumeItemMissionScRsp = 1222,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdSyncTaskCsReq)
    CmdSyncTaskCsReq = 1277,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdInterruptMissionEventScRsp)
    CmdInterruptMissionEventScRsp = 1252,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdMissionRewardScNotify)
    CmdMissionRewardScNotify = 1279,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdAcceptMissionEventScRsp)
    CmdAcceptMissionEventScRsp = 1250,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionDataScRsp)
    CmdGetMissionDataScRsp = 1271,
}

impl ::protobuf::Enum for CmdMissionType {
    const NAME: &'static str = "CmdMissionType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdMissionType> {
        match value {
            0 => ::std::option::Option::Some(CmdMissionType::CmdMissionTypeNone),
            1285 => ::std::option::Option::Some(CmdMissionType::CmdStartFinishMainMissionScNotify),
            1211 => ::std::option::Option::Some(CmdMissionType::CmdSetMissionEventProgressCsReq),
            1266 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionEventDataCsReq),
            1300 => ::std::option::Option::Some(CmdMissionType::CmdSubMissionRewardScNotify),
            1263 => ::std::option::Option::Some(CmdMissionType::CmdMissionAcceptScNotify),
            1202 => ::std::option::Option::Some(CmdMissionType::CmdUpdateTrackMainMissionIdScRsp),
            1262 => ::std::option::Option::Some(CmdMissionType::CmdTeleportToMissionResetPointCsReq),
            1233 => ::std::option::Option::Some(CmdMissionType::CmdSyncTaskScRsp),
            1242 => ::std::option::Option::Some(CmdMissionType::CmdFinishTalkMissionScRsp),
            1205 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionEventDataScRsp),
            1256 => ::std::option::Option::Some(CmdMissionType::CmdMissionGroupWarnScNotify),
            1260 => ::std::option::Option::Some(CmdMissionType::CmdInterruptMissionEventCsReq),
            1220 => ::std::option::Option::Some(CmdMissionType::CmdAcceptMissionEventCsReq),
            1298 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionDataCsReq),
            1223 => ::std::option::Option::Some(CmdMissionType::CmdStartFinishSubMissionScNotify),
            1236 => ::std::option::Option::Some(CmdMissionType::CmdUpdateTrackMainMissionIdCsReq),
            1210 => ::std::option::Option::Some(CmdMissionType::CmdSetMissionEventProgressScRsp),
            1289 => ::std::option::Option::Some(CmdMissionType::CmdFinishCosumeItemMissionCsReq),
            1206 => ::std::option::Option::Some(CmdMissionType::CmdTeleportToMissionResetPointScRsp),
            1288 => ::std::option::Option::Some(CmdMissionType::CmdGetMainMissionCustomValueCsReq),
            1212 => ::std::option::Option::Some(CmdMissionType::CmdDailyTaskDataScNotify),
            1216 => ::std::option::Option::Some(CmdMissionType::CmdAcceptMainMissionCsReq),
            1214 => ::std::option::Option::Some(CmdMissionType::CmdAcceptMainMissionScRsp),
            1204 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionStatusScRsp),
            1245 => ::std::option::Option::Some(CmdMissionType::CmdMissionEventRewardScNotify),
            1283 => ::std::option::Option::Some(CmdMissionType::CmdFinishTalkMissionCsReq),
            1293 => ::std::option::Option::Some(CmdMissionType::CmdGetMainMissionCustomValueScRsp),
            1231 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionStatusCsReq),
            1222 => ::std::option::Option::Some(CmdMissionType::CmdFinishCosumeItemMissionScRsp),
            1277 => ::std::option::Option::Some(CmdMissionType::CmdSyncTaskCsReq),
            1252 => ::std::option::Option::Some(CmdMissionType::CmdInterruptMissionEventScRsp),
            1279 => ::std::option::Option::Some(CmdMissionType::CmdMissionRewardScNotify),
            1250 => ::std::option::Option::Some(CmdMissionType::CmdAcceptMissionEventScRsp),
            1271 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionDataScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdMissionType> {
        match str {
            "CmdMissionTypeNone" => ::std::option::Option::Some(CmdMissionType::CmdMissionTypeNone),
            "CmdStartFinishMainMissionScNotify" => ::std::option::Option::Some(CmdMissionType::CmdStartFinishMainMissionScNotify),
            "CmdSetMissionEventProgressCsReq" => ::std::option::Option::Some(CmdMissionType::CmdSetMissionEventProgressCsReq),
            "CmdGetMissionEventDataCsReq" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionEventDataCsReq),
            "CmdSubMissionRewardScNotify" => ::std::option::Option::Some(CmdMissionType::CmdSubMissionRewardScNotify),
            "CmdMissionAcceptScNotify" => ::std::option::Option::Some(CmdMissionType::CmdMissionAcceptScNotify),
            "CmdUpdateTrackMainMissionIdScRsp" => ::std::option::Option::Some(CmdMissionType::CmdUpdateTrackMainMissionIdScRsp),
            "CmdTeleportToMissionResetPointCsReq" => ::std::option::Option::Some(CmdMissionType::CmdTeleportToMissionResetPointCsReq),
            "CmdSyncTaskScRsp" => ::std::option::Option::Some(CmdMissionType::CmdSyncTaskScRsp),
            "CmdFinishTalkMissionScRsp" => ::std::option::Option::Some(CmdMissionType::CmdFinishTalkMissionScRsp),
            "CmdGetMissionEventDataScRsp" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionEventDataScRsp),
            "CmdMissionGroupWarnScNotify" => ::std::option::Option::Some(CmdMissionType::CmdMissionGroupWarnScNotify),
            "CmdInterruptMissionEventCsReq" => ::std::option::Option::Some(CmdMissionType::CmdInterruptMissionEventCsReq),
            "CmdAcceptMissionEventCsReq" => ::std::option::Option::Some(CmdMissionType::CmdAcceptMissionEventCsReq),
            "CmdGetMissionDataCsReq" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionDataCsReq),
            "CmdStartFinishSubMissionScNotify" => ::std::option::Option::Some(CmdMissionType::CmdStartFinishSubMissionScNotify),
            "CmdUpdateTrackMainMissionIdCsReq" => ::std::option::Option::Some(CmdMissionType::CmdUpdateTrackMainMissionIdCsReq),
            "CmdSetMissionEventProgressScRsp" => ::std::option::Option::Some(CmdMissionType::CmdSetMissionEventProgressScRsp),
            "CmdFinishCosumeItemMissionCsReq" => ::std::option::Option::Some(CmdMissionType::CmdFinishCosumeItemMissionCsReq),
            "CmdTeleportToMissionResetPointScRsp" => ::std::option::Option::Some(CmdMissionType::CmdTeleportToMissionResetPointScRsp),
            "CmdGetMainMissionCustomValueCsReq" => ::std::option::Option::Some(CmdMissionType::CmdGetMainMissionCustomValueCsReq),
            "CmdDailyTaskDataScNotify" => ::std::option::Option::Some(CmdMissionType::CmdDailyTaskDataScNotify),
            "CmdAcceptMainMissionCsReq" => ::std::option::Option::Some(CmdMissionType::CmdAcceptMainMissionCsReq),
            "CmdAcceptMainMissionScRsp" => ::std::option::Option::Some(CmdMissionType::CmdAcceptMainMissionScRsp),
            "CmdGetMissionStatusScRsp" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionStatusScRsp),
            "CmdMissionEventRewardScNotify" => ::std::option::Option::Some(CmdMissionType::CmdMissionEventRewardScNotify),
            "CmdFinishTalkMissionCsReq" => ::std::option::Option::Some(CmdMissionType::CmdFinishTalkMissionCsReq),
            "CmdGetMainMissionCustomValueScRsp" => ::std::option::Option::Some(CmdMissionType::CmdGetMainMissionCustomValueScRsp),
            "CmdGetMissionStatusCsReq" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionStatusCsReq),
            "CmdFinishCosumeItemMissionScRsp" => ::std::option::Option::Some(CmdMissionType::CmdFinishCosumeItemMissionScRsp),
            "CmdSyncTaskCsReq" => ::std::option::Option::Some(CmdMissionType::CmdSyncTaskCsReq),
            "CmdInterruptMissionEventScRsp" => ::std::option::Option::Some(CmdMissionType::CmdInterruptMissionEventScRsp),
            "CmdMissionRewardScNotify" => ::std::option::Option::Some(CmdMissionType::CmdMissionRewardScNotify),
            "CmdAcceptMissionEventScRsp" => ::std::option::Option::Some(CmdMissionType::CmdAcceptMissionEventScRsp),
            "CmdGetMissionDataScRsp" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionDataScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdMissionType] = &[
        CmdMissionType::CmdMissionTypeNone,
        CmdMissionType::CmdStartFinishMainMissionScNotify,
        CmdMissionType::CmdSetMissionEventProgressCsReq,
        CmdMissionType::CmdGetMissionEventDataCsReq,
        CmdMissionType::CmdSubMissionRewardScNotify,
        CmdMissionType::CmdMissionAcceptScNotify,
        CmdMissionType::CmdUpdateTrackMainMissionIdScRsp,
        CmdMissionType::CmdTeleportToMissionResetPointCsReq,
        CmdMissionType::CmdSyncTaskScRsp,
        CmdMissionType::CmdFinishTalkMissionScRsp,
        CmdMissionType::CmdGetMissionEventDataScRsp,
        CmdMissionType::CmdMissionGroupWarnScNotify,
        CmdMissionType::CmdInterruptMissionEventCsReq,
        CmdMissionType::CmdAcceptMissionEventCsReq,
        CmdMissionType::CmdGetMissionDataCsReq,
        CmdMissionType::CmdStartFinishSubMissionScNotify,
        CmdMissionType::CmdUpdateTrackMainMissionIdCsReq,
        CmdMissionType::CmdSetMissionEventProgressScRsp,
        CmdMissionType::CmdFinishCosumeItemMissionCsReq,
        CmdMissionType::CmdTeleportToMissionResetPointScRsp,
        CmdMissionType::CmdGetMainMissionCustomValueCsReq,
        CmdMissionType::CmdDailyTaskDataScNotify,
        CmdMissionType::CmdAcceptMainMissionCsReq,
        CmdMissionType::CmdAcceptMainMissionScRsp,
        CmdMissionType::CmdGetMissionStatusScRsp,
        CmdMissionType::CmdMissionEventRewardScNotify,
        CmdMissionType::CmdFinishTalkMissionCsReq,
        CmdMissionType::CmdGetMainMissionCustomValueScRsp,
        CmdMissionType::CmdGetMissionStatusCsReq,
        CmdMissionType::CmdFinishCosumeItemMissionScRsp,
        CmdMissionType::CmdSyncTaskCsReq,
        CmdMissionType::CmdInterruptMissionEventScRsp,
        CmdMissionType::CmdMissionRewardScNotify,
        CmdMissionType::CmdAcceptMissionEventScRsp,
        CmdMissionType::CmdGetMissionDataScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdMissionType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdMissionType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdMissionType::CmdMissionTypeNone => 0,
            CmdMissionType::CmdStartFinishMainMissionScNotify => 1,
            CmdMissionType::CmdSetMissionEventProgressCsReq => 2,
            CmdMissionType::CmdGetMissionEventDataCsReq => 3,
            CmdMissionType::CmdSubMissionRewardScNotify => 4,
            CmdMissionType::CmdMissionAcceptScNotify => 5,
            CmdMissionType::CmdUpdateTrackMainMissionIdScRsp => 6,
            CmdMissionType::CmdTeleportToMissionResetPointCsReq => 7,
            CmdMissionType::CmdSyncTaskScRsp => 8,
            CmdMissionType::CmdFinishTalkMissionScRsp => 9,
            CmdMissionType::CmdGetMissionEventDataScRsp => 10,
            CmdMissionType::CmdMissionGroupWarnScNotify => 11,
            CmdMissionType::CmdInterruptMissionEventCsReq => 12,
            CmdMissionType::CmdAcceptMissionEventCsReq => 13,
            CmdMissionType::CmdGetMissionDataCsReq => 14,
            CmdMissionType::CmdStartFinishSubMissionScNotify => 15,
            CmdMissionType::CmdUpdateTrackMainMissionIdCsReq => 16,
            CmdMissionType::CmdSetMissionEventProgressScRsp => 17,
            CmdMissionType::CmdFinishCosumeItemMissionCsReq => 18,
            CmdMissionType::CmdTeleportToMissionResetPointScRsp => 19,
            CmdMissionType::CmdGetMainMissionCustomValueCsReq => 20,
            CmdMissionType::CmdDailyTaskDataScNotify => 21,
            CmdMissionType::CmdAcceptMainMissionCsReq => 22,
            CmdMissionType::CmdAcceptMainMissionScRsp => 23,
            CmdMissionType::CmdGetMissionStatusScRsp => 24,
            CmdMissionType::CmdMissionEventRewardScNotify => 25,
            CmdMissionType::CmdFinishTalkMissionCsReq => 26,
            CmdMissionType::CmdGetMainMissionCustomValueScRsp => 27,
            CmdMissionType::CmdGetMissionStatusCsReq => 28,
            CmdMissionType::CmdFinishCosumeItemMissionScRsp => 29,
            CmdMissionType::CmdSyncTaskCsReq => 30,
            CmdMissionType::CmdInterruptMissionEventScRsp => 31,
            CmdMissionType::CmdMissionRewardScNotify => 32,
            CmdMissionType::CmdAcceptMissionEventScRsp => 33,
            CmdMissionType::CmdGetMissionDataScRsp => 34,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdMissionType {
    fn default() -> Self {
        CmdMissionType::CmdMissionTypeNone
    }
}

impl CmdMissionType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdMissionType>("CmdMissionType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14CmdMissionType.proto*\xba\t\n\x0eCmdMissionType\x12\x16\n\x12CmdMi\
    ssionTypeNone\x10\0\x12&\n!CmdStartFinishMainMissionScNotify\x10\x85\n\
    \x12$\n\x1fCmdSetMissionEventProgressCsReq\x10\xbb\t\x12\x20\n\x1bCmdGet\
    MissionEventDataCsReq\x10\xf2\t\x12\x20\n\x1bCmdSubMissionRewardScNotify\
    \x10\x94\n\x12\x1d\n\x18CmdMissionAcceptScNotify\x10\xef\t\x12%\n\x20Cmd\
    UpdateTrackMainMissionIdScRsp\x10\xb2\t\x12(\n#CmdTeleportToMissionReset\
    PointCsReq\x10\xee\t\x12\x15\n\x10CmdSyncTaskScRsp\x10\xd1\t\x12\x1e\n\
    \x19CmdFinishTalkMissionScRsp\x10\xda\t\x12\x20\n\x1bCmdGetMissionEventD\
    ataScRsp\x10\xb5\t\x12\x20\n\x1bCmdMissionGroupWarnScNotify\x10\xe8\t\
    \x12\"\n\x1dCmdInterruptMissionEventCsReq\x10\xec\t\x12\x1f\n\x1aCmdAcce\
    ptMissionEventCsReq\x10\xc4\t\x12\x1b\n\x16CmdGetMissionDataCsReq\x10\
    \x92\n\x12%\n\x20CmdStartFinishSubMissionScNotify\x10\xc7\t\x12%\n\x20Cm\
    dUpdateTrackMainMissionIdCsReq\x10\xd4\t\x12$\n\x1fCmdSetMissionEventPro\
    gressScRsp\x10\xba\t\x12$\n\x1fCmdFinishCosumeItemMissionCsReq\x10\x89\n\
    \x12(\n#CmdTeleportToMissionResetPointScRsp\x10\xb6\t\x12&\n!CmdGetMainM\
    issionCustomValueCsReq\x10\x88\n\x12\x1d\n\x18CmdDailyTaskDataScNotify\
    \x10\xbc\t\x12\x1e\n\x19CmdAcceptMainMissionCsReq\x10\xc0\t\x12\x1e\n\
    \x19CmdAcceptMainMissionScRsp\x10\xbe\t\x12\x1d\n\x18CmdGetMissionStatus\
    ScRsp\x10\xb4\t\x12\"\n\x1dCmdMissionEventRewardScNotify\x10\xdd\t\x12\
    \x1e\n\x19CmdFinishTalkMissionCsReq\x10\x83\n\x12&\n!CmdGetMainMissionCu\
    stomValueScRsp\x10\x8d\n\x12\x1d\n\x18CmdGetMissionStatusCsReq\x10\xcf\t\
    \x12$\n\x1fCmdFinishCosumeItemMissionScRsp\x10\xc6\t\x12\x15\n\x10CmdSyn\
    cTaskCsReq\x10\xfd\t\x12\"\n\x1dCmdInterruptMissionEventScRsp\x10\xe4\t\
    \x12\x1d\n\x18CmdMissionRewardScNotify\x10\xff\t\x12\x1f\n\x1aCmdAcceptM\
    issionEventScRsp\x10\xe2\t\x12\x1b\n\x16CmdGetMissionDataScRsp\x10\xf7\t\
    b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdMissionType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
