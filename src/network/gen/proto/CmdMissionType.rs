// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdMissionType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdMissionType)
pub enum CmdMissionType {
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdMissionTypeNone)
    CmdMissionTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMainMissionCustomValueScRsp)
    CmdGetMainMissionCustomValueScRsp = 1284,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdTeleportToMissionResetPointScRsp)
    CmdTeleportToMissionResetPointScRsp = 1252,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdMissionGroupWarnScNotify)
    CmdMissionGroupWarnScNotify = 1218,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdStartFinishSubMissionScNotify)
    CmdStartFinishSubMissionScNotify = 1222,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdSyncTaskScRsp)
    CmdSyncTaskScRsp = 1270,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdFinishTalkMissionCsReq)
    CmdFinishTalkMissionCsReq = 1247,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdFinishCosumeItemMissionCsReq)
    CmdFinishCosumeItemMissionCsReq = 1236,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdSyncTaskCsReq)
    CmdSyncTaskCsReq = 1206,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdMissionRewardScNotify)
    CmdMissionRewardScNotify = 1235,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdAcceptMainMissionCsReq)
    CmdAcceptMainMissionCsReq = 1292,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdStartFinishMainMissionScNotify)
    CmdStartFinishMainMissionScNotify = 1286,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdMissionAcceptScNotify)
    CmdMissionAcceptScNotify = 1275,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdTeleportToMissionResetPointCsReq)
    CmdTeleportToMissionResetPointCsReq = 1265,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionStatusCsReq)
    CmdGetMissionStatusCsReq = 1225,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionStatusScRsp)
    CmdGetMissionStatusScRsp = 1210,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdFinishCosumeItemMissionScRsp)
    CmdFinishCosumeItemMissionScRsp = 1250,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMainMissionCustomValueCsReq)
    CmdGetMainMissionCustomValueCsReq = 1224,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdUpdateTrackMainMissionIdCsReq)
    CmdUpdateTrackMainMissionIdCsReq = 1283,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionDataCsReq)
    CmdGetMissionDataCsReq = 1211,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdUpdateTrackMainMissionIdScRsp)
    CmdUpdateTrackMainMissionIdScRsp = 1258,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdSubMissionRewardScNotify)
    CmdSubMissionRewardScNotify = 1237,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdFinishTalkMissionScRsp)
    CmdFinishTalkMissionScRsp = 1209,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdAcceptMainMissionScRsp)
    CmdAcceptMainMissionScRsp = 1253,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdGetMissionDataScRsp)
    CmdGetMissionDataScRsp = 1213,
    // @@protoc_insertion_point(enum_value:CmdMissionType.CmdFinishedMissionScNotify)
    CmdFinishedMissionScNotify = 1268,
}

impl ::protobuf::Enum for CmdMissionType {
    const NAME: &'static str = "CmdMissionType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdMissionType> {
        match value {
            0 => ::std::option::Option::Some(CmdMissionType::CmdMissionTypeNone),
            1284 => ::std::option::Option::Some(CmdMissionType::CmdGetMainMissionCustomValueScRsp),
            1252 => ::std::option::Option::Some(CmdMissionType::CmdTeleportToMissionResetPointScRsp),
            1218 => ::std::option::Option::Some(CmdMissionType::CmdMissionGroupWarnScNotify),
            1222 => ::std::option::Option::Some(CmdMissionType::CmdStartFinishSubMissionScNotify),
            1270 => ::std::option::Option::Some(CmdMissionType::CmdSyncTaskScRsp),
            1247 => ::std::option::Option::Some(CmdMissionType::CmdFinishTalkMissionCsReq),
            1236 => ::std::option::Option::Some(CmdMissionType::CmdFinishCosumeItemMissionCsReq),
            1206 => ::std::option::Option::Some(CmdMissionType::CmdSyncTaskCsReq),
            1235 => ::std::option::Option::Some(CmdMissionType::CmdMissionRewardScNotify),
            1292 => ::std::option::Option::Some(CmdMissionType::CmdAcceptMainMissionCsReq),
            1286 => ::std::option::Option::Some(CmdMissionType::CmdStartFinishMainMissionScNotify),
            1275 => ::std::option::Option::Some(CmdMissionType::CmdMissionAcceptScNotify),
            1265 => ::std::option::Option::Some(CmdMissionType::CmdTeleportToMissionResetPointCsReq),
            1225 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionStatusCsReq),
            1210 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionStatusScRsp),
            1250 => ::std::option::Option::Some(CmdMissionType::CmdFinishCosumeItemMissionScRsp),
            1224 => ::std::option::Option::Some(CmdMissionType::CmdGetMainMissionCustomValueCsReq),
            1283 => ::std::option::Option::Some(CmdMissionType::CmdUpdateTrackMainMissionIdCsReq),
            1211 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionDataCsReq),
            1258 => ::std::option::Option::Some(CmdMissionType::CmdUpdateTrackMainMissionIdScRsp),
            1237 => ::std::option::Option::Some(CmdMissionType::CmdSubMissionRewardScNotify),
            1209 => ::std::option::Option::Some(CmdMissionType::CmdFinishTalkMissionScRsp),
            1253 => ::std::option::Option::Some(CmdMissionType::CmdAcceptMainMissionScRsp),
            1213 => ::std::option::Option::Some(CmdMissionType::CmdGetMissionDataScRsp),
            1268 => ::std::option::Option::Some(CmdMissionType::CmdFinishedMissionScNotify),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdMissionType> {
        match str {
            "CmdMissionTypeNone" => ::std::option::Option::Some(CmdMissionType::CmdMissionTypeNone),
            "CmdGetMainMissionCustomValueScRsp" => ::std::option::Option::Some(CmdMissionType::CmdGetMainMissionCustomValueScRsp),
            "CmdTeleportToMissionResetPointScRsp" => ::std::option::Option::Some(CmdMissionType::CmdTeleportToMissionResetPointScRsp),
            "CmdMissionGroupWarnScNotify" => ::std::option::Option::Some(CmdMissionType::CmdMissionGroupWarnScNotify),
            "CmdStartFinishSubMissionScNotify" => ::std::option::Option::Some(CmdMissionType::CmdStartFinishSubMissionScNotify),
            "CmdSyncTaskScRsp" => ::std::option::Option::Some(CmdMissionType::CmdSyncTaskScRsp),
            "CmdFinishTalkMissionCsReq" => ::std::option::Option::Some(CmdMissionType::CmdFinishTalkMissionCsReq),
            "CmdFinishCosumeItemMissionCsReq" => ::std::option::Option::Some(CmdMissionType::CmdFinishCosumeItemMissionCsReq),
            "CmdSyncTaskCsReq" => ::std::option::Option::Some(CmdMissionType::CmdSyncTaskCsReq),
            "CmdMissionRewardScNotify" => ::std::option::Option::Some(CmdMissionType::CmdMissionRewardScNotify),
            "CmdAcceptMainMissionCsReq" => ::std::option::Option::Some(CmdMissionType::CmdAcceptMainMissionCsReq),
            "CmdStartFinishMainMissionScNotify" => ::std::option::Option::Some(CmdMissionType::CmdStartFinishMainMissionScNotify),
            "CmdMissionAcceptScNotify" => ::std::option::Option::Some(CmdMissionType::CmdMissionAcceptScNotify),
            "CmdTeleportToMissionResetPointCsReq" => ::std::option::Option::Some(CmdMissionType::CmdTeleportToMissionResetPointCsReq),
            "CmdGetMissionStatusCsReq" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionStatusCsReq),
            "CmdGetMissionStatusScRsp" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionStatusScRsp),
            "CmdFinishCosumeItemMissionScRsp" => ::std::option::Option::Some(CmdMissionType::CmdFinishCosumeItemMissionScRsp),
            "CmdGetMainMissionCustomValueCsReq" => ::std::option::Option::Some(CmdMissionType::CmdGetMainMissionCustomValueCsReq),
            "CmdUpdateTrackMainMissionIdCsReq" => ::std::option::Option::Some(CmdMissionType::CmdUpdateTrackMainMissionIdCsReq),
            "CmdGetMissionDataCsReq" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionDataCsReq),
            "CmdUpdateTrackMainMissionIdScRsp" => ::std::option::Option::Some(CmdMissionType::CmdUpdateTrackMainMissionIdScRsp),
            "CmdSubMissionRewardScNotify" => ::std::option::Option::Some(CmdMissionType::CmdSubMissionRewardScNotify),
            "CmdFinishTalkMissionScRsp" => ::std::option::Option::Some(CmdMissionType::CmdFinishTalkMissionScRsp),
            "CmdAcceptMainMissionScRsp" => ::std::option::Option::Some(CmdMissionType::CmdAcceptMainMissionScRsp),
            "CmdGetMissionDataScRsp" => ::std::option::Option::Some(CmdMissionType::CmdGetMissionDataScRsp),
            "CmdFinishedMissionScNotify" => ::std::option::Option::Some(CmdMissionType::CmdFinishedMissionScNotify),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdMissionType] = &[
        CmdMissionType::CmdMissionTypeNone,
        CmdMissionType::CmdGetMainMissionCustomValueScRsp,
        CmdMissionType::CmdTeleportToMissionResetPointScRsp,
        CmdMissionType::CmdMissionGroupWarnScNotify,
        CmdMissionType::CmdStartFinishSubMissionScNotify,
        CmdMissionType::CmdSyncTaskScRsp,
        CmdMissionType::CmdFinishTalkMissionCsReq,
        CmdMissionType::CmdFinishCosumeItemMissionCsReq,
        CmdMissionType::CmdSyncTaskCsReq,
        CmdMissionType::CmdMissionRewardScNotify,
        CmdMissionType::CmdAcceptMainMissionCsReq,
        CmdMissionType::CmdStartFinishMainMissionScNotify,
        CmdMissionType::CmdMissionAcceptScNotify,
        CmdMissionType::CmdTeleportToMissionResetPointCsReq,
        CmdMissionType::CmdGetMissionStatusCsReq,
        CmdMissionType::CmdGetMissionStatusScRsp,
        CmdMissionType::CmdFinishCosumeItemMissionScRsp,
        CmdMissionType::CmdGetMainMissionCustomValueCsReq,
        CmdMissionType::CmdUpdateTrackMainMissionIdCsReq,
        CmdMissionType::CmdGetMissionDataCsReq,
        CmdMissionType::CmdUpdateTrackMainMissionIdScRsp,
        CmdMissionType::CmdSubMissionRewardScNotify,
        CmdMissionType::CmdFinishTalkMissionScRsp,
        CmdMissionType::CmdAcceptMainMissionScRsp,
        CmdMissionType::CmdGetMissionDataScRsp,
        CmdMissionType::CmdFinishedMissionScNotify,
    ];
}

impl ::protobuf::EnumFull for CmdMissionType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdMissionType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdMissionType::CmdMissionTypeNone => 0,
            CmdMissionType::CmdGetMainMissionCustomValueScRsp => 1,
            CmdMissionType::CmdTeleportToMissionResetPointScRsp => 2,
            CmdMissionType::CmdMissionGroupWarnScNotify => 3,
            CmdMissionType::CmdStartFinishSubMissionScNotify => 4,
            CmdMissionType::CmdSyncTaskScRsp => 5,
            CmdMissionType::CmdFinishTalkMissionCsReq => 6,
            CmdMissionType::CmdFinishCosumeItemMissionCsReq => 7,
            CmdMissionType::CmdSyncTaskCsReq => 8,
            CmdMissionType::CmdMissionRewardScNotify => 9,
            CmdMissionType::CmdAcceptMainMissionCsReq => 10,
            CmdMissionType::CmdStartFinishMainMissionScNotify => 11,
            CmdMissionType::CmdMissionAcceptScNotify => 12,
            CmdMissionType::CmdTeleportToMissionResetPointCsReq => 13,
            CmdMissionType::CmdGetMissionStatusCsReq => 14,
            CmdMissionType::CmdGetMissionStatusScRsp => 15,
            CmdMissionType::CmdFinishCosumeItemMissionScRsp => 16,
            CmdMissionType::CmdGetMainMissionCustomValueCsReq => 17,
            CmdMissionType::CmdUpdateTrackMainMissionIdCsReq => 18,
            CmdMissionType::CmdGetMissionDataCsReq => 19,
            CmdMissionType::CmdUpdateTrackMainMissionIdScRsp => 20,
            CmdMissionType::CmdSubMissionRewardScNotify => 21,
            CmdMissionType::CmdFinishTalkMissionScRsp => 22,
            CmdMissionType::CmdAcceptMainMissionScRsp => 23,
            CmdMissionType::CmdGetMissionDataScRsp => 24,
            CmdMissionType::CmdFinishedMissionScNotify => 25,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdMissionType {
    fn default() -> Self {
        CmdMissionType::CmdMissionTypeNone
    }
}

impl CmdMissionType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdMissionType>("CmdMissionType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14CmdMissionType.proto*\xfe\x06\n\x0eCmdMissionType\x12\x16\n\x12Cmd\
    MissionTypeNone\x10\0\x12&\n!CmdGetMainMissionCustomValueScRsp\x10\x84\n\
    \x12(\n#CmdTeleportToMissionResetPointScRsp\x10\xe4\t\x12\x20\n\x1bCmdMi\
    ssionGroupWarnScNotify\x10\xc2\t\x12%\n\x20CmdStartFinishSubMissionScNot\
    ify\x10\xc6\t\x12\x15\n\x10CmdSyncTaskScRsp\x10\xf6\t\x12\x1e\n\x19CmdFi\
    nishTalkMissionCsReq\x10\xdf\t\x12$\n\x1fCmdFinishCosumeItemMissionCsReq\
    \x10\xd4\t\x12\x15\n\x10CmdSyncTaskCsReq\x10\xb6\t\x12\x1d\n\x18CmdMissi\
    onRewardScNotify\x10\xd3\t\x12\x1e\n\x19CmdAcceptMainMissionCsReq\x10\
    \x8c\n\x12&\n!CmdStartFinishMainMissionScNotify\x10\x86\n\x12\x1d\n\x18C\
    mdMissionAcceptScNotify\x10\xfb\t\x12(\n#CmdTeleportToMissionResetPointC\
    sReq\x10\xf1\t\x12\x1d\n\x18CmdGetMissionStatusCsReq\x10\xc9\t\x12\x1d\n\
    \x18CmdGetMissionStatusScRsp\x10\xba\t\x12$\n\x1fCmdFinishCosumeItemMiss\
    ionScRsp\x10\xe2\t\x12&\n!CmdGetMainMissionCustomValueCsReq\x10\xc8\t\
    \x12%\n\x20CmdUpdateTrackMainMissionIdCsReq\x10\x83\n\x12\x1b\n\x16CmdGe\
    tMissionDataCsReq\x10\xbb\t\x12%\n\x20CmdUpdateTrackMainMissionIdScRsp\
    \x10\xea\t\x12\x20\n\x1bCmdSubMissionRewardScNotify\x10\xd5\t\x12\x1e\n\
    \x19CmdFinishTalkMissionScRsp\x10\xb9\t\x12\x1e\n\x19CmdAcceptMainMissio\
    nScRsp\x10\xe5\t\x12\x1b\n\x16CmdGetMissionDataScRsp\x10\xbd\t\x12\x1f\n\
    \x1aCmdFinishedMissionScNotify\x10\xf4\tb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdMissionType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
