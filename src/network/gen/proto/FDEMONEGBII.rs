// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `FDEMONEGBII.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:FDEMONEGBII)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FDEMONEGBII {
    // message oneof groups
    pub DKFKPIPNNLF: ::std::option::Option<fdemonegbii::DKFKPIPNNLF>,
    // special fields
    // @@protoc_insertion_point(special_field:FDEMONEGBII.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FDEMONEGBII {
    fn default() -> &'a FDEMONEGBII {
        <FDEMONEGBII as ::protobuf::Message>::default_instance()
    }
}

impl FDEMONEGBII {
    pub fn new() -> FDEMONEGBII {
        ::std::default::Default::default()
    }

    // .RogueCommonBuffSelectInfo NEMHMHFOLOA = 693;

    pub fn NEMHMHFOLOA(&self) -> &super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(ref v)) => v,
            _ => <super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NEMHMHFOLOA(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_NEMHMHFOLOA(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NEMHMHFOLOA(&mut self, v: super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NEMHMHFOLOA(&mut self) -> &mut super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NEMHMHFOLOA(&mut self) -> super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if self.has_NEMHMHFOLOA() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()
        }
    }

    // .EPCHDIJLFCC KDGCIMNGHAB = 862;

    pub fn KDGCIMNGHAB(&self) -> &super::EPCHDIJLFCC::EPCHDIJLFCC {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(ref v)) => v,
            _ => <super::EPCHDIJLFCC::EPCHDIJLFCC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KDGCIMNGHAB(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_KDGCIMNGHAB(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KDGCIMNGHAB(&mut self, v: super::EPCHDIJLFCC::EPCHDIJLFCC) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KDGCIMNGHAB(&mut self) -> &mut super::EPCHDIJLFCC::EPCHDIJLFCC {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(super::EPCHDIJLFCC::EPCHDIJLFCC::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KDGCIMNGHAB(&mut self) -> super::EPCHDIJLFCC::EPCHDIJLFCC {
        if self.has_KDGCIMNGHAB() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EPCHDIJLFCC::EPCHDIJLFCC::new()
        }
    }

    // .PLFJJDAEMCO LGEMAENMHND = 447;

    pub fn LGEMAENMHND(&self) -> &super::PLFJJDAEMCO::PLFJJDAEMCO {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(ref v)) => v,
            _ => <super::PLFJJDAEMCO::PLFJJDAEMCO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LGEMAENMHND(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_LGEMAENMHND(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LGEMAENMHND(&mut self, v: super::PLFJJDAEMCO::PLFJJDAEMCO) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LGEMAENMHND(&mut self) -> &mut super::PLFJJDAEMCO::PLFJJDAEMCO {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(super::PLFJJDAEMCO::PLFJJDAEMCO::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LGEMAENMHND(&mut self) -> super::PLFJJDAEMCO::PLFJJDAEMCO {
        if self.has_LGEMAENMHND() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PLFJJDAEMCO::PLFJJDAEMCO::new()
        }
    }

    // .DHKJEJGGNOI NAPHKFHDAGP = 1765;

    pub fn NAPHKFHDAGP(&self) -> &super::DHKJEJGGNOI::DHKJEJGGNOI {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(ref v)) => v,
            _ => <super::DHKJEJGGNOI::DHKJEJGGNOI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NAPHKFHDAGP(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_NAPHKFHDAGP(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NAPHKFHDAGP(&mut self, v: super::DHKJEJGGNOI::DHKJEJGGNOI) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NAPHKFHDAGP(&mut self) -> &mut super::DHKJEJGGNOI::DHKJEJGGNOI {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(super::DHKJEJGGNOI::DHKJEJGGNOI::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NAPHKFHDAGP(&mut self) -> super::DHKJEJGGNOI::DHKJEJGGNOI {
        if self.has_NAPHKFHDAGP() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DHKJEJGGNOI::DHKJEJGGNOI::new()
        }
    }

    // .OKKAKMHNPLK JJFMEDLBOGI = 1092;

    pub fn JJFMEDLBOGI(&self) -> &super::OKKAKMHNPLK::OKKAKMHNPLK {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(ref v)) => v,
            _ => <super::OKKAKMHNPLK::OKKAKMHNPLK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JJFMEDLBOGI(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_JJFMEDLBOGI(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JJFMEDLBOGI(&mut self, v: super::OKKAKMHNPLK::OKKAKMHNPLK) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JJFMEDLBOGI(&mut self) -> &mut super::OKKAKMHNPLK::OKKAKMHNPLK {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(super::OKKAKMHNPLK::OKKAKMHNPLK::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JJFMEDLBOGI(&mut self) -> super::OKKAKMHNPLK::OKKAKMHNPLK {
        if self.has_JJFMEDLBOGI() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OKKAKMHNPLK::OKKAKMHNPLK::new()
        }
    }

    // .LJLCHOEHGPE MEHHNAIIHPL = 1083;

    pub fn MEHHNAIIHPL(&self) -> &super::LJLCHOEHGPE::LJLCHOEHGPE {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(ref v)) => v,
            _ => <super::LJLCHOEHGPE::LJLCHOEHGPE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MEHHNAIIHPL(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_MEHHNAIIHPL(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MEHHNAIIHPL(&mut self, v: super::LJLCHOEHGPE::LJLCHOEHGPE) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MEHHNAIIHPL(&mut self) -> &mut super::LJLCHOEHGPE::LJLCHOEHGPE {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(super::LJLCHOEHGPE::LJLCHOEHGPE::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MEHHNAIIHPL(&mut self) -> super::LJLCHOEHGPE::LJLCHOEHGPE {
        if self.has_MEHHNAIIHPL() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LJLCHOEHGPE::LJLCHOEHGPE::new()
        }
    }

    // .MJECKLDALOL DDBBBECJPCG = 1330;

    pub fn DDBBBECJPCG(&self) -> &super::MJECKLDALOL::MJECKLDALOL {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(ref v)) => v,
            _ => <super::MJECKLDALOL::MJECKLDALOL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DDBBBECJPCG(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_DDBBBECJPCG(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DDBBBECJPCG(&mut self, v: super::MJECKLDALOL::MJECKLDALOL) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DDBBBECJPCG(&mut self) -> &mut super::MJECKLDALOL::MJECKLDALOL {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(super::MJECKLDALOL::MJECKLDALOL::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DDBBBECJPCG(&mut self) -> super::MJECKLDALOL::MJECKLDALOL {
        if self.has_DDBBBECJPCG() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MJECKLDALOL::MJECKLDALOL::new()
        }
    }

    // .NABFAFAKJBH PONCHMEECOA = 96;

    pub fn PONCHMEECOA(&self) -> &super::NABFAFAKJBH::NABFAFAKJBH {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(ref v)) => v,
            _ => <super::NABFAFAKJBH::NABFAFAKJBH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PONCHMEECOA(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_PONCHMEECOA(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PONCHMEECOA(&mut self, v: super::NABFAFAKJBH::NABFAFAKJBH) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PONCHMEECOA(&mut self) -> &mut super::NABFAFAKJBH::NABFAFAKJBH {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(super::NABFAFAKJBH::NABFAFAKJBH::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PONCHMEECOA(&mut self) -> super::NABFAFAKJBH::NABFAFAKJBH {
        if self.has_PONCHMEECOA() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NABFAFAKJBH::NABFAFAKJBH::new()
        }
    }

    // .BBKMOPPLBEP AIBIPOFHGEE = 735;

    pub fn AIBIPOFHGEE(&self) -> &super::BBKMOPPLBEP::BBKMOPPLBEP {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(ref v)) => v,
            _ => <super::BBKMOPPLBEP::BBKMOPPLBEP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AIBIPOFHGEE(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_AIBIPOFHGEE(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AIBIPOFHGEE(&mut self, v: super::BBKMOPPLBEP::BBKMOPPLBEP) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AIBIPOFHGEE(&mut self) -> &mut super::BBKMOPPLBEP::BBKMOPPLBEP {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(super::BBKMOPPLBEP::BBKMOPPLBEP::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AIBIPOFHGEE(&mut self) -> super::BBKMOPPLBEP::BBKMOPPLBEP {
        if self.has_AIBIPOFHGEE() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BBKMOPPLBEP::BBKMOPPLBEP::new()
        }
    }

    // .POODPJEIPOM DGNNIHBFMHJ = 1390;

    pub fn DGNNIHBFMHJ(&self) -> &super::POODPJEIPOM::POODPJEIPOM {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(ref v)) => v,
            _ => <super::POODPJEIPOM::POODPJEIPOM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DGNNIHBFMHJ(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_DGNNIHBFMHJ(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DGNNIHBFMHJ(&mut self, v: super::POODPJEIPOM::POODPJEIPOM) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DGNNIHBFMHJ(&mut self) -> &mut super::POODPJEIPOM::POODPJEIPOM {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(super::POODPJEIPOM::POODPJEIPOM::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DGNNIHBFMHJ(&mut self) -> super::POODPJEIPOM::POODPJEIPOM {
        if self.has_DGNNIHBFMHJ() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::POODPJEIPOM::POODPJEIPOM::new()
        }
    }

    // .AMGLLIELKEF HKPBAAMJKFL = 646;

    pub fn HKPBAAMJKFL(&self) -> &super::AMGLLIELKEF::AMGLLIELKEF {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(ref v)) => v,
            _ => <super::AMGLLIELKEF::AMGLLIELKEF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HKPBAAMJKFL(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_HKPBAAMJKFL(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HKPBAAMJKFL(&mut self, v: super::AMGLLIELKEF::AMGLLIELKEF) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HKPBAAMJKFL(&mut self) -> &mut super::AMGLLIELKEF::AMGLLIELKEF {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(super::AMGLLIELKEF::AMGLLIELKEF::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HKPBAAMJKFL(&mut self) -> super::AMGLLIELKEF::AMGLLIELKEF {
        if self.has_HKPBAAMJKFL() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AMGLLIELKEF::AMGLLIELKEF::new()
        }
    }

    // .MGPDLCDDBCB DLPELPPMGKC = 762;

    pub fn DLPELPPMGKC(&self) -> &super::MGPDLCDDBCB::MGPDLCDDBCB {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(ref v)) => v,
            _ => <super::MGPDLCDDBCB::MGPDLCDDBCB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DLPELPPMGKC(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_DLPELPPMGKC(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DLPELPPMGKC(&mut self, v: super::MGPDLCDDBCB::MGPDLCDDBCB) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DLPELPPMGKC(&mut self) -> &mut super::MGPDLCDDBCB::MGPDLCDDBCB {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(super::MGPDLCDDBCB::MGPDLCDDBCB::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DLPELPPMGKC(&mut self) -> super::MGPDLCDDBCB::MGPDLCDDBCB {
        if self.has_DLPELPPMGKC() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MGPDLCDDBCB::MGPDLCDDBCB::new()
        }
    }

    // .IFEFOFLJNML GAFAFKNADAG = 1270;

    pub fn GAFAFKNADAG(&self) -> &super::IFEFOFLJNML::IFEFOFLJNML {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(ref v)) => v,
            _ => <super::IFEFOFLJNML::IFEFOFLJNML as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GAFAFKNADAG(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_GAFAFKNADAG(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GAFAFKNADAG(&mut self, v: super::IFEFOFLJNML::IFEFOFLJNML) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GAFAFKNADAG(&mut self) -> &mut super::IFEFOFLJNML::IFEFOFLJNML {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(super::IFEFOFLJNML::IFEFOFLJNML::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GAFAFKNADAG(&mut self) -> super::IFEFOFLJNML::IFEFOFLJNML {
        if self.has_GAFAFKNADAG() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IFEFOFLJNML::IFEFOFLJNML::new()
        }
    }

    // .RogueFormulaSelectInfo ABJGBMELGHM = 1372;

    pub fn ABJGBMELGHM(&self) -> &super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(ref v)) => v,
            _ => <super::RogueFormulaSelectInfo::RogueFormulaSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ABJGBMELGHM(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_ABJGBMELGHM(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ABJGBMELGHM(&mut self, v: super::RogueFormulaSelectInfo::RogueFormulaSelectInfo) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ABJGBMELGHM(&mut self) -> &mut super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ABJGBMELGHM(&mut self) -> super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if self.has_ABJGBMELGHM() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()
        }
    }

    // .MEAOBGAGCBP NGADLLOKKCM = 1264;

    pub fn NGADLLOKKCM(&self) -> &super::MEAOBGAGCBP::MEAOBGAGCBP {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(ref v)) => v,
            _ => <super::MEAOBGAGCBP::MEAOBGAGCBP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NGADLLOKKCM(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_NGADLLOKKCM(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NGADLLOKKCM(&mut self, v: super::MEAOBGAGCBP::MEAOBGAGCBP) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NGADLLOKKCM(&mut self) -> &mut super::MEAOBGAGCBP::MEAOBGAGCBP {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(super::MEAOBGAGCBP::MEAOBGAGCBP::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NGADLLOKKCM(&mut self) -> super::MEAOBGAGCBP::MEAOBGAGCBP {
        if self.has_NGADLLOKKCM() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MEAOBGAGCBP::MEAOBGAGCBP::new()
        }
    }

    // .PNAPDEOOIMO BLOLFKEOJEP = 1376;

    pub fn BLOLFKEOJEP(&self) -> &super::PNAPDEOOIMO::PNAPDEOOIMO {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(ref v)) => v,
            _ => <super::PNAPDEOOIMO::PNAPDEOOIMO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BLOLFKEOJEP(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_BLOLFKEOJEP(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BLOLFKEOJEP(&mut self, v: super::PNAPDEOOIMO::PNAPDEOOIMO) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BLOLFKEOJEP(&mut self) -> &mut super::PNAPDEOOIMO::PNAPDEOOIMO {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(super::PNAPDEOOIMO::PNAPDEOOIMO::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BLOLFKEOJEP(&mut self) -> super::PNAPDEOOIMO::PNAPDEOOIMO {
        if self.has_BLOLFKEOJEP() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PNAPDEOOIMO::PNAPDEOOIMO::new()
        }
    }

    // .HDAFNKCLLOL BIJHCHJPIPL = 1682;

    pub fn BIJHCHJPIPL(&self) -> &super::HDAFNKCLLOL::HDAFNKCLLOL {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(ref v)) => v,
            _ => <super::HDAFNKCLLOL::HDAFNKCLLOL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BIJHCHJPIPL(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_BIJHCHJPIPL(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BIJHCHJPIPL(&mut self, v: super::HDAFNKCLLOL::HDAFNKCLLOL) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BIJHCHJPIPL(&mut self) -> &mut super::HDAFNKCLLOL::HDAFNKCLLOL {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(super::HDAFNKCLLOL::HDAFNKCLLOL::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BIJHCHJPIPL(&mut self) -> super::HDAFNKCLLOL::HDAFNKCLLOL {
        if self.has_BIJHCHJPIPL() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HDAFNKCLLOL::HDAFNKCLLOL::new()
        }
    }

    // .PGOOGPIPEDJ OBNDBHFEEOH = 1971;

    pub fn OBNDBHFEEOH(&self) -> &super::PGOOGPIPEDJ::PGOOGPIPEDJ {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(ref v)) => v,
            _ => <super::PGOOGPIPEDJ::PGOOGPIPEDJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OBNDBHFEEOH(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_OBNDBHFEEOH(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OBNDBHFEEOH(&mut self, v: super::PGOOGPIPEDJ::PGOOGPIPEDJ) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OBNDBHFEEOH(&mut self) -> &mut super::PGOOGPIPEDJ::PGOOGPIPEDJ {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(super::PGOOGPIPEDJ::PGOOGPIPEDJ::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OBNDBHFEEOH(&mut self) -> super::PGOOGPIPEDJ::PGOOGPIPEDJ {
        if self.has_OBNDBHFEEOH() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PGOOGPIPEDJ::PGOOGPIPEDJ::new()
        }
    }

    // .NBNJNEMFNJJ LFBDKADLOOO = 1129;

    pub fn LFBDKADLOOO(&self) -> &super::NBNJNEMFNJJ::NBNJNEMFNJJ {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(ref v)) => v,
            _ => <super::NBNJNEMFNJJ::NBNJNEMFNJJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LFBDKADLOOO(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_LFBDKADLOOO(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LFBDKADLOOO(&mut self, v: super::NBNJNEMFNJJ::NBNJNEMFNJJ) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LFBDKADLOOO(&mut self) -> &mut super::NBNJNEMFNJJ::NBNJNEMFNJJ {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(super::NBNJNEMFNJJ::NBNJNEMFNJJ::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LFBDKADLOOO(&mut self) -> super::NBNJNEMFNJJ::NBNJNEMFNJJ {
        if self.has_LFBDKADLOOO() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NBNJNEMFNJJ::NBNJNEMFNJJ::new()
        }
    }

    // .HDAFNKCLLOL CHMLBDEOCPN = 654;

    pub fn CHMLBDEOCPN(&self) -> &super::HDAFNKCLLOL::HDAFNKCLLOL {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(ref v)) => v,
            _ => <super::HDAFNKCLLOL::HDAFNKCLLOL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CHMLBDEOCPN(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_CHMLBDEOCPN(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CHMLBDEOCPN(&mut self, v: super::HDAFNKCLLOL::HDAFNKCLLOL) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CHMLBDEOCPN(&mut self) -> &mut super::HDAFNKCLLOL::HDAFNKCLLOL {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(super::HDAFNKCLLOL::HDAFNKCLLOL::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CHMLBDEOCPN(&mut self) -> super::HDAFNKCLLOL::HDAFNKCLLOL {
        if self.has_CHMLBDEOCPN() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HDAFNKCLLOL::HDAFNKCLLOL::new()
        }
    }

    // .HDAFNKCLLOL LLHGHNHAJGD = 416;

    pub fn LLHGHNHAJGD(&self) -> &super::HDAFNKCLLOL::HDAFNKCLLOL {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(ref v)) => v,
            _ => <super::HDAFNKCLLOL::HDAFNKCLLOL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LLHGHNHAJGD(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_LLHGHNHAJGD(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LLHGHNHAJGD(&mut self, v: super::HDAFNKCLLOL::HDAFNKCLLOL) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LLHGHNHAJGD(&mut self) -> &mut super::HDAFNKCLLOL::HDAFNKCLLOL {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(super::HDAFNKCLLOL::HDAFNKCLLOL::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LLHGHNHAJGD(&mut self) -> super::HDAFNKCLLOL::HDAFNKCLLOL {
        if self.has_LLHGHNHAJGD() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HDAFNKCLLOL::HDAFNKCLLOL::new()
        }
    }

    // .HDAFNKCLLOL HJPBJHKFEEB = 94;

    pub fn HJPBJHKFEEB(&self) -> &super::HDAFNKCLLOL::HDAFNKCLLOL {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(ref v)) => v,
            _ => <super::HDAFNKCLLOL::HDAFNKCLLOL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HJPBJHKFEEB(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_HJPBJHKFEEB(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HJPBJHKFEEB(&mut self, v: super::HDAFNKCLLOL::HDAFNKCLLOL) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HJPBJHKFEEB(&mut self) -> &mut super::HDAFNKCLLOL::HDAFNKCLLOL {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(super::HDAFNKCLLOL::HDAFNKCLLOL::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HJPBJHKFEEB(&mut self) -> super::HDAFNKCLLOL::HDAFNKCLLOL {
        if self.has_HJPBJHKFEEB() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HDAFNKCLLOL::HDAFNKCLLOL::new()
        }
    }

    // .BLBALBLMNHF HKAIFNDCLOE = 371;

    pub fn HKAIFNDCLOE(&self) -> &super::BLBALBLMNHF::BLBALBLMNHF {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(ref v)) => v,
            _ => <super::BLBALBLMNHF::BLBALBLMNHF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HKAIFNDCLOE(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_HKAIFNDCLOE(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HKAIFNDCLOE(&mut self, v: super::BLBALBLMNHF::BLBALBLMNHF) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HKAIFNDCLOE(&mut self) -> &mut super::BLBALBLMNHF::BLBALBLMNHF {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(super::BLBALBLMNHF::BLBALBLMNHF::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HKAIFNDCLOE(&mut self) -> super::BLBALBLMNHF::BLBALBLMNHF {
        if self.has_HKAIFNDCLOE() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BLBALBLMNHF::BLBALBLMNHF::new()
        }
    }

    // .BLBALBLMNHF AOBJJGABPHE = 359;

    pub fn AOBJJGABPHE(&self) -> &super::BLBALBLMNHF::BLBALBLMNHF {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(ref v)) => v,
            _ => <super::BLBALBLMNHF::BLBALBLMNHF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AOBJJGABPHE(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_AOBJJGABPHE(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AOBJJGABPHE(&mut self, v: super::BLBALBLMNHF::BLBALBLMNHF) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AOBJJGABPHE(&mut self) -> &mut super::BLBALBLMNHF::BLBALBLMNHF {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(super::BLBALBLMNHF::BLBALBLMNHF::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AOBJJGABPHE(&mut self) -> super::BLBALBLMNHF::BLBALBLMNHF {
        if self.has_AOBJJGABPHE() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BLBALBLMNHF::BLBALBLMNHF::new()
        }
    }

    // .BLBALBLMNHF GOIKBMGMACB = 1813;

    pub fn GOIKBMGMACB(&self) -> &super::BLBALBLMNHF::BLBALBLMNHF {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(ref v)) => v,
            _ => <super::BLBALBLMNHF::BLBALBLMNHF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GOIKBMGMACB(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_GOIKBMGMACB(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GOIKBMGMACB(&mut self, v: super::BLBALBLMNHF::BLBALBLMNHF) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GOIKBMGMACB(&mut self) -> &mut super::BLBALBLMNHF::BLBALBLMNHF {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(super::BLBALBLMNHF::BLBALBLMNHF::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GOIKBMGMACB(&mut self) -> super::BLBALBLMNHF::BLBALBLMNHF {
        if self.has_GOIKBMGMACB() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BLBALBLMNHF::BLBALBLMNHF::new()
        }
    }

    // .CIAGAEFNFNI DJGFKGBBHGC = 1604;

    pub fn DJGFKGBBHGC(&self) -> &super::CIAGAEFNFNI::CIAGAEFNFNI {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(ref v)) => v,
            _ => <super::CIAGAEFNFNI::CIAGAEFNFNI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DJGFKGBBHGC(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_DJGFKGBBHGC(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DJGFKGBBHGC(&mut self, v: super::CIAGAEFNFNI::CIAGAEFNFNI) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DJGFKGBBHGC(&mut self) -> &mut super::CIAGAEFNFNI::CIAGAEFNFNI {
        if let ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(super::CIAGAEFNFNI::CIAGAEFNFNI::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DJGFKGBBHGC(&mut self) -> super::CIAGAEFNFNI::CIAGAEFNFNI {
        if self.has_DJGFKGBBHGC() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CIAGAEFNFNI::CIAGAEFNFNI::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(26);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo>(
            "NEMHMHFOLOA",
            FDEMONEGBII::has_NEMHMHFOLOA,
            FDEMONEGBII::NEMHMHFOLOA,
            FDEMONEGBII::mut_NEMHMHFOLOA,
            FDEMONEGBII::set_NEMHMHFOLOA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EPCHDIJLFCC::EPCHDIJLFCC>(
            "KDGCIMNGHAB",
            FDEMONEGBII::has_KDGCIMNGHAB,
            FDEMONEGBII::KDGCIMNGHAB,
            FDEMONEGBII::mut_KDGCIMNGHAB,
            FDEMONEGBII::set_KDGCIMNGHAB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PLFJJDAEMCO::PLFJJDAEMCO>(
            "LGEMAENMHND",
            FDEMONEGBII::has_LGEMAENMHND,
            FDEMONEGBII::LGEMAENMHND,
            FDEMONEGBII::mut_LGEMAENMHND,
            FDEMONEGBII::set_LGEMAENMHND,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DHKJEJGGNOI::DHKJEJGGNOI>(
            "NAPHKFHDAGP",
            FDEMONEGBII::has_NAPHKFHDAGP,
            FDEMONEGBII::NAPHKFHDAGP,
            FDEMONEGBII::mut_NAPHKFHDAGP,
            FDEMONEGBII::set_NAPHKFHDAGP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OKKAKMHNPLK::OKKAKMHNPLK>(
            "JJFMEDLBOGI",
            FDEMONEGBII::has_JJFMEDLBOGI,
            FDEMONEGBII::JJFMEDLBOGI,
            FDEMONEGBII::mut_JJFMEDLBOGI,
            FDEMONEGBII::set_JJFMEDLBOGI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LJLCHOEHGPE::LJLCHOEHGPE>(
            "MEHHNAIIHPL",
            FDEMONEGBII::has_MEHHNAIIHPL,
            FDEMONEGBII::MEHHNAIIHPL,
            FDEMONEGBII::mut_MEHHNAIIHPL,
            FDEMONEGBII::set_MEHHNAIIHPL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MJECKLDALOL::MJECKLDALOL>(
            "DDBBBECJPCG",
            FDEMONEGBII::has_DDBBBECJPCG,
            FDEMONEGBII::DDBBBECJPCG,
            FDEMONEGBII::mut_DDBBBECJPCG,
            FDEMONEGBII::set_DDBBBECJPCG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NABFAFAKJBH::NABFAFAKJBH>(
            "PONCHMEECOA",
            FDEMONEGBII::has_PONCHMEECOA,
            FDEMONEGBII::PONCHMEECOA,
            FDEMONEGBII::mut_PONCHMEECOA,
            FDEMONEGBII::set_PONCHMEECOA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BBKMOPPLBEP::BBKMOPPLBEP>(
            "AIBIPOFHGEE",
            FDEMONEGBII::has_AIBIPOFHGEE,
            FDEMONEGBII::AIBIPOFHGEE,
            FDEMONEGBII::mut_AIBIPOFHGEE,
            FDEMONEGBII::set_AIBIPOFHGEE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::POODPJEIPOM::POODPJEIPOM>(
            "DGNNIHBFMHJ",
            FDEMONEGBII::has_DGNNIHBFMHJ,
            FDEMONEGBII::DGNNIHBFMHJ,
            FDEMONEGBII::mut_DGNNIHBFMHJ,
            FDEMONEGBII::set_DGNNIHBFMHJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AMGLLIELKEF::AMGLLIELKEF>(
            "HKPBAAMJKFL",
            FDEMONEGBII::has_HKPBAAMJKFL,
            FDEMONEGBII::HKPBAAMJKFL,
            FDEMONEGBII::mut_HKPBAAMJKFL,
            FDEMONEGBII::set_HKPBAAMJKFL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MGPDLCDDBCB::MGPDLCDDBCB>(
            "DLPELPPMGKC",
            FDEMONEGBII::has_DLPELPPMGKC,
            FDEMONEGBII::DLPELPPMGKC,
            FDEMONEGBII::mut_DLPELPPMGKC,
            FDEMONEGBII::set_DLPELPPMGKC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IFEFOFLJNML::IFEFOFLJNML>(
            "GAFAFKNADAG",
            FDEMONEGBII::has_GAFAFKNADAG,
            FDEMONEGBII::GAFAFKNADAG,
            FDEMONEGBII::mut_GAFAFKNADAG,
            FDEMONEGBII::set_GAFAFKNADAG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueFormulaSelectInfo::RogueFormulaSelectInfo>(
            "ABJGBMELGHM",
            FDEMONEGBII::has_ABJGBMELGHM,
            FDEMONEGBII::ABJGBMELGHM,
            FDEMONEGBII::mut_ABJGBMELGHM,
            FDEMONEGBII::set_ABJGBMELGHM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MEAOBGAGCBP::MEAOBGAGCBP>(
            "NGADLLOKKCM",
            FDEMONEGBII::has_NGADLLOKKCM,
            FDEMONEGBII::NGADLLOKKCM,
            FDEMONEGBII::mut_NGADLLOKKCM,
            FDEMONEGBII::set_NGADLLOKKCM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PNAPDEOOIMO::PNAPDEOOIMO>(
            "BLOLFKEOJEP",
            FDEMONEGBII::has_BLOLFKEOJEP,
            FDEMONEGBII::BLOLFKEOJEP,
            FDEMONEGBII::mut_BLOLFKEOJEP,
            FDEMONEGBII::set_BLOLFKEOJEP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HDAFNKCLLOL::HDAFNKCLLOL>(
            "BIJHCHJPIPL",
            FDEMONEGBII::has_BIJHCHJPIPL,
            FDEMONEGBII::BIJHCHJPIPL,
            FDEMONEGBII::mut_BIJHCHJPIPL,
            FDEMONEGBII::set_BIJHCHJPIPL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PGOOGPIPEDJ::PGOOGPIPEDJ>(
            "OBNDBHFEEOH",
            FDEMONEGBII::has_OBNDBHFEEOH,
            FDEMONEGBII::OBNDBHFEEOH,
            FDEMONEGBII::mut_OBNDBHFEEOH,
            FDEMONEGBII::set_OBNDBHFEEOH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NBNJNEMFNJJ::NBNJNEMFNJJ>(
            "LFBDKADLOOO",
            FDEMONEGBII::has_LFBDKADLOOO,
            FDEMONEGBII::LFBDKADLOOO,
            FDEMONEGBII::mut_LFBDKADLOOO,
            FDEMONEGBII::set_LFBDKADLOOO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HDAFNKCLLOL::HDAFNKCLLOL>(
            "CHMLBDEOCPN",
            FDEMONEGBII::has_CHMLBDEOCPN,
            FDEMONEGBII::CHMLBDEOCPN,
            FDEMONEGBII::mut_CHMLBDEOCPN,
            FDEMONEGBII::set_CHMLBDEOCPN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HDAFNKCLLOL::HDAFNKCLLOL>(
            "LLHGHNHAJGD",
            FDEMONEGBII::has_LLHGHNHAJGD,
            FDEMONEGBII::LLHGHNHAJGD,
            FDEMONEGBII::mut_LLHGHNHAJGD,
            FDEMONEGBII::set_LLHGHNHAJGD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HDAFNKCLLOL::HDAFNKCLLOL>(
            "HJPBJHKFEEB",
            FDEMONEGBII::has_HJPBJHKFEEB,
            FDEMONEGBII::HJPBJHKFEEB,
            FDEMONEGBII::mut_HJPBJHKFEEB,
            FDEMONEGBII::set_HJPBJHKFEEB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BLBALBLMNHF::BLBALBLMNHF>(
            "HKAIFNDCLOE",
            FDEMONEGBII::has_HKAIFNDCLOE,
            FDEMONEGBII::HKAIFNDCLOE,
            FDEMONEGBII::mut_HKAIFNDCLOE,
            FDEMONEGBII::set_HKAIFNDCLOE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BLBALBLMNHF::BLBALBLMNHF>(
            "AOBJJGABPHE",
            FDEMONEGBII::has_AOBJJGABPHE,
            FDEMONEGBII::AOBJJGABPHE,
            FDEMONEGBII::mut_AOBJJGABPHE,
            FDEMONEGBII::set_AOBJJGABPHE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BLBALBLMNHF::BLBALBLMNHF>(
            "GOIKBMGMACB",
            FDEMONEGBII::has_GOIKBMGMACB,
            FDEMONEGBII::GOIKBMGMACB,
            FDEMONEGBII::mut_GOIKBMGMACB,
            FDEMONEGBII::set_GOIKBMGMACB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CIAGAEFNFNI::CIAGAEFNFNI>(
            "DJGFKGBBHGC",
            FDEMONEGBII::has_DJGFKGBBHGC,
            FDEMONEGBII::DJGFKGBBHGC,
            FDEMONEGBII::mut_DJGFKGBBHGC,
            FDEMONEGBII::set_DJGFKGBBHGC,
        ));
        oneofs.push(fdemonegbii::DKFKPIPNNLF::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FDEMONEGBII>(
            "FDEMONEGBII",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FDEMONEGBII {
    const NAME: &'static str = "FDEMONEGBII";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                5546 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(is.read_message()?));
                },
                6898 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(is.read_message()?));
                },
                3578 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(is.read_message()?));
                },
                14122 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(is.read_message()?));
                },
                8738 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(is.read_message()?));
                },
                8666 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(is.read_message()?));
                },
                10642 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(is.read_message()?));
                },
                770 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(is.read_message()?));
                },
                5882 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(is.read_message()?));
                },
                11122 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(is.read_message()?));
                },
                5170 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(is.read_message()?));
                },
                6098 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(is.read_message()?));
                },
                10162 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(is.read_message()?));
                },
                10978 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(is.read_message()?));
                },
                10114 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(is.read_message()?));
                },
                11010 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(is.read_message()?));
                },
                13458 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(is.read_message()?));
                },
                15770 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(is.read_message()?));
                },
                9034 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(is.read_message()?));
                },
                5234 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(is.read_message()?));
                },
                3330 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(is.read_message()?));
                },
                754 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(is.read_message()?));
                },
                2970 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(is.read_message()?));
                },
                2874 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(is.read_message()?));
                },
                14506 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(is.read_message()?));
                },
                12834 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.DKFKPIPNNLF {
            match v {
                &fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.DKFKPIPNNLF {
            match v {
                &fdemonegbii::DKFKPIPNNLF::NEMHMHFOLOA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(693, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::KDGCIMNGHAB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(862, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::LGEMAENMHND(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(447, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::NAPHKFHDAGP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1765, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::JJFMEDLBOGI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1092, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::MEHHNAIIHPL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1083, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::DDBBBECJPCG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1330, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::PONCHMEECOA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(96, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::AIBIPOFHGEE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(735, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::DGNNIHBFMHJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1390, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::HKPBAAMJKFL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(646, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::DLPELPPMGKC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(762, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::GAFAFKNADAG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1270, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::ABJGBMELGHM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1372, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::NGADLLOKKCM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1264, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::BLOLFKEOJEP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1376, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::BIJHCHJPIPL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1682, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::OBNDBHFEEOH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1971, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::LFBDKADLOOO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1129, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::CHMLBDEOCPN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(654, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::LLHGHNHAJGD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(416, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::HJPBJHKFEEB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(94, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::HKAIFNDCLOE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(371, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::AOBJJGABPHE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(359, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::GOIKBMGMACB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1813, v, os)?;
                },
                &fdemonegbii::DKFKPIPNNLF::DJGFKGBBHGC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1604, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FDEMONEGBII {
        FDEMONEGBII::new()
    }

    fn clear(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FDEMONEGBII {
        static instance: FDEMONEGBII = FDEMONEGBII {
            DKFKPIPNNLF: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FDEMONEGBII {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FDEMONEGBII").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FDEMONEGBII {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FDEMONEGBII {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FDEMONEGBII`
pub mod fdemonegbii {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:FDEMONEGBII.DKFKPIPNNLF)
    pub enum DKFKPIPNNLF {
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.NEMHMHFOLOA)
        NEMHMHFOLOA(super::super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.KDGCIMNGHAB)
        KDGCIMNGHAB(super::super::EPCHDIJLFCC::EPCHDIJLFCC),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.LGEMAENMHND)
        LGEMAENMHND(super::super::PLFJJDAEMCO::PLFJJDAEMCO),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.NAPHKFHDAGP)
        NAPHKFHDAGP(super::super::DHKJEJGGNOI::DHKJEJGGNOI),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.JJFMEDLBOGI)
        JJFMEDLBOGI(super::super::OKKAKMHNPLK::OKKAKMHNPLK),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.MEHHNAIIHPL)
        MEHHNAIIHPL(super::super::LJLCHOEHGPE::LJLCHOEHGPE),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.DDBBBECJPCG)
        DDBBBECJPCG(super::super::MJECKLDALOL::MJECKLDALOL),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.PONCHMEECOA)
        PONCHMEECOA(super::super::NABFAFAKJBH::NABFAFAKJBH),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.AIBIPOFHGEE)
        AIBIPOFHGEE(super::super::BBKMOPPLBEP::BBKMOPPLBEP),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.DGNNIHBFMHJ)
        DGNNIHBFMHJ(super::super::POODPJEIPOM::POODPJEIPOM),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.HKPBAAMJKFL)
        HKPBAAMJKFL(super::super::AMGLLIELKEF::AMGLLIELKEF),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.DLPELPPMGKC)
        DLPELPPMGKC(super::super::MGPDLCDDBCB::MGPDLCDDBCB),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.GAFAFKNADAG)
        GAFAFKNADAG(super::super::IFEFOFLJNML::IFEFOFLJNML),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.ABJGBMELGHM)
        ABJGBMELGHM(super::super::RogueFormulaSelectInfo::RogueFormulaSelectInfo),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.NGADLLOKKCM)
        NGADLLOKKCM(super::super::MEAOBGAGCBP::MEAOBGAGCBP),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.BLOLFKEOJEP)
        BLOLFKEOJEP(super::super::PNAPDEOOIMO::PNAPDEOOIMO),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.BIJHCHJPIPL)
        BIJHCHJPIPL(super::super::HDAFNKCLLOL::HDAFNKCLLOL),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.OBNDBHFEEOH)
        OBNDBHFEEOH(super::super::PGOOGPIPEDJ::PGOOGPIPEDJ),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.LFBDKADLOOO)
        LFBDKADLOOO(super::super::NBNJNEMFNJJ::NBNJNEMFNJJ),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.CHMLBDEOCPN)
        CHMLBDEOCPN(super::super::HDAFNKCLLOL::HDAFNKCLLOL),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.LLHGHNHAJGD)
        LLHGHNHAJGD(super::super::HDAFNKCLLOL::HDAFNKCLLOL),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.HJPBJHKFEEB)
        HJPBJHKFEEB(super::super::HDAFNKCLLOL::HDAFNKCLLOL),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.HKAIFNDCLOE)
        HKAIFNDCLOE(super::super::BLBALBLMNHF::BLBALBLMNHF),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.AOBJJGABPHE)
        AOBJJGABPHE(super::super::BLBALBLMNHF::BLBALBLMNHF),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.GOIKBMGMACB)
        GOIKBMGMACB(super::super::BLBALBLMNHF::BLBALBLMNHF),
        // @@protoc_insertion_point(oneof_field:FDEMONEGBII.DJGFKGBBHGC)
        DJGFKGBBHGC(super::super::CIAGAEFNFNI::CIAGAEFNFNI),
    }

    impl ::protobuf::Oneof for DKFKPIPNNLF {
    }

    impl ::protobuf::OneofFull for DKFKPIPNNLF {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FDEMONEGBII as ::protobuf::MessageFull>::descriptor().oneof_by_name("DKFKPIPNNLF").unwrap()).clone()
        }
    }

    impl DKFKPIPNNLF {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DKFKPIPNNLF>("DKFKPIPNNLF")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11FDEMONEGBII.proto\x1a\x11AMGLLIELKEF.proto\x1a\x11BBKMOPPLBEP.prot\
    o\x1a\x11BLBALBLMNHF.proto\x1a\x11CIAGAEFNFNI.proto\x1a\x11DHKJEJGGNOI.p\
    roto\x1a\x11EPCHDIJLFCC.proto\x1a\x11HDAFNKCLLOL.proto\x1a\x11IFEFOFLJNM\
    L.proto\x1a\x11LJLCHOEHGPE.proto\x1a\x11MEAOBGAGCBP.proto\x1a\x11MGPDLCD\
    DBCB.proto\x1a\x11MJECKLDALOL.proto\x1a\x11NABFAFAKJBH.proto\x1a\x11NBNJ\
    NEMFNJJ.proto\x1a\x11OKKAKMHNPLK.proto\x1a\x11PGOOGPIPEDJ.proto\x1a\x11P\
    LFJJDAEMCO.proto\x1a\x11PNAPDEOOIMO.proto\x1a\x11POODPJEIPOM.proto\x1a\
    \x1fRogueCommonBuffSelectInfo.proto\x1a\x1cRogueFormulaSelectInfo.proto\
    \"\xe1\n\n\x0bFDEMONEGBII\x12?\n\x0bNEMHMHFOLOA\x18\xb5\x05\x20\x01(\x0b\
    2\x1a.RogueCommonBuffSelectInfoH\0R\x0bNEMHMHFOLOA\x121\n\x0bKDGCIMNGHAB\
    \x18\xde\x06\x20\x01(\x0b2\x0c.EPCHDIJLFCCH\0R\x0bKDGCIMNGHAB\x121\n\x0b\
    LGEMAENMHND\x18\xbf\x03\x20\x01(\x0b2\x0c.PLFJJDAEMCOH\0R\x0bLGEMAENMHND\
    \x121\n\x0bNAPHKFHDAGP\x18\xe5\r\x20\x01(\x0b2\x0c.DHKJEJGGNOIH\0R\x0bNA\
    PHKFHDAGP\x121\n\x0bJJFMEDLBOGI\x18\xc4\x08\x20\x01(\x0b2\x0c.OKKAKMHNPL\
    KH\0R\x0bJJFMEDLBOGI\x121\n\x0bMEHHNAIIHPL\x18\xbb\x08\x20\x01(\x0b2\x0c\
    .LJLCHOEHGPEH\0R\x0bMEHHNAIIHPL\x121\n\x0bDDBBBECJPCG\x18\xb2\n\x20\x01(\
    \x0b2\x0c.MJECKLDALOLH\0R\x0bDDBBBECJPCG\x120\n\x0bPONCHMEECOA\x18`\x20\
    \x01(\x0b2\x0c.NABFAFAKJBHH\0R\x0bPONCHMEECOA\x121\n\x0bAIBIPOFHGEE\x18\
    \xdf\x05\x20\x01(\x0b2\x0c.BBKMOPPLBEPH\0R\x0bAIBIPOFHGEE\x121\n\x0bDGNN\
    IHBFMHJ\x18\xee\n\x20\x01(\x0b2\x0c.POODPJEIPOMH\0R\x0bDGNNIHBFMHJ\x121\
    \n\x0bHKPBAAMJKFL\x18\x86\x05\x20\x01(\x0b2\x0c.AMGLLIELKEFH\0R\x0bHKPBA\
    AMJKFL\x121\n\x0bDLPELPPMGKC\x18\xfa\x05\x20\x01(\x0b2\x0c.MGPDLCDDBCBH\
    \0R\x0bDLPELPPMGKC\x121\n\x0bGAFAFKNADAG\x18\xf6\t\x20\x01(\x0b2\x0c.IFE\
    FOFLJNMLH\0R\x0bGAFAFKNADAG\x12<\n\x0bABJGBMELGHM\x18\xdc\n\x20\x01(\x0b\
    2\x17.RogueFormulaSelectInfoH\0R\x0bABJGBMELGHM\x121\n\x0bNGADLLOKKCM\
    \x18\xf0\t\x20\x01(\x0b2\x0c.MEAOBGAGCBPH\0R\x0bNGADLLOKKCM\x121\n\x0bBL\
    OLFKEOJEP\x18\xe0\n\x20\x01(\x0b2\x0c.PNAPDEOOIMOH\0R\x0bBLOLFKEOJEP\x12\
    1\n\x0bBIJHCHJPIPL\x18\x92\r\x20\x01(\x0b2\x0c.HDAFNKCLLOLH\0R\x0bBIJHCH\
    JPIPL\x121\n\x0bOBNDBHFEEOH\x18\xb3\x0f\x20\x01(\x0b2\x0c.PGOOGPIPEDJH\0\
    R\x0bOBNDBHFEEOH\x121\n\x0bLFBDKADLOOO\x18\xe9\x08\x20\x01(\x0b2\x0c.NBN\
    JNEMFNJJH\0R\x0bLFBDKADLOOO\x121\n\x0bCHMLBDEOCPN\x18\x8e\x05\x20\x01(\
    \x0b2\x0c.HDAFNKCLLOLH\0R\x0bCHMLBDEOCPN\x121\n\x0bLLHGHNHAJGD\x18\xa0\
    \x03\x20\x01(\x0b2\x0c.HDAFNKCLLOLH\0R\x0bLLHGHNHAJGD\x120\n\x0bHJPBJHKF\
    EEB\x18^\x20\x01(\x0b2\x0c.HDAFNKCLLOLH\0R\x0bHJPBJHKFEEB\x121\n\x0bHKAI\
    FNDCLOE\x18\xf3\x02\x20\x01(\x0b2\x0c.BLBALBLMNHFH\0R\x0bHKAIFNDCLOE\x12\
    1\n\x0bAOBJJGABPHE\x18\xe7\x02\x20\x01(\x0b2\x0c.BLBALBLMNHFH\0R\x0bAOBJ\
    JGABPHE\x121\n\x0bGOIKBMGMACB\x18\x95\x0e\x20\x01(\x0b2\x0c.BLBALBLMNHFH\
    \0R\x0bGOIKBMGMACB\x121\n\x0bDJGFKGBBHGC\x18\xc4\x0c\x20\x01(\x0b2\x0c.C\
    IAGAEFNFNIH\0R\x0bDJGFKGBBHGCB\r\n\x0bDKFKPIPNNLFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(21);
            deps.push(super::AMGLLIELKEF::file_descriptor().clone());
            deps.push(super::BBKMOPPLBEP::file_descriptor().clone());
            deps.push(super::BLBALBLMNHF::file_descriptor().clone());
            deps.push(super::CIAGAEFNFNI::file_descriptor().clone());
            deps.push(super::DHKJEJGGNOI::file_descriptor().clone());
            deps.push(super::EPCHDIJLFCC::file_descriptor().clone());
            deps.push(super::HDAFNKCLLOL::file_descriptor().clone());
            deps.push(super::IFEFOFLJNML::file_descriptor().clone());
            deps.push(super::LJLCHOEHGPE::file_descriptor().clone());
            deps.push(super::MEAOBGAGCBP::file_descriptor().clone());
            deps.push(super::MGPDLCDDBCB::file_descriptor().clone());
            deps.push(super::MJECKLDALOL::file_descriptor().clone());
            deps.push(super::NABFAFAKJBH::file_descriptor().clone());
            deps.push(super::NBNJNEMFNJJ::file_descriptor().clone());
            deps.push(super::OKKAKMHNPLK::file_descriptor().clone());
            deps.push(super::PGOOGPIPEDJ::file_descriptor().clone());
            deps.push(super::PLFJJDAEMCO::file_descriptor().clone());
            deps.push(super::PNAPDEOOIMO::file_descriptor().clone());
            deps.push(super::POODPJEIPOM::file_descriptor().clone());
            deps.push(super::RogueCommonBuffSelectInfo::file_descriptor().clone());
            deps.push(super::RogueFormulaSelectInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FDEMONEGBII::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
