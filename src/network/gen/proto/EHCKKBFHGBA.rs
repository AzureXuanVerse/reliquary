// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EHCKKBFHGBA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:EHCKKBFHGBA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EHCKKBFHGBA {
    // message fields
    // @@protoc_insertion_point(field:EHCKKBFHGBA.APOHJEGEEND)
    pub APOHJEGEEND: ::protobuf::EnumOrUnknown<super::AvatarType::AvatarType>,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.id)
    pub id: u32,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.level)
    pub level: u32,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.rank)
    pub rank: u32,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.CMBBJPPMHPM)
    pub CMBBJPPMHPM: u32,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.skilltree_list)
    pub skilltree_list: ::std::vec::Vec<super::AvatarSkillTree::AvatarSkillTree>,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.equipment_list)
    pub equipment_list: ::std::vec::Vec<super::NPFJGKMNCML::NPFJGKMNCML>,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.KENEFEHNNDI)
    pub KENEFEHNNDI: u32,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.promotion)
    pub promotion: u32,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.relic_list)
    pub relic_list: ::std::vec::Vec<super::NBAGPMMALEF::NBAGPMMALEF>,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.MMMOHAJFMID)
    pub MMMOHAJFMID: u32,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.CJEBFJLPLHL)
    pub CJEBFJLPLHL: u32,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.MBPNICPIMHH)
    pub MBPNICPIMHH: ::protobuf::MessageField<super::CDCPBIAPMBM::CDCPBIAPMBM>,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.LHLDCFOMIIK)
    pub LHLDCFOMIIK: ::protobuf::MessageField<super::MBEGINNAINL::MBEGINNAINL>,
    // @@protoc_insertion_point(field:EHCKKBFHGBA.MKJKMMIOCHB)
    pub MKJKMMIOCHB: u32,
    // special fields
    // @@protoc_insertion_point(special_field:EHCKKBFHGBA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EHCKKBFHGBA {
    fn default() -> &'a EHCKKBFHGBA {
        <EHCKKBFHGBA as ::protobuf::Message>::default_instance()
    }
}

impl EHCKKBFHGBA {
    pub fn new() -> EHCKKBFHGBA {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "APOHJEGEEND",
            |m: &EHCKKBFHGBA| { &m.APOHJEGEEND },
            |m: &mut EHCKKBFHGBA| { &mut m.APOHJEGEEND },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &EHCKKBFHGBA| { &m.id },
            |m: &mut EHCKKBFHGBA| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &EHCKKBFHGBA| { &m.level },
            |m: &mut EHCKKBFHGBA| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rank",
            |m: &EHCKKBFHGBA| { &m.rank },
            |m: &mut EHCKKBFHGBA| { &mut m.rank },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMBBJPPMHPM",
            |m: &EHCKKBFHGBA| { &m.CMBBJPPMHPM },
            |m: &mut EHCKKBFHGBA| { &mut m.CMBBJPPMHPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "skilltree_list",
            |m: &EHCKKBFHGBA| { &m.skilltree_list },
            |m: &mut EHCKKBFHGBA| { &mut m.skilltree_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "equipment_list",
            |m: &EHCKKBFHGBA| { &m.equipment_list },
            |m: &mut EHCKKBFHGBA| { &mut m.equipment_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KENEFEHNNDI",
            |m: &EHCKKBFHGBA| { &m.KENEFEHNNDI },
            |m: &mut EHCKKBFHGBA| { &mut m.KENEFEHNNDI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "promotion",
            |m: &EHCKKBFHGBA| { &m.promotion },
            |m: &mut EHCKKBFHGBA| { &mut m.promotion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "relic_list",
            |m: &EHCKKBFHGBA| { &m.relic_list },
            |m: &mut EHCKKBFHGBA| { &mut m.relic_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MMMOHAJFMID",
            |m: &EHCKKBFHGBA| { &m.MMMOHAJFMID },
            |m: &mut EHCKKBFHGBA| { &mut m.MMMOHAJFMID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CJEBFJLPLHL",
            |m: &EHCKKBFHGBA| { &m.CJEBFJLPLHL },
            |m: &mut EHCKKBFHGBA| { &mut m.CJEBFJLPLHL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CDCPBIAPMBM::CDCPBIAPMBM>(
            "MBPNICPIMHH",
            |m: &EHCKKBFHGBA| { &m.MBPNICPIMHH },
            |m: &mut EHCKKBFHGBA| { &mut m.MBPNICPIMHH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MBEGINNAINL::MBEGINNAINL>(
            "LHLDCFOMIIK",
            |m: &EHCKKBFHGBA| { &m.LHLDCFOMIIK },
            |m: &mut EHCKKBFHGBA| { &mut m.LHLDCFOMIIK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MKJKMMIOCHB",
            |m: &EHCKKBFHGBA| { &m.MKJKMMIOCHB },
            |m: &mut EHCKKBFHGBA| { &mut m.MKJKMMIOCHB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EHCKKBFHGBA>(
            "EHCKKBFHGBA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EHCKKBFHGBA {
    const NAME: &'static str = "EHCKKBFHGBA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.APOHJEGEEND = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.id = is.read_uint32()?;
                },
                24 => {
                    self.level = is.read_uint32()?;
                },
                32 => {
                    self.rank = is.read_uint32()?;
                },
                40 => {
                    self.CMBBJPPMHPM = is.read_uint32()?;
                },
                50 => {
                    self.skilltree_list.push(is.read_message()?);
                },
                58 => {
                    self.equipment_list.push(is.read_message()?);
                },
                64 => {
                    self.KENEFEHNNDI = is.read_uint32()?;
                },
                80 => {
                    self.promotion = is.read_uint32()?;
                },
                90 => {
                    self.relic_list.push(is.read_message()?);
                },
                96 => {
                    self.MMMOHAJFMID = is.read_uint32()?;
                },
                104 => {
                    self.CJEBFJLPLHL = is.read_uint32()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MBPNICPIMHH)?;
                },
                130 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LHLDCFOMIIK)?;
                },
                136 => {
                    self.MKJKMMIOCHB = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.APOHJEGEEND != ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(1, self.APOHJEGEEND.value());
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.id);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.level);
        }
        if self.rank != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.rank);
        }
        if self.CMBBJPPMHPM != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.CMBBJPPMHPM);
        }
        for value in &self.skilltree_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.equipment_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.KENEFEHNNDI != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.KENEFEHNNDI);
        }
        if self.promotion != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.promotion);
        }
        for value in &self.relic_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.MMMOHAJFMID != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.MMMOHAJFMID);
        }
        if self.CJEBFJLPLHL != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.CJEBFJLPLHL);
        }
        if let Some(v) = self.MBPNICPIMHH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LHLDCFOMIIK.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.MKJKMMIOCHB != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.MKJKMMIOCHB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.APOHJEGEEND != ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.APOHJEGEEND))?;
        }
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        if self.level != 0 {
            os.write_uint32(3, self.level)?;
        }
        if self.rank != 0 {
            os.write_uint32(4, self.rank)?;
        }
        if self.CMBBJPPMHPM != 0 {
            os.write_uint32(5, self.CMBBJPPMHPM)?;
        }
        for v in &self.skilltree_list {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.equipment_list {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.KENEFEHNNDI != 0 {
            os.write_uint32(8, self.KENEFEHNNDI)?;
        }
        if self.promotion != 0 {
            os.write_uint32(10, self.promotion)?;
        }
        for v in &self.relic_list {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if self.MMMOHAJFMID != 0 {
            os.write_uint32(12, self.MMMOHAJFMID)?;
        }
        if self.CJEBFJLPLHL != 0 {
            os.write_uint32(13, self.CJEBFJLPLHL)?;
        }
        if let Some(v) = self.MBPNICPIMHH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.LHLDCFOMIIK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        }
        if self.MKJKMMIOCHB != 0 {
            os.write_uint32(17, self.MKJKMMIOCHB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EHCKKBFHGBA {
        EHCKKBFHGBA::new()
    }

    fn clear(&mut self) {
        self.APOHJEGEEND = ::protobuf::EnumOrUnknown::new(super::AvatarType::AvatarType::AVATAR_TYPE_NONE);
        self.id = 0;
        self.level = 0;
        self.rank = 0;
        self.CMBBJPPMHPM = 0;
        self.skilltree_list.clear();
        self.equipment_list.clear();
        self.KENEFEHNNDI = 0;
        self.promotion = 0;
        self.relic_list.clear();
        self.MMMOHAJFMID = 0;
        self.CJEBFJLPLHL = 0;
        self.MBPNICPIMHH.clear();
        self.LHLDCFOMIIK.clear();
        self.MKJKMMIOCHB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EHCKKBFHGBA {
        static instance: EHCKKBFHGBA = EHCKKBFHGBA {
            APOHJEGEEND: ::protobuf::EnumOrUnknown::from_i32(0),
            id: 0,
            level: 0,
            rank: 0,
            CMBBJPPMHPM: 0,
            skilltree_list: ::std::vec::Vec::new(),
            equipment_list: ::std::vec::Vec::new(),
            KENEFEHNNDI: 0,
            promotion: 0,
            relic_list: ::std::vec::Vec::new(),
            MMMOHAJFMID: 0,
            CJEBFJLPLHL: 0,
            MBPNICPIMHH: ::protobuf::MessageField::none(),
            LHLDCFOMIIK: ::protobuf::MessageField::none(),
            MKJKMMIOCHB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EHCKKBFHGBA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EHCKKBFHGBA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EHCKKBFHGBA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EHCKKBFHGBA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EHCKKBFHGBA.proto\x1a\x15AvatarSkillTree.proto\x1a\x10AvatarType.p\
    roto\x1a\x11CDCPBIAPMBM.proto\x1a\x11MBEGINNAINL.proto\x1a\x11NBAGPMMALE\
    F.proto\x1a\x11NPFJGKMNCML.proto\"\xb9\x04\n\x0bEHCKKBFHGBA\x12-\n\x0bAP\
    OHJEGEEND\x18\x01\x20\x01(\x0e2\x0b.AvatarTypeR\x0bAPOHJEGEEND\x12\x0e\n\
    \x02id\x18\x02\x20\x01(\rR\x02id\x12\x14\n\x05level\x18\x03\x20\x01(\rR\
    \x05level\x12\x12\n\x04rank\x18\x04\x20\x01(\rR\x04rank\x12\x20\n\x0bCMB\
    BJPPMHPM\x18\x05\x20\x01(\rR\x0bCMBBJPPMHPM\x127\n\x0eskilltree_list\x18\
    \x06\x20\x03(\x0b2\x10.AvatarSkillTreeR\rskilltreeList\x123\n\x0eequipme\
    nt_list\x18\x07\x20\x03(\x0b2\x0c.NPFJGKMNCMLR\requipmentList\x12\x20\n\
    \x0bKENEFEHNNDI\x18\x08\x20\x01(\rR\x0bKENEFEHNNDI\x12\x1c\n\tpromotion\
    \x18\n\x20\x01(\rR\tpromotion\x12+\n\nrelic_list\x18\x0b\x20\x03(\x0b2\
    \x0c.NBAGPMMALEFR\trelicList\x12\x20\n\x0bMMMOHAJFMID\x18\x0c\x20\x01(\r\
    R\x0bMMMOHAJFMID\x12\x20\n\x0bCJEBFJLPLHL\x18\r\x20\x01(\rR\x0bCJEBFJLPL\
    HL\x12.\n\x0bMBPNICPIMHH\x18\x0f\x20\x01(\x0b2\x0c.CDCPBIAPMBMR\x0bMBPNI\
    CPIMHH\x12.\n\x0bLHLDCFOMIIK\x18\x10\x20\x01(\x0b2\x0c.MBEGINNAINLR\x0bL\
    HLDCFOMIIK\x12\x20\n\x0bMKJKMMIOCHB\x18\x11\x20\x01(\rR\x0bMKJKMMIOCHBb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::AvatarSkillTree::file_descriptor().clone());
            deps.push(super::AvatarType::file_descriptor().clone());
            deps.push(super::CDCPBIAPMBM::file_descriptor().clone());
            deps.push(super::MBEGINNAINL::file_descriptor().clone());
            deps.push(super::NBAGPMMALEF::file_descriptor().clone());
            deps.push(super::NPFJGKMNCML::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EHCKKBFHGBA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
