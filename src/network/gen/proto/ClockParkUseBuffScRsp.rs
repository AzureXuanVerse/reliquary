// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ClockParkUseBuffScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ClockParkUseBuffScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClockParkUseBuffScRsp {
    // message fields
    // @@protoc_insertion_point(field:ClockParkUseBuffScRsp.ADADHIHDHJC)
    pub ADADHIHDHJC: u32,
    // @@protoc_insertion_point(field:ClockParkUseBuffScRsp.FHEODGILEEP)
    pub FHEODGILEEP: ::protobuf::MessageField<super::MGGJKPGEGLP::MGGJKPGEGLP>,
    // @@protoc_insertion_point(field:ClockParkUseBuffScRsp.BEBCFIIABLI)
    pub BEBCFIIABLI: u32,
    // @@protoc_insertion_point(field:ClockParkUseBuffScRsp.LCEEDIGELGM)
    pub LCEEDIGELGM: u32,
    // message oneof groups
    pub DFALCDCAHFK: ::std::option::Option<clock_park_use_buff_sc_rsp::DFALCDCAHFK>,
    // special fields
    // @@protoc_insertion_point(special_field:ClockParkUseBuffScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClockParkUseBuffScRsp {
    fn default() -> &'a ClockParkUseBuffScRsp {
        <ClockParkUseBuffScRsp as ::protobuf::Message>::default_instance()
    }
}

impl ClockParkUseBuffScRsp {
    pub fn new() -> ClockParkUseBuffScRsp {
        ::std::default::Default::default()
    }

    // .OJGHBHAIGMG IFAJDNNCHMN = 2032;

    pub fn IFAJDNNCHMN(&self) -> &super::OJGHBHAIGMG::OJGHBHAIGMG {
        match self.DFALCDCAHFK {
            ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(ref v)) => v,
            _ => <super::OJGHBHAIGMG::OJGHBHAIGMG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IFAJDNNCHMN(&mut self) {
        self.DFALCDCAHFK = ::std::option::Option::None;
    }

    pub fn has_IFAJDNNCHMN(&self) -> bool {
        match self.DFALCDCAHFK {
            ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IFAJDNNCHMN(&mut self, v: super::OJGHBHAIGMG::OJGHBHAIGMG) {
        self.DFALCDCAHFK = ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IFAJDNNCHMN(&mut self) -> &mut super::OJGHBHAIGMG::OJGHBHAIGMG {
        if let ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(_)) = self.DFALCDCAHFK {
        } else {
            self.DFALCDCAHFK = ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(super::OJGHBHAIGMG::OJGHBHAIGMG::new()));
        }
        match self.DFALCDCAHFK {
            ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IFAJDNNCHMN(&mut self) -> super::OJGHBHAIGMG::OJGHBHAIGMG {
        if self.has_IFAJDNNCHMN() {
            match self.DFALCDCAHFK.take() {
                ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OJGHBHAIGMG::OJGHBHAIGMG::new()
        }
    }

    // .AMIGGMENHFA PFBOBBMELFB = 384;

    pub fn PFBOBBMELFB(&self) -> &super::AMIGGMENHFA::AMIGGMENHFA {
        match self.DFALCDCAHFK {
            ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(ref v)) => v,
            _ => <super::AMIGGMENHFA::AMIGGMENHFA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PFBOBBMELFB(&mut self) {
        self.DFALCDCAHFK = ::std::option::Option::None;
    }

    pub fn has_PFBOBBMELFB(&self) -> bool {
        match self.DFALCDCAHFK {
            ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PFBOBBMELFB(&mut self, v: super::AMIGGMENHFA::AMIGGMENHFA) {
        self.DFALCDCAHFK = ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PFBOBBMELFB(&mut self) -> &mut super::AMIGGMENHFA::AMIGGMENHFA {
        if let ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(_)) = self.DFALCDCAHFK {
        } else {
            self.DFALCDCAHFK = ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(super::AMIGGMENHFA::AMIGGMENHFA::new()));
        }
        match self.DFALCDCAHFK {
            ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PFBOBBMELFB(&mut self) -> super::AMIGGMENHFA::AMIGGMENHFA {
        if self.has_PFBOBBMELFB() {
            match self.DFALCDCAHFK.take() {
                ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AMIGGMENHFA::AMIGGMENHFA::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ADADHIHDHJC",
            |m: &ClockParkUseBuffScRsp| { &m.ADADHIHDHJC },
            |m: &mut ClockParkUseBuffScRsp| { &mut m.ADADHIHDHJC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MGGJKPGEGLP::MGGJKPGEGLP>(
            "FHEODGILEEP",
            |m: &ClockParkUseBuffScRsp| { &m.FHEODGILEEP },
            |m: &mut ClockParkUseBuffScRsp| { &mut m.FHEODGILEEP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BEBCFIIABLI",
            |m: &ClockParkUseBuffScRsp| { &m.BEBCFIIABLI },
            |m: &mut ClockParkUseBuffScRsp| { &mut m.BEBCFIIABLI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LCEEDIGELGM",
            |m: &ClockParkUseBuffScRsp| { &m.LCEEDIGELGM },
            |m: &mut ClockParkUseBuffScRsp| { &mut m.LCEEDIGELGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OJGHBHAIGMG::OJGHBHAIGMG>(
            "IFAJDNNCHMN",
            ClockParkUseBuffScRsp::has_IFAJDNNCHMN,
            ClockParkUseBuffScRsp::IFAJDNNCHMN,
            ClockParkUseBuffScRsp::mut_IFAJDNNCHMN,
            ClockParkUseBuffScRsp::set_IFAJDNNCHMN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AMIGGMENHFA::AMIGGMENHFA>(
            "PFBOBBMELFB",
            ClockParkUseBuffScRsp::has_PFBOBBMELFB,
            ClockParkUseBuffScRsp::PFBOBBMELFB,
            ClockParkUseBuffScRsp::mut_PFBOBBMELFB,
            ClockParkUseBuffScRsp::set_PFBOBBMELFB,
        ));
        oneofs.push(clock_park_use_buff_sc_rsp::DFALCDCAHFK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClockParkUseBuffScRsp>(
            "ClockParkUseBuffScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClockParkUseBuffScRsp {
    const NAME: &'static str = "ClockParkUseBuffScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.ADADHIHDHJC = is.read_uint32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FHEODGILEEP)?;
                },
                80 => {
                    self.BEBCFIIABLI = is.read_uint32()?;
                },
                56 => {
                    self.LCEEDIGELGM = is.read_uint32()?;
                },
                16258 => {
                    self.DFALCDCAHFK = ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(is.read_message()?));
                },
                3074 => {
                    self.DFALCDCAHFK = ::std::option::Option::Some(clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ADADHIHDHJC != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.ADADHIHDHJC);
        }
        if let Some(v) = self.FHEODGILEEP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.BEBCFIIABLI != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.BEBCFIIABLI);
        }
        if self.LCEEDIGELGM != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.LCEEDIGELGM);
        }
        if let ::std::option::Option::Some(ref v) = self.DFALCDCAHFK {
            match v {
                &clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ADADHIHDHJC != 0 {
            os.write_uint32(12, self.ADADHIHDHJC)?;
        }
        if let Some(v) = self.FHEODGILEEP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.BEBCFIIABLI != 0 {
            os.write_uint32(10, self.BEBCFIIABLI)?;
        }
        if self.LCEEDIGELGM != 0 {
            os.write_uint32(7, self.LCEEDIGELGM)?;
        }
        if let ::std::option::Option::Some(ref v) = self.DFALCDCAHFK {
            match v {
                &clock_park_use_buff_sc_rsp::DFALCDCAHFK::IFAJDNNCHMN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2032, v, os)?;
                },
                &clock_park_use_buff_sc_rsp::DFALCDCAHFK::PFBOBBMELFB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(384, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClockParkUseBuffScRsp {
        ClockParkUseBuffScRsp::new()
    }

    fn clear(&mut self) {
        self.ADADHIHDHJC = 0;
        self.FHEODGILEEP.clear();
        self.BEBCFIIABLI = 0;
        self.LCEEDIGELGM = 0;
        self.DFALCDCAHFK = ::std::option::Option::None;
        self.DFALCDCAHFK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClockParkUseBuffScRsp {
        static instance: ClockParkUseBuffScRsp = ClockParkUseBuffScRsp {
            ADADHIHDHJC: 0,
            FHEODGILEEP: ::protobuf::MessageField::none(),
            BEBCFIIABLI: 0,
            LCEEDIGELGM: 0,
            DFALCDCAHFK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClockParkUseBuffScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClockParkUseBuffScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClockParkUseBuffScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClockParkUseBuffScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ClockParkUseBuffScRsp`
pub mod clock_park_use_buff_sc_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ClockParkUseBuffScRsp.DFALCDCAHFK)
    pub enum DFALCDCAHFK {
        // @@protoc_insertion_point(oneof_field:ClockParkUseBuffScRsp.IFAJDNNCHMN)
        IFAJDNNCHMN(super::super::OJGHBHAIGMG::OJGHBHAIGMG),
        // @@protoc_insertion_point(oneof_field:ClockParkUseBuffScRsp.PFBOBBMELFB)
        PFBOBBMELFB(super::super::AMIGGMENHFA::AMIGGMENHFA),
    }

    impl ::protobuf::Oneof for DFALCDCAHFK {
    }

    impl ::protobuf::OneofFull for DFALCDCAHFK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ClockParkUseBuffScRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("DFALCDCAHFK").unwrap()).clone()
        }
    }

    impl DFALCDCAHFK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DFALCDCAHFK>("DFALCDCAHFK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bClockParkUseBuffScRsp.proto\x1a\x11AMIGGMENHFA.proto\x1a\x11MGGJKP\
    GEGLP.proto\x1a\x11OJGHBHAIGMG.proto\"\xa2\x02\n\x15ClockParkUseBuffScRs\
    p\x12\x20\n\x0bADADHIHDHJC\x18\x0c\x20\x01(\rR\x0bADADHIHDHJC\x12.\n\x0b\
    FHEODGILEEP\x18\x01\x20\x01(\x0b2\x0c.MGGJKPGEGLPR\x0bFHEODGILEEP\x12\
    \x20\n\x0bBEBCFIIABLI\x18\n\x20\x01(\rR\x0bBEBCFIIABLI\x12\x20\n\x0bLCEE\
    DIGELGM\x18\x07\x20\x01(\rR\x0bLCEEDIGELGM\x121\n\x0bIFAJDNNCHMN\x18\xf0\
    \x0f\x20\x01(\x0b2\x0c.OJGHBHAIGMGH\0R\x0bIFAJDNNCHMN\x121\n\x0bPFBOBBME\
    LFB\x18\x80\x03\x20\x01(\x0b2\x0c.AMIGGMENHFAH\0R\x0bPFBOBBMELFBB\r\n\
    \x0bDFALCDCAHFKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::AMIGGMENHFA::file_descriptor().clone());
            deps.push(super::MGGJKPGEGLP::file_descriptor().clone());
            deps.push(super::OJGHBHAIGMG::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ClockParkUseBuffScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
