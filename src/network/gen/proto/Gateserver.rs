// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `Gateserver.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:Gateserver)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Gateserver {
    // message fields
    // @@protoc_insertion_point(field:Gateserver.lua_url)
    pub lua_url: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.ex_resource_url)
    pub ex_resource_url: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.asset_bundle_url)
    pub asset_bundle_url: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.ifix_url)
    pub ifix_url: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.region_name)
    pub region_name: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.ip)
    pub ip: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.port)
    pub port: u32,
    // @@protoc_insertion_point(field:Gateserver.msg)
    pub msg: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.ifix_version)
    pub ifix_version: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.mdk_res_version)
    pub mdk_res_version: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.client_secret_key)
    pub client_secret_key: ::std::string::String,
    // @@protoc_insertion_point(field:Gateserver.enable_version_update)
    pub enable_version_update: bool,
    // @@protoc_insertion_point(field:Gateserver.enable_design_data_bundle_version_update)
    pub enable_design_data_bundle_version_update: bool,
    // @@protoc_insertion_point(field:Gateserver.event_tracking_open)
    pub event_tracking_open: bool,
    // @@protoc_insertion_point(field:Gateserver.enable_android_middle_package)
    pub enable_android_middle_package: bool,
    // @@protoc_insertion_point(field:Gateserver.network_diagnostic)
    pub network_diagnostic: bool,
    // @@protoc_insertion_point(field:Gateserver.enable_watermark)
    pub enable_watermark: bool,
    // @@protoc_insertion_point(field:Gateserver.close_redeem_code)
    pub close_redeem_code: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Gateserver.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Gateserver {
    fn default() -> &'a Gateserver {
        <Gateserver as ::protobuf::Message>::default_instance()
    }
}

impl Gateserver {
    pub fn new() -> Gateserver {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(18);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lua_url",
            |m: &Gateserver| { &m.lua_url },
            |m: &mut Gateserver| { &mut m.lua_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ex_resource_url",
            |m: &Gateserver| { &m.ex_resource_url },
            |m: &mut Gateserver| { &mut m.ex_resource_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "asset_bundle_url",
            |m: &Gateserver| { &m.asset_bundle_url },
            |m: &mut Gateserver| { &mut m.asset_bundle_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ifix_url",
            |m: &Gateserver| { &m.ifix_url },
            |m: &mut Gateserver| { &mut m.ifix_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "region_name",
            |m: &Gateserver| { &m.region_name },
            |m: &mut Gateserver| { &mut m.region_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ip",
            |m: &Gateserver| { &m.ip },
            |m: &mut Gateserver| { &mut m.ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &Gateserver| { &m.port },
            |m: &mut Gateserver| { &mut m.port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &Gateserver| { &m.msg },
            |m: &mut Gateserver| { &mut m.msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ifix_version",
            |m: &Gateserver| { &m.ifix_version },
            |m: &mut Gateserver| { &mut m.ifix_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mdk_res_version",
            |m: &Gateserver| { &m.mdk_res_version },
            |m: &mut Gateserver| { &mut m.mdk_res_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_secret_key",
            |m: &Gateserver| { &m.client_secret_key },
            |m: &mut Gateserver| { &mut m.client_secret_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enable_version_update",
            |m: &Gateserver| { &m.enable_version_update },
            |m: &mut Gateserver| { &mut m.enable_version_update },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enable_design_data_bundle_version_update",
            |m: &Gateserver| { &m.enable_design_data_bundle_version_update },
            |m: &mut Gateserver| { &mut m.enable_design_data_bundle_version_update },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_tracking_open",
            |m: &Gateserver| { &m.event_tracking_open },
            |m: &mut Gateserver| { &mut m.event_tracking_open },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enable_android_middle_package",
            |m: &Gateserver| { &m.enable_android_middle_package },
            |m: &mut Gateserver| { &mut m.enable_android_middle_package },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "network_diagnostic",
            |m: &Gateserver| { &m.network_diagnostic },
            |m: &mut Gateserver| { &mut m.network_diagnostic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enable_watermark",
            |m: &Gateserver| { &m.enable_watermark },
            |m: &mut Gateserver| { &mut m.enable_watermark },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "close_redeem_code",
            |m: &Gateserver| { &m.close_redeem_code },
            |m: &mut Gateserver| { &mut m.close_redeem_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Gateserver>(
            "Gateserver",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Gateserver {
    const NAME: &'static str = "Gateserver";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                82 => {
                    self.lua_url = is.read_string()?;
                },
                114 => {
                    self.ex_resource_url = is.read_string()?;
                },
                26 => {
                    self.asset_bundle_url = is.read_string()?;
                },
                8906 => {
                    self.ifix_url = is.read_string()?;
                },
                42 => {
                    self.region_name = is.read_string()?;
                },
                34 => {
                    self.ip = is.read_string()?;
                },
                16 => {
                    self.port = is.read_uint32()?;
                },
                9538 => {
                    self.msg = is.read_string()?;
                },
                11442 => {
                    self.ifix_version = is.read_string()?;
                },
                5290 => {
                    self.mdk_res_version = is.read_string()?;
                },
                14466 => {
                    self.client_secret_key = is.read_string()?;
                },
                8 => {
                    self.enable_version_update = is.read_bool()?;
                },
                56 => {
                    self.enable_design_data_bundle_version_update = is.read_bool()?;
                },
                3312 => {
                    self.event_tracking_open = is.read_bool()?;
                },
                4744 => {
                    self.enable_android_middle_package = is.read_bool()?;
                },
                12528 => {
                    self.network_diagnostic = is.read_bool()?;
                },
                11656 => {
                    self.enable_watermark = is.read_bool()?;
                },
                11888 => {
                    self.close_redeem_code = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.lua_url.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.lua_url);
        }
        if !self.ex_resource_url.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.ex_resource_url);
        }
        if !self.asset_bundle_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.asset_bundle_url);
        }
        if !self.ifix_url.is_empty() {
            my_size += ::protobuf::rt::string_size(1113, &self.ifix_url);
        }
        if !self.region_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.region_name);
        }
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.ip);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.port);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1192, &self.msg);
        }
        if !self.ifix_version.is_empty() {
            my_size += ::protobuf::rt::string_size(1430, &self.ifix_version);
        }
        if !self.mdk_res_version.is_empty() {
            my_size += ::protobuf::rt::string_size(661, &self.mdk_res_version);
        }
        if !self.client_secret_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1808, &self.client_secret_key);
        }
        if self.enable_version_update != false {
            my_size += 1 + 1;
        }
        if self.enable_design_data_bundle_version_update != false {
            my_size += 1 + 1;
        }
        if self.event_tracking_open != false {
            my_size += 2 + 1;
        }
        if self.enable_android_middle_package != false {
            my_size += 2 + 1;
        }
        if self.network_diagnostic != false {
            my_size += 2 + 1;
        }
        if self.enable_watermark != false {
            my_size += 2 + 1;
        }
        if self.close_redeem_code != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.lua_url.is_empty() {
            os.write_string(10, &self.lua_url)?;
        }
        if !self.ex_resource_url.is_empty() {
            os.write_string(14, &self.ex_resource_url)?;
        }
        if !self.asset_bundle_url.is_empty() {
            os.write_string(3, &self.asset_bundle_url)?;
        }
        if !self.ifix_url.is_empty() {
            os.write_string(1113, &self.ifix_url)?;
        }
        if !self.region_name.is_empty() {
            os.write_string(5, &self.region_name)?;
        }
        if !self.ip.is_empty() {
            os.write_string(4, &self.ip)?;
        }
        if self.port != 0 {
            os.write_uint32(2, self.port)?;
        }
        if !self.msg.is_empty() {
            os.write_string(1192, &self.msg)?;
        }
        if !self.ifix_version.is_empty() {
            os.write_string(1430, &self.ifix_version)?;
        }
        if !self.mdk_res_version.is_empty() {
            os.write_string(661, &self.mdk_res_version)?;
        }
        if !self.client_secret_key.is_empty() {
            os.write_string(1808, &self.client_secret_key)?;
        }
        if self.enable_version_update != false {
            os.write_bool(1, self.enable_version_update)?;
        }
        if self.enable_design_data_bundle_version_update != false {
            os.write_bool(7, self.enable_design_data_bundle_version_update)?;
        }
        if self.event_tracking_open != false {
            os.write_bool(414, self.event_tracking_open)?;
        }
        if self.enable_android_middle_package != false {
            os.write_bool(593, self.enable_android_middle_package)?;
        }
        if self.network_diagnostic != false {
            os.write_bool(1566, self.network_diagnostic)?;
        }
        if self.enable_watermark != false {
            os.write_bool(1457, self.enable_watermark)?;
        }
        if self.close_redeem_code != false {
            os.write_bool(1486, self.close_redeem_code)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Gateserver {
        Gateserver::new()
    }

    fn clear(&mut self) {
        self.lua_url.clear();
        self.ex_resource_url.clear();
        self.asset_bundle_url.clear();
        self.ifix_url.clear();
        self.region_name.clear();
        self.ip.clear();
        self.port = 0;
        self.msg.clear();
        self.ifix_version.clear();
        self.mdk_res_version.clear();
        self.client_secret_key.clear();
        self.enable_version_update = false;
        self.enable_design_data_bundle_version_update = false;
        self.event_tracking_open = false;
        self.enable_android_middle_package = false;
        self.network_diagnostic = false;
        self.enable_watermark = false;
        self.close_redeem_code = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Gateserver {
        static instance: Gateserver = Gateserver {
            lua_url: ::std::string::String::new(),
            ex_resource_url: ::std::string::String::new(),
            asset_bundle_url: ::std::string::String::new(),
            ifix_url: ::std::string::String::new(),
            region_name: ::std::string::String::new(),
            ip: ::std::string::String::new(),
            port: 0,
            msg: ::std::string::String::new(),
            ifix_version: ::std::string::String::new(),
            mdk_res_version: ::std::string::String::new(),
            client_secret_key: ::std::string::String::new(),
            enable_version_update: false,
            enable_design_data_bundle_version_update: false,
            event_tracking_open: false,
            enable_android_middle_package: false,
            network_diagnostic: false,
            enable_watermark: false,
            close_redeem_code: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Gateserver {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Gateserver").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Gateserver {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gateserver {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10Gateserver.proto\"\xee\x05\n\nGateserver\x12\x17\n\x07lua_url\x18\
    \n\x20\x01(\tR\x06luaUrl\x12&\n\x0fex_resource_url\x18\x0e\x20\x01(\tR\r\
    exResourceUrl\x12(\n\x10asset_bundle_url\x18\x03\x20\x01(\tR\x0eassetBun\
    dleUrl\x12\x1a\n\x08ifix_url\x18\xd9\x08\x20\x01(\tR\x07ifixUrl\x12\x1f\
    \n\x0bregion_name\x18\x05\x20\x01(\tR\nregionName\x12\x0e\n\x02ip\x18\
    \x04\x20\x01(\tR\x02ip\x12\x12\n\x04port\x18\x02\x20\x01(\rR\x04port\x12\
    \x11\n\x03msg\x18\xa8\t\x20\x01(\tR\x03msg\x12\"\n\x0cifix_version\x18\
    \x96\x0b\x20\x01(\tR\x0bifixVersion\x12'\n\x0fmdk_res_version\x18\x95\
    \x05\x20\x01(\tR\rmdkResVersion\x12+\n\x11client_secret_key\x18\x90\x0e\
    \x20\x01(\tR\x0fclientSecretKey\x122\n\x15enable_version_update\x18\x01\
    \x20\x01(\x08R\x13enableVersionUpdate\x12U\n(enable_design_data_bundle_v\
    ersion_update\x18\x07\x20\x01(\x08R#enableDesignDataBundleVersionUpdate\
    \x12/\n\x13event_tracking_open\x18\x9e\x03\x20\x01(\x08R\x11eventTrackin\
    gOpen\x12B\n\x1denable_android_middle_package\x18\xd1\x04\x20\x01(\x08R\
    \x1aenableAndroidMiddlePackage\x12.\n\x12network_diagnostic\x18\x9e\x0c\
    \x20\x01(\x08R\x11networkDiagnostic\x12*\n\x10enable_watermark\x18\xb1\
    \x0b\x20\x01(\x08R\x0fenableWatermark\x12+\n\x11close_redeem_code\x18\
    \xce\x0b\x20\x01(\x08R\x0fcloseRedeemCodeB\x15\n\x13emu.lunarcore.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Gateserver::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
