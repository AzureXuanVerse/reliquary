// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CLNOHAGLFKH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CLNOHAGLFKH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CLNOHAGLFKH {
    // message fields
    // @@protoc_insertion_point(field:CLNOHAGLFKH.DLOCFNANKAI)
    pub DLOCFNANKAI: ::std::string::String,
    // @@protoc_insertion_point(field:CLNOHAGLFKH.KHOBMBJAFOA)
    pub KHOBMBJAFOA: f32,
    // @@protoc_insertion_point(field:CLNOHAGLFKH.JJLCEPCNNGB)
    pub JJLCEPCNNGB: f32,
    // @@protoc_insertion_point(field:CLNOHAGLFKH.IHEGAHMPFCD)
    pub IHEGAHMPFCD: u32,
    // @@protoc_insertion_point(field:CLNOHAGLFKH.NDGKFGAOGGG)
    pub NDGKFGAOGGG: u32,
    // @@protoc_insertion_point(field:CLNOHAGLFKH.HEIFHKKAEOE)
    pub HEIFHKKAEOE: u32,
    // @@protoc_insertion_point(field:CLNOHAGLFKH.ILDHMNELFEJ)
    pub ILDHMNELFEJ: u32,
    // @@protoc_insertion_point(field:CLNOHAGLFKH.NBJAAPEAFBH)
    pub NBJAAPEAFBH: u32,
    // @@protoc_insertion_point(field:CLNOHAGLFKH.MLKPOBOLKJM)
    pub MLKPOBOLKJM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CLNOHAGLFKH.IFMFBEGFNDG)
    pub IFMFBEGFNDG: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CLNOHAGLFKH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CLNOHAGLFKH {
    fn default() -> &'a CLNOHAGLFKH {
        <CLNOHAGLFKH as ::protobuf::Message>::default_instance()
    }
}

impl CLNOHAGLFKH {
    pub fn new() -> CLNOHAGLFKH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DLOCFNANKAI",
            |m: &CLNOHAGLFKH| { &m.DLOCFNANKAI },
            |m: &mut CLNOHAGLFKH| { &mut m.DLOCFNANKAI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KHOBMBJAFOA",
            |m: &CLNOHAGLFKH| { &m.KHOBMBJAFOA },
            |m: &mut CLNOHAGLFKH| { &mut m.KHOBMBJAFOA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JJLCEPCNNGB",
            |m: &CLNOHAGLFKH| { &m.JJLCEPCNNGB },
            |m: &mut CLNOHAGLFKH| { &mut m.JJLCEPCNNGB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IHEGAHMPFCD",
            |m: &CLNOHAGLFKH| { &m.IHEGAHMPFCD },
            |m: &mut CLNOHAGLFKH| { &mut m.IHEGAHMPFCD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NDGKFGAOGGG",
            |m: &CLNOHAGLFKH| { &m.NDGKFGAOGGG },
            |m: &mut CLNOHAGLFKH| { &mut m.NDGKFGAOGGG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HEIFHKKAEOE",
            |m: &CLNOHAGLFKH| { &m.HEIFHKKAEOE },
            |m: &mut CLNOHAGLFKH| { &mut m.HEIFHKKAEOE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ILDHMNELFEJ",
            |m: &CLNOHAGLFKH| { &m.ILDHMNELFEJ },
            |m: &mut CLNOHAGLFKH| { &mut m.ILDHMNELFEJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NBJAAPEAFBH",
            |m: &CLNOHAGLFKH| { &m.NBJAAPEAFBH },
            |m: &mut CLNOHAGLFKH| { &mut m.NBJAAPEAFBH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MLKPOBOLKJM",
            |m: &CLNOHAGLFKH| { &m.MLKPOBOLKJM },
            |m: &mut CLNOHAGLFKH| { &mut m.MLKPOBOLKJM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IFMFBEGFNDG",
            |m: &CLNOHAGLFKH| { &m.IFMFBEGFNDG },
            |m: &mut CLNOHAGLFKH| { &mut m.IFMFBEGFNDG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CLNOHAGLFKH>(
            "CLNOHAGLFKH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CLNOHAGLFKH {
    const NAME: &'static str = "CLNOHAGLFKH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.DLOCFNANKAI = is.read_string()?;
                },
                21 => {
                    self.KHOBMBJAFOA = is.read_float()?;
                },
                29 => {
                    self.JJLCEPCNNGB = is.read_float()?;
                },
                32 => {
                    self.IHEGAHMPFCD = is.read_uint32()?;
                },
                40 => {
                    self.NDGKFGAOGGG = is.read_uint32()?;
                },
                48 => {
                    self.HEIFHKKAEOE = is.read_uint32()?;
                },
                56 => {
                    self.ILDHMNELFEJ = is.read_uint32()?;
                },
                64 => {
                    self.NBJAAPEAFBH = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.MLKPOBOLKJM)?;
                },
                72 => {
                    self.MLKPOBOLKJM.push(is.read_uint32()?);
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.IFMFBEGFNDG)?;
                },
                80 => {
                    self.IFMFBEGFNDG.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.DLOCFNANKAI.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.DLOCFNANKAI);
        }
        if self.KHOBMBJAFOA != 0. {
            my_size += 1 + 4;
        }
        if self.JJLCEPCNNGB != 0. {
            my_size += 1 + 4;
        }
        if self.IHEGAHMPFCD != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.IHEGAHMPFCD);
        }
        if self.NDGKFGAOGGG != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.NDGKFGAOGGG);
        }
        if self.HEIFHKKAEOE != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.HEIFHKKAEOE);
        }
        if self.ILDHMNELFEJ != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.ILDHMNELFEJ);
        }
        if self.NBJAAPEAFBH != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.NBJAAPEAFBH);
        }
        for value in &self.MLKPOBOLKJM {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        for value in &self.IFMFBEGFNDG {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.DLOCFNANKAI.is_empty() {
            os.write_string(1, &self.DLOCFNANKAI)?;
        }
        if self.KHOBMBJAFOA != 0. {
            os.write_float(2, self.KHOBMBJAFOA)?;
        }
        if self.JJLCEPCNNGB != 0. {
            os.write_float(3, self.JJLCEPCNNGB)?;
        }
        if self.IHEGAHMPFCD != 0 {
            os.write_uint32(4, self.IHEGAHMPFCD)?;
        }
        if self.NDGKFGAOGGG != 0 {
            os.write_uint32(5, self.NDGKFGAOGGG)?;
        }
        if self.HEIFHKKAEOE != 0 {
            os.write_uint32(6, self.HEIFHKKAEOE)?;
        }
        if self.ILDHMNELFEJ != 0 {
            os.write_uint32(7, self.ILDHMNELFEJ)?;
        }
        if self.NBJAAPEAFBH != 0 {
            os.write_uint32(8, self.NBJAAPEAFBH)?;
        }
        for v in &self.MLKPOBOLKJM {
            os.write_uint32(9, *v)?;
        };
        for v in &self.IFMFBEGFNDG {
            os.write_uint32(10, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CLNOHAGLFKH {
        CLNOHAGLFKH::new()
    }

    fn clear(&mut self) {
        self.DLOCFNANKAI.clear();
        self.KHOBMBJAFOA = 0.;
        self.JJLCEPCNNGB = 0.;
        self.IHEGAHMPFCD = 0;
        self.NDGKFGAOGGG = 0;
        self.HEIFHKKAEOE = 0;
        self.ILDHMNELFEJ = 0;
        self.NBJAAPEAFBH = 0;
        self.MLKPOBOLKJM.clear();
        self.IFMFBEGFNDG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CLNOHAGLFKH {
        static instance: CLNOHAGLFKH = CLNOHAGLFKH {
            DLOCFNANKAI: ::std::string::String::new(),
            KHOBMBJAFOA: 0.,
            JJLCEPCNNGB: 0.,
            IHEGAHMPFCD: 0,
            NDGKFGAOGGG: 0,
            HEIFHKKAEOE: 0,
            ILDHMNELFEJ: 0,
            NBJAAPEAFBH: 0,
            MLKPOBOLKJM: ::std::vec::Vec::new(),
            IFMFBEGFNDG: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CLNOHAGLFKH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CLNOHAGLFKH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CLNOHAGLFKH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CLNOHAGLFKH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CLNOHAGLFKH.proto\"\xe1\x02\n\x0bCLNOHAGLFKH\x12\x20\n\x0bDLOCFNAN\
    KAI\x18\x01\x20\x01(\tR\x0bDLOCFNANKAI\x12\x20\n\x0bKHOBMBJAFOA\x18\x02\
    \x20\x01(\x02R\x0bKHOBMBJAFOA\x12\x20\n\x0bJJLCEPCNNGB\x18\x03\x20\x01(\
    \x02R\x0bJJLCEPCNNGB\x12\x20\n\x0bIHEGAHMPFCD\x18\x04\x20\x01(\rR\x0bIHE\
    GAHMPFCD\x12\x20\n\x0bNDGKFGAOGGG\x18\x05\x20\x01(\rR\x0bNDGKFGAOGGG\x12\
    \x20\n\x0bHEIFHKKAEOE\x18\x06\x20\x01(\rR\x0bHEIFHKKAEOE\x12\x20\n\x0bIL\
    DHMNELFEJ\x18\x07\x20\x01(\rR\x0bILDHMNELFEJ\x12\x20\n\x0bNBJAAPEAFBH\
    \x18\x08\x20\x01(\rR\x0bNBJAAPEAFBH\x12\x20\n\x0bMLKPOBOLKJM\x18\t\x20\
    \x03(\rR\x0bMLKPOBOLKJM\x12\x20\n\x0bIFMFBEGFNDG\x18\n\x20\x03(\rR\x0bIF\
    MFBEGFNDGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CLNOHAGLFKH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
