// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueAction.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueAction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueAction {
    // message oneof groups
    pub action: ::std::option::Option<rogue_action::Action>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueAction {
    fn default() -> &'a RogueAction {
        <RogueAction as ::protobuf::Message>::default_instance()
    }
}

impl RogueAction {
    pub fn new() -> RogueAction {
        ::std::default::Default::default()
    }

    // .RogueCommonBuffSelectInfo buff_select_info = 1719;

    pub fn buff_select_info(&self) -> &super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::BuffSelectInfo(ref v)) => v,
            _ => <super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_select_info(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_buff_select_info(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::BuffSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_select_info(&mut self, v: super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo) {
        self.action = ::std::option::Option::Some(rogue_action::Action::BuffSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_select_info(&mut self) -> &mut super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if let ::std::option::Option::Some(rogue_action::Action::BuffSelectInfo(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(rogue_action::Action::BuffSelectInfo(super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()));
        }
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::BuffSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_select_info(&mut self) -> super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if self.has_buff_select_info() {
            match self.action.take() {
                ::std::option::Option::Some(rogue_action::Action::BuffSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()
        }
    }

    // .RogueCommonBuffReforgeSelectInfo buff_reforge_select_info = 1322;

    pub fn buff_reforge_select_info(&self) -> &super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::BuffReforgeSelectInfo(ref v)) => v,
            _ => <super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_reforge_select_info(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_buff_reforge_select_info(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::BuffReforgeSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_reforge_select_info(&mut self, v: super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo) {
        self.action = ::std::option::Option::Some(rogue_action::Action::BuffReforgeSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_reforge_select_info(&mut self) -> &mut super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo {
        if let ::std::option::Option::Some(rogue_action::Action::BuffReforgeSelectInfo(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(rogue_action::Action::BuffReforgeSelectInfo(super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo::new()));
        }
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::BuffReforgeSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_reforge_select_info(&mut self) -> super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo {
        if self.has_buff_reforge_select_info() {
            match self.action.take() {
                ::std::option::Option::Some(rogue_action::Action::BuffReforgeSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo::new()
        }
    }

    // .RogueMiracleSelectInfo miracle_select_info = 1776;

    pub fn miracle_select_info(&self) -> &super::RogueMiracleSelectInfo::RogueMiracleSelectInfo {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::MiracleSelectInfo(ref v)) => v,
            _ => <super::RogueMiracleSelectInfo::RogueMiracleSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_miracle_select_info(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_miracle_select_info(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::MiracleSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_miracle_select_info(&mut self, v: super::RogueMiracleSelectInfo::RogueMiracleSelectInfo) {
        self.action = ::std::option::Option::Some(rogue_action::Action::MiracleSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_miracle_select_info(&mut self) -> &mut super::RogueMiracleSelectInfo::RogueMiracleSelectInfo {
        if let ::std::option::Option::Some(rogue_action::Action::MiracleSelectInfo(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(rogue_action::Action::MiracleSelectInfo(super::RogueMiracleSelectInfo::RogueMiracleSelectInfo::new()));
        }
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::MiracleSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_miracle_select_info(&mut self) -> super::RogueMiracleSelectInfo::RogueMiracleSelectInfo {
        if self.has_miracle_select_info() {
            match self.action.take() {
                ::std::option::Option::Some(rogue_action::Action::MiracleSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueMiracleSelectInfo::RogueMiracleSelectInfo::new()
        }
    }

    // .RogueComposeMiracleSelectInfo compose_miracle_select_info = 366;

    pub fn compose_miracle_select_info(&self) -> &super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::ComposeMiracleSelectInfo(ref v)) => v,
            _ => <super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_compose_miracle_select_info(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_compose_miracle_select_info(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::ComposeMiracleSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_compose_miracle_select_info(&mut self, v: super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo) {
        self.action = ::std::option::Option::Some(rogue_action::Action::ComposeMiracleSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_compose_miracle_select_info(&mut self) -> &mut super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo {
        if let ::std::option::Option::Some(rogue_action::Action::ComposeMiracleSelectInfo(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(rogue_action::Action::ComposeMiracleSelectInfo(super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo::new()));
        }
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::ComposeMiracleSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_compose_miracle_select_info(&mut self) -> super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo {
        if self.has_compose_miracle_select_info() {
            match self.action.take() {
                ::std::option::Option::Some(rogue_action::Action::ComposeMiracleSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo::new()
        }
    }

    // .RogueHexAvatarSelectInfo hex_avatar_select_info = 1677;

    pub fn hex_avatar_select_info(&self) -> &super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::HexAvatarSelectInfo(ref v)) => v,
            _ => <super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_hex_avatar_select_info(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_hex_avatar_select_info(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::HexAvatarSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hex_avatar_select_info(&mut self, v: super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo) {
        self.action = ::std::option::Option::Some(rogue_action::Action::HexAvatarSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hex_avatar_select_info(&mut self) -> &mut super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo {
        if let ::std::option::Option::Some(rogue_action::Action::HexAvatarSelectInfo(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(rogue_action::Action::HexAvatarSelectInfo(super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo::new()));
        }
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::HexAvatarSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hex_avatar_select_info(&mut self) -> super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo {
        if self.has_hex_avatar_select_info() {
            match self.action.take() {
                ::std::option::Option::Some(rogue_action::Action::HexAvatarSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo::new()
        }
    }

    // .RogueBonusSelectInfo bonus_select_info = 1232;

    pub fn bonus_select_info(&self) -> &super::RogueBonusSelectInfo::RogueBonusSelectInfo {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::BonusSelectInfo(ref v)) => v,
            _ => <super::RogueBonusSelectInfo::RogueBonusSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bonus_select_info(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_bonus_select_info(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::BonusSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bonus_select_info(&mut self, v: super::RogueBonusSelectInfo::RogueBonusSelectInfo) {
        self.action = ::std::option::Option::Some(rogue_action::Action::BonusSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bonus_select_info(&mut self) -> &mut super::RogueBonusSelectInfo::RogueBonusSelectInfo {
        if let ::std::option::Option::Some(rogue_action::Action::BonusSelectInfo(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(rogue_action::Action::BonusSelectInfo(super::RogueBonusSelectInfo::RogueBonusSelectInfo::new()));
        }
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::BonusSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bonus_select_info(&mut self) -> super::RogueBonusSelectInfo::RogueBonusSelectInfo {
        if self.has_bonus_select_info() {
            match self.action.take() {
                ::std::option::Option::Some(rogue_action::Action::BonusSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueBonusSelectInfo::RogueBonusSelectInfo::new()
        }
    }

    // .RogueFormulaSelectInfo rogue_formula_select_info = 176;

    pub fn rogue_formula_select_info(&self) -> &super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::RogueFormulaSelectInfo(ref v)) => v,
            _ => <super::RogueFormulaSelectInfo::RogueFormulaSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_formula_select_info(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_rogue_formula_select_info(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::RogueFormulaSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_formula_select_info(&mut self, v: super::RogueFormulaSelectInfo::RogueFormulaSelectInfo) {
        self.action = ::std::option::Option::Some(rogue_action::Action::RogueFormulaSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_formula_select_info(&mut self) -> &mut super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if let ::std::option::Option::Some(rogue_action::Action::RogueFormulaSelectInfo(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(rogue_action::Action::RogueFormulaSelectInfo(super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()));
        }
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::RogueFormulaSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_formula_select_info(&mut self) -> super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if self.has_rogue_formula_select_info() {
            match self.action.take() {
                ::std::option::Option::Some(rogue_action::Action::RogueFormulaSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()
        }
    }

    // .RogueReforgeFormulaSelectInfo reforge_formula_select_info = 275;

    pub fn reforge_formula_select_info(&self) -> &super::RogueReforgeFormulaSelectInfo::RogueReforgeFormulaSelectInfo {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::ReforgeFormulaSelectInfo(ref v)) => v,
            _ => <super::RogueReforgeFormulaSelectInfo::RogueReforgeFormulaSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reforge_formula_select_info(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_reforge_formula_select_info(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::ReforgeFormulaSelectInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reforge_formula_select_info(&mut self, v: super::RogueReforgeFormulaSelectInfo::RogueReforgeFormulaSelectInfo) {
        self.action = ::std::option::Option::Some(rogue_action::Action::ReforgeFormulaSelectInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reforge_formula_select_info(&mut self) -> &mut super::RogueReforgeFormulaSelectInfo::RogueReforgeFormulaSelectInfo {
        if let ::std::option::Option::Some(rogue_action::Action::ReforgeFormulaSelectInfo(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(rogue_action::Action::ReforgeFormulaSelectInfo(super::RogueReforgeFormulaSelectInfo::RogueReforgeFormulaSelectInfo::new()));
        }
        match self.action {
            ::std::option::Option::Some(rogue_action::Action::ReforgeFormulaSelectInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reforge_formula_select_info(&mut self) -> super::RogueReforgeFormulaSelectInfo::RogueReforgeFormulaSelectInfo {
        if self.has_reforge_formula_select_info() {
            match self.action.take() {
                ::std::option::Option::Some(rogue_action::Action::ReforgeFormulaSelectInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueReforgeFormulaSelectInfo::RogueReforgeFormulaSelectInfo::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo>(
            "buff_select_info",
            RogueAction::has_buff_select_info,
            RogueAction::buff_select_info,
            RogueAction::mut_buff_select_info,
            RogueAction::set_buff_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo>(
            "buff_reforge_select_info",
            RogueAction::has_buff_reforge_select_info,
            RogueAction::buff_reforge_select_info,
            RogueAction::mut_buff_reforge_select_info,
            RogueAction::set_buff_reforge_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueMiracleSelectInfo::RogueMiracleSelectInfo>(
            "miracle_select_info",
            RogueAction::has_miracle_select_info,
            RogueAction::miracle_select_info,
            RogueAction::mut_miracle_select_info,
            RogueAction::set_miracle_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo>(
            "compose_miracle_select_info",
            RogueAction::has_compose_miracle_select_info,
            RogueAction::compose_miracle_select_info,
            RogueAction::mut_compose_miracle_select_info,
            RogueAction::set_compose_miracle_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo>(
            "hex_avatar_select_info",
            RogueAction::has_hex_avatar_select_info,
            RogueAction::hex_avatar_select_info,
            RogueAction::mut_hex_avatar_select_info,
            RogueAction::set_hex_avatar_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueBonusSelectInfo::RogueBonusSelectInfo>(
            "bonus_select_info",
            RogueAction::has_bonus_select_info,
            RogueAction::bonus_select_info,
            RogueAction::mut_bonus_select_info,
            RogueAction::set_bonus_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueFormulaSelectInfo::RogueFormulaSelectInfo>(
            "rogue_formula_select_info",
            RogueAction::has_rogue_formula_select_info,
            RogueAction::rogue_formula_select_info,
            RogueAction::mut_rogue_formula_select_info,
            RogueAction::set_rogue_formula_select_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueReforgeFormulaSelectInfo::RogueReforgeFormulaSelectInfo>(
            "reforge_formula_select_info",
            RogueAction::has_reforge_formula_select_info,
            RogueAction::reforge_formula_select_info,
            RogueAction::mut_reforge_formula_select_info,
            RogueAction::set_reforge_formula_select_info,
        ));
        oneofs.push(rogue_action::Action::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueAction>(
            "RogueAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueAction {
    const NAME: &'static str = "RogueAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13754 => {
                    self.action = ::std::option::Option::Some(rogue_action::Action::BuffSelectInfo(is.read_message()?));
                },
                10578 => {
                    self.action = ::std::option::Option::Some(rogue_action::Action::BuffReforgeSelectInfo(is.read_message()?));
                },
                14210 => {
                    self.action = ::std::option::Option::Some(rogue_action::Action::MiracleSelectInfo(is.read_message()?));
                },
                2930 => {
                    self.action = ::std::option::Option::Some(rogue_action::Action::ComposeMiracleSelectInfo(is.read_message()?));
                },
                13418 => {
                    self.action = ::std::option::Option::Some(rogue_action::Action::HexAvatarSelectInfo(is.read_message()?));
                },
                9858 => {
                    self.action = ::std::option::Option::Some(rogue_action::Action::BonusSelectInfo(is.read_message()?));
                },
                1410 => {
                    self.action = ::std::option::Option::Some(rogue_action::Action::RogueFormulaSelectInfo(is.read_message()?));
                },
                2202 => {
                    self.action = ::std::option::Option::Some(rogue_action::Action::ReforgeFormulaSelectInfo(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &rogue_action::Action::BuffSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::Action::BuffReforgeSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::Action::MiracleSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::Action::ComposeMiracleSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::Action::HexAvatarSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::Action::BonusSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::Action::RogueFormulaSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action::Action::ReforgeFormulaSelectInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &rogue_action::Action::BuffSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1719, v, os)?;
                },
                &rogue_action::Action::BuffReforgeSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1322, v, os)?;
                },
                &rogue_action::Action::MiracleSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1776, v, os)?;
                },
                &rogue_action::Action::ComposeMiracleSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(366, v, os)?;
                },
                &rogue_action::Action::HexAvatarSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1677, v, os)?;
                },
                &rogue_action::Action::BonusSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1232, v, os)?;
                },
                &rogue_action::Action::RogueFormulaSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(176, v, os)?;
                },
                &rogue_action::Action::ReforgeFormulaSelectInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(275, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueAction {
        RogueAction::new()
    }

    fn clear(&mut self) {
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueAction {
        static instance: RogueAction = RogueAction {
            action: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueAction`
pub mod rogue_action {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueAction.action)
    pub enum Action {
        // @@protoc_insertion_point(oneof_field:RogueAction.buff_select_info)
        BuffSelectInfo(super::super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.buff_reforge_select_info)
        BuffReforgeSelectInfo(super::super::RogueCommonBuffReforgeSelectInfo::RogueCommonBuffReforgeSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.miracle_select_info)
        MiracleSelectInfo(super::super::RogueMiracleSelectInfo::RogueMiracleSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.compose_miracle_select_info)
        ComposeMiracleSelectInfo(super::super::RogueComposeMiracleSelectInfo::RogueComposeMiracleSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.hex_avatar_select_info)
        HexAvatarSelectInfo(super::super::RogueHexAvatarSelectInfo::RogueHexAvatarSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.bonus_select_info)
        BonusSelectInfo(super::super::RogueBonusSelectInfo::RogueBonusSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.rogue_formula_select_info)
        RogueFormulaSelectInfo(super::super::RogueFormulaSelectInfo::RogueFormulaSelectInfo),
        // @@protoc_insertion_point(oneof_field:RogueAction.reforge_formula_select_info)
        ReforgeFormulaSelectInfo(super::super::RogueReforgeFormulaSelectInfo::RogueReforgeFormulaSelectInfo),
    }

    impl ::protobuf::Oneof for Action {
    }

    impl ::protobuf::OneofFull for Action {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueAction as ::protobuf::MessageFull>::descriptor().oneof_by_name("action").unwrap()).clone()
        }
    }

    impl Action {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Action>("action")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11RogueAction.proto\x1a\x1fRogueCommonBuffSelectInfo.proto\x1a\x1cRo\
    gueMiracleSelectInfo.proto\x1a\x1aRogueBonusSelectInfo.proto\x1a&RogueCo\
    mmonBuffReforgeSelectInfo.proto\x1a#RogueComposeMiracleSelectInfo.proto\
    \x1a\x1eRogueHexAvatarSelectInfo.proto\x1a\x1cRogueFormulaSelectInfo.pro\
    to\x1a#RogueReforgeFormulaSelectInfo.proto\"\xbf\x05\n\x0bRogueAction\
    \x12G\n\x10buff_select_info\x18\xb7\r\x20\x01(\x0b2\x1a.RogueCommonBuffS\
    electInfoH\0R\x0ebuffSelectInfo\x12]\n\x18buff_reforge_select_info\x18\
    \xaa\n\x20\x01(\x0b2!.RogueCommonBuffReforgeSelectInfoH\0R\x15buffReforg\
    eSelectInfo\x12J\n\x13miracle_select_info\x18\xf0\r\x20\x01(\x0b2\x17.Ro\
    gueMiracleSelectInfoH\0R\x11miracleSelectInfo\x12`\n\x1bcompose_miracle_\
    select_info\x18\xee\x02\x20\x01(\x0b2\x1e.RogueComposeMiracleSelectInfoH\
    \0R\x18composeMiracleSelectInfo\x12Q\n\x16hex_avatar_select_info\x18\x8d\
    \r\x20\x01(\x0b2\x19.RogueHexAvatarSelectInfoH\0R\x13hexAvatarSelectInfo\
    \x12D\n\x11bonus_select_info\x18\xd0\t\x20\x01(\x0b2\x15.RogueBonusSelec\
    tInfoH\0R\x0fbonusSelectInfo\x12U\n\x19rogue_formula_select_info\x18\xb0\
    \x01\x20\x01(\x0b2\x17.RogueFormulaSelectInfoH\0R\x16rogueFormulaSelectI\
    nfo\x12`\n\x1breforge_formula_select_info\x18\x93\x02\x20\x01(\x0b2\x1e.\
    RogueReforgeFormulaSelectInfoH\0R\x18reforgeFormulaSelectInfoB\x08\n\x06\
    actionB\x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::RogueCommonBuffSelectInfo::file_descriptor().clone());
            deps.push(super::RogueMiracleSelectInfo::file_descriptor().clone());
            deps.push(super::RogueBonusSelectInfo::file_descriptor().clone());
            deps.push(super::RogueCommonBuffReforgeSelectInfo::file_descriptor().clone());
            deps.push(super::RogueComposeMiracleSelectInfo::file_descriptor().clone());
            deps.push(super::RogueHexAvatarSelectInfo::file_descriptor().clone());
            deps.push(super::RogueFormulaSelectInfo::file_descriptor().clone());
            deps.push(super::RogueReforgeFormulaSelectInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueAction::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
