// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ClockParkHandleWaitOperationCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ClockParkHandleWaitOperationCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClockParkHandleWaitOperationCsReq {
    // message fields
    // @@protoc_insertion_point(field:ClockParkHandleWaitOperationCsReq.LCEEDIGELGM)
    pub LCEEDIGELGM: u32,
    // @@protoc_insertion_point(field:ClockParkHandleWaitOperationCsReq.BEBCFIIABLI)
    pub BEBCFIIABLI: u32,
    // message oneof groups
    pub NGEPBMFGAMK: ::std::option::Option<clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK>,
    // special fields
    // @@protoc_insertion_point(special_field:ClockParkHandleWaitOperationCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClockParkHandleWaitOperationCsReq {
    fn default() -> &'a ClockParkHandleWaitOperationCsReq {
        <ClockParkHandleWaitOperationCsReq as ::protobuf::Message>::default_instance()
    }
}

impl ClockParkHandleWaitOperationCsReq {
    pub fn new() -> ClockParkHandleWaitOperationCsReq {
        ::std::default::Default::default()
    }

    // .DGNIEFJPLAK NONNLEAAPNM = 4;

    pub fn NONNLEAAPNM(&self) -> &super::DGNIEFJPLAK::DGNIEFJPLAK {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(ref v)) => v,
            _ => <super::DGNIEFJPLAK::DGNIEFJPLAK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NONNLEAAPNM(&mut self) {
        self.NGEPBMFGAMK = ::std::option::Option::None;
    }

    pub fn has_NONNLEAAPNM(&self) -> bool {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NONNLEAAPNM(&mut self, v: super::DGNIEFJPLAK::DGNIEFJPLAK) {
        self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NONNLEAAPNM(&mut self) -> &mut super::DGNIEFJPLAK::DGNIEFJPLAK {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(_)) = self.NGEPBMFGAMK {
        } else {
            self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(super::DGNIEFJPLAK::DGNIEFJPLAK::new()));
        }
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NONNLEAAPNM(&mut self) -> super::DGNIEFJPLAK::DGNIEFJPLAK {
        if self.has_NONNLEAAPNM() {
            match self.NGEPBMFGAMK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DGNIEFJPLAK::DGNIEFJPLAK::new()
        }
    }

    // .GGLPLMAEDGN EEKOODFBLPP = 7;

    pub fn EEKOODFBLPP(&self) -> &super::GGLPLMAEDGN::GGLPLMAEDGN {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(ref v)) => v,
            _ => <super::GGLPLMAEDGN::GGLPLMAEDGN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EEKOODFBLPP(&mut self) {
        self.NGEPBMFGAMK = ::std::option::Option::None;
    }

    pub fn has_EEKOODFBLPP(&self) -> bool {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EEKOODFBLPP(&mut self, v: super::GGLPLMAEDGN::GGLPLMAEDGN) {
        self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EEKOODFBLPP(&mut self) -> &mut super::GGLPLMAEDGN::GGLPLMAEDGN {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(_)) = self.NGEPBMFGAMK {
        } else {
            self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(super::GGLPLMAEDGN::GGLPLMAEDGN::new()));
        }
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EEKOODFBLPP(&mut self) -> super::GGLPLMAEDGN::GGLPLMAEDGN {
        if self.has_EEKOODFBLPP() {
            match self.NGEPBMFGAMK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GGLPLMAEDGN::GGLPLMAEDGN::new()
        }
    }

    // .CCOCGNOMNHL IMIDMDHJBME = 9;

    pub fn IMIDMDHJBME(&self) -> &super::CCOCGNOMNHL::CCOCGNOMNHL {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(ref v)) => v,
            _ => <super::CCOCGNOMNHL::CCOCGNOMNHL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IMIDMDHJBME(&mut self) {
        self.NGEPBMFGAMK = ::std::option::Option::None;
    }

    pub fn has_IMIDMDHJBME(&self) -> bool {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IMIDMDHJBME(&mut self, v: super::CCOCGNOMNHL::CCOCGNOMNHL) {
        self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IMIDMDHJBME(&mut self) -> &mut super::CCOCGNOMNHL::CCOCGNOMNHL {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(_)) = self.NGEPBMFGAMK {
        } else {
            self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(super::CCOCGNOMNHL::CCOCGNOMNHL::new()));
        }
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IMIDMDHJBME(&mut self) -> super::CCOCGNOMNHL::CCOCGNOMNHL {
        if self.has_IMIDMDHJBME() {
            match self.NGEPBMFGAMK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CCOCGNOMNHL::CCOCGNOMNHL::new()
        }
    }

    // .MAEIKELDODO HEGDEEGAGEK = 10;

    pub fn HEGDEEGAGEK(&self) -> &super::MAEIKELDODO::MAEIKELDODO {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(ref v)) => v,
            _ => <super::MAEIKELDODO::MAEIKELDODO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HEGDEEGAGEK(&mut self) {
        self.NGEPBMFGAMK = ::std::option::Option::None;
    }

    pub fn has_HEGDEEGAGEK(&self) -> bool {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HEGDEEGAGEK(&mut self, v: super::MAEIKELDODO::MAEIKELDODO) {
        self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HEGDEEGAGEK(&mut self) -> &mut super::MAEIKELDODO::MAEIKELDODO {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(_)) = self.NGEPBMFGAMK {
        } else {
            self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(super::MAEIKELDODO::MAEIKELDODO::new()));
        }
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HEGDEEGAGEK(&mut self) -> super::MAEIKELDODO::MAEIKELDODO {
        if self.has_HEGDEEGAGEK() {
            match self.NGEPBMFGAMK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MAEIKELDODO::MAEIKELDODO::new()
        }
    }

    // .BGCNNENILKB MDIDHEFADBC = 15;

    pub fn MDIDHEFADBC(&self) -> &super::BGCNNENILKB::BGCNNENILKB {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(ref v)) => v,
            _ => <super::BGCNNENILKB::BGCNNENILKB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MDIDHEFADBC(&mut self) {
        self.NGEPBMFGAMK = ::std::option::Option::None;
    }

    pub fn has_MDIDHEFADBC(&self) -> bool {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MDIDHEFADBC(&mut self, v: super::BGCNNENILKB::BGCNNENILKB) {
        self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MDIDHEFADBC(&mut self) -> &mut super::BGCNNENILKB::BGCNNENILKB {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(_)) = self.NGEPBMFGAMK {
        } else {
            self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(super::BGCNNENILKB::BGCNNENILKB::new()));
        }
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MDIDHEFADBC(&mut self) -> super::BGCNNENILKB::BGCNNENILKB {
        if self.has_MDIDHEFADBC() {
            match self.NGEPBMFGAMK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BGCNNENILKB::BGCNNENILKB::new()
        }
    }

    // .LGKAGODJBOL APKOJHEKMAB = 12;

    pub fn APKOJHEKMAB(&self) -> &super::LGKAGODJBOL::LGKAGODJBOL {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(ref v)) => v,
            _ => <super::LGKAGODJBOL::LGKAGODJBOL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_APKOJHEKMAB(&mut self) {
        self.NGEPBMFGAMK = ::std::option::Option::None;
    }

    pub fn has_APKOJHEKMAB(&self) -> bool {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_APKOJHEKMAB(&mut self, v: super::LGKAGODJBOL::LGKAGODJBOL) {
        self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_APKOJHEKMAB(&mut self) -> &mut super::LGKAGODJBOL::LGKAGODJBOL {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(_)) = self.NGEPBMFGAMK {
        } else {
            self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(super::LGKAGODJBOL::LGKAGODJBOL::new()));
        }
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_APKOJHEKMAB(&mut self) -> super::LGKAGODJBOL::LGKAGODJBOL {
        if self.has_APKOJHEKMAB() {
            match self.NGEPBMFGAMK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LGKAGODJBOL::LGKAGODJBOL::new()
        }
    }

    // .JGGABPHAMOH MBKEDKNPPCN = 8;

    pub fn MBKEDKNPPCN(&self) -> &super::JGGABPHAMOH::JGGABPHAMOH {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(ref v)) => v,
            _ => <super::JGGABPHAMOH::JGGABPHAMOH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MBKEDKNPPCN(&mut self) {
        self.NGEPBMFGAMK = ::std::option::Option::None;
    }

    pub fn has_MBKEDKNPPCN(&self) -> bool {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MBKEDKNPPCN(&mut self, v: super::JGGABPHAMOH::JGGABPHAMOH) {
        self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MBKEDKNPPCN(&mut self) -> &mut super::JGGABPHAMOH::JGGABPHAMOH {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(_)) = self.NGEPBMFGAMK {
        } else {
            self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(super::JGGABPHAMOH::JGGABPHAMOH::new()));
        }
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MBKEDKNPPCN(&mut self) -> super::JGGABPHAMOH::JGGABPHAMOH {
        if self.has_MBKEDKNPPCN() {
            match self.NGEPBMFGAMK.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JGGABPHAMOH::JGGABPHAMOH::new()
        }
    }

    // uint32 AOGMMEFAIFJ = 11;

    pub fn AOGMMEFAIFJ(&self) -> u32 {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::AOGMMEFAIFJ(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_AOGMMEFAIFJ(&mut self) {
        self.NGEPBMFGAMK = ::std::option::Option::None;
    }

    pub fn has_AOGMMEFAIFJ(&self) -> bool {
        match self.NGEPBMFGAMK {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::AOGMMEFAIFJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AOGMMEFAIFJ(&mut self, v: u32) {
        self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::AOGMMEFAIFJ(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LCEEDIGELGM",
            |m: &ClockParkHandleWaitOperationCsReq| { &m.LCEEDIGELGM },
            |m: &mut ClockParkHandleWaitOperationCsReq| { &mut m.LCEEDIGELGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BEBCFIIABLI",
            |m: &ClockParkHandleWaitOperationCsReq| { &m.BEBCFIIABLI },
            |m: &mut ClockParkHandleWaitOperationCsReq| { &mut m.BEBCFIIABLI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DGNIEFJPLAK::DGNIEFJPLAK>(
            "NONNLEAAPNM",
            ClockParkHandleWaitOperationCsReq::has_NONNLEAAPNM,
            ClockParkHandleWaitOperationCsReq::NONNLEAAPNM,
            ClockParkHandleWaitOperationCsReq::mut_NONNLEAAPNM,
            ClockParkHandleWaitOperationCsReq::set_NONNLEAAPNM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GGLPLMAEDGN::GGLPLMAEDGN>(
            "EEKOODFBLPP",
            ClockParkHandleWaitOperationCsReq::has_EEKOODFBLPP,
            ClockParkHandleWaitOperationCsReq::EEKOODFBLPP,
            ClockParkHandleWaitOperationCsReq::mut_EEKOODFBLPP,
            ClockParkHandleWaitOperationCsReq::set_EEKOODFBLPP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CCOCGNOMNHL::CCOCGNOMNHL>(
            "IMIDMDHJBME",
            ClockParkHandleWaitOperationCsReq::has_IMIDMDHJBME,
            ClockParkHandleWaitOperationCsReq::IMIDMDHJBME,
            ClockParkHandleWaitOperationCsReq::mut_IMIDMDHJBME,
            ClockParkHandleWaitOperationCsReq::set_IMIDMDHJBME,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MAEIKELDODO::MAEIKELDODO>(
            "HEGDEEGAGEK",
            ClockParkHandleWaitOperationCsReq::has_HEGDEEGAGEK,
            ClockParkHandleWaitOperationCsReq::HEGDEEGAGEK,
            ClockParkHandleWaitOperationCsReq::mut_HEGDEEGAGEK,
            ClockParkHandleWaitOperationCsReq::set_HEGDEEGAGEK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BGCNNENILKB::BGCNNENILKB>(
            "MDIDHEFADBC",
            ClockParkHandleWaitOperationCsReq::has_MDIDHEFADBC,
            ClockParkHandleWaitOperationCsReq::MDIDHEFADBC,
            ClockParkHandleWaitOperationCsReq::mut_MDIDHEFADBC,
            ClockParkHandleWaitOperationCsReq::set_MDIDHEFADBC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LGKAGODJBOL::LGKAGODJBOL>(
            "APKOJHEKMAB",
            ClockParkHandleWaitOperationCsReq::has_APKOJHEKMAB,
            ClockParkHandleWaitOperationCsReq::APKOJHEKMAB,
            ClockParkHandleWaitOperationCsReq::mut_APKOJHEKMAB,
            ClockParkHandleWaitOperationCsReq::set_APKOJHEKMAB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JGGABPHAMOH::JGGABPHAMOH>(
            "MBKEDKNPPCN",
            ClockParkHandleWaitOperationCsReq::has_MBKEDKNPPCN,
            ClockParkHandleWaitOperationCsReq::MBKEDKNPPCN,
            ClockParkHandleWaitOperationCsReq::mut_MBKEDKNPPCN,
            ClockParkHandleWaitOperationCsReq::set_MBKEDKNPPCN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "AOGMMEFAIFJ",
            ClockParkHandleWaitOperationCsReq::has_AOGMMEFAIFJ,
            ClockParkHandleWaitOperationCsReq::AOGMMEFAIFJ,
            ClockParkHandleWaitOperationCsReq::set_AOGMMEFAIFJ,
        ));
        oneofs.push(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClockParkHandleWaitOperationCsReq>(
            "ClockParkHandleWaitOperationCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClockParkHandleWaitOperationCsReq {
    const NAME: &'static str = "ClockParkHandleWaitOperationCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.LCEEDIGELGM = is.read_uint32()?;
                },
                16 => {
                    self.BEBCFIIABLI = is.read_uint32()?;
                },
                34 => {
                    self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(is.read_message()?));
                },
                58 => {
                    self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(is.read_message()?));
                },
                74 => {
                    self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(is.read_message()?));
                },
                82 => {
                    self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(is.read_message()?));
                },
                122 => {
                    self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(is.read_message()?));
                },
                98 => {
                    self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(is.read_message()?));
                },
                66 => {
                    self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(is.read_message()?));
                },
                88 => {
                    self.NGEPBMFGAMK = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::AOGMMEFAIFJ(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.LCEEDIGELGM != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.LCEEDIGELGM);
        }
        if self.BEBCFIIABLI != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.BEBCFIIABLI);
        }
        if let ::std::option::Option::Some(ref v) = self.NGEPBMFGAMK {
            match v {
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::AOGMMEFAIFJ(v) => {
                    my_size += ::protobuf::rt::uint32_size(11, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.LCEEDIGELGM != 0 {
            os.write_uint32(14, self.LCEEDIGELGM)?;
        }
        if self.BEBCFIIABLI != 0 {
            os.write_uint32(2, self.BEBCFIIABLI)?;
        }
        if let ::std::option::Option::Some(ref v) = self.NGEPBMFGAMK {
            match v {
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::NONNLEAAPNM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::EEKOODFBLPP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::IMIDMDHJBME(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::HEGDEEGAGEK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MDIDHEFADBC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::APKOJHEKMAB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::MBKEDKNPPCN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::NGEPBMFGAMK::AOGMMEFAIFJ(v) => {
                    os.write_uint32(11, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClockParkHandleWaitOperationCsReq {
        ClockParkHandleWaitOperationCsReq::new()
    }

    fn clear(&mut self) {
        self.LCEEDIGELGM = 0;
        self.BEBCFIIABLI = 0;
        self.NGEPBMFGAMK = ::std::option::Option::None;
        self.NGEPBMFGAMK = ::std::option::Option::None;
        self.NGEPBMFGAMK = ::std::option::Option::None;
        self.NGEPBMFGAMK = ::std::option::Option::None;
        self.NGEPBMFGAMK = ::std::option::Option::None;
        self.NGEPBMFGAMK = ::std::option::Option::None;
        self.NGEPBMFGAMK = ::std::option::Option::None;
        self.NGEPBMFGAMK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClockParkHandleWaitOperationCsReq {
        static instance: ClockParkHandleWaitOperationCsReq = ClockParkHandleWaitOperationCsReq {
            LCEEDIGELGM: 0,
            BEBCFIIABLI: 0,
            NGEPBMFGAMK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClockParkHandleWaitOperationCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClockParkHandleWaitOperationCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClockParkHandleWaitOperationCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClockParkHandleWaitOperationCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ClockParkHandleWaitOperationCsReq`
pub mod clock_park_handle_wait_operation_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ClockParkHandleWaitOperationCsReq.NGEPBMFGAMK)
    pub enum NGEPBMFGAMK {
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.NONNLEAAPNM)
        NONNLEAAPNM(super::super::DGNIEFJPLAK::DGNIEFJPLAK),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.EEKOODFBLPP)
        EEKOODFBLPP(super::super::GGLPLMAEDGN::GGLPLMAEDGN),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.IMIDMDHJBME)
        IMIDMDHJBME(super::super::CCOCGNOMNHL::CCOCGNOMNHL),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.HEGDEEGAGEK)
        HEGDEEGAGEK(super::super::MAEIKELDODO::MAEIKELDODO),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.MDIDHEFADBC)
        MDIDHEFADBC(super::super::BGCNNENILKB::BGCNNENILKB),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.APKOJHEKMAB)
        APKOJHEKMAB(super::super::LGKAGODJBOL::LGKAGODJBOL),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.MBKEDKNPPCN)
        MBKEDKNPPCN(super::super::JGGABPHAMOH::JGGABPHAMOH),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.AOGMMEFAIFJ)
        AOGMMEFAIFJ(u32),
    }

    impl ::protobuf::Oneof for NGEPBMFGAMK {
    }

    impl ::protobuf::OneofFull for NGEPBMFGAMK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ClockParkHandleWaitOperationCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("NGEPBMFGAMK").unwrap()).clone()
        }
    }

    impl NGEPBMFGAMK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<NGEPBMFGAMK>("NGEPBMFGAMK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'ClockParkHandleWaitOperationCsReq.proto\x1a\x11BGCNNENILKB.proto\x1a\
    \x11CCOCGNOMNHL.proto\x1a\x11DGNIEFJPLAK.proto\x1a\x11GGLPLMAEDGN.proto\
    \x1a\x11JGGABPHAMOH.proto\x1a\x11LGKAGODJBOL.proto\x1a\x11MAEIKELDODO.pr\
    oto\"\xf8\x03\n!ClockParkHandleWaitOperationCsReq\x12\x20\n\x0bLCEEDIGEL\
    GM\x18\x0e\x20\x01(\rR\x0bLCEEDIGELGM\x12\x20\n\x0bBEBCFIIABLI\x18\x02\
    \x20\x01(\rR\x0bBEBCFIIABLI\x120\n\x0bNONNLEAAPNM\x18\x04\x20\x01(\x0b2\
    \x0c.DGNIEFJPLAKH\0R\x0bNONNLEAAPNM\x120\n\x0bEEKOODFBLPP\x18\x07\x20\
    \x01(\x0b2\x0c.GGLPLMAEDGNH\0R\x0bEEKOODFBLPP\x120\n\x0bIMIDMDHJBME\x18\
    \t\x20\x01(\x0b2\x0c.CCOCGNOMNHLH\0R\x0bIMIDMDHJBME\x120\n\x0bHEGDEEGAGE\
    K\x18\n\x20\x01(\x0b2\x0c.MAEIKELDODOH\0R\x0bHEGDEEGAGEK\x120\n\x0bMDIDH\
    EFADBC\x18\x0f\x20\x01(\x0b2\x0c.BGCNNENILKBH\0R\x0bMDIDHEFADBC\x120\n\
    \x0bAPKOJHEKMAB\x18\x0c\x20\x01(\x0b2\x0c.LGKAGODJBOLH\0R\x0bAPKOJHEKMAB\
    \x120\n\x0bMBKEDKNPPCN\x18\x08\x20\x01(\x0b2\x0c.JGGABPHAMOHH\0R\x0bMBKE\
    DKNPPCN\x12\"\n\x0bAOGMMEFAIFJ\x18\x0b\x20\x01(\rH\0R\x0bAOGMMEFAIFJB\r\
    \n\x0bNGEPBMFGAMKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::BGCNNENILKB::file_descriptor().clone());
            deps.push(super::CCOCGNOMNHL::file_descriptor().clone());
            deps.push(super::DGNIEFJPLAK::file_descriptor().clone());
            deps.push(super::GGLPLMAEDGN::file_descriptor().clone());
            deps.push(super::JGGABPHAMOH::file_descriptor().clone());
            deps.push(super::LGKAGODJBOL::file_descriptor().clone());
            deps.push(super::MAEIKELDODO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ClockParkHandleWaitOperationCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
