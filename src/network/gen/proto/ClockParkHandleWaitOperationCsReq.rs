// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ClockParkHandleWaitOperationCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ClockParkHandleWaitOperationCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClockParkHandleWaitOperationCsReq {
    // message fields
    // @@protoc_insertion_point(field:ClockParkHandleWaitOperationCsReq.EMCJNOFILKP)
    pub EMCJNOFILKP: u32,
    // @@protoc_insertion_point(field:ClockParkHandleWaitOperationCsReq.GOHGIEMLNOM)
    pub GOHGIEMLNOM: u32,
    // message oneof groups
    pub KPBNHOGOPJJ: ::std::option::Option<clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ>,
    // special fields
    // @@protoc_insertion_point(special_field:ClockParkHandleWaitOperationCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClockParkHandleWaitOperationCsReq {
    fn default() -> &'a ClockParkHandleWaitOperationCsReq {
        <ClockParkHandleWaitOperationCsReq as ::protobuf::Message>::default_instance()
    }
}

impl ClockParkHandleWaitOperationCsReq {
    pub fn new() -> ClockParkHandleWaitOperationCsReq {
        ::std::default::Default::default()
    }

    // .BDCFFFAHDOJ ELLJMEFGPDE = 5;

    pub fn ELLJMEFGPDE(&self) -> &super::BDCFFFAHDOJ::BDCFFFAHDOJ {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(ref v)) => v,
            _ => <super::BDCFFFAHDOJ::BDCFFFAHDOJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ELLJMEFGPDE(&mut self) {
        self.KPBNHOGOPJJ = ::std::option::Option::None;
    }

    pub fn has_ELLJMEFGPDE(&self) -> bool {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ELLJMEFGPDE(&mut self, v: super::BDCFFFAHDOJ::BDCFFFAHDOJ) {
        self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ELLJMEFGPDE(&mut self) -> &mut super::BDCFFFAHDOJ::BDCFFFAHDOJ {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(_)) = self.KPBNHOGOPJJ {
        } else {
            self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(super::BDCFFFAHDOJ::BDCFFFAHDOJ::new()));
        }
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ELLJMEFGPDE(&mut self) -> super::BDCFFFAHDOJ::BDCFFFAHDOJ {
        if self.has_ELLJMEFGPDE() {
            match self.KPBNHOGOPJJ.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BDCFFFAHDOJ::BDCFFFAHDOJ::new()
        }
    }

    // .FGLJHLINHHL LKIFMDIGFPB = 1;

    pub fn LKIFMDIGFPB(&self) -> &super::FGLJHLINHHL::FGLJHLINHHL {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(ref v)) => v,
            _ => <super::FGLJHLINHHL::FGLJHLINHHL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LKIFMDIGFPB(&mut self) {
        self.KPBNHOGOPJJ = ::std::option::Option::None;
    }

    pub fn has_LKIFMDIGFPB(&self) -> bool {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LKIFMDIGFPB(&mut self, v: super::FGLJHLINHHL::FGLJHLINHHL) {
        self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LKIFMDIGFPB(&mut self) -> &mut super::FGLJHLINHHL::FGLJHLINHHL {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(_)) = self.KPBNHOGOPJJ {
        } else {
            self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(super::FGLJHLINHHL::FGLJHLINHHL::new()));
        }
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LKIFMDIGFPB(&mut self) -> super::FGLJHLINHHL::FGLJHLINHHL {
        if self.has_LKIFMDIGFPB() {
            match self.KPBNHOGOPJJ.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FGLJHLINHHL::FGLJHLINHHL::new()
        }
    }

    // .LKGCFDCEFIK DPKEIPMAMPI = 8;

    pub fn DPKEIPMAMPI(&self) -> &super::LKGCFDCEFIK::LKGCFDCEFIK {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(ref v)) => v,
            _ => <super::LKGCFDCEFIK::LKGCFDCEFIK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DPKEIPMAMPI(&mut self) {
        self.KPBNHOGOPJJ = ::std::option::Option::None;
    }

    pub fn has_DPKEIPMAMPI(&self) -> bool {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DPKEIPMAMPI(&mut self, v: super::LKGCFDCEFIK::LKGCFDCEFIK) {
        self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DPKEIPMAMPI(&mut self) -> &mut super::LKGCFDCEFIK::LKGCFDCEFIK {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(_)) = self.KPBNHOGOPJJ {
        } else {
            self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(super::LKGCFDCEFIK::LKGCFDCEFIK::new()));
        }
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DPKEIPMAMPI(&mut self) -> super::LKGCFDCEFIK::LKGCFDCEFIK {
        if self.has_DPKEIPMAMPI() {
            match self.KPBNHOGOPJJ.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LKGCFDCEFIK::LKGCFDCEFIK::new()
        }
    }

    // .MENHEEKGDAD BLHKLNJIKLJ = 13;

    pub fn BLHKLNJIKLJ(&self) -> &super::MENHEEKGDAD::MENHEEKGDAD {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(ref v)) => v,
            _ => <super::MENHEEKGDAD::MENHEEKGDAD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BLHKLNJIKLJ(&mut self) {
        self.KPBNHOGOPJJ = ::std::option::Option::None;
    }

    pub fn has_BLHKLNJIKLJ(&self) -> bool {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BLHKLNJIKLJ(&mut self, v: super::MENHEEKGDAD::MENHEEKGDAD) {
        self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BLHKLNJIKLJ(&mut self) -> &mut super::MENHEEKGDAD::MENHEEKGDAD {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(_)) = self.KPBNHOGOPJJ {
        } else {
            self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(super::MENHEEKGDAD::MENHEEKGDAD::new()));
        }
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BLHKLNJIKLJ(&mut self) -> super::MENHEEKGDAD::MENHEEKGDAD {
        if self.has_BLHKLNJIKLJ() {
            match self.KPBNHOGOPJJ.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MENHEEKGDAD::MENHEEKGDAD::new()
        }
    }

    // .EPLNMMHBLAL HFICFNBIDBN = 6;

    pub fn HFICFNBIDBN(&self) -> &super::EPLNMMHBLAL::EPLNMMHBLAL {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(ref v)) => v,
            _ => <super::EPLNMMHBLAL::EPLNMMHBLAL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HFICFNBIDBN(&mut self) {
        self.KPBNHOGOPJJ = ::std::option::Option::None;
    }

    pub fn has_HFICFNBIDBN(&self) -> bool {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HFICFNBIDBN(&mut self, v: super::EPLNMMHBLAL::EPLNMMHBLAL) {
        self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HFICFNBIDBN(&mut self) -> &mut super::EPLNMMHBLAL::EPLNMMHBLAL {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(_)) = self.KPBNHOGOPJJ {
        } else {
            self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(super::EPLNMMHBLAL::EPLNMMHBLAL::new()));
        }
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HFICFNBIDBN(&mut self) -> super::EPLNMMHBLAL::EPLNMMHBLAL {
        if self.has_HFICFNBIDBN() {
            match self.KPBNHOGOPJJ.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EPLNMMHBLAL::EPLNMMHBLAL::new()
        }
    }

    // .DKBPNCMHLFP HFNCOGNBBGD = 3;

    pub fn HFNCOGNBBGD(&self) -> &super::DKBPNCMHLFP::DKBPNCMHLFP {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(ref v)) => v,
            _ => <super::DKBPNCMHLFP::DKBPNCMHLFP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HFNCOGNBBGD(&mut self) {
        self.KPBNHOGOPJJ = ::std::option::Option::None;
    }

    pub fn has_HFNCOGNBBGD(&self) -> bool {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HFNCOGNBBGD(&mut self, v: super::DKBPNCMHLFP::DKBPNCMHLFP) {
        self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HFNCOGNBBGD(&mut self) -> &mut super::DKBPNCMHLFP::DKBPNCMHLFP {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(_)) = self.KPBNHOGOPJJ {
        } else {
            self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(super::DKBPNCMHLFP::DKBPNCMHLFP::new()));
        }
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HFNCOGNBBGD(&mut self) -> super::DKBPNCMHLFP::DKBPNCMHLFP {
        if self.has_HFNCOGNBBGD() {
            match self.KPBNHOGOPJJ.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DKBPNCMHLFP::DKBPNCMHLFP::new()
        }
    }

    // .JFIEFFGOOHK MFKDKBOMINF = 12;

    pub fn MFKDKBOMINF(&self) -> &super::JFIEFFGOOHK::JFIEFFGOOHK {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(ref v)) => v,
            _ => <super::JFIEFFGOOHK::JFIEFFGOOHK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MFKDKBOMINF(&mut self) {
        self.KPBNHOGOPJJ = ::std::option::Option::None;
    }

    pub fn has_MFKDKBOMINF(&self) -> bool {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MFKDKBOMINF(&mut self, v: super::JFIEFFGOOHK::JFIEFFGOOHK) {
        self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MFKDKBOMINF(&mut self) -> &mut super::JFIEFFGOOHK::JFIEFFGOOHK {
        if let ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(_)) = self.KPBNHOGOPJJ {
        } else {
            self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(super::JFIEFFGOOHK::JFIEFFGOOHK::new()));
        }
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MFKDKBOMINF(&mut self) -> super::JFIEFFGOOHK::JFIEFFGOOHK {
        if self.has_MFKDKBOMINF() {
            match self.KPBNHOGOPJJ.take() {
                ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JFIEFFGOOHK::JFIEFFGOOHK::new()
        }
    }

    // uint32 LDHEANPNKLN = 14;

    pub fn LDHEANPNKLN(&self) -> u32 {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LDHEANPNKLN(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_LDHEANPNKLN(&mut self) {
        self.KPBNHOGOPJJ = ::std::option::Option::None;
    }

    pub fn has_LDHEANPNKLN(&self) -> bool {
        match self.KPBNHOGOPJJ {
            ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LDHEANPNKLN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LDHEANPNKLN(&mut self, v: u32) {
        self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LDHEANPNKLN(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EMCJNOFILKP",
            |m: &ClockParkHandleWaitOperationCsReq| { &m.EMCJNOFILKP },
            |m: &mut ClockParkHandleWaitOperationCsReq| { &mut m.EMCJNOFILKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GOHGIEMLNOM",
            |m: &ClockParkHandleWaitOperationCsReq| { &m.GOHGIEMLNOM },
            |m: &mut ClockParkHandleWaitOperationCsReq| { &mut m.GOHGIEMLNOM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BDCFFFAHDOJ::BDCFFFAHDOJ>(
            "ELLJMEFGPDE",
            ClockParkHandleWaitOperationCsReq::has_ELLJMEFGPDE,
            ClockParkHandleWaitOperationCsReq::ELLJMEFGPDE,
            ClockParkHandleWaitOperationCsReq::mut_ELLJMEFGPDE,
            ClockParkHandleWaitOperationCsReq::set_ELLJMEFGPDE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FGLJHLINHHL::FGLJHLINHHL>(
            "LKIFMDIGFPB",
            ClockParkHandleWaitOperationCsReq::has_LKIFMDIGFPB,
            ClockParkHandleWaitOperationCsReq::LKIFMDIGFPB,
            ClockParkHandleWaitOperationCsReq::mut_LKIFMDIGFPB,
            ClockParkHandleWaitOperationCsReq::set_LKIFMDIGFPB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LKGCFDCEFIK::LKGCFDCEFIK>(
            "DPKEIPMAMPI",
            ClockParkHandleWaitOperationCsReq::has_DPKEIPMAMPI,
            ClockParkHandleWaitOperationCsReq::DPKEIPMAMPI,
            ClockParkHandleWaitOperationCsReq::mut_DPKEIPMAMPI,
            ClockParkHandleWaitOperationCsReq::set_DPKEIPMAMPI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MENHEEKGDAD::MENHEEKGDAD>(
            "BLHKLNJIKLJ",
            ClockParkHandleWaitOperationCsReq::has_BLHKLNJIKLJ,
            ClockParkHandleWaitOperationCsReq::BLHKLNJIKLJ,
            ClockParkHandleWaitOperationCsReq::mut_BLHKLNJIKLJ,
            ClockParkHandleWaitOperationCsReq::set_BLHKLNJIKLJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EPLNMMHBLAL::EPLNMMHBLAL>(
            "HFICFNBIDBN",
            ClockParkHandleWaitOperationCsReq::has_HFICFNBIDBN,
            ClockParkHandleWaitOperationCsReq::HFICFNBIDBN,
            ClockParkHandleWaitOperationCsReq::mut_HFICFNBIDBN,
            ClockParkHandleWaitOperationCsReq::set_HFICFNBIDBN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DKBPNCMHLFP::DKBPNCMHLFP>(
            "HFNCOGNBBGD",
            ClockParkHandleWaitOperationCsReq::has_HFNCOGNBBGD,
            ClockParkHandleWaitOperationCsReq::HFNCOGNBBGD,
            ClockParkHandleWaitOperationCsReq::mut_HFNCOGNBBGD,
            ClockParkHandleWaitOperationCsReq::set_HFNCOGNBBGD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JFIEFFGOOHK::JFIEFFGOOHK>(
            "MFKDKBOMINF",
            ClockParkHandleWaitOperationCsReq::has_MFKDKBOMINF,
            ClockParkHandleWaitOperationCsReq::MFKDKBOMINF,
            ClockParkHandleWaitOperationCsReq::mut_MFKDKBOMINF,
            ClockParkHandleWaitOperationCsReq::set_MFKDKBOMINF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "LDHEANPNKLN",
            ClockParkHandleWaitOperationCsReq::has_LDHEANPNKLN,
            ClockParkHandleWaitOperationCsReq::LDHEANPNKLN,
            ClockParkHandleWaitOperationCsReq::set_LDHEANPNKLN,
        ));
        oneofs.push(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClockParkHandleWaitOperationCsReq>(
            "ClockParkHandleWaitOperationCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClockParkHandleWaitOperationCsReq {
    const NAME: &'static str = "ClockParkHandleWaitOperationCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                80 => {
                    self.EMCJNOFILKP = is.read_uint32()?;
                },
                16 => {
                    self.GOHGIEMLNOM = is.read_uint32()?;
                },
                42 => {
                    self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(is.read_message()?));
                },
                10 => {
                    self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(is.read_message()?));
                },
                66 => {
                    self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(is.read_message()?));
                },
                106 => {
                    self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(is.read_message()?));
                },
                50 => {
                    self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(is.read_message()?));
                },
                26 => {
                    self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(is.read_message()?));
                },
                98 => {
                    self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(is.read_message()?));
                },
                112 => {
                    self.KPBNHOGOPJJ = ::std::option::Option::Some(clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LDHEANPNKLN(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.EMCJNOFILKP != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.EMCJNOFILKP);
        }
        if self.GOHGIEMLNOM != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.GOHGIEMLNOM);
        }
        if let ::std::option::Option::Some(ref v) = self.KPBNHOGOPJJ {
            match v {
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LDHEANPNKLN(v) => {
                    my_size += ::protobuf::rt::uint32_size(14, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.EMCJNOFILKP != 0 {
            os.write_uint32(10, self.EMCJNOFILKP)?;
        }
        if self.GOHGIEMLNOM != 0 {
            os.write_uint32(2, self.GOHGIEMLNOM)?;
        }
        if let ::std::option::Option::Some(ref v) = self.KPBNHOGOPJJ {
            match v {
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::ELLJMEFGPDE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LKIFMDIGFPB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::DPKEIPMAMPI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::BLHKLNJIKLJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFICFNBIDBN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::HFNCOGNBBGD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::MFKDKBOMINF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &clock_park_handle_wait_operation_cs_req::KPBNHOGOPJJ::LDHEANPNKLN(v) => {
                    os.write_uint32(14, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClockParkHandleWaitOperationCsReq {
        ClockParkHandleWaitOperationCsReq::new()
    }

    fn clear(&mut self) {
        self.EMCJNOFILKP = 0;
        self.GOHGIEMLNOM = 0;
        self.KPBNHOGOPJJ = ::std::option::Option::None;
        self.KPBNHOGOPJJ = ::std::option::Option::None;
        self.KPBNHOGOPJJ = ::std::option::Option::None;
        self.KPBNHOGOPJJ = ::std::option::Option::None;
        self.KPBNHOGOPJJ = ::std::option::Option::None;
        self.KPBNHOGOPJJ = ::std::option::Option::None;
        self.KPBNHOGOPJJ = ::std::option::Option::None;
        self.KPBNHOGOPJJ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClockParkHandleWaitOperationCsReq {
        static instance: ClockParkHandleWaitOperationCsReq = ClockParkHandleWaitOperationCsReq {
            EMCJNOFILKP: 0,
            GOHGIEMLNOM: 0,
            KPBNHOGOPJJ: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClockParkHandleWaitOperationCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClockParkHandleWaitOperationCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClockParkHandleWaitOperationCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClockParkHandleWaitOperationCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ClockParkHandleWaitOperationCsReq`
pub mod clock_park_handle_wait_operation_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ClockParkHandleWaitOperationCsReq.KPBNHOGOPJJ)
    pub enum KPBNHOGOPJJ {
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.ELLJMEFGPDE)
        ELLJMEFGPDE(super::super::BDCFFFAHDOJ::BDCFFFAHDOJ),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.LKIFMDIGFPB)
        LKIFMDIGFPB(super::super::FGLJHLINHHL::FGLJHLINHHL),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.DPKEIPMAMPI)
        DPKEIPMAMPI(super::super::LKGCFDCEFIK::LKGCFDCEFIK),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.BLHKLNJIKLJ)
        BLHKLNJIKLJ(super::super::MENHEEKGDAD::MENHEEKGDAD),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.HFICFNBIDBN)
        HFICFNBIDBN(super::super::EPLNMMHBLAL::EPLNMMHBLAL),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.HFNCOGNBBGD)
        HFNCOGNBBGD(super::super::DKBPNCMHLFP::DKBPNCMHLFP),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.MFKDKBOMINF)
        MFKDKBOMINF(super::super::JFIEFFGOOHK::JFIEFFGOOHK),
        // @@protoc_insertion_point(oneof_field:ClockParkHandleWaitOperationCsReq.LDHEANPNKLN)
        LDHEANPNKLN(u32),
    }

    impl ::protobuf::Oneof for KPBNHOGOPJJ {
    }

    impl ::protobuf::OneofFull for KPBNHOGOPJJ {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ClockParkHandleWaitOperationCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("KPBNHOGOPJJ").unwrap()).clone()
        }
    }

    impl KPBNHOGOPJJ {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KPBNHOGOPJJ>("KPBNHOGOPJJ")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'ClockParkHandleWaitOperationCsReq.proto\x1a\x11BDCFFFAHDOJ.proto\x1a\
    \x11DKBPNCMHLFP.proto\x1a\x11EPLNMMHBLAL.proto\x1a\x11FGLJHLINHHL.proto\
    \x1a\x11JFIEFFGOOHK.proto\x1a\x11LKGCFDCEFIK.proto\x1a\x11MENHEEKGDAD.pr\
    oto\"\xf8\x03\n!ClockParkHandleWaitOperationCsReq\x12\x20\n\x0bEMCJNOFIL\
    KP\x18\n\x20\x01(\rR\x0bEMCJNOFILKP\x12\x20\n\x0bGOHGIEMLNOM\x18\x02\x20\
    \x01(\rR\x0bGOHGIEMLNOM\x120\n\x0bELLJMEFGPDE\x18\x05\x20\x01(\x0b2\x0c.\
    BDCFFFAHDOJH\0R\x0bELLJMEFGPDE\x120\n\x0bLKIFMDIGFPB\x18\x01\x20\x01(\
    \x0b2\x0c.FGLJHLINHHLH\0R\x0bLKIFMDIGFPB\x120\n\x0bDPKEIPMAMPI\x18\x08\
    \x20\x01(\x0b2\x0c.LKGCFDCEFIKH\0R\x0bDPKEIPMAMPI\x120\n\x0bBLHKLNJIKLJ\
    \x18\r\x20\x01(\x0b2\x0c.MENHEEKGDADH\0R\x0bBLHKLNJIKLJ\x120\n\x0bHFICFN\
    BIDBN\x18\x06\x20\x01(\x0b2\x0c.EPLNMMHBLALH\0R\x0bHFICFNBIDBN\x120\n\
    \x0bHFNCOGNBBGD\x18\x03\x20\x01(\x0b2\x0c.DKBPNCMHLFPH\0R\x0bHFNCOGNBBGD\
    \x120\n\x0bMFKDKBOMINF\x18\x0c\x20\x01(\x0b2\x0c.JFIEFFGOOHKH\0R\x0bMFKD\
    KBOMINF\x12\"\n\x0bLDHEANPNKLN\x18\x0e\x20\x01(\rH\0R\x0bLDHEANPNKLNB\r\
    \n\x0bKPBNHOGOPJJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::BDCFFFAHDOJ::file_descriptor().clone());
            deps.push(super::DKBPNCMHLFP::file_descriptor().clone());
            deps.push(super::EPLNMMHBLAL::file_descriptor().clone());
            deps.push(super::FGLJHLINHHL::file_descriptor().clone());
            deps.push(super::JFIEFFGOOHK::file_descriptor().clone());
            deps.push(super::LKGCFDCEFIK::file_descriptor().clone());
            deps.push(super::MENHEEKGDAD::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ClockParkHandleWaitOperationCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
