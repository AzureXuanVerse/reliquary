// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdAetherDivideType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdAetherDivideType)
pub enum CmdAetherDivideType {
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideTypeNone)
    CmdAetherDivideTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideSpiritExpUpCsReq)
    CmdAetherDivideSpiritExpUpCsReq = 4822,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdSwitchAetherDivideLineUpSlotCsReq)
    CmdSwitchAetherDivideLineUpSlotCsReq = 4811,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdGetAetherDivideInfoCsReq)
    CmdGetAetherDivideInfoCsReq = 4845,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdGetAetherDivideChallengeInfoCsReq)
    CmdGetAetherDivideChallengeInfoCsReq = 4805,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdEnterAetherDivideSceneScRsp)
    CmdEnterAetherDivideSceneScRsp = 4850,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdSetAetherDivideLineUpCsReq)
    CmdSetAetherDivideLineUpCsReq = 4810,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideSpiritExpUpScRsp)
    CmdAetherDivideSpiritExpUpScRsp = 4814,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideSkillItemScNotify)
    CmdAetherDivideSkillItemScNotify = 4825,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdLeaveAetherDivideSceneScRsp)
    CmdLeaveAetherDivideSceneScRsp = 4823,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideRefreshEndlessCsReq)
    CmdAetherDivideRefreshEndlessCsReq = 4834,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideSpiritInfoScNotify)
    CmdAetherDivideSpiritInfoScNotify = 4842,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdEquipAetherDividePassiveSkillCsReq)
    CmdEquipAetherDividePassiveSkillCsReq = 4813,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdStartAetherDivideChallengeBattleCsReq)
    CmdStartAetherDivideChallengeBattleCsReq = 4809,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdStartAetherDivideStageBattleCsReq)
    CmdStartAetherDivideStageBattleCsReq = 4835,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdGetAetherDivideChallengeInfoScRsp)
    CmdGetAetherDivideChallengeInfoScRsp = 4824,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideRefreshEndlessScNotify)
    CmdAetherDivideRefreshEndlessScNotify = 4837,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdClearAetherDividePassiveSkillCsReq)
    CmdClearAetherDividePassiveSkillCsReq = 4804,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdStartAetherDivideSceneBattleScRsp)
    CmdStartAetherDivideSceneBattleScRsp = 4849,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideTainerInfoScNotify)
    CmdAetherDivideTainerInfoScNotify = 4829,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideFinishChallengeScNotify)
    CmdAetherDivideFinishChallengeScNotify = 4820,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdClearAetherDividePassiveSkillScRsp)
    CmdClearAetherDividePassiveSkillScRsp = 4840,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideRefreshEndlessScRsp)
    CmdAetherDivideRefreshEndlessScRsp = 4819,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideTakeChallengeRewardCsReq)
    CmdAetherDivideTakeChallengeRewardCsReq = 4838,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideLineupScNotify)
    CmdAetherDivideLineupScNotify = 4844,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdStartAetherDivideSceneBattleCsReq)
    CmdStartAetherDivideSceneBattleCsReq = 4815,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdStartAetherDivideChallengeBattleScRsp)
    CmdStartAetherDivideChallengeBattleScRsp = 4843,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdLeaveAetherDivideSceneCsReq)
    CmdLeaveAetherDivideSceneCsReq = 4830,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdSetAetherDivideLineUpScRsp)
    CmdSetAetherDivideLineUpScRsp = 4848,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdAetherDivideTakeChallengeRewardScRsp)
    CmdAetherDivideTakeChallengeRewardScRsp = 4833,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdSwitchAetherDivideLineUpSlotScRsp)
    CmdSwitchAetherDivideLineUpSlotScRsp = 4806,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdGetAetherDivideInfoScRsp)
    CmdGetAetherDivideInfoScRsp = 4828,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdEquipAetherDividePassiveSkillScRsp)
    CmdEquipAetherDividePassiveSkillScRsp = 4817,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdStartAetherDivideStageBattleScRsp)
    CmdStartAetherDivideStageBattleScRsp = 4818,
    // @@protoc_insertion_point(enum_value:CmdAetherDivideType.CmdEnterAetherDivideSceneCsReq)
    CmdEnterAetherDivideSceneCsReq = 4812,
}

impl ::protobuf::Enum for CmdAetherDivideType {
    const NAME: &'static str = "CmdAetherDivideType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdAetherDivideType> {
        match value {
            0 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideTypeNone),
            4822 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideSpiritExpUpCsReq),
            4811 => ::std::option::Option::Some(CmdAetherDivideType::CmdSwitchAetherDivideLineUpSlotCsReq),
            4845 => ::std::option::Option::Some(CmdAetherDivideType::CmdGetAetherDivideInfoCsReq),
            4805 => ::std::option::Option::Some(CmdAetherDivideType::CmdGetAetherDivideChallengeInfoCsReq),
            4850 => ::std::option::Option::Some(CmdAetherDivideType::CmdEnterAetherDivideSceneScRsp),
            4810 => ::std::option::Option::Some(CmdAetherDivideType::CmdSetAetherDivideLineUpCsReq),
            4814 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideSpiritExpUpScRsp),
            4825 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideSkillItemScNotify),
            4823 => ::std::option::Option::Some(CmdAetherDivideType::CmdLeaveAetherDivideSceneScRsp),
            4834 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideRefreshEndlessCsReq),
            4842 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideSpiritInfoScNotify),
            4813 => ::std::option::Option::Some(CmdAetherDivideType::CmdEquipAetherDividePassiveSkillCsReq),
            4809 => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideChallengeBattleCsReq),
            4835 => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideStageBattleCsReq),
            4824 => ::std::option::Option::Some(CmdAetherDivideType::CmdGetAetherDivideChallengeInfoScRsp),
            4837 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideRefreshEndlessScNotify),
            4804 => ::std::option::Option::Some(CmdAetherDivideType::CmdClearAetherDividePassiveSkillCsReq),
            4849 => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideSceneBattleScRsp),
            4829 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideTainerInfoScNotify),
            4820 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideFinishChallengeScNotify),
            4840 => ::std::option::Option::Some(CmdAetherDivideType::CmdClearAetherDividePassiveSkillScRsp),
            4819 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideRefreshEndlessScRsp),
            4838 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideTakeChallengeRewardCsReq),
            4844 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideLineupScNotify),
            4815 => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideSceneBattleCsReq),
            4843 => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideChallengeBattleScRsp),
            4830 => ::std::option::Option::Some(CmdAetherDivideType::CmdLeaveAetherDivideSceneCsReq),
            4848 => ::std::option::Option::Some(CmdAetherDivideType::CmdSetAetherDivideLineUpScRsp),
            4833 => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideTakeChallengeRewardScRsp),
            4806 => ::std::option::Option::Some(CmdAetherDivideType::CmdSwitchAetherDivideLineUpSlotScRsp),
            4828 => ::std::option::Option::Some(CmdAetherDivideType::CmdGetAetherDivideInfoScRsp),
            4817 => ::std::option::Option::Some(CmdAetherDivideType::CmdEquipAetherDividePassiveSkillScRsp),
            4818 => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideStageBattleScRsp),
            4812 => ::std::option::Option::Some(CmdAetherDivideType::CmdEnterAetherDivideSceneCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdAetherDivideType> {
        match str {
            "CmdAetherDivideTypeNone" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideTypeNone),
            "CmdAetherDivideSpiritExpUpCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideSpiritExpUpCsReq),
            "CmdSwitchAetherDivideLineUpSlotCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdSwitchAetherDivideLineUpSlotCsReq),
            "CmdGetAetherDivideInfoCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdGetAetherDivideInfoCsReq),
            "CmdGetAetherDivideChallengeInfoCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdGetAetherDivideChallengeInfoCsReq),
            "CmdEnterAetherDivideSceneScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdEnterAetherDivideSceneScRsp),
            "CmdSetAetherDivideLineUpCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdSetAetherDivideLineUpCsReq),
            "CmdAetherDivideSpiritExpUpScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideSpiritExpUpScRsp),
            "CmdAetherDivideSkillItemScNotify" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideSkillItemScNotify),
            "CmdLeaveAetherDivideSceneScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdLeaveAetherDivideSceneScRsp),
            "CmdAetherDivideRefreshEndlessCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideRefreshEndlessCsReq),
            "CmdAetherDivideSpiritInfoScNotify" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideSpiritInfoScNotify),
            "CmdEquipAetherDividePassiveSkillCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdEquipAetherDividePassiveSkillCsReq),
            "CmdStartAetherDivideChallengeBattleCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideChallengeBattleCsReq),
            "CmdStartAetherDivideStageBattleCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideStageBattleCsReq),
            "CmdGetAetherDivideChallengeInfoScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdGetAetherDivideChallengeInfoScRsp),
            "CmdAetherDivideRefreshEndlessScNotify" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideRefreshEndlessScNotify),
            "CmdClearAetherDividePassiveSkillCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdClearAetherDividePassiveSkillCsReq),
            "CmdStartAetherDivideSceneBattleScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideSceneBattleScRsp),
            "CmdAetherDivideTainerInfoScNotify" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideTainerInfoScNotify),
            "CmdAetherDivideFinishChallengeScNotify" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideFinishChallengeScNotify),
            "CmdClearAetherDividePassiveSkillScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdClearAetherDividePassiveSkillScRsp),
            "CmdAetherDivideRefreshEndlessScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideRefreshEndlessScRsp),
            "CmdAetherDivideTakeChallengeRewardCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideTakeChallengeRewardCsReq),
            "CmdAetherDivideLineupScNotify" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideLineupScNotify),
            "CmdStartAetherDivideSceneBattleCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideSceneBattleCsReq),
            "CmdStartAetherDivideChallengeBattleScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideChallengeBattleScRsp),
            "CmdLeaveAetherDivideSceneCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdLeaveAetherDivideSceneCsReq),
            "CmdSetAetherDivideLineUpScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdSetAetherDivideLineUpScRsp),
            "CmdAetherDivideTakeChallengeRewardScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdAetherDivideTakeChallengeRewardScRsp),
            "CmdSwitchAetherDivideLineUpSlotScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdSwitchAetherDivideLineUpSlotScRsp),
            "CmdGetAetherDivideInfoScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdGetAetherDivideInfoScRsp),
            "CmdEquipAetherDividePassiveSkillScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdEquipAetherDividePassiveSkillScRsp),
            "CmdStartAetherDivideStageBattleScRsp" => ::std::option::Option::Some(CmdAetherDivideType::CmdStartAetherDivideStageBattleScRsp),
            "CmdEnterAetherDivideSceneCsReq" => ::std::option::Option::Some(CmdAetherDivideType::CmdEnterAetherDivideSceneCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdAetherDivideType] = &[
        CmdAetherDivideType::CmdAetherDivideTypeNone,
        CmdAetherDivideType::CmdAetherDivideSpiritExpUpCsReq,
        CmdAetherDivideType::CmdSwitchAetherDivideLineUpSlotCsReq,
        CmdAetherDivideType::CmdGetAetherDivideInfoCsReq,
        CmdAetherDivideType::CmdGetAetherDivideChallengeInfoCsReq,
        CmdAetherDivideType::CmdEnterAetherDivideSceneScRsp,
        CmdAetherDivideType::CmdSetAetherDivideLineUpCsReq,
        CmdAetherDivideType::CmdAetherDivideSpiritExpUpScRsp,
        CmdAetherDivideType::CmdAetherDivideSkillItemScNotify,
        CmdAetherDivideType::CmdLeaveAetherDivideSceneScRsp,
        CmdAetherDivideType::CmdAetherDivideRefreshEndlessCsReq,
        CmdAetherDivideType::CmdAetherDivideSpiritInfoScNotify,
        CmdAetherDivideType::CmdEquipAetherDividePassiveSkillCsReq,
        CmdAetherDivideType::CmdStartAetherDivideChallengeBattleCsReq,
        CmdAetherDivideType::CmdStartAetherDivideStageBattleCsReq,
        CmdAetherDivideType::CmdGetAetherDivideChallengeInfoScRsp,
        CmdAetherDivideType::CmdAetherDivideRefreshEndlessScNotify,
        CmdAetherDivideType::CmdClearAetherDividePassiveSkillCsReq,
        CmdAetherDivideType::CmdStartAetherDivideSceneBattleScRsp,
        CmdAetherDivideType::CmdAetherDivideTainerInfoScNotify,
        CmdAetherDivideType::CmdAetherDivideFinishChallengeScNotify,
        CmdAetherDivideType::CmdClearAetherDividePassiveSkillScRsp,
        CmdAetherDivideType::CmdAetherDivideRefreshEndlessScRsp,
        CmdAetherDivideType::CmdAetherDivideTakeChallengeRewardCsReq,
        CmdAetherDivideType::CmdAetherDivideLineupScNotify,
        CmdAetherDivideType::CmdStartAetherDivideSceneBattleCsReq,
        CmdAetherDivideType::CmdStartAetherDivideChallengeBattleScRsp,
        CmdAetherDivideType::CmdLeaveAetherDivideSceneCsReq,
        CmdAetherDivideType::CmdSetAetherDivideLineUpScRsp,
        CmdAetherDivideType::CmdAetherDivideTakeChallengeRewardScRsp,
        CmdAetherDivideType::CmdSwitchAetherDivideLineUpSlotScRsp,
        CmdAetherDivideType::CmdGetAetherDivideInfoScRsp,
        CmdAetherDivideType::CmdEquipAetherDividePassiveSkillScRsp,
        CmdAetherDivideType::CmdStartAetherDivideStageBattleScRsp,
        CmdAetherDivideType::CmdEnterAetherDivideSceneCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdAetherDivideType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdAetherDivideType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdAetherDivideType::CmdAetherDivideTypeNone => 0,
            CmdAetherDivideType::CmdAetherDivideSpiritExpUpCsReq => 1,
            CmdAetherDivideType::CmdSwitchAetherDivideLineUpSlotCsReq => 2,
            CmdAetherDivideType::CmdGetAetherDivideInfoCsReq => 3,
            CmdAetherDivideType::CmdGetAetherDivideChallengeInfoCsReq => 4,
            CmdAetherDivideType::CmdEnterAetherDivideSceneScRsp => 5,
            CmdAetherDivideType::CmdSetAetherDivideLineUpCsReq => 6,
            CmdAetherDivideType::CmdAetherDivideSpiritExpUpScRsp => 7,
            CmdAetherDivideType::CmdAetherDivideSkillItemScNotify => 8,
            CmdAetherDivideType::CmdLeaveAetherDivideSceneScRsp => 9,
            CmdAetherDivideType::CmdAetherDivideRefreshEndlessCsReq => 10,
            CmdAetherDivideType::CmdAetherDivideSpiritInfoScNotify => 11,
            CmdAetherDivideType::CmdEquipAetherDividePassiveSkillCsReq => 12,
            CmdAetherDivideType::CmdStartAetherDivideChallengeBattleCsReq => 13,
            CmdAetherDivideType::CmdStartAetherDivideStageBattleCsReq => 14,
            CmdAetherDivideType::CmdGetAetherDivideChallengeInfoScRsp => 15,
            CmdAetherDivideType::CmdAetherDivideRefreshEndlessScNotify => 16,
            CmdAetherDivideType::CmdClearAetherDividePassiveSkillCsReq => 17,
            CmdAetherDivideType::CmdStartAetherDivideSceneBattleScRsp => 18,
            CmdAetherDivideType::CmdAetherDivideTainerInfoScNotify => 19,
            CmdAetherDivideType::CmdAetherDivideFinishChallengeScNotify => 20,
            CmdAetherDivideType::CmdClearAetherDividePassiveSkillScRsp => 21,
            CmdAetherDivideType::CmdAetherDivideRefreshEndlessScRsp => 22,
            CmdAetherDivideType::CmdAetherDivideTakeChallengeRewardCsReq => 23,
            CmdAetherDivideType::CmdAetherDivideLineupScNotify => 24,
            CmdAetherDivideType::CmdStartAetherDivideSceneBattleCsReq => 25,
            CmdAetherDivideType::CmdStartAetherDivideChallengeBattleScRsp => 26,
            CmdAetherDivideType::CmdLeaveAetherDivideSceneCsReq => 27,
            CmdAetherDivideType::CmdSetAetherDivideLineUpScRsp => 28,
            CmdAetherDivideType::CmdAetherDivideTakeChallengeRewardScRsp => 29,
            CmdAetherDivideType::CmdSwitchAetherDivideLineUpSlotScRsp => 30,
            CmdAetherDivideType::CmdGetAetherDivideInfoScRsp => 31,
            CmdAetherDivideType::CmdEquipAetherDividePassiveSkillScRsp => 32,
            CmdAetherDivideType::CmdStartAetherDivideStageBattleScRsp => 33,
            CmdAetherDivideType::CmdEnterAetherDivideSceneCsReq => 34,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdAetherDivideType {
    fn default() -> Self {
        CmdAetherDivideType::CmdAetherDivideTypeNone
    }
}

impl CmdAetherDivideType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdAetherDivideType>("CmdAetherDivideType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19CmdAetherDivideType.proto*\xa6\x0b\n\x13CmdAetherDivideType\x12\
    \x1b\n\x17CmdAetherDivideTypeNone\x10\0\x12$\n\x1fCmdAetherDivideSpiritE\
    xpUpCsReq\x10\xd6%\x12)\n$CmdSwitchAetherDivideLineUpSlotCsReq\x10\xcb%\
    \x12\x20\n\x1bCmdGetAetherDivideInfoCsReq\x10\xed%\x12)\n$CmdGetAetherDi\
    videChallengeInfoCsReq\x10\xc5%\x12#\n\x1eCmdEnterAetherDivideSceneScRsp\
    \x10\xf2%\x12\"\n\x1dCmdSetAetherDivideLineUpCsReq\x10\xca%\x12$\n\x1fCm\
    dAetherDivideSpiritExpUpScRsp\x10\xce%\x12%\n\x20CmdAetherDivideSkillIte\
    mScNotify\x10\xd9%\x12#\n\x1eCmdLeaveAetherDivideSceneScRsp\x10\xd7%\x12\
    '\n\"CmdAetherDivideRefreshEndlessCsReq\x10\xe2%\x12&\n!CmdAetherDivideS\
    piritInfoScNotify\x10\xea%\x12*\n%CmdEquipAetherDividePassiveSkillCsReq\
    \x10\xcd%\x12-\n(CmdStartAetherDivideChallengeBattleCsReq\x10\xc9%\x12)\
    \n$CmdStartAetherDivideStageBattleCsReq\x10\xe3%\x12)\n$CmdGetAetherDivi\
    deChallengeInfoScRsp\x10\xd8%\x12*\n%CmdAetherDivideRefreshEndlessScNoti\
    fy\x10\xe5%\x12*\n%CmdClearAetherDividePassiveSkillCsReq\x10\xc4%\x12)\n\
    $CmdStartAetherDivideSceneBattleScRsp\x10\xf1%\x12&\n!CmdAetherDivideTai\
    nerInfoScNotify\x10\xdd%\x12+\n&CmdAetherDivideFinishChallengeScNotify\
    \x10\xd4%\x12*\n%CmdClearAetherDividePassiveSkillScRsp\x10\xe8%\x12'\n\"\
    CmdAetherDivideRefreshEndlessScRsp\x10\xd3%\x12,\n'CmdAetherDivideTakeCh\
    allengeRewardCsReq\x10\xe6%\x12\"\n\x1dCmdAetherDivideLineupScNotify\x10\
    \xec%\x12)\n$CmdStartAetherDivideSceneBattleCsReq\x10\xcf%\x12-\n(CmdSta\
    rtAetherDivideChallengeBattleScRsp\x10\xeb%\x12#\n\x1eCmdLeaveAetherDivi\
    deSceneCsReq\x10\xde%\x12\"\n\x1dCmdSetAetherDivideLineUpScRsp\x10\xf0%\
    \x12,\n'CmdAetherDivideTakeChallengeRewardScRsp\x10\xe1%\x12)\n$CmdSwitc\
    hAetherDivideLineUpSlotScRsp\x10\xc6%\x12\x20\n\x1bCmdGetAetherDivideInf\
    oScRsp\x10\xdc%\x12*\n%CmdEquipAetherDividePassiveSkillScRsp\x10\xd1%\
    \x12)\n$CmdStartAetherDivideStageBattleScRsp\x10\xd2%\x12#\n\x1eCmdEnter\
    AetherDivideSceneCsReq\x10\xcc%b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdAetherDivideType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
