// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HandleRogueCommonPendingActionScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueCallback)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueCallback {
    // special fields
    // @@protoc_insertion_point(special_field:RogueCallback.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueCallback {
    fn default() -> &'a RogueCallback {
        <RogueCallback as ::protobuf::Message>::default_instance()
    }
}

impl RogueCallback {
    pub fn new() -> RogueCallback {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueCallback>(
            "RogueCallback",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueCallback {
    const NAME: &'static str = "RogueCallback";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueCallback {
        RogueCallback::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueCallback {
        static instance: RogueCallback = RogueCallback {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueCallback {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueCallback").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueCallback {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueCallback {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:HandleRogueCommonPendingActionScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HandleRogueCommonPendingActionScRsp {
    // message fields
    // @@protoc_insertion_point(field:HandleRogueCommonPendingActionScRsp.queue_position)
    pub queue_position: u32,
    // @@protoc_insertion_point(field:HandleRogueCommonPendingActionScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:HandleRogueCommonPendingActionScRsp.queue_location)
    pub queue_location: u32,
    // message oneof groups
    pub buff: ::std::option::Option<handle_rogue_common_pending_action_sc_rsp::Buff>,
    // special fields
    // @@protoc_insertion_point(special_field:HandleRogueCommonPendingActionScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HandleRogueCommonPendingActionScRsp {
    fn default() -> &'a HandleRogueCommonPendingActionScRsp {
        <HandleRogueCommonPendingActionScRsp as ::protobuf::Message>::default_instance()
    }
}

impl HandleRogueCommonPendingActionScRsp {
    pub fn new() -> HandleRogueCommonPendingActionScRsp {
        ::std::default::Default::default()
    }

    // .RogueCallback buff_select_callback = 1027;

    pub fn buff_select_callback(&self) -> &RogueCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(ref v)) => v,
            _ => <RogueCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_select_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_buff_select_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_select_callback(&mut self, v: RogueCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_select_callback(&mut self) -> &mut RogueCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(RogueCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_select_callback(&mut self) -> RogueCallback {
        if self.has_buff_select_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            RogueCallback::new()
        }
    }

    // .RogueBuffRerollCallback buff_reroll_callback = 98;

    pub fn buff_reroll_callback(&self) -> &super::RogueBuffRerollCallback::RogueBuffRerollCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(ref v)) => v,
            _ => <super::RogueBuffRerollCallback::RogueBuffRerollCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_reroll_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_buff_reroll_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_reroll_callback(&mut self, v: super::RogueBuffRerollCallback::RogueBuffRerollCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_reroll_callback(&mut self) -> &mut super::RogueBuffRerollCallback::RogueBuffRerollCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(super::RogueBuffRerollCallback::RogueBuffRerollCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_reroll_callback(&mut self) -> super::RogueBuffRerollCallback::RogueBuffRerollCallback {
        if self.has_buff_reroll_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueBuffRerollCallback::RogueBuffRerollCallback::new()
        }
    }

    // .RogueCallback buff_reforge_select_callback = 1911;

    pub fn buff_reforge_select_callback(&self) -> &RogueCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(ref v)) => v,
            _ => <RogueCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buff_reforge_select_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_buff_reforge_select_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buff_reforge_select_callback(&mut self, v: RogueCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buff_reforge_select_callback(&mut self) -> &mut RogueCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(RogueCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buff_reforge_select_callback(&mut self) -> RogueCallback {
        if self.has_buff_reforge_select_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            RogueCallback::new()
        }
    }

    // .RogueCallback miracle_select_callback = 1356;

    pub fn miracle_select_callback(&self) -> &RogueCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(ref v)) => v,
            _ => <RogueCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_miracle_select_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_miracle_select_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_miracle_select_callback(&mut self, v: RogueCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_miracle_select_callback(&mut self) -> &mut RogueCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(RogueCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_miracle_select_callback(&mut self) -> RogueCallback {
        if self.has_miracle_select_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            RogueCallback::new()
        }
    }

    // .RogueCallback hex_avatar_select_callback = 353;

    pub fn hex_avatar_select_callback(&self) -> &RogueCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(ref v)) => v,
            _ => <RogueCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_hex_avatar_select_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_hex_avatar_select_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hex_avatar_select_callback(&mut self, v: RogueCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hex_avatar_select_callback(&mut self) -> &mut RogueCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(RogueCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hex_avatar_select_callback(&mut self) -> RogueCallback {
        if self.has_hex_avatar_select_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            RogueCallback::new()
        }
    }

    // .RogueCallback bonus_select_callback = 1448;

    pub fn bonus_select_callback(&self) -> &RogueCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(ref v)) => v,
            _ => <RogueCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bonus_select_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_bonus_select_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bonus_select_callback(&mut self, v: RogueCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bonus_select_callback(&mut self) -> &mut RogueCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(RogueCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bonus_select_callback(&mut self) -> RogueCallback {
        if self.has_bonus_select_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            RogueCallback::new()
        }
    }

    // .RogueCallback rogue_tourn_formula_callback = 256;

    pub fn rogue_tourn_formula_callback(&self) -> &RogueCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(ref v)) => v,
            _ => <RogueCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_rogue_tourn_formula_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_rogue_tourn_formula_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rogue_tourn_formula_callback(&mut self, v: RogueCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rogue_tourn_formula_callback(&mut self) -> &mut RogueCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(RogueCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rogue_tourn_formula_callback(&mut self) -> RogueCallback {
        if self.has_rogue_tourn_formula_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            RogueCallback::new()
        }
    }

    // .RogueCallback reforge_miracle_select_callback = 1227;

    pub fn reforge_miracle_select_callback(&self) -> &RogueCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(ref v)) => v,
            _ => <RogueCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reforge_miracle_select_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_reforge_miracle_select_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reforge_miracle_select_callback(&mut self, v: RogueCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reforge_miracle_select_callback(&mut self) -> &mut RogueCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(RogueCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reforge_miracle_select_callback(&mut self) -> RogueCallback {
        if self.has_reforge_miracle_select_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            RogueCallback::new()
        }
    }

    // .RogueCallback magic_unit_select_callback = 761;

    pub fn magic_unit_select_callback(&self) -> &RogueCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(ref v)) => v,
            _ => <RogueCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_magic_unit_select_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_magic_unit_select_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_magic_unit_select_callback(&mut self, v: RogueCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_magic_unit_select_callback(&mut self) -> &mut RogueCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(RogueCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_magic_unit_select_callback(&mut self) -> RogueCallback {
        if self.has_magic_unit_select_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            RogueCallback::new()
        }
    }

    // .RogueCallback scepter_select_callback = 895;

    pub fn scepter_select_callback(&self) -> &RogueCallback {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(ref v)) => v,
            _ => <RogueCallback as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_scepter_select_callback(&mut self) {
        self.buff = ::std::option::Option::None;
    }

    pub fn has_scepter_select_callback(&self) -> bool {
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scepter_select_callback(&mut self, v: RogueCallback) {
        self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scepter_select_callback(&mut self) -> &mut RogueCallback {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(_)) = self.buff {
        } else {
            self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(RogueCallback::new()));
        }
        match self.buff {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scepter_select_callback(&mut self) -> RogueCallback {
        if self.has_scepter_select_callback() {
            match self.buff.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(v)) => v,
                _ => panic!(),
            }
        } else {
            RogueCallback::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RogueCallback>(
            "buff_select_callback",
            HandleRogueCommonPendingActionScRsp::has_buff_select_callback,
            HandleRogueCommonPendingActionScRsp::buff_select_callback,
            HandleRogueCommonPendingActionScRsp::mut_buff_select_callback,
            HandleRogueCommonPendingActionScRsp::set_buff_select_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueBuffRerollCallback::RogueBuffRerollCallback>(
            "buff_reroll_callback",
            HandleRogueCommonPendingActionScRsp::has_buff_reroll_callback,
            HandleRogueCommonPendingActionScRsp::buff_reroll_callback,
            HandleRogueCommonPendingActionScRsp::mut_buff_reroll_callback,
            HandleRogueCommonPendingActionScRsp::set_buff_reroll_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RogueCallback>(
            "buff_reforge_select_callback",
            HandleRogueCommonPendingActionScRsp::has_buff_reforge_select_callback,
            HandleRogueCommonPendingActionScRsp::buff_reforge_select_callback,
            HandleRogueCommonPendingActionScRsp::mut_buff_reforge_select_callback,
            HandleRogueCommonPendingActionScRsp::set_buff_reforge_select_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RogueCallback>(
            "miracle_select_callback",
            HandleRogueCommonPendingActionScRsp::has_miracle_select_callback,
            HandleRogueCommonPendingActionScRsp::miracle_select_callback,
            HandleRogueCommonPendingActionScRsp::mut_miracle_select_callback,
            HandleRogueCommonPendingActionScRsp::set_miracle_select_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RogueCallback>(
            "hex_avatar_select_callback",
            HandleRogueCommonPendingActionScRsp::has_hex_avatar_select_callback,
            HandleRogueCommonPendingActionScRsp::hex_avatar_select_callback,
            HandleRogueCommonPendingActionScRsp::mut_hex_avatar_select_callback,
            HandleRogueCommonPendingActionScRsp::set_hex_avatar_select_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RogueCallback>(
            "bonus_select_callback",
            HandleRogueCommonPendingActionScRsp::has_bonus_select_callback,
            HandleRogueCommonPendingActionScRsp::bonus_select_callback,
            HandleRogueCommonPendingActionScRsp::mut_bonus_select_callback,
            HandleRogueCommonPendingActionScRsp::set_bonus_select_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RogueCallback>(
            "rogue_tourn_formula_callback",
            HandleRogueCommonPendingActionScRsp::has_rogue_tourn_formula_callback,
            HandleRogueCommonPendingActionScRsp::rogue_tourn_formula_callback,
            HandleRogueCommonPendingActionScRsp::mut_rogue_tourn_formula_callback,
            HandleRogueCommonPendingActionScRsp::set_rogue_tourn_formula_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RogueCallback>(
            "reforge_miracle_select_callback",
            HandleRogueCommonPendingActionScRsp::has_reforge_miracle_select_callback,
            HandleRogueCommonPendingActionScRsp::reforge_miracle_select_callback,
            HandleRogueCommonPendingActionScRsp::mut_reforge_miracle_select_callback,
            HandleRogueCommonPendingActionScRsp::set_reforge_miracle_select_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RogueCallback>(
            "magic_unit_select_callback",
            HandleRogueCommonPendingActionScRsp::has_magic_unit_select_callback,
            HandleRogueCommonPendingActionScRsp::magic_unit_select_callback,
            HandleRogueCommonPendingActionScRsp::mut_magic_unit_select_callback,
            HandleRogueCommonPendingActionScRsp::set_magic_unit_select_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RogueCallback>(
            "scepter_select_callback",
            HandleRogueCommonPendingActionScRsp::has_scepter_select_callback,
            HandleRogueCommonPendingActionScRsp::scepter_select_callback,
            HandleRogueCommonPendingActionScRsp::mut_scepter_select_callback,
            HandleRogueCommonPendingActionScRsp::set_scepter_select_callback,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "queue_position",
            |m: &HandleRogueCommonPendingActionScRsp| { &m.queue_position },
            |m: &mut HandleRogueCommonPendingActionScRsp| { &mut m.queue_position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &HandleRogueCommonPendingActionScRsp| { &m.retcode },
            |m: &mut HandleRogueCommonPendingActionScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "queue_location",
            |m: &HandleRogueCommonPendingActionScRsp| { &m.queue_location },
            |m: &mut HandleRogueCommonPendingActionScRsp| { &mut m.queue_location },
        ));
        oneofs.push(handle_rogue_common_pending_action_sc_rsp::Buff::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HandleRogueCommonPendingActionScRsp>(
            "HandleRogueCommonPendingActionScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HandleRogueCommonPendingActionScRsp {
    const NAME: &'static str = "HandleRogueCommonPendingActionScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8218 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(is.read_message()?));
                },
                786 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(is.read_message()?));
                },
                15290 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(is.read_message()?));
                },
                10850 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(is.read_message()?));
                },
                2826 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(is.read_message()?));
                },
                11586 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(is.read_message()?));
                },
                2050 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(is.read_message()?));
                },
                9818 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(is.read_message()?));
                },
                6090 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(is.read_message()?));
                },
                7162 => {
                    self.buff = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(is.read_message()?));
                },
                8 => {
                    self.queue_position = is.read_uint32()?;
                },
                72 => {
                    self.retcode = is.read_uint32()?;
                },
                64 => {
                    self.queue_location = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.queue_position != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.queue_position);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.retcode);
        }
        if self.queue_location != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.queue_location);
        }
        if let ::std::option::Option::Some(ref v) = self.buff {
            match v {
                &handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.queue_position != 0 {
            os.write_uint32(1, self.queue_position)?;
        }
        if self.retcode != 0 {
            os.write_uint32(9, self.retcode)?;
        }
        if self.queue_location != 0 {
            os.write_uint32(8, self.queue_location)?;
        }
        if let ::std::option::Option::Some(ref v) = self.buff {
            match v {
                &handle_rogue_common_pending_action_sc_rsp::Buff::BuffSelectCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1027, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::BuffRerollCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(98, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::BuffReforgeSelectCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1911, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::MiracleSelectCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1356, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::HexAvatarSelectCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(353, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::BonusSelectCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1448, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::RogueTournFormulaCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(256, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::ReforgeMiracleSelectCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1227, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::MagicUnitSelectCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(761, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::Buff::ScepterSelectCallback(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(895, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HandleRogueCommonPendingActionScRsp {
        HandleRogueCommonPendingActionScRsp::new()
    }

    fn clear(&mut self) {
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.buff = ::std::option::Option::None;
        self.queue_position = 0;
        self.retcode = 0;
        self.queue_location = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HandleRogueCommonPendingActionScRsp {
        static instance: HandleRogueCommonPendingActionScRsp = HandleRogueCommonPendingActionScRsp {
            queue_position: 0,
            retcode: 0,
            queue_location: 0,
            buff: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HandleRogueCommonPendingActionScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HandleRogueCommonPendingActionScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HandleRogueCommonPendingActionScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleRogueCommonPendingActionScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HandleRogueCommonPendingActionScRsp`
pub mod handle_rogue_common_pending_action_sc_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:HandleRogueCommonPendingActionScRsp.buff)
    pub enum Buff {
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.buff_select_callback)
        BuffSelectCallback(super::RogueCallback),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.buff_reroll_callback)
        BuffRerollCallback(super::super::RogueBuffRerollCallback::RogueBuffRerollCallback),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.buff_reforge_select_callback)
        BuffReforgeSelectCallback(super::RogueCallback),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.miracle_select_callback)
        MiracleSelectCallback(super::RogueCallback),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.hex_avatar_select_callback)
        HexAvatarSelectCallback(super::RogueCallback),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.bonus_select_callback)
        BonusSelectCallback(super::RogueCallback),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.rogue_tourn_formula_callback)
        RogueTournFormulaCallback(super::RogueCallback),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.reforge_miracle_select_callback)
        ReforgeMiracleSelectCallback(super::RogueCallback),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.magic_unit_select_callback)
        MagicUnitSelectCallback(super::RogueCallback),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.scepter_select_callback)
        ScepterSelectCallback(super::RogueCallback),
    }

    impl ::protobuf::Oneof for Buff {
    }

    impl ::protobuf::OneofFull for Buff {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::HandleRogueCommonPendingActionScRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("buff").unwrap()).clone()
        }
    }

    impl Buff {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Buff>("buff")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)HandleRogueCommonPendingActionScRsp.proto\x1a\x1dRogueBuffRerollCallb\
    ack.proto\"\x0f\n\rRogueCallback\"\xa7\x07\n#HandleRogueCommonPendingAct\
    ionScRsp\x12C\n\x14buff_select_callback\x18\x83\x08\x20\x01(\x0b2\x0e.Ro\
    gueCallbackH\0R\x12buffSelectCallback\x12L\n\x14buff_reroll_callback\x18\
    b\x20\x01(\x0b2\x18.RogueBuffRerollCallbackH\0R\x12buffRerollCallback\
    \x12R\n\x1cbuff_reforge_select_callback\x18\xf7\x0e\x20\x01(\x0b2\x0e.Ro\
    gueCallbackH\0R\x19buffReforgeSelectCallback\x12I\n\x17miracle_select_ca\
    llback\x18\xcc\n\x20\x01(\x0b2\x0e.RogueCallbackH\0R\x15miracleSelectCal\
    lback\x12N\n\x1ahex_avatar_select_callback\x18\xe1\x02\x20\x01(\x0b2\x0e\
    .RogueCallbackH\0R\x17hexAvatarSelectCallback\x12E\n\x15bonus_select_cal\
    lback\x18\xa8\x0b\x20\x01(\x0b2\x0e.RogueCallbackH\0R\x13bonusSelectCall\
    back\x12R\n\x1crogue_tourn_formula_callback\x18\x80\x02\x20\x01(\x0b2\
    \x0e.RogueCallbackH\0R\x19rogueTournFormulaCallback\x12X\n\x1freforge_mi\
    racle_select_callback\x18\xcb\t\x20\x01(\x0b2\x0e.RogueCallbackH\0R\x1cr\
    eforgeMiracleSelectCallback\x12N\n\x1amagic_unit_select_callback\x18\xf9\
    \x05\x20\x01(\x0b2\x0e.RogueCallbackH\0R\x17magicUnitSelectCallback\x12I\
    \n\x17scepter_select_callback\x18\xff\x06\x20\x01(\x0b2\x0e.RogueCallbac\
    kH\0R\x15scepterSelectCallback\x12%\n\x0equeue_position\x18\x01\x20\x01(\
    \rR\rqueuePosition\x12\x18\n\x07retcode\x18\t\x20\x01(\rR\x07retcode\x12\
    %\n\x0equeue_location\x18\x08\x20\x01(\rR\rqueueLocationB\x06\n\x04buffB\
    \x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::RogueBuffRerollCallback::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(RogueCallback::generated_message_descriptor_data());
            messages.push(HandleRogueCommonPendingActionScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
