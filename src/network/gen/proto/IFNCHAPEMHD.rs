// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `IFNCHAPEMHD.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:IFNCHAPEMHD)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IFNCHAPEMHD {
    // message fields
    // @@protoc_insertion_point(field:IFNCHAPEMHD.NEDIBLKMFAO)
    pub NEDIBLKMFAO: ::protobuf::MessageField<super::FKGKOEMFGEO::FKGKOEMFGEO>,
    // @@protoc_insertion_point(field:IFNCHAPEMHD.NNDPGGJCPOG)
    pub NNDPGGJCPOG: ::protobuf::MessageField<super::CFHNFGHEJOB::CFHNFGHEJOB>,
    // @@protoc_insertion_point(field:IFNCHAPEMHD.OFHKCHGPKHE)
    pub OFHKCHGPKHE: ::protobuf::MessageField<super::ACDOIEAHOKK::ACDOIEAHOKK>,
    // @@protoc_insertion_point(field:IFNCHAPEMHD.EAMJPKMKKHK)
    pub EAMJPKMKKHK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:IFNCHAPEMHD.GIHPHOHBGFG)
    pub GIHPHOHBGFG: ::protobuf::MessageField<super::EMEGHPNHPFG::EMEGHPNHPFG>,
    // @@protoc_insertion_point(field:IFNCHAPEMHD.DAELBDIDMMH)
    pub DAELBDIDMMH: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:IFNCHAPEMHD.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IFNCHAPEMHD {
    fn default() -> &'a IFNCHAPEMHD {
        <IFNCHAPEMHD as ::protobuf::Message>::default_instance()
    }
}

impl IFNCHAPEMHD {
    pub fn new() -> IFNCHAPEMHD {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FKGKOEMFGEO::FKGKOEMFGEO>(
            "NEDIBLKMFAO",
            |m: &IFNCHAPEMHD| { &m.NEDIBLKMFAO },
            |m: &mut IFNCHAPEMHD| { &mut m.NEDIBLKMFAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CFHNFGHEJOB::CFHNFGHEJOB>(
            "NNDPGGJCPOG",
            |m: &IFNCHAPEMHD| { &m.NNDPGGJCPOG },
            |m: &mut IFNCHAPEMHD| { &mut m.NNDPGGJCPOG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ACDOIEAHOKK::ACDOIEAHOKK>(
            "OFHKCHGPKHE",
            |m: &IFNCHAPEMHD| { &m.OFHKCHGPKHE },
            |m: &mut IFNCHAPEMHD| { &mut m.OFHKCHGPKHE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EAMJPKMKKHK",
            |m: &IFNCHAPEMHD| { &m.EAMJPKMKKHK },
            |m: &mut IFNCHAPEMHD| { &mut m.EAMJPKMKKHK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EMEGHPNHPFG::EMEGHPNHPFG>(
            "GIHPHOHBGFG",
            |m: &IFNCHAPEMHD| { &m.GIHPHOHBGFG },
            |m: &mut IFNCHAPEMHD| { &mut m.GIHPHOHBGFG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DAELBDIDMMH",
            |m: &IFNCHAPEMHD| { &m.DAELBDIDMMH },
            |m: &mut IFNCHAPEMHD| { &mut m.DAELBDIDMMH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IFNCHAPEMHD>(
            "IFNCHAPEMHD",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IFNCHAPEMHD {
    const NAME: &'static str = "IFNCHAPEMHD";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NEDIBLKMFAO)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NNDPGGJCPOG)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OFHKCHGPKHE)?;
                },
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.EAMJPKMKKHK)?;
                },
                8 => {
                    self.EAMJPKMKKHK.push(is.read_uint32()?);
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GIHPHOHBGFG)?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.DAELBDIDMMH)?;
                },
                64 => {
                    self.DAELBDIDMMH.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.NEDIBLKMFAO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.NNDPGGJCPOG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OFHKCHGPKHE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.EAMJPKMKKHK {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.GIHPHOHBGFG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.DAELBDIDMMH {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.NEDIBLKMFAO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.NNDPGGJCPOG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.OFHKCHGPKHE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.EAMJPKMKKHK {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.GIHPHOHBGFG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        for v in &self.DAELBDIDMMH {
            os.write_uint32(8, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IFNCHAPEMHD {
        IFNCHAPEMHD::new()
    }

    fn clear(&mut self) {
        self.NEDIBLKMFAO.clear();
        self.NNDPGGJCPOG.clear();
        self.OFHKCHGPKHE.clear();
        self.EAMJPKMKKHK.clear();
        self.GIHPHOHBGFG.clear();
        self.DAELBDIDMMH.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IFNCHAPEMHD {
        static instance: IFNCHAPEMHD = IFNCHAPEMHD {
            NEDIBLKMFAO: ::protobuf::MessageField::none(),
            NNDPGGJCPOG: ::protobuf::MessageField::none(),
            OFHKCHGPKHE: ::protobuf::MessageField::none(),
            EAMJPKMKKHK: ::std::vec::Vec::new(),
            GIHPHOHBGFG: ::protobuf::MessageField::none(),
            DAELBDIDMMH: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IFNCHAPEMHD {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IFNCHAPEMHD").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IFNCHAPEMHD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IFNCHAPEMHD {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11IFNCHAPEMHD.proto\x1a\x11ACDOIEAHOKK.proto\x1a\x11CFHNFGHEJOB.prot\
    o\x1a\x11EMEGHPNHPFG.proto\x1a\x11FKGKOEMFGEO.proto\"\x91\x02\n\x0bIFNCH\
    APEMHD\x12.\n\x0bNEDIBLKMFAO\x18\x0b\x20\x01(\x0b2\x0c.FKGKOEMFGEOR\x0bN\
    EDIBLKMFAO\x12.\n\x0bNNDPGGJCPOG\x18\t\x20\x01(\x0b2\x0c.CFHNFGHEJOBR\
    \x0bNNDPGGJCPOG\x12.\n\x0bOFHKCHGPKHE\x18\n\x20\x01(\x0b2\x0c.ACDOIEAHOK\
    KR\x0bOFHKCHGPKHE\x12\x20\n\x0bEAMJPKMKKHK\x18\x01\x20\x03(\rR\x0bEAMJPK\
    MKKHK\x12.\n\x0bGIHPHOHBGFG\x18\x0e\x20\x01(\x0b2\x0c.EMEGHPNHPFGR\x0bGI\
    HPHOHBGFG\x12\x20\n\x0bDAELBDIDMMH\x18\x08\x20\x03(\rR\x0bDAELBDIDMMHb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::ACDOIEAHOKK::file_descriptor().clone());
            deps.push(super::CFHNFGHEJOB::file_descriptor().clone());
            deps.push(super::EMEGHPNHPFG::file_descriptor().clone());
            deps.push(super::FKGKOEMFGEO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(IFNCHAPEMHD::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
