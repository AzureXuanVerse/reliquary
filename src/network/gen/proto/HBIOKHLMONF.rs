// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HBIOKHLMONF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HBIOKHLMONF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HBIOKHLMONF {
    // message fields
    // @@protoc_insertion_point(field:HBIOKHLMONF.HJJMAAFFIKO)
    pub HJJMAAFFIKO: u32,
    // @@protoc_insertion_point(field:HBIOKHLMONF.DCFKPLENJAJ)
    pub DCFKPLENJAJ: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HBIOKHLMONF.NDBLEEBNCPG)
    pub NDBLEEBNCPG: i64,
    // @@protoc_insertion_point(field:HBIOKHLMONF.EGLINHEDAJA)
    pub EGLINHEDAJA: i64,
    // @@protoc_insertion_point(field:HBIOKHLMONF.GJDICJOLMLG)
    pub GJDICJOLMLG: ::protobuf::MessageField<super::HENGONMEPFG::HENGONMEPFG>,
    // @@protoc_insertion_point(field:HBIOKHLMONF.EINKPLBKAPK)
    pub EINKPLBKAPK: u32,
    // @@protoc_insertion_point(field:HBIOKHLMONF.FCICNLKHAFC)
    pub FCICNLKHAFC: ::std::string::String,
    // @@protoc_insertion_point(field:HBIOKHLMONF.HNJKEJAECEP)
    pub HNJKEJAECEP: u32,
    // @@protoc_insertion_point(field:HBIOKHLMONF.NCLAPMFCNMF)
    pub NCLAPMFCNMF: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HBIOKHLMONF.COFMJADCBEL)
    pub COFMJADCBEL: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:HBIOKHLMONF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HBIOKHLMONF {
    fn default() -> &'a HBIOKHLMONF {
        <HBIOKHLMONF as ::protobuf::Message>::default_instance()
    }
}

impl HBIOKHLMONF {
    pub fn new() -> HBIOKHLMONF {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HJJMAAFFIKO",
            |m: &HBIOKHLMONF| { &m.HJJMAAFFIKO },
            |m: &mut HBIOKHLMONF| { &mut m.HJJMAAFFIKO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DCFKPLENJAJ",
            |m: &HBIOKHLMONF| { &m.DCFKPLENJAJ },
            |m: &mut HBIOKHLMONF| { &mut m.DCFKPLENJAJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NDBLEEBNCPG",
            |m: &HBIOKHLMONF| { &m.NDBLEEBNCPG },
            |m: &mut HBIOKHLMONF| { &mut m.NDBLEEBNCPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EGLINHEDAJA",
            |m: &HBIOKHLMONF| { &m.EGLINHEDAJA },
            |m: &mut HBIOKHLMONF| { &mut m.EGLINHEDAJA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HENGONMEPFG::HENGONMEPFG>(
            "GJDICJOLMLG",
            |m: &HBIOKHLMONF| { &m.GJDICJOLMLG },
            |m: &mut HBIOKHLMONF| { &mut m.GJDICJOLMLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EINKPLBKAPK",
            |m: &HBIOKHLMONF| { &m.EINKPLBKAPK },
            |m: &mut HBIOKHLMONF| { &mut m.EINKPLBKAPK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FCICNLKHAFC",
            |m: &HBIOKHLMONF| { &m.FCICNLKHAFC },
            |m: &mut HBIOKHLMONF| { &mut m.FCICNLKHAFC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HNJKEJAECEP",
            |m: &HBIOKHLMONF| { &m.HNJKEJAECEP },
            |m: &mut HBIOKHLMONF| { &mut m.HNJKEJAECEP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NCLAPMFCNMF",
            |m: &HBIOKHLMONF| { &m.NCLAPMFCNMF },
            |m: &mut HBIOKHLMONF| { &mut m.NCLAPMFCNMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "COFMJADCBEL",
            |m: &HBIOKHLMONF| { &m.COFMJADCBEL },
            |m: &mut HBIOKHLMONF| { &mut m.COFMJADCBEL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HBIOKHLMONF>(
            "HBIOKHLMONF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HBIOKHLMONF {
    const NAME: &'static str = "HBIOKHLMONF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.HJJMAAFFIKO = is.read_uint32()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.DCFKPLENJAJ)?;
                },
                32 => {
                    self.DCFKPLENJAJ.push(is.read_uint32()?);
                },
                120 => {
                    self.NDBLEEBNCPG = is.read_int64()?;
                },
                64 => {
                    self.EGLINHEDAJA = is.read_int64()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GJDICJOLMLG)?;
                },
                8 => {
                    self.EINKPLBKAPK = is.read_uint32()?;
                },
                58 => {
                    self.FCICNLKHAFC = is.read_string()?;
                },
                40 => {
                    self.HNJKEJAECEP = is.read_uint32()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.NCLAPMFCNMF)?;
                },
                24 => {
                    self.NCLAPMFCNMF.push(is.read_uint32()?);
                },
                106 => {
                    self.COFMJADCBEL = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HJJMAAFFIKO != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.HJJMAAFFIKO);
        }
        for value in &self.DCFKPLENJAJ {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        if self.NDBLEEBNCPG != 0 {
            my_size += ::protobuf::rt::int64_size(15, self.NDBLEEBNCPG);
        }
        if self.EGLINHEDAJA != 0 {
            my_size += ::protobuf::rt::int64_size(8, self.EGLINHEDAJA);
        }
        if let Some(v) = self.GJDICJOLMLG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.EINKPLBKAPK != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.EINKPLBKAPK);
        }
        if !self.FCICNLKHAFC.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.FCICNLKHAFC);
        }
        if self.HNJKEJAECEP != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.HNJKEJAECEP);
        }
        for value in &self.NCLAPMFCNMF {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        if !self.COFMJADCBEL.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.COFMJADCBEL);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HJJMAAFFIKO != 0 {
            os.write_uint32(14, self.HJJMAAFFIKO)?;
        }
        for v in &self.DCFKPLENJAJ {
            os.write_uint32(4, *v)?;
        };
        if self.NDBLEEBNCPG != 0 {
            os.write_int64(15, self.NDBLEEBNCPG)?;
        }
        if self.EGLINHEDAJA != 0 {
            os.write_int64(8, self.EGLINHEDAJA)?;
        }
        if let Some(v) = self.GJDICJOLMLG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.EINKPLBKAPK != 0 {
            os.write_uint32(1, self.EINKPLBKAPK)?;
        }
        if !self.FCICNLKHAFC.is_empty() {
            os.write_string(7, &self.FCICNLKHAFC)?;
        }
        if self.HNJKEJAECEP != 0 {
            os.write_uint32(5, self.HNJKEJAECEP)?;
        }
        for v in &self.NCLAPMFCNMF {
            os.write_uint32(3, *v)?;
        };
        if !self.COFMJADCBEL.is_empty() {
            os.write_string(13, &self.COFMJADCBEL)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HBIOKHLMONF {
        HBIOKHLMONF::new()
    }

    fn clear(&mut self) {
        self.HJJMAAFFIKO = 0;
        self.DCFKPLENJAJ.clear();
        self.NDBLEEBNCPG = 0;
        self.EGLINHEDAJA = 0;
        self.GJDICJOLMLG.clear();
        self.EINKPLBKAPK = 0;
        self.FCICNLKHAFC.clear();
        self.HNJKEJAECEP = 0;
        self.NCLAPMFCNMF.clear();
        self.COFMJADCBEL.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HBIOKHLMONF {
        static instance: HBIOKHLMONF = HBIOKHLMONF {
            HJJMAAFFIKO: 0,
            DCFKPLENJAJ: ::std::vec::Vec::new(),
            NDBLEEBNCPG: 0,
            EGLINHEDAJA: 0,
            GJDICJOLMLG: ::protobuf::MessageField::none(),
            EINKPLBKAPK: 0,
            FCICNLKHAFC: ::std::string::String::new(),
            HNJKEJAECEP: 0,
            NCLAPMFCNMF: ::std::vec::Vec::new(),
            COFMJADCBEL: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HBIOKHLMONF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HBIOKHLMONF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HBIOKHLMONF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HBIOKHLMONF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HBIOKHLMONF.proto\x1a\x11HENGONMEPFG.proto\"\xef\x02\n\x0bHBIOKHLM\
    ONF\x12\x20\n\x0bHJJMAAFFIKO\x18\x0e\x20\x01(\rR\x0bHJJMAAFFIKO\x12\x20\
    \n\x0bDCFKPLENJAJ\x18\x04\x20\x03(\rR\x0bDCFKPLENJAJ\x12\x20\n\x0bNDBLEE\
    BNCPG\x18\x0f\x20\x01(\x03R\x0bNDBLEEBNCPG\x12\x20\n\x0bEGLINHEDAJA\x18\
    \x08\x20\x01(\x03R\x0bEGLINHEDAJA\x12.\n\x0bGJDICJOLMLG\x18\x0b\x20\x01(\
    \x0b2\x0c.HENGONMEPFGR\x0bGJDICJOLMLG\x12\x20\n\x0bEINKPLBKAPK\x18\x01\
    \x20\x01(\rR\x0bEINKPLBKAPK\x12\x20\n\x0bFCICNLKHAFC\x18\x07\x20\x01(\tR\
    \x0bFCICNLKHAFC\x12\x20\n\x0bHNJKEJAECEP\x18\x05\x20\x01(\rR\x0bHNJKEJAE\
    CEP\x12\x20\n\x0bNCLAPMFCNMF\x18\x03\x20\x03(\rR\x0bNCLAPMFCNMF\x12\x20\
    \n\x0bCOFMJADCBEL\x18\r\x20\x01(\tR\x0bCOFMJADCBELb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::HENGONMEPFG::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HBIOKHLMONF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
