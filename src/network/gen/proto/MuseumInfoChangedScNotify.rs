// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MuseumInfoChangedScNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MuseumInfoChangedScNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MuseumInfoChangedScNotify {
    // message fields
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.JKOCJIMAGBN)
    pub JKOCJIMAGBN: u32,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.ICJFIKODBJN)
    pub ICJFIKODBJN: u32,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.EDCNODPICNA)
    pub EDCNODPICNA: ::protobuf::MessageField<super::MCFCLDFLJNO::MCFCLDFLJNO>,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.MAMKEEKMJHA)
    pub MAMKEEKMJHA: u32,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.LNFMJHCAFCG)
    pub LNFMJHCAFCG: ::protobuf::MessageField<super::BKLOLLFKKEL::BKLOLLFKKEL>,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.JMJHMMJIFKP)
    pub JMJHMMJIFKP: u32,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.KIIKPPINLOH)
    pub KIIKPPINLOH: ::std::vec::Vec<super::IMHIEPBOEAE::IMHIEPBOEAE>,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.GGLBJPJDDNB)
    pub GGLBJPJDDNB: u32,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.KAJCDNEHIGP)
    pub KAJCDNEHIGP: ::std::vec::Vec<super::CPBOKEMHAHJ::CPBOKEMHAHJ>,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.DIDNCOCFCOA)
    pub DIDNCOCFCOA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.PBKJNOKLCLJ)
    pub PBKJNOKLCLJ: u32,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.MLFLLKMIADE)
    pub MLFLLKMIADE: u32,
    // @@protoc_insertion_point(field:MuseumInfoChangedScNotify.ADAIPAFCKPM)
    pub ADAIPAFCKPM: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:MuseumInfoChangedScNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MuseumInfoChangedScNotify {
    fn default() -> &'a MuseumInfoChangedScNotify {
        <MuseumInfoChangedScNotify as ::protobuf::Message>::default_instance()
    }
}

impl MuseumInfoChangedScNotify {
    pub fn new() -> MuseumInfoChangedScNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JKOCJIMAGBN",
            |m: &MuseumInfoChangedScNotify| { &m.JKOCJIMAGBN },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.JKOCJIMAGBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ICJFIKODBJN",
            |m: &MuseumInfoChangedScNotify| { &m.ICJFIKODBJN },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.ICJFIKODBJN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MCFCLDFLJNO::MCFCLDFLJNO>(
            "EDCNODPICNA",
            |m: &MuseumInfoChangedScNotify| { &m.EDCNODPICNA },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.EDCNODPICNA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MAMKEEKMJHA",
            |m: &MuseumInfoChangedScNotify| { &m.MAMKEEKMJHA },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.MAMKEEKMJHA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BKLOLLFKKEL::BKLOLLFKKEL>(
            "LNFMJHCAFCG",
            |m: &MuseumInfoChangedScNotify| { &m.LNFMJHCAFCG },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.LNFMJHCAFCG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JMJHMMJIFKP",
            |m: &MuseumInfoChangedScNotify| { &m.JMJHMMJIFKP },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.JMJHMMJIFKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KIIKPPINLOH",
            |m: &MuseumInfoChangedScNotify| { &m.KIIKPPINLOH },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.KIIKPPINLOH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GGLBJPJDDNB",
            |m: &MuseumInfoChangedScNotify| { &m.GGLBJPJDDNB },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.GGLBJPJDDNB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KAJCDNEHIGP",
            |m: &MuseumInfoChangedScNotify| { &m.KAJCDNEHIGP },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.KAJCDNEHIGP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DIDNCOCFCOA",
            |m: &MuseumInfoChangedScNotify| { &m.DIDNCOCFCOA },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.DIDNCOCFCOA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PBKJNOKLCLJ",
            |m: &MuseumInfoChangedScNotify| { &m.PBKJNOKLCLJ },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.PBKJNOKLCLJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MLFLLKMIADE",
            |m: &MuseumInfoChangedScNotify| { &m.MLFLLKMIADE },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.MLFLLKMIADE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ADAIPAFCKPM",
            |m: &MuseumInfoChangedScNotify| { &m.ADAIPAFCKPM },
            |m: &mut MuseumInfoChangedScNotify| { &mut m.ADAIPAFCKPM },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MuseumInfoChangedScNotify>(
            "MuseumInfoChangedScNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MuseumInfoChangedScNotify {
    const NAME: &'static str = "MuseumInfoChangedScNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                56 => {
                    self.JKOCJIMAGBN = is.read_uint32()?;
                },
                8 => {
                    self.ICJFIKODBJN = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EDCNODPICNA)?;
                },
                64 => {
                    self.MAMKEEKMJHA = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LNFMJHCAFCG)?;
                },
                120 => {
                    self.JMJHMMJIFKP = is.read_uint32()?;
                },
                34 => {
                    self.KIIKPPINLOH.push(is.read_message()?);
                },
                48 => {
                    self.GGLBJPJDDNB = is.read_uint32()?;
                },
                90 => {
                    self.KAJCDNEHIGP.push(is.read_message()?);
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.DIDNCOCFCOA)?;
                },
                80 => {
                    self.DIDNCOCFCOA.push(is.read_uint32()?);
                },
                40 => {
                    self.PBKJNOKLCLJ = is.read_uint32()?;
                },
                96 => {
                    self.MLFLLKMIADE = is.read_uint32()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.ADAIPAFCKPM)?;
                },
                24 => {
                    self.ADAIPAFCKPM.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.JKOCJIMAGBN != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.JKOCJIMAGBN);
        }
        if self.ICJFIKODBJN != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.ICJFIKODBJN);
        }
        if let Some(v) = self.EDCNODPICNA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.MAMKEEKMJHA != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.MAMKEEKMJHA);
        }
        if let Some(v) = self.LNFMJHCAFCG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.JMJHMMJIFKP != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.JMJHMMJIFKP);
        }
        for value in &self.KIIKPPINLOH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.GGLBJPJDDNB != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.GGLBJPJDDNB);
        }
        for value in &self.KAJCDNEHIGP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.DIDNCOCFCOA {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        if self.PBKJNOKLCLJ != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.PBKJNOKLCLJ);
        }
        if self.MLFLLKMIADE != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.MLFLLKMIADE);
        }
        for value in &self.ADAIPAFCKPM {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.JKOCJIMAGBN != 0 {
            os.write_uint32(7, self.JKOCJIMAGBN)?;
        }
        if self.ICJFIKODBJN != 0 {
            os.write_uint32(1, self.ICJFIKODBJN)?;
        }
        if let Some(v) = self.EDCNODPICNA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.MAMKEEKMJHA != 0 {
            os.write_uint32(8, self.MAMKEEKMJHA)?;
        }
        if let Some(v) = self.LNFMJHCAFCG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.JMJHMMJIFKP != 0 {
            os.write_uint32(15, self.JMJHMMJIFKP)?;
        }
        for v in &self.KIIKPPINLOH {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.GGLBJPJDDNB != 0 {
            os.write_uint32(6, self.GGLBJPJDDNB)?;
        }
        for v in &self.KAJCDNEHIGP {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.DIDNCOCFCOA {
            os.write_uint32(10, *v)?;
        };
        if self.PBKJNOKLCLJ != 0 {
            os.write_uint32(5, self.PBKJNOKLCLJ)?;
        }
        if self.MLFLLKMIADE != 0 {
            os.write_uint32(12, self.MLFLLKMIADE)?;
        }
        for v in &self.ADAIPAFCKPM {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MuseumInfoChangedScNotify {
        MuseumInfoChangedScNotify::new()
    }

    fn clear(&mut self) {
        self.JKOCJIMAGBN = 0;
        self.ICJFIKODBJN = 0;
        self.EDCNODPICNA.clear();
        self.MAMKEEKMJHA = 0;
        self.LNFMJHCAFCG.clear();
        self.JMJHMMJIFKP = 0;
        self.KIIKPPINLOH.clear();
        self.GGLBJPJDDNB = 0;
        self.KAJCDNEHIGP.clear();
        self.DIDNCOCFCOA.clear();
        self.PBKJNOKLCLJ = 0;
        self.MLFLLKMIADE = 0;
        self.ADAIPAFCKPM.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MuseumInfoChangedScNotify {
        static instance: MuseumInfoChangedScNotify = MuseumInfoChangedScNotify {
            JKOCJIMAGBN: 0,
            ICJFIKODBJN: 0,
            EDCNODPICNA: ::protobuf::MessageField::none(),
            MAMKEEKMJHA: 0,
            LNFMJHCAFCG: ::protobuf::MessageField::none(),
            JMJHMMJIFKP: 0,
            KIIKPPINLOH: ::std::vec::Vec::new(),
            GGLBJPJDDNB: 0,
            KAJCDNEHIGP: ::std::vec::Vec::new(),
            DIDNCOCFCOA: ::std::vec::Vec::new(),
            PBKJNOKLCLJ: 0,
            MLFLLKMIADE: 0,
            ADAIPAFCKPM: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MuseumInfoChangedScNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MuseumInfoChangedScNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MuseumInfoChangedScNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MuseumInfoChangedScNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fMuseumInfoChangedScNotify.proto\x1a\x11BKLOLLFKKEL.proto\x1a\x11CP\
    BOKEMHAHJ.proto\x1a\x11IMHIEPBOEAE.proto\x1a\x11MCFCLDFLJNO.proto\"\x8d\
    \x04\n\x19MuseumInfoChangedScNotify\x12\x20\n\x0bJKOCJIMAGBN\x18\x07\x20\
    \x01(\rR\x0bJKOCJIMAGBN\x12\x20\n\x0bICJFIKODBJN\x18\x01\x20\x01(\rR\x0b\
    ICJFIKODBJN\x12.\n\x0bEDCNODPICNA\x18\t\x20\x01(\x0b2\x0c.MCFCLDFLJNOR\
    \x0bEDCNODPICNA\x12\x20\n\x0bMAMKEEKMJHA\x18\x08\x20\x01(\rR\x0bMAMKEEKM\
    JHA\x12.\n\x0bLNFMJHCAFCG\x18\r\x20\x01(\x0b2\x0c.BKLOLLFKKELR\x0bLNFMJH\
    CAFCG\x12\x20\n\x0bJMJHMMJIFKP\x18\x0f\x20\x01(\rR\x0bJMJHMMJIFKP\x12.\n\
    \x0bKIIKPPINLOH\x18\x04\x20\x03(\x0b2\x0c.IMHIEPBOEAER\x0bKIIKPPINLOH\
    \x12\x20\n\x0bGGLBJPJDDNB\x18\x06\x20\x01(\rR\x0bGGLBJPJDDNB\x12.\n\x0bK\
    AJCDNEHIGP\x18\x0b\x20\x03(\x0b2\x0c.CPBOKEMHAHJR\x0bKAJCDNEHIGP\x12\x20\
    \n\x0bDIDNCOCFCOA\x18\n\x20\x03(\rR\x0bDIDNCOCFCOA\x12\x20\n\x0bPBKJNOKL\
    CLJ\x18\x05\x20\x01(\rR\x0bPBKJNOKLCLJ\x12\x20\n\x0bMLFLLKMIADE\x18\x0c\
    \x20\x01(\rR\x0bMLFLLKMIADE\x12\x20\n\x0bADAIPAFCKPM\x18\x03\x20\x03(\rR\
    \x0bADAIPAFCKPMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::BKLOLLFKKEL::file_descriptor().clone());
            deps.push(super::CPBOKEMHAHJ::file_descriptor().clone());
            deps.push(super::IMHIEPBOEAE::file_descriptor().clone());
            deps.push(super::MCFCLDFLJNO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MuseumInfoChangedScNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
