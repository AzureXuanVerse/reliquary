// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GDHMBEFBPHM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GDHMBEFBPHM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GDHMBEFBPHM {
    // message fields
    // @@protoc_insertion_point(field:GDHMBEFBPHM.OGEEEOEGMPG)
    pub OGEEEOEGMPG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.EMALNMLGANJ)
    pub EMALNMLGANJ: ::std::vec::Vec<super::CIIKEGOCCED::CIIKEGOCCED>,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.GFKIHHOPJDG)
    pub GFKIHHOPJDG: u32,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.LEAPFIBIGFA)
    pub LEAPFIBIGFA: u32,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.KOCMDLFBKEI)
    pub KOCMDLFBKEI: u32,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.GCECNKELLIM)
    pub GCECNKELLIM: u32,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.EDHDMHPBHCH)
    pub EDHDMHPBHCH: bool,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.MMENCOEDNGJ)
    pub MMENCOEDNGJ: ::std::string::String,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.IKNCADIDJMA)
    pub IKNCADIDJMA: bool,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.DCJEDMMAHDP)
    pub DCJEDMMAHDP: u32,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.KACBNGFCAOG)
    pub KACBNGFCAOG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.PKLLKANFMJA)
    pub PKLLKANFMJA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.CLPELIIAJPI)
    pub CLPELIIAJPI: u32,
    // @@protoc_insertion_point(field:GDHMBEFBPHM.KKFKECEMFEB)
    pub KKFKECEMFEB: ::protobuf::EnumOrUnknown<super::ExtraLineupType::ExtraLineupType>,
    // special fields
    // @@protoc_insertion_point(special_field:GDHMBEFBPHM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GDHMBEFBPHM {
    fn default() -> &'a GDHMBEFBPHM {
        <GDHMBEFBPHM as ::protobuf::Message>::default_instance()
    }
}

impl GDHMBEFBPHM {
    pub fn new() -> GDHMBEFBPHM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OGEEEOEGMPG",
            |m: &GDHMBEFBPHM| { &m.OGEEEOEGMPG },
            |m: &mut GDHMBEFBPHM| { &mut m.OGEEEOEGMPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EMALNMLGANJ",
            |m: &GDHMBEFBPHM| { &m.EMALNMLGANJ },
            |m: &mut GDHMBEFBPHM| { &mut m.EMALNMLGANJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GFKIHHOPJDG",
            |m: &GDHMBEFBPHM| { &m.GFKIHHOPJDG },
            |m: &mut GDHMBEFBPHM| { &mut m.GFKIHHOPJDG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LEAPFIBIGFA",
            |m: &GDHMBEFBPHM| { &m.LEAPFIBIGFA },
            |m: &mut GDHMBEFBPHM| { &mut m.LEAPFIBIGFA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KOCMDLFBKEI",
            |m: &GDHMBEFBPHM| { &m.KOCMDLFBKEI },
            |m: &mut GDHMBEFBPHM| { &mut m.KOCMDLFBKEI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GCECNKELLIM",
            |m: &GDHMBEFBPHM| { &m.GCECNKELLIM },
            |m: &mut GDHMBEFBPHM| { &mut m.GCECNKELLIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EDHDMHPBHCH",
            |m: &GDHMBEFBPHM| { &m.EDHDMHPBHCH },
            |m: &mut GDHMBEFBPHM| { &mut m.EDHDMHPBHCH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MMENCOEDNGJ",
            |m: &GDHMBEFBPHM| { &m.MMENCOEDNGJ },
            |m: &mut GDHMBEFBPHM| { &mut m.MMENCOEDNGJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IKNCADIDJMA",
            |m: &GDHMBEFBPHM| { &m.IKNCADIDJMA },
            |m: &mut GDHMBEFBPHM| { &mut m.IKNCADIDJMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DCJEDMMAHDP",
            |m: &GDHMBEFBPHM| { &m.DCJEDMMAHDP },
            |m: &mut GDHMBEFBPHM| { &mut m.DCJEDMMAHDP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KACBNGFCAOG",
            |m: &GDHMBEFBPHM| { &m.KACBNGFCAOG },
            |m: &mut GDHMBEFBPHM| { &mut m.KACBNGFCAOG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PKLLKANFMJA",
            |m: &GDHMBEFBPHM| { &m.PKLLKANFMJA },
            |m: &mut GDHMBEFBPHM| { &mut m.PKLLKANFMJA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CLPELIIAJPI",
            |m: &GDHMBEFBPHM| { &m.CLPELIIAJPI },
            |m: &mut GDHMBEFBPHM| { &mut m.CLPELIIAJPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KKFKECEMFEB",
            |m: &GDHMBEFBPHM| { &m.KKFKECEMFEB },
            |m: &mut GDHMBEFBPHM| { &mut m.KKFKECEMFEB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GDHMBEFBPHM>(
            "GDHMBEFBPHM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GDHMBEFBPHM {
    const NAME: &'static str = "GDHMBEFBPHM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.OGEEEOEGMPG)?;
                },
                80 => {
                    self.OGEEEOEGMPG.push(is.read_uint32()?);
                },
                122 => {
                    self.EMALNMLGANJ.push(is.read_message()?);
                },
                104 => {
                    self.GFKIHHOPJDG = is.read_uint32()?;
                },
                24 => {
                    self.LEAPFIBIGFA = is.read_uint32()?;
                },
                16 => {
                    self.KOCMDLFBKEI = is.read_uint32()?;
                },
                96 => {
                    self.GCECNKELLIM = is.read_uint32()?;
                },
                32 => {
                    self.EDHDMHPBHCH = is.read_bool()?;
                },
                58 => {
                    self.MMENCOEDNGJ = is.read_string()?;
                },
                112 => {
                    self.IKNCADIDJMA = is.read_bool()?;
                },
                48 => {
                    self.DCJEDMMAHDP = is.read_uint32()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.KACBNGFCAOG)?;
                },
                64 => {
                    self.KACBNGFCAOG.push(is.read_uint32()?);
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.PKLLKANFMJA)?;
                },
                72 => {
                    self.PKLLKANFMJA.push(is.read_uint32()?);
                },
                8 => {
                    self.CLPELIIAJPI = is.read_uint32()?;
                },
                40 => {
                    self.KKFKECEMFEB = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.OGEEEOEGMPG {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        for value in &self.EMALNMLGANJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.GFKIHHOPJDG != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.GFKIHHOPJDG);
        }
        if self.LEAPFIBIGFA != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.LEAPFIBIGFA);
        }
        if self.KOCMDLFBKEI != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.KOCMDLFBKEI);
        }
        if self.GCECNKELLIM != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.GCECNKELLIM);
        }
        if self.EDHDMHPBHCH != false {
            my_size += 1 + 1;
        }
        if !self.MMENCOEDNGJ.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.MMENCOEDNGJ);
        }
        if self.IKNCADIDJMA != false {
            my_size += 1 + 1;
        }
        if self.DCJEDMMAHDP != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.DCJEDMMAHDP);
        }
        for value in &self.KACBNGFCAOG {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        for value in &self.PKLLKANFMJA {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        if self.CLPELIIAJPI != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.CLPELIIAJPI);
        }
        if self.KKFKECEMFEB != ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE) {
            my_size += ::protobuf::rt::int32_size(5, self.KKFKECEMFEB.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.OGEEEOEGMPG {
            os.write_uint32(10, *v)?;
        };
        for v in &self.EMALNMLGANJ {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if self.GFKIHHOPJDG != 0 {
            os.write_uint32(13, self.GFKIHHOPJDG)?;
        }
        if self.LEAPFIBIGFA != 0 {
            os.write_uint32(3, self.LEAPFIBIGFA)?;
        }
        if self.KOCMDLFBKEI != 0 {
            os.write_uint32(2, self.KOCMDLFBKEI)?;
        }
        if self.GCECNKELLIM != 0 {
            os.write_uint32(12, self.GCECNKELLIM)?;
        }
        if self.EDHDMHPBHCH != false {
            os.write_bool(4, self.EDHDMHPBHCH)?;
        }
        if !self.MMENCOEDNGJ.is_empty() {
            os.write_string(7, &self.MMENCOEDNGJ)?;
        }
        if self.IKNCADIDJMA != false {
            os.write_bool(14, self.IKNCADIDJMA)?;
        }
        if self.DCJEDMMAHDP != 0 {
            os.write_uint32(6, self.DCJEDMMAHDP)?;
        }
        for v in &self.KACBNGFCAOG {
            os.write_uint32(8, *v)?;
        };
        for v in &self.PKLLKANFMJA {
            os.write_uint32(9, *v)?;
        };
        if self.CLPELIIAJPI != 0 {
            os.write_uint32(1, self.CLPELIIAJPI)?;
        }
        if self.KKFKECEMFEB != ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.KKFKECEMFEB))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GDHMBEFBPHM {
        GDHMBEFBPHM::new()
    }

    fn clear(&mut self) {
        self.OGEEEOEGMPG.clear();
        self.EMALNMLGANJ.clear();
        self.GFKIHHOPJDG = 0;
        self.LEAPFIBIGFA = 0;
        self.KOCMDLFBKEI = 0;
        self.GCECNKELLIM = 0;
        self.EDHDMHPBHCH = false;
        self.MMENCOEDNGJ.clear();
        self.IKNCADIDJMA = false;
        self.DCJEDMMAHDP = 0;
        self.KACBNGFCAOG.clear();
        self.PKLLKANFMJA.clear();
        self.CLPELIIAJPI = 0;
        self.KKFKECEMFEB = ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GDHMBEFBPHM {
        static instance: GDHMBEFBPHM = GDHMBEFBPHM {
            OGEEEOEGMPG: ::std::vec::Vec::new(),
            EMALNMLGANJ: ::std::vec::Vec::new(),
            GFKIHHOPJDG: 0,
            LEAPFIBIGFA: 0,
            KOCMDLFBKEI: 0,
            GCECNKELLIM: 0,
            EDHDMHPBHCH: false,
            MMENCOEDNGJ: ::std::string::String::new(),
            IKNCADIDJMA: false,
            DCJEDMMAHDP: 0,
            KACBNGFCAOG: ::std::vec::Vec::new(),
            PKLLKANFMJA: ::std::vec::Vec::new(),
            CLPELIIAJPI: 0,
            KKFKECEMFEB: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GDHMBEFBPHM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GDHMBEFBPHM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GDHMBEFBPHM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GDHMBEFBPHM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GDHMBEFBPHM.proto\x1a\x11CIIKEGOCCED.proto\x1a\x15ExtraLineupType.\
    proto\"\x89\x04\n\x0bGDHMBEFBPHM\x12\x20\n\x0bOGEEEOEGMPG\x18\n\x20\x03(\
    \rR\x0bOGEEEOEGMPG\x12.\n\x0bEMALNMLGANJ\x18\x0f\x20\x03(\x0b2\x0c.CIIKE\
    GOCCEDR\x0bEMALNMLGANJ\x12\x20\n\x0bGFKIHHOPJDG\x18\r\x20\x01(\rR\x0bGFK\
    IHHOPJDG\x12\x20\n\x0bLEAPFIBIGFA\x18\x03\x20\x01(\rR\x0bLEAPFIBIGFA\x12\
    \x20\n\x0bKOCMDLFBKEI\x18\x02\x20\x01(\rR\x0bKOCMDLFBKEI\x12\x20\n\x0bGC\
    ECNKELLIM\x18\x0c\x20\x01(\rR\x0bGCECNKELLIM\x12\x20\n\x0bEDHDMHPBHCH\
    \x18\x04\x20\x01(\x08R\x0bEDHDMHPBHCH\x12\x20\n\x0bMMENCOEDNGJ\x18\x07\
    \x20\x01(\tR\x0bMMENCOEDNGJ\x12\x20\n\x0bIKNCADIDJMA\x18\x0e\x20\x01(\
    \x08R\x0bIKNCADIDJMA\x12\x20\n\x0bDCJEDMMAHDP\x18\x06\x20\x01(\rR\x0bDCJ\
    EDMMAHDP\x12\x20\n\x0bKACBNGFCAOG\x18\x08\x20\x03(\rR\x0bKACBNGFCAOG\x12\
    \x20\n\x0bPKLLKANFMJA\x18\t\x20\x03(\rR\x0bPKLLKANFMJA\x12\x20\n\x0bCLPE\
    LIIAJPI\x18\x01\x20\x01(\rR\x0bCLPELIIAJPI\x122\n\x0bKKFKECEMFEB\x18\x05\
    \x20\x01(\x0e2\x10.ExtraLineupTypeR\x0bKKFKECEMFEBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::CIIKEGOCCED::file_descriptor().clone());
            deps.push(super::ExtraLineupType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GDHMBEFBPHM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
