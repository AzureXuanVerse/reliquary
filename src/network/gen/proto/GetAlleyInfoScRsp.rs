// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetAlleyInfoScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetAlleyInfoScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetAlleyInfoScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.DBPCGLOLBJB)
    pub DBPCGLOLBJB: ::protobuf::MessageField<super::KNKNOKONJJD::KNKNOKONJJD>,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.BDMNAPIFCIM)
    pub BDMNAPIFCIM: u32,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.JPGOCEGDLOL)
    pub JPGOCEGDLOL: ::std::vec::Vec<super::FBMJMHIIODF::FBMJMHIIODF>,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.OAMOFNCMDHJ)
    pub OAMOFNCMDHJ: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.CBPMPDGGJCP)
    pub CBPMPDGGJCP: u32,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.AFINLCLFCKA)
    pub AFINLCLFCKA: ::protobuf::MessageField<super::OKFBIFCDJHL::OKFBIFCDJHL>,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.NCOPHNJNMGL)
    pub NCOPHNJNMGL: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.level)
    pub level: u32,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.DBIMHGDDFGL)
    pub DBIMHGDDFGL: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.DBAFEACGKPP)
    pub DBAFEACGKPP: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetAlleyInfoScRsp.BMBEDGHCNKJ)
    pub BMBEDGHCNKJ: ::protobuf::MessageField<super::MEDPAMLOEMC::MEDPAMLOEMC>,
    // special fields
    // @@protoc_insertion_point(special_field:GetAlleyInfoScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAlleyInfoScRsp {
    fn default() -> &'a GetAlleyInfoScRsp {
        <GetAlleyInfoScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetAlleyInfoScRsp {
    pub fn new() -> GetAlleyInfoScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KNKNOKONJJD::KNKNOKONJJD>(
            "DBPCGLOLBJB",
            |m: &GetAlleyInfoScRsp| { &m.DBPCGLOLBJB },
            |m: &mut GetAlleyInfoScRsp| { &mut m.DBPCGLOLBJB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BDMNAPIFCIM",
            |m: &GetAlleyInfoScRsp| { &m.BDMNAPIFCIM },
            |m: &mut GetAlleyInfoScRsp| { &mut m.BDMNAPIFCIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JPGOCEGDLOL",
            |m: &GetAlleyInfoScRsp| { &m.JPGOCEGDLOL },
            |m: &mut GetAlleyInfoScRsp| { &mut m.JPGOCEGDLOL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "OAMOFNCMDHJ",
            |m: &GetAlleyInfoScRsp| { &m.OAMOFNCMDHJ },
            |m: &mut GetAlleyInfoScRsp| { &mut m.OAMOFNCMDHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CBPMPDGGJCP",
            |m: &GetAlleyInfoScRsp| { &m.CBPMPDGGJCP },
            |m: &mut GetAlleyInfoScRsp| { &mut m.CBPMPDGGJCP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OKFBIFCDJHL::OKFBIFCDJHL>(
            "AFINLCLFCKA",
            |m: &GetAlleyInfoScRsp| { &m.AFINLCLFCKA },
            |m: &mut GetAlleyInfoScRsp| { &mut m.AFINLCLFCKA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NCOPHNJNMGL",
            |m: &GetAlleyInfoScRsp| { &m.NCOPHNJNMGL },
            |m: &mut GetAlleyInfoScRsp| { &mut m.NCOPHNJNMGL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &GetAlleyInfoScRsp| { &m.level },
            |m: &mut GetAlleyInfoScRsp| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetAlleyInfoScRsp| { &m.retcode },
            |m: &mut GetAlleyInfoScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DBIMHGDDFGL",
            |m: &GetAlleyInfoScRsp| { &m.DBIMHGDDFGL },
            |m: &mut GetAlleyInfoScRsp| { &mut m.DBIMHGDDFGL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DBAFEACGKPP",
            |m: &GetAlleyInfoScRsp| { &m.DBAFEACGKPP },
            |m: &mut GetAlleyInfoScRsp| { &mut m.DBAFEACGKPP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MEDPAMLOEMC::MEDPAMLOEMC>(
            "BMBEDGHCNKJ",
            |m: &GetAlleyInfoScRsp| { &m.BMBEDGHCNKJ },
            |m: &mut GetAlleyInfoScRsp| { &mut m.BMBEDGHCNKJ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAlleyInfoScRsp>(
            "GetAlleyInfoScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAlleyInfoScRsp {
    const NAME: &'static str = "GetAlleyInfoScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DBPCGLOLBJB)?;
                },
                120 => {
                    self.BDMNAPIFCIM = is.read_uint32()?;
                },
                10 => {
                    self.JPGOCEGDLOL.push(is.read_message()?);
                },
                90 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.OAMOFNCMDHJ.insert(key, value);
                },
                80 => {
                    self.CBPMPDGGJCP = is.read_uint32()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AFINLCLFCKA)?;
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.NCOPHNJNMGL)?;
                },
                104 => {
                    self.NCOPHNJNMGL.push(is.read_uint32()?);
                },
                24 => {
                    self.level = is.read_uint32()?;
                },
                16 => {
                    self.retcode = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.DBIMHGDDFGL)?;
                },
                72 => {
                    self.DBIMHGDDFGL.push(is.read_uint32()?);
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.DBAFEACGKPP)?;
                },
                64 => {
                    self.DBAFEACGKPP.push(is.read_uint32()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BMBEDGHCNKJ)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.DBPCGLOLBJB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.BDMNAPIFCIM != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.BDMNAPIFCIM);
        }
        for value in &self.JPGOCEGDLOL {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.OAMOFNCMDHJ {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.CBPMPDGGJCP != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.CBPMPDGGJCP);
        }
        if let Some(v) = self.AFINLCLFCKA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.NCOPHNJNMGL {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.level);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.retcode);
        }
        for value in &self.DBIMHGDDFGL {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        for value in &self.DBAFEACGKPP {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if let Some(v) = self.BMBEDGHCNKJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.DBPCGLOLBJB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if self.BDMNAPIFCIM != 0 {
            os.write_uint32(15, self.BDMNAPIFCIM)?;
        }
        for v in &self.JPGOCEGDLOL {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for (k, v) in &self.OAMOFNCMDHJ {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(90)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if self.CBPMPDGGJCP != 0 {
            os.write_uint32(10, self.CBPMPDGGJCP)?;
        }
        if let Some(v) = self.AFINLCLFCKA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.NCOPHNJNMGL {
            os.write_uint32(13, *v)?;
        };
        if self.level != 0 {
            os.write_uint32(3, self.level)?;
        }
        if self.retcode != 0 {
            os.write_uint32(2, self.retcode)?;
        }
        for v in &self.DBIMHGDDFGL {
            os.write_uint32(9, *v)?;
        };
        for v in &self.DBAFEACGKPP {
            os.write_uint32(8, *v)?;
        };
        if let Some(v) = self.BMBEDGHCNKJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAlleyInfoScRsp {
        GetAlleyInfoScRsp::new()
    }

    fn clear(&mut self) {
        self.DBPCGLOLBJB.clear();
        self.BDMNAPIFCIM = 0;
        self.JPGOCEGDLOL.clear();
        self.OAMOFNCMDHJ.clear();
        self.CBPMPDGGJCP = 0;
        self.AFINLCLFCKA.clear();
        self.NCOPHNJNMGL.clear();
        self.level = 0;
        self.retcode = 0;
        self.DBIMHGDDFGL.clear();
        self.DBAFEACGKPP.clear();
        self.BMBEDGHCNKJ.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAlleyInfoScRsp {
        static instance: ::protobuf::rt::Lazy<GetAlleyInfoScRsp> = ::protobuf::rt::Lazy::new();
        instance.get(GetAlleyInfoScRsp::new)
    }
}

impl ::protobuf::MessageFull for GetAlleyInfoScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAlleyInfoScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAlleyInfoScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAlleyInfoScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17GetAlleyInfoScRsp.proto\x1a\x11FBMJMHIIODF.proto\x1a\x11KNKNOKONJJ\
    D.proto\x1a\x11MEDPAMLOEMC.proto\x1a\x11OKFBIFCDJHL.proto\"\xb4\x04\n\
    \x11GetAlleyInfoScRsp\x12.\n\x0bDBPCGLOLBJB\x18\x0e\x20\x01(\x0b2\x0c.KN\
    KNOKONJJDR\x0bDBPCGLOLBJB\x12\x20\n\x0bBDMNAPIFCIM\x18\x0f\x20\x01(\rR\
    \x0bBDMNAPIFCIM\x12.\n\x0bJPGOCEGDLOL\x18\x01\x20\x03(\x0b2\x0c.FBMJMHII\
    ODFR\x0bJPGOCEGDLOL\x12E\n\x0bOAMOFNCMDHJ\x18\x0b\x20\x03(\x0b2#.GetAlle\
    yInfoScRsp.OAMOFNCMDHJEntryR\x0bOAMOFNCMDHJ\x12\x20\n\x0bCBPMPDGGJCP\x18\
    \n\x20\x01(\rR\x0bCBPMPDGGJCP\x12.\n\x0bAFINLCLFCKA\x18\x06\x20\x01(\x0b\
    2\x0c.OKFBIFCDJHLR\x0bAFINLCLFCKA\x12\x20\n\x0bNCOPHNJNMGL\x18\r\x20\x03\
    (\rR\x0bNCOPHNJNMGL\x12\x14\n\x05level\x18\x03\x20\x01(\rR\x05level\x12\
    \x18\n\x07retcode\x18\x02\x20\x01(\rR\x07retcode\x12\x20\n\x0bDBIMHGDDFG\
    L\x18\t\x20\x03(\rR\x0bDBIMHGDDFGL\x12\x20\n\x0bDBAFEACGKPP\x18\x08\x20\
    \x03(\rR\x0bDBAFEACGKPP\x12.\n\x0bBMBEDGHCNKJ\x18\x04\x20\x01(\x0b2\x0c.\
    MEDPAMLOEMCR\x0bBMBEDGHCNKJ\x1a>\n\x10OAMOFNCMDHJEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05va\
    lue:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::FBMJMHIIODF::file_descriptor().clone());
            deps.push(super::KNKNOKONJJD::file_descriptor().clone());
            deps.push(super::MEDPAMLOEMC::file_descriptor().clone());
            deps.push(super::OKFBIFCDJHL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetAlleyInfoScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
