// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueActionResultData.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueActionResultData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueActionResultData {
    // message oneof groups
    pub result_action: ::std::option::Option<rogue_action_result_data::Result_action>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueActionResultData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueActionResultData {
    fn default() -> &'a RogueActionResultData {
        <RogueActionResultData as ::protobuf::Message>::default_instance()
    }
}

impl RogueActionResultData {
    pub fn new() -> RogueActionResultData {
        ::std::default::Default::default()
    }

    // .RogueVirtualItemData add_item_list = 6;

    pub fn add_item_list(&self) -> &super::RogueVirtualItemData::RogueVirtualItemData {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::AddItemList(ref v)) => v,
            _ => <super::RogueVirtualItemData::RogueVirtualItemData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_add_item_list(&mut self) {
        self.result_action = ::std::option::Option::None;
    }

    pub fn has_add_item_list(&self) -> bool {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::AddItemList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add_item_list(&mut self, v: super::RogueVirtualItemData::RogueVirtualItemData) {
        self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::AddItemList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_add_item_list(&mut self) -> &mut super::RogueVirtualItemData::RogueVirtualItemData {
        if let ::std::option::Option::Some(rogue_action_result_data::Result_action::AddItemList(_)) = self.result_action {
        } else {
            self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::AddItemList(super::RogueVirtualItemData::RogueVirtualItemData::new()));
        }
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::AddItemList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_add_item_list(&mut self) -> super::RogueVirtualItemData::RogueVirtualItemData {
        if self.has_add_item_list() {
            match self.result_action.take() {
                ::std::option::Option::Some(rogue_action_result_data::Result_action::AddItemList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueVirtualItemData::RogueVirtualItemData::new()
        }
    }

    // .RogueVirtualItemData remove_item_list = 2;

    pub fn remove_item_list(&self) -> &super::RogueVirtualItemData::RogueVirtualItemData {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveItemList(ref v)) => v,
            _ => <super::RogueVirtualItemData::RogueVirtualItemData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_remove_item_list(&mut self) {
        self.result_action = ::std::option::Option::None;
    }

    pub fn has_remove_item_list(&self) -> bool {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveItemList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remove_item_list(&mut self, v: super::RogueVirtualItemData::RogueVirtualItemData) {
        self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveItemList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remove_item_list(&mut self) -> &mut super::RogueVirtualItemData::RogueVirtualItemData {
        if let ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveItemList(_)) = self.result_action {
        } else {
            self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveItemList(super::RogueVirtualItemData::RogueVirtualItemData::new()));
        }
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveItemList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remove_item_list(&mut self) -> super::RogueVirtualItemData::RogueVirtualItemData {
        if self.has_remove_item_list() {
            match self.result_action.take() {
                ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveItemList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueVirtualItemData::RogueVirtualItemData::new()
        }
    }

    // .RogueBuffData add_buff_list = 1884;

    pub fn add_buff_list(&self) -> &super::RogueBuffData::RogueBuffData {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::AddBuffList(ref v)) => v,
            _ => <super::RogueBuffData::RogueBuffData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_add_buff_list(&mut self) {
        self.result_action = ::std::option::Option::None;
    }

    pub fn has_add_buff_list(&self) -> bool {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::AddBuffList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add_buff_list(&mut self, v: super::RogueBuffData::RogueBuffData) {
        self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::AddBuffList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_add_buff_list(&mut self) -> &mut super::RogueBuffData::RogueBuffData {
        if let ::std::option::Option::Some(rogue_action_result_data::Result_action::AddBuffList(_)) = self.result_action {
        } else {
            self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::AddBuffList(super::RogueBuffData::RogueBuffData::new()));
        }
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::AddBuffList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_add_buff_list(&mut self) -> super::RogueBuffData::RogueBuffData {
        if self.has_add_buff_list() {
            match self.result_action.take() {
                ::std::option::Option::Some(rogue_action_result_data::Result_action::AddBuffList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueBuffData::RogueBuffData::new()
        }
    }

    // .RogueBuffData remove_buff_list = 1544;

    pub fn remove_buff_list(&self) -> &super::RogueBuffData::RogueBuffData {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveBuffList(ref v)) => v,
            _ => <super::RogueBuffData::RogueBuffData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_remove_buff_list(&mut self) {
        self.result_action = ::std::option::Option::None;
    }

    pub fn has_remove_buff_list(&self) -> bool {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveBuffList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remove_buff_list(&mut self, v: super::RogueBuffData::RogueBuffData) {
        self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveBuffList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remove_buff_list(&mut self) -> &mut super::RogueBuffData::RogueBuffData {
        if let ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveBuffList(_)) = self.result_action {
        } else {
            self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveBuffList(super::RogueBuffData::RogueBuffData::new()));
        }
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveBuffList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remove_buff_list(&mut self) -> super::RogueBuffData::RogueBuffData {
        if self.has_remove_buff_list() {
            match self.result_action.take() {
                ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveBuffList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueBuffData::RogueBuffData::new()
        }
    }

    // .RogueMiracleData add_miracle_list = 217;

    pub fn add_miracle_list(&self) -> &super::RogueMiracleData::RogueMiracleData {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::AddMiracleList(ref v)) => v,
            _ => <super::RogueMiracleData::RogueMiracleData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_add_miracle_list(&mut self) {
        self.result_action = ::std::option::Option::None;
    }

    pub fn has_add_miracle_list(&self) -> bool {
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::AddMiracleList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add_miracle_list(&mut self, v: super::RogueMiracleData::RogueMiracleData) {
        self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::AddMiracleList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_add_miracle_list(&mut self) -> &mut super::RogueMiracleData::RogueMiracleData {
        if let ::std::option::Option::Some(rogue_action_result_data::Result_action::AddMiracleList(_)) = self.result_action {
        } else {
            self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::AddMiracleList(super::RogueMiracleData::RogueMiracleData::new()));
        }
        match self.result_action {
            ::std::option::Option::Some(rogue_action_result_data::Result_action::AddMiracleList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_add_miracle_list(&mut self) -> super::RogueMiracleData::RogueMiracleData {
        if self.has_add_miracle_list() {
            match self.result_action.take() {
                ::std::option::Option::Some(rogue_action_result_data::Result_action::AddMiracleList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueMiracleData::RogueMiracleData::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueVirtualItemData::RogueVirtualItemData>(
            "add_item_list",
            RogueActionResultData::has_add_item_list,
            RogueActionResultData::add_item_list,
            RogueActionResultData::mut_add_item_list,
            RogueActionResultData::set_add_item_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueVirtualItemData::RogueVirtualItemData>(
            "remove_item_list",
            RogueActionResultData::has_remove_item_list,
            RogueActionResultData::remove_item_list,
            RogueActionResultData::mut_remove_item_list,
            RogueActionResultData::set_remove_item_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueBuffData::RogueBuffData>(
            "add_buff_list",
            RogueActionResultData::has_add_buff_list,
            RogueActionResultData::add_buff_list,
            RogueActionResultData::mut_add_buff_list,
            RogueActionResultData::set_add_buff_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueBuffData::RogueBuffData>(
            "remove_buff_list",
            RogueActionResultData::has_remove_buff_list,
            RogueActionResultData::remove_buff_list,
            RogueActionResultData::mut_remove_buff_list,
            RogueActionResultData::set_remove_buff_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueMiracleData::RogueMiracleData>(
            "add_miracle_list",
            RogueActionResultData::has_add_miracle_list,
            RogueActionResultData::add_miracle_list,
            RogueActionResultData::mut_add_miracle_list,
            RogueActionResultData::set_add_miracle_list,
        ));
        oneofs.push(rogue_action_result_data::Result_action::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueActionResultData>(
            "RogueActionResultData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueActionResultData {
    const NAME: &'static str = "RogueActionResultData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::AddItemList(is.read_message()?));
                },
                18 => {
                    self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveItemList(is.read_message()?));
                },
                15074 => {
                    self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::AddBuffList(is.read_message()?));
                },
                12354 => {
                    self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::RemoveBuffList(is.read_message()?));
                },
                1738 => {
                    self.result_action = ::std::option::Option::Some(rogue_action_result_data::Result_action::AddMiracleList(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result_action {
            match v {
                &rogue_action_result_data::Result_action::AddItemList(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action_result_data::Result_action::RemoveItemList(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action_result_data::Result_action::AddBuffList(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action_result_data::Result_action::RemoveBuffList(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_action_result_data::Result_action::AddMiracleList(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.result_action {
            match v {
                &rogue_action_result_data::Result_action::AddItemList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &rogue_action_result_data::Result_action::RemoveItemList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &rogue_action_result_data::Result_action::AddBuffList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1884, v, os)?;
                },
                &rogue_action_result_data::Result_action::RemoveBuffList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1544, v, os)?;
                },
                &rogue_action_result_data::Result_action::AddMiracleList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(217, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueActionResultData {
        RogueActionResultData::new()
    }

    fn clear(&mut self) {
        self.result_action = ::std::option::Option::None;
        self.result_action = ::std::option::Option::None;
        self.result_action = ::std::option::Option::None;
        self.result_action = ::std::option::Option::None;
        self.result_action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueActionResultData {
        static instance: RogueActionResultData = RogueActionResultData {
            result_action: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueActionResultData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueActionResultData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueActionResultData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueActionResultData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueActionResultData`
pub mod rogue_action_result_data {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueActionResultData.result_action)
    pub enum Result_action {
        // @@protoc_insertion_point(oneof_field:RogueActionResultData.add_item_list)
        AddItemList(super::super::RogueVirtualItemData::RogueVirtualItemData),
        // @@protoc_insertion_point(oneof_field:RogueActionResultData.remove_item_list)
        RemoveItemList(super::super::RogueVirtualItemData::RogueVirtualItemData),
        // @@protoc_insertion_point(oneof_field:RogueActionResultData.add_buff_list)
        AddBuffList(super::super::RogueBuffData::RogueBuffData),
        // @@protoc_insertion_point(oneof_field:RogueActionResultData.remove_buff_list)
        RemoveBuffList(super::super::RogueBuffData::RogueBuffData),
        // @@protoc_insertion_point(oneof_field:RogueActionResultData.add_miracle_list)
        AddMiracleList(super::super::RogueMiracleData::RogueMiracleData),
    }

    impl ::protobuf::Oneof for Result_action {
    }

    impl ::protobuf::OneofFull for Result_action {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueActionResultData as ::protobuf::MessageFull>::descriptor().oneof_by_name("result_action").unwrap()).clone()
        }
    }

    impl Result_action {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Result_action>("result_action")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bRogueActionResultData.proto\x1a\x13RogueBuffData.proto\x1a\x16Rogu\
    eMiracleData.proto\x1a\x1aRogueVirtualItemData.proto\"\xdc\x02\n\x15Rogu\
    eActionResultData\x12;\n\radd_item_list\x18\x06\x20\x01(\x0b2\x15.RogueV\
    irtualItemDataH\0R\x0baddItemList\x12A\n\x10remove_item_list\x18\x02\x20\
    \x01(\x0b2\x15.RogueVirtualItemDataH\0R\x0eremoveItemList\x125\n\radd_bu\
    ff_list\x18\xdc\x0e\x20\x01(\x0b2\x0e.RogueBuffDataH\0R\x0baddBuffList\
    \x12;\n\x10remove_buff_list\x18\x88\x0c\x20\x01(\x0b2\x0e.RogueBuffDataH\
    \0R\x0eremoveBuffList\x12>\n\x10add_miracle_list\x18\xd9\x01\x20\x01(\
    \x0b2\x11.RogueMiracleDataH\0R\x0eaddMiracleListB\x0f\n\rresult_actionB\
    \x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::RogueBuffData::file_descriptor().clone());
            deps.push(super::RogueMiracleData::file_descriptor().clone());
            deps.push(super::RogueVirtualItemData::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueActionResultData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
