// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerGetTokenCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:PlayerGetTokenCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerGetTokenCsReq {
    // message fields
    // @@protoc_insertion_point(field:PlayerGetTokenCsReq.BINLGCOBEPO)
    pub BINLGCOBEPO: u32,
    // @@protoc_insertion_point(field:PlayerGetTokenCsReq.CCMDNDONCKI)
    pub CCMDNDONCKI: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerGetTokenCsReq.NEJJEFEOJOJ)
    pub NEJJEFEOJOJ: u32,
    // @@protoc_insertion_point(field:PlayerGetTokenCsReq.JIOPMFNPBNP)
    pub JIOPMFNPBNP: u32,
    // @@protoc_insertion_point(field:PlayerGetTokenCsReq.CGEGOLLMHCJ)
    pub CGEGOLLMHCJ: u32,
    // @@protoc_insertion_point(field:PlayerGetTokenCsReq.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:PlayerGetTokenCsReq.MBIKFFDNCPN)
    pub MBIKFFDNCPN: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerGetTokenCsReq.OEJMEOHHKGC)
    pub OEJMEOHHKGC: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerGetTokenCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerGetTokenCsReq {
    fn default() -> &'a PlayerGetTokenCsReq {
        <PlayerGetTokenCsReq as ::protobuf::Message>::default_instance()
    }
}

impl PlayerGetTokenCsReq {
    pub fn new() -> PlayerGetTokenCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BINLGCOBEPO",
            |m: &PlayerGetTokenCsReq| { &m.BINLGCOBEPO },
            |m: &mut PlayerGetTokenCsReq| { &mut m.BINLGCOBEPO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CCMDNDONCKI",
            |m: &PlayerGetTokenCsReq| { &m.CCMDNDONCKI },
            |m: &mut PlayerGetTokenCsReq| { &mut m.CCMDNDONCKI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NEJJEFEOJOJ",
            |m: &PlayerGetTokenCsReq| { &m.NEJJEFEOJOJ },
            |m: &mut PlayerGetTokenCsReq| { &mut m.NEJJEFEOJOJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JIOPMFNPBNP",
            |m: &PlayerGetTokenCsReq| { &m.JIOPMFNPBNP },
            |m: &mut PlayerGetTokenCsReq| { &mut m.JIOPMFNPBNP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CGEGOLLMHCJ",
            |m: &PlayerGetTokenCsReq| { &m.CGEGOLLMHCJ },
            |m: &mut PlayerGetTokenCsReq| { &mut m.CGEGOLLMHCJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &PlayerGetTokenCsReq| { &m.uid },
            |m: &mut PlayerGetTokenCsReq| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MBIKFFDNCPN",
            |m: &PlayerGetTokenCsReq| { &m.MBIKFFDNCPN },
            |m: &mut PlayerGetTokenCsReq| { &mut m.MBIKFFDNCPN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OEJMEOHHKGC",
            |m: &PlayerGetTokenCsReq| { &m.OEJMEOHHKGC },
            |m: &mut PlayerGetTokenCsReq| { &mut m.OEJMEOHHKGC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerGetTokenCsReq>(
            "PlayerGetTokenCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerGetTokenCsReq {
    const NAME: &'static str = "PlayerGetTokenCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.BINLGCOBEPO = is.read_uint32()?;
                },
                122 => {
                    self.CCMDNDONCKI = is.read_string()?;
                },
                88 => {
                    self.NEJJEFEOJOJ = is.read_uint32()?;
                },
                96 => {
                    self.JIOPMFNPBNP = is.read_uint32()?;
                },
                8 => {
                    self.CGEGOLLMHCJ = is.read_uint32()?;
                },
                80 => {
                    self.uid = is.read_uint32()?;
                },
                50 => {
                    self.MBIKFFDNCPN = is.read_string()?;
                },
                42 => {
                    self.OEJMEOHHKGC = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.BINLGCOBEPO != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.BINLGCOBEPO);
        }
        if !self.CCMDNDONCKI.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.CCMDNDONCKI);
        }
        if self.NEJJEFEOJOJ != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.NEJJEFEOJOJ);
        }
        if self.JIOPMFNPBNP != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.JIOPMFNPBNP);
        }
        if self.CGEGOLLMHCJ != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.CGEGOLLMHCJ);
        }
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.uid);
        }
        if !self.MBIKFFDNCPN.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.MBIKFFDNCPN);
        }
        if !self.OEJMEOHHKGC.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.OEJMEOHHKGC);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.BINLGCOBEPO != 0 {
            os.write_uint32(2, self.BINLGCOBEPO)?;
        }
        if !self.CCMDNDONCKI.is_empty() {
            os.write_string(15, &self.CCMDNDONCKI)?;
        }
        if self.NEJJEFEOJOJ != 0 {
            os.write_uint32(11, self.NEJJEFEOJOJ)?;
        }
        if self.JIOPMFNPBNP != 0 {
            os.write_uint32(12, self.JIOPMFNPBNP)?;
        }
        if self.CGEGOLLMHCJ != 0 {
            os.write_uint32(1, self.CGEGOLLMHCJ)?;
        }
        if self.uid != 0 {
            os.write_uint32(10, self.uid)?;
        }
        if !self.MBIKFFDNCPN.is_empty() {
            os.write_string(6, &self.MBIKFFDNCPN)?;
        }
        if !self.OEJMEOHHKGC.is_empty() {
            os.write_string(5, &self.OEJMEOHHKGC)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerGetTokenCsReq {
        PlayerGetTokenCsReq::new()
    }

    fn clear(&mut self) {
        self.BINLGCOBEPO = 0;
        self.CCMDNDONCKI.clear();
        self.NEJJEFEOJOJ = 0;
        self.JIOPMFNPBNP = 0;
        self.CGEGOLLMHCJ = 0;
        self.uid = 0;
        self.MBIKFFDNCPN.clear();
        self.OEJMEOHHKGC.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerGetTokenCsReq {
        static instance: PlayerGetTokenCsReq = PlayerGetTokenCsReq {
            BINLGCOBEPO: 0,
            CCMDNDONCKI: ::std::string::String::new(),
            NEJJEFEOJOJ: 0,
            JIOPMFNPBNP: 0,
            CGEGOLLMHCJ: 0,
            uid: 0,
            MBIKFFDNCPN: ::std::string::String::new(),
            OEJMEOHHKGC: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerGetTokenCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerGetTokenCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerGetTokenCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerGetTokenCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19PlayerGetTokenCsReq.proto\"\x95\x02\n\x13PlayerGetTokenCsReq\x12\
    \x20\n\x0bBINLGCOBEPO\x18\x02\x20\x01(\rR\x0bBINLGCOBEPO\x12\x20\n\x0bCC\
    MDNDONCKI\x18\x0f\x20\x01(\tR\x0bCCMDNDONCKI\x12\x20\n\x0bNEJJEFEOJOJ\
    \x18\x0b\x20\x01(\rR\x0bNEJJEFEOJOJ\x12\x20\n\x0bJIOPMFNPBNP\x18\x0c\x20\
    \x01(\rR\x0bJIOPMFNPBNP\x12\x20\n\x0bCGEGOLLMHCJ\x18\x01\x20\x01(\rR\x0b\
    CGEGOLLMHCJ\x12\x10\n\x03uid\x18\n\x20\x01(\rR\x03uid\x12\x20\n\x0bMBIKF\
    FDNCPN\x18\x06\x20\x01(\tR\x0bMBIKFFDNCPN\x12\x20\n\x0bOEJMEOHHKGC\x18\
    \x05\x20\x01(\tR\x0bOEJMEOHHKGCb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerGetTokenCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
