// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AIHKDBCHPPG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AIHKDBCHPPG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AIHKDBCHPPG {
    // message fields
    // @@protoc_insertion_point(field:AIHKDBCHPPG.MGGDEINKDMH)
    pub MGGDEINKDMH: ::std::string::String,
    // @@protoc_insertion_point(field:AIHKDBCHPPG.IDMFMMKNMNN)
    pub IDMFMMKNMNN: f32,
    // @@protoc_insertion_point(field:AIHKDBCHPPG.HADKKFPOMCJ)
    pub HADKKFPOMCJ: f32,
    // @@protoc_insertion_point(field:AIHKDBCHPPG.AGMPJEDFKLF)
    pub AGMPJEDFKLF: u32,
    // @@protoc_insertion_point(field:AIHKDBCHPPG.GMBCHDKFLHD)
    pub GMBCHDKFLHD: u32,
    // @@protoc_insertion_point(field:AIHKDBCHPPG.ILHMJAHEIPI)
    pub ILHMJAHEIPI: u32,
    // @@protoc_insertion_point(field:AIHKDBCHPPG.DPKHBCDJIGO)
    pub DPKHBCDJIGO: u32,
    // @@protoc_insertion_point(field:AIHKDBCHPPG.ELOKPKGJEOK)
    pub ELOKPKGJEOK: u32,
    // @@protoc_insertion_point(field:AIHKDBCHPPG.PLMFECAPGHD)
    pub PLMFECAPGHD: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:AIHKDBCHPPG.EIAOLKIAOFI)
    pub EIAOLKIAOFI: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:AIHKDBCHPPG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AIHKDBCHPPG {
    fn default() -> &'a AIHKDBCHPPG {
        <AIHKDBCHPPG as ::protobuf::Message>::default_instance()
    }
}

impl AIHKDBCHPPG {
    pub fn new() -> AIHKDBCHPPG {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MGGDEINKDMH",
            |m: &AIHKDBCHPPG| { &m.MGGDEINKDMH },
            |m: &mut AIHKDBCHPPG| { &mut m.MGGDEINKDMH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IDMFMMKNMNN",
            |m: &AIHKDBCHPPG| { &m.IDMFMMKNMNN },
            |m: &mut AIHKDBCHPPG| { &mut m.IDMFMMKNMNN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HADKKFPOMCJ",
            |m: &AIHKDBCHPPG| { &m.HADKKFPOMCJ },
            |m: &mut AIHKDBCHPPG| { &mut m.HADKKFPOMCJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AGMPJEDFKLF",
            |m: &AIHKDBCHPPG| { &m.AGMPJEDFKLF },
            |m: &mut AIHKDBCHPPG| { &mut m.AGMPJEDFKLF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GMBCHDKFLHD",
            |m: &AIHKDBCHPPG| { &m.GMBCHDKFLHD },
            |m: &mut AIHKDBCHPPG| { &mut m.GMBCHDKFLHD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ILHMJAHEIPI",
            |m: &AIHKDBCHPPG| { &m.ILHMJAHEIPI },
            |m: &mut AIHKDBCHPPG| { &mut m.ILHMJAHEIPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DPKHBCDJIGO",
            |m: &AIHKDBCHPPG| { &m.DPKHBCDJIGO },
            |m: &mut AIHKDBCHPPG| { &mut m.DPKHBCDJIGO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ELOKPKGJEOK",
            |m: &AIHKDBCHPPG| { &m.ELOKPKGJEOK },
            |m: &mut AIHKDBCHPPG| { &mut m.ELOKPKGJEOK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PLMFECAPGHD",
            |m: &AIHKDBCHPPG| { &m.PLMFECAPGHD },
            |m: &mut AIHKDBCHPPG| { &mut m.PLMFECAPGHD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EIAOLKIAOFI",
            |m: &AIHKDBCHPPG| { &m.EIAOLKIAOFI },
            |m: &mut AIHKDBCHPPG| { &mut m.EIAOLKIAOFI },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AIHKDBCHPPG>(
            "AIHKDBCHPPG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AIHKDBCHPPG {
    const NAME: &'static str = "AIHKDBCHPPG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.MGGDEINKDMH = is.read_string()?;
                },
                21 => {
                    self.IDMFMMKNMNN = is.read_float()?;
                },
                29 => {
                    self.HADKKFPOMCJ = is.read_float()?;
                },
                32 => {
                    self.AGMPJEDFKLF = is.read_uint32()?;
                },
                40 => {
                    self.GMBCHDKFLHD = is.read_uint32()?;
                },
                48 => {
                    self.ILHMJAHEIPI = is.read_uint32()?;
                },
                56 => {
                    self.DPKHBCDJIGO = is.read_uint32()?;
                },
                64 => {
                    self.ELOKPKGJEOK = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.PLMFECAPGHD)?;
                },
                72 => {
                    self.PLMFECAPGHD.push(is.read_uint32()?);
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.EIAOLKIAOFI)?;
                },
                80 => {
                    self.EIAOLKIAOFI.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.MGGDEINKDMH.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.MGGDEINKDMH);
        }
        if self.IDMFMMKNMNN != 0. {
            my_size += 1 + 4;
        }
        if self.HADKKFPOMCJ != 0. {
            my_size += 1 + 4;
        }
        if self.AGMPJEDFKLF != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.AGMPJEDFKLF);
        }
        if self.GMBCHDKFLHD != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.GMBCHDKFLHD);
        }
        if self.ILHMJAHEIPI != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.ILHMJAHEIPI);
        }
        if self.DPKHBCDJIGO != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.DPKHBCDJIGO);
        }
        if self.ELOKPKGJEOK != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.ELOKPKGJEOK);
        }
        for value in &self.PLMFECAPGHD {
            my_size += ::protobuf::rt::uint32_size(9, *value);
        };
        for value in &self.EIAOLKIAOFI {
            my_size += ::protobuf::rt::uint32_size(10, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.MGGDEINKDMH.is_empty() {
            os.write_string(1, &self.MGGDEINKDMH)?;
        }
        if self.IDMFMMKNMNN != 0. {
            os.write_float(2, self.IDMFMMKNMNN)?;
        }
        if self.HADKKFPOMCJ != 0. {
            os.write_float(3, self.HADKKFPOMCJ)?;
        }
        if self.AGMPJEDFKLF != 0 {
            os.write_uint32(4, self.AGMPJEDFKLF)?;
        }
        if self.GMBCHDKFLHD != 0 {
            os.write_uint32(5, self.GMBCHDKFLHD)?;
        }
        if self.ILHMJAHEIPI != 0 {
            os.write_uint32(6, self.ILHMJAHEIPI)?;
        }
        if self.DPKHBCDJIGO != 0 {
            os.write_uint32(7, self.DPKHBCDJIGO)?;
        }
        if self.ELOKPKGJEOK != 0 {
            os.write_uint32(8, self.ELOKPKGJEOK)?;
        }
        for v in &self.PLMFECAPGHD {
            os.write_uint32(9, *v)?;
        };
        for v in &self.EIAOLKIAOFI {
            os.write_uint32(10, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AIHKDBCHPPG {
        AIHKDBCHPPG::new()
    }

    fn clear(&mut self) {
        self.MGGDEINKDMH.clear();
        self.IDMFMMKNMNN = 0.;
        self.HADKKFPOMCJ = 0.;
        self.AGMPJEDFKLF = 0;
        self.GMBCHDKFLHD = 0;
        self.ILHMJAHEIPI = 0;
        self.DPKHBCDJIGO = 0;
        self.ELOKPKGJEOK = 0;
        self.PLMFECAPGHD.clear();
        self.EIAOLKIAOFI.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AIHKDBCHPPG {
        static instance: AIHKDBCHPPG = AIHKDBCHPPG {
            MGGDEINKDMH: ::std::string::String::new(),
            IDMFMMKNMNN: 0.,
            HADKKFPOMCJ: 0.,
            AGMPJEDFKLF: 0,
            GMBCHDKFLHD: 0,
            ILHMJAHEIPI: 0,
            DPKHBCDJIGO: 0,
            ELOKPKGJEOK: 0,
            PLMFECAPGHD: ::std::vec::Vec::new(),
            EIAOLKIAOFI: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AIHKDBCHPPG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AIHKDBCHPPG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AIHKDBCHPPG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AIHKDBCHPPG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AIHKDBCHPPG.proto\"\xe1\x02\n\x0bAIHKDBCHPPG\x12\x20\n\x0bMGGDEINK\
    DMH\x18\x01\x20\x01(\tR\x0bMGGDEINKDMH\x12\x20\n\x0bIDMFMMKNMNN\x18\x02\
    \x20\x01(\x02R\x0bIDMFMMKNMNN\x12\x20\n\x0bHADKKFPOMCJ\x18\x03\x20\x01(\
    \x02R\x0bHADKKFPOMCJ\x12\x20\n\x0bAGMPJEDFKLF\x18\x04\x20\x01(\rR\x0bAGM\
    PJEDFKLF\x12\x20\n\x0bGMBCHDKFLHD\x18\x05\x20\x01(\rR\x0bGMBCHDKFLHD\x12\
    \x20\n\x0bILHMJAHEIPI\x18\x06\x20\x01(\rR\x0bILHMJAHEIPI\x12\x20\n\x0bDP\
    KHBCDJIGO\x18\x07\x20\x01(\rR\x0bDPKHBCDJIGO\x12\x20\n\x0bELOKPKGJEOK\
    \x18\x08\x20\x01(\rR\x0bELOKPKGJEOK\x12\x20\n\x0bPLMFECAPGHD\x18\t\x20\
    \x03(\rR\x0bPLMFECAPGHD\x12\x20\n\x0bEIAOLKIAOFI\x18\n\x20\x03(\rR\x0bEI\
    AOLKIAOFIb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AIHKDBCHPPG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
