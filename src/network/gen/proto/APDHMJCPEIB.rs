// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `APDHMJCPEIB.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:APDHMJCPEIB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APDHMJCPEIB {
    // message fields
    // @@protoc_insertion_point(field:APDHMJCPEIB.DBLNDGLOAHP)
    pub DBLNDGLOAHP: ::protobuf::MessageField<super::JOGPHEDKAKG::JOGPHEDKAKG>,
    // @@protoc_insertion_point(field:APDHMJCPEIB.PAINLBMGDBC)
    pub PAINLBMGDBC: ::std::vec::Vec<super::NHLFAODJIDL::NHLFAODJIDL>,
    // @@protoc_insertion_point(field:APDHMJCPEIB.IGIIFGGIFKN)
    pub IGIIFGGIFKN: ::protobuf::MessageField<super::PHDBOIGHEPO::PHDBOIGHEPO>,
    // @@protoc_insertion_point(field:APDHMJCPEIB.FFIDBDCECOD)
    pub FFIDBDCECOD: ::std::vec::Vec<super::OFNCDKNKFJJ::OFNCDKNKFJJ>,
    // @@protoc_insertion_point(field:APDHMJCPEIB.KBDMKOHCEAG)
    pub KBDMKOHCEAG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:APDHMJCPEIB.FLMJGOGKGGE)
    pub FLMJGOGKGGE: ::std::vec::Vec<super::FCOKLOJAMBJ::FCOKLOJAMBJ>,
    // @@protoc_insertion_point(field:APDHMJCPEIB.CKBODLCOKMI)
    pub CKBODLCOKMI: ::std::vec::Vec<super::AFDGAGNIGAE::AFDGAGNIGAE>,
    // special fields
    // @@protoc_insertion_point(special_field:APDHMJCPEIB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APDHMJCPEIB {
    fn default() -> &'a APDHMJCPEIB {
        <APDHMJCPEIB as ::protobuf::Message>::default_instance()
    }
}

impl APDHMJCPEIB {
    pub fn new() -> APDHMJCPEIB {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JOGPHEDKAKG::JOGPHEDKAKG>(
            "DBLNDGLOAHP",
            |m: &APDHMJCPEIB| { &m.DBLNDGLOAHP },
            |m: &mut APDHMJCPEIB| { &mut m.DBLNDGLOAHP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PAINLBMGDBC",
            |m: &APDHMJCPEIB| { &m.PAINLBMGDBC },
            |m: &mut APDHMJCPEIB| { &mut m.PAINLBMGDBC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PHDBOIGHEPO::PHDBOIGHEPO>(
            "IGIIFGGIFKN",
            |m: &APDHMJCPEIB| { &m.IGIIFGGIFKN },
            |m: &mut APDHMJCPEIB| { &mut m.IGIIFGGIFKN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FFIDBDCECOD",
            |m: &APDHMJCPEIB| { &m.FFIDBDCECOD },
            |m: &mut APDHMJCPEIB| { &mut m.FFIDBDCECOD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KBDMKOHCEAG",
            |m: &APDHMJCPEIB| { &m.KBDMKOHCEAG },
            |m: &mut APDHMJCPEIB| { &mut m.KBDMKOHCEAG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FLMJGOGKGGE",
            |m: &APDHMJCPEIB| { &m.FLMJGOGKGGE },
            |m: &mut APDHMJCPEIB| { &mut m.FLMJGOGKGGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CKBODLCOKMI",
            |m: &APDHMJCPEIB| { &m.CKBODLCOKMI },
            |m: &mut APDHMJCPEIB| { &mut m.CKBODLCOKMI },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APDHMJCPEIB>(
            "APDHMJCPEIB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APDHMJCPEIB {
    const NAME: &'static str = "APDHMJCPEIB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DBLNDGLOAHP)?;
                },
                42 => {
                    self.PAINLBMGDBC.push(is.read_message()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IGIIFGGIFKN)?;
                },
                50 => {
                    self.FFIDBDCECOD.push(is.read_message()?);
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.KBDMKOHCEAG)?;
                },
                56 => {
                    self.KBDMKOHCEAG.push(is.read_uint32()?);
                },
                74 => {
                    self.FLMJGOGKGGE.push(is.read_message()?);
                },
                66 => {
                    self.CKBODLCOKMI.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.DBLNDGLOAHP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.PAINLBMGDBC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.IGIIFGGIFKN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.FFIDBDCECOD {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.KBDMKOHCEAG {
            my_size += ::protobuf::rt::uint32_size(7, *value);
        };
        for value in &self.FLMJGOGKGGE {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.CKBODLCOKMI {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.DBLNDGLOAHP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.PAINLBMGDBC {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.IGIIFGGIFKN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.FFIDBDCECOD {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.KBDMKOHCEAG {
            os.write_uint32(7, *v)?;
        };
        for v in &self.FLMJGOGKGGE {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for v in &self.CKBODLCOKMI {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APDHMJCPEIB {
        APDHMJCPEIB::new()
    }

    fn clear(&mut self) {
        self.DBLNDGLOAHP.clear();
        self.PAINLBMGDBC.clear();
        self.IGIIFGGIFKN.clear();
        self.FFIDBDCECOD.clear();
        self.KBDMKOHCEAG.clear();
        self.FLMJGOGKGGE.clear();
        self.CKBODLCOKMI.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APDHMJCPEIB {
        static instance: APDHMJCPEIB = APDHMJCPEIB {
            DBLNDGLOAHP: ::protobuf::MessageField::none(),
            PAINLBMGDBC: ::std::vec::Vec::new(),
            IGIIFGGIFKN: ::protobuf::MessageField::none(),
            FFIDBDCECOD: ::std::vec::Vec::new(),
            KBDMKOHCEAG: ::std::vec::Vec::new(),
            FLMJGOGKGGE: ::std::vec::Vec::new(),
            CKBODLCOKMI: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APDHMJCPEIB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APDHMJCPEIB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APDHMJCPEIB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APDHMJCPEIB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11APDHMJCPEIB.proto\x1a\x11AFDGAGNIGAE.proto\x1a\x11FCOKLOJAMBJ.prot\
    o\x1a\x11JOGPHEDKAKG.proto\x1a\x11NHLFAODJIDL.proto\x1a\x11OFNCDKNKFJJ.p\
    roto\x1a\x11PHDBOIGHEPO.proto\"\xcf\x02\n\x0bAPDHMJCPEIB\x12.\n\x0bDBLND\
    GLOAHP\x18\x03\x20\x01(\x0b2\x0c.JOGPHEDKAKGR\x0bDBLNDGLOAHP\x12.\n\x0bP\
    AINLBMGDBC\x18\x05\x20\x03(\x0b2\x0c.NHLFAODJIDLR\x0bPAINLBMGDBC\x12.\n\
    \x0bIGIIFGGIFKN\x18\n\x20\x01(\x0b2\x0c.PHDBOIGHEPOR\x0bIGIIFGGIFKN\x12.\
    \n\x0bFFIDBDCECOD\x18\x06\x20\x03(\x0b2\x0c.OFNCDKNKFJJR\x0bFFIDBDCECOD\
    \x12\x20\n\x0bKBDMKOHCEAG\x18\x07\x20\x03(\rR\x0bKBDMKOHCEAG\x12.\n\x0bF\
    LMJGOGKGGE\x18\t\x20\x03(\x0b2\x0c.FCOKLOJAMBJR\x0bFLMJGOGKGGE\x12.\n\
    \x0bCKBODLCOKMI\x18\x08\x20\x03(\x0b2\x0c.AFDGAGNIGAER\x0bCKBODLCOKMIb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::AFDGAGNIGAE::file_descriptor().clone());
            deps.push(super::FCOKLOJAMBJ::file_descriptor().clone());
            deps.push(super::JOGPHEDKAKG::file_descriptor().clone());
            deps.push(super::NHLFAODJIDL::file_descriptor().clone());
            deps.push(super::OFNCDKNKFJJ::file_descriptor().clone());
            deps.push(super::PHDBOIGHEPO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(APDHMJCPEIB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
