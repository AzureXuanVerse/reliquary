// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LOMAPIKBDJF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LOMAPIKBDJF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LOMAPIKBDJF {
    // message oneof groups
    pub KIDLOFFIOFG: ::std::option::Option<lomapikbdjf::KIDLOFFIOFG>,
    // special fields
    // @@protoc_insertion_point(special_field:LOMAPIKBDJF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LOMAPIKBDJF {
    fn default() -> &'a LOMAPIKBDJF {
        <LOMAPIKBDJF as ::protobuf::Message>::default_instance()
    }
}

impl LOMAPIKBDJF {
    pub fn new() -> LOMAPIKBDJF {
        ::std::default::Default::default()
    }

    // .KLIOLGAIKGL MFJCLLPEIBD = 14;

    pub fn MFJCLLPEIBD(&self) -> &super::KLIOLGAIKGL::KLIOLGAIKGL {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(ref v)) => v,
            _ => <super::KLIOLGAIKGL::KLIOLGAIKGL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MFJCLLPEIBD(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_MFJCLLPEIBD(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MFJCLLPEIBD(&mut self, v: super::KLIOLGAIKGL::KLIOLGAIKGL) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MFJCLLPEIBD(&mut self) -> &mut super::KLIOLGAIKGL::KLIOLGAIKGL {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(super::KLIOLGAIKGL::KLIOLGAIKGL::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MFJCLLPEIBD(&mut self) -> super::KLIOLGAIKGL::KLIOLGAIKGL {
        if self.has_MFJCLLPEIBD() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KLIOLGAIKGL::KLIOLGAIKGL::new()
        }
    }

    // .KLIOLGAIKGL PBHMLEMDIJI = 5;

    pub fn PBHMLEMDIJI(&self) -> &super::KLIOLGAIKGL::KLIOLGAIKGL {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(ref v)) => v,
            _ => <super::KLIOLGAIKGL::KLIOLGAIKGL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PBHMLEMDIJI(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_PBHMLEMDIJI(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PBHMLEMDIJI(&mut self, v: super::KLIOLGAIKGL::KLIOLGAIKGL) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PBHMLEMDIJI(&mut self) -> &mut super::KLIOLGAIKGL::KLIOLGAIKGL {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(super::KLIOLGAIKGL::KLIOLGAIKGL::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PBHMLEMDIJI(&mut self) -> super::KLIOLGAIKGL::KLIOLGAIKGL {
        if self.has_PBHMLEMDIJI() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KLIOLGAIKGL::KLIOLGAIKGL::new()
        }
    }

    // .ALLIPFPOOJF MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE = 6;

    pub fn MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&self) -> &super::ALLIPFPOOJF::ALLIPFPOOJF {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(ref v)) => v,
            _ => <super::ALLIPFPOOJF::ALLIPFPOOJF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&mut self, v: super::ALLIPFPOOJF::ALLIPFPOOJF) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&mut self) -> &mut super::ALLIPFPOOJF::ALLIPFPOOJF {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(super::ALLIPFPOOJF::ALLIPFPOOJF::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE(&mut self) -> super::ALLIPFPOOJF::ALLIPFPOOJF {
        if self.has_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ALLIPFPOOJF::ALLIPFPOOJF::new()
        }
    }

    // .ALLIPFPOOJF OOPDGIEJCHA = 7;

    pub fn OOPDGIEJCHA(&self) -> &super::ALLIPFPOOJF::ALLIPFPOOJF {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(ref v)) => v,
            _ => <super::ALLIPFPOOJF::ALLIPFPOOJF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OOPDGIEJCHA(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_OOPDGIEJCHA(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OOPDGIEJCHA(&mut self, v: super::ALLIPFPOOJF::ALLIPFPOOJF) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OOPDGIEJCHA(&mut self) -> &mut super::ALLIPFPOOJF::ALLIPFPOOJF {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(super::ALLIPFPOOJF::ALLIPFPOOJF::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OOPDGIEJCHA(&mut self) -> super::ALLIPFPOOJF::ALLIPFPOOJF {
        if self.has_OOPDGIEJCHA() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ALLIPFPOOJF::ALLIPFPOOJF::new()
        }
    }

    // .LCCKNJAJHPC MMEKEHMKEAK = 15;

    pub fn MMEKEHMKEAK(&self) -> &super::LCCKNJAJHPC::LCCKNJAJHPC {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(ref v)) => v,
            _ => <super::LCCKNJAJHPC::LCCKNJAJHPC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MMEKEHMKEAK(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_MMEKEHMKEAK(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MMEKEHMKEAK(&mut self, v: super::LCCKNJAJHPC::LCCKNJAJHPC) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MMEKEHMKEAK(&mut self) -> &mut super::LCCKNJAJHPC::LCCKNJAJHPC {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(super::LCCKNJAJHPC::LCCKNJAJHPC::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MMEKEHMKEAK(&mut self) -> super::LCCKNJAJHPC::LCCKNJAJHPC {
        if self.has_MMEKEHMKEAK() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCCKNJAJHPC::LCCKNJAJHPC::new()
        }
    }

    // .LCCKNJAJHPC CLECGGEIKGN = 3;

    pub fn CLECGGEIKGN(&self) -> &super::LCCKNJAJHPC::LCCKNJAJHPC {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(ref v)) => v,
            _ => <super::LCCKNJAJHPC::LCCKNJAJHPC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CLECGGEIKGN(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_CLECGGEIKGN(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CLECGGEIKGN(&mut self, v: super::LCCKNJAJHPC::LCCKNJAJHPC) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CLECGGEIKGN(&mut self) -> &mut super::LCCKNJAJHPC::LCCKNJAJHPC {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(super::LCCKNJAJHPC::LCCKNJAJHPC::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CLECGGEIKGN(&mut self) -> super::LCCKNJAJHPC::LCCKNJAJHPC {
        if self.has_CLECGGEIKGN() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCCKNJAJHPC::LCCKNJAJHPC::new()
        }
    }

    // .FKBKPNIOLDM JBLPDIEACAG = 4;

    pub fn JBLPDIEACAG(&self) -> &super::FKBKPNIOLDM::FKBKPNIOLDM {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(ref v)) => v,
            _ => <super::FKBKPNIOLDM::FKBKPNIOLDM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JBLPDIEACAG(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_JBLPDIEACAG(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JBLPDIEACAG(&mut self, v: super::FKBKPNIOLDM::FKBKPNIOLDM) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JBLPDIEACAG(&mut self) -> &mut super::FKBKPNIOLDM::FKBKPNIOLDM {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(super::FKBKPNIOLDM::FKBKPNIOLDM::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JBLPDIEACAG(&mut self) -> super::FKBKPNIOLDM::FKBKPNIOLDM {
        if self.has_JBLPDIEACAG() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FKBKPNIOLDM::FKBKPNIOLDM::new()
        }
    }

    // .FKBKPNIOLDM DJKJHDPELGI = 1;

    pub fn DJKJHDPELGI(&self) -> &super::FKBKPNIOLDM::FKBKPNIOLDM {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(ref v)) => v,
            _ => <super::FKBKPNIOLDM::FKBKPNIOLDM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DJKJHDPELGI(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_DJKJHDPELGI(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DJKJHDPELGI(&mut self, v: super::FKBKPNIOLDM::FKBKPNIOLDM) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DJKJHDPELGI(&mut self) -> &mut super::FKBKPNIOLDM::FKBKPNIOLDM {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(super::FKBKPNIOLDM::FKBKPNIOLDM::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DJKJHDPELGI(&mut self) -> super::FKBKPNIOLDM::FKBKPNIOLDM {
        if self.has_DJKJHDPELGI() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FKBKPNIOLDM::FKBKPNIOLDM::new()
        }
    }

    // .KDJPHDGEPNA ECDNIKDLEKH = 2;

    pub fn ECDNIKDLEKH(&self) -> &super::KDJPHDGEPNA::KDJPHDGEPNA {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(ref v)) => v,
            _ => <super::KDJPHDGEPNA::KDJPHDGEPNA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ECDNIKDLEKH(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_ECDNIKDLEKH(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ECDNIKDLEKH(&mut self, v: super::KDJPHDGEPNA::KDJPHDGEPNA) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ECDNIKDLEKH(&mut self) -> &mut super::KDJPHDGEPNA::KDJPHDGEPNA {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(super::KDJPHDGEPNA::KDJPHDGEPNA::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ECDNIKDLEKH(&mut self) -> super::KDJPHDGEPNA::KDJPHDGEPNA {
        if self.has_ECDNIKDLEKH() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KDJPHDGEPNA::KDJPHDGEPNA::new()
        }
    }

    // .NHEJLMNMFGD EDNELEOCCEB = 8;

    pub fn EDNELEOCCEB(&self) -> &super::NHEJLMNMFGD::NHEJLMNMFGD {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(ref v)) => v,
            _ => <super::NHEJLMNMFGD::NHEJLMNMFGD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EDNELEOCCEB(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_EDNELEOCCEB(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EDNELEOCCEB(&mut self, v: super::NHEJLMNMFGD::NHEJLMNMFGD) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EDNELEOCCEB(&mut self) -> &mut super::NHEJLMNMFGD::NHEJLMNMFGD {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(super::NHEJLMNMFGD::NHEJLMNMFGD::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EDNELEOCCEB(&mut self) -> super::NHEJLMNMFGD::NHEJLMNMFGD {
        if self.has_EDNELEOCCEB() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NHEJLMNMFGD::NHEJLMNMFGD::new()
        }
    }

    // .LCCKNJAJHPC IPFICMBOLPE = 9;

    pub fn IPFICMBOLPE(&self) -> &super::LCCKNJAJHPC::LCCKNJAJHPC {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(ref v)) => v,
            _ => <super::LCCKNJAJHPC::LCCKNJAJHPC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IPFICMBOLPE(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_IPFICMBOLPE(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IPFICMBOLPE(&mut self, v: super::LCCKNJAJHPC::LCCKNJAJHPC) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IPFICMBOLPE(&mut self) -> &mut super::LCCKNJAJHPC::LCCKNJAJHPC {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(super::LCCKNJAJHPC::LCCKNJAJHPC::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IPFICMBOLPE(&mut self) -> super::LCCKNJAJHPC::LCCKNJAJHPC {
        if self.has_IPFICMBOLPE() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCCKNJAJHPC::LCCKNJAJHPC::new()
        }
    }

    // .FKBKPNIOLDM MJEFBAJJLJB = 12;

    pub fn MJEFBAJJLJB(&self) -> &super::FKBKPNIOLDM::FKBKPNIOLDM {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(ref v)) => v,
            _ => <super::FKBKPNIOLDM::FKBKPNIOLDM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MJEFBAJJLJB(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_MJEFBAJJLJB(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MJEFBAJJLJB(&mut self, v: super::FKBKPNIOLDM::FKBKPNIOLDM) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MJEFBAJJLJB(&mut self) -> &mut super::FKBKPNIOLDM::FKBKPNIOLDM {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(super::FKBKPNIOLDM::FKBKPNIOLDM::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MJEFBAJJLJB(&mut self) -> super::FKBKPNIOLDM::FKBKPNIOLDM {
        if self.has_MJEFBAJJLJB() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FKBKPNIOLDM::FKBKPNIOLDM::new()
        }
    }

    // .OHBAAEGPJJC HEKOCCAHPIJ = 10;

    pub fn HEKOCCAHPIJ(&self) -> &super::OHBAAEGPJJC::OHBAAEGPJJC {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(ref v)) => v,
            _ => <super::OHBAAEGPJJC::OHBAAEGPJJC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HEKOCCAHPIJ(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
    }

    pub fn has_HEKOCCAHPIJ(&self) -> bool {
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HEKOCCAHPIJ(&mut self, v: super::OHBAAEGPJJC::OHBAAEGPJJC) {
        self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HEKOCCAHPIJ(&mut self) -> &mut super::OHBAAEGPJJC::OHBAAEGPJJC {
        if let ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(_)) = self.KIDLOFFIOFG {
        } else {
            self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(super::OHBAAEGPJJC::OHBAAEGPJJC::new()));
        }
        match self.KIDLOFFIOFG {
            ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HEKOCCAHPIJ(&mut self) -> super::OHBAAEGPJJC::OHBAAEGPJJC {
        if self.has_HEKOCCAHPIJ() {
            match self.KIDLOFFIOFG.take() {
                ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OHBAAEGPJJC::OHBAAEGPJJC::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KLIOLGAIKGL::KLIOLGAIKGL>(
            "MFJCLLPEIBD",
            LOMAPIKBDJF::has_MFJCLLPEIBD,
            LOMAPIKBDJF::MFJCLLPEIBD,
            LOMAPIKBDJF::mut_MFJCLLPEIBD,
            LOMAPIKBDJF::set_MFJCLLPEIBD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KLIOLGAIKGL::KLIOLGAIKGL>(
            "PBHMLEMDIJI",
            LOMAPIKBDJF::has_PBHMLEMDIJI,
            LOMAPIKBDJF::PBHMLEMDIJI,
            LOMAPIKBDJF::mut_PBHMLEMDIJI,
            LOMAPIKBDJF::set_PBHMLEMDIJI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ALLIPFPOOJF::ALLIPFPOOJF>(
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE",
            LOMAPIKBDJF::has_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE,
            LOMAPIKBDJF::MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE,
            LOMAPIKBDJF::mut_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE,
            LOMAPIKBDJF::set_MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ALLIPFPOOJF::ALLIPFPOOJF>(
            "OOPDGIEJCHA",
            LOMAPIKBDJF::has_OOPDGIEJCHA,
            LOMAPIKBDJF::OOPDGIEJCHA,
            LOMAPIKBDJF::mut_OOPDGIEJCHA,
            LOMAPIKBDJF::set_OOPDGIEJCHA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCCKNJAJHPC::LCCKNJAJHPC>(
            "MMEKEHMKEAK",
            LOMAPIKBDJF::has_MMEKEHMKEAK,
            LOMAPIKBDJF::MMEKEHMKEAK,
            LOMAPIKBDJF::mut_MMEKEHMKEAK,
            LOMAPIKBDJF::set_MMEKEHMKEAK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCCKNJAJHPC::LCCKNJAJHPC>(
            "CLECGGEIKGN",
            LOMAPIKBDJF::has_CLECGGEIKGN,
            LOMAPIKBDJF::CLECGGEIKGN,
            LOMAPIKBDJF::mut_CLECGGEIKGN,
            LOMAPIKBDJF::set_CLECGGEIKGN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FKBKPNIOLDM::FKBKPNIOLDM>(
            "JBLPDIEACAG",
            LOMAPIKBDJF::has_JBLPDIEACAG,
            LOMAPIKBDJF::JBLPDIEACAG,
            LOMAPIKBDJF::mut_JBLPDIEACAG,
            LOMAPIKBDJF::set_JBLPDIEACAG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FKBKPNIOLDM::FKBKPNIOLDM>(
            "DJKJHDPELGI",
            LOMAPIKBDJF::has_DJKJHDPELGI,
            LOMAPIKBDJF::DJKJHDPELGI,
            LOMAPIKBDJF::mut_DJKJHDPELGI,
            LOMAPIKBDJF::set_DJKJHDPELGI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KDJPHDGEPNA::KDJPHDGEPNA>(
            "ECDNIKDLEKH",
            LOMAPIKBDJF::has_ECDNIKDLEKH,
            LOMAPIKBDJF::ECDNIKDLEKH,
            LOMAPIKBDJF::mut_ECDNIKDLEKH,
            LOMAPIKBDJF::set_ECDNIKDLEKH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NHEJLMNMFGD::NHEJLMNMFGD>(
            "EDNELEOCCEB",
            LOMAPIKBDJF::has_EDNELEOCCEB,
            LOMAPIKBDJF::EDNELEOCCEB,
            LOMAPIKBDJF::mut_EDNELEOCCEB,
            LOMAPIKBDJF::set_EDNELEOCCEB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCCKNJAJHPC::LCCKNJAJHPC>(
            "IPFICMBOLPE",
            LOMAPIKBDJF::has_IPFICMBOLPE,
            LOMAPIKBDJF::IPFICMBOLPE,
            LOMAPIKBDJF::mut_IPFICMBOLPE,
            LOMAPIKBDJF::set_IPFICMBOLPE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FKBKPNIOLDM::FKBKPNIOLDM>(
            "MJEFBAJJLJB",
            LOMAPIKBDJF::has_MJEFBAJJLJB,
            LOMAPIKBDJF::MJEFBAJJLJB,
            LOMAPIKBDJF::mut_MJEFBAJJLJB,
            LOMAPIKBDJF::set_MJEFBAJJLJB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OHBAAEGPJJC::OHBAAEGPJJC>(
            "HEKOCCAHPIJ",
            LOMAPIKBDJF::has_HEKOCCAHPIJ,
            LOMAPIKBDJF::HEKOCCAHPIJ,
            LOMAPIKBDJF::mut_HEKOCCAHPIJ,
            LOMAPIKBDJF::set_HEKOCCAHPIJ,
        ));
        oneofs.push(lomapikbdjf::KIDLOFFIOFG::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LOMAPIKBDJF>(
            "LOMAPIKBDJF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LOMAPIKBDJF {
    const NAME: &'static str = "LOMAPIKBDJF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(is.read_message()?));
                },
                42 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(is.read_message()?));
                },
                50 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(is.read_message()?));
                },
                58 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(is.read_message()?));
                },
                122 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(is.read_message()?));
                },
                26 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(is.read_message()?));
                },
                34 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(is.read_message()?));
                },
                10 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(is.read_message()?));
                },
                18 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(is.read_message()?));
                },
                66 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(is.read_message()?));
                },
                74 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(is.read_message()?));
                },
                98 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(is.read_message()?));
                },
                82 => {
                    self.KIDLOFFIOFG = ::std::option::Option::Some(lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.KIDLOFFIOFG {
            match v {
                &lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.KIDLOFFIOFG {
            match v {
                &lomapikbdjf::KIDLOFFIOFG::MFJCLLPEIBD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::PBHMLEMDIJI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::OOPDGIEJCHA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::MMEKEHMKEAK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::CLECGGEIKGN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::JBLPDIEACAG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::DJKJHDPELGI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::ECDNIKDLEKH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::EDNELEOCCEB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::IPFICMBOLPE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::MJEFBAJJLJB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &lomapikbdjf::KIDLOFFIOFG::HEKOCCAHPIJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LOMAPIKBDJF {
        LOMAPIKBDJF::new()
    }

    fn clear(&mut self) {
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.KIDLOFFIOFG = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LOMAPIKBDJF {
        static instance: LOMAPIKBDJF = LOMAPIKBDJF {
            KIDLOFFIOFG: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LOMAPIKBDJF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LOMAPIKBDJF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LOMAPIKBDJF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LOMAPIKBDJF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LOMAPIKBDJF`
pub mod lomapikbdjf {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:LOMAPIKBDJF.KIDLOFFIOFG)
    pub enum KIDLOFFIOFG {
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.MFJCLLPEIBD)
        MFJCLLPEIBD(super::super::KLIOLGAIKGL::KLIOLGAIKGL),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.PBHMLEMDIJI)
        PBHMLEMDIJI(super::super::KLIOLGAIKGL::KLIOLGAIKGL),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE)
        MONOPOLYACTIONRESULTSOURCETYPEASSETUPGRADE(super::super::ALLIPFPOOJF::ALLIPFPOOJF),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.OOPDGIEJCHA)
        OOPDGIEJCHA(super::super::ALLIPFPOOJF::ALLIPFPOOJF),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.MMEKEHMKEAK)
        MMEKEHMKEAK(super::super::LCCKNJAJHPC::LCCKNJAJHPC),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.CLECGGEIKGN)
        CLECGGEIKGN(super::super::LCCKNJAJHPC::LCCKNJAJHPC),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.JBLPDIEACAG)
        JBLPDIEACAG(super::super::FKBKPNIOLDM::FKBKPNIOLDM),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.DJKJHDPELGI)
        DJKJHDPELGI(super::super::FKBKPNIOLDM::FKBKPNIOLDM),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.ECDNIKDLEKH)
        ECDNIKDLEKH(super::super::KDJPHDGEPNA::KDJPHDGEPNA),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.EDNELEOCCEB)
        EDNELEOCCEB(super::super::NHEJLMNMFGD::NHEJLMNMFGD),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.IPFICMBOLPE)
        IPFICMBOLPE(super::super::LCCKNJAJHPC::LCCKNJAJHPC),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.MJEFBAJJLJB)
        MJEFBAJJLJB(super::super::FKBKPNIOLDM::FKBKPNIOLDM),
        // @@protoc_insertion_point(oneof_field:LOMAPIKBDJF.HEKOCCAHPIJ)
        HEKOCCAHPIJ(super::super::OHBAAEGPJJC::OHBAAEGPJJC),
    }

    impl ::protobuf::Oneof for KIDLOFFIOFG {
    }

    impl ::protobuf::OneofFull for KIDLOFFIOFG {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::LOMAPIKBDJF as ::protobuf::MessageFull>::descriptor().oneof_by_name("KIDLOFFIOFG").unwrap()).clone()
        }
    }

    impl KIDLOFFIOFG {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KIDLOFFIOFG>("KIDLOFFIOFG")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LOMAPIKBDJF.proto\x1a\x11ALLIPFPOOJF.proto\x1a\x11FKBKPNIOLDM.prot\
    o\x1a\x11KDJPHDGEPNA.proto\x1a\x11KLIOLGAIKGL.proto\x1a\x11LCCKNJAJHPC.p\
    roto\x1a\x11NHEJLMNMFGD.proto\x1a\x11OHBAAEGPJJC.proto\"\xea\x05\n\x0bLO\
    MAPIKBDJF\x120\n\x0bMFJCLLPEIBD\x18\x0e\x20\x01(\x0b2\x0c.KLIOLGAIKGLH\0\
    R\x0bMFJCLLPEIBD\x120\n\x0bPBHMLEMDIJI\x18\x05\x20\x01(\x0b2\x0c.KLIOLGA\
    IKGLH\0R\x0bPBHMLEMDIJI\x12t\n0MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_\
    UPGRADE\x18\x06\x20\x01(\x0b2\x0c.ALLIPFPOOJFH\0R*MONOPOLYACTIONRESULTSO\
    URCETYPEASSETUPGRADE\x120\n\x0bOOPDGIEJCHA\x18\x07\x20\x01(\x0b2\x0c.ALL\
    IPFPOOJFH\0R\x0bOOPDGIEJCHA\x120\n\x0bMMEKEHMKEAK\x18\x0f\x20\x01(\x0b2\
    \x0c.LCCKNJAJHPCH\0R\x0bMMEKEHMKEAK\x120\n\x0bCLECGGEIKGN\x18\x03\x20\
    \x01(\x0b2\x0c.LCCKNJAJHPCH\0R\x0bCLECGGEIKGN\x120\n\x0bJBLPDIEACAG\x18\
    \x04\x20\x01(\x0b2\x0c.FKBKPNIOLDMH\0R\x0bJBLPDIEACAG\x120\n\x0bDJKJHDPE\
    LGI\x18\x01\x20\x01(\x0b2\x0c.FKBKPNIOLDMH\0R\x0bDJKJHDPELGI\x120\n\x0bE\
    CDNIKDLEKH\x18\x02\x20\x01(\x0b2\x0c.KDJPHDGEPNAH\0R\x0bECDNIKDLEKH\x120\
    \n\x0bEDNELEOCCEB\x18\x08\x20\x01(\x0b2\x0c.NHEJLMNMFGDH\0R\x0bEDNELEOCC\
    EB\x120\n\x0bIPFICMBOLPE\x18\t\x20\x01(\x0b2\x0c.LCCKNJAJHPCH\0R\x0bIPFI\
    CMBOLPE\x120\n\x0bMJEFBAJJLJB\x18\x0c\x20\x01(\x0b2\x0c.FKBKPNIOLDMH\0R\
    \x0bMJEFBAJJLJB\x120\n\x0bHEKOCCAHPIJ\x18\n\x20\x01(\x0b2\x0c.OHBAAEGPJJ\
    CH\0R\x0bHEKOCCAHPIJB\r\n\x0bKIDLOFFIOFGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::ALLIPFPOOJF::file_descriptor().clone());
            deps.push(super::FKBKPNIOLDM::file_descriptor().clone());
            deps.push(super::KDJPHDGEPNA::file_descriptor().clone());
            deps.push(super::KLIOLGAIKGL::file_descriptor().clone());
            deps.push(super::LCCKNJAJHPC::file_descriptor().clone());
            deps.push(super::NHEJLMNMFGD::file_descriptor().clone());
            deps.push(super::OHBAAEGPJJC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LOMAPIKBDJF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
