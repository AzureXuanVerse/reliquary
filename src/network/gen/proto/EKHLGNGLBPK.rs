// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EKHLGNGLBPK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EKHLGNGLBPK)
pub enum EKHLGNGLBPK {
    // @@protoc_insertion_point(enum_value:EKHLGNGLBPK.FUNC_UNLOCK_ID_NONE)
    FUNC_UNLOCK_ID_NONE = 0,
    // @@protoc_insertion_point(enum_value:EKHLGNGLBPK.FUNC_UNLOCK_ID_RELIC)
    FUNC_UNLOCK_ID_RELIC = 403,
    // @@protoc_insertion_point(enum_value:EKHLGNGLBPK.FUNC_UNLOCK_ID_RELIC_NUM)
    FUNC_UNLOCK_ID_RELIC_NUM = 404,
    // @@protoc_insertion_point(enum_value:EKHLGNGLBPK.FUNC_UNLOCK_ID_EQUIPMENT)
    FUNC_UNLOCK_ID_EQUIPMENT = 401,
    // @@protoc_insertion_point(enum_value:EKHLGNGLBPK.FUNC_UNLOCK_ID_SKILLTREE)
    FUNC_UNLOCK_ID_SKILLTREE = 402,
    // @@protoc_insertion_point(enum_value:EKHLGNGLBPK.FUNC_UNLOCK_ID_GACHA)
    FUNC_UNLOCK_ID_GACHA = 2300,
    // @@protoc_insertion_point(enum_value:EKHLGNGLBPK.FUNC_UNLOCK_ID_EXPEDITION)
    FUNC_UNLOCK_ID_EXPEDITION = 3100,
    // @@protoc_insertion_point(enum_value:EKHLGNGLBPK.FUNC_UNLOCK_ID_COMPOSE)
    FUNC_UNLOCK_ID_COMPOSE = 4100,
    // @@protoc_insertion_point(enum_value:EKHLGNGLBPK.FUNC_UNLOCK_ID_FIGHTACTIVITY)
    FUNC_UNLOCK_ID_FIGHTACTIVITY = 3700,
}

impl ::protobuf::Enum for EKHLGNGLBPK {
    const NAME: &'static str = "EKHLGNGLBPK";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EKHLGNGLBPK> {
        match value {
            0 => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_NONE),
            403 => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_RELIC),
            404 => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_RELIC_NUM),
            401 => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_EQUIPMENT),
            402 => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_SKILLTREE),
            2300 => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_GACHA),
            3100 => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_EXPEDITION),
            4100 => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_COMPOSE),
            3700 => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_FIGHTACTIVITY),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EKHLGNGLBPK> {
        match str {
            "FUNC_UNLOCK_ID_NONE" => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_NONE),
            "FUNC_UNLOCK_ID_RELIC" => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_RELIC),
            "FUNC_UNLOCK_ID_RELIC_NUM" => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_RELIC_NUM),
            "FUNC_UNLOCK_ID_EQUIPMENT" => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_EQUIPMENT),
            "FUNC_UNLOCK_ID_SKILLTREE" => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_SKILLTREE),
            "FUNC_UNLOCK_ID_GACHA" => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_GACHA),
            "FUNC_UNLOCK_ID_EXPEDITION" => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_EXPEDITION),
            "FUNC_UNLOCK_ID_COMPOSE" => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_COMPOSE),
            "FUNC_UNLOCK_ID_FIGHTACTIVITY" => ::std::option::Option::Some(EKHLGNGLBPK::FUNC_UNLOCK_ID_FIGHTACTIVITY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EKHLGNGLBPK] = &[
        EKHLGNGLBPK::FUNC_UNLOCK_ID_NONE,
        EKHLGNGLBPK::FUNC_UNLOCK_ID_RELIC,
        EKHLGNGLBPK::FUNC_UNLOCK_ID_RELIC_NUM,
        EKHLGNGLBPK::FUNC_UNLOCK_ID_EQUIPMENT,
        EKHLGNGLBPK::FUNC_UNLOCK_ID_SKILLTREE,
        EKHLGNGLBPK::FUNC_UNLOCK_ID_GACHA,
        EKHLGNGLBPK::FUNC_UNLOCK_ID_EXPEDITION,
        EKHLGNGLBPK::FUNC_UNLOCK_ID_COMPOSE,
        EKHLGNGLBPK::FUNC_UNLOCK_ID_FIGHTACTIVITY,
    ];
}

impl ::protobuf::EnumFull for EKHLGNGLBPK {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EKHLGNGLBPK").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EKHLGNGLBPK::FUNC_UNLOCK_ID_NONE => 0,
            EKHLGNGLBPK::FUNC_UNLOCK_ID_RELIC => 1,
            EKHLGNGLBPK::FUNC_UNLOCK_ID_RELIC_NUM => 2,
            EKHLGNGLBPK::FUNC_UNLOCK_ID_EQUIPMENT => 3,
            EKHLGNGLBPK::FUNC_UNLOCK_ID_SKILLTREE => 4,
            EKHLGNGLBPK::FUNC_UNLOCK_ID_GACHA => 5,
            EKHLGNGLBPK::FUNC_UNLOCK_ID_EXPEDITION => 6,
            EKHLGNGLBPK::FUNC_UNLOCK_ID_COMPOSE => 7,
            EKHLGNGLBPK::FUNC_UNLOCK_ID_FIGHTACTIVITY => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EKHLGNGLBPK {
    fn default() -> Self {
        EKHLGNGLBPK::FUNC_UNLOCK_ID_NONE
    }
}

impl EKHLGNGLBPK {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EKHLGNGLBPK>("EKHLGNGLBPK")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EKHLGNGLBPK.proto*\x99\x02\n\x0bEKHLGNGLBPK\x12\x17\n\x13FUNC_UNLO\
    CK_ID_NONE\x10\0\x12\x19\n\x14FUNC_UNLOCK_ID_RELIC\x10\x93\x03\x12\x1d\n\
    \x18FUNC_UNLOCK_ID_RELIC_NUM\x10\x94\x03\x12\x1d\n\x18FUNC_UNLOCK_ID_EQU\
    IPMENT\x10\x91\x03\x12\x1d\n\x18FUNC_UNLOCK_ID_SKILLTREE\x10\x92\x03\x12\
    \x19\n\x14FUNC_UNLOCK_ID_GACHA\x10\xfc\x11\x12\x1e\n\x19FUNC_UNLOCK_ID_E\
    XPEDITION\x10\x9c\x18\x12\x1b\n\x16FUNC_UNLOCK_ID_COMPOSE\x10\x84\x20\
    \x12!\n\x1cFUNC_UNLOCK_ID_FIGHTACTIVITY\x10\xf4\x1cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EKHLGNGLBPK::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
