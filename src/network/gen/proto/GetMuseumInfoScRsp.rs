// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetMuseumInfoScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GetMuseumInfoScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetMuseumInfoScRsp {
    // message fields
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.FBCHKLNGJFM)
    pub FBCHKLNGJFM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.EHMIPHNNFMK)
    pub EHMIPHNNFMK: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.FNMJJMBPCJF)
    pub FNMJJMBPCJF: u32,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.FIHPGEEHMMB)
    pub FIHPGEEHMMB: u32,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.DACHMECJPEI)
    pub DACHMECJPEI: ::protobuf::MessageField<super::IGPFNHKHMPK::IGPFNHKHMPK>,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.exp)
    pub exp: u32,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.OAPJALCOECF)
    pub OAPJALCOECF: ::protobuf::MessageField<super::NKMJCMMDHHJ::NKMJCMMDHHJ>,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.GCNMIIFKHGI)
    pub GCNMIIFKHGI: u32,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.BDMNAPIFCIM)
    pub BDMNAPIFCIM: u32,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.MOCHEECBDIJ)
    pub MOCHEECBDIJ: u32,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.level)
    pub level: u32,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.HNHCLCBJAIM)
    pub HNHCLCBJAIM: ::std::vec::Vec<super::BJDAAPOAPAI::BJDAAPOAPAI>,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:GetMuseumInfoScRsp.ECHIDIDECCG)
    pub ECHIDIDECCG: ::std::vec::Vec<super::JOOLADOGHGE::JOOLADOGHGE>,
    // special fields
    // @@protoc_insertion_point(special_field:GetMuseumInfoScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMuseumInfoScRsp {
    fn default() -> &'a GetMuseumInfoScRsp {
        <GetMuseumInfoScRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetMuseumInfoScRsp {
    pub fn new() -> GetMuseumInfoScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FBCHKLNGJFM",
            |m: &GetMuseumInfoScRsp| { &m.FBCHKLNGJFM },
            |m: &mut GetMuseumInfoScRsp| { &mut m.FBCHKLNGJFM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EHMIPHNNFMK",
            |m: &GetMuseumInfoScRsp| { &m.EHMIPHNNFMK },
            |m: &mut GetMuseumInfoScRsp| { &mut m.EHMIPHNNFMK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FNMJJMBPCJF",
            |m: &GetMuseumInfoScRsp| { &m.FNMJJMBPCJF },
            |m: &mut GetMuseumInfoScRsp| { &mut m.FNMJJMBPCJF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FIHPGEEHMMB",
            |m: &GetMuseumInfoScRsp| { &m.FIHPGEEHMMB },
            |m: &mut GetMuseumInfoScRsp| { &mut m.FIHPGEEHMMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IGPFNHKHMPK::IGPFNHKHMPK>(
            "DACHMECJPEI",
            |m: &GetMuseumInfoScRsp| { &m.DACHMECJPEI },
            |m: &mut GetMuseumInfoScRsp| { &mut m.DACHMECJPEI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exp",
            |m: &GetMuseumInfoScRsp| { &m.exp },
            |m: &mut GetMuseumInfoScRsp| { &mut m.exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NKMJCMMDHHJ::NKMJCMMDHHJ>(
            "OAPJALCOECF",
            |m: &GetMuseumInfoScRsp| { &m.OAPJALCOECF },
            |m: &mut GetMuseumInfoScRsp| { &mut m.OAPJALCOECF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GCNMIIFKHGI",
            |m: &GetMuseumInfoScRsp| { &m.GCNMIIFKHGI },
            |m: &mut GetMuseumInfoScRsp| { &mut m.GCNMIIFKHGI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BDMNAPIFCIM",
            |m: &GetMuseumInfoScRsp| { &m.BDMNAPIFCIM },
            |m: &mut GetMuseumInfoScRsp| { &mut m.BDMNAPIFCIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MOCHEECBDIJ",
            |m: &GetMuseumInfoScRsp| { &m.MOCHEECBDIJ },
            |m: &mut GetMuseumInfoScRsp| { &mut m.MOCHEECBDIJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &GetMuseumInfoScRsp| { &m.level },
            |m: &mut GetMuseumInfoScRsp| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HNHCLCBJAIM",
            |m: &GetMuseumInfoScRsp| { &m.HNHCLCBJAIM },
            |m: &mut GetMuseumInfoScRsp| { &mut m.HNHCLCBJAIM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetMuseumInfoScRsp| { &m.retcode },
            |m: &mut GetMuseumInfoScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ECHIDIDECCG",
            |m: &GetMuseumInfoScRsp| { &m.ECHIDIDECCG },
            |m: &mut GetMuseumInfoScRsp| { &mut m.ECHIDIDECCG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMuseumInfoScRsp>(
            "GetMuseumInfoScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMuseumInfoScRsp {
    const NAME: &'static str = "GetMuseumInfoScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.FBCHKLNGJFM)?;
                },
                32 => {
                    self.FBCHKLNGJFM.push(is.read_uint32()?);
                },
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.EHMIPHNNFMK)?;
                },
                8 => {
                    self.EHMIPHNNFMK.push(is.read_uint32()?);
                },
                88 => {
                    self.FNMJJMBPCJF = is.read_uint32()?;
                },
                96 => {
                    self.FIHPGEEHMMB = is.read_uint32()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DACHMECJPEI)?;
                },
                40 => {
                    self.exp = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OAPJALCOECF)?;
                },
                112 => {
                    self.GCNMIIFKHGI = is.read_uint32()?;
                },
                56 => {
                    self.BDMNAPIFCIM = is.read_uint32()?;
                },
                64 => {
                    self.MOCHEECBDIJ = is.read_uint32()?;
                },
                24 => {
                    self.level = is.read_uint32()?;
                },
                82 => {
                    self.HNHCLCBJAIM.push(is.read_message()?);
                },
                48 => {
                    self.retcode = is.read_uint32()?;
                },
                18 => {
                    self.ECHIDIDECCG.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.FBCHKLNGJFM {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        for value in &self.EHMIPHNNFMK {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if self.FNMJJMBPCJF != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.FNMJJMBPCJF);
        }
        if self.FIHPGEEHMMB != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.FIHPGEEHMMB);
        }
        if let Some(v) = self.DACHMECJPEI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.exp != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.exp);
        }
        if let Some(v) = self.OAPJALCOECF.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.GCNMIIFKHGI != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.GCNMIIFKHGI);
        }
        if self.BDMNAPIFCIM != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.BDMNAPIFCIM);
        }
        if self.MOCHEECBDIJ != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.MOCHEECBDIJ);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.level);
        }
        for value in &self.HNHCLCBJAIM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.retcode);
        }
        for value in &self.ECHIDIDECCG {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.FBCHKLNGJFM {
            os.write_uint32(4, *v)?;
        };
        for v in &self.EHMIPHNNFMK {
            os.write_uint32(1, *v)?;
        };
        if self.FNMJJMBPCJF != 0 {
            os.write_uint32(11, self.FNMJJMBPCJF)?;
        }
        if self.FIHPGEEHMMB != 0 {
            os.write_uint32(12, self.FIHPGEEHMMB)?;
        }
        if let Some(v) = self.DACHMECJPEI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if self.exp != 0 {
            os.write_uint32(5, self.exp)?;
        }
        if let Some(v) = self.OAPJALCOECF.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.GCNMIIFKHGI != 0 {
            os.write_uint32(14, self.GCNMIIFKHGI)?;
        }
        if self.BDMNAPIFCIM != 0 {
            os.write_uint32(7, self.BDMNAPIFCIM)?;
        }
        if self.MOCHEECBDIJ != 0 {
            os.write_uint32(8, self.MOCHEECBDIJ)?;
        }
        if self.level != 0 {
            os.write_uint32(3, self.level)?;
        }
        for v in &self.HNHCLCBJAIM {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(6, self.retcode)?;
        }
        for v in &self.ECHIDIDECCG {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMuseumInfoScRsp {
        GetMuseumInfoScRsp::new()
    }

    fn clear(&mut self) {
        self.FBCHKLNGJFM.clear();
        self.EHMIPHNNFMK.clear();
        self.FNMJJMBPCJF = 0;
        self.FIHPGEEHMMB = 0;
        self.DACHMECJPEI.clear();
        self.exp = 0;
        self.OAPJALCOECF.clear();
        self.GCNMIIFKHGI = 0;
        self.BDMNAPIFCIM = 0;
        self.MOCHEECBDIJ = 0;
        self.level = 0;
        self.HNHCLCBJAIM.clear();
        self.retcode = 0;
        self.ECHIDIDECCG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMuseumInfoScRsp {
        static instance: GetMuseumInfoScRsp = GetMuseumInfoScRsp {
            FBCHKLNGJFM: ::std::vec::Vec::new(),
            EHMIPHNNFMK: ::std::vec::Vec::new(),
            FNMJJMBPCJF: 0,
            FIHPGEEHMMB: 0,
            DACHMECJPEI: ::protobuf::MessageField::none(),
            exp: 0,
            OAPJALCOECF: ::protobuf::MessageField::none(),
            GCNMIIFKHGI: 0,
            BDMNAPIFCIM: 0,
            MOCHEECBDIJ: 0,
            level: 0,
            HNHCLCBJAIM: ::std::vec::Vec::new(),
            retcode: 0,
            ECHIDIDECCG: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMuseumInfoScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMuseumInfoScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMuseumInfoScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMuseumInfoScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18GetMuseumInfoScRsp.proto\x1a\x11BJDAAPOAPAI.proto\x1a\x11IGPFNHKHM\
    PK.proto\x1a\x11JOOLADOGHGE.proto\x1a\x11NKMJCMMDHHJ.proto\"\x84\x04\n\
    \x12GetMuseumInfoScRsp\x12\x20\n\x0bFBCHKLNGJFM\x18\x04\x20\x03(\rR\x0bF\
    BCHKLNGJFM\x12\x20\n\x0bEHMIPHNNFMK\x18\x01\x20\x03(\rR\x0bEHMIPHNNFMK\
    \x12\x20\n\x0bFNMJJMBPCJF\x18\x0b\x20\x01(\rR\x0bFNMJJMBPCJF\x12\x20\n\
    \x0bFIHPGEEHMMB\x18\x0c\x20\x01(\rR\x0bFIHPGEEHMMB\x12.\n\x0bDACHMECJPEI\
    \x18\x0f\x20\x01(\x0b2\x0c.IGPFNHKHMPKR\x0bDACHMECJPEI\x12\x10\n\x03exp\
    \x18\x05\x20\x01(\rR\x03exp\x12.\n\x0bOAPJALCOECF\x18\r\x20\x01(\x0b2\
    \x0c.NKMJCMMDHHJR\x0bOAPJALCOECF\x12\x20\n\x0bGCNMIIFKHGI\x18\x0e\x20\
    \x01(\rR\x0bGCNMIIFKHGI\x12\x20\n\x0bBDMNAPIFCIM\x18\x07\x20\x01(\rR\x0b\
    BDMNAPIFCIM\x12\x20\n\x0bMOCHEECBDIJ\x18\x08\x20\x01(\rR\x0bMOCHEECBDIJ\
    \x12\x14\n\x05level\x18\x03\x20\x01(\rR\x05level\x12.\n\x0bHNHCLCBJAIM\
    \x18\n\x20\x03(\x0b2\x0c.BJDAAPOAPAIR\x0bHNHCLCBJAIM\x12\x18\n\x07retcod\
    e\x18\x06\x20\x01(\rR\x07retcode\x12.\n\x0bECHIDIDECCG\x18\x02\x20\x03(\
    \x0b2\x0c.JOOLADOGHGER\x0bECHIDIDECCGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::BJDAAPOAPAI::file_descriptor().clone());
            deps.push(super::IGPFNHKHMPK::file_descriptor().clone());
            deps.push(super::JOOLADOGHGE::file_descriptor().clone());
            deps.push(super::NKMJCMMDHHJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetMuseumInfoScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
