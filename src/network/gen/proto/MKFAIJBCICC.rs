// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MKFAIJBCICC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MKFAIJBCICC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MKFAIJBCICC {
    // message fields
    // @@protoc_insertion_point(field:MKFAIJBCICC.GNLCJMJDKNC)
    pub GNLCJMJDKNC: bool,
    // @@protoc_insertion_point(field:MKFAIJBCICC.OLLFFPHGOLH)
    pub OLLFFPHGOLH: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:MKFAIJBCICC.APBHNOKGEHH)
    pub APBHNOKGEHH: u32,
    // @@protoc_insertion_point(field:MKFAIJBCICC.BPDBKNPHLDF)
    pub BPDBKNPHLDF: u32,
    // @@protoc_insertion_point(field:MKFAIJBCICC.LEMBCFHPIKC)
    pub LEMBCFHPIKC: u32,
    // @@protoc_insertion_point(field:MKFAIJBCICC.MGFOCDPEGKP)
    pub MGFOCDPEGKP: u32,
    // @@protoc_insertion_point(field:MKFAIJBCICC.PLJEMKLKMPG)
    pub PLJEMKLKMPG: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:MKFAIJBCICC.JKDEKDLFIHG)
    pub JKDEKDLFIHG: ::protobuf::MessageField<super::FBOPHBIEINK::FBOPHBIEINK>,
    // @@protoc_insertion_point(field:MKFAIJBCICC.IGBJOAKIOFL)
    pub IGBJOAKIOFL: u32,
    // @@protoc_insertion_point(field:MKFAIJBCICC.BNEBJJBOJDG)
    pub BNEBJJBOJDG: bool,
    // @@protoc_insertion_point(field:MKFAIJBCICC.NPENEDFJFNI)
    pub NPENEDFJFNI: ::protobuf::MessageField<super::EJHLGGLFNLO::EJHLGGLFNLO>,
    // @@protoc_insertion_point(field:MKFAIJBCICC.PNANNPJKKAJ)
    pub PNANNPJKKAJ: u32,
    // @@protoc_insertion_point(field:MKFAIJBCICC.PCBKIKLBJGM)
    pub PCBKIKLBJGM: ::protobuf::MessageField<super::HOCEFIKHHNI::HOCEFIKHHNI>,
    // @@protoc_insertion_point(field:MKFAIJBCICC.FILMAOEBILH)
    pub FILMAOEBILH: u32,
    // @@protoc_insertion_point(field:MKFAIJBCICC.ILOPGMAHFAE)
    pub ILOPGMAHFAE: ::protobuf::MessageField<super::FMNBMBOLPCO::FMNBMBOLPCO>,
    // @@protoc_insertion_point(field:MKFAIJBCICC.CLOOABBKDPL)
    pub CLOOABBKDPL: ::protobuf::MessageField<super::FMNBMBOLPCO::FMNBMBOLPCO>,
    // @@protoc_insertion_point(field:MKFAIJBCICC.DCGAGPDHOKB)
    pub DCGAGPDHOKB: ::protobuf::MessageField<super::ItemList::ItemList>,
    // special fields
    // @@protoc_insertion_point(special_field:MKFAIJBCICC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MKFAIJBCICC {
    fn default() -> &'a MKFAIJBCICC {
        <MKFAIJBCICC as ::protobuf::Message>::default_instance()
    }
}

impl MKFAIJBCICC {
    pub fn new() -> MKFAIJBCICC {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(17);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GNLCJMJDKNC",
            |m: &MKFAIJBCICC| { &m.GNLCJMJDKNC },
            |m: &mut MKFAIJBCICC| { &mut m.GNLCJMJDKNC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "OLLFFPHGOLH",
            |m: &MKFAIJBCICC| { &m.OLLFFPHGOLH },
            |m: &mut MKFAIJBCICC| { &mut m.OLLFFPHGOLH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "APBHNOKGEHH",
            |m: &MKFAIJBCICC| { &m.APBHNOKGEHH },
            |m: &mut MKFAIJBCICC| { &mut m.APBHNOKGEHH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BPDBKNPHLDF",
            |m: &MKFAIJBCICC| { &m.BPDBKNPHLDF },
            |m: &mut MKFAIJBCICC| { &mut m.BPDBKNPHLDF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LEMBCFHPIKC",
            |m: &MKFAIJBCICC| { &m.LEMBCFHPIKC },
            |m: &mut MKFAIJBCICC| { &mut m.LEMBCFHPIKC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MGFOCDPEGKP",
            |m: &MKFAIJBCICC| { &m.MGFOCDPEGKP },
            |m: &mut MKFAIJBCICC| { &mut m.MGFOCDPEGKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "PLJEMKLKMPG",
            |m: &MKFAIJBCICC| { &m.PLJEMKLKMPG },
            |m: &mut MKFAIJBCICC| { &mut m.PLJEMKLKMPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FBOPHBIEINK::FBOPHBIEINK>(
            "JKDEKDLFIHG",
            |m: &MKFAIJBCICC| { &m.JKDEKDLFIHG },
            |m: &mut MKFAIJBCICC| { &mut m.JKDEKDLFIHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IGBJOAKIOFL",
            |m: &MKFAIJBCICC| { &m.IGBJOAKIOFL },
            |m: &mut MKFAIJBCICC| { &mut m.IGBJOAKIOFL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BNEBJJBOJDG",
            |m: &MKFAIJBCICC| { &m.BNEBJJBOJDG },
            |m: &mut MKFAIJBCICC| { &mut m.BNEBJJBOJDG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EJHLGGLFNLO::EJHLGGLFNLO>(
            "NPENEDFJFNI",
            |m: &MKFAIJBCICC| { &m.NPENEDFJFNI },
            |m: &mut MKFAIJBCICC| { &mut m.NPENEDFJFNI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PNANNPJKKAJ",
            |m: &MKFAIJBCICC| { &m.PNANNPJKKAJ },
            |m: &mut MKFAIJBCICC| { &mut m.PNANNPJKKAJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HOCEFIKHHNI::HOCEFIKHHNI>(
            "PCBKIKLBJGM",
            |m: &MKFAIJBCICC| { &m.PCBKIKLBJGM },
            |m: &mut MKFAIJBCICC| { &mut m.PCBKIKLBJGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FILMAOEBILH",
            |m: &MKFAIJBCICC| { &m.FILMAOEBILH },
            |m: &mut MKFAIJBCICC| { &mut m.FILMAOEBILH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FMNBMBOLPCO::FMNBMBOLPCO>(
            "ILOPGMAHFAE",
            |m: &MKFAIJBCICC| { &m.ILOPGMAHFAE },
            |m: &mut MKFAIJBCICC| { &mut m.ILOPGMAHFAE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FMNBMBOLPCO::FMNBMBOLPCO>(
            "CLOOABBKDPL",
            |m: &MKFAIJBCICC| { &m.CLOOABBKDPL },
            |m: &mut MKFAIJBCICC| { &mut m.CLOOABBKDPL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "DCGAGPDHOKB",
            |m: &MKFAIJBCICC| { &m.DCGAGPDHOKB },
            |m: &mut MKFAIJBCICC| { &mut m.DCGAGPDHOKB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MKFAIJBCICC>(
            "MKFAIJBCICC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MKFAIJBCICC {
    const NAME: &'static str = "MKFAIJBCICC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                40 => {
                    self.GNLCJMJDKNC = is.read_bool()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OLLFFPHGOLH)?;
                },
                104 => {
                    self.APBHNOKGEHH = is.read_uint32()?;
                },
                24 => {
                    self.BPDBKNPHLDF = is.read_uint32()?;
                },
                8112 => {
                    self.LEMBCFHPIKC = is.read_uint32()?;
                },
                72 => {
                    self.MGFOCDPEGKP = is.read_uint32()?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PLJEMKLKMPG)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JKDEKDLFIHG)?;
                },
                1624 => {
                    self.IGBJOAKIOFL = is.read_uint32()?;
                },
                120 => {
                    self.BNEBJJBOJDG = is.read_bool()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.NPENEDFJFNI)?;
                },
                96 => {
                    self.PNANNPJKKAJ = is.read_uint32()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PCBKIKLBJGM)?;
                },
                64 => {
                    self.FILMAOEBILH = is.read_uint32()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ILOPGMAHFAE)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CLOOABBKDPL)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DCGAGPDHOKB)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.GNLCJMJDKNC != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.OLLFFPHGOLH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.APBHNOKGEHH != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.APBHNOKGEHH);
        }
        if self.BPDBKNPHLDF != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.BPDBKNPHLDF);
        }
        if self.LEMBCFHPIKC != 0 {
            my_size += ::protobuf::rt::uint32_size(1014, self.LEMBCFHPIKC);
        }
        if self.MGFOCDPEGKP != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.MGFOCDPEGKP);
        }
        if let Some(v) = self.PLJEMKLKMPG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JKDEKDLFIHG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.IGBJOAKIOFL != 0 {
            my_size += ::protobuf::rt::uint32_size(203, self.IGBJOAKIOFL);
        }
        if self.BNEBJJBOJDG != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.NPENEDFJFNI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.PNANNPJKKAJ != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.PNANNPJKKAJ);
        }
        if let Some(v) = self.PCBKIKLBJGM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.FILMAOEBILH != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.FILMAOEBILH);
        }
        if let Some(v) = self.ILOPGMAHFAE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CLOOABBKDPL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.DCGAGPDHOKB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.GNLCJMJDKNC != false {
            os.write_bool(5, self.GNLCJMJDKNC)?;
        }
        if let Some(v) = self.OLLFFPHGOLH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.APBHNOKGEHH != 0 {
            os.write_uint32(13, self.APBHNOKGEHH)?;
        }
        if self.BPDBKNPHLDF != 0 {
            os.write_uint32(3, self.BPDBKNPHLDF)?;
        }
        if self.LEMBCFHPIKC != 0 {
            os.write_uint32(1014, self.LEMBCFHPIKC)?;
        }
        if self.MGFOCDPEGKP != 0 {
            os.write_uint32(9, self.MGFOCDPEGKP)?;
        }
        if let Some(v) = self.PLJEMKLKMPG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.JKDEKDLFIHG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.IGBJOAKIOFL != 0 {
            os.write_uint32(203, self.IGBJOAKIOFL)?;
        }
        if self.BNEBJJBOJDG != false {
            os.write_bool(15, self.BNEBJJBOJDG)?;
        }
        if let Some(v) = self.NPENEDFJFNI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.PNANNPJKKAJ != 0 {
            os.write_uint32(12, self.PNANNPJKKAJ)?;
        }
        if let Some(v) = self.PCBKIKLBJGM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.FILMAOEBILH != 0 {
            os.write_uint32(8, self.FILMAOEBILH)?;
        }
        if let Some(v) = self.ILOPGMAHFAE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.CLOOABBKDPL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.DCGAGPDHOKB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MKFAIJBCICC {
        MKFAIJBCICC::new()
    }

    fn clear(&mut self) {
        self.GNLCJMJDKNC = false;
        self.OLLFFPHGOLH.clear();
        self.APBHNOKGEHH = 0;
        self.BPDBKNPHLDF = 0;
        self.LEMBCFHPIKC = 0;
        self.MGFOCDPEGKP = 0;
        self.PLJEMKLKMPG.clear();
        self.JKDEKDLFIHG.clear();
        self.IGBJOAKIOFL = 0;
        self.BNEBJJBOJDG = false;
        self.NPENEDFJFNI.clear();
        self.PNANNPJKKAJ = 0;
        self.PCBKIKLBJGM.clear();
        self.FILMAOEBILH = 0;
        self.ILOPGMAHFAE.clear();
        self.CLOOABBKDPL.clear();
        self.DCGAGPDHOKB.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MKFAIJBCICC {
        static instance: MKFAIJBCICC = MKFAIJBCICC {
            GNLCJMJDKNC: false,
            OLLFFPHGOLH: ::protobuf::MessageField::none(),
            APBHNOKGEHH: 0,
            BPDBKNPHLDF: 0,
            LEMBCFHPIKC: 0,
            MGFOCDPEGKP: 0,
            PLJEMKLKMPG: ::protobuf::MessageField::none(),
            JKDEKDLFIHG: ::protobuf::MessageField::none(),
            IGBJOAKIOFL: 0,
            BNEBJJBOJDG: false,
            NPENEDFJFNI: ::protobuf::MessageField::none(),
            PNANNPJKKAJ: 0,
            PCBKIKLBJGM: ::protobuf::MessageField::none(),
            FILMAOEBILH: 0,
            ILOPGMAHFAE: ::protobuf::MessageField::none(),
            CLOOABBKDPL: ::protobuf::MessageField::none(),
            DCGAGPDHOKB: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MKFAIJBCICC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MKFAIJBCICC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MKFAIJBCICC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MKFAIJBCICC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MKFAIJBCICC.proto\x1a\x11EJHLGGLFNLO.proto\x1a\x11FBOPHBIEINK.prot\
    o\x1a\x11FMNBMBOLPCO.proto\x1a\x11HOCEFIKHHNI.proto\x1a\x0eItemList.prot\
    o\"\xb8\x05\n\x0bMKFAIJBCICC\x12\x20\n\x0bGNLCJMJDKNC\x18\x05\x20\x01(\
    \x08R\x0bGNLCJMJDKNC\x12+\n\x0bOLLFFPHGOLH\x18\x02\x20\x01(\x0b2\t.ItemL\
    istR\x0bOLLFFPHGOLH\x12\x20\n\x0bAPBHNOKGEHH\x18\r\x20\x01(\rR\x0bAPBHNO\
    KGEHH\x12\x20\n\x0bBPDBKNPHLDF\x18\x03\x20\x01(\rR\x0bBPDBKNPHLDF\x12!\n\
    \x0bLEMBCFHPIKC\x18\xf6\x07\x20\x01(\rR\x0bLEMBCFHPIKC\x12\x20\n\x0bMGFO\
    CDPEGKP\x18\t\x20\x01(\rR\x0bMGFOCDPEGKP\x12+\n\x0bPLJEMKLKMPG\x18\x0e\
    \x20\x01(\x0b2\t.ItemListR\x0bPLJEMKLKMPG\x12.\n\x0bJKDEKDLFIHG\x18\x04\
    \x20\x01(\x0b2\x0c.FBOPHBIEINKR\x0bJKDEKDLFIHG\x12!\n\x0bIGBJOAKIOFL\x18\
    \xcb\x01\x20\x01(\rR\x0bIGBJOAKIOFL\x12\x20\n\x0bBNEBJJBOJDG\x18\x0f\x20\
    \x01(\x08R\x0bBNEBJJBOJDG\x12.\n\x0bNPENEDFJFNI\x18\x06\x20\x01(\x0b2\
    \x0c.EJHLGGLFNLOR\x0bNPENEDFJFNI\x12\x20\n\x0bPNANNPJKKAJ\x18\x0c\x20\
    \x01(\rR\x0bPNANNPJKKAJ\x12.\n\x0bPCBKIKLBJGM\x18\x0b\x20\x01(\x0b2\x0c.\
    HOCEFIKHHNIR\x0bPCBKIKLBJGM\x12\x20\n\x0bFILMAOEBILH\x18\x08\x20\x01(\rR\
    \x0bFILMAOEBILH\x12.\n\x0bILOPGMAHFAE\x18\x01\x20\x01(\x0b2\x0c.FMNBMBOL\
    PCOR\x0bILOPGMAHFAE\x12.\n\x0bCLOOABBKDPL\x18\n\x20\x01(\x0b2\x0c.FMNBMB\
    OLPCOR\x0bCLOOABBKDPL\x12+\n\x0bDCGAGPDHOKB\x18\x07\x20\x01(\x0b2\t.Item\
    ListR\x0bDCGAGPDHOKBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::EJHLGGLFNLO::file_descriptor().clone());
            deps.push(super::FBOPHBIEINK::file_descriptor().clone());
            deps.push(super::FMNBMBOLPCO::file_descriptor().clone());
            deps.push(super::HOCEFIKHHNI::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MKFAIJBCICC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
