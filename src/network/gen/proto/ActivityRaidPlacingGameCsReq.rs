// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ActivityRaidPlacingGameCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ActivityRaidPlacingGameCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ActivityRaidPlacingGameCsReq {
    // message fields
    // @@protoc_insertion_point(field:ActivityRaidPlacingGameCsReq.JLDHAKPMJNM)
    pub JLDHAKPMJNM: ::protobuf::MessageField<super::AlleyPlacingShip::AlleyPlacingShip>,
    // message oneof groups
    pub CEIDMEDNMMI: ::std::option::Option<activity_raid_placing_game_cs_req::CEIDMEDNMMI>,
    // special fields
    // @@protoc_insertion_point(special_field:ActivityRaidPlacingGameCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ActivityRaidPlacingGameCsReq {
    fn default() -> &'a ActivityRaidPlacingGameCsReq {
        <ActivityRaidPlacingGameCsReq as ::protobuf::Message>::default_instance()
    }
}

impl ActivityRaidPlacingGameCsReq {
    pub fn new() -> ActivityRaidPlacingGameCsReq {
        ::std::default::Default::default()
    }

    // uint32 BFBCBCADGOJ = 2;

    pub fn BFBCBCADGOJ(&self) -> u32 {
        match self.CEIDMEDNMMI {
            ::std::option::Option::Some(activity_raid_placing_game_cs_req::CEIDMEDNMMI::BFBCBCADGOJ(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_BFBCBCADGOJ(&mut self) {
        self.CEIDMEDNMMI = ::std::option::Option::None;
    }

    pub fn has_BFBCBCADGOJ(&self) -> bool {
        match self.CEIDMEDNMMI {
            ::std::option::Option::Some(activity_raid_placing_game_cs_req::CEIDMEDNMMI::BFBCBCADGOJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BFBCBCADGOJ(&mut self, v: u32) {
        self.CEIDMEDNMMI = ::std::option::Option::Some(activity_raid_placing_game_cs_req::CEIDMEDNMMI::BFBCBCADGOJ(v))
    }

    // uint32 MHJBFLBMGMH = 14;

    pub fn MHJBFLBMGMH(&self) -> u32 {
        match self.CEIDMEDNMMI {
            ::std::option::Option::Some(activity_raid_placing_game_cs_req::CEIDMEDNMMI::MHJBFLBMGMH(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_MHJBFLBMGMH(&mut self) {
        self.CEIDMEDNMMI = ::std::option::Option::None;
    }

    pub fn has_MHJBFLBMGMH(&self) -> bool {
        match self.CEIDMEDNMMI {
            ::std::option::Option::Some(activity_raid_placing_game_cs_req::CEIDMEDNMMI::MHJBFLBMGMH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MHJBFLBMGMH(&mut self, v: u32) {
        self.CEIDMEDNMMI = ::std::option::Option::Some(activity_raid_placing_game_cs_req::CEIDMEDNMMI::MHJBFLBMGMH(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AlleyPlacingShip::AlleyPlacingShip>(
            "JLDHAKPMJNM",
            |m: &ActivityRaidPlacingGameCsReq| { &m.JLDHAKPMJNM },
            |m: &mut ActivityRaidPlacingGameCsReq| { &mut m.JLDHAKPMJNM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "BFBCBCADGOJ",
            ActivityRaidPlacingGameCsReq::has_BFBCBCADGOJ,
            ActivityRaidPlacingGameCsReq::BFBCBCADGOJ,
            ActivityRaidPlacingGameCsReq::set_BFBCBCADGOJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "MHJBFLBMGMH",
            ActivityRaidPlacingGameCsReq::has_MHJBFLBMGMH,
            ActivityRaidPlacingGameCsReq::MHJBFLBMGMH,
            ActivityRaidPlacingGameCsReq::set_MHJBFLBMGMH,
        ));
        oneofs.push(activity_raid_placing_game_cs_req::CEIDMEDNMMI::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ActivityRaidPlacingGameCsReq>(
            "ActivityRaidPlacingGameCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ActivityRaidPlacingGameCsReq {
    const NAME: &'static str = "ActivityRaidPlacingGameCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JLDHAKPMJNM)?;
                },
                16 => {
                    self.CEIDMEDNMMI = ::std::option::Option::Some(activity_raid_placing_game_cs_req::CEIDMEDNMMI::BFBCBCADGOJ(is.read_uint32()?));
                },
                112 => {
                    self.CEIDMEDNMMI = ::std::option::Option::Some(activity_raid_placing_game_cs_req::CEIDMEDNMMI::MHJBFLBMGMH(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.JLDHAKPMJNM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.CEIDMEDNMMI {
            match v {
                &activity_raid_placing_game_cs_req::CEIDMEDNMMI::BFBCBCADGOJ(v) => {
                    my_size += ::protobuf::rt::uint32_size(2, v);
                },
                &activity_raid_placing_game_cs_req::CEIDMEDNMMI::MHJBFLBMGMH(v) => {
                    my_size += ::protobuf::rt::uint32_size(14, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.JLDHAKPMJNM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.CEIDMEDNMMI {
            match v {
                &activity_raid_placing_game_cs_req::CEIDMEDNMMI::BFBCBCADGOJ(v) => {
                    os.write_uint32(2, v)?;
                },
                &activity_raid_placing_game_cs_req::CEIDMEDNMMI::MHJBFLBMGMH(v) => {
                    os.write_uint32(14, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ActivityRaidPlacingGameCsReq {
        ActivityRaidPlacingGameCsReq::new()
    }

    fn clear(&mut self) {
        self.JLDHAKPMJNM.clear();
        self.CEIDMEDNMMI = ::std::option::Option::None;
        self.CEIDMEDNMMI = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ActivityRaidPlacingGameCsReq {
        static instance: ActivityRaidPlacingGameCsReq = ActivityRaidPlacingGameCsReq {
            JLDHAKPMJNM: ::protobuf::MessageField::none(),
            CEIDMEDNMMI: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ActivityRaidPlacingGameCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ActivityRaidPlacingGameCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ActivityRaidPlacingGameCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivityRaidPlacingGameCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ActivityRaidPlacingGameCsReq`
pub mod activity_raid_placing_game_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ActivityRaidPlacingGameCsReq.CEIDMEDNMMI)
    pub enum CEIDMEDNMMI {
        // @@protoc_insertion_point(oneof_field:ActivityRaidPlacingGameCsReq.BFBCBCADGOJ)
        BFBCBCADGOJ(u32),
        // @@protoc_insertion_point(oneof_field:ActivityRaidPlacingGameCsReq.MHJBFLBMGMH)
        MHJBFLBMGMH(u32),
    }

    impl ::protobuf::Oneof for CEIDMEDNMMI {
    }

    impl ::protobuf::OneofFull for CEIDMEDNMMI {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ActivityRaidPlacingGameCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("CEIDMEDNMMI").unwrap()).clone()
        }
    }

    impl CEIDMEDNMMI {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<CEIDMEDNMMI>("CEIDMEDNMMI")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"ActivityRaidPlacingGameCsReq.proto\x1a\x16AlleyPlacingShip.proto\"\
    \xaa\x01\n\x1cActivityRaidPlacingGameCsReq\x123\n\x0bJLDHAKPMJNM\x18\n\
    \x20\x01(\x0b2\x11.AlleyPlacingShipR\x0bJLDHAKPMJNM\x12\"\n\x0bBFBCBCADG\
    OJ\x18\x02\x20\x01(\rH\0R\x0bBFBCBCADGOJ\x12\"\n\x0bMHJBFLBMGMH\x18\x0e\
    \x20\x01(\rH\0R\x0bMHJBFLBMGMHB\r\n\x0bCEIDMEDNMMIb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::AlleyPlacingShip::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ActivityRaidPlacingGameCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
