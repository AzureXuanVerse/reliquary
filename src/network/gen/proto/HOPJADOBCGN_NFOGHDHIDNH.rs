// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HOPJADOBCGN_NFOGHDHIDNH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HOPJADOBCGN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HOPJADOBCGN {
    // message fields
    // @@protoc_insertion_point(field:HOPJADOBCGN.NGIBEDMLDNP)
    pub NGIBEDMLDNP: u32,
    // @@protoc_insertion_point(field:HOPJADOBCGN.KFLPLHMOAOC)
    pub KFLPLHMOAOC: ::std::vec::Vec<NFOGHDHIDNH>,
    // special fields
    // @@protoc_insertion_point(special_field:HOPJADOBCGN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HOPJADOBCGN {
    fn default() -> &'a HOPJADOBCGN {
        <HOPJADOBCGN as ::protobuf::Message>::default_instance()
    }
}

impl HOPJADOBCGN {
    pub fn new() -> HOPJADOBCGN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NGIBEDMLDNP",
            |m: &HOPJADOBCGN| { &m.NGIBEDMLDNP },
            |m: &mut HOPJADOBCGN| { &mut m.NGIBEDMLDNP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KFLPLHMOAOC",
            |m: &HOPJADOBCGN| { &m.KFLPLHMOAOC },
            |m: &mut HOPJADOBCGN| { &mut m.KFLPLHMOAOC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HOPJADOBCGN>(
            "HOPJADOBCGN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HOPJADOBCGN {
    const NAME: &'static str = "HOPJADOBCGN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.NGIBEDMLDNP = is.read_uint32()?;
                },
                98 => {
                    self.KFLPLHMOAOC.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.NGIBEDMLDNP != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.NGIBEDMLDNP);
        }
        for value in &self.KFLPLHMOAOC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.NGIBEDMLDNP != 0 {
            os.write_uint32(11, self.NGIBEDMLDNP)?;
        }
        for v in &self.KFLPLHMOAOC {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HOPJADOBCGN {
        HOPJADOBCGN::new()
    }

    fn clear(&mut self) {
        self.NGIBEDMLDNP = 0;
        self.KFLPLHMOAOC.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HOPJADOBCGN {
        static instance: HOPJADOBCGN = HOPJADOBCGN {
            NGIBEDMLDNP: 0,
            KFLPLHMOAOC: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HOPJADOBCGN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HOPJADOBCGN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HOPJADOBCGN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HOPJADOBCGN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:NFOGHDHIDNH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NFOGHDHIDNH {
    // message fields
    // @@protoc_insertion_point(field:NFOGHDHIDNH.GAJNFOGLJGE)
    pub GAJNFOGLJGE: u32,
    // message oneof groups
    pub EIKIHGMHFIO: ::std::option::Option<nfoghdhidnh::EIKIHGMHFIO>,
    // special fields
    // @@protoc_insertion_point(special_field:NFOGHDHIDNH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NFOGHDHIDNH {
    fn default() -> &'a NFOGHDHIDNH {
        <NFOGHDHIDNH as ::protobuf::Message>::default_instance()
    }
}

impl NFOGHDHIDNH {
    pub fn new() -> NFOGHDHIDNH {
        ::std::default::Default::default()
    }

    // .HDGPKBGIHNB JIDENEADELO = 2;

    pub fn JIDENEADELO(&self) -> &super::HDGPKBGIHNB::HDGPKBGIHNB {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(ref v)) => v,
            _ => <super::HDGPKBGIHNB::HDGPKBGIHNB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JIDENEADELO(&mut self) {
        self.EIKIHGMHFIO = ::std::option::Option::None;
    }

    pub fn has_JIDENEADELO(&self) -> bool {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JIDENEADELO(&mut self, v: super::HDGPKBGIHNB::HDGPKBGIHNB) {
        self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JIDENEADELO(&mut self) -> &mut super::HDGPKBGIHNB::HDGPKBGIHNB {
        if let ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(_)) = self.EIKIHGMHFIO {
        } else {
            self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(super::HDGPKBGIHNB::HDGPKBGIHNB::new()));
        }
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JIDENEADELO(&mut self) -> super::HDGPKBGIHNB::HDGPKBGIHNB {
        if self.has_JIDENEADELO() {
            match self.EIKIHGMHFIO.take() {
                ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HDGPKBGIHNB::HDGPKBGIHNB::new()
        }
    }

    // .PMOJPENPNOL KAJIKKHPBBA = 6;

    pub fn KAJIKKHPBBA(&self) -> &super::PMOJPENPNOL::PMOJPENPNOL {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(ref v)) => v,
            _ => <super::PMOJPENPNOL::PMOJPENPNOL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KAJIKKHPBBA(&mut self) {
        self.EIKIHGMHFIO = ::std::option::Option::None;
    }

    pub fn has_KAJIKKHPBBA(&self) -> bool {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KAJIKKHPBBA(&mut self, v: super::PMOJPENPNOL::PMOJPENPNOL) {
        self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KAJIKKHPBBA(&mut self) -> &mut super::PMOJPENPNOL::PMOJPENPNOL {
        if let ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(_)) = self.EIKIHGMHFIO {
        } else {
            self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(super::PMOJPENPNOL::PMOJPENPNOL::new()));
        }
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KAJIKKHPBBA(&mut self) -> super::PMOJPENPNOL::PMOJPENPNOL {
        if self.has_KAJIKKHPBBA() {
            match self.EIKIHGMHFIO.take() {
                ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PMOJPENPNOL::PMOJPENPNOL::new()
        }
    }

    // .NIPFDPOBDBP GKFDGDNNEEO = 3;

    pub fn GKFDGDNNEEO(&self) -> &super::NIPFDPOBDBP::NIPFDPOBDBP {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(ref v)) => v,
            _ => <super::NIPFDPOBDBP::NIPFDPOBDBP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GKFDGDNNEEO(&mut self) {
        self.EIKIHGMHFIO = ::std::option::Option::None;
    }

    pub fn has_GKFDGDNNEEO(&self) -> bool {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GKFDGDNNEEO(&mut self, v: super::NIPFDPOBDBP::NIPFDPOBDBP) {
        self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GKFDGDNNEEO(&mut self) -> &mut super::NIPFDPOBDBP::NIPFDPOBDBP {
        if let ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(_)) = self.EIKIHGMHFIO {
        } else {
            self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(super::NIPFDPOBDBP::NIPFDPOBDBP::new()));
        }
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GKFDGDNNEEO(&mut self) -> super::NIPFDPOBDBP::NIPFDPOBDBP {
        if self.has_GKFDGDNNEEO() {
            match self.EIKIHGMHFIO.take() {
                ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NIPFDPOBDBP::NIPFDPOBDBP::new()
        }
    }

    // .FFJPONDPNAL NKJPMLMNOKA = 11;

    pub fn NKJPMLMNOKA(&self) -> &super::FFJPONDPNAL::FFJPONDPNAL {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(ref v)) => v,
            _ => <super::FFJPONDPNAL::FFJPONDPNAL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NKJPMLMNOKA(&mut self) {
        self.EIKIHGMHFIO = ::std::option::Option::None;
    }

    pub fn has_NKJPMLMNOKA(&self) -> bool {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NKJPMLMNOKA(&mut self, v: super::FFJPONDPNAL::FFJPONDPNAL) {
        self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NKJPMLMNOKA(&mut self) -> &mut super::FFJPONDPNAL::FFJPONDPNAL {
        if let ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(_)) = self.EIKIHGMHFIO {
        } else {
            self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(super::FFJPONDPNAL::FFJPONDPNAL::new()));
        }
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NKJPMLMNOKA(&mut self) -> super::FFJPONDPNAL::FFJPONDPNAL {
        if self.has_NKJPMLMNOKA() {
            match self.EIKIHGMHFIO.take() {
                ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FFJPONDPNAL::FFJPONDPNAL::new()
        }
    }

    // .PKGEFMGJONL DMMJHDEOGNE = 12;

    pub fn DMMJHDEOGNE(&self) -> &super::PKGEFMGJONL::PKGEFMGJONL {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(ref v)) => v,
            _ => <super::PKGEFMGJONL::PKGEFMGJONL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DMMJHDEOGNE(&mut self) {
        self.EIKIHGMHFIO = ::std::option::Option::None;
    }

    pub fn has_DMMJHDEOGNE(&self) -> bool {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DMMJHDEOGNE(&mut self, v: super::PKGEFMGJONL::PKGEFMGJONL) {
        self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DMMJHDEOGNE(&mut self) -> &mut super::PKGEFMGJONL::PKGEFMGJONL {
        if let ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(_)) = self.EIKIHGMHFIO {
        } else {
            self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(super::PKGEFMGJONL::PKGEFMGJONL::new()));
        }
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DMMJHDEOGNE(&mut self) -> super::PKGEFMGJONL::PKGEFMGJONL {
        if self.has_DMMJHDEOGNE() {
            match self.EIKIHGMHFIO.take() {
                ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PKGEFMGJONL::PKGEFMGJONL::new()
        }
    }

    // .MNEMPJMPPJE BEDINILDMEB = 7;

    pub fn BEDINILDMEB(&self) -> &super::MNEMPJMPPJE::MNEMPJMPPJE {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(ref v)) => v,
            _ => <super::MNEMPJMPPJE::MNEMPJMPPJE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BEDINILDMEB(&mut self) {
        self.EIKIHGMHFIO = ::std::option::Option::None;
    }

    pub fn has_BEDINILDMEB(&self) -> bool {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BEDINILDMEB(&mut self, v: super::MNEMPJMPPJE::MNEMPJMPPJE) {
        self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BEDINILDMEB(&mut self) -> &mut super::MNEMPJMPPJE::MNEMPJMPPJE {
        if let ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(_)) = self.EIKIHGMHFIO {
        } else {
            self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(super::MNEMPJMPPJE::MNEMPJMPPJE::new()));
        }
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BEDINILDMEB(&mut self) -> super::MNEMPJMPPJE::MNEMPJMPPJE {
        if self.has_BEDINILDMEB() {
            match self.EIKIHGMHFIO.take() {
                ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MNEMPJMPPJE::MNEMPJMPPJE::new()
        }
    }

    // .BHJINGMAIEB PUNK_LORD_SHARE_TYPE_FRIEND = 13;

    pub fn PUNK_LORD_SHARE_TYPE_FRIEND(&self) -> &super::BHJINGMAIEB::BHJINGMAIEB {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(ref v)) => v,
            _ => <super::BHJINGMAIEB::BHJINGMAIEB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PUNK_LORD_SHARE_TYPE_FRIEND(&mut self) {
        self.EIKIHGMHFIO = ::std::option::Option::None;
    }

    pub fn has_PUNK_LORD_SHARE_TYPE_FRIEND(&self) -> bool {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PUNK_LORD_SHARE_TYPE_FRIEND(&mut self, v: super::BHJINGMAIEB::BHJINGMAIEB) {
        self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PUNK_LORD_SHARE_TYPE_FRIEND(&mut self) -> &mut super::BHJINGMAIEB::BHJINGMAIEB {
        if let ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(_)) = self.EIKIHGMHFIO {
        } else {
            self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(super::BHJINGMAIEB::BHJINGMAIEB::new()));
        }
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PUNK_LORD_SHARE_TYPE_FRIEND(&mut self) -> super::BHJINGMAIEB::BHJINGMAIEB {
        if self.has_PUNK_LORD_SHARE_TYPE_FRIEND() {
            match self.EIKIHGMHFIO.take() {
                ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BHJINGMAIEB::BHJINGMAIEB::new()
        }
    }

    // .HEKPBHDOPNP IEFNCDEECOF = 14;

    pub fn IEFNCDEECOF(&self) -> &super::HEKPBHDOPNP::HEKPBHDOPNP {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(ref v)) => v,
            _ => <super::HEKPBHDOPNP::HEKPBHDOPNP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IEFNCDEECOF(&mut self) {
        self.EIKIHGMHFIO = ::std::option::Option::None;
    }

    pub fn has_IEFNCDEECOF(&self) -> bool {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IEFNCDEECOF(&mut self, v: super::HEKPBHDOPNP::HEKPBHDOPNP) {
        self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IEFNCDEECOF(&mut self) -> &mut super::HEKPBHDOPNP::HEKPBHDOPNP {
        if let ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(_)) = self.EIKIHGMHFIO {
        } else {
            self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(super::HEKPBHDOPNP::HEKPBHDOPNP::new()));
        }
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IEFNCDEECOF(&mut self) -> super::HEKPBHDOPNP::HEKPBHDOPNP {
        if self.has_IEFNCDEECOF() {
            match self.EIKIHGMHFIO.take() {
                ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HEKPBHDOPNP::HEKPBHDOPNP::new()
        }
    }

    // .HOPJADOBCGN NLHNFNLDGGD = 5;

    pub fn NLHNFNLDGGD(&self) -> &HOPJADOBCGN {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(ref v)) => v,
            _ => <HOPJADOBCGN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NLHNFNLDGGD(&mut self) {
        self.EIKIHGMHFIO = ::std::option::Option::None;
    }

    pub fn has_NLHNFNLDGGD(&self) -> bool {
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NLHNFNLDGGD(&mut self, v: HOPJADOBCGN) {
        self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NLHNFNLDGGD(&mut self) -> &mut HOPJADOBCGN {
        if let ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(_)) = self.EIKIHGMHFIO {
        } else {
            self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(HOPJADOBCGN::new()));
        }
        match self.EIKIHGMHFIO {
            ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NLHNFNLDGGD(&mut self) -> HOPJADOBCGN {
        if self.has_NLHNFNLDGGD() {
            match self.EIKIHGMHFIO.take() {
                ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(v)) => v,
                _ => panic!(),
            }
        } else {
            HOPJADOBCGN::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GAJNFOGLJGE",
            |m: &NFOGHDHIDNH| { &m.GAJNFOGLJGE },
            |m: &mut NFOGHDHIDNH| { &mut m.GAJNFOGLJGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HDGPKBGIHNB::HDGPKBGIHNB>(
            "JIDENEADELO",
            NFOGHDHIDNH::has_JIDENEADELO,
            NFOGHDHIDNH::JIDENEADELO,
            NFOGHDHIDNH::mut_JIDENEADELO,
            NFOGHDHIDNH::set_JIDENEADELO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PMOJPENPNOL::PMOJPENPNOL>(
            "KAJIKKHPBBA",
            NFOGHDHIDNH::has_KAJIKKHPBBA,
            NFOGHDHIDNH::KAJIKKHPBBA,
            NFOGHDHIDNH::mut_KAJIKKHPBBA,
            NFOGHDHIDNH::set_KAJIKKHPBBA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NIPFDPOBDBP::NIPFDPOBDBP>(
            "GKFDGDNNEEO",
            NFOGHDHIDNH::has_GKFDGDNNEEO,
            NFOGHDHIDNH::GKFDGDNNEEO,
            NFOGHDHIDNH::mut_GKFDGDNNEEO,
            NFOGHDHIDNH::set_GKFDGDNNEEO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FFJPONDPNAL::FFJPONDPNAL>(
            "NKJPMLMNOKA",
            NFOGHDHIDNH::has_NKJPMLMNOKA,
            NFOGHDHIDNH::NKJPMLMNOKA,
            NFOGHDHIDNH::mut_NKJPMLMNOKA,
            NFOGHDHIDNH::set_NKJPMLMNOKA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PKGEFMGJONL::PKGEFMGJONL>(
            "DMMJHDEOGNE",
            NFOGHDHIDNH::has_DMMJHDEOGNE,
            NFOGHDHIDNH::DMMJHDEOGNE,
            NFOGHDHIDNH::mut_DMMJHDEOGNE,
            NFOGHDHIDNH::set_DMMJHDEOGNE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MNEMPJMPPJE::MNEMPJMPPJE>(
            "BEDINILDMEB",
            NFOGHDHIDNH::has_BEDINILDMEB,
            NFOGHDHIDNH::BEDINILDMEB,
            NFOGHDHIDNH::mut_BEDINILDMEB,
            NFOGHDHIDNH::set_BEDINILDMEB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BHJINGMAIEB::BHJINGMAIEB>(
            "PUNK_LORD_SHARE_TYPE_FRIEND",
            NFOGHDHIDNH::has_PUNK_LORD_SHARE_TYPE_FRIEND,
            NFOGHDHIDNH::PUNK_LORD_SHARE_TYPE_FRIEND,
            NFOGHDHIDNH::mut_PUNK_LORD_SHARE_TYPE_FRIEND,
            NFOGHDHIDNH::set_PUNK_LORD_SHARE_TYPE_FRIEND,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HEKPBHDOPNP::HEKPBHDOPNP>(
            "IEFNCDEECOF",
            NFOGHDHIDNH::has_IEFNCDEECOF,
            NFOGHDHIDNH::IEFNCDEECOF,
            NFOGHDHIDNH::mut_IEFNCDEECOF,
            NFOGHDHIDNH::set_IEFNCDEECOF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, HOPJADOBCGN>(
            "NLHNFNLDGGD",
            NFOGHDHIDNH::has_NLHNFNLDGGD,
            NFOGHDHIDNH::NLHNFNLDGGD,
            NFOGHDHIDNH::mut_NLHNFNLDGGD,
            NFOGHDHIDNH::set_NLHNFNLDGGD,
        ));
        oneofs.push(nfoghdhidnh::EIKIHGMHFIO::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NFOGHDHIDNH>(
            "NFOGHDHIDNH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NFOGHDHIDNH {
    const NAME: &'static str = "NFOGHDHIDNH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                80 => {
                    self.GAJNFOGLJGE = is.read_uint32()?;
                },
                18 => {
                    self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(is.read_message()?));
                },
                50 => {
                    self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(is.read_message()?));
                },
                26 => {
                    self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(is.read_message()?));
                },
                90 => {
                    self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(is.read_message()?));
                },
                98 => {
                    self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(is.read_message()?));
                },
                58 => {
                    self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(is.read_message()?));
                },
                106 => {
                    self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(is.read_message()?));
                },
                114 => {
                    self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(is.read_message()?));
                },
                42 => {
                    self.EIKIHGMHFIO = ::std::option::Option::Some(nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.GAJNFOGLJGE != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.GAJNFOGLJGE);
        }
        if let ::std::option::Option::Some(ref v) = self.EIKIHGMHFIO {
            match v {
                &nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.GAJNFOGLJGE != 0 {
            os.write_uint32(10, self.GAJNFOGLJGE)?;
        }
        if let ::std::option::Option::Some(ref v) = self.EIKIHGMHFIO {
            match v {
                &nfoghdhidnh::EIKIHGMHFIO::JIDENEADELO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &nfoghdhidnh::EIKIHGMHFIO::KAJIKKHPBBA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &nfoghdhidnh::EIKIHGMHFIO::GKFDGDNNEEO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &nfoghdhidnh::EIKIHGMHFIO::NKJPMLMNOKA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &nfoghdhidnh::EIKIHGMHFIO::DMMJHDEOGNE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &nfoghdhidnh::EIKIHGMHFIO::BEDINILDMEB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &nfoghdhidnh::EIKIHGMHFIO::PUNKLORDSHARETYPEFRIEND(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &nfoghdhidnh::EIKIHGMHFIO::IEFNCDEECOF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &nfoghdhidnh::EIKIHGMHFIO::NLHNFNLDGGD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NFOGHDHIDNH {
        NFOGHDHIDNH::new()
    }

    fn clear(&mut self) {
        self.GAJNFOGLJGE = 0;
        self.EIKIHGMHFIO = ::std::option::Option::None;
        self.EIKIHGMHFIO = ::std::option::Option::None;
        self.EIKIHGMHFIO = ::std::option::Option::None;
        self.EIKIHGMHFIO = ::std::option::Option::None;
        self.EIKIHGMHFIO = ::std::option::Option::None;
        self.EIKIHGMHFIO = ::std::option::Option::None;
        self.EIKIHGMHFIO = ::std::option::Option::None;
        self.EIKIHGMHFIO = ::std::option::Option::None;
        self.EIKIHGMHFIO = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NFOGHDHIDNH {
        static instance: NFOGHDHIDNH = NFOGHDHIDNH {
            GAJNFOGLJGE: 0,
            EIKIHGMHFIO: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NFOGHDHIDNH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NFOGHDHIDNH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NFOGHDHIDNH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NFOGHDHIDNH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `NFOGHDHIDNH`
pub mod nfoghdhidnh {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:NFOGHDHIDNH.EIKIHGMHFIO)
    pub enum EIKIHGMHFIO {
        // @@protoc_insertion_point(oneof_field:NFOGHDHIDNH.JIDENEADELO)
        JIDENEADELO(super::super::HDGPKBGIHNB::HDGPKBGIHNB),
        // @@protoc_insertion_point(oneof_field:NFOGHDHIDNH.KAJIKKHPBBA)
        KAJIKKHPBBA(super::super::PMOJPENPNOL::PMOJPENPNOL),
        // @@protoc_insertion_point(oneof_field:NFOGHDHIDNH.GKFDGDNNEEO)
        GKFDGDNNEEO(super::super::NIPFDPOBDBP::NIPFDPOBDBP),
        // @@protoc_insertion_point(oneof_field:NFOGHDHIDNH.NKJPMLMNOKA)
        NKJPMLMNOKA(super::super::FFJPONDPNAL::FFJPONDPNAL),
        // @@protoc_insertion_point(oneof_field:NFOGHDHIDNH.DMMJHDEOGNE)
        DMMJHDEOGNE(super::super::PKGEFMGJONL::PKGEFMGJONL),
        // @@protoc_insertion_point(oneof_field:NFOGHDHIDNH.BEDINILDMEB)
        BEDINILDMEB(super::super::MNEMPJMPPJE::MNEMPJMPPJE),
        // @@protoc_insertion_point(oneof_field:NFOGHDHIDNH.PUNK_LORD_SHARE_TYPE_FRIEND)
        PUNKLORDSHARETYPEFRIEND(super::super::BHJINGMAIEB::BHJINGMAIEB),
        // @@protoc_insertion_point(oneof_field:NFOGHDHIDNH.IEFNCDEECOF)
        IEFNCDEECOF(super::super::HEKPBHDOPNP::HEKPBHDOPNP),
        // @@protoc_insertion_point(oneof_field:NFOGHDHIDNH.NLHNFNLDGGD)
        NLHNFNLDGGD(super::HOPJADOBCGN),
    }

    impl ::protobuf::Oneof for EIKIHGMHFIO {
    }

    impl ::protobuf::OneofFull for EIKIHGMHFIO {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::NFOGHDHIDNH as ::protobuf::MessageFull>::descriptor().oneof_by_name("EIKIHGMHFIO").unwrap()).clone()
        }
    }

    impl EIKIHGMHFIO {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<EIKIHGMHFIO>("EIKIHGMHFIO")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dHOPJADOBCGN_NFOGHDHIDNH.proto\x1a\x11BHJINGMAIEB.proto\x1a\x11FFJP\
    ONDPNAL.proto\x1a\x11HDGPKBGIHNB.proto\x1a\x11HEKPBHDOPNP.proto\x1a\x11M\
    NEMPJMPPJE.proto\x1a\x11NIPFDPOBDBP.proto\x1a\x11PKGEFMGJONL.proto\x1a\
    \x11PMOJPENPNOL.proto\"_\n\x0bHOPJADOBCGN\x12\x20\n\x0bNGIBEDMLDNP\x18\
    \x0b\x20\x01(\rR\x0bNGIBEDMLDNP\x12.\n\x0bKFLPLHMOAOC\x18\x0c\x20\x03(\
    \x0b2\x0c.NFOGHDHIDNHR\x0bKFLPLHMOAOC\"\x9c\x04\n\x0bNFOGHDHIDNH\x12\x20\
    \n\x0bGAJNFOGLJGE\x18\n\x20\x01(\rR\x0bGAJNFOGLJGE\x120\n\x0bJIDENEADELO\
    \x18\x02\x20\x01(\x0b2\x0c.HDGPKBGIHNBH\0R\x0bJIDENEADELO\x120\n\x0bKAJI\
    KKHPBBA\x18\x06\x20\x01(\x0b2\x0c.PMOJPENPNOLH\0R\x0bKAJIKKHPBBA\x120\n\
    \x0bGKFDGDNNEEO\x18\x03\x20\x01(\x0b2\x0c.NIPFDPOBDBPH\0R\x0bGKFDGDNNEEO\
    \x120\n\x0bNKJPMLMNOKA\x18\x0b\x20\x01(\x0b2\x0c.FFJPONDPNALH\0R\x0bNKJP\
    MLMNOKA\x120\n\x0bDMMJHDEOGNE\x18\x0c\x20\x01(\x0b2\x0c.PKGEFMGJONLH\0R\
    \x0bDMMJHDEOGNE\x120\n\x0bBEDINILDMEB\x18\x07\x20\x01(\x0b2\x0c.MNEMPJMP\
    PJEH\0R\x0bBEDINILDMEB\x12L\n\x1bPUNK_LORD_SHARE_TYPE_FRIEND\x18\r\x20\
    \x01(\x0b2\x0c.BHJINGMAIEBH\0R\x17PUNKLORDSHARETYPEFRIEND\x120\n\x0bIEFN\
    CDEECOF\x18\x0e\x20\x01(\x0b2\x0c.HEKPBHDOPNPH\0R\x0bIEFNCDEECOF\x120\n\
    \x0bNLHNFNLDGGD\x18\x05\x20\x01(\x0b2\x0c.HOPJADOBCGNH\0R\x0bNLHNFNLDGGD\
    B\r\n\x0bEIKIHGMHFIOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::BHJINGMAIEB::file_descriptor().clone());
            deps.push(super::FFJPONDPNAL::file_descriptor().clone());
            deps.push(super::HDGPKBGIHNB::file_descriptor().clone());
            deps.push(super::HEKPBHDOPNP::file_descriptor().clone());
            deps.push(super::MNEMPJMPPJE::file_descriptor().clone());
            deps.push(super::NIPFDPOBDBP::file_descriptor().clone());
            deps.push(super::PKGEFMGJONL::file_descriptor().clone());
            deps.push(super::PMOJPENPNOL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(HOPJADOBCGN::generated_message_descriptor_data());
            messages.push(NFOGHDHIDNH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
