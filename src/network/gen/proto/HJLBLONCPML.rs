// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HJLBLONCPML.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:HJLBLONCPML)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HJLBLONCPML {
    // message fields
    // @@protoc_insertion_point(field:HJLBLONCPML.BEBCFIIABLI)
    pub BEBCFIIABLI: u32,
    // message oneof groups
    pub ALDAJJIKICK: ::std::option::Option<hjlbloncpml::ALDAJJIKICK>,
    // special fields
    // @@protoc_insertion_point(special_field:HJLBLONCPML.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HJLBLONCPML {
    fn default() -> &'a HJLBLONCPML {
        <HJLBLONCPML as ::protobuf::Message>::default_instance()
    }
}

impl HJLBLONCPML {
    pub fn new() -> HJLBLONCPML {
        ::std::default::Default::default()
    }

    // .KKKPGFMNIJA PMKBKEENALM = 13;

    pub fn PMKBKEENALM(&self) -> &super::KKKPGFMNIJA::KKKPGFMNIJA {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(ref v)) => v,
            _ => <super::KKKPGFMNIJA::KKKPGFMNIJA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMKBKEENALM(&mut self) {
        self.ALDAJJIKICK = ::std::option::Option::None;
    }

    pub fn has_PMKBKEENALM(&self) -> bool {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMKBKEENALM(&mut self, v: super::KKKPGFMNIJA::KKKPGFMNIJA) {
        self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMKBKEENALM(&mut self) -> &mut super::KKKPGFMNIJA::KKKPGFMNIJA {
        if let ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(_)) = self.ALDAJJIKICK {
        } else {
            self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(super::KKKPGFMNIJA::KKKPGFMNIJA::new()));
        }
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMKBKEENALM(&mut self) -> super::KKKPGFMNIJA::KKKPGFMNIJA {
        if self.has_PMKBKEENALM() {
            match self.ALDAJJIKICK.take() {
                ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KKKPGFMNIJA::KKKPGFMNIJA::new()
        }
    }

    // .LCJGBEANBCI OLFGMBIBENC = 4;

    pub fn OLFGMBIBENC(&self) -> &super::LCJGBEANBCI::LCJGBEANBCI {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(ref v)) => v,
            _ => <super::LCJGBEANBCI::LCJGBEANBCI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OLFGMBIBENC(&mut self) {
        self.ALDAJJIKICK = ::std::option::Option::None;
    }

    pub fn has_OLFGMBIBENC(&self) -> bool {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OLFGMBIBENC(&mut self, v: super::LCJGBEANBCI::LCJGBEANBCI) {
        self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OLFGMBIBENC(&mut self) -> &mut super::LCJGBEANBCI::LCJGBEANBCI {
        if let ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(_)) = self.ALDAJJIKICK {
        } else {
            self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(super::LCJGBEANBCI::LCJGBEANBCI::new()));
        }
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OLFGMBIBENC(&mut self) -> super::LCJGBEANBCI::LCJGBEANBCI {
        if self.has_OLFGMBIBENC() {
            match self.ALDAJJIKICK.take() {
                ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCJGBEANBCI::LCJGBEANBCI::new()
        }
    }

    // .KDJPKILLFJM DFKAJDLIEEL = 8;

    pub fn DFKAJDLIEEL(&self) -> &super::KDJPKILLFJM::KDJPKILLFJM {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(ref v)) => v,
            _ => <super::KDJPKILLFJM::KDJPKILLFJM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DFKAJDLIEEL(&mut self) {
        self.ALDAJJIKICK = ::std::option::Option::None;
    }

    pub fn has_DFKAJDLIEEL(&self) -> bool {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DFKAJDLIEEL(&mut self, v: super::KDJPKILLFJM::KDJPKILLFJM) {
        self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DFKAJDLIEEL(&mut self) -> &mut super::KDJPKILLFJM::KDJPKILLFJM {
        if let ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(_)) = self.ALDAJJIKICK {
        } else {
            self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(super::KDJPKILLFJM::KDJPKILLFJM::new()));
        }
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DFKAJDLIEEL(&mut self) -> super::KDJPKILLFJM::KDJPKILLFJM {
        if self.has_DFKAJDLIEEL() {
            match self.ALDAJJIKICK.take() {
                ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KDJPKILLFJM::KDJPKILLFJM::new()
        }
    }

    // .GOKDDCOFHCA MMJGEPILIKH = 12;

    pub fn MMJGEPILIKH(&self) -> &super::GOKDDCOFHCA::GOKDDCOFHCA {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(ref v)) => v,
            _ => <super::GOKDDCOFHCA::GOKDDCOFHCA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MMJGEPILIKH(&mut self) {
        self.ALDAJJIKICK = ::std::option::Option::None;
    }

    pub fn has_MMJGEPILIKH(&self) -> bool {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MMJGEPILIKH(&mut self, v: super::GOKDDCOFHCA::GOKDDCOFHCA) {
        self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MMJGEPILIKH(&mut self) -> &mut super::GOKDDCOFHCA::GOKDDCOFHCA {
        if let ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(_)) = self.ALDAJJIKICK {
        } else {
            self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(super::GOKDDCOFHCA::GOKDDCOFHCA::new()));
        }
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MMJGEPILIKH(&mut self) -> super::GOKDDCOFHCA::GOKDDCOFHCA {
        if self.has_MMJGEPILIKH() {
            match self.ALDAJJIKICK.take() {
                ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GOKDDCOFHCA::GOKDDCOFHCA::new()
        }
    }

    // .EDKKPDOJAFL LDMLIFOAFMG = 7;

    pub fn LDMLIFOAFMG(&self) -> &super::EDKKPDOJAFL::EDKKPDOJAFL {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(ref v)) => v,
            _ => <super::EDKKPDOJAFL::EDKKPDOJAFL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LDMLIFOAFMG(&mut self) {
        self.ALDAJJIKICK = ::std::option::Option::None;
    }

    pub fn has_LDMLIFOAFMG(&self) -> bool {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LDMLIFOAFMG(&mut self, v: super::EDKKPDOJAFL::EDKKPDOJAFL) {
        self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LDMLIFOAFMG(&mut self) -> &mut super::EDKKPDOJAFL::EDKKPDOJAFL {
        if let ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(_)) = self.ALDAJJIKICK {
        } else {
            self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(super::EDKKPDOJAFL::EDKKPDOJAFL::new()));
        }
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LDMLIFOAFMG(&mut self) -> super::EDKKPDOJAFL::EDKKPDOJAFL {
        if self.has_LDMLIFOAFMG() {
            match self.ALDAJJIKICK.take() {
                ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EDKKPDOJAFL::EDKKPDOJAFL::new()
        }
    }

    // .OHCCLGAHGFP NHAPAHKLHBN = 14;

    pub fn NHAPAHKLHBN(&self) -> &super::OHCCLGAHGFP::OHCCLGAHGFP {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(ref v)) => v,
            _ => <super::OHCCLGAHGFP::OHCCLGAHGFP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NHAPAHKLHBN(&mut self) {
        self.ALDAJJIKICK = ::std::option::Option::None;
    }

    pub fn has_NHAPAHKLHBN(&self) -> bool {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NHAPAHKLHBN(&mut self, v: super::OHCCLGAHGFP::OHCCLGAHGFP) {
        self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NHAPAHKLHBN(&mut self) -> &mut super::OHCCLGAHGFP::OHCCLGAHGFP {
        if let ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(_)) = self.ALDAJJIKICK {
        } else {
            self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(super::OHCCLGAHGFP::OHCCLGAHGFP::new()));
        }
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NHAPAHKLHBN(&mut self) -> super::OHCCLGAHGFP::OHCCLGAHGFP {
        if self.has_NHAPAHKLHBN() {
            match self.ALDAJJIKICK.take() {
                ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OHCCLGAHGFP::OHCCLGAHGFP::new()
        }
    }

    // .JINAAEKHPIJ MCIOCCHPBII = 15;

    pub fn MCIOCCHPBII(&self) -> &super::JINAAEKHPIJ::JINAAEKHPIJ {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(ref v)) => v,
            _ => <super::JINAAEKHPIJ::JINAAEKHPIJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MCIOCCHPBII(&mut self) {
        self.ALDAJJIKICK = ::std::option::Option::None;
    }

    pub fn has_MCIOCCHPBII(&self) -> bool {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MCIOCCHPBII(&mut self, v: super::JINAAEKHPIJ::JINAAEKHPIJ) {
        self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MCIOCCHPBII(&mut self) -> &mut super::JINAAEKHPIJ::JINAAEKHPIJ {
        if let ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(_)) = self.ALDAJJIKICK {
        } else {
            self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(super::JINAAEKHPIJ::JINAAEKHPIJ::new()));
        }
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MCIOCCHPBII(&mut self) -> super::JINAAEKHPIJ::JINAAEKHPIJ {
        if self.has_MCIOCCHPBII() {
            match self.ALDAJJIKICK.take() {
                ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JINAAEKHPIJ::JINAAEKHPIJ::new()
        }
    }

    // bool LGNHIBENJDK = 6;

    pub fn LGNHIBENJDK(&self) -> bool {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LGNHIBENJDK(v)) => v,
            _ => false,
        }
    }

    pub fn clear_LGNHIBENJDK(&mut self) {
        self.ALDAJJIKICK = ::std::option::Option::None;
    }

    pub fn has_LGNHIBENJDK(&self) -> bool {
        match self.ALDAJJIKICK {
            ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LGNHIBENJDK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LGNHIBENJDK(&mut self, v: bool) {
        self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LGNHIBENJDK(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BEBCFIIABLI",
            |m: &HJLBLONCPML| { &m.BEBCFIIABLI },
            |m: &mut HJLBLONCPML| { &mut m.BEBCFIIABLI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KKKPGFMNIJA::KKKPGFMNIJA>(
            "PMKBKEENALM",
            HJLBLONCPML::has_PMKBKEENALM,
            HJLBLONCPML::PMKBKEENALM,
            HJLBLONCPML::mut_PMKBKEENALM,
            HJLBLONCPML::set_PMKBKEENALM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCJGBEANBCI::LCJGBEANBCI>(
            "OLFGMBIBENC",
            HJLBLONCPML::has_OLFGMBIBENC,
            HJLBLONCPML::OLFGMBIBENC,
            HJLBLONCPML::mut_OLFGMBIBENC,
            HJLBLONCPML::set_OLFGMBIBENC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KDJPKILLFJM::KDJPKILLFJM>(
            "DFKAJDLIEEL",
            HJLBLONCPML::has_DFKAJDLIEEL,
            HJLBLONCPML::DFKAJDLIEEL,
            HJLBLONCPML::mut_DFKAJDLIEEL,
            HJLBLONCPML::set_DFKAJDLIEEL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GOKDDCOFHCA::GOKDDCOFHCA>(
            "MMJGEPILIKH",
            HJLBLONCPML::has_MMJGEPILIKH,
            HJLBLONCPML::MMJGEPILIKH,
            HJLBLONCPML::mut_MMJGEPILIKH,
            HJLBLONCPML::set_MMJGEPILIKH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EDKKPDOJAFL::EDKKPDOJAFL>(
            "LDMLIFOAFMG",
            HJLBLONCPML::has_LDMLIFOAFMG,
            HJLBLONCPML::LDMLIFOAFMG,
            HJLBLONCPML::mut_LDMLIFOAFMG,
            HJLBLONCPML::set_LDMLIFOAFMG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OHCCLGAHGFP::OHCCLGAHGFP>(
            "NHAPAHKLHBN",
            HJLBLONCPML::has_NHAPAHKLHBN,
            HJLBLONCPML::NHAPAHKLHBN,
            HJLBLONCPML::mut_NHAPAHKLHBN,
            HJLBLONCPML::set_NHAPAHKLHBN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JINAAEKHPIJ::JINAAEKHPIJ>(
            "MCIOCCHPBII",
            HJLBLONCPML::has_MCIOCCHPBII,
            HJLBLONCPML::MCIOCCHPBII,
            HJLBLONCPML::mut_MCIOCCHPBII,
            HJLBLONCPML::set_MCIOCCHPBII,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "LGNHIBENJDK",
            HJLBLONCPML::has_LGNHIBENJDK,
            HJLBLONCPML::LGNHIBENJDK,
            HJLBLONCPML::set_LGNHIBENJDK,
        ));
        oneofs.push(hjlbloncpml::ALDAJJIKICK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HJLBLONCPML>(
            "HJLBLONCPML",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HJLBLONCPML {
    const NAME: &'static str = "HJLBLONCPML";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.BEBCFIIABLI = is.read_uint32()?;
                },
                106 => {
                    self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(is.read_message()?));
                },
                34 => {
                    self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(is.read_message()?));
                },
                66 => {
                    self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(is.read_message()?));
                },
                98 => {
                    self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(is.read_message()?));
                },
                58 => {
                    self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(is.read_message()?));
                },
                114 => {
                    self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(is.read_message()?));
                },
                122 => {
                    self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(is.read_message()?));
                },
                48 => {
                    self.ALDAJJIKICK = ::std::option::Option::Some(hjlbloncpml::ALDAJJIKICK::LGNHIBENJDK(is.read_bool()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.BEBCFIIABLI != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.BEBCFIIABLI);
        }
        if let ::std::option::Option::Some(ref v) = self.ALDAJJIKICK {
            match v {
                &hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &hjlbloncpml::ALDAJJIKICK::LGNHIBENJDK(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.BEBCFIIABLI != 0 {
            os.write_uint32(1, self.BEBCFIIABLI)?;
        }
        if let ::std::option::Option::Some(ref v) = self.ALDAJJIKICK {
            match v {
                &hjlbloncpml::ALDAJJIKICK::PMKBKEENALM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &hjlbloncpml::ALDAJJIKICK::OLFGMBIBENC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &hjlbloncpml::ALDAJJIKICK::DFKAJDLIEEL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &hjlbloncpml::ALDAJJIKICK::MMJGEPILIKH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &hjlbloncpml::ALDAJJIKICK::LDMLIFOAFMG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &hjlbloncpml::ALDAJJIKICK::NHAPAHKLHBN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &hjlbloncpml::ALDAJJIKICK::MCIOCCHPBII(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &hjlbloncpml::ALDAJJIKICK::LGNHIBENJDK(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HJLBLONCPML {
        HJLBLONCPML::new()
    }

    fn clear(&mut self) {
        self.BEBCFIIABLI = 0;
        self.ALDAJJIKICK = ::std::option::Option::None;
        self.ALDAJJIKICK = ::std::option::Option::None;
        self.ALDAJJIKICK = ::std::option::Option::None;
        self.ALDAJJIKICK = ::std::option::Option::None;
        self.ALDAJJIKICK = ::std::option::Option::None;
        self.ALDAJJIKICK = ::std::option::Option::None;
        self.ALDAJJIKICK = ::std::option::Option::None;
        self.ALDAJJIKICK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HJLBLONCPML {
        static instance: HJLBLONCPML = HJLBLONCPML {
            BEBCFIIABLI: 0,
            ALDAJJIKICK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HJLBLONCPML {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HJLBLONCPML").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HJLBLONCPML {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HJLBLONCPML {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HJLBLONCPML`
pub mod hjlbloncpml {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:HJLBLONCPML.ALDAJJIKICK)
    pub enum ALDAJJIKICK {
        // @@protoc_insertion_point(oneof_field:HJLBLONCPML.PMKBKEENALM)
        PMKBKEENALM(super::super::KKKPGFMNIJA::KKKPGFMNIJA),
        // @@protoc_insertion_point(oneof_field:HJLBLONCPML.OLFGMBIBENC)
        OLFGMBIBENC(super::super::LCJGBEANBCI::LCJGBEANBCI),
        // @@protoc_insertion_point(oneof_field:HJLBLONCPML.DFKAJDLIEEL)
        DFKAJDLIEEL(super::super::KDJPKILLFJM::KDJPKILLFJM),
        // @@protoc_insertion_point(oneof_field:HJLBLONCPML.MMJGEPILIKH)
        MMJGEPILIKH(super::super::GOKDDCOFHCA::GOKDDCOFHCA),
        // @@protoc_insertion_point(oneof_field:HJLBLONCPML.LDMLIFOAFMG)
        LDMLIFOAFMG(super::super::EDKKPDOJAFL::EDKKPDOJAFL),
        // @@protoc_insertion_point(oneof_field:HJLBLONCPML.NHAPAHKLHBN)
        NHAPAHKLHBN(super::super::OHCCLGAHGFP::OHCCLGAHGFP),
        // @@protoc_insertion_point(oneof_field:HJLBLONCPML.MCIOCCHPBII)
        MCIOCCHPBII(super::super::JINAAEKHPIJ::JINAAEKHPIJ),
        // @@protoc_insertion_point(oneof_field:HJLBLONCPML.LGNHIBENJDK)
        LGNHIBENJDK(bool),
    }

    impl ::protobuf::Oneof for ALDAJJIKICK {
    }

    impl ::protobuf::OneofFull for ALDAJJIKICK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::HJLBLONCPML as ::protobuf::MessageFull>::descriptor().oneof_by_name("ALDAJJIKICK").unwrap()).clone()
        }
    }

    impl ALDAJJIKICK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ALDAJJIKICK>("ALDAJJIKICK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HJLBLONCPML.proto\x1a\x11EDKKPDOJAFL.proto\x1a\x11GOKDDCOFHCA.prot\
    o\x1a\x11JINAAEKHPIJ.proto\x1a\x11KDJPKILLFJM.proto\x1a\x11KKKPGFMNIJA.p\
    roto\x1a\x11LCJGBEANBCI.proto\x1a\x11OHCCLGAHGFP.proto\"\xc0\x03\n\x0bHJ\
    LBLONCPML\x12\x20\n\x0bBEBCFIIABLI\x18\x01\x20\x01(\rR\x0bBEBCFIIABLI\
    \x120\n\x0bPMKBKEENALM\x18\r\x20\x01(\x0b2\x0c.KKKPGFMNIJAH\0R\x0bPMKBKE\
    ENALM\x120\n\x0bOLFGMBIBENC\x18\x04\x20\x01(\x0b2\x0c.LCJGBEANBCIH\0R\
    \x0bOLFGMBIBENC\x120\n\x0bDFKAJDLIEEL\x18\x08\x20\x01(\x0b2\x0c.KDJPKILL\
    FJMH\0R\x0bDFKAJDLIEEL\x120\n\x0bMMJGEPILIKH\x18\x0c\x20\x01(\x0b2\x0c.G\
    OKDDCOFHCAH\0R\x0bMMJGEPILIKH\x120\n\x0bLDMLIFOAFMG\x18\x07\x20\x01(\x0b\
    2\x0c.EDKKPDOJAFLH\0R\x0bLDMLIFOAFMG\x120\n\x0bNHAPAHKLHBN\x18\x0e\x20\
    \x01(\x0b2\x0c.OHCCLGAHGFPH\0R\x0bNHAPAHKLHBN\x120\n\x0bMCIOCCHPBII\x18\
    \x0f\x20\x01(\x0b2\x0c.JINAAEKHPIJH\0R\x0bMCIOCCHPBII\x12\"\n\x0bLGNHIBE\
    NJDK\x18\x06\x20\x01(\x08H\0R\x0bLGNHIBENJDKB\r\n\x0bALDAJJIKICKb\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::EDKKPDOJAFL::file_descriptor().clone());
            deps.push(super::GOKDDCOFHCA::file_descriptor().clone());
            deps.push(super::JINAAEKHPIJ::file_descriptor().clone());
            deps.push(super::KDJPKILLFJM::file_descriptor().clone());
            deps.push(super::KKKPGFMNIJA::file_descriptor().clone());
            deps.push(super::LCJGBEANBCI::file_descriptor().clone());
            deps.push(super::OHCCLGAHGFP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HJLBLONCPML::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
