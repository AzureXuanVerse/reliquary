// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AAIKKEGJJOO.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AAIKKEGJJOO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AAIKKEGJJOO {
    // message oneof groups
    pub DKFKPIPNNLF: ::std::option::Option<aaikkegjjoo::DKFKPIPNNLF>,
    // special fields
    // @@protoc_insertion_point(special_field:AAIKKEGJJOO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AAIKKEGJJOO {
    fn default() -> &'a AAIKKEGJJOO {
        <AAIKKEGJJOO as ::protobuf::Message>::default_instance()
    }
}

impl AAIKKEGJJOO {
    pub fn new() -> AAIKKEGJJOO {
        ::std::default::Default::default()
    }

    // .ALENDKFOAJH EJDEPKEAOLI = 6;

    pub fn EJDEPKEAOLI(&self) -> &super::ALENDKFOAJH::ALENDKFOAJH {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(ref v)) => v,
            _ => <super::ALENDKFOAJH::ALENDKFOAJH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EJDEPKEAOLI(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_EJDEPKEAOLI(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EJDEPKEAOLI(&mut self, v: super::ALENDKFOAJH::ALENDKFOAJH) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EJDEPKEAOLI(&mut self) -> &mut super::ALENDKFOAJH::ALENDKFOAJH {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(super::ALENDKFOAJH::ALENDKFOAJH::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EJDEPKEAOLI(&mut self) -> super::ALENDKFOAJH::ALENDKFOAJH {
        if self.has_EJDEPKEAOLI() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ALENDKFOAJH::ALENDKFOAJH::new()
        }
    }

    // .ALENDKFOAJH CCKALCBJNHI = 11;

    pub fn CCKALCBJNHI(&self) -> &super::ALENDKFOAJH::ALENDKFOAJH {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(ref v)) => v,
            _ => <super::ALENDKFOAJH::ALENDKFOAJH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CCKALCBJNHI(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_CCKALCBJNHI(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CCKALCBJNHI(&mut self, v: super::ALENDKFOAJH::ALENDKFOAJH) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CCKALCBJNHI(&mut self) -> &mut super::ALENDKFOAJH::ALENDKFOAJH {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(super::ALENDKFOAJH::ALENDKFOAJH::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CCKALCBJNHI(&mut self) -> super::ALENDKFOAJH::ALENDKFOAJH {
        if self.has_CCKALCBJNHI() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ALENDKFOAJH::ALENDKFOAJH::new()
        }
    }

    // .HEBJCGKBDLN HMDPKFKMLGJ = 1069;

    pub fn HMDPKFKMLGJ(&self) -> &super::HEBJCGKBDLN::HEBJCGKBDLN {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(ref v)) => v,
            _ => <super::HEBJCGKBDLN::HEBJCGKBDLN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HMDPKFKMLGJ(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_HMDPKFKMLGJ(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HMDPKFKMLGJ(&mut self, v: super::HEBJCGKBDLN::HEBJCGKBDLN) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HMDPKFKMLGJ(&mut self) -> &mut super::HEBJCGKBDLN::HEBJCGKBDLN {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(super::HEBJCGKBDLN::HEBJCGKBDLN::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HMDPKFKMLGJ(&mut self) -> super::HEBJCGKBDLN::HEBJCGKBDLN {
        if self.has_HMDPKFKMLGJ() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HEBJCGKBDLN::HEBJCGKBDLN::new()
        }
    }

    // .HEBJCGKBDLN JGEDAHNKOGM = 692;

    pub fn JGEDAHNKOGM(&self) -> &super::HEBJCGKBDLN::HEBJCGKBDLN {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(ref v)) => v,
            _ => <super::HEBJCGKBDLN::HEBJCGKBDLN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JGEDAHNKOGM(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_JGEDAHNKOGM(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JGEDAHNKOGM(&mut self, v: super::HEBJCGKBDLN::HEBJCGKBDLN) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JGEDAHNKOGM(&mut self) -> &mut super::HEBJCGKBDLN::HEBJCGKBDLN {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(super::HEBJCGKBDLN::HEBJCGKBDLN::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JGEDAHNKOGM(&mut self) -> super::HEBJCGKBDLN::HEBJCGKBDLN {
        if self.has_JGEDAHNKOGM() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HEBJCGKBDLN::HEBJCGKBDLN::new()
        }
    }

    // .BGPBGJPKPOB CGKIGAOBBEJ = 580;

    pub fn CGKIGAOBBEJ(&self) -> &super::BGPBGJPKPOB::BGPBGJPKPOB {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(ref v)) => v,
            _ => <super::BGPBGJPKPOB::BGPBGJPKPOB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CGKIGAOBBEJ(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_CGKIGAOBBEJ(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CGKIGAOBBEJ(&mut self, v: super::BGPBGJPKPOB::BGPBGJPKPOB) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CGKIGAOBBEJ(&mut self) -> &mut super::BGPBGJPKPOB::BGPBGJPKPOB {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(super::BGPBGJPKPOB::BGPBGJPKPOB::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CGKIGAOBBEJ(&mut self) -> super::BGPBGJPKPOB::BGPBGJPKPOB {
        if self.has_CGKIGAOBBEJ() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BGPBGJPKPOB::BGPBGJPKPOB::new()
        }
    }

    // .GPCDJOAONAJ BCOGPMADMMJ = 1581;

    pub fn BCOGPMADMMJ(&self) -> &super::GPCDJOAONAJ::GPCDJOAONAJ {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(ref v)) => v,
            _ => <super::GPCDJOAONAJ::GPCDJOAONAJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BCOGPMADMMJ(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_BCOGPMADMMJ(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BCOGPMADMMJ(&mut self, v: super::GPCDJOAONAJ::GPCDJOAONAJ) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BCOGPMADMMJ(&mut self) -> &mut super::GPCDJOAONAJ::GPCDJOAONAJ {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(super::GPCDJOAONAJ::GPCDJOAONAJ::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BCOGPMADMMJ(&mut self) -> super::GPCDJOAONAJ::GPCDJOAONAJ {
        if self.has_BCOGPMADMMJ() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GPCDJOAONAJ::GPCDJOAONAJ::new()
        }
    }

    // .IGLBMOEBKJF LHFDIEBCLJD = 1976;

    pub fn LHFDIEBCLJD(&self) -> &super::IGLBMOEBKJF::IGLBMOEBKJF {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(ref v)) => v,
            _ => <super::IGLBMOEBKJF::IGLBMOEBKJF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LHFDIEBCLJD(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_LHFDIEBCLJD(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LHFDIEBCLJD(&mut self, v: super::IGLBMOEBKJF::IGLBMOEBKJF) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LHFDIEBCLJD(&mut self) -> &mut super::IGLBMOEBKJF::IGLBMOEBKJF {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(super::IGLBMOEBKJF::IGLBMOEBKJF::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LHFDIEBCLJD(&mut self) -> super::IGLBMOEBKJF::IGLBMOEBKJF {
        if self.has_LHFDIEBCLJD() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IGLBMOEBKJF::IGLBMOEBKJF::new()
        }
    }

    // .ONFBPLEPJJA JMKBCJHFDCN = 1155;

    pub fn JMKBCJHFDCN(&self) -> &super::ONFBPLEPJJA::ONFBPLEPJJA {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(ref v)) => v,
            _ => <super::ONFBPLEPJJA::ONFBPLEPJJA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JMKBCJHFDCN(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_JMKBCJHFDCN(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JMKBCJHFDCN(&mut self, v: super::ONFBPLEPJJA::ONFBPLEPJJA) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JMKBCJHFDCN(&mut self) -> &mut super::ONFBPLEPJJA::ONFBPLEPJJA {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(super::ONFBPLEPJJA::ONFBPLEPJJA::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JMKBCJHFDCN(&mut self) -> super::ONFBPLEPJJA::ONFBPLEPJJA {
        if self.has_JMKBCJHFDCN() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ONFBPLEPJJA::ONFBPLEPJJA::new()
        }
    }

    // .NGNGNOJJHGF ANGKGKHHHOP = 1862;

    pub fn ANGKGKHHHOP(&self) -> &super::NGNGNOJJHGF::NGNGNOJJHGF {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(ref v)) => v,
            _ => <super::NGNGNOJJHGF::NGNGNOJJHGF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ANGKGKHHHOP(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_ANGKGKHHHOP(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ANGKGKHHHOP(&mut self, v: super::NGNGNOJJHGF::NGNGNOJJHGF) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ANGKGKHHHOP(&mut self) -> &mut super::NGNGNOJJHGF::NGNGNOJJHGF {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(super::NGNGNOJJHGF::NGNGNOJJHGF::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ANGKGKHHHOP(&mut self) -> super::NGNGNOJJHGF::NGNGNOJJHGF {
        if self.has_ANGKGKHHHOP() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NGNGNOJJHGF::NGNGNOJJHGF::new()
        }
    }

    // .DBEBNMKMHAN LCMOHGDIDJO = 49;

    pub fn LCMOHGDIDJO(&self) -> &super::DBEBNMKMHAN::DBEBNMKMHAN {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(ref v)) => v,
            _ => <super::DBEBNMKMHAN::DBEBNMKMHAN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LCMOHGDIDJO(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_LCMOHGDIDJO(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LCMOHGDIDJO(&mut self, v: super::DBEBNMKMHAN::DBEBNMKMHAN) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LCMOHGDIDJO(&mut self) -> &mut super::DBEBNMKMHAN::DBEBNMKMHAN {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(super::DBEBNMKMHAN::DBEBNMKMHAN::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LCMOHGDIDJO(&mut self) -> super::DBEBNMKMHAN::DBEBNMKMHAN {
        if self.has_LCMOHGDIDJO() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DBEBNMKMHAN::DBEBNMKMHAN::new()
        }
    }

    // .PDKPLLPFAGH NNDNDFINECK = 688;

    pub fn NNDNDFINECK(&self) -> &super::PDKPLLPFAGH::PDKPLLPFAGH {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(ref v)) => v,
            _ => <super::PDKPLLPFAGH::PDKPLLPFAGH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NNDNDFINECK(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_NNDNDFINECK(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NNDNDFINECK(&mut self, v: super::PDKPLLPFAGH::PDKPLLPFAGH) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NNDNDFINECK(&mut self) -> &mut super::PDKPLLPFAGH::PDKPLLPFAGH {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(super::PDKPLLPFAGH::PDKPLLPFAGH::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NNDNDFINECK(&mut self) -> super::PDKPLLPFAGH::PDKPLLPFAGH {
        if self.has_NNDNDFINECK() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PDKPLLPFAGH::PDKPLLPFAGH::new()
        }
    }

    // .OOEMGAIDAAN DIFLDNONOAN = 1371;

    pub fn DIFLDNONOAN(&self) -> &super::OOEMGAIDAAN::OOEMGAIDAAN {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(ref v)) => v,
            _ => <super::OOEMGAIDAAN::OOEMGAIDAAN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DIFLDNONOAN(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_DIFLDNONOAN(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DIFLDNONOAN(&mut self, v: super::OOEMGAIDAAN::OOEMGAIDAAN) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DIFLDNONOAN(&mut self) -> &mut super::OOEMGAIDAAN::OOEMGAIDAAN {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(super::OOEMGAIDAAN::OOEMGAIDAAN::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DIFLDNONOAN(&mut self) -> super::OOEMGAIDAAN::OOEMGAIDAAN {
        if self.has_DIFLDNONOAN() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OOEMGAIDAAN::OOEMGAIDAAN::new()
        }
    }

    // .AMEPABDIPIO EPLLHNCFMJF = 154;

    pub fn EPLLHNCFMJF(&self) -> &super::AMEPABDIPIO::AMEPABDIPIO {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(ref v)) => v,
            _ => <super::AMEPABDIPIO::AMEPABDIPIO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EPLLHNCFMJF(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_EPLLHNCFMJF(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EPLLHNCFMJF(&mut self, v: super::AMEPABDIPIO::AMEPABDIPIO) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EPLLHNCFMJF(&mut self) -> &mut super::AMEPABDIPIO::AMEPABDIPIO {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(super::AMEPABDIPIO::AMEPABDIPIO::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EPLLHNCFMJF(&mut self) -> super::AMEPABDIPIO::AMEPABDIPIO {
        if self.has_EPLLHNCFMJF() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AMEPABDIPIO::AMEPABDIPIO::new()
        }
    }

    // .CHGDLEHJBFI CLGJPPPLIIF = 887;

    pub fn CLGJPPPLIIF(&self) -> &super::CHGDLEHJBFI::CHGDLEHJBFI {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(ref v)) => v,
            _ => <super::CHGDLEHJBFI::CHGDLEHJBFI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CLGJPPPLIIF(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_CLGJPPPLIIF(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CLGJPPPLIIF(&mut self, v: super::CHGDLEHJBFI::CHGDLEHJBFI) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CLGJPPPLIIF(&mut self) -> &mut super::CHGDLEHJBFI::CHGDLEHJBFI {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(super::CHGDLEHJBFI::CHGDLEHJBFI::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CLGJPPPLIIF(&mut self) -> super::CHGDLEHJBFI::CHGDLEHJBFI {
        if self.has_CLGJPPPLIIF() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CHGDLEHJBFI::CHGDLEHJBFI::new()
        }
    }

    // .EMMMIFCLONE NDEBJHFHFNF = 570;

    pub fn NDEBJHFHFNF(&self) -> &super::EMMMIFCLONE::EMMMIFCLONE {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(ref v)) => v,
            _ => <super::EMMMIFCLONE::EMMMIFCLONE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NDEBJHFHFNF(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_NDEBJHFHFNF(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NDEBJHFHFNF(&mut self, v: super::EMMMIFCLONE::EMMMIFCLONE) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NDEBJHFHFNF(&mut self) -> &mut super::EMMMIFCLONE::EMMMIFCLONE {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(super::EMMMIFCLONE::EMMMIFCLONE::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NDEBJHFHFNF(&mut self) -> super::EMMMIFCLONE::EMMMIFCLONE {
        if self.has_NDEBJHFHFNF() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EMMMIFCLONE::EMMMIFCLONE::new()
        }
    }

    // .MAJBCDFADLI LDFBLMIFMLN = 1021;

    pub fn LDFBLMIFMLN(&self) -> &super::MAJBCDFADLI::MAJBCDFADLI {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(ref v)) => v,
            _ => <super::MAJBCDFADLI::MAJBCDFADLI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LDFBLMIFMLN(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_LDFBLMIFMLN(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LDFBLMIFMLN(&mut self, v: super::MAJBCDFADLI::MAJBCDFADLI) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LDFBLMIFMLN(&mut self) -> &mut super::MAJBCDFADLI::MAJBCDFADLI {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(super::MAJBCDFADLI::MAJBCDFADLI::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LDFBLMIFMLN(&mut self) -> super::MAJBCDFADLI::MAJBCDFADLI {
        if self.has_LDFBLMIFMLN() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MAJBCDFADLI::MAJBCDFADLI::new()
        }
    }

    // .HIDEGCMNFKC OCOLNPKHPMO = 99;

    pub fn OCOLNPKHPMO(&self) -> &super::HIDEGCMNFKC::HIDEGCMNFKC {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(ref v)) => v,
            _ => <super::HIDEGCMNFKC::HIDEGCMNFKC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OCOLNPKHPMO(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_OCOLNPKHPMO(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OCOLNPKHPMO(&mut self, v: super::HIDEGCMNFKC::HIDEGCMNFKC) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OCOLNPKHPMO(&mut self) -> &mut super::HIDEGCMNFKC::HIDEGCMNFKC {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(super::HIDEGCMNFKC::HIDEGCMNFKC::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OCOLNPKHPMO(&mut self) -> super::HIDEGCMNFKC::HIDEGCMNFKC {
        if self.has_OCOLNPKHPMO() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HIDEGCMNFKC::HIDEGCMNFKC::new()
        }
    }

    // .FCKAIEIDBJO NPPOMCPPPIC = 173;

    pub fn NPPOMCPPPIC(&self) -> &super::FCKAIEIDBJO::FCKAIEIDBJO {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(ref v)) => v,
            _ => <super::FCKAIEIDBJO::FCKAIEIDBJO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NPPOMCPPPIC(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_NPPOMCPPPIC(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NPPOMCPPPIC(&mut self, v: super::FCKAIEIDBJO::FCKAIEIDBJO) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NPPOMCPPPIC(&mut self) -> &mut super::FCKAIEIDBJO::FCKAIEIDBJO {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(super::FCKAIEIDBJO::FCKAIEIDBJO::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NPPOMCPPPIC(&mut self) -> super::FCKAIEIDBJO::FCKAIEIDBJO {
        if self.has_NPPOMCPPPIC() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FCKAIEIDBJO::FCKAIEIDBJO::new()
        }
    }

    // .FBBEILGMEFP CMHFCGOFKFG = 1376;

    pub fn CMHFCGOFKFG(&self) -> &super::FBBEILGMEFP::FBBEILGMEFP {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(ref v)) => v,
            _ => <super::FBBEILGMEFP::FBBEILGMEFP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CMHFCGOFKFG(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_CMHFCGOFKFG(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CMHFCGOFKFG(&mut self, v: super::FBBEILGMEFP::FBBEILGMEFP) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CMHFCGOFKFG(&mut self) -> &mut super::FBBEILGMEFP::FBBEILGMEFP {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(super::FBBEILGMEFP::FBBEILGMEFP::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CMHFCGOFKFG(&mut self) -> super::FBBEILGMEFP::FBBEILGMEFP {
        if self.has_CMHFCGOFKFG() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FBBEILGMEFP::FBBEILGMEFP::new()
        }
    }

    // .NNMBLEJFEHH FGMBFDCCMIK = 1493;

    pub fn FGMBFDCCMIK(&self) -> &super::NNMBLEJFEHH::NNMBLEJFEHH {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(ref v)) => v,
            _ => <super::NNMBLEJFEHH::NNMBLEJFEHH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FGMBFDCCMIK(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_FGMBFDCCMIK(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FGMBFDCCMIK(&mut self, v: super::NNMBLEJFEHH::NNMBLEJFEHH) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FGMBFDCCMIK(&mut self) -> &mut super::NNMBLEJFEHH::NNMBLEJFEHH {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(super::NNMBLEJFEHH::NNMBLEJFEHH::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FGMBFDCCMIK(&mut self) -> super::NNMBLEJFEHH::NNMBLEJFEHH {
        if self.has_FGMBFDCCMIK() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NNMBLEJFEHH::NNMBLEJFEHH::new()
        }
    }

    // .GAGFNEONPOM AIBDOHNJBDM = 332;

    pub fn AIBDOHNJBDM(&self) -> &super::GAGFNEONPOM::GAGFNEONPOM {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(ref v)) => v,
            _ => <super::GAGFNEONPOM::GAGFNEONPOM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AIBDOHNJBDM(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_AIBDOHNJBDM(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AIBDOHNJBDM(&mut self, v: super::GAGFNEONPOM::GAGFNEONPOM) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AIBDOHNJBDM(&mut self) -> &mut super::GAGFNEONPOM::GAGFNEONPOM {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(super::GAGFNEONPOM::GAGFNEONPOM::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AIBDOHNJBDM(&mut self) -> super::GAGFNEONPOM::GAGFNEONPOM {
        if self.has_AIBDOHNJBDM() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GAGFNEONPOM::GAGFNEONPOM::new()
        }
    }

    // .OOKFHBFLPEB FGNHNKCNPND = 563;

    pub fn FGNHNKCNPND(&self) -> &super::OOKFHBFLPEB::OOKFHBFLPEB {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(ref v)) => v,
            _ => <super::OOKFHBFLPEB::OOKFHBFLPEB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FGNHNKCNPND(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_FGNHNKCNPND(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FGNHNKCNPND(&mut self, v: super::OOKFHBFLPEB::OOKFHBFLPEB) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FGNHNKCNPND(&mut self) -> &mut super::OOKFHBFLPEB::OOKFHBFLPEB {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(super::OOKFHBFLPEB::OOKFHBFLPEB::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FGNHNKCNPND(&mut self) -> super::OOKFHBFLPEB::OOKFHBFLPEB {
        if self.has_FGNHNKCNPND() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OOKFHBFLPEB::OOKFHBFLPEB::new()
        }
    }

    // .OOKFHBFLPEB PDGEOJPBPIJ = 1985;

    pub fn PDGEOJPBPIJ(&self) -> &super::OOKFHBFLPEB::OOKFHBFLPEB {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(ref v)) => v,
            _ => <super::OOKFHBFLPEB::OOKFHBFLPEB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PDGEOJPBPIJ(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_PDGEOJPBPIJ(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PDGEOJPBPIJ(&mut self, v: super::OOKFHBFLPEB::OOKFHBFLPEB) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PDGEOJPBPIJ(&mut self) -> &mut super::OOKFHBFLPEB::OOKFHBFLPEB {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(super::OOKFHBFLPEB::OOKFHBFLPEB::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PDGEOJPBPIJ(&mut self) -> super::OOKFHBFLPEB::OOKFHBFLPEB {
        if self.has_PDGEOJPBPIJ() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OOKFHBFLPEB::OOKFHBFLPEB::new()
        }
    }

    // .OOKFHBFLPEB BODLMENOKLL = 1847;

    pub fn BODLMENOKLL(&self) -> &super::OOKFHBFLPEB::OOKFHBFLPEB {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(ref v)) => v,
            _ => <super::OOKFHBFLPEB::OOKFHBFLPEB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BODLMENOKLL(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_BODLMENOKLL(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BODLMENOKLL(&mut self, v: super::OOKFHBFLPEB::OOKFHBFLPEB) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BODLMENOKLL(&mut self) -> &mut super::OOKFHBFLPEB::OOKFHBFLPEB {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(super::OOKFHBFLPEB::OOKFHBFLPEB::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BODLMENOKLL(&mut self) -> super::OOKFHBFLPEB::OOKFHBFLPEB {
        if self.has_BODLMENOKLL() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OOKFHBFLPEB::OOKFHBFLPEB::new()
        }
    }

    // .DBKPLONPCHJ EPBEGEAIIHN = 822;

    pub fn EPBEGEAIIHN(&self) -> &super::DBKPLONPCHJ::DBKPLONPCHJ {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(ref v)) => v,
            _ => <super::DBKPLONPCHJ::DBKPLONPCHJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EPBEGEAIIHN(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_EPBEGEAIIHN(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EPBEGEAIIHN(&mut self, v: super::DBKPLONPCHJ::DBKPLONPCHJ) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EPBEGEAIIHN(&mut self) -> &mut super::DBKPLONPCHJ::DBKPLONPCHJ {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(super::DBKPLONPCHJ::DBKPLONPCHJ::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EPBEGEAIIHN(&mut self) -> super::DBKPLONPCHJ::DBKPLONPCHJ {
        if self.has_EPBEGEAIIHN() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DBKPLONPCHJ::DBKPLONPCHJ::new()
        }
    }

    // .FFPNGIAFAEA ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE = 1363;

    pub fn ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&self) -> &super::FFPNGIAFAEA::FFPNGIAFAEA {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v)) => v,
            _ => <super::FFPNGIAFAEA::FFPNGIAFAEA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
    }

    pub fn has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&self) -> bool {
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self, v: super::FFPNGIAFAEA::FFPNGIAFAEA) {
        self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) -> &mut super::FFPNGIAFAEA::FFPNGIAFAEA {
        if let ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(_)) = self.DKFKPIPNNLF {
        } else {
            self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(super::FFPNGIAFAEA::FFPNGIAFAEA::new()));
        }
        match self.DKFKPIPNNLF {
            ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) -> super::FFPNGIAFAEA::FFPNGIAFAEA {
        if self.has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE() {
            match self.DKFKPIPNNLF.take() {
                ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FFPNGIAFAEA::FFPNGIAFAEA::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(26);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ALENDKFOAJH::ALENDKFOAJH>(
            "EJDEPKEAOLI",
            AAIKKEGJJOO::has_EJDEPKEAOLI,
            AAIKKEGJJOO::EJDEPKEAOLI,
            AAIKKEGJJOO::mut_EJDEPKEAOLI,
            AAIKKEGJJOO::set_EJDEPKEAOLI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ALENDKFOAJH::ALENDKFOAJH>(
            "CCKALCBJNHI",
            AAIKKEGJJOO::has_CCKALCBJNHI,
            AAIKKEGJJOO::CCKALCBJNHI,
            AAIKKEGJJOO::mut_CCKALCBJNHI,
            AAIKKEGJJOO::set_CCKALCBJNHI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HEBJCGKBDLN::HEBJCGKBDLN>(
            "HMDPKFKMLGJ",
            AAIKKEGJJOO::has_HMDPKFKMLGJ,
            AAIKKEGJJOO::HMDPKFKMLGJ,
            AAIKKEGJJOO::mut_HMDPKFKMLGJ,
            AAIKKEGJJOO::set_HMDPKFKMLGJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HEBJCGKBDLN::HEBJCGKBDLN>(
            "JGEDAHNKOGM",
            AAIKKEGJJOO::has_JGEDAHNKOGM,
            AAIKKEGJJOO::JGEDAHNKOGM,
            AAIKKEGJJOO::mut_JGEDAHNKOGM,
            AAIKKEGJJOO::set_JGEDAHNKOGM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BGPBGJPKPOB::BGPBGJPKPOB>(
            "CGKIGAOBBEJ",
            AAIKKEGJJOO::has_CGKIGAOBBEJ,
            AAIKKEGJJOO::CGKIGAOBBEJ,
            AAIKKEGJJOO::mut_CGKIGAOBBEJ,
            AAIKKEGJJOO::set_CGKIGAOBBEJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GPCDJOAONAJ::GPCDJOAONAJ>(
            "BCOGPMADMMJ",
            AAIKKEGJJOO::has_BCOGPMADMMJ,
            AAIKKEGJJOO::BCOGPMADMMJ,
            AAIKKEGJJOO::mut_BCOGPMADMMJ,
            AAIKKEGJJOO::set_BCOGPMADMMJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IGLBMOEBKJF::IGLBMOEBKJF>(
            "LHFDIEBCLJD",
            AAIKKEGJJOO::has_LHFDIEBCLJD,
            AAIKKEGJJOO::LHFDIEBCLJD,
            AAIKKEGJJOO::mut_LHFDIEBCLJD,
            AAIKKEGJJOO::set_LHFDIEBCLJD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ONFBPLEPJJA::ONFBPLEPJJA>(
            "JMKBCJHFDCN",
            AAIKKEGJJOO::has_JMKBCJHFDCN,
            AAIKKEGJJOO::JMKBCJHFDCN,
            AAIKKEGJJOO::mut_JMKBCJHFDCN,
            AAIKKEGJJOO::set_JMKBCJHFDCN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NGNGNOJJHGF::NGNGNOJJHGF>(
            "ANGKGKHHHOP",
            AAIKKEGJJOO::has_ANGKGKHHHOP,
            AAIKKEGJJOO::ANGKGKHHHOP,
            AAIKKEGJJOO::mut_ANGKGKHHHOP,
            AAIKKEGJJOO::set_ANGKGKHHHOP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DBEBNMKMHAN::DBEBNMKMHAN>(
            "LCMOHGDIDJO",
            AAIKKEGJJOO::has_LCMOHGDIDJO,
            AAIKKEGJJOO::LCMOHGDIDJO,
            AAIKKEGJJOO::mut_LCMOHGDIDJO,
            AAIKKEGJJOO::set_LCMOHGDIDJO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PDKPLLPFAGH::PDKPLLPFAGH>(
            "NNDNDFINECK",
            AAIKKEGJJOO::has_NNDNDFINECK,
            AAIKKEGJJOO::NNDNDFINECK,
            AAIKKEGJJOO::mut_NNDNDFINECK,
            AAIKKEGJJOO::set_NNDNDFINECK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OOEMGAIDAAN::OOEMGAIDAAN>(
            "DIFLDNONOAN",
            AAIKKEGJJOO::has_DIFLDNONOAN,
            AAIKKEGJJOO::DIFLDNONOAN,
            AAIKKEGJJOO::mut_DIFLDNONOAN,
            AAIKKEGJJOO::set_DIFLDNONOAN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AMEPABDIPIO::AMEPABDIPIO>(
            "EPLLHNCFMJF",
            AAIKKEGJJOO::has_EPLLHNCFMJF,
            AAIKKEGJJOO::EPLLHNCFMJF,
            AAIKKEGJJOO::mut_EPLLHNCFMJF,
            AAIKKEGJJOO::set_EPLLHNCFMJF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CHGDLEHJBFI::CHGDLEHJBFI>(
            "CLGJPPPLIIF",
            AAIKKEGJJOO::has_CLGJPPPLIIF,
            AAIKKEGJJOO::CLGJPPPLIIF,
            AAIKKEGJJOO::mut_CLGJPPPLIIF,
            AAIKKEGJJOO::set_CLGJPPPLIIF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EMMMIFCLONE::EMMMIFCLONE>(
            "NDEBJHFHFNF",
            AAIKKEGJJOO::has_NDEBJHFHFNF,
            AAIKKEGJJOO::NDEBJHFHFNF,
            AAIKKEGJJOO::mut_NDEBJHFHFNF,
            AAIKKEGJJOO::set_NDEBJHFHFNF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MAJBCDFADLI::MAJBCDFADLI>(
            "LDFBLMIFMLN",
            AAIKKEGJJOO::has_LDFBLMIFMLN,
            AAIKKEGJJOO::LDFBLMIFMLN,
            AAIKKEGJJOO::mut_LDFBLMIFMLN,
            AAIKKEGJJOO::set_LDFBLMIFMLN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HIDEGCMNFKC::HIDEGCMNFKC>(
            "OCOLNPKHPMO",
            AAIKKEGJJOO::has_OCOLNPKHPMO,
            AAIKKEGJJOO::OCOLNPKHPMO,
            AAIKKEGJJOO::mut_OCOLNPKHPMO,
            AAIKKEGJJOO::set_OCOLNPKHPMO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FCKAIEIDBJO::FCKAIEIDBJO>(
            "NPPOMCPPPIC",
            AAIKKEGJJOO::has_NPPOMCPPPIC,
            AAIKKEGJJOO::NPPOMCPPPIC,
            AAIKKEGJJOO::mut_NPPOMCPPPIC,
            AAIKKEGJJOO::set_NPPOMCPPPIC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FBBEILGMEFP::FBBEILGMEFP>(
            "CMHFCGOFKFG",
            AAIKKEGJJOO::has_CMHFCGOFKFG,
            AAIKKEGJJOO::CMHFCGOFKFG,
            AAIKKEGJJOO::mut_CMHFCGOFKFG,
            AAIKKEGJJOO::set_CMHFCGOFKFG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NNMBLEJFEHH::NNMBLEJFEHH>(
            "FGMBFDCCMIK",
            AAIKKEGJJOO::has_FGMBFDCCMIK,
            AAIKKEGJJOO::FGMBFDCCMIK,
            AAIKKEGJJOO::mut_FGMBFDCCMIK,
            AAIKKEGJJOO::set_FGMBFDCCMIK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GAGFNEONPOM::GAGFNEONPOM>(
            "AIBDOHNJBDM",
            AAIKKEGJJOO::has_AIBDOHNJBDM,
            AAIKKEGJJOO::AIBDOHNJBDM,
            AAIKKEGJJOO::mut_AIBDOHNJBDM,
            AAIKKEGJJOO::set_AIBDOHNJBDM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OOKFHBFLPEB::OOKFHBFLPEB>(
            "FGNHNKCNPND",
            AAIKKEGJJOO::has_FGNHNKCNPND,
            AAIKKEGJJOO::FGNHNKCNPND,
            AAIKKEGJJOO::mut_FGNHNKCNPND,
            AAIKKEGJJOO::set_FGNHNKCNPND,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OOKFHBFLPEB::OOKFHBFLPEB>(
            "PDGEOJPBPIJ",
            AAIKKEGJJOO::has_PDGEOJPBPIJ,
            AAIKKEGJJOO::PDGEOJPBPIJ,
            AAIKKEGJJOO::mut_PDGEOJPBPIJ,
            AAIKKEGJJOO::set_PDGEOJPBPIJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OOKFHBFLPEB::OOKFHBFLPEB>(
            "BODLMENOKLL",
            AAIKKEGJJOO::has_BODLMENOKLL,
            AAIKKEGJJOO::BODLMENOKLL,
            AAIKKEGJJOO::mut_BODLMENOKLL,
            AAIKKEGJJOO::set_BODLMENOKLL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DBKPLONPCHJ::DBKPLONPCHJ>(
            "EPBEGEAIIHN",
            AAIKKEGJJOO::has_EPBEGEAIIHN,
            AAIKKEGJJOO::EPBEGEAIIHN,
            AAIKKEGJJOO::mut_EPBEGEAIIHN,
            AAIKKEGJJOO::set_EPBEGEAIIHN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FFPNGIAFAEA::FFPNGIAFAEA>(
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE",
            AAIKKEGJJOO::has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            AAIKKEGJJOO::ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            AAIKKEGJJOO::mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            AAIKKEGJJOO::set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
        ));
        oneofs.push(aaikkegjjoo::DKFKPIPNNLF::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AAIKKEGJJOO>(
            "AAIKKEGJJOO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AAIKKEGJJOO {
    const NAME: &'static str = "AAIKKEGJJOO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(is.read_message()?));
                },
                90 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(is.read_message()?));
                },
                8554 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(is.read_message()?));
                },
                5538 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(is.read_message()?));
                },
                4642 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(is.read_message()?));
                },
                12650 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(is.read_message()?));
                },
                15810 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(is.read_message()?));
                },
                9242 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(is.read_message()?));
                },
                14898 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(is.read_message()?));
                },
                394 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(is.read_message()?));
                },
                5506 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(is.read_message()?));
                },
                10970 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(is.read_message()?));
                },
                1234 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(is.read_message()?));
                },
                7098 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(is.read_message()?));
                },
                4562 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(is.read_message()?));
                },
                8170 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(is.read_message()?));
                },
                794 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(is.read_message()?));
                },
                1386 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(is.read_message()?));
                },
                11010 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(is.read_message()?));
                },
                11946 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(is.read_message()?));
                },
                2658 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(is.read_message()?));
                },
                4506 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(is.read_message()?));
                },
                15882 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(is.read_message()?));
                },
                14778 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(is.read_message()?));
                },
                6578 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(is.read_message()?));
                },
                10906 => {
                    self.DKFKPIPNNLF = ::std::option::Option::Some(aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.DKFKPIPNNLF {
            match v {
                &aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.DKFKPIPNNLF {
            match v {
                &aaikkegjjoo::DKFKPIPNNLF::EJDEPKEAOLI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::CCKALCBJNHI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::HMDPKFKMLGJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1069, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::JGEDAHNKOGM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(692, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::CGKIGAOBBEJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(580, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::BCOGPMADMMJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1581, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::LHFDIEBCLJD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1976, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::JMKBCJHFDCN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1155, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::ANGKGKHHHOP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1862, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::LCMOHGDIDJO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(49, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::NNDNDFINECK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(688, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::DIFLDNONOAN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1371, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::EPLLHNCFMJF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(154, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::CLGJPPPLIIF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(887, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::NDEBJHFHFNF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(570, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::LDFBLMIFMLN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1021, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::OCOLNPKHPMO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(99, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::NPPOMCPPPIC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(173, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::CMHFCGOFKFG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1376, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::FGMBFDCCMIK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1493, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::AIBDOHNJBDM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(332, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::FGNHNKCNPND(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(563, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::PDGEOJPBPIJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1985, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::BODLMENOKLL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1847, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::EPBEGEAIIHN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(822, v, os)?;
                },
                &aaikkegjjoo::DKFKPIPNNLF::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1363, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AAIKKEGJJOO {
        AAIKKEGJJOO::new()
    }

    fn clear(&mut self) {
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.DKFKPIPNNLF = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AAIKKEGJJOO {
        static instance: AAIKKEGJJOO = AAIKKEGJJOO {
            DKFKPIPNNLF: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AAIKKEGJJOO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AAIKKEGJJOO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AAIKKEGJJOO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AAIKKEGJJOO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AAIKKEGJJOO`
pub mod aaikkegjjoo {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AAIKKEGJJOO.DKFKPIPNNLF)
    pub enum DKFKPIPNNLF {
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.EJDEPKEAOLI)
        EJDEPKEAOLI(super::super::ALENDKFOAJH::ALENDKFOAJH),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.CCKALCBJNHI)
        CCKALCBJNHI(super::super::ALENDKFOAJH::ALENDKFOAJH),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.HMDPKFKMLGJ)
        HMDPKFKMLGJ(super::super::HEBJCGKBDLN::HEBJCGKBDLN),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.JGEDAHNKOGM)
        JGEDAHNKOGM(super::super::HEBJCGKBDLN::HEBJCGKBDLN),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.CGKIGAOBBEJ)
        CGKIGAOBBEJ(super::super::BGPBGJPKPOB::BGPBGJPKPOB),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.BCOGPMADMMJ)
        BCOGPMADMMJ(super::super::GPCDJOAONAJ::GPCDJOAONAJ),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.LHFDIEBCLJD)
        LHFDIEBCLJD(super::super::IGLBMOEBKJF::IGLBMOEBKJF),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.JMKBCJHFDCN)
        JMKBCJHFDCN(super::super::ONFBPLEPJJA::ONFBPLEPJJA),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.ANGKGKHHHOP)
        ANGKGKHHHOP(super::super::NGNGNOJJHGF::NGNGNOJJHGF),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.LCMOHGDIDJO)
        LCMOHGDIDJO(super::super::DBEBNMKMHAN::DBEBNMKMHAN),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.NNDNDFINECK)
        NNDNDFINECK(super::super::PDKPLLPFAGH::PDKPLLPFAGH),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.DIFLDNONOAN)
        DIFLDNONOAN(super::super::OOEMGAIDAAN::OOEMGAIDAAN),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.EPLLHNCFMJF)
        EPLLHNCFMJF(super::super::AMEPABDIPIO::AMEPABDIPIO),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.CLGJPPPLIIF)
        CLGJPPPLIIF(super::super::CHGDLEHJBFI::CHGDLEHJBFI),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.NDEBJHFHFNF)
        NDEBJHFHFNF(super::super::EMMMIFCLONE::EMMMIFCLONE),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.LDFBLMIFMLN)
        LDFBLMIFMLN(super::super::MAJBCDFADLI::MAJBCDFADLI),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.OCOLNPKHPMO)
        OCOLNPKHPMO(super::super::HIDEGCMNFKC::HIDEGCMNFKC),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.NPPOMCPPPIC)
        NPPOMCPPPIC(super::super::FCKAIEIDBJO::FCKAIEIDBJO),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.CMHFCGOFKFG)
        CMHFCGOFKFG(super::super::FBBEILGMEFP::FBBEILGMEFP),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.FGMBFDCCMIK)
        FGMBFDCCMIK(super::super::NNMBLEJFEHH::NNMBLEJFEHH),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.AIBDOHNJBDM)
        AIBDOHNJBDM(super::super::GAGFNEONPOM::GAGFNEONPOM),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.FGNHNKCNPND)
        FGNHNKCNPND(super::super::OOKFHBFLPEB::OOKFHBFLPEB),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.PDGEOJPBPIJ)
        PDGEOJPBPIJ(super::super::OOKFHBFLPEB::OOKFHBFLPEB),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.BODLMENOKLL)
        BODLMENOKLL(super::super::OOKFHBFLPEB::OOKFHBFLPEB),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.EPBEGEAIIHN)
        EPBEGEAIIHN(super::super::DBKPLONPCHJ::DBKPLONPCHJ),
        // @@protoc_insertion_point(oneof_field:AAIKKEGJJOO.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE)
        ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(super::super::FFPNGIAFAEA::FFPNGIAFAEA),
    }

    impl ::protobuf::Oneof for DKFKPIPNNLF {
    }

    impl ::protobuf::OneofFull for DKFKPIPNNLF {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AAIKKEGJJOO as ::protobuf::MessageFull>::descriptor().oneof_by_name("DKFKPIPNNLF").unwrap()).clone()
        }
    }

    impl DKFKPIPNNLF {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DKFKPIPNNLF>("DKFKPIPNNLF")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AAIKKEGJJOO.proto\x1a\x11ALENDKFOAJH.proto\x1a\x11AMEPABDIPIO.prot\
    o\x1a\x11BGPBGJPKPOB.proto\x1a\x11CHGDLEHJBFI.proto\x1a\x11DBEBNMKMHAN.p\
    roto\x1a\x11DBKPLONPCHJ.proto\x1a\x11EMMMIFCLONE.proto\x1a\x11FBBEILGMEF\
    P.proto\x1a\x11FCKAIEIDBJO.proto\x1a\x11FFPNGIAFAEA.proto\x1a\x11GAGFNEO\
    NPOM.proto\x1a\x11GPCDJOAONAJ.proto\x1a\x11HEBJCGKBDLN.proto\x1a\x11HIDE\
    GCMNFKC.proto\x1a\x11IGLBMOEBKJF.proto\x1a\x11MAJBCDFADLI.proto\x1a\x11N\
    GNGNOJJHGF.proto\x1a\x11NNMBLEJFEHH.proto\x1a\x11ONFBPLEPJJA.proto\x1a\
    \x11OOEMGAIDAAN.proto\x1a\x11OOKFHBFLPEB.proto\x1a\x11PDKPLLPFAGH.proto\
    \"\x9b\x0b\n\x0bAAIKKEGJJOO\x120\n\x0bEJDEPKEAOLI\x18\x06\x20\x01(\x0b2\
    \x0c.ALENDKFOAJHH\0R\x0bEJDEPKEAOLI\x120\n\x0bCCKALCBJNHI\x18\x0b\x20\
    \x01(\x0b2\x0c.ALENDKFOAJHH\0R\x0bCCKALCBJNHI\x121\n\x0bHMDPKFKMLGJ\x18\
    \xad\x08\x20\x01(\x0b2\x0c.HEBJCGKBDLNH\0R\x0bHMDPKFKMLGJ\x121\n\x0bJGED\
    AHNKOGM\x18\xb4\x05\x20\x01(\x0b2\x0c.HEBJCGKBDLNH\0R\x0bJGEDAHNKOGM\x12\
    1\n\x0bCGKIGAOBBEJ\x18\xc4\x04\x20\x01(\x0b2\x0c.BGPBGJPKPOBH\0R\x0bCGKI\
    GAOBBEJ\x121\n\x0bBCOGPMADMMJ\x18\xad\x0c\x20\x01(\x0b2\x0c.GPCDJOAONAJH\
    \0R\x0bBCOGPMADMMJ\x121\n\x0bLHFDIEBCLJD\x18\xb8\x0f\x20\x01(\x0b2\x0c.I\
    GLBMOEBKJFH\0R\x0bLHFDIEBCLJD\x121\n\x0bJMKBCJHFDCN\x18\x83\t\x20\x01(\
    \x0b2\x0c.ONFBPLEPJJAH\0R\x0bJMKBCJHFDCN\x121\n\x0bANGKGKHHHOP\x18\xc6\
    \x0e\x20\x01(\x0b2\x0c.NGNGNOJJHGFH\0R\x0bANGKGKHHHOP\x120\n\x0bLCMOHGDI\
    DJO\x181\x20\x01(\x0b2\x0c.DBEBNMKMHANH\0R\x0bLCMOHGDIDJO\x121\n\x0bNNDN\
    DFINECK\x18\xb0\x05\x20\x01(\x0b2\x0c.PDKPLLPFAGHH\0R\x0bNNDNDFINECK\x12\
    1\n\x0bDIFLDNONOAN\x18\xdb\n\x20\x01(\x0b2\x0c.OOEMGAIDAANH\0R\x0bDIFLDN\
    ONOAN\x121\n\x0bEPLLHNCFMJF\x18\x9a\x01\x20\x01(\x0b2\x0c.AMEPABDIPIOH\0\
    R\x0bEPLLHNCFMJF\x121\n\x0bCLGJPPPLIIF\x18\xf7\x06\x20\x01(\x0b2\x0c.CHG\
    DLEHJBFIH\0R\x0bCLGJPPPLIIF\x121\n\x0bNDEBJHFHFNF\x18\xba\x04\x20\x01(\
    \x0b2\x0c.EMMMIFCLONEH\0R\x0bNDEBJHFHFNF\x121\n\x0bLDFBLMIFMLN\x18\xfd\
    \x07\x20\x01(\x0b2\x0c.MAJBCDFADLIH\0R\x0bLDFBLMIFMLN\x120\n\x0bOCOLNPKH\
    PMO\x18c\x20\x01(\x0b2\x0c.HIDEGCMNFKCH\0R\x0bOCOLNPKHPMO\x121\n\x0bNPPO\
    MCPPPIC\x18\xad\x01\x20\x01(\x0b2\x0c.FCKAIEIDBJOH\0R\x0bNPPOMCPPPIC\x12\
    1\n\x0bCMHFCGOFKFG\x18\xe0\n\x20\x01(\x0b2\x0c.FBBEILGMEFPH\0R\x0bCMHFCG\
    OFKFG\x121\n\x0bFGMBFDCCMIK\x18\xd5\x0b\x20\x01(\x0b2\x0c.NNMBLEJFEHHH\0\
    R\x0bFGMBFDCCMIK\x121\n\x0bAIBDOHNJBDM\x18\xcc\x02\x20\x01(\x0b2\x0c.GAG\
    FNEONPOMH\0R\x0bAIBDOHNJBDM\x121\n\x0bFGNHNKCNPND\x18\xb3\x04\x20\x01(\
    \x0b2\x0c.OOKFHBFLPEBH\0R\x0bFGNHNKCNPND\x121\n\x0bPDGEOJPBPIJ\x18\xc1\
    \x0f\x20\x01(\x0b2\x0c.OOKFHBFLPEBH\0R\x0bPDGEOJPBPIJ\x121\n\x0bBODLMENO\
    KLL\x18\xb7\x0e\x20\x01(\x0b2\x0c.OOKFHBFLPEBH\0R\x0bBODLMENOKLL\x121\n\
    \x0bEPBEGEAIIHN\x18\xb6\x06\x20\x01(\x0b2\x0c.DBKPLONPCHJH\0R\x0bEPBEGEA\
    IIHN\x12\x85\x01\n9ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COM\
    POSE\x18\xd3\n\x20\x01(\x0b2\x0c.FFPNGIAFAEAH\0R1ROGUECOMMONACTIONRESULT\
    SOURCETYPEMAGICUNITCOMPOSEB\r\n\x0bDKFKPIPNNLFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(22);
            deps.push(super::ALENDKFOAJH::file_descriptor().clone());
            deps.push(super::AMEPABDIPIO::file_descriptor().clone());
            deps.push(super::BGPBGJPKPOB::file_descriptor().clone());
            deps.push(super::CHGDLEHJBFI::file_descriptor().clone());
            deps.push(super::DBEBNMKMHAN::file_descriptor().clone());
            deps.push(super::DBKPLONPCHJ::file_descriptor().clone());
            deps.push(super::EMMMIFCLONE::file_descriptor().clone());
            deps.push(super::FBBEILGMEFP::file_descriptor().clone());
            deps.push(super::FCKAIEIDBJO::file_descriptor().clone());
            deps.push(super::FFPNGIAFAEA::file_descriptor().clone());
            deps.push(super::GAGFNEONPOM::file_descriptor().clone());
            deps.push(super::GPCDJOAONAJ::file_descriptor().clone());
            deps.push(super::HEBJCGKBDLN::file_descriptor().clone());
            deps.push(super::HIDEGCMNFKC::file_descriptor().clone());
            deps.push(super::IGLBMOEBKJF::file_descriptor().clone());
            deps.push(super::MAJBCDFADLI::file_descriptor().clone());
            deps.push(super::NGNGNOJJHGF::file_descriptor().clone());
            deps.push(super::NNMBLEJFEHH::file_descriptor().clone());
            deps.push(super::ONFBPLEPJJA::file_descriptor().clone());
            deps.push(super::OOEMGAIDAAN::file_descriptor().clone());
            deps.push(super::OOKFHBFLPEB::file_descriptor().clone());
            deps.push(super::PDKPLLPFAGH::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AAIKKEGJJOO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
