// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DIIELKBLNDG.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:DIIELKBLNDG)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DIIELKBLNDG {
    // message oneof groups
    pub OCCCBFFFGLL: ::std::option::Option<diielkblndg::OCCCBFFFGLL>,
    // special fields
    // @@protoc_insertion_point(special_field:DIIELKBLNDG.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DIIELKBLNDG {
    fn default() -> &'a DIIELKBLNDG {
        <DIIELKBLNDG as ::protobuf::Message>::default_instance()
    }
}

impl DIIELKBLNDG {
    pub fn new() -> DIIELKBLNDG {
        ::std::default::Default::default()
    }

    // .BMHCPOMFLOG BBBLDHKMGCC = 14;

    pub fn BBBLDHKMGCC(&self) -> &super::BMHCPOMFLOG::BMHCPOMFLOG {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(ref v)) => v,
            _ => <super::BMHCPOMFLOG::BMHCPOMFLOG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BBBLDHKMGCC(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_BBBLDHKMGCC(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BBBLDHKMGCC(&mut self, v: super::BMHCPOMFLOG::BMHCPOMFLOG) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BBBLDHKMGCC(&mut self) -> &mut super::BMHCPOMFLOG::BMHCPOMFLOG {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(super::BMHCPOMFLOG::BMHCPOMFLOG::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BBBLDHKMGCC(&mut self) -> super::BMHCPOMFLOG::BMHCPOMFLOG {
        if self.has_BBBLDHKMGCC() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BMHCPOMFLOG::BMHCPOMFLOG::new()
        }
    }

    // .BMHCPOMFLOG ECPKHIDELMJ = 9;

    pub fn ECPKHIDELMJ(&self) -> &super::BMHCPOMFLOG::BMHCPOMFLOG {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(ref v)) => v,
            _ => <super::BMHCPOMFLOG::BMHCPOMFLOG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ECPKHIDELMJ(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_ECPKHIDELMJ(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ECPKHIDELMJ(&mut self, v: super::BMHCPOMFLOG::BMHCPOMFLOG) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ECPKHIDELMJ(&mut self) -> &mut super::BMHCPOMFLOG::BMHCPOMFLOG {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(super::BMHCPOMFLOG::BMHCPOMFLOG::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ECPKHIDELMJ(&mut self) -> super::BMHCPOMFLOG::BMHCPOMFLOG {
        if self.has_ECPKHIDELMJ() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BMHCPOMFLOG::BMHCPOMFLOG::new()
        }
    }

    // .CCMHPCONEME MMLLFOIBJID = 97;

    pub fn MMLLFOIBJID(&self) -> &super::CCMHPCONEME::CCMHPCONEME {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(ref v)) => v,
            _ => <super::CCMHPCONEME::CCMHPCONEME as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MMLLFOIBJID(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_MMLLFOIBJID(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MMLLFOIBJID(&mut self, v: super::CCMHPCONEME::CCMHPCONEME) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MMLLFOIBJID(&mut self) -> &mut super::CCMHPCONEME::CCMHPCONEME {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(super::CCMHPCONEME::CCMHPCONEME::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MMLLFOIBJID(&mut self) -> super::CCMHPCONEME::CCMHPCONEME {
        if self.has_MMLLFOIBJID() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CCMHPCONEME::CCMHPCONEME::new()
        }
    }

    // .CCMHPCONEME HENCFGKDMEK = 154;

    pub fn HENCFGKDMEK(&self) -> &super::CCMHPCONEME::CCMHPCONEME {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(ref v)) => v,
            _ => <super::CCMHPCONEME::CCMHPCONEME as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HENCFGKDMEK(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_HENCFGKDMEK(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HENCFGKDMEK(&mut self, v: super::CCMHPCONEME::CCMHPCONEME) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HENCFGKDMEK(&mut self) -> &mut super::CCMHPCONEME::CCMHPCONEME {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(super::CCMHPCONEME::CCMHPCONEME::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HENCFGKDMEK(&mut self) -> super::CCMHPCONEME::CCMHPCONEME {
        if self.has_HENCFGKDMEK() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CCMHPCONEME::CCMHPCONEME::new()
        }
    }

    // .AMCCFLNDLLB BPOGDIBGHGP = 1040;

    pub fn BPOGDIBGHGP(&self) -> &super::AMCCFLNDLLB::AMCCFLNDLLB {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(ref v)) => v,
            _ => <super::AMCCFLNDLLB::AMCCFLNDLLB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BPOGDIBGHGP(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_BPOGDIBGHGP(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BPOGDIBGHGP(&mut self, v: super::AMCCFLNDLLB::AMCCFLNDLLB) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BPOGDIBGHGP(&mut self) -> &mut super::AMCCFLNDLLB::AMCCFLNDLLB {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(super::AMCCFLNDLLB::AMCCFLNDLLB::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BPOGDIBGHGP(&mut self) -> super::AMCCFLNDLLB::AMCCFLNDLLB {
        if self.has_BPOGDIBGHGP() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AMCCFLNDLLB::AMCCFLNDLLB::new()
        }
    }

    // .EFMGMGGOKEL AICKANICDMO = 1614;

    pub fn AICKANICDMO(&self) -> &super::EFMGMGGOKEL::EFMGMGGOKEL {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AICKANICDMO(ref v)) => v,
            _ => <super::EFMGMGGOKEL::EFMGMGGOKEL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AICKANICDMO(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_AICKANICDMO(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AICKANICDMO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AICKANICDMO(&mut self, v: super::EFMGMGGOKEL::EFMGMGGOKEL) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AICKANICDMO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AICKANICDMO(&mut self) -> &mut super::EFMGMGGOKEL::EFMGMGGOKEL {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AICKANICDMO(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AICKANICDMO(super::EFMGMGGOKEL::EFMGMGGOKEL::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AICKANICDMO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AICKANICDMO(&mut self) -> super::EFMGMGGOKEL::EFMGMGGOKEL {
        if self.has_AICKANICDMO() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AICKANICDMO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EFMGMGGOKEL::EFMGMGGOKEL::new()
        }
    }

    // .EKKHDLKGMDH HBPPAPIOFBC = 1621;

    pub fn HBPPAPIOFBC(&self) -> &super::EKKHDLKGMDH::EKKHDLKGMDH {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(ref v)) => v,
            _ => <super::EKKHDLKGMDH::EKKHDLKGMDH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HBPPAPIOFBC(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_HBPPAPIOFBC(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HBPPAPIOFBC(&mut self, v: super::EKKHDLKGMDH::EKKHDLKGMDH) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HBPPAPIOFBC(&mut self) -> &mut super::EKKHDLKGMDH::EKKHDLKGMDH {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(super::EKKHDLKGMDH::EKKHDLKGMDH::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HBPPAPIOFBC(&mut self) -> super::EKKHDLKGMDH::EKKHDLKGMDH {
        if self.has_HBPPAPIOFBC() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EKKHDLKGMDH::EKKHDLKGMDH::new()
        }
    }

    // .HIEBMNLCFBB POCBCJLLGAB = 1878;

    pub fn POCBCJLLGAB(&self) -> &super::HIEBMNLCFBB::HIEBMNLCFBB {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(ref v)) => v,
            _ => <super::HIEBMNLCFBB::HIEBMNLCFBB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_POCBCJLLGAB(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_POCBCJLLGAB(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_POCBCJLLGAB(&mut self, v: super::HIEBMNLCFBB::HIEBMNLCFBB) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_POCBCJLLGAB(&mut self) -> &mut super::HIEBMNLCFBB::HIEBMNLCFBB {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(super::HIEBMNLCFBB::HIEBMNLCFBB::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_POCBCJLLGAB(&mut self) -> super::HIEBMNLCFBB::HIEBMNLCFBB {
        if self.has_POCBCJLLGAB() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HIEBMNLCFBB::HIEBMNLCFBB::new()
        }
    }

    // .LJFBDHHDPOM FGMCCFFGFFK = 933;

    pub fn FGMCCFFGFFK(&self) -> &super::LJFBDHHDPOM::LJFBDHHDPOM {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(ref v)) => v,
            _ => <super::LJFBDHHDPOM::LJFBDHHDPOM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FGMCCFFGFFK(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_FGMCCFFGFFK(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FGMCCFFGFFK(&mut self, v: super::LJFBDHHDPOM::LJFBDHHDPOM) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FGMCCFFGFFK(&mut self) -> &mut super::LJFBDHHDPOM::LJFBDHHDPOM {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(super::LJFBDHHDPOM::LJFBDHHDPOM::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FGMCCFFGFFK(&mut self) -> super::LJFBDHHDPOM::LJFBDHHDPOM {
        if self.has_FGMCCFFGFFK() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LJFBDHHDPOM::LJFBDHHDPOM::new()
        }
    }

    // .NPGDAKGFGJO DNICOFFFDEJ = 1349;

    pub fn DNICOFFFDEJ(&self) -> &super::NPGDAKGFGJO::NPGDAKGFGJO {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(ref v)) => v,
            _ => <super::NPGDAKGFGJO::NPGDAKGFGJO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DNICOFFFDEJ(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_DNICOFFFDEJ(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DNICOFFFDEJ(&mut self, v: super::NPGDAKGFGJO::NPGDAKGFGJO) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DNICOFFFDEJ(&mut self) -> &mut super::NPGDAKGFGJO::NPGDAKGFGJO {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(super::NPGDAKGFGJO::NPGDAKGFGJO::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DNICOFFFDEJ(&mut self) -> super::NPGDAKGFGJO::NPGDAKGFGJO {
        if self.has_DNICOFFFDEJ() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NPGDAKGFGJO::NPGDAKGFGJO::new()
        }
    }

    // .CGHBMKAAOGP ELOANPJBFJH = 597;

    pub fn ELOANPJBFJH(&self) -> &super::CGHBMKAAOGP::CGHBMKAAOGP {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(ref v)) => v,
            _ => <super::CGHBMKAAOGP::CGHBMKAAOGP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ELOANPJBFJH(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_ELOANPJBFJH(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ELOANPJBFJH(&mut self, v: super::CGHBMKAAOGP::CGHBMKAAOGP) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ELOANPJBFJH(&mut self) -> &mut super::CGHBMKAAOGP::CGHBMKAAOGP {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(super::CGHBMKAAOGP::CGHBMKAAOGP::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ELOANPJBFJH(&mut self) -> super::CGHBMKAAOGP::CGHBMKAAOGP {
        if self.has_ELOANPJBFJH() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGHBMKAAOGP::CGHBMKAAOGP::new()
        }
    }

    // .IFCCBKAAPDJ OMPHGNMIIJF = 1946;

    pub fn OMPHGNMIIJF(&self) -> &super::IFCCBKAAPDJ::IFCCBKAAPDJ {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(ref v)) => v,
            _ => <super::IFCCBKAAPDJ::IFCCBKAAPDJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OMPHGNMIIJF(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_OMPHGNMIIJF(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OMPHGNMIIJF(&mut self, v: super::IFCCBKAAPDJ::IFCCBKAAPDJ) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OMPHGNMIIJF(&mut self) -> &mut super::IFCCBKAAPDJ::IFCCBKAAPDJ {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(super::IFCCBKAAPDJ::IFCCBKAAPDJ::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OMPHGNMIIJF(&mut self) -> super::IFCCBKAAPDJ::IFCCBKAAPDJ {
        if self.has_OMPHGNMIIJF() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IFCCBKAAPDJ::IFCCBKAAPDJ::new()
        }
    }

    // .FCKCNLOKJKF IOBDPIOPBBE = 296;

    pub fn IOBDPIOPBBE(&self) -> &super::FCKCNLOKJKF::FCKCNLOKJKF {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(ref v)) => v,
            _ => <super::FCKCNLOKJKF::FCKCNLOKJKF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IOBDPIOPBBE(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_IOBDPIOPBBE(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IOBDPIOPBBE(&mut self, v: super::FCKCNLOKJKF::FCKCNLOKJKF) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IOBDPIOPBBE(&mut self) -> &mut super::FCKCNLOKJKF::FCKCNLOKJKF {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(super::FCKCNLOKJKF::FCKCNLOKJKF::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IOBDPIOPBBE(&mut self) -> super::FCKCNLOKJKF::FCKCNLOKJKF {
        if self.has_IOBDPIOPBBE() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FCKCNLOKJKF::FCKCNLOKJKF::new()
        }
    }

    // .DDFNCOPPBIJ LDHIFHJEGIM = 65;

    pub fn LDHIFHJEGIM(&self) -> &super::DDFNCOPPBIJ::DDFNCOPPBIJ {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(ref v)) => v,
            _ => <super::DDFNCOPPBIJ::DDFNCOPPBIJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LDHIFHJEGIM(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_LDHIFHJEGIM(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LDHIFHJEGIM(&mut self, v: super::DDFNCOPPBIJ::DDFNCOPPBIJ) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LDHIFHJEGIM(&mut self) -> &mut super::DDFNCOPPBIJ::DDFNCOPPBIJ {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(super::DDFNCOPPBIJ::DDFNCOPPBIJ::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LDHIFHJEGIM(&mut self) -> super::DDFNCOPPBIJ::DDFNCOPPBIJ {
        if self.has_LDHIFHJEGIM() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DDFNCOPPBIJ::DDFNCOPPBIJ::new()
        }
    }

    // .HKMHDCMFPNJ BNOIADAKDCE = 1904;

    pub fn BNOIADAKDCE(&self) -> &super::HKMHDCMFPNJ::HKMHDCMFPNJ {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(ref v)) => v,
            _ => <super::HKMHDCMFPNJ::HKMHDCMFPNJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BNOIADAKDCE(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_BNOIADAKDCE(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BNOIADAKDCE(&mut self, v: super::HKMHDCMFPNJ::HKMHDCMFPNJ) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BNOIADAKDCE(&mut self) -> &mut super::HKMHDCMFPNJ::HKMHDCMFPNJ {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(super::HKMHDCMFPNJ::HKMHDCMFPNJ::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BNOIADAKDCE(&mut self) -> super::HKMHDCMFPNJ::HKMHDCMFPNJ {
        if self.has_BNOIADAKDCE() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HKMHDCMFPNJ::HKMHDCMFPNJ::new()
        }
    }

    // .PGHLLEHNDBD DDCFAHGLAFI = 1971;

    pub fn DDCFAHGLAFI(&self) -> &super::PGHLLEHNDBD::PGHLLEHNDBD {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(ref v)) => v,
            _ => <super::PGHLLEHNDBD::PGHLLEHNDBD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DDCFAHGLAFI(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_DDCFAHGLAFI(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DDCFAHGLAFI(&mut self, v: super::PGHLLEHNDBD::PGHLLEHNDBD) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DDCFAHGLAFI(&mut self) -> &mut super::PGHLLEHNDBD::PGHLLEHNDBD {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(super::PGHLLEHNDBD::PGHLLEHNDBD::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DDCFAHGLAFI(&mut self) -> super::PGHLLEHNDBD::PGHLLEHNDBD {
        if self.has_DDCFAHGLAFI() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PGHLLEHNDBD::PGHLLEHNDBD::new()
        }
    }

    // .AOOCLJHNHHB DIALOKPLOCF = 1931;

    pub fn DIALOKPLOCF(&self) -> &super::AOOCLJHNHHB::AOOCLJHNHHB {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(ref v)) => v,
            _ => <super::AOOCLJHNHHB::AOOCLJHNHHB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DIALOKPLOCF(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_DIALOKPLOCF(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DIALOKPLOCF(&mut self, v: super::AOOCLJHNHHB::AOOCLJHNHHB) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DIALOKPLOCF(&mut self) -> &mut super::AOOCLJHNHHB::AOOCLJHNHHB {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(super::AOOCLJHNHHB::AOOCLJHNHHB::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DIALOKPLOCF(&mut self) -> super::AOOCLJHNHHB::AOOCLJHNHHB {
        if self.has_DIALOKPLOCF() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AOOCLJHNHHB::AOOCLJHNHHB::new()
        }
    }

    // .IFJNOCLIPOL JGHEFIBPPFI = 1320;

    pub fn JGHEFIBPPFI(&self) -> &super::IFJNOCLIPOL::IFJNOCLIPOL {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(ref v)) => v,
            _ => <super::IFJNOCLIPOL::IFJNOCLIPOL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JGHEFIBPPFI(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_JGHEFIBPPFI(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JGHEFIBPPFI(&mut self, v: super::IFJNOCLIPOL::IFJNOCLIPOL) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JGHEFIBPPFI(&mut self) -> &mut super::IFJNOCLIPOL::IFJNOCLIPOL {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(super::IFJNOCLIPOL::IFJNOCLIPOL::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JGHEFIBPPFI(&mut self) -> super::IFJNOCLIPOL::IFJNOCLIPOL {
        if self.has_JGHEFIBPPFI() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IFJNOCLIPOL::IFJNOCLIPOL::new()
        }
    }

    // .FMAIOFPLLGC AECNJNGFBBN = 867;

    pub fn AECNJNGFBBN(&self) -> &super::FMAIOFPLLGC::FMAIOFPLLGC {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(ref v)) => v,
            _ => <super::FMAIOFPLLGC::FMAIOFPLLGC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AECNJNGFBBN(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_AECNJNGFBBN(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AECNJNGFBBN(&mut self, v: super::FMAIOFPLLGC::FMAIOFPLLGC) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AECNJNGFBBN(&mut self) -> &mut super::FMAIOFPLLGC::FMAIOFPLLGC {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(super::FMAIOFPLLGC::FMAIOFPLLGC::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AECNJNGFBBN(&mut self) -> super::FMAIOFPLLGC::FMAIOFPLLGC {
        if self.has_AECNJNGFBBN() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FMAIOFPLLGC::FMAIOFPLLGC::new()
        }
    }

    // .LPIIJMJOOME FNOLPHMALFH = 1195;

    pub fn FNOLPHMALFH(&self) -> &super::LPIIJMJOOME::LPIIJMJOOME {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(ref v)) => v,
            _ => <super::LPIIJMJOOME::LPIIJMJOOME as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FNOLPHMALFH(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_FNOLPHMALFH(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FNOLPHMALFH(&mut self, v: super::LPIIJMJOOME::LPIIJMJOOME) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FNOLPHMALFH(&mut self) -> &mut super::LPIIJMJOOME::LPIIJMJOOME {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(super::LPIIJMJOOME::LPIIJMJOOME::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FNOLPHMALFH(&mut self) -> super::LPIIJMJOOME::LPIIJMJOOME {
        if self.has_FNOLPHMALFH() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LPIIJMJOOME::LPIIJMJOOME::new()
        }
    }

    // .NCBIADHLKGN BJMFLAFIKJB = 1135;

    pub fn BJMFLAFIKJB(&self) -> &super::NCBIADHLKGN::NCBIADHLKGN {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(ref v)) => v,
            _ => <super::NCBIADHLKGN::NCBIADHLKGN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BJMFLAFIKJB(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_BJMFLAFIKJB(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BJMFLAFIKJB(&mut self, v: super::NCBIADHLKGN::NCBIADHLKGN) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BJMFLAFIKJB(&mut self) -> &mut super::NCBIADHLKGN::NCBIADHLKGN {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(super::NCBIADHLKGN::NCBIADHLKGN::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BJMFLAFIKJB(&mut self) -> super::NCBIADHLKGN::NCBIADHLKGN {
        if self.has_BJMFLAFIKJB() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NCBIADHLKGN::NCBIADHLKGN::new()
        }
    }

    // .GBKPHLGLDHI KNLHDHGFAFN = 777;

    pub fn KNLHDHGFAFN(&self) -> &super::GBKPHLGLDHI::GBKPHLGLDHI {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(ref v)) => v,
            _ => <super::GBKPHLGLDHI::GBKPHLGLDHI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KNLHDHGFAFN(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_KNLHDHGFAFN(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KNLHDHGFAFN(&mut self, v: super::GBKPHLGLDHI::GBKPHLGLDHI) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KNLHDHGFAFN(&mut self) -> &mut super::GBKPHLGLDHI::GBKPHLGLDHI {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(super::GBKPHLGLDHI::GBKPHLGLDHI::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KNLHDHGFAFN(&mut self) -> super::GBKPHLGLDHI::GBKPHLGLDHI {
        if self.has_KNLHDHGFAFN() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GBKPHLGLDHI::GBKPHLGLDHI::new()
        }
    }

    // .GBKPHLGLDHI HDFFEAOFJKG = 1969;

    pub fn HDFFEAOFJKG(&self) -> &super::GBKPHLGLDHI::GBKPHLGLDHI {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(ref v)) => v,
            _ => <super::GBKPHLGLDHI::GBKPHLGLDHI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HDFFEAOFJKG(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_HDFFEAOFJKG(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HDFFEAOFJKG(&mut self, v: super::GBKPHLGLDHI::GBKPHLGLDHI) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HDFFEAOFJKG(&mut self) -> &mut super::GBKPHLGLDHI::GBKPHLGLDHI {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(super::GBKPHLGLDHI::GBKPHLGLDHI::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HDFFEAOFJKG(&mut self) -> super::GBKPHLGLDHI::GBKPHLGLDHI {
        if self.has_HDFFEAOFJKG() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GBKPHLGLDHI::GBKPHLGLDHI::new()
        }
    }

    // .GBKPHLGLDHI OCMBNDKBAPI = 276;

    pub fn OCMBNDKBAPI(&self) -> &super::GBKPHLGLDHI::GBKPHLGLDHI {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(ref v)) => v,
            _ => <super::GBKPHLGLDHI::GBKPHLGLDHI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OCMBNDKBAPI(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_OCMBNDKBAPI(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OCMBNDKBAPI(&mut self, v: super::GBKPHLGLDHI::GBKPHLGLDHI) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OCMBNDKBAPI(&mut self) -> &mut super::GBKPHLGLDHI::GBKPHLGLDHI {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(super::GBKPHLGLDHI::GBKPHLGLDHI::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OCMBNDKBAPI(&mut self) -> super::GBKPHLGLDHI::GBKPHLGLDHI {
        if self.has_OCMBNDKBAPI() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GBKPHLGLDHI::GBKPHLGLDHI::new()
        }
    }

    // .KPKBHIOEOAE MAFECNCNOCB = 1458;

    pub fn MAFECNCNOCB(&self) -> &super::KPKBHIOEOAE::KPKBHIOEOAE {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(ref v)) => v,
            _ => <super::KPKBHIOEOAE::KPKBHIOEOAE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MAFECNCNOCB(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_MAFECNCNOCB(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MAFECNCNOCB(&mut self, v: super::KPKBHIOEOAE::KPKBHIOEOAE) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MAFECNCNOCB(&mut self) -> &mut super::KPKBHIOEOAE::KPKBHIOEOAE {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(super::KPKBHIOEOAE::KPKBHIOEOAE::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MAFECNCNOCB(&mut self) -> super::KPKBHIOEOAE::KPKBHIOEOAE {
        if self.has_MAFECNCNOCB() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KPKBHIOEOAE::KPKBHIOEOAE::new()
        }
    }

    // .ICPOMOHLCMD ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE = 519;

    pub fn ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&self) -> &super::ICPOMOHLCMD::ICPOMOHLCMD {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v)) => v,
            _ => <super::ICPOMOHLCMD::ICPOMOHLCMD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
    }

    pub fn has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&self) -> bool {
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self, v: super::ICPOMOHLCMD::ICPOMOHLCMD) {
        self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) -> &mut super::ICPOMOHLCMD::ICPOMOHLCMD {
        if let ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(_)) = self.OCCCBFFFGLL {
        } else {
            self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(super::ICPOMOHLCMD::ICPOMOHLCMD::new()));
        }
        match self.OCCCBFFFGLL {
            ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) -> super::ICPOMOHLCMD::ICPOMOHLCMD {
        if self.has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE() {
            match self.OCCCBFFFGLL.take() {
                ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ICPOMOHLCMD::ICPOMOHLCMD::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(26);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BMHCPOMFLOG::BMHCPOMFLOG>(
            "BBBLDHKMGCC",
            DIIELKBLNDG::has_BBBLDHKMGCC,
            DIIELKBLNDG::BBBLDHKMGCC,
            DIIELKBLNDG::mut_BBBLDHKMGCC,
            DIIELKBLNDG::set_BBBLDHKMGCC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BMHCPOMFLOG::BMHCPOMFLOG>(
            "ECPKHIDELMJ",
            DIIELKBLNDG::has_ECPKHIDELMJ,
            DIIELKBLNDG::ECPKHIDELMJ,
            DIIELKBLNDG::mut_ECPKHIDELMJ,
            DIIELKBLNDG::set_ECPKHIDELMJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CCMHPCONEME::CCMHPCONEME>(
            "MMLLFOIBJID",
            DIIELKBLNDG::has_MMLLFOIBJID,
            DIIELKBLNDG::MMLLFOIBJID,
            DIIELKBLNDG::mut_MMLLFOIBJID,
            DIIELKBLNDG::set_MMLLFOIBJID,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CCMHPCONEME::CCMHPCONEME>(
            "HENCFGKDMEK",
            DIIELKBLNDG::has_HENCFGKDMEK,
            DIIELKBLNDG::HENCFGKDMEK,
            DIIELKBLNDG::mut_HENCFGKDMEK,
            DIIELKBLNDG::set_HENCFGKDMEK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AMCCFLNDLLB::AMCCFLNDLLB>(
            "BPOGDIBGHGP",
            DIIELKBLNDG::has_BPOGDIBGHGP,
            DIIELKBLNDG::BPOGDIBGHGP,
            DIIELKBLNDG::mut_BPOGDIBGHGP,
            DIIELKBLNDG::set_BPOGDIBGHGP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EFMGMGGOKEL::EFMGMGGOKEL>(
            "AICKANICDMO",
            DIIELKBLNDG::has_AICKANICDMO,
            DIIELKBLNDG::AICKANICDMO,
            DIIELKBLNDG::mut_AICKANICDMO,
            DIIELKBLNDG::set_AICKANICDMO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EKKHDLKGMDH::EKKHDLKGMDH>(
            "HBPPAPIOFBC",
            DIIELKBLNDG::has_HBPPAPIOFBC,
            DIIELKBLNDG::HBPPAPIOFBC,
            DIIELKBLNDG::mut_HBPPAPIOFBC,
            DIIELKBLNDG::set_HBPPAPIOFBC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HIEBMNLCFBB::HIEBMNLCFBB>(
            "POCBCJLLGAB",
            DIIELKBLNDG::has_POCBCJLLGAB,
            DIIELKBLNDG::POCBCJLLGAB,
            DIIELKBLNDG::mut_POCBCJLLGAB,
            DIIELKBLNDG::set_POCBCJLLGAB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LJFBDHHDPOM::LJFBDHHDPOM>(
            "FGMCCFFGFFK",
            DIIELKBLNDG::has_FGMCCFFGFFK,
            DIIELKBLNDG::FGMCCFFGFFK,
            DIIELKBLNDG::mut_FGMCCFFGFFK,
            DIIELKBLNDG::set_FGMCCFFGFFK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NPGDAKGFGJO::NPGDAKGFGJO>(
            "DNICOFFFDEJ",
            DIIELKBLNDG::has_DNICOFFFDEJ,
            DIIELKBLNDG::DNICOFFFDEJ,
            DIIELKBLNDG::mut_DNICOFFFDEJ,
            DIIELKBLNDG::set_DNICOFFFDEJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGHBMKAAOGP::CGHBMKAAOGP>(
            "ELOANPJBFJH",
            DIIELKBLNDG::has_ELOANPJBFJH,
            DIIELKBLNDG::ELOANPJBFJH,
            DIIELKBLNDG::mut_ELOANPJBFJH,
            DIIELKBLNDG::set_ELOANPJBFJH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IFCCBKAAPDJ::IFCCBKAAPDJ>(
            "OMPHGNMIIJF",
            DIIELKBLNDG::has_OMPHGNMIIJF,
            DIIELKBLNDG::OMPHGNMIIJF,
            DIIELKBLNDG::mut_OMPHGNMIIJF,
            DIIELKBLNDG::set_OMPHGNMIIJF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FCKCNLOKJKF::FCKCNLOKJKF>(
            "IOBDPIOPBBE",
            DIIELKBLNDG::has_IOBDPIOPBBE,
            DIIELKBLNDG::IOBDPIOPBBE,
            DIIELKBLNDG::mut_IOBDPIOPBBE,
            DIIELKBLNDG::set_IOBDPIOPBBE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DDFNCOPPBIJ::DDFNCOPPBIJ>(
            "LDHIFHJEGIM",
            DIIELKBLNDG::has_LDHIFHJEGIM,
            DIIELKBLNDG::LDHIFHJEGIM,
            DIIELKBLNDG::mut_LDHIFHJEGIM,
            DIIELKBLNDG::set_LDHIFHJEGIM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HKMHDCMFPNJ::HKMHDCMFPNJ>(
            "BNOIADAKDCE",
            DIIELKBLNDG::has_BNOIADAKDCE,
            DIIELKBLNDG::BNOIADAKDCE,
            DIIELKBLNDG::mut_BNOIADAKDCE,
            DIIELKBLNDG::set_BNOIADAKDCE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PGHLLEHNDBD::PGHLLEHNDBD>(
            "DDCFAHGLAFI",
            DIIELKBLNDG::has_DDCFAHGLAFI,
            DIIELKBLNDG::DDCFAHGLAFI,
            DIIELKBLNDG::mut_DDCFAHGLAFI,
            DIIELKBLNDG::set_DDCFAHGLAFI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AOOCLJHNHHB::AOOCLJHNHHB>(
            "DIALOKPLOCF",
            DIIELKBLNDG::has_DIALOKPLOCF,
            DIIELKBLNDG::DIALOKPLOCF,
            DIIELKBLNDG::mut_DIALOKPLOCF,
            DIIELKBLNDG::set_DIALOKPLOCF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IFJNOCLIPOL::IFJNOCLIPOL>(
            "JGHEFIBPPFI",
            DIIELKBLNDG::has_JGHEFIBPPFI,
            DIIELKBLNDG::JGHEFIBPPFI,
            DIIELKBLNDG::mut_JGHEFIBPPFI,
            DIIELKBLNDG::set_JGHEFIBPPFI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FMAIOFPLLGC::FMAIOFPLLGC>(
            "AECNJNGFBBN",
            DIIELKBLNDG::has_AECNJNGFBBN,
            DIIELKBLNDG::AECNJNGFBBN,
            DIIELKBLNDG::mut_AECNJNGFBBN,
            DIIELKBLNDG::set_AECNJNGFBBN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LPIIJMJOOME::LPIIJMJOOME>(
            "FNOLPHMALFH",
            DIIELKBLNDG::has_FNOLPHMALFH,
            DIIELKBLNDG::FNOLPHMALFH,
            DIIELKBLNDG::mut_FNOLPHMALFH,
            DIIELKBLNDG::set_FNOLPHMALFH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NCBIADHLKGN::NCBIADHLKGN>(
            "BJMFLAFIKJB",
            DIIELKBLNDG::has_BJMFLAFIKJB,
            DIIELKBLNDG::BJMFLAFIKJB,
            DIIELKBLNDG::mut_BJMFLAFIKJB,
            DIIELKBLNDG::set_BJMFLAFIKJB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GBKPHLGLDHI::GBKPHLGLDHI>(
            "KNLHDHGFAFN",
            DIIELKBLNDG::has_KNLHDHGFAFN,
            DIIELKBLNDG::KNLHDHGFAFN,
            DIIELKBLNDG::mut_KNLHDHGFAFN,
            DIIELKBLNDG::set_KNLHDHGFAFN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GBKPHLGLDHI::GBKPHLGLDHI>(
            "HDFFEAOFJKG",
            DIIELKBLNDG::has_HDFFEAOFJKG,
            DIIELKBLNDG::HDFFEAOFJKG,
            DIIELKBLNDG::mut_HDFFEAOFJKG,
            DIIELKBLNDG::set_HDFFEAOFJKG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GBKPHLGLDHI::GBKPHLGLDHI>(
            "OCMBNDKBAPI",
            DIIELKBLNDG::has_OCMBNDKBAPI,
            DIIELKBLNDG::OCMBNDKBAPI,
            DIIELKBLNDG::mut_OCMBNDKBAPI,
            DIIELKBLNDG::set_OCMBNDKBAPI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KPKBHIOEOAE::KPKBHIOEOAE>(
            "MAFECNCNOCB",
            DIIELKBLNDG::has_MAFECNCNOCB,
            DIIELKBLNDG::MAFECNCNOCB,
            DIIELKBLNDG::mut_MAFECNCNOCB,
            DIIELKBLNDG::set_MAFECNCNOCB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ICPOMOHLCMD::ICPOMOHLCMD>(
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE",
            DIIELKBLNDG::has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            DIIELKBLNDG::ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            DIIELKBLNDG::mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            DIIELKBLNDG::set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
        ));
        oneofs.push(diielkblndg::OCCCBFFFGLL::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DIIELKBLNDG>(
            "DIIELKBLNDG",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DIIELKBLNDG {
    const NAME: &'static str = "DIIELKBLNDG";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(is.read_message()?));
                },
                74 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(is.read_message()?));
                },
                778 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(is.read_message()?));
                },
                1234 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(is.read_message()?));
                },
                8322 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(is.read_message()?));
                },
                12914 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AICKANICDMO(is.read_message()?));
                },
                12970 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(is.read_message()?));
                },
                15026 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(is.read_message()?));
                },
                7466 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(is.read_message()?));
                },
                10794 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(is.read_message()?));
                },
                4778 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(is.read_message()?));
                },
                15570 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(is.read_message()?));
                },
                2370 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(is.read_message()?));
                },
                522 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(is.read_message()?));
                },
                15234 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(is.read_message()?));
                },
                15770 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(is.read_message()?));
                },
                15450 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(is.read_message()?));
                },
                10562 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(is.read_message()?));
                },
                6938 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(is.read_message()?));
                },
                9562 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(is.read_message()?));
                },
                9082 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(is.read_message()?));
                },
                6218 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(is.read_message()?));
                },
                15754 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(is.read_message()?));
                },
                2210 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(is.read_message()?));
                },
                11666 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(is.read_message()?));
                },
                4154 => {
                    self.OCCCBFFFGLL = ::std::option::Option::Some(diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.OCCCBFFFGLL {
            match v {
                &diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::AICKANICDMO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.OCCCBFFFGLL {
            match v {
                &diielkblndg::OCCCBFFFGLL::BBBLDHKMGCC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::ECPKHIDELMJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::MMLLFOIBJID(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(97, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::HENCFGKDMEK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(154, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::BPOGDIBGHGP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1040, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::AICKANICDMO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1614, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::HBPPAPIOFBC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1621, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::POCBCJLLGAB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1878, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::FGMCCFFGFFK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(933, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::DNICOFFFDEJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1349, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::ELOANPJBFJH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(597, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::OMPHGNMIIJF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1946, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::IOBDPIOPBBE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(296, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::LDHIFHJEGIM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(65, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::BNOIADAKDCE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1904, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::DDCFAHGLAFI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1971, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::DIALOKPLOCF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1931, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::JGHEFIBPPFI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1320, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::AECNJNGFBBN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(867, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::FNOLPHMALFH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1195, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::BJMFLAFIKJB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1135, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::KNLHDHGFAFN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(777, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::HDFFEAOFJKG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1969, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::OCMBNDKBAPI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(276, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::MAFECNCNOCB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1458, v, os)?;
                },
                &diielkblndg::OCCCBFFFGLL::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(519, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DIIELKBLNDG {
        DIIELKBLNDG::new()
    }

    fn clear(&mut self) {
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.OCCCBFFFGLL = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DIIELKBLNDG {
        static instance: DIIELKBLNDG = DIIELKBLNDG {
            OCCCBFFFGLL: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DIIELKBLNDG {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DIIELKBLNDG").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DIIELKBLNDG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DIIELKBLNDG {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DIIELKBLNDG`
pub mod diielkblndg {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DIIELKBLNDG.OCCCBFFFGLL)
    pub enum OCCCBFFFGLL {
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.BBBLDHKMGCC)
        BBBLDHKMGCC(super::super::BMHCPOMFLOG::BMHCPOMFLOG),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.ECPKHIDELMJ)
        ECPKHIDELMJ(super::super::BMHCPOMFLOG::BMHCPOMFLOG),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.MMLLFOIBJID)
        MMLLFOIBJID(super::super::CCMHPCONEME::CCMHPCONEME),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.HENCFGKDMEK)
        HENCFGKDMEK(super::super::CCMHPCONEME::CCMHPCONEME),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.BPOGDIBGHGP)
        BPOGDIBGHGP(super::super::AMCCFLNDLLB::AMCCFLNDLLB),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.AICKANICDMO)
        AICKANICDMO(super::super::EFMGMGGOKEL::EFMGMGGOKEL),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.HBPPAPIOFBC)
        HBPPAPIOFBC(super::super::EKKHDLKGMDH::EKKHDLKGMDH),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.POCBCJLLGAB)
        POCBCJLLGAB(super::super::HIEBMNLCFBB::HIEBMNLCFBB),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.FGMCCFFGFFK)
        FGMCCFFGFFK(super::super::LJFBDHHDPOM::LJFBDHHDPOM),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.DNICOFFFDEJ)
        DNICOFFFDEJ(super::super::NPGDAKGFGJO::NPGDAKGFGJO),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.ELOANPJBFJH)
        ELOANPJBFJH(super::super::CGHBMKAAOGP::CGHBMKAAOGP),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.OMPHGNMIIJF)
        OMPHGNMIIJF(super::super::IFCCBKAAPDJ::IFCCBKAAPDJ),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.IOBDPIOPBBE)
        IOBDPIOPBBE(super::super::FCKCNLOKJKF::FCKCNLOKJKF),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.LDHIFHJEGIM)
        LDHIFHJEGIM(super::super::DDFNCOPPBIJ::DDFNCOPPBIJ),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.BNOIADAKDCE)
        BNOIADAKDCE(super::super::HKMHDCMFPNJ::HKMHDCMFPNJ),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.DDCFAHGLAFI)
        DDCFAHGLAFI(super::super::PGHLLEHNDBD::PGHLLEHNDBD),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.DIALOKPLOCF)
        DIALOKPLOCF(super::super::AOOCLJHNHHB::AOOCLJHNHHB),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.JGHEFIBPPFI)
        JGHEFIBPPFI(super::super::IFJNOCLIPOL::IFJNOCLIPOL),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.AECNJNGFBBN)
        AECNJNGFBBN(super::super::FMAIOFPLLGC::FMAIOFPLLGC),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.FNOLPHMALFH)
        FNOLPHMALFH(super::super::LPIIJMJOOME::LPIIJMJOOME),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.BJMFLAFIKJB)
        BJMFLAFIKJB(super::super::NCBIADHLKGN::NCBIADHLKGN),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.KNLHDHGFAFN)
        KNLHDHGFAFN(super::super::GBKPHLGLDHI::GBKPHLGLDHI),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.HDFFEAOFJKG)
        HDFFEAOFJKG(super::super::GBKPHLGLDHI::GBKPHLGLDHI),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.OCMBNDKBAPI)
        OCMBNDKBAPI(super::super::GBKPHLGLDHI::GBKPHLGLDHI),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.MAFECNCNOCB)
        MAFECNCNOCB(super::super::KPKBHIOEOAE::KPKBHIOEOAE),
        // @@protoc_insertion_point(oneof_field:DIIELKBLNDG.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE)
        ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(super::super::ICPOMOHLCMD::ICPOMOHLCMD),
    }

    impl ::protobuf::Oneof for OCCCBFFFGLL {
    }

    impl ::protobuf::OneofFull for OCCCBFFFGLL {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DIIELKBLNDG as ::protobuf::MessageFull>::descriptor().oneof_by_name("OCCCBFFFGLL").unwrap()).clone()
        }
    }

    impl OCCCBFFFGLL {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<OCCCBFFFGLL>("OCCCBFFFGLL")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DIIELKBLNDG.proto\x1a\x11AMCCFLNDLLB.proto\x1a\x11AOOCLJHNHHB.prot\
    o\x1a\x11BMHCPOMFLOG.proto\x1a\x11CCMHPCONEME.proto\x1a\x11CGHBMKAAOGP.p\
    roto\x1a\x11DDFNCOPPBIJ.proto\x1a\x11EFMGMGGOKEL.proto\x1a\x11EKKHDLKGMD\
    H.proto\x1a\x11FCKCNLOKJKF.proto\x1a\x11FMAIOFPLLGC.proto\x1a\x11GBKPHLG\
    LDHI.proto\x1a\x11HIEBMNLCFBB.proto\x1a\x11HKMHDCMFPNJ.proto\x1a\x11ICPO\
    MOHLCMD.proto\x1a\x11IFCCBKAAPDJ.proto\x1a\x11IFJNOCLIPOL.proto\x1a\x11K\
    PKBHIOEOAE.proto\x1a\x11LJFBDHHDPOM.proto\x1a\x11LPIIJMJOOME.proto\x1a\
    \x11NCBIADHLKGN.proto\x1a\x11NPGDAKGFGJO.proto\x1a\x11PGHLLEHNDBD.proto\
    \"\x9b\x0b\n\x0bDIIELKBLNDG\x120\n\x0bBBBLDHKMGCC\x18\x0e\x20\x01(\x0b2\
    \x0c.BMHCPOMFLOGH\0R\x0bBBBLDHKMGCC\x120\n\x0bECPKHIDELMJ\x18\t\x20\x01(\
    \x0b2\x0c.BMHCPOMFLOGH\0R\x0bECPKHIDELMJ\x120\n\x0bMMLLFOIBJID\x18a\x20\
    \x01(\x0b2\x0c.CCMHPCONEMEH\0R\x0bMMLLFOIBJID\x121\n\x0bHENCFGKDMEK\x18\
    \x9a\x01\x20\x01(\x0b2\x0c.CCMHPCONEMEH\0R\x0bHENCFGKDMEK\x121\n\x0bBPOG\
    DIBGHGP\x18\x90\x08\x20\x01(\x0b2\x0c.AMCCFLNDLLBH\0R\x0bBPOGDIBGHGP\x12\
    1\n\x0bAICKANICDMO\x18\xce\x0c\x20\x01(\x0b2\x0c.EFMGMGGOKELH\0R\x0bAICK\
    ANICDMO\x121\n\x0bHBPPAPIOFBC\x18\xd5\x0c\x20\x01(\x0b2\x0c.EKKHDLKGMDHH\
    \0R\x0bHBPPAPIOFBC\x121\n\x0bPOCBCJLLGAB\x18\xd6\x0e\x20\x01(\x0b2\x0c.H\
    IEBMNLCFBBH\0R\x0bPOCBCJLLGAB\x121\n\x0bFGMCCFFGFFK\x18\xa5\x07\x20\x01(\
    \x0b2\x0c.LJFBDHHDPOMH\0R\x0bFGMCCFFGFFK\x121\n\x0bDNICOFFFDEJ\x18\xc5\n\
    \x20\x01(\x0b2\x0c.NPGDAKGFGJOH\0R\x0bDNICOFFFDEJ\x121\n\x0bELOANPJBFJH\
    \x18\xd5\x04\x20\x01(\x0b2\x0c.CGHBMKAAOGPH\0R\x0bELOANPJBFJH\x121\n\x0b\
    OMPHGNMIIJF\x18\x9a\x0f\x20\x01(\x0b2\x0c.IFCCBKAAPDJH\0R\x0bOMPHGNMIIJF\
    \x121\n\x0bIOBDPIOPBBE\x18\xa8\x02\x20\x01(\x0b2\x0c.FCKCNLOKJKFH\0R\x0b\
    IOBDPIOPBBE\x120\n\x0bLDHIFHJEGIM\x18A\x20\x01(\x0b2\x0c.DDFNCOPPBIJH\0R\
    \x0bLDHIFHJEGIM\x121\n\x0bBNOIADAKDCE\x18\xf0\x0e\x20\x01(\x0b2\x0c.HKMH\
    DCMFPNJH\0R\x0bBNOIADAKDCE\x121\n\x0bDDCFAHGLAFI\x18\xb3\x0f\x20\x01(\
    \x0b2\x0c.PGHLLEHNDBDH\0R\x0bDDCFAHGLAFI\x121\n\x0bDIALOKPLOCF\x18\x8b\
    \x0f\x20\x01(\x0b2\x0c.AOOCLJHNHHBH\0R\x0bDIALOKPLOCF\x121\n\x0bJGHEFIBP\
    PFI\x18\xa8\n\x20\x01(\x0b2\x0c.IFJNOCLIPOLH\0R\x0bJGHEFIBPPFI\x121\n\
    \x0bAECNJNGFBBN\x18\xe3\x06\x20\x01(\x0b2\x0c.FMAIOFPLLGCH\0R\x0bAECNJNG\
    FBBN\x121\n\x0bFNOLPHMALFH\x18\xab\t\x20\x01(\x0b2\x0c.LPIIJMJOOMEH\0R\
    \x0bFNOLPHMALFH\x121\n\x0bBJMFLAFIKJB\x18\xef\x08\x20\x01(\x0b2\x0c.NCBI\
    ADHLKGNH\0R\x0bBJMFLAFIKJB\x121\n\x0bKNLHDHGFAFN\x18\x89\x06\x20\x01(\
    \x0b2\x0c.GBKPHLGLDHIH\0R\x0bKNLHDHGFAFN\x121\n\x0bHDFFEAOFJKG\x18\xb1\
    \x0f\x20\x01(\x0b2\x0c.GBKPHLGLDHIH\0R\x0bHDFFEAOFJKG\x121\n\x0bOCMBNDKB\
    API\x18\x94\x02\x20\x01(\x0b2\x0c.GBKPHLGLDHIH\0R\x0bOCMBNDKBAPI\x121\n\
    \x0bMAFECNCNOCB\x18\xb2\x0b\x20\x01(\x0b2\x0c.KPKBHIOEOAEH\0R\x0bMAFECNC\
    NOCB\x12\x85\x01\n9ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COM\
    POSE\x18\x87\x04\x20\x01(\x0b2\x0c.ICPOMOHLCMDH\0R1ROGUECOMMONACTIONRESU\
    LTSOURCETYPEMAGICUNITCOMPOSEB\r\n\x0bOCCCBFFFGLLb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(22);
            deps.push(super::AMCCFLNDLLB::file_descriptor().clone());
            deps.push(super::AOOCLJHNHHB::file_descriptor().clone());
            deps.push(super::BMHCPOMFLOG::file_descriptor().clone());
            deps.push(super::CCMHPCONEME::file_descriptor().clone());
            deps.push(super::CGHBMKAAOGP::file_descriptor().clone());
            deps.push(super::DDFNCOPPBIJ::file_descriptor().clone());
            deps.push(super::EFMGMGGOKEL::file_descriptor().clone());
            deps.push(super::EKKHDLKGMDH::file_descriptor().clone());
            deps.push(super::FCKCNLOKJKF::file_descriptor().clone());
            deps.push(super::FMAIOFPLLGC::file_descriptor().clone());
            deps.push(super::GBKPHLGLDHI::file_descriptor().clone());
            deps.push(super::HIEBMNLCFBB::file_descriptor().clone());
            deps.push(super::HKMHDCMFPNJ::file_descriptor().clone());
            deps.push(super::ICPOMOHLCMD::file_descriptor().clone());
            deps.push(super::IFCCBKAAPDJ::file_descriptor().clone());
            deps.push(super::IFJNOCLIPOL::file_descriptor().clone());
            deps.push(super::KPKBHIOEOAE::file_descriptor().clone());
            deps.push(super::LJFBDHHDPOM::file_descriptor().clone());
            deps.push(super::LPIIJMJOOME::file_descriptor().clone());
            deps.push(super::NCBIADHLKGN::file_descriptor().clone());
            deps.push(super::NPGDAKGFGJO::file_descriptor().clone());
            deps.push(super::PGHLLEHNDBD::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DIIELKBLNDG::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
