// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AKIEODPHAIN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AKIEODPHAIN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AKIEODPHAIN {
    // message oneof groups
    pub DIJMMHAAFGJ: ::std::option::Option<akieodphain::DIJMMHAAFGJ>,
    // special fields
    // @@protoc_insertion_point(special_field:AKIEODPHAIN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AKIEODPHAIN {
    fn default() -> &'a AKIEODPHAIN {
        <AKIEODPHAIN as ::protobuf::Message>::default_instance()
    }
}

impl AKIEODPHAIN {
    pub fn new() -> AKIEODPHAIN {
        ::std::default::Default::default()
    }

    // .IMJKNBKHFIN AHKMIEELHAJ = 2;

    pub fn AHKMIEELHAJ(&self) -> &super::IMJKNBKHFIN::IMJKNBKHFIN {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(ref v)) => v,
            _ => <super::IMJKNBKHFIN::IMJKNBKHFIN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AHKMIEELHAJ(&mut self) {
        self.DIJMMHAAFGJ = ::std::option::Option::None;
    }

    pub fn has_AHKMIEELHAJ(&self) -> bool {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AHKMIEELHAJ(&mut self, v: super::IMJKNBKHFIN::IMJKNBKHFIN) {
        self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AHKMIEELHAJ(&mut self) -> &mut super::IMJKNBKHFIN::IMJKNBKHFIN {
        if let ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(_)) = self.DIJMMHAAFGJ {
        } else {
            self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(super::IMJKNBKHFIN::IMJKNBKHFIN::new()));
        }
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AHKMIEELHAJ(&mut self) -> super::IMJKNBKHFIN::IMJKNBKHFIN {
        if self.has_AHKMIEELHAJ() {
            match self.DIJMMHAAFGJ.take() {
                ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IMJKNBKHFIN::IMJKNBKHFIN::new()
        }
    }

    // .FPNMFAMBIIL NJGKKOGFPBL = 1;

    pub fn NJGKKOGFPBL(&self) -> &super::FPNMFAMBIIL::FPNMFAMBIIL {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(ref v)) => v,
            _ => <super::FPNMFAMBIIL::FPNMFAMBIIL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NJGKKOGFPBL(&mut self) {
        self.DIJMMHAAFGJ = ::std::option::Option::None;
    }

    pub fn has_NJGKKOGFPBL(&self) -> bool {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NJGKKOGFPBL(&mut self, v: super::FPNMFAMBIIL::FPNMFAMBIIL) {
        self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NJGKKOGFPBL(&mut self) -> &mut super::FPNMFAMBIIL::FPNMFAMBIIL {
        if let ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(_)) = self.DIJMMHAAFGJ {
        } else {
            self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(super::FPNMFAMBIIL::FPNMFAMBIIL::new()));
        }
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NJGKKOGFPBL(&mut self) -> super::FPNMFAMBIIL::FPNMFAMBIIL {
        if self.has_NJGKKOGFPBL() {
            match self.DIJMMHAAFGJ.take() {
                ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FPNMFAMBIIL::FPNMFAMBIIL::new()
        }
    }

    // .NMIMOEMLFGP EFIMOAOLJNE = 4;

    pub fn EFIMOAOLJNE(&self) -> &super::NMIMOEMLFGP::NMIMOEMLFGP {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(ref v)) => v,
            _ => <super::NMIMOEMLFGP::NMIMOEMLFGP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EFIMOAOLJNE(&mut self) {
        self.DIJMMHAAFGJ = ::std::option::Option::None;
    }

    pub fn has_EFIMOAOLJNE(&self) -> bool {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EFIMOAOLJNE(&mut self, v: super::NMIMOEMLFGP::NMIMOEMLFGP) {
        self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EFIMOAOLJNE(&mut self) -> &mut super::NMIMOEMLFGP::NMIMOEMLFGP {
        if let ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(_)) = self.DIJMMHAAFGJ {
        } else {
            self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(super::NMIMOEMLFGP::NMIMOEMLFGP::new()));
        }
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EFIMOAOLJNE(&mut self) -> super::NMIMOEMLFGP::NMIMOEMLFGP {
        if self.has_EFIMOAOLJNE() {
            match self.DIJMMHAAFGJ.take() {
                ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NMIMOEMLFGP::NMIMOEMLFGP::new()
        }
    }

    // .MNCJPNFJLBC JOMHNGOAOIO = 14;

    pub fn JOMHNGOAOIO(&self) -> &super::MNCJPNFJLBC::MNCJPNFJLBC {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(ref v)) => v,
            _ => <super::MNCJPNFJLBC::MNCJPNFJLBC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JOMHNGOAOIO(&mut self) {
        self.DIJMMHAAFGJ = ::std::option::Option::None;
    }

    pub fn has_JOMHNGOAOIO(&self) -> bool {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JOMHNGOAOIO(&mut self, v: super::MNCJPNFJLBC::MNCJPNFJLBC) {
        self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JOMHNGOAOIO(&mut self) -> &mut super::MNCJPNFJLBC::MNCJPNFJLBC {
        if let ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(_)) = self.DIJMMHAAFGJ {
        } else {
            self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(super::MNCJPNFJLBC::MNCJPNFJLBC::new()));
        }
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JOMHNGOAOIO(&mut self) -> super::MNCJPNFJLBC::MNCJPNFJLBC {
        if self.has_JOMHNGOAOIO() {
            match self.DIJMMHAAFGJ.take() {
                ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MNCJPNFJLBC::MNCJPNFJLBC::new()
        }
    }

    // .ENOIDDNBAEP JDMGJDBMHEJ = 11;

    pub fn JDMGJDBMHEJ(&self) -> &super::ENOIDDNBAEP::ENOIDDNBAEP {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(ref v)) => v,
            _ => <super::ENOIDDNBAEP::ENOIDDNBAEP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JDMGJDBMHEJ(&mut self) {
        self.DIJMMHAAFGJ = ::std::option::Option::None;
    }

    pub fn has_JDMGJDBMHEJ(&self) -> bool {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JDMGJDBMHEJ(&mut self, v: super::ENOIDDNBAEP::ENOIDDNBAEP) {
        self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JDMGJDBMHEJ(&mut self) -> &mut super::ENOIDDNBAEP::ENOIDDNBAEP {
        if let ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(_)) = self.DIJMMHAAFGJ {
        } else {
            self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(super::ENOIDDNBAEP::ENOIDDNBAEP::new()));
        }
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JDMGJDBMHEJ(&mut self) -> super::ENOIDDNBAEP::ENOIDDNBAEP {
        if self.has_JDMGJDBMHEJ() {
            match self.DIJMMHAAFGJ.take() {
                ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ENOIDDNBAEP::ENOIDDNBAEP::new()
        }
    }

    // .JLENPNKJOJD CGEKHIPJCAJ = 7;

    pub fn CGEKHIPJCAJ(&self) -> &super::JLENPNKJOJD::JLENPNKJOJD {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(ref v)) => v,
            _ => <super::JLENPNKJOJD::JLENPNKJOJD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CGEKHIPJCAJ(&mut self) {
        self.DIJMMHAAFGJ = ::std::option::Option::None;
    }

    pub fn has_CGEKHIPJCAJ(&self) -> bool {
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CGEKHIPJCAJ(&mut self, v: super::JLENPNKJOJD::JLENPNKJOJD) {
        self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CGEKHIPJCAJ(&mut self) -> &mut super::JLENPNKJOJD::JLENPNKJOJD {
        if let ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(_)) = self.DIJMMHAAFGJ {
        } else {
            self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(super::JLENPNKJOJD::JLENPNKJOJD::new()));
        }
        match self.DIJMMHAAFGJ {
            ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CGEKHIPJCAJ(&mut self) -> super::JLENPNKJOJD::JLENPNKJOJD {
        if self.has_CGEKHIPJCAJ() {
            match self.DIJMMHAAFGJ.take() {
                ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JLENPNKJOJD::JLENPNKJOJD::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IMJKNBKHFIN::IMJKNBKHFIN>(
            "AHKMIEELHAJ",
            AKIEODPHAIN::has_AHKMIEELHAJ,
            AKIEODPHAIN::AHKMIEELHAJ,
            AKIEODPHAIN::mut_AHKMIEELHAJ,
            AKIEODPHAIN::set_AHKMIEELHAJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FPNMFAMBIIL::FPNMFAMBIIL>(
            "NJGKKOGFPBL",
            AKIEODPHAIN::has_NJGKKOGFPBL,
            AKIEODPHAIN::NJGKKOGFPBL,
            AKIEODPHAIN::mut_NJGKKOGFPBL,
            AKIEODPHAIN::set_NJGKKOGFPBL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NMIMOEMLFGP::NMIMOEMLFGP>(
            "EFIMOAOLJNE",
            AKIEODPHAIN::has_EFIMOAOLJNE,
            AKIEODPHAIN::EFIMOAOLJNE,
            AKIEODPHAIN::mut_EFIMOAOLJNE,
            AKIEODPHAIN::set_EFIMOAOLJNE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MNCJPNFJLBC::MNCJPNFJLBC>(
            "JOMHNGOAOIO",
            AKIEODPHAIN::has_JOMHNGOAOIO,
            AKIEODPHAIN::JOMHNGOAOIO,
            AKIEODPHAIN::mut_JOMHNGOAOIO,
            AKIEODPHAIN::set_JOMHNGOAOIO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ENOIDDNBAEP::ENOIDDNBAEP>(
            "JDMGJDBMHEJ",
            AKIEODPHAIN::has_JDMGJDBMHEJ,
            AKIEODPHAIN::JDMGJDBMHEJ,
            AKIEODPHAIN::mut_JDMGJDBMHEJ,
            AKIEODPHAIN::set_JDMGJDBMHEJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JLENPNKJOJD::JLENPNKJOJD>(
            "CGEKHIPJCAJ",
            AKIEODPHAIN::has_CGEKHIPJCAJ,
            AKIEODPHAIN::CGEKHIPJCAJ,
            AKIEODPHAIN::mut_CGEKHIPJCAJ,
            AKIEODPHAIN::set_CGEKHIPJCAJ,
        ));
        oneofs.push(akieodphain::DIJMMHAAFGJ::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AKIEODPHAIN>(
            "AKIEODPHAIN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AKIEODPHAIN {
    const NAME: &'static str = "AKIEODPHAIN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(is.read_message()?));
                },
                10 => {
                    self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(is.read_message()?));
                },
                34 => {
                    self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(is.read_message()?));
                },
                114 => {
                    self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(is.read_message()?));
                },
                90 => {
                    self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(is.read_message()?));
                },
                58 => {
                    self.DIJMMHAAFGJ = ::std::option::Option::Some(akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.DIJMMHAAFGJ {
            match v {
                &akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.DIJMMHAAFGJ {
            match v {
                &akieodphain::DIJMMHAAFGJ::AHKMIEELHAJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &akieodphain::DIJMMHAAFGJ::NJGKKOGFPBL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &akieodphain::DIJMMHAAFGJ::EFIMOAOLJNE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &akieodphain::DIJMMHAAFGJ::JOMHNGOAOIO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &akieodphain::DIJMMHAAFGJ::JDMGJDBMHEJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &akieodphain::DIJMMHAAFGJ::CGEKHIPJCAJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AKIEODPHAIN {
        AKIEODPHAIN::new()
    }

    fn clear(&mut self) {
        self.DIJMMHAAFGJ = ::std::option::Option::None;
        self.DIJMMHAAFGJ = ::std::option::Option::None;
        self.DIJMMHAAFGJ = ::std::option::Option::None;
        self.DIJMMHAAFGJ = ::std::option::Option::None;
        self.DIJMMHAAFGJ = ::std::option::Option::None;
        self.DIJMMHAAFGJ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AKIEODPHAIN {
        static instance: AKIEODPHAIN = AKIEODPHAIN {
            DIJMMHAAFGJ: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AKIEODPHAIN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AKIEODPHAIN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AKIEODPHAIN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AKIEODPHAIN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AKIEODPHAIN`
pub mod akieodphain {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AKIEODPHAIN.DIJMMHAAFGJ)
    pub enum DIJMMHAAFGJ {
        // @@protoc_insertion_point(oneof_field:AKIEODPHAIN.AHKMIEELHAJ)
        AHKMIEELHAJ(super::super::IMJKNBKHFIN::IMJKNBKHFIN),
        // @@protoc_insertion_point(oneof_field:AKIEODPHAIN.NJGKKOGFPBL)
        NJGKKOGFPBL(super::super::FPNMFAMBIIL::FPNMFAMBIIL),
        // @@protoc_insertion_point(oneof_field:AKIEODPHAIN.EFIMOAOLJNE)
        EFIMOAOLJNE(super::super::NMIMOEMLFGP::NMIMOEMLFGP),
        // @@protoc_insertion_point(oneof_field:AKIEODPHAIN.JOMHNGOAOIO)
        JOMHNGOAOIO(super::super::MNCJPNFJLBC::MNCJPNFJLBC),
        // @@protoc_insertion_point(oneof_field:AKIEODPHAIN.JDMGJDBMHEJ)
        JDMGJDBMHEJ(super::super::ENOIDDNBAEP::ENOIDDNBAEP),
        // @@protoc_insertion_point(oneof_field:AKIEODPHAIN.CGEKHIPJCAJ)
        CGEKHIPJCAJ(super::super::JLENPNKJOJD::JLENPNKJOJD),
    }

    impl ::protobuf::Oneof for DIJMMHAAFGJ {
    }

    impl ::protobuf::OneofFull for DIJMMHAAFGJ {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AKIEODPHAIN as ::protobuf::MessageFull>::descriptor().oneof_by_name("DIJMMHAAFGJ").unwrap()).clone()
        }
    }

    impl DIJMMHAAFGJ {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DIJMMHAAFGJ>("DIJMMHAAFGJ")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AKIEODPHAIN.proto\x1a\x11ENOIDDNBAEP.proto\x1a\x11FPNMFAMBIIL.prot\
    o\x1a\x11IMJKNBKHFIN.proto\x1a\x11JLENPNKJOJD.proto\x1a\x11MNCJPNFJLBC.p\
    roto\x1a\x11NMIMOEMLFGP.proto\"\xc8\x02\n\x0bAKIEODPHAIN\x120\n\x0bAHKMI\
    EELHAJ\x18\x02\x20\x01(\x0b2\x0c.IMJKNBKHFINH\0R\x0bAHKMIEELHAJ\x120\n\
    \x0bNJGKKOGFPBL\x18\x01\x20\x01(\x0b2\x0c.FPNMFAMBIILH\0R\x0bNJGKKOGFPBL\
    \x120\n\x0bEFIMOAOLJNE\x18\x04\x20\x01(\x0b2\x0c.NMIMOEMLFGPH\0R\x0bEFIM\
    OAOLJNE\x120\n\x0bJOMHNGOAOIO\x18\x0e\x20\x01(\x0b2\x0c.MNCJPNFJLBCH\0R\
    \x0bJOMHNGOAOIO\x120\n\x0bJDMGJDBMHEJ\x18\x0b\x20\x01(\x0b2\x0c.ENOIDDNB\
    AEPH\0R\x0bJDMGJDBMHEJ\x120\n\x0bCGEKHIPJCAJ\x18\x07\x20\x01(\x0b2\x0c.J\
    LENPNKJOJDH\0R\x0bCGEKHIPJCAJB\r\n\x0bDIJMMHAAFGJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::ENOIDDNBAEP::file_descriptor().clone());
            deps.push(super::FPNMFAMBIIL::file_descriptor().clone());
            deps.push(super::IMJKNBKHFIN::file_descriptor().clone());
            deps.push(super::JLENPNKJOJD::file_descriptor().clone());
            deps.push(super::MNCJPNFJLBC::file_descriptor().clone());
            deps.push(super::NMIMOEMLFGP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AKIEODPHAIN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
