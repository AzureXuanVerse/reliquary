// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `IIGDKLANFDC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:IIGDKLANFDC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IIGDKLANFDC {
    // message oneof groups
    pub EBKADLLNHJO: ::std::option::Option<iigdklanfdc::EBKADLLNHJO>,
    // special fields
    // @@protoc_insertion_point(special_field:IIGDKLANFDC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IIGDKLANFDC {
    fn default() -> &'a IIGDKLANFDC {
        <IIGDKLANFDC as ::protobuf::Message>::default_instance()
    }
}

impl IIGDKLANFDC {
    pub fn new() -> IIGDKLANFDC {
        ::std::default::Default::default()
    }

    // .DHBMIPDEJMD KLNIBEFPLCL = 5;

    pub fn KLNIBEFPLCL(&self) -> &super::DHBMIPDEJMD::DHBMIPDEJMD {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(ref v)) => v,
            _ => <super::DHBMIPDEJMD::DHBMIPDEJMD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KLNIBEFPLCL(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_KLNIBEFPLCL(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KLNIBEFPLCL(&mut self, v: super::DHBMIPDEJMD::DHBMIPDEJMD) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KLNIBEFPLCL(&mut self) -> &mut super::DHBMIPDEJMD::DHBMIPDEJMD {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(super::DHBMIPDEJMD::DHBMIPDEJMD::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KLNIBEFPLCL(&mut self) -> super::DHBMIPDEJMD::DHBMIPDEJMD {
        if self.has_KLNIBEFPLCL() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DHBMIPDEJMD::DHBMIPDEJMD::new()
        }
    }

    // .KDOPKHGLNBP AJPKMOHNMHC = 15;

    pub fn AJPKMOHNMHC(&self) -> &super::KDOPKHGLNBP::KDOPKHGLNBP {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(ref v)) => v,
            _ => <super::KDOPKHGLNBP::KDOPKHGLNBP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AJPKMOHNMHC(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_AJPKMOHNMHC(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AJPKMOHNMHC(&mut self, v: super::KDOPKHGLNBP::KDOPKHGLNBP) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AJPKMOHNMHC(&mut self) -> &mut super::KDOPKHGLNBP::KDOPKHGLNBP {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(super::KDOPKHGLNBP::KDOPKHGLNBP::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AJPKMOHNMHC(&mut self) -> super::KDOPKHGLNBP::KDOPKHGLNBP {
        if self.has_AJPKMOHNMHC() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KDOPKHGLNBP::KDOPKHGLNBP::new()
        }
    }

    // .GELDJPFIBFM FEJJPBCCJFD = 2;

    pub fn FEJJPBCCJFD(&self) -> &super::GELDJPFIBFM::GELDJPFIBFM {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(ref v)) => v,
            _ => <super::GELDJPFIBFM::GELDJPFIBFM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FEJJPBCCJFD(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_FEJJPBCCJFD(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FEJJPBCCJFD(&mut self, v: super::GELDJPFIBFM::GELDJPFIBFM) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FEJJPBCCJFD(&mut self) -> &mut super::GELDJPFIBFM::GELDJPFIBFM {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(super::GELDJPFIBFM::GELDJPFIBFM::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FEJJPBCCJFD(&mut self) -> super::GELDJPFIBFM::GELDJPFIBFM {
        if self.has_FEJJPBCCJFD() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GELDJPFIBFM::GELDJPFIBFM::new()
        }
    }

    // .PCELNBJLFPN GDNALENILEI = 13;

    pub fn GDNALENILEI(&self) -> &super::PCELNBJLFPN::PCELNBJLFPN {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GDNALENILEI(ref v)) => v,
            _ => <super::PCELNBJLFPN::PCELNBJLFPN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GDNALENILEI(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_GDNALENILEI(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GDNALENILEI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GDNALENILEI(&mut self, v: super::PCELNBJLFPN::PCELNBJLFPN) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GDNALENILEI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GDNALENILEI(&mut self) -> &mut super::PCELNBJLFPN::PCELNBJLFPN {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GDNALENILEI(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GDNALENILEI(super::PCELNBJLFPN::PCELNBJLFPN::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GDNALENILEI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GDNALENILEI(&mut self) -> super::PCELNBJLFPN::PCELNBJLFPN {
        if self.has_GDNALENILEI() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GDNALENILEI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PCELNBJLFPN::PCELNBJLFPN::new()
        }
    }

    // .OMEKMJONKPN IOPGGONMNNL = 12;

    pub fn IOPGGONMNNL(&self) -> &super::OMEKMJONKPN::OMEKMJONKPN {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(ref v)) => v,
            _ => <super::OMEKMJONKPN::OMEKMJONKPN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IOPGGONMNNL(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_IOPGGONMNNL(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IOPGGONMNNL(&mut self, v: super::OMEKMJONKPN::OMEKMJONKPN) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IOPGGONMNNL(&mut self) -> &mut super::OMEKMJONKPN::OMEKMJONKPN {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(super::OMEKMJONKPN::OMEKMJONKPN::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IOPGGONMNNL(&mut self) -> super::OMEKMJONKPN::OMEKMJONKPN {
        if self.has_IOPGGONMNNL() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMEKMJONKPN::OMEKMJONKPN::new()
        }
    }

    // .GNLGJJFNHND MOBJJPMIAAB = 1;

    pub fn MOBJJPMIAAB(&self) -> &super::GNLGJJFNHND::GNLGJJFNHND {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(ref v)) => v,
            _ => <super::GNLGJJFNHND::GNLGJJFNHND as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MOBJJPMIAAB(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_MOBJJPMIAAB(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MOBJJPMIAAB(&mut self, v: super::GNLGJJFNHND::GNLGJJFNHND) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MOBJJPMIAAB(&mut self) -> &mut super::GNLGJJFNHND::GNLGJJFNHND {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(super::GNLGJJFNHND::GNLGJJFNHND::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MOBJJPMIAAB(&mut self) -> super::GNLGJJFNHND::GNLGJJFNHND {
        if self.has_MOBJJPMIAAB() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GNLGJJFNHND::GNLGJJFNHND::new()
        }
    }

    // .EMAKAJDAFKP CFJMOBMCLBI = 14;

    pub fn CFJMOBMCLBI(&self) -> &super::EMAKAJDAFKP::EMAKAJDAFKP {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(ref v)) => v,
            _ => <super::EMAKAJDAFKP::EMAKAJDAFKP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CFJMOBMCLBI(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_CFJMOBMCLBI(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CFJMOBMCLBI(&mut self, v: super::EMAKAJDAFKP::EMAKAJDAFKP) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CFJMOBMCLBI(&mut self) -> &mut super::EMAKAJDAFKP::EMAKAJDAFKP {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(super::EMAKAJDAFKP::EMAKAJDAFKP::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CFJMOBMCLBI(&mut self) -> super::EMAKAJDAFKP::EMAKAJDAFKP {
        if self.has_CFJMOBMCLBI() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EMAKAJDAFKP::EMAKAJDAFKP::new()
        }
    }

    // .FCMHGHPOCFA GLCGKNINAOG = 11;

    pub fn GLCGKNINAOG(&self) -> &super::FCMHGHPOCFA::FCMHGHPOCFA {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(ref v)) => v,
            _ => <super::FCMHGHPOCFA::FCMHGHPOCFA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GLCGKNINAOG(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_GLCGKNINAOG(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GLCGKNINAOG(&mut self, v: super::FCMHGHPOCFA::FCMHGHPOCFA) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GLCGKNINAOG(&mut self) -> &mut super::FCMHGHPOCFA::FCMHGHPOCFA {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(super::FCMHGHPOCFA::FCMHGHPOCFA::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GLCGKNINAOG(&mut self) -> super::FCMHGHPOCFA::FCMHGHPOCFA {
        if self.has_GLCGKNINAOG() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FCMHGHPOCFA::FCMHGHPOCFA::new()
        }
    }

    // .EFINDLMBMBF JEOEJADOGDF = 7;

    pub fn JEOEJADOGDF(&self) -> &super::EFINDLMBMBF::EFINDLMBMBF {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(ref v)) => v,
            _ => <super::EFINDLMBMBF::EFINDLMBMBF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JEOEJADOGDF(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_JEOEJADOGDF(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JEOEJADOGDF(&mut self, v: super::EFINDLMBMBF::EFINDLMBMBF) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JEOEJADOGDF(&mut self) -> &mut super::EFINDLMBMBF::EFINDLMBMBF {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(super::EFINDLMBMBF::EFINDLMBMBF::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JEOEJADOGDF(&mut self) -> super::EFINDLMBMBF::EFINDLMBMBF {
        if self.has_JEOEJADOGDF() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EFINDLMBMBF::EFINDLMBMBF::new()
        }
    }

    // .MINKLPMIELF BAGHNHIKFDC = 4;

    pub fn BAGHNHIKFDC(&self) -> &super::MINKLPMIELF::MINKLPMIELF {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(ref v)) => v,
            _ => <super::MINKLPMIELF::MINKLPMIELF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BAGHNHIKFDC(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
    }

    pub fn has_BAGHNHIKFDC(&self) -> bool {
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BAGHNHIKFDC(&mut self, v: super::MINKLPMIELF::MINKLPMIELF) {
        self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BAGHNHIKFDC(&mut self) -> &mut super::MINKLPMIELF::MINKLPMIELF {
        if let ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(_)) = self.EBKADLLNHJO {
        } else {
            self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(super::MINKLPMIELF::MINKLPMIELF::new()));
        }
        match self.EBKADLLNHJO {
            ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BAGHNHIKFDC(&mut self) -> super::MINKLPMIELF::MINKLPMIELF {
        if self.has_BAGHNHIKFDC() {
            match self.EBKADLLNHJO.take() {
                ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MINKLPMIELF::MINKLPMIELF::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DHBMIPDEJMD::DHBMIPDEJMD>(
            "KLNIBEFPLCL",
            IIGDKLANFDC::has_KLNIBEFPLCL,
            IIGDKLANFDC::KLNIBEFPLCL,
            IIGDKLANFDC::mut_KLNIBEFPLCL,
            IIGDKLANFDC::set_KLNIBEFPLCL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KDOPKHGLNBP::KDOPKHGLNBP>(
            "AJPKMOHNMHC",
            IIGDKLANFDC::has_AJPKMOHNMHC,
            IIGDKLANFDC::AJPKMOHNMHC,
            IIGDKLANFDC::mut_AJPKMOHNMHC,
            IIGDKLANFDC::set_AJPKMOHNMHC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GELDJPFIBFM::GELDJPFIBFM>(
            "FEJJPBCCJFD",
            IIGDKLANFDC::has_FEJJPBCCJFD,
            IIGDKLANFDC::FEJJPBCCJFD,
            IIGDKLANFDC::mut_FEJJPBCCJFD,
            IIGDKLANFDC::set_FEJJPBCCJFD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PCELNBJLFPN::PCELNBJLFPN>(
            "GDNALENILEI",
            IIGDKLANFDC::has_GDNALENILEI,
            IIGDKLANFDC::GDNALENILEI,
            IIGDKLANFDC::mut_GDNALENILEI,
            IIGDKLANFDC::set_GDNALENILEI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMEKMJONKPN::OMEKMJONKPN>(
            "IOPGGONMNNL",
            IIGDKLANFDC::has_IOPGGONMNNL,
            IIGDKLANFDC::IOPGGONMNNL,
            IIGDKLANFDC::mut_IOPGGONMNNL,
            IIGDKLANFDC::set_IOPGGONMNNL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GNLGJJFNHND::GNLGJJFNHND>(
            "MOBJJPMIAAB",
            IIGDKLANFDC::has_MOBJJPMIAAB,
            IIGDKLANFDC::MOBJJPMIAAB,
            IIGDKLANFDC::mut_MOBJJPMIAAB,
            IIGDKLANFDC::set_MOBJJPMIAAB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EMAKAJDAFKP::EMAKAJDAFKP>(
            "CFJMOBMCLBI",
            IIGDKLANFDC::has_CFJMOBMCLBI,
            IIGDKLANFDC::CFJMOBMCLBI,
            IIGDKLANFDC::mut_CFJMOBMCLBI,
            IIGDKLANFDC::set_CFJMOBMCLBI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FCMHGHPOCFA::FCMHGHPOCFA>(
            "GLCGKNINAOG",
            IIGDKLANFDC::has_GLCGKNINAOG,
            IIGDKLANFDC::GLCGKNINAOG,
            IIGDKLANFDC::mut_GLCGKNINAOG,
            IIGDKLANFDC::set_GLCGKNINAOG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EFINDLMBMBF::EFINDLMBMBF>(
            "JEOEJADOGDF",
            IIGDKLANFDC::has_JEOEJADOGDF,
            IIGDKLANFDC::JEOEJADOGDF,
            IIGDKLANFDC::mut_JEOEJADOGDF,
            IIGDKLANFDC::set_JEOEJADOGDF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MINKLPMIELF::MINKLPMIELF>(
            "BAGHNHIKFDC",
            IIGDKLANFDC::has_BAGHNHIKFDC,
            IIGDKLANFDC::BAGHNHIKFDC,
            IIGDKLANFDC::mut_BAGHNHIKFDC,
            IIGDKLANFDC::set_BAGHNHIKFDC,
        ));
        oneofs.push(iigdklanfdc::EBKADLLNHJO::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IIGDKLANFDC>(
            "IIGDKLANFDC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IIGDKLANFDC {
    const NAME: &'static str = "IIGDKLANFDC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                42 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(is.read_message()?));
                },
                122 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(is.read_message()?));
                },
                18 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(is.read_message()?));
                },
                106 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GDNALENILEI(is.read_message()?));
                },
                98 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(is.read_message()?));
                },
                10 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(is.read_message()?));
                },
                114 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(is.read_message()?));
                },
                90 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(is.read_message()?));
                },
                58 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(is.read_message()?));
                },
                34 => {
                    self.EBKADLLNHJO = ::std::option::Option::Some(iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.EBKADLLNHJO {
            match v {
                &iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &iigdklanfdc::EBKADLLNHJO::GDNALENILEI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.EBKADLLNHJO {
            match v {
                &iigdklanfdc::EBKADLLNHJO::KLNIBEFPLCL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &iigdklanfdc::EBKADLLNHJO::AJPKMOHNMHC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &iigdklanfdc::EBKADLLNHJO::FEJJPBCCJFD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &iigdklanfdc::EBKADLLNHJO::GDNALENILEI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &iigdklanfdc::EBKADLLNHJO::IOPGGONMNNL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &iigdklanfdc::EBKADLLNHJO::MOBJJPMIAAB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &iigdklanfdc::EBKADLLNHJO::CFJMOBMCLBI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &iigdklanfdc::EBKADLLNHJO::GLCGKNINAOG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &iigdklanfdc::EBKADLLNHJO::JEOEJADOGDF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &iigdklanfdc::EBKADLLNHJO::BAGHNHIKFDC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IIGDKLANFDC {
        IIGDKLANFDC::new()
    }

    fn clear(&mut self) {
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.EBKADLLNHJO = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IIGDKLANFDC {
        static instance: IIGDKLANFDC = IIGDKLANFDC {
            EBKADLLNHJO: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IIGDKLANFDC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IIGDKLANFDC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IIGDKLANFDC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IIGDKLANFDC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `IIGDKLANFDC`
pub mod iigdklanfdc {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:IIGDKLANFDC.EBKADLLNHJO)
    pub enum EBKADLLNHJO {
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.KLNIBEFPLCL)
        KLNIBEFPLCL(super::super::DHBMIPDEJMD::DHBMIPDEJMD),
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.AJPKMOHNMHC)
        AJPKMOHNMHC(super::super::KDOPKHGLNBP::KDOPKHGLNBP),
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.FEJJPBCCJFD)
        FEJJPBCCJFD(super::super::GELDJPFIBFM::GELDJPFIBFM),
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.GDNALENILEI)
        GDNALENILEI(super::super::PCELNBJLFPN::PCELNBJLFPN),
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.IOPGGONMNNL)
        IOPGGONMNNL(super::super::OMEKMJONKPN::OMEKMJONKPN),
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.MOBJJPMIAAB)
        MOBJJPMIAAB(super::super::GNLGJJFNHND::GNLGJJFNHND),
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.CFJMOBMCLBI)
        CFJMOBMCLBI(super::super::EMAKAJDAFKP::EMAKAJDAFKP),
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.GLCGKNINAOG)
        GLCGKNINAOG(super::super::FCMHGHPOCFA::FCMHGHPOCFA),
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.JEOEJADOGDF)
        JEOEJADOGDF(super::super::EFINDLMBMBF::EFINDLMBMBF),
        // @@protoc_insertion_point(oneof_field:IIGDKLANFDC.BAGHNHIKFDC)
        BAGHNHIKFDC(super::super::MINKLPMIELF::MINKLPMIELF),
    }

    impl ::protobuf::Oneof for EBKADLLNHJO {
    }

    impl ::protobuf::OneofFull for EBKADLLNHJO {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::IIGDKLANFDC as ::protobuf::MessageFull>::descriptor().oneof_by_name("EBKADLLNHJO").unwrap()).clone()
        }
    }

    impl EBKADLLNHJO {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<EBKADLLNHJO>("EBKADLLNHJO")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11IIGDKLANFDC.proto\x1a\x11DHBMIPDEJMD.proto\x1a\x11EFINDLMBMBF.prot\
    o\x1a\x11EMAKAJDAFKP.proto\x1a\x11FCMHGHPOCFA.proto\x1a\x11GELDJPFIBFM.p\
    roto\x1a\x11GNLGJJFNHND.proto\x1a\x11KDOPKHGLNBP.proto\x1a\x11MINKLPMIEL\
    F.proto\x1a\x11OMEKMJONKPN.proto\x1a\x11PCELNBJLFPN.proto\"\x90\x04\n\
    \x0bIIGDKLANFDC\x120\n\x0bKLNIBEFPLCL\x18\x05\x20\x01(\x0b2\x0c.DHBMIPDE\
    JMDH\0R\x0bKLNIBEFPLCL\x120\n\x0bAJPKMOHNMHC\x18\x0f\x20\x01(\x0b2\x0c.K\
    DOPKHGLNBPH\0R\x0bAJPKMOHNMHC\x120\n\x0bFEJJPBCCJFD\x18\x02\x20\x01(\x0b\
    2\x0c.GELDJPFIBFMH\0R\x0bFEJJPBCCJFD\x120\n\x0bGDNALENILEI\x18\r\x20\x01\
    (\x0b2\x0c.PCELNBJLFPNH\0R\x0bGDNALENILEI\x120\n\x0bIOPGGONMNNL\x18\x0c\
    \x20\x01(\x0b2\x0c.OMEKMJONKPNH\0R\x0bIOPGGONMNNL\x120\n\x0bMOBJJPMIAAB\
    \x18\x01\x20\x01(\x0b2\x0c.GNLGJJFNHNDH\0R\x0bMOBJJPMIAAB\x120\n\x0bCFJM\
    OBMCLBI\x18\x0e\x20\x01(\x0b2\x0c.EMAKAJDAFKPH\0R\x0bCFJMOBMCLBI\x120\n\
    \x0bGLCGKNINAOG\x18\x0b\x20\x01(\x0b2\x0c.FCMHGHPOCFAH\0R\x0bGLCGKNINAOG\
    \x120\n\x0bJEOEJADOGDF\x18\x07\x20\x01(\x0b2\x0c.EFINDLMBMBFH\0R\x0bJEOE\
    JADOGDF\x120\n\x0bBAGHNHIKFDC\x18\x04\x20\x01(\x0b2\x0c.MINKLPMIELFH\0R\
    \x0bBAGHNHIKFDCB\r\n\x0bEBKADLLNHJOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::DHBMIPDEJMD::file_descriptor().clone());
            deps.push(super::EFINDLMBMBF::file_descriptor().clone());
            deps.push(super::EMAKAJDAFKP::file_descriptor().clone());
            deps.push(super::FCMHGHPOCFA::file_descriptor().clone());
            deps.push(super::GELDJPFIBFM::file_descriptor().clone());
            deps.push(super::GNLGJJFNHND::file_descriptor().clone());
            deps.push(super::KDOPKHGLNBP::file_descriptor().clone());
            deps.push(super::MINKLPMIELF::file_descriptor().clone());
            deps.push(super::OMEKMJONKPN::file_descriptor().clone());
            deps.push(super::PCELNBJLFPN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(IIGDKLANFDC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
