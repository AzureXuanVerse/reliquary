// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LPLJEIFFNON.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:LPLJEIFFNON)
pub enum LPLJEIFFNON {
    // @@protoc_insertion_point(enum_value:LPLJEIFFNON.MatchRoomCharacterStatus_None)
    MatchRoomCharacterStatus_None = 0,
    // @@protoc_insertion_point(enum_value:LPLJEIFFNON.MatchRoomCharacterStatus_Idle)
    MatchRoomCharacterStatus_Idle = 1,
    // @@protoc_insertion_point(enum_value:LPLJEIFFNON.MatchRoomCharacterStatus_Operating)
    MatchRoomCharacterStatus_Operating = 2,
    // @@protoc_insertion_point(enum_value:LPLJEIFFNON.MatchRoomCharacterStatus_Ready)
    MatchRoomCharacterStatus_Ready = 3,
    // @@protoc_insertion_point(enum_value:LPLJEIFFNON.MatchRoomCharacterStatus_Fighting)
    MatchRoomCharacterStatus_Fighting = 4,
    // @@protoc_insertion_point(enum_value:LPLJEIFFNON.MatchRoomCharacterStatus_Watching)
    MatchRoomCharacterStatus_Watching = 5,
}

impl ::protobuf::Enum for LPLJEIFFNON {
    const NAME: &'static str = "LPLJEIFFNON";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LPLJEIFFNON> {
        match value {
            0 => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_None),
            1 => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Idle),
            2 => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Operating),
            3 => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Ready),
            4 => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Fighting),
            5 => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Watching),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<LPLJEIFFNON> {
        match str {
            "MatchRoomCharacterStatus_None" => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_None),
            "MatchRoomCharacterStatus_Idle" => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Idle),
            "MatchRoomCharacterStatus_Operating" => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Operating),
            "MatchRoomCharacterStatus_Ready" => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Ready),
            "MatchRoomCharacterStatus_Fighting" => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Fighting),
            "MatchRoomCharacterStatus_Watching" => ::std::option::Option::Some(LPLJEIFFNON::MatchRoomCharacterStatus_Watching),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [LPLJEIFFNON] = &[
        LPLJEIFFNON::MatchRoomCharacterStatus_None,
        LPLJEIFFNON::MatchRoomCharacterStatus_Idle,
        LPLJEIFFNON::MatchRoomCharacterStatus_Operating,
        LPLJEIFFNON::MatchRoomCharacterStatus_Ready,
        LPLJEIFFNON::MatchRoomCharacterStatus_Fighting,
        LPLJEIFFNON::MatchRoomCharacterStatus_Watching,
    ];
}

impl ::protobuf::EnumFull for LPLJEIFFNON {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("LPLJEIFFNON").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for LPLJEIFFNON {
    fn default() -> Self {
        LPLJEIFFNON::MatchRoomCharacterStatus_None
    }
}

impl LPLJEIFFNON {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LPLJEIFFNON>("LPLJEIFFNON")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LPLJEIFFNON.proto*\xed\x01\n\x0bLPLJEIFFNON\x12!\n\x1dMatchRoomCha\
    racterStatus_None\x10\0\x12!\n\x1dMatchRoomCharacterStatus_Idle\x10\x01\
    \x12&\n\"MatchRoomCharacterStatus_Operating\x10\x02\x12\"\n\x1eMatchRoom\
    CharacterStatus_Ready\x10\x03\x12%\n!MatchRoomCharacterStatus_Fighting\
    \x10\x04\x12%\n!MatchRoomCharacterStatus_Watching\x10\x05b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(LPLJEIFFNON::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
