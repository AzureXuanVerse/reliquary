// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JCPBMBJDOIM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:JCPBMBJDOIM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JCPBMBJDOIM {
    // message fields
    // @@protoc_insertion_point(field:JCPBMBJDOIM.EBEPHGLDCNH)
    pub EBEPHGLDCNH: bool,
    // @@protoc_insertion_point(field:JCPBMBJDOIM.KMCCKIMHBBJ)
    pub KMCCKIMHBBJ: bool,
    // @@protoc_insertion_point(field:JCPBMBJDOIM.OIGIPMEOEKB)
    pub OIGIPMEOEKB: bool,
    // @@protoc_insertion_point(field:JCPBMBJDOIM.KOFDEOAGLGK)
    pub KOFDEOAGLGK: bool,
    // @@protoc_insertion_point(field:JCPBMBJDOIM.KKHHCOPENGM)
    pub KKHHCOPENGM: bool,
    // @@protoc_insertion_point(field:JCPBMBJDOIM.KHKAAPACGJF)
    pub KHKAAPACGJF: bool,
    // @@protoc_insertion_point(field:JCPBMBJDOIM.EFCCDDMNMLP)
    pub EFCCDDMNMLP: bool,
    // @@protoc_insertion_point(field:JCPBMBJDOIM.KMACDMAFFFN)
    pub KMACDMAFFFN: bool,
    // @@protoc_insertion_point(field:JCPBMBJDOIM.MEFFKCAPBFJ)
    pub MEFFKCAPBFJ: bool,
    // @@protoc_insertion_point(field:JCPBMBJDOIM.DENFLJKHNFO)
    pub DENFLJKHNFO: bool,
    // special fields
    // @@protoc_insertion_point(special_field:JCPBMBJDOIM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JCPBMBJDOIM {
    fn default() -> &'a JCPBMBJDOIM {
        <JCPBMBJDOIM as ::protobuf::Message>::default_instance()
    }
}

impl JCPBMBJDOIM {
    pub fn new() -> JCPBMBJDOIM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EBEPHGLDCNH",
            |m: &JCPBMBJDOIM| { &m.EBEPHGLDCNH },
            |m: &mut JCPBMBJDOIM| { &mut m.EBEPHGLDCNH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KMCCKIMHBBJ",
            |m: &JCPBMBJDOIM| { &m.KMCCKIMHBBJ },
            |m: &mut JCPBMBJDOIM| { &mut m.KMCCKIMHBBJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OIGIPMEOEKB",
            |m: &JCPBMBJDOIM| { &m.OIGIPMEOEKB },
            |m: &mut JCPBMBJDOIM| { &mut m.OIGIPMEOEKB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KOFDEOAGLGK",
            |m: &JCPBMBJDOIM| { &m.KOFDEOAGLGK },
            |m: &mut JCPBMBJDOIM| { &mut m.KOFDEOAGLGK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KKHHCOPENGM",
            |m: &JCPBMBJDOIM| { &m.KKHHCOPENGM },
            |m: &mut JCPBMBJDOIM| { &mut m.KKHHCOPENGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KHKAAPACGJF",
            |m: &JCPBMBJDOIM| { &m.KHKAAPACGJF },
            |m: &mut JCPBMBJDOIM| { &mut m.KHKAAPACGJF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EFCCDDMNMLP",
            |m: &JCPBMBJDOIM| { &m.EFCCDDMNMLP },
            |m: &mut JCPBMBJDOIM| { &mut m.EFCCDDMNMLP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KMACDMAFFFN",
            |m: &JCPBMBJDOIM| { &m.KMACDMAFFFN },
            |m: &mut JCPBMBJDOIM| { &mut m.KMACDMAFFFN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MEFFKCAPBFJ",
            |m: &JCPBMBJDOIM| { &m.MEFFKCAPBFJ },
            |m: &mut JCPBMBJDOIM| { &mut m.MEFFKCAPBFJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DENFLJKHNFO",
            |m: &JCPBMBJDOIM| { &m.DENFLJKHNFO },
            |m: &mut JCPBMBJDOIM| { &mut m.DENFLJKHNFO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JCPBMBJDOIM>(
            "JCPBMBJDOIM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JCPBMBJDOIM {
    const NAME: &'static str = "JCPBMBJDOIM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.EBEPHGLDCNH = is.read_bool()?;
                },
                104 => {
                    self.KMCCKIMHBBJ = is.read_bool()?;
                },
                120 => {
                    self.OIGIPMEOEKB = is.read_bool()?;
                },
                32 => {
                    self.KOFDEOAGLGK = is.read_bool()?;
                },
                40 => {
                    self.KKHHCOPENGM = is.read_bool()?;
                },
                48 => {
                    self.KHKAAPACGJF = is.read_bool()?;
                },
                8 => {
                    self.EFCCDDMNMLP = is.read_bool()?;
                },
                64 => {
                    self.KMACDMAFFFN = is.read_bool()?;
                },
                80 => {
                    self.MEFFKCAPBFJ = is.read_bool()?;
                },
                96 => {
                    self.DENFLJKHNFO = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.EBEPHGLDCNH != false {
            my_size += 1 + 1;
        }
        if self.KMCCKIMHBBJ != false {
            my_size += 1 + 1;
        }
        if self.OIGIPMEOEKB != false {
            my_size += 1 + 1;
        }
        if self.KOFDEOAGLGK != false {
            my_size += 1 + 1;
        }
        if self.KKHHCOPENGM != false {
            my_size += 1 + 1;
        }
        if self.KHKAAPACGJF != false {
            my_size += 1 + 1;
        }
        if self.EFCCDDMNMLP != false {
            my_size += 1 + 1;
        }
        if self.KMACDMAFFFN != false {
            my_size += 1 + 1;
        }
        if self.MEFFKCAPBFJ != false {
            my_size += 1 + 1;
        }
        if self.DENFLJKHNFO != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.EBEPHGLDCNH != false {
            os.write_bool(14, self.EBEPHGLDCNH)?;
        }
        if self.KMCCKIMHBBJ != false {
            os.write_bool(13, self.KMCCKIMHBBJ)?;
        }
        if self.OIGIPMEOEKB != false {
            os.write_bool(15, self.OIGIPMEOEKB)?;
        }
        if self.KOFDEOAGLGK != false {
            os.write_bool(4, self.KOFDEOAGLGK)?;
        }
        if self.KKHHCOPENGM != false {
            os.write_bool(5, self.KKHHCOPENGM)?;
        }
        if self.KHKAAPACGJF != false {
            os.write_bool(6, self.KHKAAPACGJF)?;
        }
        if self.EFCCDDMNMLP != false {
            os.write_bool(1, self.EFCCDDMNMLP)?;
        }
        if self.KMACDMAFFFN != false {
            os.write_bool(8, self.KMACDMAFFFN)?;
        }
        if self.MEFFKCAPBFJ != false {
            os.write_bool(10, self.MEFFKCAPBFJ)?;
        }
        if self.DENFLJKHNFO != false {
            os.write_bool(12, self.DENFLJKHNFO)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JCPBMBJDOIM {
        JCPBMBJDOIM::new()
    }

    fn clear(&mut self) {
        self.EBEPHGLDCNH = false;
        self.KMCCKIMHBBJ = false;
        self.OIGIPMEOEKB = false;
        self.KOFDEOAGLGK = false;
        self.KKHHCOPENGM = false;
        self.KHKAAPACGJF = false;
        self.EFCCDDMNMLP = false;
        self.KMACDMAFFFN = false;
        self.MEFFKCAPBFJ = false;
        self.DENFLJKHNFO = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JCPBMBJDOIM {
        static instance: JCPBMBJDOIM = JCPBMBJDOIM {
            EBEPHGLDCNH: false,
            KMCCKIMHBBJ: false,
            OIGIPMEOEKB: false,
            KOFDEOAGLGK: false,
            KKHHCOPENGM: false,
            KHKAAPACGJF: false,
            EFCCDDMNMLP: false,
            KMACDMAFFFN: false,
            MEFFKCAPBFJ: false,
            DENFLJKHNFO: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JCPBMBJDOIM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JCPBMBJDOIM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JCPBMBJDOIM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JCPBMBJDOIM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JCPBMBJDOIM.proto\"\xe1\x02\n\x0bJCPBMBJDOIM\x12\x20\n\x0bEBEPHGLD\
    CNH\x18\x0e\x20\x01(\x08R\x0bEBEPHGLDCNH\x12\x20\n\x0bKMCCKIMHBBJ\x18\r\
    \x20\x01(\x08R\x0bKMCCKIMHBBJ\x12\x20\n\x0bOIGIPMEOEKB\x18\x0f\x20\x01(\
    \x08R\x0bOIGIPMEOEKB\x12\x20\n\x0bKOFDEOAGLGK\x18\x04\x20\x01(\x08R\x0bK\
    OFDEOAGLGK\x12\x20\n\x0bKKHHCOPENGM\x18\x05\x20\x01(\x08R\x0bKKHHCOPENGM\
    \x12\x20\n\x0bKHKAAPACGJF\x18\x06\x20\x01(\x08R\x0bKHKAAPACGJF\x12\x20\n\
    \x0bEFCCDDMNMLP\x18\x01\x20\x01(\x08R\x0bEFCCDDMNMLP\x12\x20\n\x0bKMACDM\
    AFFFN\x18\x08\x20\x01(\x08R\x0bKMACDMAFFFN\x12\x20\n\x0bMEFFKCAPBFJ\x18\
    \n\x20\x01(\x08R\x0bMEFFKCAPBFJ\x12\x20\n\x0bDENFLJKHNFO\x18\x0c\x20\x01\
    (\x08R\x0bDENFLJKHNFOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JCPBMBJDOIM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
