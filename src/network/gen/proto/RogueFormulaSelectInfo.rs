// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueFormulaSelectInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:RogueFormulaSelectInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueFormulaSelectInfo {
    // message fields
    // @@protoc_insertion_point(field:RogueFormulaSelectInfo.RollFormulaCostData)
    pub RollFormulaCostData: ::protobuf::MessageField<super::ItemCostList::ItemCostList>,
    // @@protoc_insertion_point(field:RogueFormulaSelectInfo.SelectFormulaIdList)
    pub SelectFormulaIdList: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RogueFormulaSelectInfo.RollFormulaFreeCount)
    pub RollFormulaFreeCount: u32,
    // @@protoc_insertion_point(field:RogueFormulaSelectInfo.HandbookUnlockFormulaIdList)
    pub HandbookUnlockFormulaIdList: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RogueFormulaSelectInfo.RollFormulaCount)
    pub RollFormulaCount: u32,
    // @@protoc_insertion_point(field:RogueFormulaSelectInfo.CanRoll)
    pub CanRoll: bool,
    // @@protoc_insertion_point(field:RogueFormulaSelectInfo.RollFormulaMaxCount)
    pub RollFormulaMaxCount: u32,
    // @@protoc_insertion_point(field:RogueFormulaSelectInfo.HintId)
    pub HintId: u32,
    // special fields
    // @@protoc_insertion_point(special_field:RogueFormulaSelectInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueFormulaSelectInfo {
    fn default() -> &'a RogueFormulaSelectInfo {
        <RogueFormulaSelectInfo as ::protobuf::Message>::default_instance()
    }
}

impl RogueFormulaSelectInfo {
    pub fn new() -> RogueFormulaSelectInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemCostList::ItemCostList>(
            "RollFormulaCostData",
            |m: &RogueFormulaSelectInfo| { &m.RollFormulaCostData },
            |m: &mut RogueFormulaSelectInfo| { &mut m.RollFormulaCostData },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "SelectFormulaIdList",
            |m: &RogueFormulaSelectInfo| { &m.SelectFormulaIdList },
            |m: &mut RogueFormulaSelectInfo| { &mut m.SelectFormulaIdList },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "RollFormulaFreeCount",
            |m: &RogueFormulaSelectInfo| { &m.RollFormulaFreeCount },
            |m: &mut RogueFormulaSelectInfo| { &mut m.RollFormulaFreeCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HandbookUnlockFormulaIdList",
            |m: &RogueFormulaSelectInfo| { &m.HandbookUnlockFormulaIdList },
            |m: &mut RogueFormulaSelectInfo| { &mut m.HandbookUnlockFormulaIdList },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "RollFormulaCount",
            |m: &RogueFormulaSelectInfo| { &m.RollFormulaCount },
            |m: &mut RogueFormulaSelectInfo| { &mut m.RollFormulaCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CanRoll",
            |m: &RogueFormulaSelectInfo| { &m.CanRoll },
            |m: &mut RogueFormulaSelectInfo| { &mut m.CanRoll },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "RollFormulaMaxCount",
            |m: &RogueFormulaSelectInfo| { &m.RollFormulaMaxCount },
            |m: &mut RogueFormulaSelectInfo| { &mut m.RollFormulaMaxCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HintId",
            |m: &RogueFormulaSelectInfo| { &m.HintId },
            |m: &mut RogueFormulaSelectInfo| { &mut m.HintId },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueFormulaSelectInfo>(
            "RogueFormulaSelectInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueFormulaSelectInfo {
    const NAME: &'static str = "RogueFormulaSelectInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.RollFormulaCostData)?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.SelectFormulaIdList)?;
                },
                64 => {
                    self.SelectFormulaIdList.push(is.read_uint32()?);
                },
                8 => {
                    self.RollFormulaFreeCount = is.read_uint32()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.HandbookUnlockFormulaIdList)?;
                },
                24 => {
                    self.HandbookUnlockFormulaIdList.push(is.read_uint32()?);
                },
                72 => {
                    self.RollFormulaCount = is.read_uint32()?;
                },
                16 => {
                    self.CanRoll = is.read_bool()?;
                },
                40 => {
                    self.RollFormulaMaxCount = is.read_uint32()?;
                },
                56 => {
                    self.HintId = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.RollFormulaCostData.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.SelectFormulaIdList {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if self.RollFormulaFreeCount != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.RollFormulaFreeCount);
        }
        for value in &self.HandbookUnlockFormulaIdList {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        if self.RollFormulaCount != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.RollFormulaCount);
        }
        if self.CanRoll != false {
            my_size += 1 + 1;
        }
        if self.RollFormulaMaxCount != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.RollFormulaMaxCount);
        }
        if self.HintId != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.HintId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.RollFormulaCostData.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        for v in &self.SelectFormulaIdList {
            os.write_uint32(8, *v)?;
        };
        if self.RollFormulaFreeCount != 0 {
            os.write_uint32(1, self.RollFormulaFreeCount)?;
        }
        for v in &self.HandbookUnlockFormulaIdList {
            os.write_uint32(3, *v)?;
        };
        if self.RollFormulaCount != 0 {
            os.write_uint32(9, self.RollFormulaCount)?;
        }
        if self.CanRoll != false {
            os.write_bool(2, self.CanRoll)?;
        }
        if self.RollFormulaMaxCount != 0 {
            os.write_uint32(5, self.RollFormulaMaxCount)?;
        }
        if self.HintId != 0 {
            os.write_uint32(7, self.HintId)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueFormulaSelectInfo {
        RogueFormulaSelectInfo::new()
    }

    fn clear(&mut self) {
        self.RollFormulaCostData.clear();
        self.SelectFormulaIdList.clear();
        self.RollFormulaFreeCount = 0;
        self.HandbookUnlockFormulaIdList.clear();
        self.RollFormulaCount = 0;
        self.CanRoll = false;
        self.RollFormulaMaxCount = 0;
        self.HintId = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueFormulaSelectInfo {
        static instance: RogueFormulaSelectInfo = RogueFormulaSelectInfo {
            RollFormulaCostData: ::protobuf::MessageField::none(),
            SelectFormulaIdList: ::std::vec::Vec::new(),
            RollFormulaFreeCount: 0,
            HandbookUnlockFormulaIdList: ::std::vec::Vec::new(),
            RollFormulaCount: 0,
            CanRoll: false,
            RollFormulaMaxCount: 0,
            HintId: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueFormulaSelectInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueFormulaSelectInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueFormulaSelectInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueFormulaSelectInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cRogueFormulaSelectInfo.proto\x1a\x12ItemCostList.proto\"\x91\x03\n\
    \x16RogueFormulaSelectInfo\x12?\n\x13RollFormulaCostData\x18\x0b\x20\x01\
    (\x0b2\r.ItemCostListR\x13RollFormulaCostData\x120\n\x13SelectFormulaIdL\
    ist\x18\x08\x20\x03(\rR\x13SelectFormulaIdList\x122\n\x14RollFormulaFree\
    Count\x18\x01\x20\x01(\rR\x14RollFormulaFreeCount\x12@\n\x1bHandbookUnlo\
    ckFormulaIdList\x18\x03\x20\x03(\rR\x1bHandbookUnlockFormulaIdList\x12*\
    \n\x10RollFormulaCount\x18\t\x20\x01(\rR\x10RollFormulaCount\x12\x18\n\
    \x07CanRoll\x18\x02\x20\x01(\x08R\x07CanRoll\x120\n\x13RollFormulaMaxCou\
    nt\x18\x05\x20\x01(\rR\x13RollFormulaMaxCount\x12\x16\n\x06HintId\x18\
    \x07\x20\x01(\rR\x06HintIdB\x15\n\x13emu.lunarcore.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ItemCostList::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueFormulaSelectInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
