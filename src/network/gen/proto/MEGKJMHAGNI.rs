// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MEGKJMHAGNI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:MEGKJMHAGNI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MEGKJMHAGNI {
    // message fields
    // @@protoc_insertion_point(field:MEGKJMHAGNI.HPPCLAODCLC)
    pub HPPCLAODCLC: bool,
    // @@protoc_insertion_point(field:MEGKJMHAGNI.IOPEEMNLIDM)
    pub IOPEEMNLIDM: ::protobuf::EnumOrUnknown<super::RogueStatus::RogueStatus>,
    // @@protoc_insertion_point(field:MEGKJMHAGNI.MJKPCDJJEML)
    pub MJKPCDJJEML: ::protobuf::MessageField<super::BLIMEDCMHMN::BLIMEDCMHMN>,
    // @@protoc_insertion_point(field:MEGKJMHAGNI.OBNMBPEKKIN)
    pub OBNMBPEKKIN: ::protobuf::MessageField<super::DLMKCFLEOJF::DLMKCFLEOJF>,
    // @@protoc_insertion_point(field:MEGKJMHAGNI.JMELHEKBPBL)
    pub JMELHEKBPBL: ::protobuf::MessageField<super::CCAFKPJDMOK::CCAFKPJDMOK>,
    // @@protoc_insertion_point(field:MEGKJMHAGNI.IJOPANKCEKJ)
    pub IJOPANKCEKJ: ::protobuf::MessageField<super::AMKMAMDEHFL::AMKMAMDEHFL>,
    // @@protoc_insertion_point(field:MEGKJMHAGNI.GOKMADGGOCB)
    pub GOKMADGGOCB: ::protobuf::MessageField<super::KFMMOMJDEKK::KFMMOMJDEKK>,
    // @@protoc_insertion_point(field:MEGKJMHAGNI.FPGMDIPJKDJ)
    pub FPGMDIPJKDJ: ::protobuf::MessageField<super::MNGPFPHNEOA::MNGPFPHNEOA>,
    // @@protoc_insertion_point(field:MEGKJMHAGNI.EELBEPMNPGI)
    pub EELBEPMNPGI: ::protobuf::MessageField<super::PBEAPDEOHGB::PBEAPDEOHGB>,
    // @@protoc_insertion_point(field:MEGKJMHAGNI.LCFANOLIPIJ)
    pub LCFANOLIPIJ: ::protobuf::MessageField<super::DEFIBAENEFF::DEFIBAENEFF>,
    // special fields
    // @@protoc_insertion_point(special_field:MEGKJMHAGNI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MEGKJMHAGNI {
    fn default() -> &'a MEGKJMHAGNI {
        <MEGKJMHAGNI as ::protobuf::Message>::default_instance()
    }
}

impl MEGKJMHAGNI {
    pub fn new() -> MEGKJMHAGNI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HPPCLAODCLC",
            |m: &MEGKJMHAGNI| { &m.HPPCLAODCLC },
            |m: &mut MEGKJMHAGNI| { &mut m.HPPCLAODCLC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IOPEEMNLIDM",
            |m: &MEGKJMHAGNI| { &m.IOPEEMNLIDM },
            |m: &mut MEGKJMHAGNI| { &mut m.IOPEEMNLIDM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BLIMEDCMHMN::BLIMEDCMHMN>(
            "MJKPCDJJEML",
            |m: &MEGKJMHAGNI| { &m.MJKPCDJJEML },
            |m: &mut MEGKJMHAGNI| { &mut m.MJKPCDJJEML },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DLMKCFLEOJF::DLMKCFLEOJF>(
            "OBNMBPEKKIN",
            |m: &MEGKJMHAGNI| { &m.OBNMBPEKKIN },
            |m: &mut MEGKJMHAGNI| { &mut m.OBNMBPEKKIN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CCAFKPJDMOK::CCAFKPJDMOK>(
            "JMELHEKBPBL",
            |m: &MEGKJMHAGNI| { &m.JMELHEKBPBL },
            |m: &mut MEGKJMHAGNI| { &mut m.JMELHEKBPBL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AMKMAMDEHFL::AMKMAMDEHFL>(
            "IJOPANKCEKJ",
            |m: &MEGKJMHAGNI| { &m.IJOPANKCEKJ },
            |m: &mut MEGKJMHAGNI| { &mut m.IJOPANKCEKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KFMMOMJDEKK::KFMMOMJDEKK>(
            "GOKMADGGOCB",
            |m: &MEGKJMHAGNI| { &m.GOKMADGGOCB },
            |m: &mut MEGKJMHAGNI| { &mut m.GOKMADGGOCB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MNGPFPHNEOA::MNGPFPHNEOA>(
            "FPGMDIPJKDJ",
            |m: &MEGKJMHAGNI| { &m.FPGMDIPJKDJ },
            |m: &mut MEGKJMHAGNI| { &mut m.FPGMDIPJKDJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PBEAPDEOHGB::PBEAPDEOHGB>(
            "EELBEPMNPGI",
            |m: &MEGKJMHAGNI| { &m.EELBEPMNPGI },
            |m: &mut MEGKJMHAGNI| { &mut m.EELBEPMNPGI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DEFIBAENEFF::DEFIBAENEFF>(
            "LCFANOLIPIJ",
            |m: &MEGKJMHAGNI| { &m.LCFANOLIPIJ },
            |m: &mut MEGKJMHAGNI| { &mut m.LCFANOLIPIJ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MEGKJMHAGNI>(
            "MEGKJMHAGNI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MEGKJMHAGNI {
    const NAME: &'static str = "MEGKJMHAGNI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.HPPCLAODCLC = is.read_bool()?;
                },
                16 => {
                    self.IOPEEMNLIDM = is.read_enum_or_unknown()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MJKPCDJJEML)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OBNMBPEKKIN)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JMELHEKBPBL)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IJOPANKCEKJ)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GOKMADGGOCB)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FPGMDIPJKDJ)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EELBEPMNPGI)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LCFANOLIPIJ)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HPPCLAODCLC != false {
            my_size += 1 + 1;
        }
        if self.IOPEEMNLIDM != ::protobuf::EnumOrUnknown::new(super::RogueStatus::RogueStatus::ROGUE_STATUS_NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.IOPEEMNLIDM.value());
        }
        if let Some(v) = self.MJKPCDJJEML.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OBNMBPEKKIN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JMELHEKBPBL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.IJOPANKCEKJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.GOKMADGGOCB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.FPGMDIPJKDJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.EELBEPMNPGI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LCFANOLIPIJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HPPCLAODCLC != false {
            os.write_bool(4, self.HPPCLAODCLC)?;
        }
        if self.IOPEEMNLIDM != ::protobuf::EnumOrUnknown::new(super::RogueStatus::RogueStatus::ROGUE_STATUS_NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.IOPEEMNLIDM))?;
        }
        if let Some(v) = self.MJKPCDJJEML.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.OBNMBPEKKIN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.JMELHEKBPBL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.IJOPANKCEKJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.GOKMADGGOCB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.FPGMDIPJKDJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.EELBEPMNPGI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.LCFANOLIPIJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MEGKJMHAGNI {
        MEGKJMHAGNI::new()
    }

    fn clear(&mut self) {
        self.HPPCLAODCLC = false;
        self.IOPEEMNLIDM = ::protobuf::EnumOrUnknown::new(super::RogueStatus::RogueStatus::ROGUE_STATUS_NONE);
        self.MJKPCDJJEML.clear();
        self.OBNMBPEKKIN.clear();
        self.JMELHEKBPBL.clear();
        self.IJOPANKCEKJ.clear();
        self.GOKMADGGOCB.clear();
        self.FPGMDIPJKDJ.clear();
        self.EELBEPMNPGI.clear();
        self.LCFANOLIPIJ.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MEGKJMHAGNI {
        static instance: MEGKJMHAGNI = MEGKJMHAGNI {
            HPPCLAODCLC: false,
            IOPEEMNLIDM: ::protobuf::EnumOrUnknown::from_i32(0),
            MJKPCDJJEML: ::protobuf::MessageField::none(),
            OBNMBPEKKIN: ::protobuf::MessageField::none(),
            JMELHEKBPBL: ::protobuf::MessageField::none(),
            IJOPANKCEKJ: ::protobuf::MessageField::none(),
            GOKMADGGOCB: ::protobuf::MessageField::none(),
            FPGMDIPJKDJ: ::protobuf::MessageField::none(),
            EELBEPMNPGI: ::protobuf::MessageField::none(),
            LCFANOLIPIJ: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MEGKJMHAGNI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MEGKJMHAGNI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MEGKJMHAGNI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MEGKJMHAGNI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MEGKJMHAGNI.proto\x1a\x11AMKMAMDEHFL.proto\x1a\x11BLIMEDCMHMN.prot\
    o\x1a\x11CCAFKPJDMOK.proto\x1a\x11DEFIBAENEFF.proto\x1a\x11DLMKCFLEOJF.p\
    roto\x1a\x11KFMMOMJDEKK.proto\x1a\x11MNGPFPHNEOA.proto\x1a\x11PBEAPDEOHG\
    B.proto\x1a\x11RogueStatus.proto\"\xdf\x03\n\x0bMEGKJMHAGNI\x12\x20\n\
    \x0bHPPCLAODCLC\x18\x04\x20\x01(\x08R\x0bHPPCLAODCLC\x12.\n\x0bIOPEEMNLI\
    DM\x18\x02\x20\x01(\x0e2\x0c.RogueStatusR\x0bIOPEEMNLIDM\x12.\n\x0bMJKPC\
    DJJEML\x18\x06\x20\x01(\x0b2\x0c.BLIMEDCMHMNR\x0bMJKPCDJJEML\x12.\n\x0bO\
    BNMBPEKKIN\x18\n\x20\x01(\x0b2\x0c.DLMKCFLEOJFR\x0bOBNMBPEKKIN\x12.\n\
    \x0bJMELHEKBPBL\x18\x0c\x20\x01(\x0b2\x0c.CCAFKPJDMOKR\x0bJMELHEKBPBL\
    \x12.\n\x0bIJOPANKCEKJ\x18\t\x20\x01(\x0b2\x0c.AMKMAMDEHFLR\x0bIJOPANKCE\
    KJ\x12.\n\x0bGOKMADGGOCB\x18\x0b\x20\x01(\x0b2\x0c.KFMMOMJDEKKR\x0bGOKMA\
    DGGOCB\x12.\n\x0bFPGMDIPJKDJ\x18\x0e\x20\x01(\x0b2\x0c.MNGPFPHNEOAR\x0bF\
    PGMDIPJKDJ\x12.\n\x0bEELBEPMNPGI\x18\r\x20\x01(\x0b2\x0c.PBEAPDEOHGBR\
    \x0bEELBEPMNPGI\x12.\n\x0bLCFANOLIPIJ\x18\x01\x20\x01(\x0b2\x0c.DEFIBAEN\
    EFFR\x0bLCFANOLIPIJb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(9);
            deps.push(super::AMKMAMDEHFL::file_descriptor().clone());
            deps.push(super::BLIMEDCMHMN::file_descriptor().clone());
            deps.push(super::CCAFKPJDMOK::file_descriptor().clone());
            deps.push(super::DEFIBAENEFF::file_descriptor().clone());
            deps.push(super::DLMKCFLEOJF::file_descriptor().clone());
            deps.push(super::KFMMOMJDEKK::file_descriptor().clone());
            deps.push(super::MNGPFPHNEOA::file_descriptor().clone());
            deps.push(super::PBEAPDEOHGB::file_descriptor().clone());
            deps.push(super::RogueStatus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MEGKJMHAGNI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
