// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdWaypointType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdWaypointType)
pub enum CmdWaypointType {
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdWaypointTypeNone)
    CmdWaypointTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdGetChapterCsReq)
    CmdGetChapterCsReq = 479,
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdGetChapterScRsp)
    CmdGetChapterScRsp = 477,
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdTakeChapterRewardCsReq)
    CmdTakeChapterRewardCsReq = 412,
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdSetCurWaypointScRsp)
    CmdSetCurWaypointScRsp = 442,
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdGetWaypointScRsp)
    CmdGetWaypointScRsp = 471,
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdWaypointShowNewCsNotify)
    CmdWaypointShowNewCsNotify = 433,
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdSetCurWaypointCsReq)
    CmdSetCurWaypointCsReq = 483,
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdGetWaypointCsReq)
    CmdGetWaypointCsReq = 498,
    // @@protoc_insertion_point(enum_value:CmdWaypointType.CmdTakeChapterRewardScRsp)
    CmdTakeChapterRewardScRsp = 428,
}

impl ::protobuf::Enum for CmdWaypointType {
    const NAME: &'static str = "CmdWaypointType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdWaypointType> {
        match value {
            0 => ::std::option::Option::Some(CmdWaypointType::CmdWaypointTypeNone),
            479 => ::std::option::Option::Some(CmdWaypointType::CmdGetChapterCsReq),
            477 => ::std::option::Option::Some(CmdWaypointType::CmdGetChapterScRsp),
            412 => ::std::option::Option::Some(CmdWaypointType::CmdTakeChapterRewardCsReq),
            442 => ::std::option::Option::Some(CmdWaypointType::CmdSetCurWaypointScRsp),
            471 => ::std::option::Option::Some(CmdWaypointType::CmdGetWaypointScRsp),
            433 => ::std::option::Option::Some(CmdWaypointType::CmdWaypointShowNewCsNotify),
            483 => ::std::option::Option::Some(CmdWaypointType::CmdSetCurWaypointCsReq),
            498 => ::std::option::Option::Some(CmdWaypointType::CmdGetWaypointCsReq),
            428 => ::std::option::Option::Some(CmdWaypointType::CmdTakeChapterRewardScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdWaypointType> {
        match str {
            "CmdWaypointTypeNone" => ::std::option::Option::Some(CmdWaypointType::CmdWaypointTypeNone),
            "CmdGetChapterCsReq" => ::std::option::Option::Some(CmdWaypointType::CmdGetChapterCsReq),
            "CmdGetChapterScRsp" => ::std::option::Option::Some(CmdWaypointType::CmdGetChapterScRsp),
            "CmdTakeChapterRewardCsReq" => ::std::option::Option::Some(CmdWaypointType::CmdTakeChapterRewardCsReq),
            "CmdSetCurWaypointScRsp" => ::std::option::Option::Some(CmdWaypointType::CmdSetCurWaypointScRsp),
            "CmdGetWaypointScRsp" => ::std::option::Option::Some(CmdWaypointType::CmdGetWaypointScRsp),
            "CmdWaypointShowNewCsNotify" => ::std::option::Option::Some(CmdWaypointType::CmdWaypointShowNewCsNotify),
            "CmdSetCurWaypointCsReq" => ::std::option::Option::Some(CmdWaypointType::CmdSetCurWaypointCsReq),
            "CmdGetWaypointCsReq" => ::std::option::Option::Some(CmdWaypointType::CmdGetWaypointCsReq),
            "CmdTakeChapterRewardScRsp" => ::std::option::Option::Some(CmdWaypointType::CmdTakeChapterRewardScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdWaypointType] = &[
        CmdWaypointType::CmdWaypointTypeNone,
        CmdWaypointType::CmdGetChapterCsReq,
        CmdWaypointType::CmdGetChapterScRsp,
        CmdWaypointType::CmdTakeChapterRewardCsReq,
        CmdWaypointType::CmdSetCurWaypointScRsp,
        CmdWaypointType::CmdGetWaypointScRsp,
        CmdWaypointType::CmdWaypointShowNewCsNotify,
        CmdWaypointType::CmdSetCurWaypointCsReq,
        CmdWaypointType::CmdGetWaypointCsReq,
        CmdWaypointType::CmdTakeChapterRewardScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdWaypointType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdWaypointType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdWaypointType::CmdWaypointTypeNone => 0,
            CmdWaypointType::CmdGetChapterCsReq => 1,
            CmdWaypointType::CmdGetChapterScRsp => 2,
            CmdWaypointType::CmdTakeChapterRewardCsReq => 3,
            CmdWaypointType::CmdSetCurWaypointScRsp => 4,
            CmdWaypointType::CmdGetWaypointScRsp => 5,
            CmdWaypointType::CmdWaypointShowNewCsNotify => 6,
            CmdWaypointType::CmdSetCurWaypointCsReq => 7,
            CmdWaypointType::CmdGetWaypointCsReq => 8,
            CmdWaypointType::CmdTakeChapterRewardScRsp => 9,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdWaypointType {
    fn default() -> Self {
        CmdWaypointType::CmdWaypointTypeNone
    }
}

impl CmdWaypointType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdWaypointType>("CmdWaypointType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15CmdWaypointType.proto*\xab\x02\n\x0fCmdWaypointType\x12\x17\n\x13C\
    mdWaypointTypeNone\x10\0\x12\x17\n\x12CmdGetChapterCsReq\x10\xdf\x03\x12\
    \x17\n\x12CmdGetChapterScRsp\x10\xdd\x03\x12\x1e\n\x19CmdTakeChapterRewa\
    rdCsReq\x10\x9c\x03\x12\x1b\n\x16CmdSetCurWaypointScRsp\x10\xba\x03\x12\
    \x18\n\x13CmdGetWaypointScRsp\x10\xd7\x03\x12\x1f\n\x1aCmdWaypointShowNe\
    wCsNotify\x10\xb1\x03\x12\x1b\n\x16CmdSetCurWaypointCsReq\x10\xe3\x03\
    \x12\x18\n\x13CmdGetWaypointCsReq\x10\xf2\x03\x12\x1e\n\x19CmdTakeChapte\
    rRewardScRsp\x10\xac\x03b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdWaypointType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
