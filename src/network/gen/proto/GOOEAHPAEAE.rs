// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GOOEAHPAEAE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GOOEAHPAEAE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GOOEAHPAEAE {
    // message fields
    // @@protoc_insertion_point(field:GOOEAHPAEAE.FFKNMAONGIB)
    pub FFKNMAONGIB: u64,
    // @@protoc_insertion_point(field:GOOEAHPAEAE.PCOOOLKCJOD)
    pub PCOOOLKCJOD: ::protobuf::EnumOrUnknown<super::FightGameMode::FightGameMode>,
    // @@protoc_insertion_point(field:GOOEAHPAEAE.ILCADHLKKHH)
    pub ILCADHLKKHH: ::std::vec::Vec<super::GDOHNMGABGE::GDOHNMGABGE>,
    // @@protoc_insertion_point(field:GOOEAHPAEAE.slot)
    pub slot: ::protobuf::EnumOrUnknown<super::HJKELGENIBJ::HJKELGENIBJ>,
    // @@protoc_insertion_point(field:GOOEAHPAEAE.BGEFJACAEKA)
    pub BGEFJACAEKA: u64,
    // @@protoc_insertion_point(field:GOOEAHPAEAE.JDDKPCECHEM)
    pub JDDKPCECHEM: u64,
    // @@protoc_insertion_point(field:GOOEAHPAEAE.DFHDBEJMKKE)
    pub DFHDBEJMKKE: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GOOEAHPAEAE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GOOEAHPAEAE {
    fn default() -> &'a GOOEAHPAEAE {
        <GOOEAHPAEAE as ::protobuf::Message>::default_instance()
    }
}

impl GOOEAHPAEAE {
    pub fn new() -> GOOEAHPAEAE {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FFKNMAONGIB",
            |m: &GOOEAHPAEAE| { &m.FFKNMAONGIB },
            |m: &mut GOOEAHPAEAE| { &mut m.FFKNMAONGIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PCOOOLKCJOD",
            |m: &GOOEAHPAEAE| { &m.PCOOOLKCJOD },
            |m: &mut GOOEAHPAEAE| { &mut m.PCOOOLKCJOD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ILCADHLKKHH",
            |m: &GOOEAHPAEAE| { &m.ILCADHLKKHH },
            |m: &mut GOOEAHPAEAE| { &mut m.ILCADHLKKHH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slot",
            |m: &GOOEAHPAEAE| { &m.slot },
            |m: &mut GOOEAHPAEAE| { &mut m.slot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BGEFJACAEKA",
            |m: &GOOEAHPAEAE| { &m.BGEFJACAEKA },
            |m: &mut GOOEAHPAEAE| { &mut m.BGEFJACAEKA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JDDKPCECHEM",
            |m: &GOOEAHPAEAE| { &m.JDDKPCECHEM },
            |m: &mut GOOEAHPAEAE| { &mut m.JDDKPCECHEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DFHDBEJMKKE",
            |m: &GOOEAHPAEAE| { &m.DFHDBEJMKKE },
            |m: &mut GOOEAHPAEAE| { &mut m.DFHDBEJMKKE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GOOEAHPAEAE>(
            "GOOEAHPAEAE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GOOEAHPAEAE {
    const NAME: &'static str = "GOOEAHPAEAE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.FFKNMAONGIB = is.read_uint64()?;
                },
                16 => {
                    self.PCOOOLKCJOD = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.ILCADHLKKHH.push(is.read_message()?);
                },
                32 => {
                    self.slot = is.read_enum_or_unknown()?;
                },
                40 => {
                    self.BGEFJACAEKA = is.read_uint64()?;
                },
                48 => {
                    self.JDDKPCECHEM = is.read_uint64()?;
                },
                56 => {
                    self.DFHDBEJMKKE = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.FFKNMAONGIB != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.FFKNMAONGIB);
        }
        if self.PCOOOLKCJOD != ::protobuf::EnumOrUnknown::new(super::FightGameMode::FightGameMode::FIGHT_GAME_MODE_NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.PCOOOLKCJOD.value());
        }
        for value in &self.ILCADHLKKHH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.slot != ::protobuf::EnumOrUnknown::new(super::HJKELGENIBJ::HJKELGENIBJ::MATCH_UNIT_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(4, self.slot.value());
        }
        if self.BGEFJACAEKA != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.BGEFJACAEKA);
        }
        if self.JDDKPCECHEM != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.JDDKPCECHEM);
        }
        if self.DFHDBEJMKKE != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.DFHDBEJMKKE);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.FFKNMAONGIB != 0 {
            os.write_uint64(1, self.FFKNMAONGIB)?;
        }
        if self.PCOOOLKCJOD != ::protobuf::EnumOrUnknown::new(super::FightGameMode::FightGameMode::FIGHT_GAME_MODE_NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.PCOOOLKCJOD))?;
        }
        for v in &self.ILCADHLKKHH {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.slot != ::protobuf::EnumOrUnknown::new(super::HJKELGENIBJ::HJKELGENIBJ::MATCH_UNIT_TYPE_NONE) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.slot))?;
        }
        if self.BGEFJACAEKA != 0 {
            os.write_uint64(5, self.BGEFJACAEKA)?;
        }
        if self.JDDKPCECHEM != 0 {
            os.write_uint64(6, self.JDDKPCECHEM)?;
        }
        if self.DFHDBEJMKKE != 0 {
            os.write_uint32(7, self.DFHDBEJMKKE)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GOOEAHPAEAE {
        GOOEAHPAEAE::new()
    }

    fn clear(&mut self) {
        self.FFKNMAONGIB = 0;
        self.PCOOOLKCJOD = ::protobuf::EnumOrUnknown::new(super::FightGameMode::FightGameMode::FIGHT_GAME_MODE_NONE);
        self.ILCADHLKKHH.clear();
        self.slot = ::protobuf::EnumOrUnknown::new(super::HJKELGENIBJ::HJKELGENIBJ::MATCH_UNIT_TYPE_NONE);
        self.BGEFJACAEKA = 0;
        self.JDDKPCECHEM = 0;
        self.DFHDBEJMKKE = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GOOEAHPAEAE {
        static instance: GOOEAHPAEAE = GOOEAHPAEAE {
            FFKNMAONGIB: 0,
            PCOOOLKCJOD: ::protobuf::EnumOrUnknown::from_i32(0),
            ILCADHLKKHH: ::std::vec::Vec::new(),
            slot: ::protobuf::EnumOrUnknown::from_i32(0),
            BGEFJACAEKA: 0,
            JDDKPCECHEM: 0,
            DFHDBEJMKKE: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GOOEAHPAEAE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GOOEAHPAEAE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GOOEAHPAEAE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GOOEAHPAEAE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GOOEAHPAEAE.proto\x1a\x13FightGameMode.proto\x1a\x11GDOHNMGABGE.pr\
    oto\x1a\x11HJKELGENIBJ.proto\"\x99\x02\n\x0bGOOEAHPAEAE\x12\x20\n\x0bFFK\
    NMAONGIB\x18\x01\x20\x01(\x04R\x0bFFKNMAONGIB\x120\n\x0bPCOOOLKCJOD\x18\
    \x02\x20\x01(\x0e2\x0e.FightGameModeR\x0bPCOOOLKCJOD\x12.\n\x0bILCADHLKK\
    HH\x18\x03\x20\x03(\x0b2\x0c.GDOHNMGABGER\x0bILCADHLKKHH\x12\x20\n\x04sl\
    ot\x18\x04\x20\x01(\x0e2\x0c.HJKELGENIBJR\x04slot\x12\x20\n\x0bBGEFJACAE\
    KA\x18\x05\x20\x01(\x04R\x0bBGEFJACAEKA\x12\x20\n\x0bJDDKPCECHEM\x18\x06\
    \x20\x01(\x04R\x0bJDDKPCECHEM\x12\x20\n\x0bDFHDBEJMKKE\x18\x07\x20\x01(\
    \rR\x0bDFHDBEJMKKEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::FightGameMode::file_descriptor().clone());
            deps.push(super::GDOHNMGABGE::file_descriptor().clone());
            deps.push(super::HJKELGENIBJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GOOEAHPAEAE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
