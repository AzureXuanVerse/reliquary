// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AKPDFLPIKBM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:AKPDFLPIKBM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AKPDFLPIKBM {
    // message fields
    // @@protoc_insertion_point(field:AKPDFLPIKBM.MOJGGONNHMF)
    pub MOJGGONNHMF: u32,
    // @@protoc_insertion_point(field:AKPDFLPIKBM.FBNKBAKIGHI)
    pub FBNKBAKIGHI: bool,
    // message oneof groups
    pub HCLICCIMGIN: ::std::option::Option<akpdflpikbm::HCLICCIMGIN>,
    // special fields
    // @@protoc_insertion_point(special_field:AKPDFLPIKBM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AKPDFLPIKBM {
    fn default() -> &'a AKPDFLPIKBM {
        <AKPDFLPIKBM as ::protobuf::Message>::default_instance()
    }
}

impl AKPDFLPIKBM {
    pub fn new() -> AKPDFLPIKBM {
        ::std::default::Default::default()
    }

    // .OMJMJIEMDFI ADDGLPFJHHD = 10;

    pub fn ADDGLPFJHHD(&self) -> &super::OMJMJIEMDFI::OMJMJIEMDFI {
        match self.HCLICCIMGIN {
            ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(ref v)) => v,
            _ => <super::OMJMJIEMDFI::OMJMJIEMDFI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ADDGLPFJHHD(&mut self) {
        self.HCLICCIMGIN = ::std::option::Option::None;
    }

    pub fn has_ADDGLPFJHHD(&self) -> bool {
        match self.HCLICCIMGIN {
            ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ADDGLPFJHHD(&mut self, v: super::OMJMJIEMDFI::OMJMJIEMDFI) {
        self.HCLICCIMGIN = ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ADDGLPFJHHD(&mut self) -> &mut super::OMJMJIEMDFI::OMJMJIEMDFI {
        if let ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(_)) = self.HCLICCIMGIN {
        } else {
            self.HCLICCIMGIN = ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(super::OMJMJIEMDFI::OMJMJIEMDFI::new()));
        }
        match self.HCLICCIMGIN {
            ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ADDGLPFJHHD(&mut self) -> super::OMJMJIEMDFI::OMJMJIEMDFI {
        if self.has_ADDGLPFJHHD() {
            match self.HCLICCIMGIN.take() {
                ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMJMJIEMDFI::OMJMJIEMDFI::new()
        }
    }

    // .LLHKFMLNEMP BNGLHBMIGJA = 1;

    pub fn BNGLHBMIGJA(&self) -> &super::LLHKFMLNEMP::LLHKFMLNEMP {
        match self.HCLICCIMGIN {
            ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(ref v)) => v,
            _ => <super::LLHKFMLNEMP::LLHKFMLNEMP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BNGLHBMIGJA(&mut self) {
        self.HCLICCIMGIN = ::std::option::Option::None;
    }

    pub fn has_BNGLHBMIGJA(&self) -> bool {
        match self.HCLICCIMGIN {
            ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BNGLHBMIGJA(&mut self, v: super::LLHKFMLNEMP::LLHKFMLNEMP) {
        self.HCLICCIMGIN = ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BNGLHBMIGJA(&mut self) -> &mut super::LLHKFMLNEMP::LLHKFMLNEMP {
        if let ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(_)) = self.HCLICCIMGIN {
        } else {
            self.HCLICCIMGIN = ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(super::LLHKFMLNEMP::LLHKFMLNEMP::new()));
        }
        match self.HCLICCIMGIN {
            ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BNGLHBMIGJA(&mut self) -> super::LLHKFMLNEMP::LLHKFMLNEMP {
        if self.has_BNGLHBMIGJA() {
            match self.HCLICCIMGIN.take() {
                ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LLHKFMLNEMP::LLHKFMLNEMP::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MOJGGONNHMF",
            |m: &AKPDFLPIKBM| { &m.MOJGGONNHMF },
            |m: &mut AKPDFLPIKBM| { &mut m.MOJGGONNHMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FBNKBAKIGHI",
            |m: &AKPDFLPIKBM| { &m.FBNKBAKIGHI },
            |m: &mut AKPDFLPIKBM| { &mut m.FBNKBAKIGHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMJMJIEMDFI::OMJMJIEMDFI>(
            "ADDGLPFJHHD",
            AKPDFLPIKBM::has_ADDGLPFJHHD,
            AKPDFLPIKBM::ADDGLPFJHHD,
            AKPDFLPIKBM::mut_ADDGLPFJHHD,
            AKPDFLPIKBM::set_ADDGLPFJHHD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LLHKFMLNEMP::LLHKFMLNEMP>(
            "BNGLHBMIGJA",
            AKPDFLPIKBM::has_BNGLHBMIGJA,
            AKPDFLPIKBM::BNGLHBMIGJA,
            AKPDFLPIKBM::mut_BNGLHBMIGJA,
            AKPDFLPIKBM::set_BNGLHBMIGJA,
        ));
        oneofs.push(akpdflpikbm::HCLICCIMGIN::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AKPDFLPIKBM>(
            "AKPDFLPIKBM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AKPDFLPIKBM {
    const NAME: &'static str = "AKPDFLPIKBM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                64 => {
                    self.MOJGGONNHMF = is.read_uint32()?;
                },
                112 => {
                    self.FBNKBAKIGHI = is.read_bool()?;
                },
                82 => {
                    self.HCLICCIMGIN = ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(is.read_message()?));
                },
                10 => {
                    self.HCLICCIMGIN = ::std::option::Option::Some(akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.MOJGGONNHMF != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.MOJGGONNHMF);
        }
        if self.FBNKBAKIGHI != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.HCLICCIMGIN {
            match v {
                &akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.MOJGGONNHMF != 0 {
            os.write_uint32(8, self.MOJGGONNHMF)?;
        }
        if self.FBNKBAKIGHI != false {
            os.write_bool(14, self.FBNKBAKIGHI)?;
        }
        if let ::std::option::Option::Some(ref v) = self.HCLICCIMGIN {
            match v {
                &akpdflpikbm::HCLICCIMGIN::ADDGLPFJHHD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &akpdflpikbm::HCLICCIMGIN::BNGLHBMIGJA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AKPDFLPIKBM {
        AKPDFLPIKBM::new()
    }

    fn clear(&mut self) {
        self.MOJGGONNHMF = 0;
        self.FBNKBAKIGHI = false;
        self.HCLICCIMGIN = ::std::option::Option::None;
        self.HCLICCIMGIN = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AKPDFLPIKBM {
        static instance: AKPDFLPIKBM = AKPDFLPIKBM {
            MOJGGONNHMF: 0,
            FBNKBAKIGHI: false,
            HCLICCIMGIN: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AKPDFLPIKBM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AKPDFLPIKBM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AKPDFLPIKBM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AKPDFLPIKBM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AKPDFLPIKBM`
pub mod akpdflpikbm {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AKPDFLPIKBM.HCLICCIMGIN)
    pub enum HCLICCIMGIN {
        // @@protoc_insertion_point(oneof_field:AKPDFLPIKBM.ADDGLPFJHHD)
        ADDGLPFJHHD(super::super::OMJMJIEMDFI::OMJMJIEMDFI),
        // @@protoc_insertion_point(oneof_field:AKPDFLPIKBM.BNGLHBMIGJA)
        BNGLHBMIGJA(super::super::LLHKFMLNEMP::LLHKFMLNEMP),
    }

    impl ::protobuf::Oneof for HCLICCIMGIN {
    }

    impl ::protobuf::OneofFull for HCLICCIMGIN {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AKPDFLPIKBM as ::protobuf::MessageFull>::descriptor().oneof_by_name("HCLICCIMGIN").unwrap()).clone()
        }
    }

    impl HCLICCIMGIN {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<HCLICCIMGIN>("HCLICCIMGIN")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AKPDFLPIKBM.proto\x1a\x11LLHKFMLNEMP.proto\x1a\x11OMJMJIEMDFI.prot\
    o\"\xc4\x01\n\x0bAKPDFLPIKBM\x12\x20\n\x0bMOJGGONNHMF\x18\x08\x20\x01(\r\
    R\x0bMOJGGONNHMF\x12\x20\n\x0bFBNKBAKIGHI\x18\x0e\x20\x01(\x08R\x0bFBNKB\
    AKIGHI\x120\n\x0bADDGLPFJHHD\x18\n\x20\x01(\x0b2\x0c.OMJMJIEMDFIH\0R\x0b\
    ADDGLPFJHHD\x120\n\x0bBNGLHBMIGJA\x18\x01\x20\x01(\x0b2\x0c.LLHKFMLNEMPH\
    \0R\x0bBNGLHBMIGJAB\r\n\x0bHCLICCIMGINb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::LLHKFMLNEMP::file_descriptor().clone());
            deps.push(super::OMJMJIEMDFI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AKPDFLPIKBM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
