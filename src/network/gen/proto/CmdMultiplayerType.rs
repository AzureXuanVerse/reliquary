// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdMultiplayerType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdMultiplayerType)
pub enum CmdMultiplayerType {
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerTypeNone)
    CmdMultiplayerTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerMatch3FinishScNotify)
    CmdMultiplayerMatch3FinishScNotify = 1024,
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerFightGameStateCsReq)
    CmdMultiplayerFightGameStateCsReq = 1036,
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerFightGameStateScRsp)
    CmdMultiplayerFightGameStateScRsp = 1095,
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerGetFightGateCsReq)
    CmdMultiplayerGetFightGateCsReq = 1084,
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerFightGameStartScNotify)
    CmdMultiplayerFightGameStartScNotify = 1052,
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerFightGameFinishScNotify)
    CmdMultiplayerFightGameFinishScNotify = 1074,
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerGetFightGateScRsp)
    CmdMultiplayerGetFightGateScRsp = 1027,
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerFightGiveUpCsReq)
    CmdMultiplayerFightGiveUpCsReq = 1067,
    // @@protoc_insertion_point(enum_value:CmdMultiplayerType.CmdMultiplayerFightGiveUpScRsp)
    CmdMultiplayerFightGiveUpScRsp = 1028,
}

impl ::protobuf::Enum for CmdMultiplayerType {
    const NAME: &'static str = "CmdMultiplayerType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdMultiplayerType> {
        match value {
            0 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerTypeNone),
            1024 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerMatch3FinishScNotify),
            1036 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGameStateCsReq),
            1095 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGameStateScRsp),
            1084 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerGetFightGateCsReq),
            1052 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGameStartScNotify),
            1074 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGameFinishScNotify),
            1027 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerGetFightGateScRsp),
            1067 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGiveUpCsReq),
            1028 => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGiveUpScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdMultiplayerType> {
        match str {
            "CmdMultiplayerTypeNone" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerTypeNone),
            "CmdMultiplayerMatch3FinishScNotify" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerMatch3FinishScNotify),
            "CmdMultiplayerFightGameStateCsReq" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGameStateCsReq),
            "CmdMultiplayerFightGameStateScRsp" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGameStateScRsp),
            "CmdMultiplayerGetFightGateCsReq" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerGetFightGateCsReq),
            "CmdMultiplayerFightGameStartScNotify" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGameStartScNotify),
            "CmdMultiplayerFightGameFinishScNotify" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGameFinishScNotify),
            "CmdMultiplayerGetFightGateScRsp" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerGetFightGateScRsp),
            "CmdMultiplayerFightGiveUpCsReq" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGiveUpCsReq),
            "CmdMultiplayerFightGiveUpScRsp" => ::std::option::Option::Some(CmdMultiplayerType::CmdMultiplayerFightGiveUpScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdMultiplayerType] = &[
        CmdMultiplayerType::CmdMultiplayerTypeNone,
        CmdMultiplayerType::CmdMultiplayerMatch3FinishScNotify,
        CmdMultiplayerType::CmdMultiplayerFightGameStateCsReq,
        CmdMultiplayerType::CmdMultiplayerFightGameStateScRsp,
        CmdMultiplayerType::CmdMultiplayerGetFightGateCsReq,
        CmdMultiplayerType::CmdMultiplayerFightGameStartScNotify,
        CmdMultiplayerType::CmdMultiplayerFightGameFinishScNotify,
        CmdMultiplayerType::CmdMultiplayerGetFightGateScRsp,
        CmdMultiplayerType::CmdMultiplayerFightGiveUpCsReq,
        CmdMultiplayerType::CmdMultiplayerFightGiveUpScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdMultiplayerType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdMultiplayerType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdMultiplayerType::CmdMultiplayerTypeNone => 0,
            CmdMultiplayerType::CmdMultiplayerMatch3FinishScNotify => 1,
            CmdMultiplayerType::CmdMultiplayerFightGameStateCsReq => 2,
            CmdMultiplayerType::CmdMultiplayerFightGameStateScRsp => 3,
            CmdMultiplayerType::CmdMultiplayerGetFightGateCsReq => 4,
            CmdMultiplayerType::CmdMultiplayerFightGameStartScNotify => 5,
            CmdMultiplayerType::CmdMultiplayerFightGameFinishScNotify => 6,
            CmdMultiplayerType::CmdMultiplayerGetFightGateScRsp => 7,
            CmdMultiplayerType::CmdMultiplayerFightGiveUpCsReq => 8,
            CmdMultiplayerType::CmdMultiplayerFightGiveUpScRsp => 9,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdMultiplayerType {
    fn default() -> Self {
        CmdMultiplayerType::CmdMultiplayerTypeNone
    }
}

impl CmdMultiplayerType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdMultiplayerType>("CmdMultiplayerType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18CmdMultiplayerType.proto*\x96\x03\n\x12CmdMultiplayerType\x12\x1a\
    \n\x16CmdMultiplayerTypeNone\x10\0\x12'\n\"CmdMultiplayerMatch3FinishScN\
    otify\x10\x80\x08\x12&\n!CmdMultiplayerFightGameStateCsReq\x10\x8c\x08\
    \x12&\n!CmdMultiplayerFightGameStateScRsp\x10\xc7\x08\x12$\n\x1fCmdMulti\
    playerGetFightGateCsReq\x10\xbc\x08\x12)\n$CmdMultiplayerFightGameStartS\
    cNotify\x10\x9c\x08\x12*\n%CmdMultiplayerFightGameFinishScNotify\x10\xb2\
    \x08\x12$\n\x1fCmdMultiplayerGetFightGateScRsp\x10\x83\x08\x12#\n\x1eCmd\
    MultiplayerFightGiveUpCsReq\x10\xab\x08\x12#\n\x1eCmdMultiplayerFightGiv\
    eUpScRsp\x10\x84\x08b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdMultiplayerType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
