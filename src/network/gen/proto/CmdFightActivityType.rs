// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdFightActivityType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdFightActivityType)
pub enum CmdFightActivityType {
    // @@protoc_insertion_point(enum_value:CmdFightActivityType.CmdFightActivityTypeNone)
    CmdFightActivityTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdFightActivityType.CmdEnterFightActivityStageScRsp)
    CmdEnterFightActivityStageScRsp = 3667,
    // @@protoc_insertion_point(enum_value:CmdFightActivityType.CmdEnterFightActivityStageCsReq)
    CmdEnterFightActivityStageCsReq = 3627,
    // @@protoc_insertion_point(enum_value:CmdFightActivityType.CmdFightActivityDataChangeScNotify)
    CmdFightActivityDataChangeScNotify = 3684,
    // @@protoc_insertion_point(enum_value:CmdFightActivityType.CmdTakeFightActivityRewardCsReq)
    CmdTakeFightActivityRewardCsReq = 3628,
    // @@protoc_insertion_point(enum_value:CmdFightActivityType.CmdTakeFightActivityRewardScRsp)
    CmdTakeFightActivityRewardScRsp = 3652,
    // @@protoc_insertion_point(enum_value:CmdFightActivityType.CmdGetFightActivityDataScRsp)
    CmdGetFightActivityDataScRsp = 3695,
    // @@protoc_insertion_point(enum_value:CmdFightActivityType.CmdGetFightActivityDataCsReq)
    CmdGetFightActivityDataCsReq = 3636,
}

impl ::protobuf::Enum for CmdFightActivityType {
    const NAME: &'static str = "CmdFightActivityType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdFightActivityType> {
        match value {
            0 => ::std::option::Option::Some(CmdFightActivityType::CmdFightActivityTypeNone),
            3667 => ::std::option::Option::Some(CmdFightActivityType::CmdEnterFightActivityStageScRsp),
            3627 => ::std::option::Option::Some(CmdFightActivityType::CmdEnterFightActivityStageCsReq),
            3684 => ::std::option::Option::Some(CmdFightActivityType::CmdFightActivityDataChangeScNotify),
            3628 => ::std::option::Option::Some(CmdFightActivityType::CmdTakeFightActivityRewardCsReq),
            3652 => ::std::option::Option::Some(CmdFightActivityType::CmdTakeFightActivityRewardScRsp),
            3695 => ::std::option::Option::Some(CmdFightActivityType::CmdGetFightActivityDataScRsp),
            3636 => ::std::option::Option::Some(CmdFightActivityType::CmdGetFightActivityDataCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdFightActivityType> {
        match str {
            "CmdFightActivityTypeNone" => ::std::option::Option::Some(CmdFightActivityType::CmdFightActivityTypeNone),
            "CmdEnterFightActivityStageScRsp" => ::std::option::Option::Some(CmdFightActivityType::CmdEnterFightActivityStageScRsp),
            "CmdEnterFightActivityStageCsReq" => ::std::option::Option::Some(CmdFightActivityType::CmdEnterFightActivityStageCsReq),
            "CmdFightActivityDataChangeScNotify" => ::std::option::Option::Some(CmdFightActivityType::CmdFightActivityDataChangeScNotify),
            "CmdTakeFightActivityRewardCsReq" => ::std::option::Option::Some(CmdFightActivityType::CmdTakeFightActivityRewardCsReq),
            "CmdTakeFightActivityRewardScRsp" => ::std::option::Option::Some(CmdFightActivityType::CmdTakeFightActivityRewardScRsp),
            "CmdGetFightActivityDataScRsp" => ::std::option::Option::Some(CmdFightActivityType::CmdGetFightActivityDataScRsp),
            "CmdGetFightActivityDataCsReq" => ::std::option::Option::Some(CmdFightActivityType::CmdGetFightActivityDataCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdFightActivityType] = &[
        CmdFightActivityType::CmdFightActivityTypeNone,
        CmdFightActivityType::CmdEnterFightActivityStageScRsp,
        CmdFightActivityType::CmdEnterFightActivityStageCsReq,
        CmdFightActivityType::CmdFightActivityDataChangeScNotify,
        CmdFightActivityType::CmdTakeFightActivityRewardCsReq,
        CmdFightActivityType::CmdTakeFightActivityRewardScRsp,
        CmdFightActivityType::CmdGetFightActivityDataScRsp,
        CmdFightActivityType::CmdGetFightActivityDataCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdFightActivityType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdFightActivityType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdFightActivityType::CmdFightActivityTypeNone => 0,
            CmdFightActivityType::CmdEnterFightActivityStageScRsp => 1,
            CmdFightActivityType::CmdEnterFightActivityStageCsReq => 2,
            CmdFightActivityType::CmdFightActivityDataChangeScNotify => 3,
            CmdFightActivityType::CmdTakeFightActivityRewardCsReq => 4,
            CmdFightActivityType::CmdTakeFightActivityRewardScRsp => 5,
            CmdFightActivityType::CmdGetFightActivityDataScRsp => 6,
            CmdFightActivityType::CmdGetFightActivityDataCsReq => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdFightActivityType {
    fn default() -> Self {
        CmdFightActivityType::CmdFightActivityTypeNone
    }
}

impl CmdFightActivityType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdFightActivityType>("CmdFightActivityType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aCmdFightActivityType.proto*\xbb\x02\n\x14CmdFightActivityType\x12\
    \x1c\n\x18CmdFightActivityTypeNone\x10\0\x12$\n\x1fCmdEnterFightActivity\
    StageScRsp\x10\xd3\x1c\x12$\n\x1fCmdEnterFightActivityStageCsReq\x10\xab\
    \x1c\x12'\n\"CmdFightActivityDataChangeScNotify\x10\xe4\x1c\x12$\n\x1fCm\
    dTakeFightActivityRewardCsReq\x10\xac\x1c\x12$\n\x1fCmdTakeFightActivity\
    RewardScRsp\x10\xc4\x1c\x12!\n\x1cCmdGetFightActivityDataScRsp\x10\xef\
    \x1c\x12!\n\x1cCmdGetFightActivityDataCsReq\x10\xb4\x1cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdFightActivityType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
